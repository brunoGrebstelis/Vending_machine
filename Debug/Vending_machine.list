
Vending_machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aae4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000091c  0800ace8  0800ace8  0001ace8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b604  0800b604  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b604  0800b604  0001b604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b60c  0800b60c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b60c  0800b60c  0001b60c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b610  0800b610  0001b610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b614  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000046c  200001e8  0800b7f8  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000654  0800b7f8  00020654  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e0b8  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033d9  00000000  00000000  0003e2ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f28  00000000  00000000  000416a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  000425d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a4d8  00000000  00000000  000433a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d59  00000000  00000000  0006d878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6714  00000000  00000000  000835d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00179ce5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005164  00000000  00000000  00179d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e8 	.word	0x200001e8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800accc 	.word	0x0800accc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ec 	.word	0x200001ec
 800023c:	0800accc 	.word	0x0800accc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <CheckTemperature>:
static bool tempSensFailed = false;
static bool tempBelowZero = false;


// Periodic temperature check
void CheckTemperature(AHT20_Sensor_t sensor) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	; 0x30
 80009d4:	af02      	add	r7, sp, #8
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
    if (sensor < SENSOR_AHT20_1 || sensor > SENSOR_AHT20_8) {
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d002      	beq.n	80009e6 <CheckTemperature+0x16>
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	2b08      	cmp	r3, #8
 80009e4:	d905      	bls.n	80009f2 <CheckTemperature+0x22>
        printf("Invalid sensor: %d. Must be between SENSOR_AHT20_1 and SENSOR_AHT20_8.\r\n", sensor);
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	4619      	mov	r1, r3
 80009ea:	4857      	ldr	r0, [pc, #348]	; (8000b48 <CheckTemperature+0x178>)
 80009ec:	f006 fb76 	bl	80070dc <iprintf>
 80009f0:	e0a6      	b.n	8000b40 <CheckTemperature+0x170>
        return;
    }

    // Mapping sensor to PCA9548A channel bitmask
    uint8_t channelMasks[] = {CHANNEL_0, CHANNEL_1, CHANNEL_2, CHANNEL_3, CHANNEL_4, CHANNEL_5, CHANNEL_6, CHANNEL_7};
 80009f2:	4a56      	ldr	r2, [pc, #344]	; (8000b4c <CheckTemperature+0x17c>)
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009fc:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t selectedChannel = channelMasks[sensor - 1];  // Adjust for 0-based indexing
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a08:	4413      	add	r3, r2
 8000a0a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    float temperature, humidity;
    if (AHT20_ReadData_PCA9548A(&hi2c2, PCA9548A_ADDRESS, selectedChannel, &temperature, &humidity) == HAL_OK) {
 8000a12:	f107 0110 	add.w	r1, r7, #16
 8000a16:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	460b      	mov	r3, r1
 8000a22:	2170      	movs	r1, #112	; 0x70
 8000a24:	484a      	ldr	r0, [pc, #296]	; (8000b50 <CheckTemperature+0x180>)
 8000a26:	f000 f90b 	bl	8000c40 <AHT20_ReadData_PCA9548A>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d14a      	bne.n	8000ac6 <CheckTemperature+0xf6>
        printf("Sensor %d - Temperature: %.2f C\r\n", sensor, temperature);
 8000a30:	79f9      	ldrb	r1, [r7, #7]
 8000a32:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a3a:	ec53 2b17 	vmov	r2, r3, d7
 8000a3e:	4845      	ldr	r0, [pc, #276]	; (8000b54 <CheckTemperature+0x184>)
 8000a40:	f006 fb4c 	bl	80070dc <iprintf>
        printf("Sensor %d - Humidity: %.2f %%RH\r\n", sensor, humidity);
 8000a44:	79f9      	ldrb	r1, [r7, #7]
 8000a46:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a4e:	ec53 2b17 	vmov	r2, r3, d7
 8000a52:	4841      	ldr	r0, [pc, #260]	; (8000b58 <CheckTemperature+0x188>)
 8000a54:	f006 fb42 	bl	80070dc <iprintf>

        int16_t tRaw = (int16_t)(temperature * 100.0f);
 8000a58:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a5c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8000b5c <CheckTemperature+0x18c>
 8000a60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a68:	ee17 3a90 	vmov	r3, s15
 8000a6c:	84bb      	strh	r3, [r7, #36]	; 0x24
        int16_t hRaw = (int16_t)(humidity * 100.0f);
 8000a6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a72:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8000b5c <CheckTemperature+0x18c>
 8000a76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a7e:	ee17 3a90 	vmov	r3, s15
 8000a82:	847b      	strh	r3, [r7, #34]	; 0x22
        uint8_t tHigh = (uint8_t)((tRaw >> 8) & 0xFF);
 8000a84:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000a88:	121b      	asrs	r3, r3, #8
 8000a8a:	b21b      	sxth	r3, r3
 8000a8c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t tLow  = (uint8_t)( tRaw       & 0xFF);
 8000a90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a92:	f887 3020 	strb.w	r3, [r7, #32]
        uint8_t hHigh = (uint8_t)((hRaw >> 8) & 0xFF);
 8000a96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a9a:	121b      	asrs	r3, r3, #8
 8000a9c:	b21b      	sxth	r3, r3
 8000a9e:	77fb      	strb	r3, [r7, #31]
        uint8_t hLow  = (uint8_t)( hRaw       & 0xFF);
 8000aa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000aa2:	77bb      	strb	r3, [r7, #30]
        SPI_SendMessage(0xF4, sensor, tHigh, tLow, hHigh, hLow);
 8000aa4:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000aa8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000aac:	79f9      	ldrb	r1, [r7, #7]
 8000aae:	7fbb      	ldrb	r3, [r7, #30]
 8000ab0:	9301      	str	r3, [sp, #4]
 8000ab2:	7ffb      	ldrb	r3, [r7, #31]
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	20f4      	movs	r0, #244	; 0xf4
 8000aba:	f001 f941 	bl	8001d40 <SPI_SendMessage>
        tempSensFailed = false;
 8000abe:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <CheckTemperature+0x190>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	701a      	strb	r2, [r3, #0]
 8000ac4:	e017      	b.n	8000af6 <CheckTemperature+0x126>

    } else {
        printf("Failed to read data from sensor %d.\r\n", sensor);
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4826      	ldr	r0, [pc, #152]	; (8000b64 <CheckTemperature+0x194>)
 8000acc:	f006 fb06 	bl	80070dc <iprintf>
        if (!tempSensFailed) {
 8000ad0:	4b23      	ldr	r3, [pc, #140]	; (8000b60 <CheckTemperature+0x190>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	f083 0301 	eor.w	r3, r3, #1
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d00b      	beq.n	8000af6 <CheckTemperature+0x126>
            setErrorState(STATE_SENSOR);
 8000ade:	2007      	movs	r0, #7
 8000ae0:	f000 f9e0 	bl	8000ea4 <setErrorState>
            error_locker = sensor;
 8000ae4:	4a20      	ldr	r2, [pc, #128]	; (8000b68 <CheckTemperature+0x198>)
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	7013      	strb	r3, [r2, #0]
            error_flag = true;
 8000aea:	4b20      	ldr	r3, [pc, #128]	; (8000b6c <CheckTemperature+0x19c>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	701a      	strb	r2, [r3, #0]
            tempSensFailed = true;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <CheckTemperature+0x190>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	701a      	strb	r2, [r3, #0]
        }
    }

    if (temperature < 0.0 && !tempBelowZero) {
 8000af6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000afa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b02:	d513      	bpl.n	8000b2c <CheckTemperature+0x15c>
 8000b04:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <CheckTemperature+0x1a0>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	f083 0301 	eor.w	r3, r3, #1
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d00c      	beq.n	8000b2c <CheckTemperature+0x15c>
        tempBelowZero = true;
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <CheckTemperature+0x1a0>)
 8000b14:	2201      	movs	r2, #1
 8000b16:	701a      	strb	r2, [r3, #0]
        setErrorState(STATE_TEMPERATURE);
 8000b18:	2006      	movs	r0, #6
 8000b1a:	f000 f9c3 	bl	8000ea4 <setErrorState>
        error_locker = sensor;
 8000b1e:	4a12      	ldr	r2, [pc, #72]	; (8000b68 <CheckTemperature+0x198>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	7013      	strb	r3, [r2, #0]
        error_flag = true;
 8000b24:	4b11      	ldr	r3, [pc, #68]	; (8000b6c <CheckTemperature+0x19c>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	701a      	strb	r2, [r3, #0]
 8000b2a:	e009      	b.n	8000b40 <CheckTemperature+0x170>
    } else if (temperature >= 0.0) {
 8000b2c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b38:	db02      	blt.n	8000b40 <CheckTemperature+0x170>
        tempBelowZero = false;
 8000b3a:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <CheckTemperature+0x1a0>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
    }
}
 8000b40:	3728      	adds	r7, #40	; 0x28
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	0800ace8 	.word	0x0800ace8
 8000b4c:	0800ada4 	.word	0x0800ada4
 8000b50:	20000434 	.word	0x20000434
 8000b54:	0800ad34 	.word	0x0800ad34
 8000b58:	0800ad58 	.word	0x0800ad58
 8000b5c:	42c80000 	.word	0x42c80000
 8000b60:	20000204 	.word	0x20000204
 8000b64:	0800ad7c 	.word	0x0800ad7c
 8000b68:	20000210 	.word	0x20000210
 8000b6c:	20000211 	.word	0x20000211
 8000b70:	20000205 	.word	0x20000205
 8000b74:	00000000 	.word	0x00000000

08000b78 <AHT20_CalculateValues>:
    AHT20_CalculateValues(raw_data, temperature, humidity);
    return HAL_OK;
}

// Function to calculate temperature and humidity from raw data
void AHT20_CalculateValues(uint8_t *data, float *temperature, float *humidity) {
 8000b78:	b480      	push	{r7}
 8000b7a:	b087      	sub	sp, #28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
    uint32_t raw_humidity = (data[1] << 12) | (data[2] << 4) | (data[3] >> 4);
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	3301      	adds	r3, #1
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	031a      	lsls	r2, r3, #12
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	3302      	adds	r3, #2
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	011b      	lsls	r3, r3, #4
 8000b94:	4313      	orrs	r3, r2
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	3203      	adds	r2, #3
 8000b9a:	7812      	ldrb	r2, [r2, #0]
 8000b9c:	0912      	lsrs	r2, r2, #4
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	617b      	str	r3, [r7, #20]
    uint32_t raw_temperature = ((data[3] & 0xF) << 16) | (data[4] << 8) | data[5];
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3303      	adds	r3, #3
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	041b      	lsls	r3, r3, #16
 8000bac:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	3304      	adds	r3, #4
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	021b      	lsls	r3, r3, #8
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	68fa      	ldr	r2, [r7, #12]
 8000bbc:	3205      	adds	r2, #5
 8000bbe:	7812      	ldrb	r2, [r2, #0]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
    *humidity = (raw_humidity * 100.0) / 1048576;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	ee07 3a90 	vmov	s15, r3
 8000bca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000bce:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8000c20 <AHT20_CalculateValues+0xa8>
 8000bd2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000bd6:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8000c28 <AHT20_CalculateValues+0xb0>
 8000bda:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bde:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	edc3 7a00 	vstr	s15, [r3]
    *temperature = ((raw_temperature * 200.0) / 1048576) - 50.0;
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	ee07 3a90 	vmov	s15, r3
 8000bee:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000bf2:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8000c30 <AHT20_CalculateValues+0xb8>
 8000bf6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000bfa:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000c28 <AHT20_CalculateValues+0xb0>
 8000bfe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c02:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000c38 <AHT20_CalculateValues+0xc0>
 8000c06:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000c0a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	edc3 7a00 	vstr	s15, [r3]
}
 8000c14:	bf00      	nop
 8000c16:	371c      	adds	r7, #28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	00000000 	.word	0x00000000
 8000c24:	40590000 	.word	0x40590000
 8000c28:	00000000 	.word	0x00000000
 8000c2c:	41300000 	.word	0x41300000
 8000c30:	00000000 	.word	0x00000000
 8000c34:	40690000 	.word	0x40690000
 8000c38:	00000000 	.word	0x00000000
 8000c3c:	40490000 	.word	0x40490000

08000c40 <AHT20_ReadData_PCA9548A>:


// Read data from AHT20 via PCA9548A
HAL_StatusTypeDef AHT20_ReadData_PCA9548A(I2C_HandleTypeDef *hi2c, uint8_t pca9548a_address, uint8_t channel, float *temperature, float *humidity) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af02      	add	r7, sp, #8
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	607b      	str	r3, [r7, #4]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	72fb      	strb	r3, [r7, #11]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	72bb      	strb	r3, [r7, #10]
    uint8_t cmd_measure[] = {0xAC, 0x33, 0x00};
 8000c52:	4a53      	ldr	r2, [pc, #332]	; (8000da0 <AHT20_ReadData_PCA9548A+0x160>)
 8000c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c58:	6812      	ldr	r2, [r2, #0]
 8000c5a:	4611      	mov	r1, r2
 8000c5c:	8019      	strh	r1, [r3, #0]
 8000c5e:	3302      	adds	r3, #2
 8000c60:	0c12      	lsrs	r2, r2, #16
 8000c62:	701a      	strb	r2, [r3, #0]
    uint8_t raw_data[6];
    uint8_t status;

    // Select the appropriate channel on PCA9548A
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, pca9548a_address << 1, &channel, 1, HAL_MAX_DELAY);
 8000c64:	7afb      	ldrb	r3, [r7, #11]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	b299      	uxth	r1, r3
 8000c6c:	f107 020a 	add.w	r2, r7, #10
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2301      	movs	r3, #1
 8000c78:	68f8      	ldr	r0, [r7, #12]
 8000c7a:	f002 fae3 	bl	8003244 <HAL_I2C_Master_Transmit>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (ret != HAL_OK) return ret;
 8000c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d002      	beq.n	8000c92 <AHT20_ReadData_PCA9548A+0x52>
 8000c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c90:	e081      	b.n	8000d96 <AHT20_ReadData_PCA9548A+0x156>

    // Check status of AHT20
    ret = HAL_I2C_Master_Transmit(hi2c, AHT20_ADDRESS, (uint8_t[]){0x71}, 1, HAL_MAX_DELAY);
 8000c92:	2371      	movs	r3, #113	; 0x71
 8000c94:	763b      	strb	r3, [r7, #24]
 8000c96:	f107 0218 	add.w	r2, r7, #24
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	9300      	str	r3, [sp, #0]
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	2170      	movs	r1, #112	; 0x70
 8000ca4:	68f8      	ldr	r0, [r7, #12]
 8000ca6:	f002 facd 	bl	8003244 <HAL_I2C_Master_Transmit>
 8000caa:	4603      	mov	r3, r0
 8000cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (ret != HAL_OK) return ret;
 8000cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d002      	beq.n	8000cbe <AHT20_ReadData_PCA9548A+0x7e>
 8000cb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cbc:	e06b      	b.n	8000d96 <AHT20_ReadData_PCA9548A+0x156>

    ret = HAL_I2C_Master_Receive(hi2c, AHT20_ADDRESS, &status, 1, HAL_MAX_DELAY);
 8000cbe:	f107 021b 	add.w	r2, r7, #27
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	2301      	movs	r3, #1
 8000cca:	2170      	movs	r1, #112	; 0x70
 8000ccc:	68f8      	ldr	r0, [r7, #12]
 8000cce:	f002 fbad 	bl	800342c <HAL_I2C_Master_Receive>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (ret != HAL_OK) return ret;
 8000cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d002      	beq.n	8000ce6 <AHT20_ReadData_PCA9548A+0xa6>
 8000ce0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ce4:	e057      	b.n	8000d96 <AHT20_ReadData_PCA9548A+0x156>

    // Check if the sensor is calibrated
    if ((status & 0x18) != 0x18) {
 8000ce6:	7efb      	ldrb	r3, [r7, #27]
 8000ce8:	f003 0318 	and.w	r3, r3, #24
 8000cec:	2b18      	cmp	r3, #24
 8000cee:	d01f      	beq.n	8000d30 <AHT20_ReadData_PCA9548A+0xf0>
        uint8_t init_cmd[] = {0xBE, 0x08, 0x00};
 8000cf0:	4a2c      	ldr	r2, [pc, #176]	; (8000da4 <AHT20_ReadData_PCA9548A+0x164>)
 8000cf2:	f107 0314 	add.w	r3, r7, #20
 8000cf6:	6812      	ldr	r2, [r2, #0]
 8000cf8:	4611      	mov	r1, r2
 8000cfa:	8019      	strh	r1, [r3, #0]
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	0c12      	lsrs	r2, r2, #16
 8000d00:	701a      	strb	r2, [r3, #0]
        ret = HAL_I2C_Master_Transmit(hi2c, AHT20_ADDRESS, init_cmd, 3, HAL_MAX_DELAY);
 8000d02:	f107 0214 	add.w	r2, r7, #20
 8000d06:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0a:	9300      	str	r3, [sp, #0]
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	2170      	movs	r1, #112	; 0x70
 8000d10:	68f8      	ldr	r0, [r7, #12]
 8000d12:	f002 fa97 	bl	8003244 <HAL_I2C_Master_Transmit>
 8000d16:	4603      	mov	r3, r0
 8000d18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (ret != HAL_OK) return ret;
 8000d1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d002      	beq.n	8000d2a <AHT20_ReadData_PCA9548A+0xea>
 8000d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d28:	e035      	b.n	8000d96 <AHT20_ReadData_PCA9548A+0x156>
        HAL_Delay(10);
 8000d2a:	200a      	movs	r0, #10
 8000d2c:	f001 fbd8 	bl	80024e0 <HAL_Delay>
    }

    // Trigger measurement
    ret = HAL_I2C_Master_Transmit(hi2c, AHT20_ADDRESS, cmd_measure, sizeof(cmd_measure), HAL_MAX_DELAY);
 8000d30:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000d34:	f04f 33ff 	mov.w	r3, #4294967295
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	2170      	movs	r1, #112	; 0x70
 8000d3e:	68f8      	ldr	r0, [r7, #12]
 8000d40:	f002 fa80 	bl	8003244 <HAL_I2C_Master_Transmit>
 8000d44:	4603      	mov	r3, r0
 8000d46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (ret != HAL_OK) return ret;
 8000d4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d002      	beq.n	8000d58 <AHT20_ReadData_PCA9548A+0x118>
 8000d52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d56:	e01e      	b.n	8000d96 <AHT20_ReadData_PCA9548A+0x156>

    // Wait for measurement
    HAL_Delay(80);
 8000d58:	2050      	movs	r0, #80	; 0x50
 8000d5a:	f001 fbc1 	bl	80024e0 <HAL_Delay>

    // Read measurement data
    ret = HAL_I2C_Master_Receive(hi2c, AHT20_ADDRESS, raw_data, sizeof(raw_data), HAL_MAX_DELAY);
 8000d5e:	f107 021c 	add.w	r2, r7, #28
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	2306      	movs	r3, #6
 8000d6a:	2170      	movs	r1, #112	; 0x70
 8000d6c:	68f8      	ldr	r0, [r7, #12]
 8000d6e:	f002 fb5d 	bl	800342c <HAL_I2C_Master_Receive>
 8000d72:	4603      	mov	r3, r0
 8000d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (ret != HAL_OK) return ret;
 8000d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d002      	beq.n	8000d86 <AHT20_ReadData_PCA9548A+0x146>
 8000d80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d84:	e007      	b.n	8000d96 <AHT20_ReadData_PCA9548A+0x156>

    // Calculate temperature and humidity
    AHT20_CalculateValues(raw_data, temperature, humidity);
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d8c:	6879      	ldr	r1, [r7, #4]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fef2 	bl	8000b78 <AHT20_CalculateValues>
    return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3728      	adds	r7, #40	; 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	0800adac 	.word	0x0800adac
 8000da4:	0800adb0 	.word	0x0800adb0

08000da8 <init_application>:

#include "application.h"

uint64_t lastTime = 0;

void init_application(){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
	printf("STM32 SPI Slave Ready\r\n"); // Print ready message
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <init_application+0x1c>)
 8000dae:	f006 fa31 	bl	8007214 <puts>
	//HAL_SPI_Receive_IT(&hspi1, spi_rx_buffer, SPI_BUFFER_SIZE);
	HAL_SPI_TransmitReceive_IT(&hspi1, spi_tx_buffer, spi_rx_buffer, SPI_BUFFER_SIZE);
 8000db2:	2306      	movs	r3, #6
 8000db4:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <init_application+0x20>)
 8000db6:	4905      	ldr	r1, [pc, #20]	; (8000dcc <init_application+0x24>)
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <init_application+0x28>)
 8000dba:	f004 f8a5 	bl	8004f08 <HAL_SPI_TransmitReceive_IT>

}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	0800adb4 	.word	0x0800adb4
 8000dc8:	20000628 	.word	0x20000628
 8000dcc:	20000630 	.word	0x20000630
 8000dd0:	20000480 	.word	0x20000480

08000dd4 <loop_application>:

void loop_application(){
 8000dd4:	b5b0      	push	{r4, r5, r7, lr}
 8000dd6:	af00      	add	r7, sp, #0

	if(getSPIFlag()){
 8000dd8:	f000 fe86 	bl	8001ae8 <getSPIFlag>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d004      	beq.n	8000dec <loop_application+0x18>
		Process_SPI_Command(rpi_msg, SPI_BUFFER_SIZE);
 8000de2:	2106      	movs	r1, #6
 8000de4:	4821      	ldr	r0, [pc, #132]	; (8000e6c <loop_application+0x98>)
 8000de6:	f000 fec9 	bl	8001b7c <Process_SPI_Command>
			lastTime = HAL_GetTick();
			  CheckTemperature(SENSOR_AHT20_1);
		}
	}

}
 8000dea:	e03c      	b.n	8000e66 <loop_application+0x92>
		if(getSendSPIFlag() && get_error_flag()) HandleState();
 8000dec:	f000 fe88 	bl	8001b00 <getSendSPIFlag>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d006      	beq.n	8000e04 <loop_application+0x30>
 8000df6:	f000 f83d 	bl	8000e74 <get_error_flag>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <loop_application+0x30>
 8000e00:	f000 f860 	bl	8000ec4 <HandleState>
		if(getSendSPIFlag() && get_locker_flag()) CheckAllLockersAfterDelay();
 8000e04:	f000 fe7c 	bl	8001b00 <getSendSPIFlag>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d006      	beq.n	8000e1c <loop_application+0x48>
 8000e0e:	f000 f83d 	bl	8000e8c <get_locker_flag>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <loop_application+0x48>
 8000e18:	f000 f922 	bl	8001060 <CheckAllLockersAfterDelay>
		if(getSendSPIFlag() && HAL_GetTick() - lastTime >= 5000) { //3000000
 8000e1c:	f000 fe70 	bl	8001b00 <getSendSPIFlag>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d01f      	beq.n	8000e66 <loop_application+0x92>
 8000e26:	f001 fb4f 	bl	80024c8 <HAL_GetTick>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f04f 0100 	mov.w	r1, #0
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <loop_application+0x9c>)
 8000e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0503 	sbc.w	r5, r1, r3
 8000e3e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	42ab      	cmp	r3, r5
 8000e48:	bf08      	it	eq
 8000e4a:	42a2      	cmpeq	r2, r4
 8000e4c:	d20b      	bcs.n	8000e66 <loop_application+0x92>
			lastTime = HAL_GetTick();
 8000e4e:	f001 fb3b 	bl	80024c8 <HAL_GetTick>
 8000e52:	4603      	mov	r3, r0
 8000e54:	461a      	mov	r2, r3
 8000e56:	f04f 0300 	mov.w	r3, #0
 8000e5a:	4905      	ldr	r1, [pc, #20]	; (8000e70 <loop_application+0x9c>)
 8000e5c:	e9c1 2300 	strd	r2, r3, [r1]
			  CheckTemperature(SENSOR_AHT20_1);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f7ff fdb5 	bl	80009d0 <CheckTemperature>
}
 8000e66:	bf00      	nop
 8000e68:	bdb0      	pop	{r4, r5, r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000638 	.word	0x20000638
 8000e70:	20000208 	.word	0x20000208

08000e74 <get_error_flag>:
bool checkPending[24] = { false };
uint64_t openTimestamp[24] = { 0 };



bool get_error_flag(){
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
	return error_flag;
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <get_error_flag+0x14>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000211 	.word	0x20000211

08000e8c <get_locker_flag>:
bool get_locker_flag(){
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
	return lockerFlag;
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <get_locker_flag+0x14>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000212 	.word	0x20000212

08000ea4 <setErrorState>:

void setErrorState(SystemErrorState state) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
	errorState = state;
 8000eae:	4a04      	ldr	r2, [pc, #16]	; (8000ec0 <setErrorState+0x1c>)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	7013      	strb	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	20000000 	.word	0x20000000

08000ec4 <HandleState>:

// Handle error states
void HandleState() {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af02      	add	r7, sp, #8
	SystemErrorState state = errorState;
 8000eca:	4b5a      	ldr	r3, [pc, #360]	; (8001034 <HandleState+0x170>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	3b01      	subs	r3, #1
 8000ed4:	2b06      	cmp	r3, #6
 8000ed6:	f200 80a5 	bhi.w	8001024 <HandleState+0x160>
 8000eda:	a201      	add	r2, pc, #4	; (adr r2, 8000ee0 <HandleState+0x1c>)
 8000edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee0:	08000efd 	.word	0x08000efd
 8000ee4:	08000f2d 	.word	0x08000f2d
 8000ee8:	08000f5d 	.word	0x08000f5d
 8000eec:	08000f65 	.word	0x08000f65
 8000ef0:	08000f95 	.word	0x08000f95
 8000ef4:	08000fc5 	.word	0x08000fc5
 8000ef8:	08000ff5 	.word	0x08000ff5
        case STATE_JAMMED:
            printf("Case 1: JAMMED\n");
 8000efc:	484e      	ldr	r0, [pc, #312]	; (8001038 <HandleState+0x174>)
 8000efe:	f006 f989 	bl	8007214 <puts>
            SPI_SendMessage(0xF1, error_locker, 150, 0xFF, 0xFF, 0xFF);
 8000f02:	4b4e      	ldr	r3, [pc, #312]	; (800103c <HandleState+0x178>)
 8000f04:	7819      	ldrb	r1, [r3, #0]
 8000f06:	23ff      	movs	r3, #255	; 0xff
 8000f08:	9301      	str	r3, [sp, #4]
 8000f0a:	23ff      	movs	r3, #255	; 0xff
 8000f0c:	9300      	str	r3, [sp, #0]
 8000f0e:	23ff      	movs	r3, #255	; 0xff
 8000f10:	2296      	movs	r2, #150	; 0x96
 8000f12:	20f1      	movs	r0, #241	; 0xf1
 8000f14:	f000 ff14 	bl	8001d40 <SPI_SendMessage>
            errorState = NO_ERROR;
 8000f18:	4b46      	ldr	r3, [pc, #280]	; (8001034 <HandleState+0x170>)
 8000f1a:	2208      	movs	r2, #8
 8000f1c:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8000f1e:	4b47      	ldr	r3, [pc, #284]	; (800103c <HandleState+0x178>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 8000f24:	4b46      	ldr	r3, [pc, #280]	; (8001040 <HandleState+0x17c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
            break;
 8000f2a:	e07f      	b.n	800102c <HandleState+0x168>
        case STATE_OPENED:
            printf("Case 2: OPENED\n");
 8000f2c:	4845      	ldr	r0, [pc, #276]	; (8001044 <HandleState+0x180>)
 8000f2e:	f006 f971 	bl	8007214 <puts>
            SPI_SendMessage(0xF1, error_locker, 50, 0xFF, 0xFF, 0xFF);
 8000f32:	4b42      	ldr	r3, [pc, #264]	; (800103c <HandleState+0x178>)
 8000f34:	7819      	ldrb	r1, [r3, #0]
 8000f36:	23ff      	movs	r3, #255	; 0xff
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	23ff      	movs	r3, #255	; 0xff
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	23ff      	movs	r3, #255	; 0xff
 8000f40:	2232      	movs	r2, #50	; 0x32
 8000f42:	20f1      	movs	r0, #241	; 0xf1
 8000f44:	f000 fefc 	bl	8001d40 <SPI_SendMessage>
            errorState = NO_ERROR;
 8000f48:	4b3a      	ldr	r3, [pc, #232]	; (8001034 <HandleState+0x170>)
 8000f4a:	2208      	movs	r2, #8
 8000f4c:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8000f4e:	4b3b      	ldr	r3, [pc, #236]	; (800103c <HandleState+0x178>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 8000f54:	4b3a      	ldr	r3, [pc, #232]	; (8001040 <HandleState+0x17c>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
            break;
 8000f5a:	e067      	b.n	800102c <HandleState+0x168>
        case STATE_CLOSED:
            printf("Case 3: CLOSED\n");
 8000f5c:	483a      	ldr	r0, [pc, #232]	; (8001048 <HandleState+0x184>)
 8000f5e:	f006 f959 	bl	8007214 <puts>
            break;
 8000f62:	e063      	b.n	800102c <HandleState+0x168>
        case STATE_PRICE_TAG:
            printf("Case 4: PRICE_TAG\n");
 8000f64:	4839      	ldr	r0, [pc, #228]	; (800104c <HandleState+0x188>)
 8000f66:	f006 f955 	bl	8007214 <puts>
            SPI_SendMessage(0xF2, error_locker, 50, 0xFF, 0xFF, 0xFF);
 8000f6a:	4b34      	ldr	r3, [pc, #208]	; (800103c <HandleState+0x178>)
 8000f6c:	7819      	ldrb	r1, [r3, #0]
 8000f6e:	23ff      	movs	r3, #255	; 0xff
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	23ff      	movs	r3, #255	; 0xff
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	23ff      	movs	r3, #255	; 0xff
 8000f78:	2232      	movs	r2, #50	; 0x32
 8000f7a:	20f2      	movs	r0, #242	; 0xf2
 8000f7c:	f000 fee0 	bl	8001d40 <SPI_SendMessage>
            errorState = NO_ERROR;
 8000f80:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <HandleState+0x170>)
 8000f82:	2208      	movs	r2, #8
 8000f84:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8000f86:	4b2d      	ldr	r3, [pc, #180]	; (800103c <HandleState+0x178>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 8000f8c:	4b2c      	ldr	r3, [pc, #176]	; (8001040 <HandleState+0x17c>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	701a      	strb	r2, [r3, #0]
            break;
 8000f92:	e04b      	b.n	800102c <HandleState+0x168>
        case STATE_LED_DRIVER:
            printf("Case 5: LED_DRIVER\n");
 8000f94:	482e      	ldr	r0, [pc, #184]	; (8001050 <HandleState+0x18c>)
 8000f96:	f006 f93d 	bl	8007214 <puts>
            SPI_SendMessage(0xF2, error_locker, 100, 0xFF, 0xFF, 0xFF);
 8000f9a:	4b28      	ldr	r3, [pc, #160]	; (800103c <HandleState+0x178>)
 8000f9c:	7819      	ldrb	r1, [r3, #0]
 8000f9e:	23ff      	movs	r3, #255	; 0xff
 8000fa0:	9301      	str	r3, [sp, #4]
 8000fa2:	23ff      	movs	r3, #255	; 0xff
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	23ff      	movs	r3, #255	; 0xff
 8000fa8:	2264      	movs	r2, #100	; 0x64
 8000faa:	20f2      	movs	r0, #242	; 0xf2
 8000fac:	f000 fec8 	bl	8001d40 <SPI_SendMessage>
            errorState = NO_ERROR;
 8000fb0:	4b20      	ldr	r3, [pc, #128]	; (8001034 <HandleState+0x170>)
 8000fb2:	2208      	movs	r2, #8
 8000fb4:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8000fb6:	4b21      	ldr	r3, [pc, #132]	; (800103c <HandleState+0x178>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 8000fbc:	4b20      	ldr	r3, [pc, #128]	; (8001040 <HandleState+0x17c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
            break;
 8000fc2:	e033      	b.n	800102c <HandleState+0x168>
        case STATE_TEMPERATURE:
            printf("Case 6: TEMPERATURE\n");
 8000fc4:	4823      	ldr	r0, [pc, #140]	; (8001054 <HandleState+0x190>)
 8000fc6:	f006 f925 	bl	8007214 <puts>
            SPI_SendMessage(0xF3, error_locker, 50, 0xFF, 0xFF, 0xFF);
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <HandleState+0x178>)
 8000fcc:	7819      	ldrb	r1, [r3, #0]
 8000fce:	23ff      	movs	r3, #255	; 0xff
 8000fd0:	9301      	str	r3, [sp, #4]
 8000fd2:	23ff      	movs	r3, #255	; 0xff
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	23ff      	movs	r3, #255	; 0xff
 8000fd8:	2232      	movs	r2, #50	; 0x32
 8000fda:	20f3      	movs	r0, #243	; 0xf3
 8000fdc:	f000 feb0 	bl	8001d40 <SPI_SendMessage>
            errorState = NO_ERROR;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	; (8001034 <HandleState+0x170>)
 8000fe2:	2208      	movs	r2, #8
 8000fe4:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8000fe6:	4b15      	ldr	r3, [pc, #84]	; (800103c <HandleState+0x178>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 8000fec:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HandleState+0x17c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	701a      	strb	r2, [r3, #0]
            break;
 8000ff2:	e01b      	b.n	800102c <HandleState+0x168>
        case STATE_SENSOR:
            printf("Case 7: SENSOR\n");
 8000ff4:	4818      	ldr	r0, [pc, #96]	; (8001058 <HandleState+0x194>)
 8000ff6:	f006 f90d 	bl	8007214 <puts>
            SPI_SendMessage(0xF3, error_locker, 100, 0xFF, 0xFF, 0xFF);
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <HandleState+0x178>)
 8000ffc:	7819      	ldrb	r1, [r3, #0]
 8000ffe:	23ff      	movs	r3, #255	; 0xff
 8001000:	9301      	str	r3, [sp, #4]
 8001002:	23ff      	movs	r3, #255	; 0xff
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	23ff      	movs	r3, #255	; 0xff
 8001008:	2264      	movs	r2, #100	; 0x64
 800100a:	20f3      	movs	r0, #243	; 0xf3
 800100c:	f000 fe98 	bl	8001d40 <SPI_SendMessage>
            errorState = NO_ERROR;
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HandleState+0x170>)
 8001012:	2208      	movs	r2, #8
 8001014:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HandleState+0x178>)
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 800101c:	4b08      	ldr	r3, [pc, #32]	; (8001040 <HandleState+0x17c>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
            break;
 8001022:	e003      	b.n	800102c <HandleState+0x168>
        default:
            printf("Invalid state\n");
 8001024:	480d      	ldr	r0, [pc, #52]	; (800105c <HandleState+0x198>)
 8001026:	f006 f8f5 	bl	8007214 <puts>
            break;
 800102a:	bf00      	nop
    }
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000000 	.word	0x20000000
 8001038:	0800adcc 	.word	0x0800adcc
 800103c:	20000210 	.word	0x20000210
 8001040:	20000211 	.word	0x20000211
 8001044:	0800addc 	.word	0x0800addc
 8001048:	0800adec 	.word	0x0800adec
 800104c:	0800adfc 	.word	0x0800adfc
 8001050:	0800ae10 	.word	0x0800ae10
 8001054:	0800ae24 	.word	0x0800ae24
 8001058:	0800ae38 	.word	0x0800ae38
 800105c:	0800ae48 	.word	0x0800ae48

08001060 <CheckAllLockersAfterDelay>:

// Check all lockers after delay (5 minutes) to see if they remain open
void CheckAllLockersAfterDelay(void) {
 8001060:	b5b0      	push	{r4, r5, r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
    bool anyOpenedOrPending = false;
 8001066:	2300      	movs	r3, #0
 8001068:	73fb      	strb	r3, [r7, #15]
    uint32_t currentTime = HAL_GetTick();
 800106a:	f001 fa2d 	bl	80024c8 <HAL_GetTick>
 800106e:	6078      	str	r0, [r7, #4]

    for (int i = 0; i < 24; i++) {
 8001070:	2300      	movs	r3, #0
 8001072:	60bb      	str	r3, [r7, #8]
 8001074:	e053      	b.n	800111e <CheckAllLockersAfterDelay+0xbe>
        // If we had marked a locker for a re-check
        if (checkPending[i]) {
 8001076:	4a2f      	ldr	r2, [pc, #188]	; (8001134 <CheckAllLockersAfterDelay+0xd4>)
 8001078:	68bb      	ldr	r3, [r7, #8]
 800107a:	4413      	add	r3, r2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d042      	beq.n	8001108 <CheckAllLockersAfterDelay+0xa8>
            anyOpenedOrPending = true;
 8001082:	2301      	movs	r3, #1
 8001084:	73fb      	strb	r3, [r7, #15]
            // Has 5 minutes passed since we opened it?
            if ((currentTime - openTimestamp[i]) >= LOCKER_CHECK_DELAY) {
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4618      	mov	r0, r3
 800108a:	f04f 0100 	mov.w	r1, #0
 800108e:	4a2a      	ldr	r2, [pc, #168]	; (8001138 <CheckAllLockersAfterDelay+0xd8>)
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4413      	add	r3, r2
 8001096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109a:	1a84      	subs	r4, r0, r2
 800109c:	eb61 0503 	sbc.w	r5, r1, r3
 80010a0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80010a4:	f04f 0300 	mov.w	r3, #0
 80010a8:	42ab      	cmp	r3, r5
 80010aa:	bf08      	it	eq
 80010ac:	42a2      	cmpeq	r2, r4
 80010ae:	d233      	bcs.n	8001118 <CheckAllLockersAfterDelay+0xb8>
                int status = read_cabinet_status(i + 1);
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	3301      	adds	r3, #1
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 f979 	bl	80013b0 <read_cabinet_status>
 80010be:	6038      	str	r0, [r7, #0]
                if (status == 1) {
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d112      	bne.n	80010ec <CheckAllLockersAfterDelay+0x8c>
                    errorState = STATE_OPENED;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <CheckAllLockersAfterDelay+0xdc>)
 80010c8:	2202      	movs	r2, #2
 80010ca:	701a      	strb	r2, [r3, #0]
                    error_locker = i + 1;
 80010cc:	68bb      	ldr	r3, [r7, #8]
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	3301      	adds	r3, #1
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b1a      	ldr	r3, [pc, #104]	; (8001140 <CheckAllLockersAfterDelay+0xe0>)
 80010d6:	701a      	strb	r2, [r3, #0]
                    error_flag = true;
 80010d8:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <CheckAllLockersAfterDelay+0xe4>)
 80010da:	2201      	movs	r2, #1
 80010dc:	701a      	strb	r2, [r3, #0]
                    printf("Locker %d is still open after 5 minutes!\n", i + 1);
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	3301      	adds	r3, #1
 80010e2:	4619      	mov	r1, r3
 80010e4:	4818      	ldr	r0, [pc, #96]	; (8001148 <CheckAllLockersAfterDelay+0xe8>)
 80010e6:	f005 fff9 	bl	80070dc <iprintf>
 80010ea:	e007      	b.n	80010fc <CheckAllLockersAfterDelay+0x9c>
                } else if (status == 0) {
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d104      	bne.n	80010fc <CheckAllLockersAfterDelay+0x9c>
                    // It's now closed
                    lockerOpened[i] = false;
 80010f2:	4a16      	ldr	r2, [pc, #88]	; (800114c <CheckAllLockersAfterDelay+0xec>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	4413      	add	r3, r2
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
                }
                checkPending[i] = false;
 80010fc:	4a0d      	ldr	r2, [pc, #52]	; (8001134 <CheckAllLockersAfterDelay+0xd4>)
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	4413      	add	r3, r2
 8001102:	2200      	movs	r2, #0
 8001104:	701a      	strb	r2, [r3, #0]
 8001106:	e007      	b.n	8001118 <CheckAllLockersAfterDelay+0xb8>
            }
        } else {
            if (lockerOpened[i]) {
 8001108:	4a10      	ldr	r2, [pc, #64]	; (800114c <CheckAllLockersAfterDelay+0xec>)
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	4413      	add	r3, r2
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <CheckAllLockersAfterDelay+0xb8>
                anyOpenedOrPending = true;
 8001114:	2301      	movs	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 24; i++) {
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	3301      	adds	r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	2b17      	cmp	r3, #23
 8001122:	dda8      	ble.n	8001076 <CheckAllLockersAfterDelay+0x16>
            }
        }
    }
    lockerFlag = anyOpenedOrPending;
 8001124:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <CheckAllLockersAfterDelay+0xf0>)
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	7013      	strb	r3, [r2, #0]
}
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bdb0      	pop	{r4, r5, r7, pc}
 8001132:	bf00      	nop
 8001134:	2000022c 	.word	0x2000022c
 8001138:	20000248 	.word	0x20000248
 800113c:	20000000 	.word	0x20000000
 8001140:	20000210 	.word	0x20000210
 8001144:	20000211 	.word	0x20000211
 8001148:	0800ae58 	.word	0x0800ae58
 800114c:	20000214 	.word	0x20000214
 8001150:	20000212 	.word	0x20000212

08001154 <Send_RGB>:
        // Could handle error here
    }
}

// Send RGB data over I2C
void Send_RGB(uint16_t address, uint8_t red, uint8_t green, uint8_t blue, uint8_t mode) {
 8001154:	b590      	push	{r4, r7, lr}
 8001156:	b087      	sub	sp, #28
 8001158:	af02      	add	r7, sp, #8
 800115a:	4604      	mov	r4, r0
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4623      	mov	r3, r4
 8001164:	80fb      	strh	r3, [r7, #6]
 8001166:	4603      	mov	r3, r0
 8001168:	717b      	strb	r3, [r7, #5]
 800116a:	460b      	mov	r3, r1
 800116c:	713b      	strb	r3, [r7, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	70fb      	strb	r3, [r7, #3]
    uint8_t RGB_Buffer[4];
    RGB_Buffer[0] = red;
 8001172:	797b      	ldrb	r3, [r7, #5]
 8001174:	733b      	strb	r3, [r7, #12]
    RGB_Buffer[1] = green;
 8001176:	793b      	ldrb	r3, [r7, #4]
 8001178:	737b      	strb	r3, [r7, #13]
    RGB_Buffer[2] = blue;
 800117a:	78fb      	ldrb	r3, [r7, #3]
 800117c:	73bb      	strb	r3, [r7, #14]
    RGB_Buffer[3] = mode;
 800117e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001182:	73fb      	strb	r3, [r7, #15]

    // Transmit RGB values to the slave
    if (HAL_I2C_Master_Transmit(&hi2c1, (address << 1), RGB_Buffer, 4, HAL_MAX_DELAY) != HAL_OK) {
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	b299      	uxth	r1, r3
 800118a:	f107 020c 	add.w	r2, r7, #12
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2304      	movs	r3, #4
 8001196:	4803      	ldr	r0, [pc, #12]	; (80011a4 <Send_RGB+0x50>)
 8001198:	f002 f854 	bl	8003244 <HAL_I2C_Master_Transmit>
        //setErrorState(STATE_LED_DRIVER);
        //error_locker = address - 100;
        //error_flag = true;
    }
}
 800119c:	bf00      	nop
 800119e:	3714      	adds	r7, #20
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd90      	pop	{r4, r7, pc}
 80011a4:	200003e8 	.word	0x200003e8

080011a8 <Send_Price>:

// Send price values to the slave
void Send_Price(uint16_t address, uint8_t byte1, uint8_t byte2) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af02      	add	r7, sp, #8
 80011ae:	4603      	mov	r3, r0
 80011b0:	80fb      	strh	r3, [r7, #6]
 80011b2:	460b      	mov	r3, r1
 80011b4:	717b      	strb	r3, [r7, #5]
 80011b6:	4613      	mov	r3, r2
 80011b8:	713b      	strb	r3, [r7, #4]
    uint8_t Price_Buffer[2];
    Price_Buffer[0] = byte1;
 80011ba:	797b      	ldrb	r3, [r7, #5]
 80011bc:	733b      	strb	r3, [r7, #12]
    Price_Buffer[1] = byte2;
 80011be:	793b      	ldrb	r3, [r7, #4]
 80011c0:	737b      	strb	r3, [r7, #13]

    // Transmit price values to the slave
    if (HAL_I2C_Master_Transmit(&hi2c1, (address << 1), Price_Buffer, 2, HAL_MAX_DELAY) != HAL_OK) {
 80011c2:	88fb      	ldrh	r3, [r7, #6]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	b299      	uxth	r1, r3
 80011c8:	f107 020c 	add.w	r2, r7, #12
 80011cc:	f04f 33ff 	mov.w	r3, #4294967295
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2302      	movs	r3, #2
 80011d4:	4803      	ldr	r0, [pc, #12]	; (80011e4 <Send_Price+0x3c>)
 80011d6:	f002 f835 	bl	8003244 <HAL_I2C_Master_Transmit>
        //setErrorState(STATE_PRICE_TAG);
        //error_locker = address;
        //error_flag = true;
    }
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200003e8 	.word	0x200003e8

080011e8 <calculate_checksum>:
#include "locker.h"

extern UART_HandleTypeDef huart2;

// Function to calculate XOR checksum
uint8_t calculate_checksum(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3) {
 80011e8:	b490      	push	{r4, r7}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4604      	mov	r4, r0
 80011f0:	4608      	mov	r0, r1
 80011f2:	4611      	mov	r1, r2
 80011f4:	461a      	mov	r2, r3
 80011f6:	4623      	mov	r3, r4
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	4603      	mov	r3, r0
 80011fc:	71bb      	strb	r3, [r7, #6]
 80011fe:	460b      	mov	r3, r1
 8001200:	717b      	strb	r3, [r7, #5]
 8001202:	4613      	mov	r3, r2
 8001204:	713b      	strb	r3, [r7, #4]
    return byte0 ^ byte1 ^ byte2 ^ byte3;
 8001206:	79fa      	ldrb	r2, [r7, #7]
 8001208:	79bb      	ldrb	r3, [r7, #6]
 800120a:	4053      	eors	r3, r2
 800120c:	b2da      	uxtb	r2, r3
 800120e:	797b      	ldrb	r3, [r7, #5]
 8001210:	4053      	eors	r3, r2
 8001212:	b2da      	uxtb	r2, r3
 8001214:	793b      	ldrb	r3, [r7, #4]
 8001216:	4053      	eors	r3, r2
 8001218:	b2db      	uxtb	r3, r3
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bc90      	pop	{r4, r7}
 8001222:	4770      	bx	lr

08001224 <open_cabinet>:

// Function to open a cabinet
void open_cabinet(uint8_t locker_id) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
    if (locker_id < 1 || locker_id > 24) {
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d002      	beq.n	800123a <open_cabinet+0x16>
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	2b18      	cmp	r3, #24
 8001238:	d903      	bls.n	8001242 <open_cabinet+0x1e>
        printf("Invalid locker ID. Must be between 1 and 24.\n");
 800123a:	484d      	ldr	r0, [pc, #308]	; (8001370 <open_cabinet+0x14c>)
 800123c:	f005 ffea 	bl	8007214 <puts>
        return;
 8001240:	e093      	b.n	800136a <open_cabinet+0x146>
    }

    // Check the cabinet status first
    int status = read_cabinet_status(locker_id);
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	4618      	mov	r0, r3
 8001246:	f000 f8b3 	bl	80013b0 <read_cabinet_status>
 800124a:	61b8      	str	r0, [r7, #24]
    if (status == 1) {
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d105      	bne.n	800125e <open_cabinet+0x3a>
        printf("Locker %d is already open. No action required.\n", locker_id);
 8001252:	79fb      	ldrb	r3, [r7, #7]
 8001254:	4619      	mov	r1, r3
 8001256:	4847      	ldr	r0, [pc, #284]	; (8001374 <open_cabinet+0x150>)
 8001258:	f005 ff40 	bl	80070dc <iprintf>
        return;
 800125c:	e085      	b.n	800136a <open_cabinet+0x146>
    } else if (status == 0) {
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d17d      	bne.n	8001360 <open_cabinet+0x13c>
        uint8_t command[5];
        uint8_t response[5];

        // Build the command to open the cabinet
        command[0] = 0x8A;
 8001264:	238a      	movs	r3, #138	; 0x8a
 8001266:	743b      	strb	r3, [r7, #16]
        command[1] = 0x01;
 8001268:	2301      	movs	r3, #1
 800126a:	747b      	strb	r3, [r7, #17]
        command[2] = locker_id;
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	74bb      	strb	r3, [r7, #18]
        command[3] = 0x11;
 8001270:	2311      	movs	r3, #17
 8001272:	74fb      	strb	r3, [r7, #19]
        command[4] = calculate_checksum(command[0], command[1], command[2], command[3]);
 8001274:	7c38      	ldrb	r0, [r7, #16]
 8001276:	7c79      	ldrb	r1, [r7, #17]
 8001278:	7cba      	ldrb	r2, [r7, #18]
 800127a:	7cfb      	ldrb	r3, [r7, #19]
 800127c:	f7ff ffb4 	bl	80011e8 <calculate_checksum>
 8001280:	4603      	mov	r3, r0
 8001282:	753b      	strb	r3, [r7, #20]

        // Transmit the command
        RS485_Transmit(command, sizeof(command));
 8001284:	f107 0310 	add.w	r3, r7, #16
 8001288:	2105      	movs	r1, #5
 800128a:	4618      	mov	r0, r3
 800128c:	f000 f948 	bl	8001520 <RS485_Transmit>

        // Wait for the response
        if (HAL_UART_Receive(&huart2, response, sizeof(response), 1000) == HAL_OK) {
 8001290:	f107 0108 	add.w	r1, r7, #8
 8001294:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001298:	2205      	movs	r2, #5
 800129a:	4837      	ldr	r0, [pc, #220]	; (8001378 <open_cabinet+0x154>)
 800129c:	f004 fbc3 	bl	8005a26 <HAL_UART_Receive>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d158      	bne.n	8001358 <open_cabinet+0x134>
            printf("Response received: ");
 80012a6:	4835      	ldr	r0, [pc, #212]	; (800137c <open_cabinet+0x158>)
 80012a8:	f005 ff18 	bl	80070dc <iprintf>
            for (int i = 0; i < sizeof(response); i++) {
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
 80012b0:	e00b      	b.n	80012ca <open_cabinet+0xa6>
                printf("0x%02X ", response[i]);
 80012b2:	f107 0208 	add.w	r2, r7, #8
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	4413      	add	r3, r2
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	4830      	ldr	r0, [pc, #192]	; (8001380 <open_cabinet+0x15c>)
 80012c0:	f005 ff0c 	bl	80070dc <iprintf>
            for (int i = 0; i < sizeof(response); i++) {
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	3301      	adds	r3, #1
 80012c8:	61fb      	str	r3, [r7, #28]
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	2b04      	cmp	r3, #4
 80012ce:	d9f0      	bls.n	80012b2 <open_cabinet+0x8e>
            }
            printf("\n");
 80012d0:	200a      	movs	r0, #10
 80012d2:	f005 ff1b 	bl	800710c <putchar>

            uint8_t expected_checksum = calculate_checksum(response[0], response[1], response[2], response[3]);
 80012d6:	7a38      	ldrb	r0, [r7, #8]
 80012d8:	7a79      	ldrb	r1, [r7, #9]
 80012da:	7aba      	ldrb	r2, [r7, #10]
 80012dc:	7afb      	ldrb	r3, [r7, #11]
 80012de:	f7ff ff83 	bl	80011e8 <calculate_checksum>
 80012e2:	4603      	mov	r3, r0
 80012e4:	75fb      	strb	r3, [r7, #23]
            if (response[4] != expected_checksum) {
 80012e6:	7b3b      	ldrb	r3, [r7, #12]
 80012e8:	7dfa      	ldrb	r2, [r7, #23]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d003      	beq.n	80012f6 <open_cabinet+0xd2>
                printf("Response checksum error.\n");
 80012ee:	4825      	ldr	r0, [pc, #148]	; (8001384 <open_cabinet+0x160>)
 80012f0:	f005 ff90 	bl	8007214 <puts>
 80012f4:	e039      	b.n	800136a <open_cabinet+0x146>
                return;
            }

            if (response[3] == 0x11) {
 80012f6:	7afb      	ldrb	r3, [r7, #11]
 80012f8:	2b11      	cmp	r3, #17
 80012fa:	d11e      	bne.n	800133a <open_cabinet+0x116>
                printf("Locker %d opened successfully.\n", locker_id);
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4619      	mov	r1, r3
 8001300:	4821      	ldr	r0, [pc, #132]	; (8001388 <open_cabinet+0x164>)
 8001302:	f005 feeb 	bl	80070dc <iprintf>
                lockerOpened[locker_id - 1] = true;
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	3b01      	subs	r3, #1
 800130a:	4a20      	ldr	r2, [pc, #128]	; (800138c <open_cabinet+0x168>)
 800130c:	2101      	movs	r1, #1
 800130e:	54d1      	strb	r1, [r2, r3]
                openTimestamp[locker_id - 1] = HAL_GetTick();
 8001310:	f001 f8da 	bl	80024c8 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	1e59      	subs	r1, r3, #1
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	481c      	ldr	r0, [pc, #112]	; (8001390 <open_cabinet+0x16c>)
 8001320:	00c9      	lsls	r1, r1, #3
 8001322:	4401      	add	r1, r0
 8001324:	e9c1 2300 	strd	r2, r3, [r1]
                checkPending[locker_id - 1] = true;
 8001328:	79fb      	ldrb	r3, [r7, #7]
 800132a:	3b01      	subs	r3, #1
 800132c:	4a19      	ldr	r2, [pc, #100]	; (8001394 <open_cabinet+0x170>)
 800132e:	2101      	movs	r1, #1
 8001330:	54d1      	strb	r1, [r2, r3]
                lockerFlag = true;
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <open_cabinet+0x174>)
 8001334:	2201      	movs	r2, #1
 8001336:	701a      	strb	r2, [r3, #0]
 8001338:	e017      	b.n	800136a <open_cabinet+0x146>
            } else {
                printf("Unexpected response when opening locker %d.\n", locker_id);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	4619      	mov	r1, r3
 800133e:	4817      	ldr	r0, [pc, #92]	; (800139c <open_cabinet+0x178>)
 8001340:	f005 fecc 	bl	80070dc <iprintf>
                setErrorState(STATE_JAMMED);
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff fdad 	bl	8000ea4 <setErrorState>
                error_locker = locker_id;
 800134a:	4a15      	ldr	r2, [pc, #84]	; (80013a0 <open_cabinet+0x17c>)
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	7013      	strb	r3, [r2, #0]
                error_flag = true;
 8001350:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <open_cabinet+0x180>)
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
 8001356:	e008      	b.n	800136a <open_cabinet+0x146>
            }
        } else {
            printf("No response received when opening the cabinet.\n");
 8001358:	4813      	ldr	r0, [pc, #76]	; (80013a8 <open_cabinet+0x184>)
 800135a:	f005 ff5b 	bl	8007214 <puts>
 800135e:	e004      	b.n	800136a <open_cabinet+0x146>
        }
    } else {
        printf("Failed to determine the status of locker %d. Aborting open operation.\n", locker_id);
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	4619      	mov	r1, r3
 8001364:	4811      	ldr	r0, [pc, #68]	; (80013ac <open_cabinet+0x188>)
 8001366:	f005 feb9 	bl	80070dc <iprintf>
    }
}
 800136a:	3720      	adds	r7, #32
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	0800ae84 	.word	0x0800ae84
 8001374:	0800aeb4 	.word	0x0800aeb4
 8001378:	200004e4 	.word	0x200004e4
 800137c:	0800aee4 	.word	0x0800aee4
 8001380:	0800aef8 	.word	0x0800aef8
 8001384:	0800af00 	.word	0x0800af00
 8001388:	0800af1c 	.word	0x0800af1c
 800138c:	20000214 	.word	0x20000214
 8001390:	20000248 	.word	0x20000248
 8001394:	2000022c 	.word	0x2000022c
 8001398:	20000212 	.word	0x20000212
 800139c:	0800af3c 	.word	0x0800af3c
 80013a0:	20000210 	.word	0x20000210
 80013a4:	20000211 	.word	0x20000211
 80013a8:	0800af6c 	.word	0x0800af6c
 80013ac:	0800af9c 	.word	0x0800af9c

080013b0 <read_cabinet_status>:

// Function to read the cabinet status
int read_cabinet_status(uint8_t locker_id) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
    if (locker_id < 1 || locker_id > 24) {
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <read_cabinet_status+0x16>
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	2b18      	cmp	r3, #24
 80013c4:	d905      	bls.n	80013d2 <read_cabinet_status+0x22>
        printf("Invalid locker ID. Must be between 1 and 24.\n");
 80013c6:	483b      	ldr	r0, [pc, #236]	; (80014b4 <read_cabinet_status+0x104>)
 80013c8:	f005 ff24 	bl	8007214 <puts>
        return -1;
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295
 80013d0:	e06b      	b.n	80014aa <read_cabinet_status+0xfa>

    uint8_t command[5];
    uint8_t response[5];

    // Build the command to read the cabinet status
    command[0] = 0x80;
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	753b      	strb	r3, [r7, #20]
    command[1] = 0x01;
 80013d6:	2301      	movs	r3, #1
 80013d8:	757b      	strb	r3, [r7, #21]
    command[2] = locker_id;
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	75bb      	strb	r3, [r7, #22]
    command[3] = 0x33;
 80013de:	2333      	movs	r3, #51	; 0x33
 80013e0:	75fb      	strb	r3, [r7, #23]
    command[4] = calculate_checksum(command[0], command[1], command[2], command[3]);
 80013e2:	7d38      	ldrb	r0, [r7, #20]
 80013e4:	7d79      	ldrb	r1, [r7, #21]
 80013e6:	7dba      	ldrb	r2, [r7, #22]
 80013e8:	7dfb      	ldrb	r3, [r7, #23]
 80013ea:	f7ff fefd 	bl	80011e8 <calculate_checksum>
 80013ee:	4603      	mov	r3, r0
 80013f0:	763b      	strb	r3, [r7, #24]

    // Transmit the command
    RS485_Transmit(command, sizeof(command));
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	2105      	movs	r1, #5
 80013f8:	4618      	mov	r0, r3
 80013fa:	f000 f891 	bl	8001520 <RS485_Transmit>

    // Wait for the response
    if (HAL_UART_Receive(&huart2, response, sizeof(response), 1000) == HAL_OK) {
 80013fe:	f107 010c 	add.w	r1, r7, #12
 8001402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001406:	2205      	movs	r2, #5
 8001408:	482b      	ldr	r0, [pc, #172]	; (80014b8 <read_cabinet_status+0x108>)
 800140a:	f004 fb0c 	bl	8005a26 <HAL_UART_Receive>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d145      	bne.n	80014a0 <read_cabinet_status+0xf0>
        // Print the raw response
        printf("Response received: ");
 8001414:	4829      	ldr	r0, [pc, #164]	; (80014bc <read_cabinet_status+0x10c>)
 8001416:	f005 fe61 	bl	80070dc <iprintf>
        for (int i = 0; i < sizeof(response); i++) {
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
 800141e:	e00b      	b.n	8001438 <read_cabinet_status+0x88>
            printf("0x%02X ", response[i]);
 8001420:	f107 020c 	add.w	r2, r7, #12
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	4413      	add	r3, r2
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	4619      	mov	r1, r3
 800142c:	4824      	ldr	r0, [pc, #144]	; (80014c0 <read_cabinet_status+0x110>)
 800142e:	f005 fe55 	bl	80070dc <iprintf>
        for (int i = 0; i < sizeof(response); i++) {
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	3301      	adds	r3, #1
 8001436:	61fb      	str	r3, [r7, #28]
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	2b04      	cmp	r3, #4
 800143c:	d9f0      	bls.n	8001420 <read_cabinet_status+0x70>
        }
        printf("\n");
 800143e:	200a      	movs	r0, #10
 8001440:	f005 fe64 	bl	800710c <putchar>

        // Validate the response
        uint8_t expected_checksum = calculate_checksum(response[0], response[1], response[2], response[3]);
 8001444:	7b38      	ldrb	r0, [r7, #12]
 8001446:	7b79      	ldrb	r1, [r7, #13]
 8001448:	7bba      	ldrb	r2, [r7, #14]
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	f7ff fecc 	bl	80011e8 <calculate_checksum>
 8001450:	4603      	mov	r3, r0
 8001452:	76fb      	strb	r3, [r7, #27]
        if (response[4] != expected_checksum) {
 8001454:	7c3b      	ldrb	r3, [r7, #16]
 8001456:	7efa      	ldrb	r2, [r7, #27]
 8001458:	429a      	cmp	r2, r3
 800145a:	d005      	beq.n	8001468 <read_cabinet_status+0xb8>
            printf("Response checksum error.\n");
 800145c:	4819      	ldr	r0, [pc, #100]	; (80014c4 <read_cabinet_status+0x114>)
 800145e:	f005 fed9 	bl	8007214 <puts>
            return -1;
 8001462:	f04f 33ff 	mov.w	r3, #4294967295
 8001466:	e020      	b.n	80014aa <read_cabinet_status+0xfa>
        }

        // Interpret the response
        if (response[3] == 0x11) {
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	2b11      	cmp	r3, #17
 800146c:	d106      	bne.n	800147c <read_cabinet_status+0xcc>
            printf("Locker %d is open.\n", locker_id);
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	4619      	mov	r1, r3
 8001472:	4815      	ldr	r0, [pc, #84]	; (80014c8 <read_cabinet_status+0x118>)
 8001474:	f005 fe32 	bl	80070dc <iprintf>
            return 1; // Locker is open
 8001478:	2301      	movs	r3, #1
 800147a:	e016      	b.n	80014aa <read_cabinet_status+0xfa>
        } else if (response[3] == 0x00) {
 800147c:	7bfb      	ldrb	r3, [r7, #15]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d106      	bne.n	8001490 <read_cabinet_status+0xe0>
            printf("Locker %d is closed.\n", locker_id);
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	4619      	mov	r1, r3
 8001486:	4811      	ldr	r0, [pc, #68]	; (80014cc <read_cabinet_status+0x11c>)
 8001488:	f005 fe28 	bl	80070dc <iprintf>
            return 0; // Locker is closed
 800148c:	2300      	movs	r3, #0
 800148e:	e00c      	b.n	80014aa <read_cabinet_status+0xfa>
        } else {
            printf("Unexpected response for locker %d.\n", locker_id);
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	4619      	mov	r1, r3
 8001494:	480e      	ldr	r0, [pc, #56]	; (80014d0 <read_cabinet_status+0x120>)
 8001496:	f005 fe21 	bl	80070dc <iprintf>
            return -1; // Error or unexpected
 800149a:	f04f 33ff 	mov.w	r3, #4294967295
 800149e:	e004      	b.n	80014aa <read_cabinet_status+0xfa>
        }
    } else {
        printf("No response received when reading the cabinet status.\n");
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <read_cabinet_status+0x124>)
 80014a2:	f005 feb7 	bl	8007214 <puts>
        //setErrorState(STATE_JAMMED);
        //error_locker = locker_id;
        //error_flag = true;
        return -1;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3720      	adds	r7, #32
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	0800ae84 	.word	0x0800ae84
 80014b8:	200004e4 	.word	0x200004e4
 80014bc:	0800aee4 	.word	0x0800aee4
 80014c0:	0800aef8 	.word	0x0800aef8
 80014c4:	0800af00 	.word	0x0800af00
 80014c8:	0800afe4 	.word	0x0800afe4
 80014cc:	0800aff8 	.word	0x0800aff8
 80014d0:	0800b010 	.word	0x0800b010
 80014d4:	0800b034 	.word	0x0800b034

080014d8 <RS485_SetTransmitMode>:

// Set RS485 to transmit mode
void RS485_SetTransmitMode(void) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_SET);
 80014dc:	2201      	movs	r2, #1
 80014de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e2:	4805      	ldr	r0, [pc, #20]	; (80014f8 <RS485_SetTransmitMode+0x20>)
 80014e4:	f001 fdea 	bl	80030bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ee:	4802      	ldr	r0, [pc, #8]	; (80014f8 <RS485_SetTransmitMode+0x20>)
 80014f0:	f001 fde4 	bl	80030bc <HAL_GPIO_WritePin>
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021800 	.word	0x40021800

080014fc <RS485_SetReceiveMode>:

// Set RS485 to receive mode
void RS485_SetReceiveMode(void) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <RS485_SetReceiveMode+0x20>)
 8001508:	f001 fdd8 	bl	80030bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001512:	4802      	ldr	r0, [pc, #8]	; (800151c <RS485_SetReceiveMode+0x20>)
 8001514:	f001 fdd2 	bl	80030bc <HAL_GPIO_WritePin>
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40021800 	.word	0x40021800

08001520 <RS485_Transmit>:

// Transmit data via RS485
void RS485_Transmit(uint8_t *data, uint16_t size) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	460b      	mov	r3, r1
 800152a:	807b      	strh	r3, [r7, #2]
    RS485_SetTransmitMode();
 800152c:	f7ff ffd4 	bl	80014d8 <RS485_SetTransmitMode>
    HAL_UART_Transmit(&huart2, data, size, HAL_MAX_DELAY);
 8001530:	887a      	ldrh	r2, [r7, #2]
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
 8001536:	6879      	ldr	r1, [r7, #4]
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <RS485_Transmit+0x2c>)
 800153a:	f004 f9e1 	bl	8005900 <HAL_UART_Transmit>
    RS485_SetReceiveMode();
 800153e:	f7ff ffdd 	bl	80014fc <RS485_SetReceiveMode>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200004e4 	.word	0x200004e4

08001550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001554:	f000 ff67 	bl	8002426 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001558:	f000 f816 	bl	8001588 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800155c:	f000 fa18 	bl	8001990 <MX_GPIO_Init>
  MX_DMA_Init();
 8001560:	f000 f9f0 	bl	8001944 <MX_DMA_Init>
  MX_SPI1_Init();
 8001564:	f000 f956 	bl	8001814 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001568:	f000 f9bc 	bl	80018e4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800156c:	f000 f892 	bl	8001694 <MX_I2C1_Init>
  MX_I2C4_Init();
 8001570:	f000 f910 	bl	8001794 <MX_I2C4_Init>
  MX_I2C2_Init();
 8001574:	f000 f8ce 	bl	8001714 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001578:	f000 f984 	bl	8001884 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  init_application();
 800157c:	f7ff fc14 	bl	8000da8 <init_application>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop_application();
 8001580:	f7ff fc28 	bl	8000dd4 <loop_application>
 8001584:	e7fc      	b.n	8001580 <main+0x30>
	...

08001588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b0b8      	sub	sp, #224	; 0xe0
 800158c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001592:	2234      	movs	r2, #52	; 0x34
 8001594:	2100      	movs	r1, #0
 8001596:	4618      	mov	r0, r3
 8001598:	f004 ff52 	bl	8006440 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800159c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015ac:	f107 0308 	add.w	r3, r7, #8
 80015b0:	2290      	movs	r2, #144	; 0x90
 80015b2:	2100      	movs	r1, #0
 80015b4:	4618      	mov	r0, r3
 80015b6:	f004 ff43 	bl	8006440 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015ba:	f002 fb3d 	bl	8003c38 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015be:	4b32      	ldr	r3, [pc, #200]	; (8001688 <SystemClock_Config+0x100>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a31      	ldr	r2, [pc, #196]	; (8001688 <SystemClock_Config+0x100>)
 80015c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b2f      	ldr	r3, [pc, #188]	; (8001688 <SystemClock_Config+0x100>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015d6:	4b2d      	ldr	r3, [pc, #180]	; (800168c <SystemClock_Config+0x104>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015de:	4a2b      	ldr	r2, [pc, #172]	; (800168c <SystemClock_Config+0x104>)
 80015e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	4b29      	ldr	r3, [pc, #164]	; (800168c <SystemClock_Config+0x104>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015f2:	2302      	movs	r3, #2
 80015f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015f8:	2301      	movs	r3, #1
 80015fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015fe:	2310      	movs	r3, #16
 8001600:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001604:	2300      	movs	r3, #0
 8001606:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800160a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800160e:	4618      	mov	r0, r3
 8001610:	f002 fb22 	bl	8003c58 <HAL_RCC_OscConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800161a:	f000 fa4d 	bl	8001ab8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800161e:	230f      	movs	r3, #15
 8001620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001624:	2300      	movs	r3, #0
 8001626:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001630:	2300      	movs	r3, #0
 8001632:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001636:	2300      	movs	r3, #0
 8001638:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800163c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001640:	2100      	movs	r1, #0
 8001642:	4618      	mov	r0, r3
 8001644:	f002 fdb6 	bl	80041b4 <HAL_RCC_ClockConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800164e:	f000 fa33 	bl	8001ab8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <SystemClock_Config+0x108>)
 8001654:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001656:	2300      	movs	r3, #0
 8001658:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800165a:	2300      	movs	r3, #0
 800165c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800165e:	2300      	movs	r3, #0
 8001660:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001662:	2300      	movs	r3, #0
 8001664:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001666:	2300      	movs	r3, #0
 8001668:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	4618      	mov	r0, r3
 8001670:	f002 ff76 	bl	8004560 <HAL_RCCEx_PeriphCLKConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800167a:	f000 fa1d 	bl	8001ab8 <Error_Handler>
  }
}
 800167e:	bf00      	nop
 8001680:	37e0      	adds	r7, #224	; 0xe0
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	40007000 	.word	0x40007000
 8001690:	0002c180 	.word	0x0002c180

08001694 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001698:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <MX_I2C1_Init+0x74>)
 800169a:	4a1c      	ldr	r2, [pc, #112]	; (800170c <MX_I2C1_Init+0x78>)
 800169c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 800169e:	4b1a      	ldr	r3, [pc, #104]	; (8001708 <MX_I2C1_Init+0x74>)
 80016a0:	4a1b      	ldr	r2, [pc, #108]	; (8001710 <MX_I2C1_Init+0x7c>)
 80016a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016a4:	4b18      	ldr	r3, [pc, #96]	; (8001708 <MX_I2C1_Init+0x74>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <MX_I2C1_Init+0x74>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b0:	4b15      	ldr	r3, [pc, #84]	; (8001708 <MX_I2C1_Init+0x74>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <MX_I2C1_Init+0x74>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <MX_I2C1_Init+0x74>)
 80016be:	2200      	movs	r2, #0
 80016c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016c2:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_I2C1_Init+0x74>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <MX_I2C1_Init+0x74>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016ce:	480e      	ldr	r0, [pc, #56]	; (8001708 <MX_I2C1_Init+0x74>)
 80016d0:	f001 fd28 	bl	8003124 <HAL_I2C_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016da:	f000 f9ed 	bl	8001ab8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016de:	2100      	movs	r1, #0
 80016e0:	4809      	ldr	r0, [pc, #36]	; (8001708 <MX_I2C1_Init+0x74>)
 80016e2:	f002 fa11 	bl	8003b08 <HAL_I2CEx_ConfigAnalogFilter>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016ec:	f000 f9e4 	bl	8001ab8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016f0:	2100      	movs	r1, #0
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_I2C1_Init+0x74>)
 80016f4:	f002 fa53 	bl	8003b9e <HAL_I2CEx_ConfigDigitalFilter>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016fe:	f000 f9db 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	200003e8 	.word	0x200003e8
 800170c:	40005400 	.word	0x40005400
 8001710:	00303d5b 	.word	0x00303d5b

08001714 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <MX_I2C2_Init+0x74>)
 800171a:	4a1c      	ldr	r2, [pc, #112]	; (800178c <MX_I2C2_Init+0x78>)
 800171c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800171e:	4b1a      	ldr	r3, [pc, #104]	; (8001788 <MX_I2C2_Init+0x74>)
 8001720:	4a1b      	ldr	r2, [pc, #108]	; (8001790 <MX_I2C2_Init+0x7c>)
 8001722:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001724:	4b18      	ldr	r3, [pc, #96]	; (8001788 <MX_I2C2_Init+0x74>)
 8001726:	2200      	movs	r2, #0
 8001728:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800172a:	4b17      	ldr	r3, [pc, #92]	; (8001788 <MX_I2C2_Init+0x74>)
 800172c:	2201      	movs	r2, #1
 800172e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001730:	4b15      	ldr	r3, [pc, #84]	; (8001788 <MX_I2C2_Init+0x74>)
 8001732:	2200      	movs	r2, #0
 8001734:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001736:	4b14      	ldr	r3, [pc, #80]	; (8001788 <MX_I2C2_Init+0x74>)
 8001738:	2200      	movs	r2, #0
 800173a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <MX_I2C2_Init+0x74>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <MX_I2C2_Init+0x74>)
 8001744:	2200      	movs	r2, #0
 8001746:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <MX_I2C2_Init+0x74>)
 800174a:	2200      	movs	r2, #0
 800174c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800174e:	480e      	ldr	r0, [pc, #56]	; (8001788 <MX_I2C2_Init+0x74>)
 8001750:	f001 fce8 	bl	8003124 <HAL_I2C_Init>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800175a:	f000 f9ad 	bl	8001ab8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800175e:	2100      	movs	r1, #0
 8001760:	4809      	ldr	r0, [pc, #36]	; (8001788 <MX_I2C2_Init+0x74>)
 8001762:	f002 f9d1 	bl	8003b08 <HAL_I2CEx_ConfigAnalogFilter>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800176c:	f000 f9a4 	bl	8001ab8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001770:	2100      	movs	r1, #0
 8001772:	4805      	ldr	r0, [pc, #20]	; (8001788 <MX_I2C2_Init+0x74>)
 8001774:	f002 fa13 	bl	8003b9e <HAL_I2CEx_ConfigDigitalFilter>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800177e:	f000 f99b 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000434 	.word	0x20000434
 800178c:	40005800 	.word	0x40005800
 8001790:	00303d5b 	.word	0x00303d5b

08001794 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <MX_I2C4_Init+0x74>)
 800179a:	4a1c      	ldr	r2, [pc, #112]	; (800180c <MX_I2C4_Init+0x78>)
 800179c:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00303D5B;
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <MX_I2C4_Init+0x74>)
 80017a0:	4a1b      	ldr	r2, [pc, #108]	; (8001810 <MX_I2C4_Init+0x7c>)
 80017a2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80017a4:	4b18      	ldr	r3, [pc, #96]	; (8001808 <MX_I2C4_Init+0x74>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017aa:	4b17      	ldr	r3, [pc, #92]	; (8001808 <MX_I2C4_Init+0x74>)
 80017ac:	2201      	movs	r2, #1
 80017ae:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017b0:	4b15      	ldr	r3, [pc, #84]	; (8001808 <MX_I2C4_Init+0x74>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80017b6:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_I2C4_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <MX_I2C4_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_I2C4_Init+0x74>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_I2C4_Init+0x74>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80017ce:	480e      	ldr	r0, [pc, #56]	; (8001808 <MX_I2C4_Init+0x74>)
 80017d0:	f001 fca8 	bl	8003124 <HAL_I2C_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80017da:	f000 f96d 	bl	8001ab8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017de:	2100      	movs	r1, #0
 80017e0:	4809      	ldr	r0, [pc, #36]	; (8001808 <MX_I2C4_Init+0x74>)
 80017e2:	f002 f991 	bl	8003b08 <HAL_I2CEx_ConfigAnalogFilter>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80017ec:	f000 f964 	bl	8001ab8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80017f0:	2100      	movs	r1, #0
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_I2C4_Init+0x74>)
 80017f4:	f002 f9d3 	bl	8003b9e <HAL_I2CEx_ConfigDigitalFilter>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80017fe:	f000 f95b 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000318 	.word	0x20000318
 800180c:	40006000 	.word	0x40006000
 8001810:	00303d5b 	.word	0x00303d5b

08001814 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001818:	4b18      	ldr	r3, [pc, #96]	; (800187c <MX_SPI1_Init+0x68>)
 800181a:	4a19      	ldr	r2, [pc, #100]	; (8001880 <MX_SPI1_Init+0x6c>)
 800181c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800181e:	4b17      	ldr	r3, [pc, #92]	; (800187c <MX_SPI1_Init+0x68>)
 8001820:	2200      	movs	r2, #0
 8001822:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001824:	4b15      	ldr	r3, [pc, #84]	; (800187c <MX_SPI1_Init+0x68>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800182a:	4b14      	ldr	r3, [pc, #80]	; (800187c <MX_SPI1_Init+0x68>)
 800182c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001830:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001832:	4b12      	ldr	r3, [pc, #72]	; (800187c <MX_SPI1_Init+0x68>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001838:	4b10      	ldr	r3, [pc, #64]	; (800187c <MX_SPI1_Init+0x68>)
 800183a:	2200      	movs	r2, #0
 800183c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <MX_SPI1_Init+0x68>)
 8001840:	2200      	movs	r2, #0
 8001842:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001844:	4b0d      	ldr	r3, [pc, #52]	; (800187c <MX_SPI1_Init+0x68>)
 8001846:	2200      	movs	r2, #0
 8001848:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <MX_SPI1_Init+0x68>)
 800184c:	2200      	movs	r2, #0
 800184e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001850:	4b0a      	ldr	r3, [pc, #40]	; (800187c <MX_SPI1_Init+0x68>)
 8001852:	2200      	movs	r2, #0
 8001854:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <MX_SPI1_Init+0x68>)
 8001858:	2207      	movs	r2, #7
 800185a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800185c:	4b07      	ldr	r3, [pc, #28]	; (800187c <MX_SPI1_Init+0x68>)
 800185e:	2200      	movs	r2, #0
 8001860:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <MX_SPI1_Init+0x68>)
 8001864:	2200      	movs	r2, #0
 8001866:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001868:	4804      	ldr	r0, [pc, #16]	; (800187c <MX_SPI1_Init+0x68>)
 800186a:	f003 faa1 	bl	8004db0 <HAL_SPI_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8001874:	f000 f920 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000480 	.word	0x20000480
 8001880:	40013000 	.word	0x40013000

08001884 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <MX_USART2_UART_Init+0x58>)
 800188a:	4a15      	ldr	r2, [pc, #84]	; (80018e0 <MX_USART2_UART_Init+0x5c>)
 800188c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800188e:	4b13      	ldr	r3, [pc, #76]	; (80018dc <MX_USART2_UART_Init+0x58>)
 8001890:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001894:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <MX_USART2_UART_Init+0x58>)
 8001898:	2200      	movs	r2, #0
 800189a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <MX_USART2_UART_Init+0x58>)
 800189e:	2200      	movs	r2, #0
 80018a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <MX_USART2_UART_Init+0x58>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <MX_USART2_UART_Init+0x58>)
 80018aa:	220c      	movs	r2, #12
 80018ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ae:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <MX_USART2_UART_Init+0x58>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b4:	4b09      	ldr	r3, [pc, #36]	; (80018dc <MX_USART2_UART_Init+0x58>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018ba:	4b08      	ldr	r3, [pc, #32]	; (80018dc <MX_USART2_UART_Init+0x58>)
 80018bc:	2200      	movs	r2, #0
 80018be:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <MX_USART2_UART_Init+0x58>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018c6:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_USART2_UART_Init+0x58>)
 80018c8:	f003 ffcc 	bl	8005864 <HAL_UART_Init>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018d2:	f000 f8f1 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200004e4 	.word	0x200004e4
 80018e0:	40004400 	.word	0x40004400

080018e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <MX_USART3_UART_Init+0x58>)
 80018ea:	4a15      	ldr	r2, [pc, #84]	; (8001940 <MX_USART3_UART_Init+0x5c>)
 80018ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018ee:	4b13      	ldr	r3, [pc, #76]	; (800193c <MX_USART3_UART_Init+0x58>)
 80018f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018f6:	4b11      	ldr	r3, [pc, #68]	; (800193c <MX_USART3_UART_Init+0x58>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_USART3_UART_Init+0x58>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001902:	4b0e      	ldr	r3, [pc, #56]	; (800193c <MX_USART3_UART_Init+0x58>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <MX_USART3_UART_Init+0x58>)
 800190a:	220c      	movs	r2, #12
 800190c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190e:	4b0b      	ldr	r3, [pc, #44]	; (800193c <MX_USART3_UART_Init+0x58>)
 8001910:	2200      	movs	r2, #0
 8001912:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <MX_USART3_UART_Init+0x58>)
 8001916:	2200      	movs	r2, #0
 8001918:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <MX_USART3_UART_Init+0x58>)
 800191c:	2200      	movs	r2, #0
 800191e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <MX_USART3_UART_Init+0x58>)
 8001922:	2200      	movs	r2, #0
 8001924:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001926:	4805      	ldr	r0, [pc, #20]	; (800193c <MX_USART3_UART_Init+0x58>)
 8001928:	f003 ff9c 	bl	8005864 <HAL_UART_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001932:	f000 f8c1 	bl	8001ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000364 	.word	0x20000364
 8001940:	40004800 	.word	0x40004800

08001944 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800194a:	4b10      	ldr	r3, [pc, #64]	; (800198c <MX_DMA_Init+0x48>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	4a0f      	ldr	r2, [pc, #60]	; (800198c <MX_DMA_Init+0x48>)
 8001950:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001954:	6313      	str	r3, [r2, #48]	; 0x30
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <MX_DMA_Init+0x48>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	2100      	movs	r1, #0
 8001966:	2038      	movs	r0, #56	; 0x38
 8001968:	f000 feb9 	bl	80026de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800196c:	2038      	movs	r0, #56	; 0x38
 800196e:	f000 fed2 	bl	8002716 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	203b      	movs	r0, #59	; 0x3b
 8001978:	f000 feb1 	bl	80026de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800197c:	203b      	movs	r0, #59	; 0x3b
 800197e:	f000 feca 	bl	8002716 <HAL_NVIC_EnableIRQ>

}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800

08001990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08c      	sub	sp, #48	; 0x30
 8001994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
 80019a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a6:	4b41      	ldr	r3, [pc, #260]	; (8001aac <MX_GPIO_Init+0x11c>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	4a40      	ldr	r2, [pc, #256]	; (8001aac <MX_GPIO_Init+0x11c>)
 80019ac:	f043 0304 	orr.w	r3, r3, #4
 80019b0:	6313      	str	r3, [r2, #48]	; 0x30
 80019b2:	4b3e      	ldr	r3, [pc, #248]	; (8001aac <MX_GPIO_Init+0x11c>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	61bb      	str	r3, [r7, #24]
 80019bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019be:	4b3b      	ldr	r3, [pc, #236]	; (8001aac <MX_GPIO_Init+0x11c>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a3a      	ldr	r2, [pc, #232]	; (8001aac <MX_GPIO_Init+0x11c>)
 80019c4:	f043 0320 	orr.w	r3, r3, #32
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b38      	ldr	r3, [pc, #224]	; (8001aac <MX_GPIO_Init+0x11c>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0320 	and.w	r3, r3, #32
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019d6:	4b35      	ldr	r3, [pc, #212]	; (8001aac <MX_GPIO_Init+0x11c>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a34      	ldr	r2, [pc, #208]	; (8001aac <MX_GPIO_Init+0x11c>)
 80019dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b32      	ldr	r3, [pc, #200]	; (8001aac <MX_GPIO_Init+0x11c>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ee:	4b2f      	ldr	r3, [pc, #188]	; (8001aac <MX_GPIO_Init+0x11c>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f2:	4a2e      	ldr	r2, [pc, #184]	; (8001aac <MX_GPIO_Init+0x11c>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6313      	str	r3, [r2, #48]	; 0x30
 80019fa:	4b2c      	ldr	r3, [pc, #176]	; (8001aac <MX_GPIO_Init+0x11c>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	4b29      	ldr	r3, [pc, #164]	; (8001aac <MX_GPIO_Init+0x11c>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0a:	4a28      	ldr	r2, [pc, #160]	; (8001aac <MX_GPIO_Init+0x11c>)
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	6313      	str	r3, [r2, #48]	; 0x30
 8001a12:	4b26      	ldr	r3, [pc, #152]	; (8001aac <MX_GPIO_Init+0x11c>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a1e:	4b23      	ldr	r3, [pc, #140]	; (8001aac <MX_GPIO_Init+0x11c>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a22      	ldr	r2, [pc, #136]	; (8001aac <MX_GPIO_Init+0x11c>)
 8001a24:	f043 0308 	orr.w	r3, r3, #8
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b20      	ldr	r3, [pc, #128]	; (8001aac <MX_GPIO_Init+0x11c>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	607b      	str	r3, [r7, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a36:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <MX_GPIO_Init+0x11c>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a1c      	ldr	r2, [pc, #112]	; (8001aac <MX_GPIO_Init+0x11c>)
 8001a3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <MX_GPIO_Init+0x11c>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a4a:	603b      	str	r3, [r7, #0]
 8001a4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a54:	4816      	ldr	r0, [pc, #88]	; (8001ab0 <MX_GPIO_Init+0x120>)
 8001a56:	f001 fb31 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8001a60:	4814      	ldr	r0, [pc, #80]	; (8001ab4 <MX_GPIO_Init+0x124>)
 8001a62:	f001 fb2b 	bl	80030bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001a66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a74:	2300      	movs	r3, #0
 8001a76:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a78:	f107 031c 	add.w	r3, r7, #28
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	480c      	ldr	r0, [pc, #48]	; (8001ab0 <MX_GPIO_Init+0x120>)
 8001a80:	f001 f970 	bl	8002d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG10 PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13;
 8001a84:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a96:	f107 031c 	add.w	r3, r7, #28
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4805      	ldr	r0, [pc, #20]	; (8001ab4 <MX_GPIO_Init+0x124>)
 8001a9e:	f001 f961 	bl	8002d64 <HAL_GPIO_Init>

}
 8001aa2:	bf00      	nop
 8001aa4:	3730      	adds	r7, #48	; 0x30
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020400 	.word	0x40020400
 8001ab4:	40021800 	.word	0x40021800

08001ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001abc:	b672      	cpsid	i
}
 8001abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1) {
 8001ac0:	e7fe      	b.n	8001ac0 <Error_Handler+0x8>
	...

08001ac4 <__io_putchar>:

extern UART_HandleTypeDef huart3;


#ifdef __GNUC__
int __io_putchar(int ch) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001acc:	1d39      	adds	r1, r7, #4
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <__io_putchar+0x20>)
 8001ad6:	f003 ff13 	bl	8005900 <HAL_UART_Transmit>
    return ch;
 8001ada:	687b      	ldr	r3, [r7, #4]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000364 	.word	0x20000364

08001ae8 <getSPIFlag>:
static bool send_spi_flag = true;

extern SPI_HandleTypeDef hspi1;


bool getSPIFlag(){
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
	return spi_flag;
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <getSPIFlag+0x14>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000308 	.word	0x20000308

08001b00 <getSendSPIFlag>:
bool getSendSPIFlag(){
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
	return send_spi_flag;
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <getSendSPIFlag+0x14>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	20000001 	.word	0x20000001

08001b18 <HAL_SPI_TxRxCpltCallback>:


// SPI receive complete callback
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1) {
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0e      	ldr	r2, [pc, #56]	; (8001b60 <HAL_SPI_TxRxCpltCallback+0x48>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d115      	bne.n	8001b56 <HAL_SPI_TxRxCpltCallback+0x3e>

    	send_spi_flag = false;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_SPI_TxRxCpltCallback+0x4c>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	701a      	strb	r2, [r3, #0]
    	if(spi_rx_buffer[0] != 0xFF){
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <HAL_SPI_TxRxCpltCallback+0x50>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	2bff      	cmp	r3, #255	; 0xff
 8001b36:	d008      	beq.n	8001b4a <HAL_SPI_TxRxCpltCallback+0x32>
    		spi_flag = true;
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_SPI_TxRxCpltCallback+0x54>)
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	701a      	strb	r2, [r3, #0]
    		memcpy(rpi_msg, spi_rx_buffer, SPI_BUFFER_SIZE);
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <HAL_SPI_TxRxCpltCallback+0x58>)
 8001b40:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <HAL_SPI_TxRxCpltCallback+0x50>)
 8001b42:	6811      	ldr	r1, [r2, #0]
 8001b44:	6019      	str	r1, [r3, #0]
 8001b46:	8892      	ldrh	r2, [r2, #4]
 8001b48:	809a      	strh	r2, [r3, #4]
    	}
        HAL_SPI_TransmitReceive_IT(&hspi1, spi_tx_buffer, spi_rx_buffer, SPI_BUFFER_SIZE);
 8001b4a:	2306      	movs	r3, #6
 8001b4c:	4a06      	ldr	r2, [pc, #24]	; (8001b68 <HAL_SPI_TxRxCpltCallback+0x50>)
 8001b4e:	4909      	ldr	r1, [pc, #36]	; (8001b74 <HAL_SPI_TxRxCpltCallback+0x5c>)
 8001b50:	4809      	ldr	r0, [pc, #36]	; (8001b78 <HAL_SPI_TxRxCpltCallback+0x60>)
 8001b52:	f003 f9d9 	bl	8004f08 <HAL_SPI_TransmitReceive_IT>


    }
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40013000 	.word	0x40013000
 8001b64:	20000001 	.word	0x20000001
 8001b68:	20000628 	.word	0x20000628
 8001b6c:	20000308 	.word	0x20000308
 8001b70:	20000638 	.word	0x20000638
 8001b74:	20000630 	.word	0x20000630
 8001b78:	20000480 	.word	0x20000480

08001b7c <Process_SPI_Command>:




// Function to handle received SPI data
void Process_SPI_Command(uint8_t *data, uint16_t size) {
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b08b      	sub	sp, #44	; 0x2c
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	807b      	strh	r3, [r7, #2]
	uint8_t red = 255;
 8001b88:	23ff      	movs	r3, #255	; 0xff
 8001b8a:	74fb      	strb	r3, [r7, #19]
	uint8_t green = 255;
 8001b8c:	23ff      	movs	r3, #255	; 0xff
 8001b8e:	74bb      	strb	r3, [r7, #18]
	uint8_t blue = 255;
 8001b90:	23ff      	movs	r3, #255	; 0xff
 8001b92:	747b      	strb	r3, [r7, #17]
	uint8_t mode = 0xFF;
 8001b94:	23ff      	movs	r3, #255	; 0xff
 8001b96:	743b      	strb	r3, [r7, #16]

    printf("SPI Data Received: ");
 8001b98:	485e      	ldr	r0, [pc, #376]	; (8001d14 <Process_SPI_Command+0x198>)
 8001b9a:	f005 fa9f 	bl	80070dc <iprintf>
    for (uint16_t i = 0; i < size; i++) {
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	83fb      	strh	r3, [r7, #30]
 8001ba2:	e00a      	b.n	8001bba <Process_SPI_Command+0x3e>
        printf("0x%02X ", data[i]);
 8001ba4:	8bfb      	ldrh	r3, [r7, #30]
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	4413      	add	r3, r2
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	485a      	ldr	r0, [pc, #360]	; (8001d18 <Process_SPI_Command+0x19c>)
 8001bb0:	f005 fa94 	bl	80070dc <iprintf>
    for (uint16_t i = 0; i < size; i++) {
 8001bb4:	8bfb      	ldrh	r3, [r7, #30]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	83fb      	strh	r3, [r7, #30]
 8001bba:	8bfa      	ldrh	r2, [r7, #30]
 8001bbc:	887b      	ldrh	r3, [r7, #2]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d3f0      	bcc.n	8001ba4 <Process_SPI_Command+0x28>
    }
    printf("\r\n");
 8001bc2:	4856      	ldr	r0, [pc, #344]	; (8001d1c <Process_SPI_Command+0x1a0>)
 8001bc4:	f005 fb26 	bl	8007214 <puts>

    // Example: Handle LED color command (0x01)
    if (data[0] == 0x01) {
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d142      	bne.n	8001c56 <Process_SPI_Command+0xda>
        uint8_t locker_id = data[1];
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	785b      	ldrb	r3, [r3, #1]
 8001bd4:	73fb      	strb	r3, [r7, #15]
        red = data[2];
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	789b      	ldrb	r3, [r3, #2]
 8001bda:	74fb      	strb	r3, [r7, #19]
        green = data[3];
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	78db      	ldrb	r3, [r3, #3]
 8001be0:	74bb      	strb	r3, [r7, #18]
        blue = data[4];
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	791b      	ldrb	r3, [r3, #4]
 8001be6:	747b      	strb	r3, [r7, #17]
        mode = data[5];
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	795b      	ldrb	r3, [r3, #5]
 8001bec:	743b      	strb	r3, [r7, #16]

        if(locker_id == 255) {
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	2bff      	cmp	r3, #255	; 0xff
 8001bf2:	d11b      	bne.n	8001c2c <Process_SPI_Command+0xb0>
            printf("Set all LED to Color: R=%d, G=%d, B=%d\r\n", red, green, blue);
 8001bf4:	7cf9      	ldrb	r1, [r7, #19]
 8001bf6:	7cba      	ldrb	r2, [r7, #18]
 8001bf8:	7c7b      	ldrb	r3, [r7, #17]
 8001bfa:	4849      	ldr	r0, [pc, #292]	; (8001d20 <Process_SPI_Command+0x1a4>)
 8001bfc:	f005 fa6e 	bl	80070dc <iprintf>
            for(int i = 1; i <= 14; i++) {
 8001c00:	2301      	movs	r3, #1
 8001c02:	61bb      	str	r3, [r7, #24]
 8001c04:	e00e      	b.n	8001c24 <Process_SPI_Command+0xa8>
                Send_RGB(i + 100, red, green, blue, mode);
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	3364      	adds	r3, #100	; 0x64
 8001c0c:	b298      	uxth	r0, r3
 8001c0e:	7c7c      	ldrb	r4, [r7, #17]
 8001c10:	7cba      	ldrb	r2, [r7, #18]
 8001c12:	7cf9      	ldrb	r1, [r7, #19]
 8001c14:	7c3b      	ldrb	r3, [r7, #16]
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	4623      	mov	r3, r4
 8001c1a:	f7ff fa9b 	bl	8001154 <Send_RGB>
            for(int i = 1; i <= 14; i++) {
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	3301      	adds	r3, #1
 8001c22:	61bb      	str	r3, [r7, #24]
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2b0e      	cmp	r3, #14
 8001c28:	dded      	ble.n	8001c06 <Process_SPI_Command+0x8a>
 8001c2a:	e014      	b.n	8001c56 <Process_SPI_Command+0xda>
            }
        } else {
            Send_RGB(locker_id + 100, red, green, blue, mode);
 8001c2c:	7bfb      	ldrb	r3, [r7, #15]
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	3364      	adds	r3, #100	; 0x64
 8001c32:	b298      	uxth	r0, r3
 8001c34:	7c7c      	ldrb	r4, [r7, #17]
 8001c36:	7cba      	ldrb	r2, [r7, #18]
 8001c38:	7cf9      	ldrb	r1, [r7, #19]
 8001c3a:	7c3b      	ldrb	r3, [r7, #16]
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	4623      	mov	r3, r4
 8001c40:	f7ff fa88 	bl	8001154 <Send_RGB>
            printf("Set LED Color: Locker %d, R=%d, G=%d, B=%d\r\n", locker_id, red, green, blue);
 8001c44:	7bf9      	ldrb	r1, [r7, #15]
 8001c46:	7cfa      	ldrb	r2, [r7, #19]
 8001c48:	7cb8      	ldrb	r0, [r7, #18]
 8001c4a:	7c7b      	ldrb	r3, [r7, #17]
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	4603      	mov	r3, r0
 8001c50:	4834      	ldr	r0, [pc, #208]	; (8001d24 <Process_SPI_Command+0x1a8>)
 8001c52:	f005 fa43 	bl	80070dc <iprintf>
        }
    }

    // Example: Handle price command (0x02)
    if (data[0] == 0x02) {
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d11f      	bne.n	8001c9e <Process_SPI_Command+0x122>
        uint8_t locker_id = data[1];
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	785b      	ldrb	r3, [r3, #1]
 8001c62:	73bb      	strb	r3, [r7, #14]
        uint16_t price = (data[2] << 8) | data[3];
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3302      	adds	r3, #2
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	021b      	lsls	r3, r3, #8
 8001c6c:	b21a      	sxth	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3303      	adds	r3, #3
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	4313      	orrs	r3, r2
 8001c78:	b21b      	sxth	r3, r3
 8001c7a:	81bb      	strh	r3, [r7, #12]
        printf("Set Price: Locker %d, Price=%d euro\r\n", locker_id, price);
 8001c7c:	7bbb      	ldrb	r3, [r7, #14]
 8001c7e:	89ba      	ldrh	r2, [r7, #12]
 8001c80:	4619      	mov	r1, r3
 8001c82:	4829      	ldr	r0, [pc, #164]	; (8001d28 <Process_SPI_Command+0x1ac>)
 8001c84:	f005 fa2a 	bl	80070dc <iprintf>
        Send_Price(locker_id, data[2], data[3]);
 8001c88:	7bbb      	ldrb	r3, [r7, #14]
 8001c8a:	b298      	uxth	r0, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3302      	adds	r3, #2
 8001c90:	7819      	ldrb	r1, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3303      	adds	r3, #3
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	461a      	mov	r2, r3
 8001c9a:	f7ff fa85 	bl	80011a8 <Send_Price>
    }

    // Example: Handle unlock command (0x03)
    if (data[0] == 0x03) {
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d116      	bne.n	8001cd4 <Process_SPI_Command+0x158>
        uint8_t locker_id = data[1];
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	785b      	ldrb	r3, [r3, #1]
 8001caa:	72fb      	strb	r3, [r7, #11]
        printf("Unlock: Locker %d\r\n", locker_id);
 8001cac:	7afb      	ldrb	r3, [r7, #11]
 8001cae:	4619      	mov	r1, r3
 8001cb0:	481e      	ldr	r0, [pc, #120]	; (8001d2c <Process_SPI_Command+0x1b0>)
 8001cb2:	f005 fa13 	bl	80070dc <iprintf>
        open_cabinet(locker_id);
 8001cb6:	7afb      	ldrb	r3, [r7, #11]
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fab3 	bl	8001224 <open_cabinet>
        Send_RGB(locker_id + 100, 0, 0, 0, 0);
 8001cbe:	7afb      	ldrb	r3, [r7, #11]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	3364      	adds	r3, #100	; 0x64
 8001cc4:	b298      	uxth	r0, r3
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2100      	movs	r1, #0
 8001cd0:	f7ff fa40 	bl	8001154 <Send_RGB>
    }

    if (data[0] == 0x00) {
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d10e      	bne.n	8001cfa <Process_SPI_Command+0x17e>
        for (int i = 0; i < size; i++) {
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
 8001ce0:	e007      	b.n	8001cf2 <Process_SPI_Command+0x176>
            spi_tx_buffer[i] = 0x00;
 8001ce2:	4a13      	ldr	r2, [pc, #76]	; (8001d30 <Process_SPI_Command+0x1b4>)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	2200      	movs	r2, #0
 8001cea:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < size; i++) {
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	887b      	ldrh	r3, [r7, #2]
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	dbf3      	blt.n	8001ce2 <Process_SPI_Command+0x166>
        }
    }
    send_spi_flag = true;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <Process_SPI_Command+0x1b8>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
    spi_flag = false;
 8001d00:	4b0d      	ldr	r3, [pc, #52]	; (8001d38 <Process_SPI_Command+0x1bc>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]
    printf("DONE\r\n");
 8001d06:	480d      	ldr	r0, [pc, #52]	; (8001d3c <Process_SPI_Command+0x1c0>)
 8001d08:	f005 fa84 	bl	8007214 <puts>

}
 8001d0c:	bf00      	nop
 8001d0e:	3724      	adds	r7, #36	; 0x24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd90      	pop	{r4, r7, pc}
 8001d14:	0800b06c 	.word	0x0800b06c
 8001d18:	0800b080 	.word	0x0800b080
 8001d1c:	0800b088 	.word	0x0800b088
 8001d20:	0800b08c 	.word	0x0800b08c
 8001d24:	0800b0b8 	.word	0x0800b0b8
 8001d28:	0800b0e8 	.word	0x0800b0e8
 8001d2c:	0800b110 	.word	0x0800b110
 8001d30:	20000630 	.word	0x20000630
 8001d34:	20000001 	.word	0x20000001
 8001d38:	20000308 	.word	0x20000308
 8001d3c:	0800b124 	.word	0x0800b124

08001d40 <SPI_SendMessage>:

// Send a message over SPI to the master
void SPI_SendMessage(uint8_t command, uint8_t locker_id, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4) {
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4604      	mov	r4, r0
 8001d48:	4608      	mov	r0, r1
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4623      	mov	r3, r4
 8001d50:	71fb      	strb	r3, [r7, #7]
 8001d52:	4603      	mov	r3, r0
 8001d54:	71bb      	strb	r3, [r7, #6]
 8001d56:	460b      	mov	r3, r1
 8001d58:	717b      	strb	r3, [r7, #5]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	713b      	strb	r3, [r7, #4]
	printf("1\r\n");
 8001d5e:	4810      	ldr	r0, [pc, #64]	; (8001da0 <SPI_SendMessage+0x60>)
 8001d60:	f005 fa58 	bl	8007214 <puts>
	send_spi_flag = false;
 8001d64:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <SPI_SendMessage+0x64>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
    spi_tx_buffer[0] = command;
 8001d6a:	4a0f      	ldr	r2, [pc, #60]	; (8001da8 <SPI_SendMessage+0x68>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	7013      	strb	r3, [r2, #0]
    spi_tx_buffer[1] = locker_id;
 8001d70:	4a0d      	ldr	r2, [pc, #52]	; (8001da8 <SPI_SendMessage+0x68>)
 8001d72:	79bb      	ldrb	r3, [r7, #6]
 8001d74:	7053      	strb	r3, [r2, #1]
    spi_tx_buffer[2] = data1;
 8001d76:	4a0c      	ldr	r2, [pc, #48]	; (8001da8 <SPI_SendMessage+0x68>)
 8001d78:	797b      	ldrb	r3, [r7, #5]
 8001d7a:	7093      	strb	r3, [r2, #2]
    spi_tx_buffer[3] = data2;
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <SPI_SendMessage+0x68>)
 8001d7e:	793b      	ldrb	r3, [r7, #4]
 8001d80:	70d3      	strb	r3, [r2, #3]
    spi_tx_buffer[4] = data3;
 8001d82:	4a09      	ldr	r2, [pc, #36]	; (8001da8 <SPI_SendMessage+0x68>)
 8001d84:	7e3b      	ldrb	r3, [r7, #24]
 8001d86:	7113      	strb	r3, [r2, #4]
    spi_tx_buffer[5] = data4;
 8001d88:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <SPI_SendMessage+0x68>)
 8001d8a:	7f3b      	ldrb	r3, [r7, #28]
 8001d8c:	7153      	strb	r3, [r2, #5]

    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_10);
 8001d8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d92:	4806      	ldr	r0, [pc, #24]	; (8001dac <SPI_SendMessage+0x6c>)
 8001d94:	f001 f9ab 	bl	80030ee <HAL_GPIO_TogglePin>

}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd90      	pop	{r4, r7, pc}
 8001da0:	0800b12c 	.word	0x0800b12c
 8001da4:	20000001 	.word	0x20000001
 8001da8:	20000630 	.word	0x20000630
 8001dac:	40021800 	.word	0x40021800

08001db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	4b0f      	ldr	r3, [pc, #60]	; (8001df4 <HAL_MspInit+0x44>)
 8001db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dba:	4a0e      	ldr	r2, [pc, #56]	; (8001df4 <HAL_MspInit+0x44>)
 8001dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001dc2:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <HAL_MspInit+0x44>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dca:	607b      	str	r3, [r7, #4]
 8001dcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dce:	4b09      	ldr	r3, [pc, #36]	; (8001df4 <HAL_MspInit+0x44>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	4a08      	ldr	r2, [pc, #32]	; (8001df4 <HAL_MspInit+0x44>)
 8001dd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_MspInit+0x44>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800

08001df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08e      	sub	sp, #56	; 0x38
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a45      	ldr	r2, [pc, #276]	; (8001f2c <HAL_I2C_MspInit+0x134>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d128      	bne.n	8001e6c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1a:	4b45      	ldr	r3, [pc, #276]	; (8001f30 <HAL_I2C_MspInit+0x138>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	4a44      	ldr	r2, [pc, #272]	; (8001f30 <HAL_I2C_MspInit+0x138>)
 8001e20:	f043 0302 	orr.w	r3, r3, #2
 8001e24:	6313      	str	r3, [r2, #48]	; 0x30
 8001e26:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <HAL_I2C_MspInit+0x138>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	623b      	str	r3, [r7, #32]
 8001e30:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e32:	23c0      	movs	r3, #192	; 0xc0
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e36:	2312      	movs	r3, #18
 8001e38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e42:	2304      	movs	r3, #4
 8001e44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4839      	ldr	r0, [pc, #228]	; (8001f34 <HAL_I2C_MspInit+0x13c>)
 8001e4e:	f000 ff89 	bl	8002d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e52:	4b37      	ldr	r3, [pc, #220]	; (8001f30 <HAL_I2C_MspInit+0x138>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e56:	4a36      	ldr	r2, [pc, #216]	; (8001f30 <HAL_I2C_MspInit+0x138>)
 8001e58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e5e:	4b34      	ldr	r3, [pc, #208]	; (8001f30 <HAL_I2C_MspInit+0x138>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e66:	61fb      	str	r3, [r7, #28]
 8001e68:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001e6a:	e05b      	b.n	8001f24 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a31      	ldr	r2, [pc, #196]	; (8001f38 <HAL_I2C_MspInit+0x140>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d128      	bne.n	8001ec8 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e76:	4b2e      	ldr	r3, [pc, #184]	; (8001f30 <HAL_I2C_MspInit+0x138>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7a:	4a2d      	ldr	r2, [pc, #180]	; (8001f30 <HAL_I2C_MspInit+0x138>)
 8001e7c:	f043 0320 	orr.w	r3, r3, #32
 8001e80:	6313      	str	r3, [r2, #48]	; 0x30
 8001e82:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <HAL_I2C_MspInit+0x138>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	f003 0320 	and.w	r3, r3, #32
 8001e8a:	61bb      	str	r3, [r7, #24]
 8001e8c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e92:	2312      	movs	r3, #18
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e96:	2301      	movs	r3, #1
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4824      	ldr	r0, [pc, #144]	; (8001f3c <HAL_I2C_MspInit+0x144>)
 8001eaa:	f000 ff5b 	bl	8002d64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001eae:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <HAL_I2C_MspInit+0x138>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	4a1f      	ldr	r2, [pc, #124]	; (8001f30 <HAL_I2C_MspInit+0x138>)
 8001eb4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_I2C_MspInit+0x138>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ec2:	617b      	str	r3, [r7, #20]
 8001ec4:	697b      	ldr	r3, [r7, #20]
}
 8001ec6:	e02d      	b.n	8001f24 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C4)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a1c      	ldr	r2, [pc, #112]	; (8001f40 <HAL_I2C_MspInit+0x148>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d128      	bne.n	8001f24 <HAL_I2C_MspInit+0x12c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <HAL_I2C_MspInit+0x138>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	4a16      	ldr	r2, [pc, #88]	; (8001f30 <HAL_I2C_MspInit+0x138>)
 8001ed8:	f043 0320 	orr.w	r3, r3, #32
 8001edc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ede:	4b14      	ldr	r3, [pc, #80]	; (8001f30 <HAL_I2C_MspInit+0x138>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	f003 0320 	and.w	r3, r3, #32
 8001ee6:	613b      	str	r3, [r7, #16]
 8001ee8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001eea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ef0:	2312      	movs	r3, #18
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001efc:	2304      	movs	r3, #4
 8001efe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f04:	4619      	mov	r1, r3
 8001f06:	480d      	ldr	r0, [pc, #52]	; (8001f3c <HAL_I2C_MspInit+0x144>)
 8001f08:	f000 ff2c 	bl	8002d64 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_I2C_MspInit+0x138>)
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <HAL_I2C_MspInit+0x138>)
 8001f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f16:	6413      	str	r3, [r2, #64]	; 0x40
 8001f18:	4b05      	ldr	r3, [pc, #20]	; (8001f30 <HAL_I2C_MspInit+0x138>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
}
 8001f24:	bf00      	nop
 8001f26:	3738      	adds	r7, #56	; 0x38
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	40005400 	.word	0x40005400
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020400 	.word	0x40020400
 8001f38:	40005800 	.word	0x40005800
 8001f3c:	40021400 	.word	0x40021400
 8001f40:	40006000 	.word	0x40006000

08001f44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	; 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0314 	add.w	r3, r7, #20
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a4a      	ldr	r2, [pc, #296]	; (800208c <HAL_SPI_MspInit+0x148>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	f040 808e 	bne.w	8002084 <HAL_SPI_MspInit+0x140>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f68:	4b49      	ldr	r3, [pc, #292]	; (8002090 <HAL_SPI_MspInit+0x14c>)
 8001f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f6c:	4a48      	ldr	r2, [pc, #288]	; (8002090 <HAL_SPI_MspInit+0x14c>)
 8001f6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f72:	6453      	str	r3, [r2, #68]	; 0x44
 8001f74:	4b46      	ldr	r3, [pc, #280]	; (8002090 <HAL_SPI_MspInit+0x14c>)
 8001f76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f80:	4b43      	ldr	r3, [pc, #268]	; (8002090 <HAL_SPI_MspInit+0x14c>)
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f84:	4a42      	ldr	r2, [pc, #264]	; (8002090 <HAL_SPI_MspInit+0x14c>)
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8c:	4b40      	ldr	r3, [pc, #256]	; (8002090 <HAL_SPI_MspInit+0x14c>)
 8001f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001f98:	23f0      	movs	r3, #240	; 0xf0
 8001f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fa8:	2305      	movs	r3, #5
 8001faa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4838      	ldr	r0, [pc, #224]	; (8002094 <HAL_SPI_MspInit+0x150>)
 8001fb4:	f000 fed6 	bl	8002d64 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001fb8:	4b37      	ldr	r3, [pc, #220]	; (8002098 <HAL_SPI_MspInit+0x154>)
 8001fba:	4a38      	ldr	r2, [pc, #224]	; (800209c <HAL_SPI_MspInit+0x158>)
 8001fbc:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001fbe:	4b36      	ldr	r3, [pc, #216]	; (8002098 <HAL_SPI_MspInit+0x154>)
 8001fc0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001fc4:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fc6:	4b34      	ldr	r3, [pc, #208]	; (8002098 <HAL_SPI_MspInit+0x154>)
 8001fc8:	2240      	movs	r2, #64	; 0x40
 8001fca:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fcc:	4b32      	ldr	r3, [pc, #200]	; (8002098 <HAL_SPI_MspInit+0x154>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fd2:	4b31      	ldr	r3, [pc, #196]	; (8002098 <HAL_SPI_MspInit+0x154>)
 8001fd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fd8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fda:	4b2f      	ldr	r3, [pc, #188]	; (8002098 <HAL_SPI_MspInit+0x154>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fe0:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <HAL_SPI_MspInit+0x154>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001fe6:	4b2c      	ldr	r3, [pc, #176]	; (8002098 <HAL_SPI_MspInit+0x154>)
 8001fe8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fec:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001fee:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <HAL_SPI_MspInit+0x154>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ff4:	4b28      	ldr	r3, [pc, #160]	; (8002098 <HAL_SPI_MspInit+0x154>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001ffa:	4827      	ldr	r0, [pc, #156]	; (8002098 <HAL_SPI_MspInit+0x154>)
 8001ffc:	f000 fba6 	bl	800274c <HAL_DMA_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 8002006:	f7ff fd57 	bl	8001ab8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a22      	ldr	r2, [pc, #136]	; (8002098 <HAL_SPI_MspInit+0x154>)
 800200e:	655a      	str	r2, [r3, #84]	; 0x54
 8002010:	4a21      	ldr	r2, [pc, #132]	; (8002098 <HAL_SPI_MspInit+0x154>)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002016:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <HAL_SPI_MspInit+0x15c>)
 8002018:	4a22      	ldr	r2, [pc, #136]	; (80020a4 <HAL_SPI_MspInit+0x160>)
 800201a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800201c:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <HAL_SPI_MspInit+0x15c>)
 800201e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002022:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002024:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <HAL_SPI_MspInit+0x15c>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800202a:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_SPI_MspInit+0x15c>)
 800202c:	2200      	movs	r2, #0
 800202e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002030:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <HAL_SPI_MspInit+0x15c>)
 8002032:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002036:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002038:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_SPI_MspInit+0x15c>)
 800203a:	2200      	movs	r2, #0
 800203c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800203e:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <HAL_SPI_MspInit+0x15c>)
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002044:	4b16      	ldr	r3, [pc, #88]	; (80020a0 <HAL_SPI_MspInit+0x15c>)
 8002046:	f44f 7280 	mov.w	r2, #256	; 0x100
 800204a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <HAL_SPI_MspInit+0x15c>)
 800204e:	2200      	movs	r2, #0
 8002050:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002052:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <HAL_SPI_MspInit+0x15c>)
 8002054:	2200      	movs	r2, #0
 8002056:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002058:	4811      	ldr	r0, [pc, #68]	; (80020a0 <HAL_SPI_MspInit+0x15c>)
 800205a:	f000 fb77 	bl	800274c <HAL_DMA_Init>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_SPI_MspInit+0x124>
    {
      Error_Handler();
 8002064:	f7ff fd28 	bl	8001ab8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a0d      	ldr	r2, [pc, #52]	; (80020a0 <HAL_SPI_MspInit+0x15c>)
 800206c:	659a      	str	r2, [r3, #88]	; 0x58
 800206e:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <HAL_SPI_MspInit+0x15c>)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002074:	2200      	movs	r2, #0
 8002076:	2100      	movs	r1, #0
 8002078:	2023      	movs	r0, #35	; 0x23
 800207a:	f000 fb30 	bl	80026de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800207e:	2023      	movs	r0, #35	; 0x23
 8002080:	f000 fb49 	bl	8002716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002084:	bf00      	nop
 8002086:	3728      	adds	r7, #40	; 0x28
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40013000 	.word	0x40013000
 8002090:	40023800 	.word	0x40023800
 8002094:	40020000 	.word	0x40020000
 8002098:	200005c8 	.word	0x200005c8
 800209c:	40026458 	.word	0x40026458
 80020a0:	20000568 	.word	0x20000568
 80020a4:	40026410 	.word	0x40026410

080020a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08c      	sub	sp, #48	; 0x30
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 031c 	add.w	r3, r7, #28
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a2e      	ldr	r2, [pc, #184]	; (8002180 <HAL_UART_MspInit+0xd8>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d128      	bne.n	800211c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020ca:	4b2e      	ldr	r3, [pc, #184]	; (8002184 <HAL_UART_MspInit+0xdc>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	4a2d      	ldr	r2, [pc, #180]	; (8002184 <HAL_UART_MspInit+0xdc>)
 80020d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d4:	6413      	str	r3, [r2, #64]	; 0x40
 80020d6:	4b2b      	ldr	r3, [pc, #172]	; (8002184 <HAL_UART_MspInit+0xdc>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	61bb      	str	r3, [r7, #24]
 80020e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e2:	4b28      	ldr	r3, [pc, #160]	; (8002184 <HAL_UART_MspInit+0xdc>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a27      	ldr	r2, [pc, #156]	; (8002184 <HAL_UART_MspInit+0xdc>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b25      	ldr	r3, [pc, #148]	; (8002184 <HAL_UART_MspInit+0xdc>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020fa:	230c      	movs	r3, #12
 80020fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fe:	2302      	movs	r3, #2
 8002100:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002106:	2303      	movs	r3, #3
 8002108:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800210a:	2307      	movs	r3, #7
 800210c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210e:	f107 031c 	add.w	r3, r7, #28
 8002112:	4619      	mov	r1, r3
 8002114:	481c      	ldr	r0, [pc, #112]	; (8002188 <HAL_UART_MspInit+0xe0>)
 8002116:	f000 fe25 	bl	8002d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800211a:	e02d      	b.n	8002178 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a1a      	ldr	r2, [pc, #104]	; (800218c <HAL_UART_MspInit+0xe4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d128      	bne.n	8002178 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002126:	4b17      	ldr	r3, [pc, #92]	; (8002184 <HAL_UART_MspInit+0xdc>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	4a16      	ldr	r2, [pc, #88]	; (8002184 <HAL_UART_MspInit+0xdc>)
 800212c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002130:	6413      	str	r3, [r2, #64]	; 0x40
 8002132:	4b14      	ldr	r3, [pc, #80]	; (8002184 <HAL_UART_MspInit+0xdc>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_UART_MspInit+0xdc>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	4a10      	ldr	r2, [pc, #64]	; (8002184 <HAL_UART_MspInit+0xdc>)
 8002144:	f043 0308 	orr.w	r3, r3, #8
 8002148:	6313      	str	r3, [r2, #48]	; 0x30
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <HAL_UART_MspInit+0xdc>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002156:	f44f 7340 	mov.w	r3, #768	; 0x300
 800215a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002164:	2303      	movs	r3, #3
 8002166:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002168:	2307      	movs	r3, #7
 800216a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800216c:	f107 031c 	add.w	r3, r7, #28
 8002170:	4619      	mov	r1, r3
 8002172:	4807      	ldr	r0, [pc, #28]	; (8002190 <HAL_UART_MspInit+0xe8>)
 8002174:	f000 fdf6 	bl	8002d64 <HAL_GPIO_Init>
}
 8002178:	bf00      	nop
 800217a:	3730      	adds	r7, #48	; 0x30
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40004400 	.word	0x40004400
 8002184:	40023800 	.word	0x40023800
 8002188:	40020000 	.word	0x40020000
 800218c:	40004800 	.word	0x40004800
 8002190:	40020c00 	.word	0x40020c00

08002194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002198:	e7fe      	b.n	8002198 <NMI_Handler+0x4>

0800219a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800219e:	e7fe      	b.n	800219e <HardFault_Handler+0x4>

080021a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a4:	e7fe      	b.n	80021a4 <MemManage_Handler+0x4>

080021a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021aa:	e7fe      	b.n	80021aa <BusFault_Handler+0x4>

080021ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <UsageFault_Handler+0x4>

080021b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021e0:	f000 f95e 	bl	80024a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e4:	bf00      	nop
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80021ec:	4802      	ldr	r0, [pc, #8]	; (80021f8 <SPI1_IRQHandler+0x10>)
 80021ee:	f002 ff3b 	bl	8005068 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000480 	.word	0x20000480

080021fc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002200:	4802      	ldr	r0, [pc, #8]	; (800220c <DMA2_Stream0_IRQHandler+0x10>)
 8002202:	f000 fb73 	bl	80028ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000568 	.word	0x20000568

08002210 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002214:	4802      	ldr	r0, [pc, #8]	; (8002220 <DMA2_Stream3_IRQHandler+0x10>)
 8002216:	f000 fb69 	bl	80028ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200005c8 	.word	0x200005c8

08002224 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
	return 1;
 8002228:	2301      	movs	r3, #1
}
 800222a:	4618      	mov	r0, r3
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <_kill>:

int _kill(int pid, int sig)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800223e:	f004 f8d5 	bl	80063ec <__errno>
 8002242:	4603      	mov	r3, r0
 8002244:	2216      	movs	r2, #22
 8002246:	601a      	str	r2, [r3, #0]
	return -1;
 8002248:	f04f 33ff 	mov.w	r3, #4294967295
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}

08002254 <_exit>:

void _exit (int status)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800225c:	f04f 31ff 	mov.w	r1, #4294967295
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f7ff ffe7 	bl	8002234 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002266:	e7fe      	b.n	8002266 <_exit+0x12>

08002268 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002274:	2300      	movs	r3, #0
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	e00a      	b.n	8002290 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800227a:	f3af 8000 	nop.w
 800227e:	4601      	mov	r1, r0
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	60ba      	str	r2, [r7, #8]
 8002286:	b2ca      	uxtb	r2, r1
 8002288:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	3301      	adds	r3, #1
 800228e:	617b      	str	r3, [r7, #20]
 8002290:	697a      	ldr	r2, [r7, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	429a      	cmp	r2, r3
 8002296:	dbf0      	blt.n	800227a <_read+0x12>
	}

return len;
 8002298:	687b      	ldr	r3, [r7, #4]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b086      	sub	sp, #24
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	e009      	b.n	80022c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	60ba      	str	r2, [r7, #8]
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff fc01 	bl	8001ac4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	3301      	adds	r3, #1
 80022c6:	617b      	str	r3, [r7, #20]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	dbf1      	blt.n	80022b4 <_write+0x12>
	}
	return len;
 80022d0:	687b      	ldr	r3, [r7, #4]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}

080022da <_close>:

int _close(int file)
{
 80022da:	b480      	push	{r7}
 80022dc:	b083      	sub	sp, #12
 80022de:	af00      	add	r7, sp, #0
 80022e0:	6078      	str	r0, [r7, #4]
	return -1;
 80022e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002302:	605a      	str	r2, [r3, #4]
	return 0;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <_isatty>:

int _isatty(int file)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
	return 1;
 800231a:	2301      	movs	r3, #1
}
 800231c:	4618      	mov	r0, r3
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
	return 0;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800234c:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <_sbrk+0x5c>)
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <_sbrk+0x60>)
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <_sbrk+0x64>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d102      	bne.n	8002366 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <_sbrk+0x64>)
 8002362:	4a12      	ldr	r2, [pc, #72]	; (80023ac <_sbrk+0x68>)
 8002364:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002366:	4b10      	ldr	r3, [pc, #64]	; (80023a8 <_sbrk+0x64>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	429a      	cmp	r2, r3
 8002372:	d207      	bcs.n	8002384 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002374:	f004 f83a 	bl	80063ec <__errno>
 8002378:	4603      	mov	r3, r0
 800237a:	220c      	movs	r2, #12
 800237c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800237e:	f04f 33ff 	mov.w	r3, #4294967295
 8002382:	e009      	b.n	8002398 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002384:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <_sbrk+0x64>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800238a:	4b07      	ldr	r3, [pc, #28]	; (80023a8 <_sbrk+0x64>)
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	4a05      	ldr	r2, [pc, #20]	; (80023a8 <_sbrk+0x64>)
 8002394:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002396:	68fb      	ldr	r3, [r7, #12]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	20080000 	.word	0x20080000
 80023a4:	00000400 	.word	0x00000400
 80023a8:	2000030c 	.word	0x2000030c
 80023ac:	20000658 	.word	0x20000658

080023b0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <SystemInit+0x20>)
 80023b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ba:	4a05      	ldr	r2, [pc, #20]	; (80023d0 <SystemInit+0x20>)
 80023bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023c4:	bf00      	nop
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800240c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023d8:	480d      	ldr	r0, [pc, #52]	; (8002410 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023da:	490e      	ldr	r1, [pc, #56]	; (8002414 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023dc:	4a0e      	ldr	r2, [pc, #56]	; (8002418 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e0:	e002      	b.n	80023e8 <LoopCopyDataInit>

080023e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023e6:	3304      	adds	r3, #4

080023e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023ec:	d3f9      	bcc.n	80023e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ee:	4a0b      	ldr	r2, [pc, #44]	; (800241c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023f0:	4c0b      	ldr	r4, [pc, #44]	; (8002420 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023f4:	e001      	b.n	80023fa <LoopFillZerobss>

080023f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f8:	3204      	adds	r2, #4

080023fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023fc:	d3fb      	bcc.n	80023f6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023fe:	f7ff ffd7 	bl	80023b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002402:	f003 fff9 	bl	80063f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002406:	f7ff f8a3 	bl	8001550 <main>
  bx  lr    
 800240a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800240c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002410:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002414:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002418:	0800b614 	.word	0x0800b614
  ldr r2, =_sbss
 800241c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002420:	20000654 	.word	0x20000654

08002424 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002424:	e7fe      	b.n	8002424 <ADC_IRQHandler>

08002426 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002426:	b580      	push	{r7, lr}
 8002428:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800242a:	2003      	movs	r0, #3
 800242c:	f000 f94c 	bl	80026c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002430:	2000      	movs	r0, #0
 8002432:	f000 f805 	bl	8002440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002436:	f7ff fcbb 	bl	8001db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002448:	4b12      	ldr	r3, [pc, #72]	; (8002494 <HAL_InitTick+0x54>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <HAL_InitTick+0x58>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4619      	mov	r1, r3
 8002452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002456:	fbb3 f3f1 	udiv	r3, r3, r1
 800245a:	fbb2 f3f3 	udiv	r3, r2, r3
 800245e:	4618      	mov	r0, r3
 8002460:	f000 f967 	bl	8002732 <HAL_SYSTICK_Config>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e00e      	b.n	800248c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b0f      	cmp	r3, #15
 8002472:	d80a      	bhi.n	800248a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002474:	2200      	movs	r2, #0
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	f000 f92f 	bl	80026de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002480:	4a06      	ldr	r2, [pc, #24]	; (800249c <HAL_InitTick+0x5c>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002486:	2300      	movs	r3, #0
 8002488:	e000      	b.n	800248c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20000004 	.word	0x20000004
 8002498:	2000000c 	.word	0x2000000c
 800249c:	20000008 	.word	0x20000008

080024a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <HAL_IncTick+0x20>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	461a      	mov	r2, r3
 80024aa:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_IncTick+0x24>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4413      	add	r3, r2
 80024b0:	4a04      	ldr	r2, [pc, #16]	; (80024c4 <HAL_IncTick+0x24>)
 80024b2:	6013      	str	r3, [r2, #0]
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	2000000c 	.word	0x2000000c
 80024c4:	20000640 	.word	0x20000640

080024c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return uwTick;
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <HAL_GetTick+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000640 	.word	0x20000640

080024e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e8:	f7ff ffee 	bl	80024c8 <HAL_GetTick>
 80024ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d005      	beq.n	8002506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fa:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <HAL_Delay+0x44>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002506:	bf00      	nop
 8002508:	f7ff ffde 	bl	80024c8 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	429a      	cmp	r2, r3
 8002516:	d8f7      	bhi.n	8002508 <HAL_Delay+0x28>
  {
  }
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	2000000c 	.word	0x2000000c

08002528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002538:	4b0b      	ldr	r3, [pc, #44]	; (8002568 <__NVIC_SetPriorityGrouping+0x40>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002544:	4013      	ands	r3, r2
 8002546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002550:	4b06      	ldr	r3, [pc, #24]	; (800256c <__NVIC_SetPriorityGrouping+0x44>)
 8002552:	4313      	orrs	r3, r2
 8002554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002556:	4a04      	ldr	r2, [pc, #16]	; (8002568 <__NVIC_SetPriorityGrouping+0x40>)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	60d3      	str	r3, [r2, #12]
}
 800255c:	bf00      	nop
 800255e:	3714      	adds	r7, #20
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00
 800256c:	05fa0000 	.word	0x05fa0000

08002570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002574:	4b04      	ldr	r3, [pc, #16]	; (8002588 <__NVIC_GetPriorityGrouping+0x18>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	f003 0307 	and.w	r3, r3, #7
}
 800257e:	4618      	mov	r0, r3
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	2b00      	cmp	r3, #0
 800259c:	db0b      	blt.n	80025b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800259e:	79fb      	ldrb	r3, [r7, #7]
 80025a0:	f003 021f 	and.w	r2, r3, #31
 80025a4:	4907      	ldr	r1, [pc, #28]	; (80025c4 <__NVIC_EnableIRQ+0x38>)
 80025a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025aa:	095b      	lsrs	r3, r3, #5
 80025ac:	2001      	movs	r0, #1
 80025ae:	fa00 f202 	lsl.w	r2, r0, r2
 80025b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025b6:	bf00      	nop
 80025b8:	370c      	adds	r7, #12
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	e000e100 	.word	0xe000e100

080025c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	6039      	str	r1, [r7, #0]
 80025d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	db0a      	blt.n	80025f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	b2da      	uxtb	r2, r3
 80025e0:	490c      	ldr	r1, [pc, #48]	; (8002614 <__NVIC_SetPriority+0x4c>)
 80025e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	b2d2      	uxtb	r2, r2
 80025ea:	440b      	add	r3, r1
 80025ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f0:	e00a      	b.n	8002608 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	b2da      	uxtb	r2, r3
 80025f6:	4908      	ldr	r1, [pc, #32]	; (8002618 <__NVIC_SetPriority+0x50>)
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	3b04      	subs	r3, #4
 8002600:	0112      	lsls	r2, r2, #4
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	440b      	add	r3, r1
 8002606:	761a      	strb	r2, [r3, #24]
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	e000e100 	.word	0xe000e100
 8002618:	e000ed00 	.word	0xe000ed00

0800261c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800261c:	b480      	push	{r7}
 800261e:	b089      	sub	sp, #36	; 0x24
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f1c3 0307 	rsb	r3, r3, #7
 8002636:	2b04      	cmp	r3, #4
 8002638:	bf28      	it	cs
 800263a:	2304      	movcs	r3, #4
 800263c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3304      	adds	r3, #4
 8002642:	2b06      	cmp	r3, #6
 8002644:	d902      	bls.n	800264c <NVIC_EncodePriority+0x30>
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3b03      	subs	r3, #3
 800264a:	e000      	b.n	800264e <NVIC_EncodePriority+0x32>
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002650:	f04f 32ff 	mov.w	r2, #4294967295
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	401a      	ands	r2, r3
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002664:	f04f 31ff 	mov.w	r1, #4294967295
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	fa01 f303 	lsl.w	r3, r1, r3
 800266e:	43d9      	mvns	r1, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	4313      	orrs	r3, r2
         );
}
 8002676:	4618      	mov	r0, r3
 8002678:	3724      	adds	r7, #36	; 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002694:	d301      	bcc.n	800269a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002696:	2301      	movs	r3, #1
 8002698:	e00f      	b.n	80026ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800269a:	4a0a      	ldr	r2, [pc, #40]	; (80026c4 <SysTick_Config+0x40>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026a2:	210f      	movs	r1, #15
 80026a4:	f04f 30ff 	mov.w	r0, #4294967295
 80026a8:	f7ff ff8e 	bl	80025c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <SysTick_Config+0x40>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026b2:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <SysTick_Config+0x40>)
 80026b4:	2207      	movs	r2, #7
 80026b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	e000e010 	.word	0xe000e010

080026c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff ff29 	bl	8002528 <__NVIC_SetPriorityGrouping>
}
 80026d6:	bf00      	nop
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026de:	b580      	push	{r7, lr}
 80026e0:	b086      	sub	sp, #24
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	4603      	mov	r3, r0
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f0:	f7ff ff3e 	bl	8002570 <__NVIC_GetPriorityGrouping>
 80026f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	6978      	ldr	r0, [r7, #20]
 80026fc:	f7ff ff8e 	bl	800261c <NVIC_EncodePriority>
 8002700:	4602      	mov	r2, r0
 8002702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff5d 	bl	80025c8 <__NVIC_SetPriority>
}
 800270e:	bf00      	nop
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	4603      	mov	r3, r0
 800271e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff31 	bl	800258c <__NVIC_EnableIRQ>
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff ffa2 	bl	8002684 <SysTick_Config>
 8002740:	4603      	mov	r3, r0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
	...

0800274c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002758:	f7ff feb6 	bl	80024c8 <HAL_GetTick>
 800275c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e099      	b.n	800289c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f022 0201 	bic.w	r2, r2, #1
 8002786:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002788:	e00f      	b.n	80027aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800278a:	f7ff fe9d 	bl	80024c8 <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b05      	cmp	r3, #5
 8002796:	d908      	bls.n	80027aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2220      	movs	r2, #32
 800279c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2203      	movs	r2, #3
 80027a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e078      	b.n	800289c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1e8      	bne.n	800278a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027c0:	697a      	ldr	r2, [r7, #20]
 80027c2:	4b38      	ldr	r3, [pc, #224]	; (80028a4 <HAL_DMA_Init+0x158>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6a1b      	ldr	r3, [r3, #32]
 80027f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	2b04      	cmp	r3, #4
 8002802:	d107      	bne.n	8002814 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280c:	4313      	orrs	r3, r2
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	4313      	orrs	r3, r2
 8002812:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f023 0307 	bic.w	r3, r3, #7
 800282a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	4313      	orrs	r3, r2
 8002834:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	2b04      	cmp	r3, #4
 800283c:	d117      	bne.n	800286e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002842:	697a      	ldr	r2, [r7, #20]
 8002844:	4313      	orrs	r3, r2
 8002846:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00e      	beq.n	800286e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 fa0b 	bl	8002c6c <DMA_CheckFifoParam>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2240      	movs	r2, #64	; 0x40
 8002860:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2201      	movs	r2, #1
 8002866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800286a:	2301      	movs	r3, #1
 800286c:	e016      	b.n	800289c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f9c2 	bl	8002c00 <DMA_CalcBaseAndBitshift>
 800287c:	4603      	mov	r3, r0
 800287e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002884:	223f      	movs	r2, #63	; 0x3f
 8002886:	409a      	lsls	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	e010803f 	.word	0xe010803f

080028a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d004      	beq.n	80028c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2280      	movs	r2, #128	; 0x80
 80028c0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e00c      	b.n	80028e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2205      	movs	r2, #5
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0201 	bic.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80028f8:	4b92      	ldr	r3, [pc, #584]	; (8002b44 <HAL_DMA_IRQHandler+0x258>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a92      	ldr	r2, [pc, #584]	; (8002b48 <HAL_DMA_IRQHandler+0x25c>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	0a9b      	lsrs	r3, r3, #10
 8002904:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	2208      	movs	r2, #8
 8002918:	409a      	lsls	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4013      	ands	r3, r2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d01a      	beq.n	8002958 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d013      	beq.n	8002958 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f022 0204 	bic.w	r2, r2, #4
 800293e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002944:	2208      	movs	r2, #8
 8002946:	409a      	lsls	r2, r3
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002950:	f043 0201 	orr.w	r2, r3, #1
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295c:	2201      	movs	r2, #1
 800295e:	409a      	lsls	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4013      	ands	r3, r2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d012      	beq.n	800298e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00b      	beq.n	800298e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	2201      	movs	r2, #1
 800297c:	409a      	lsls	r2, r3
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002986:	f043 0202 	orr.w	r2, r3, #2
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002992:	2204      	movs	r2, #4
 8002994:	409a      	lsls	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	4013      	ands	r3, r2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d012      	beq.n	80029c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00b      	beq.n	80029c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b0:	2204      	movs	r2, #4
 80029b2:	409a      	lsls	r2, r3
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029bc:	f043 0204 	orr.w	r2, r3, #4
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c8:	2210      	movs	r2, #16
 80029ca:	409a      	lsls	r2, r3
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d043      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d03c      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e6:	2210      	movs	r2, #16
 80029e8:	409a      	lsls	r2, r3
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d018      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d108      	bne.n	8002a1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d024      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4798      	blx	r3
 8002a1a:	e01f      	b.n	8002a5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d01b      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4798      	blx	r3
 8002a2c:	e016      	b.n	8002a5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0208 	bic.w	r2, r2, #8
 8002a4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d003      	beq.n	8002a5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a60:	2220      	movs	r2, #32
 8002a62:	409a      	lsls	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 808e 	beq.w	8002b8a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 8086 	beq.w	8002b8a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a82:	2220      	movs	r2, #32
 8002a84:	409a      	lsls	r2, r3
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d136      	bne.n	8002b04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0216 	bic.w	r2, r2, #22
 8002aa4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695a      	ldr	r2, [r3, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ab4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d103      	bne.n	8002ac6 <HAL_DMA_IRQHandler+0x1da>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d007      	beq.n	8002ad6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681a      	ldr	r2, [r3, #0]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 0208 	bic.w	r2, r2, #8
 8002ad4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ada:	223f      	movs	r2, #63	; 0x3f
 8002adc:	409a      	lsls	r2, r3
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d07d      	beq.n	8002bf6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	4798      	blx	r3
        }
        return;
 8002b02:	e078      	b.n	8002bf6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d01c      	beq.n	8002b4c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d108      	bne.n	8002b32 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d030      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	4798      	blx	r3
 8002b30:	e02b      	b.n	8002b8a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d027      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	4798      	blx	r3
 8002b42:	e022      	b.n	8002b8a <HAL_DMA_IRQHandler+0x29e>
 8002b44:	20000004 	.word	0x20000004
 8002b48:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10f      	bne.n	8002b7a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0210 	bic.w	r2, r2, #16
 8002b68:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d003      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d032      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d022      	beq.n	8002be4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2205      	movs	r2, #5
 8002ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 0201 	bic.w	r2, r2, #1
 8002bb4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	60bb      	str	r3, [r7, #8]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d307      	bcc.n	8002bd2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1f2      	bne.n	8002bb6 <HAL_DMA_IRQHandler+0x2ca>
 8002bd0:	e000      	b.n	8002bd4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002bd2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2201      	movs	r2, #1
 8002bd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	4798      	blx	r3
 8002bf4:	e000      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002bf6:	bf00      	nop
    }
  }
}
 8002bf8:	3718      	adds	r7, #24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop

08002c00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b085      	sub	sp, #20
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	3b10      	subs	r3, #16
 8002c10:	4a13      	ldr	r2, [pc, #76]	; (8002c60 <DMA_CalcBaseAndBitshift+0x60>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	091b      	lsrs	r3, r3, #4
 8002c18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c1a:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <DMA_CalcBaseAndBitshift+0x64>)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4413      	add	r3, r2
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2b03      	cmp	r3, #3
 8002c2c:	d908      	bls.n	8002c40 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <DMA_CalcBaseAndBitshift+0x68>)
 8002c36:	4013      	ands	r3, r2
 8002c38:	1d1a      	adds	r2, r3, #4
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	659a      	str	r2, [r3, #88]	; 0x58
 8002c3e:	e006      	b.n	8002c4e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <DMA_CalcBaseAndBitshift+0x68>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	aaaaaaab 	.word	0xaaaaaaab
 8002c64:	0800b148 	.word	0x0800b148
 8002c68:	fffffc00 	.word	0xfffffc00

08002c6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c74:	2300      	movs	r3, #0
 8002c76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	699b      	ldr	r3, [r3, #24]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d11f      	bne.n	8002cc6 <DMA_CheckFifoParam+0x5a>
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d856      	bhi.n	8002d3a <DMA_CheckFifoParam+0xce>
 8002c8c:	a201      	add	r2, pc, #4	; (adr r2, 8002c94 <DMA_CheckFifoParam+0x28>)
 8002c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c92:	bf00      	nop
 8002c94:	08002ca5 	.word	0x08002ca5
 8002c98:	08002cb7 	.word	0x08002cb7
 8002c9c:	08002ca5 	.word	0x08002ca5
 8002ca0:	08002d3b 	.word	0x08002d3b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d046      	beq.n	8002d3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cb4:	e043      	b.n	8002d3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cbe:	d140      	bne.n	8002d42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cc4:	e03d      	b.n	8002d42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cce:	d121      	bne.n	8002d14 <DMA_CheckFifoParam+0xa8>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b03      	cmp	r3, #3
 8002cd4:	d837      	bhi.n	8002d46 <DMA_CheckFifoParam+0xda>
 8002cd6:	a201      	add	r2, pc, #4	; (adr r2, 8002cdc <DMA_CheckFifoParam+0x70>)
 8002cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cdc:	08002ced 	.word	0x08002ced
 8002ce0:	08002cf3 	.word	0x08002cf3
 8002ce4:	08002ced 	.word	0x08002ced
 8002ce8:	08002d05 	.word	0x08002d05
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf0:	e030      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d025      	beq.n	8002d4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d02:	e022      	b.n	8002d4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d0c:	d11f      	bne.n	8002d4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d12:	e01c      	b.n	8002d4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d903      	bls.n	8002d22 <DMA_CheckFifoParam+0xb6>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	2b03      	cmp	r3, #3
 8002d1e:	d003      	beq.n	8002d28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d20:	e018      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	73fb      	strb	r3, [r7, #15]
      break;
 8002d26:	e015      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00e      	beq.n	8002d52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	73fb      	strb	r3, [r7, #15]
      break;
 8002d38:	e00b      	b.n	8002d52 <DMA_CheckFifoParam+0xe6>
      break;
 8002d3a:	bf00      	nop
 8002d3c:	e00a      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      break;
 8002d3e:	bf00      	nop
 8002d40:	e008      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      break;
 8002d42:	bf00      	nop
 8002d44:	e006      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      break;
 8002d46:	bf00      	nop
 8002d48:	e004      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e002      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d4e:	bf00      	nop
 8002d50:	e000      	b.n	8002d54 <DMA_CheckFifoParam+0xe8>
      break;
 8002d52:	bf00      	nop
    }
  } 
  
  return status; 
 8002d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3714      	adds	r7, #20
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop

08002d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b089      	sub	sp, #36	; 0x24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d76:	2300      	movs	r3, #0
 8002d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d7e:	2300      	movs	r3, #0
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	e175      	b.n	8003070 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d84:	2201      	movs	r2, #1
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	f040 8164 	bne.w	800306a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d005      	beq.n	8002dba <HAL_GPIO_Init+0x56>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d130      	bne.n	8002e1c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	005b      	lsls	r3, r3, #1
 8002dc4:	2203      	movs	r2, #3
 8002dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dca:	43db      	mvns	r3, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68da      	ldr	r2, [r3, #12]
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002df0:	2201      	movs	r2, #1
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	091b      	lsrs	r3, r3, #4
 8002e06:	f003 0201 	and.w	r2, r3, #1
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d017      	beq.n	8002e58 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	2203      	movs	r2, #3
 8002e34:	fa02 f303 	lsl.w	r3, r2, r3
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689a      	ldr	r2, [r3, #8]
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d123      	bne.n	8002eac <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	08da      	lsrs	r2, r3, #3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3208      	adds	r2, #8
 8002e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	220f      	movs	r2, #15
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f003 0307 	and.w	r3, r3, #7
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	08da      	lsrs	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3208      	adds	r2, #8
 8002ea6:	69b9      	ldr	r1, [r7, #24]
 8002ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	2203      	movs	r2, #3
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0203 	and.w	r2, r3, #3
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 80be 	beq.w	800306a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eee:	4b66      	ldr	r3, [pc, #408]	; (8003088 <HAL_GPIO_Init+0x324>)
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	4a65      	ldr	r2, [pc, #404]	; (8003088 <HAL_GPIO_Init+0x324>)
 8002ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8002efa:	4b63      	ldr	r3, [pc, #396]	; (8003088 <HAL_GPIO_Init+0x324>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f06:	4a61      	ldr	r2, [pc, #388]	; (800308c <HAL_GPIO_Init+0x328>)
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	089b      	lsrs	r3, r3, #2
 8002f0c:	3302      	adds	r3, #2
 8002f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	220f      	movs	r2, #15
 8002f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f22:	43db      	mvns	r3, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4013      	ands	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a58      	ldr	r2, [pc, #352]	; (8003090 <HAL_GPIO_Init+0x32c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d037      	beq.n	8002fa2 <HAL_GPIO_Init+0x23e>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a57      	ldr	r2, [pc, #348]	; (8003094 <HAL_GPIO_Init+0x330>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d031      	beq.n	8002f9e <HAL_GPIO_Init+0x23a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a56      	ldr	r2, [pc, #344]	; (8003098 <HAL_GPIO_Init+0x334>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d02b      	beq.n	8002f9a <HAL_GPIO_Init+0x236>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a55      	ldr	r2, [pc, #340]	; (800309c <HAL_GPIO_Init+0x338>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d025      	beq.n	8002f96 <HAL_GPIO_Init+0x232>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a54      	ldr	r2, [pc, #336]	; (80030a0 <HAL_GPIO_Init+0x33c>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d01f      	beq.n	8002f92 <HAL_GPIO_Init+0x22e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a53      	ldr	r2, [pc, #332]	; (80030a4 <HAL_GPIO_Init+0x340>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d019      	beq.n	8002f8e <HAL_GPIO_Init+0x22a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a52      	ldr	r2, [pc, #328]	; (80030a8 <HAL_GPIO_Init+0x344>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d013      	beq.n	8002f8a <HAL_GPIO_Init+0x226>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a51      	ldr	r2, [pc, #324]	; (80030ac <HAL_GPIO_Init+0x348>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00d      	beq.n	8002f86 <HAL_GPIO_Init+0x222>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a50      	ldr	r2, [pc, #320]	; (80030b0 <HAL_GPIO_Init+0x34c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d007      	beq.n	8002f82 <HAL_GPIO_Init+0x21e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a4f      	ldr	r2, [pc, #316]	; (80030b4 <HAL_GPIO_Init+0x350>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d101      	bne.n	8002f7e <HAL_GPIO_Init+0x21a>
 8002f7a:	2309      	movs	r3, #9
 8002f7c:	e012      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f7e:	230a      	movs	r3, #10
 8002f80:	e010      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f82:	2308      	movs	r3, #8
 8002f84:	e00e      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f86:	2307      	movs	r3, #7
 8002f88:	e00c      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f8a:	2306      	movs	r3, #6
 8002f8c:	e00a      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f8e:	2305      	movs	r3, #5
 8002f90:	e008      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f92:	2304      	movs	r3, #4
 8002f94:	e006      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f96:	2303      	movs	r3, #3
 8002f98:	e004      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	e002      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e000      	b.n	8002fa4 <HAL_GPIO_Init+0x240>
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	f002 0203 	and.w	r2, r2, #3
 8002faa:	0092      	lsls	r2, r2, #2
 8002fac:	4093      	lsls	r3, r2
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fb4:	4935      	ldr	r1, [pc, #212]	; (800308c <HAL_GPIO_Init+0x328>)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	089b      	lsrs	r3, r3, #2
 8002fba:	3302      	adds	r3, #2
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fc2:	4b3d      	ldr	r3, [pc, #244]	; (80030b8 <HAL_GPIO_Init+0x354>)
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fe6:	4a34      	ldr	r2, [pc, #208]	; (80030b8 <HAL_GPIO_Init+0x354>)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fec:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <HAL_GPIO_Init+0x354>)
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003010:	4a29      	ldr	r2, [pc, #164]	; (80030b8 <HAL_GPIO_Init+0x354>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003016:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <HAL_GPIO_Init+0x354>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	43db      	mvns	r3, r3
 8003020:	69ba      	ldr	r2, [r7, #24]
 8003022:	4013      	ands	r3, r2
 8003024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800303a:	4a1f      	ldr	r2, [pc, #124]	; (80030b8 <HAL_GPIO_Init+0x354>)
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003040:	4b1d      	ldr	r3, [pc, #116]	; (80030b8 <HAL_GPIO_Init+0x354>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	43db      	mvns	r3, r3
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4013      	ands	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003064:	4a14      	ldr	r2, [pc, #80]	; (80030b8 <HAL_GPIO_Init+0x354>)
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3301      	adds	r3, #1
 800306e:	61fb      	str	r3, [r7, #28]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	2b0f      	cmp	r3, #15
 8003074:	f67f ae86 	bls.w	8002d84 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003078:	bf00      	nop
 800307a:	bf00      	nop
 800307c:	3724      	adds	r7, #36	; 0x24
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	40023800 	.word	0x40023800
 800308c:	40013800 	.word	0x40013800
 8003090:	40020000 	.word	0x40020000
 8003094:	40020400 	.word	0x40020400
 8003098:	40020800 	.word	0x40020800
 800309c:	40020c00 	.word	0x40020c00
 80030a0:	40021000 	.word	0x40021000
 80030a4:	40021400 	.word	0x40021400
 80030a8:	40021800 	.word	0x40021800
 80030ac:	40021c00 	.word	0x40021c00
 80030b0:	40022000 	.word	0x40022000
 80030b4:	40022400 	.word	0x40022400
 80030b8:	40013c00 	.word	0x40013c00

080030bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	807b      	strh	r3, [r7, #2]
 80030c8:	4613      	mov	r3, r2
 80030ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030cc:	787b      	ldrb	r3, [r7, #1]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030d2:	887a      	ldrh	r2, [r7, #2]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030d8:	e003      	b.n	80030e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030da:	887b      	ldrh	r3, [r7, #2]
 80030dc:	041a      	lsls	r2, r3, #16
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	619a      	str	r2, [r3, #24]
}
 80030e2:	bf00      	nop
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b085      	sub	sp, #20
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	460b      	mov	r3, r1
 80030f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003100:	887a      	ldrh	r2, [r7, #2]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	4013      	ands	r3, r2
 8003106:	041a      	lsls	r2, r3, #16
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	43d9      	mvns	r1, r3
 800310c:	887b      	ldrh	r3, [r7, #2]
 800310e:	400b      	ands	r3, r1
 8003110:	431a      	orrs	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	619a      	str	r2, [r3, #24]
}
 8003116:	bf00      	nop
 8003118:	3714      	adds	r7, #20
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d101      	bne.n	8003136 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e07f      	b.n	8003236 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800313c:	b2db      	uxtb	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7fe fe54 	bl	8001df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2224      	movs	r2, #36	; 0x24
 8003154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0201 	bic.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003174:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003184:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d107      	bne.n	800319e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	e006      	b.n	80031ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80031aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2b02      	cmp	r3, #2
 80031b2:	d104      	bne.n	80031be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6859      	ldr	r1, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4b1d      	ldr	r3, [pc, #116]	; (8003240 <HAL_I2C_Init+0x11c>)
 80031ca:	430b      	orrs	r3, r1
 80031cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691a      	ldr	r2, [r3, #16]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69d9      	ldr	r1, [r3, #28]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1a      	ldr	r2, [r3, #32]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f042 0201 	orr.w	r2, r2, #1
 8003216:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	02008000 	.word	0x02008000

08003244 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	607a      	str	r2, [r7, #4]
 800324e:	461a      	mov	r2, r3
 8003250:	460b      	mov	r3, r1
 8003252:	817b      	strh	r3, [r7, #10]
 8003254:	4613      	mov	r3, r2
 8003256:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b20      	cmp	r3, #32
 8003262:	f040 80da 	bne.w	800341a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_I2C_Master_Transmit+0x30>
 8003270:	2302      	movs	r3, #2
 8003272:	e0d3      	b.n	800341c <HAL_I2C_Master_Transmit+0x1d8>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800327c:	f7ff f924 	bl	80024c8 <HAL_GetTick>
 8003280:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	9300      	str	r3, [sp, #0]
 8003286:	2319      	movs	r3, #25
 8003288:	2201      	movs	r2, #1
 800328a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	f000 f9e6 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e0be      	b.n	800341c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2221      	movs	r2, #33	; 0x21
 80032a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2210      	movs	r2, #16
 80032aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2200      	movs	r2, #0
 80032b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	893a      	ldrh	r2, [r7, #8]
 80032be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2bff      	cmp	r3, #255	; 0xff
 80032ce:	d90e      	bls.n	80032ee <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	22ff      	movs	r2, #255	; 0xff
 80032d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	8979      	ldrh	r1, [r7, #10]
 80032de:	4b51      	ldr	r3, [pc, #324]	; (8003424 <HAL_I2C_Master_Transmit+0x1e0>)
 80032e0:	9300      	str	r3, [sp, #0]
 80032e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 fbdc 	bl	8003aa4 <I2C_TransferConfig>
 80032ec:	e06c      	b.n	80033c8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f2:	b29a      	uxth	r2, r3
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	8979      	ldrh	r1, [r7, #10]
 8003300:	4b48      	ldr	r3, [pc, #288]	; (8003424 <HAL_I2C_Master_Transmit+0x1e0>)
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 fbcb 	bl	8003aa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800330e:	e05b      	b.n	80033c8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	6a39      	ldr	r1, [r7, #32]
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f9e3 	bl	80036e0 <I2C_WaitOnTXISFlagUntilTimeout>
 800331a:	4603      	mov	r3, r0
 800331c:	2b00      	cmp	r3, #0
 800331e:	d001      	beq.n	8003324 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e07b      	b.n	800341c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	781a      	ldrb	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333e:	b29b      	uxth	r3, r3
 8003340:	3b01      	subs	r3, #1
 8003342:	b29a      	uxth	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334c:	3b01      	subs	r3, #1
 800334e:	b29a      	uxth	r2, r3
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003358:	b29b      	uxth	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d034      	beq.n	80033c8 <HAL_I2C_Master_Transmit+0x184>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003362:	2b00      	cmp	r3, #0
 8003364:	d130      	bne.n	80033c8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	2200      	movs	r2, #0
 800336e:	2180      	movs	r1, #128	; 0x80
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f000 f975 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e04d      	b.n	800341c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003384:	b29b      	uxth	r3, r3
 8003386:	2bff      	cmp	r3, #255	; 0xff
 8003388:	d90e      	bls.n	80033a8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	22ff      	movs	r2, #255	; 0xff
 800338e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003394:	b2da      	uxtb	r2, r3
 8003396:	8979      	ldrh	r1, [r7, #10]
 8003398:	2300      	movs	r3, #0
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 fb7f 	bl	8003aa4 <I2C_TransferConfig>
 80033a6:	e00f      	b.n	80033c8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	8979      	ldrh	r1, [r7, #10]
 80033ba:	2300      	movs	r3, #0
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 fb6e 	bl	8003aa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d19e      	bne.n	8003310 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	6a39      	ldr	r1, [r7, #32]
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f9c2 	bl	8003760 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e01a      	b.n	800341c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2220      	movs	r2, #32
 80033ec:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <HAL_I2C_Master_Transmit+0x1e4>)
 80033fa:	400b      	ands	r3, r1
 80033fc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2220      	movs	r2, #32
 8003402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	e000      	b.n	800341c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800341a:	2302      	movs	r3, #2
  }
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	80002000 	.word	0x80002000
 8003428:	fe00e800 	.word	0xfe00e800

0800342c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af02      	add	r7, sp, #8
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	461a      	mov	r2, r3
 8003438:	460b      	mov	r3, r1
 800343a:	817b      	strh	r3, [r7, #10]
 800343c:	4613      	mov	r3, r2
 800343e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b20      	cmp	r3, #32
 800344a:	f040 80db 	bne.w	8003604 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003454:	2b01      	cmp	r3, #1
 8003456:	d101      	bne.n	800345c <HAL_I2C_Master_Receive+0x30>
 8003458:	2302      	movs	r3, #2
 800345a:	e0d4      	b.n	8003606 <HAL_I2C_Master_Receive+0x1da>
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003464:	f7ff f830 	bl	80024c8 <HAL_GetTick>
 8003468:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	2319      	movs	r3, #25
 8003470:	2201      	movs	r2, #1
 8003472:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f8f2 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e0bf      	b.n	8003606 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2222      	movs	r2, #34	; 0x22
 800348a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2210      	movs	r2, #16
 8003492:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	893a      	ldrh	r2, [r7, #8]
 80034a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	2bff      	cmp	r3, #255	; 0xff
 80034b6:	d90e      	bls.n	80034d6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	22ff      	movs	r2, #255	; 0xff
 80034bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	8979      	ldrh	r1, [r7, #10]
 80034c6:	4b52      	ldr	r3, [pc, #328]	; (8003610 <HAL_I2C_Master_Receive+0x1e4>)
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 fae8 	bl	8003aa4 <I2C_TransferConfig>
 80034d4:	e06d      	b.n	80035b2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034da:	b29a      	uxth	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	8979      	ldrh	r1, [r7, #10]
 80034e8:	4b49      	ldr	r3, [pc, #292]	; (8003610 <HAL_I2C_Master_Receive+0x1e4>)
 80034ea:	9300      	str	r3, [sp, #0]
 80034ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 fad7 	bl	8003aa4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80034f6:	e05c      	b.n	80035b2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	6a39      	ldr	r1, [r7, #32]
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f96b 	bl	80037d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e07c      	b.n	8003606 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	b2d2      	uxtb	r2, r2
 8003518:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003534:	b29b      	uxth	r3, r3
 8003536:	3b01      	subs	r3, #1
 8003538:	b29a      	uxth	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003542:	b29b      	uxth	r3, r3
 8003544:	2b00      	cmp	r3, #0
 8003546:	d034      	beq.n	80035b2 <HAL_I2C_Master_Receive+0x186>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354c:	2b00      	cmp	r3, #0
 800354e:	d130      	bne.n	80035b2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	2200      	movs	r2, #0
 8003558:	2180      	movs	r1, #128	; 0x80
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 f880 	bl	8003660 <I2C_WaitOnFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e04d      	b.n	8003606 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356e:	b29b      	uxth	r3, r3
 8003570:	2bff      	cmp	r3, #255	; 0xff
 8003572:	d90e      	bls.n	8003592 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	22ff      	movs	r2, #255	; 0xff
 8003578:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357e:	b2da      	uxtb	r2, r3
 8003580:	8979      	ldrh	r1, [r7, #10]
 8003582:	2300      	movs	r3, #0
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 fa8a 	bl	8003aa4 <I2C_TransferConfig>
 8003590:	e00f      	b.n	80035b2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	8979      	ldrh	r1, [r7, #10]
 80035a4:	2300      	movs	r3, #0
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 fa79 	bl	8003aa4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d19d      	bne.n	80034f8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	6a39      	ldr	r1, [r7, #32]
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f8cd 	bl	8003760 <I2C_WaitOnSTOPFlagUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e01a      	b.n	8003606 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2220      	movs	r2, #32
 80035d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6859      	ldr	r1, [r3, #4]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	4b0c      	ldr	r3, [pc, #48]	; (8003614 <HAL_I2C_Master_Receive+0x1e8>)
 80035e4:	400b      	ands	r3, r1
 80035e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	e000      	b.n	8003606 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003604:	2302      	movs	r3, #2
  }
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	80002400 	.word	0x80002400
 8003614:	fe00e800 	.word	0xfe00e800

08003618 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	f003 0302 	and.w	r3, r3, #2
 800362a:	2b02      	cmp	r3, #2
 800362c:	d103      	bne.n	8003636 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2200      	movs	r2, #0
 8003634:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b01      	cmp	r3, #1
 8003642:	d007      	beq.n	8003654 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	699a      	ldr	r2, [r3, #24]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f042 0201 	orr.w	r2, r2, #1
 8003652:	619a      	str	r2, [r3, #24]
  }
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	603b      	str	r3, [r7, #0]
 800366c:	4613      	mov	r3, r2
 800366e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003670:	e022      	b.n	80036b8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d01e      	beq.n	80036b8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367a:	f7fe ff25 	bl	80024c8 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d302      	bcc.n	8003690 <I2C_WaitOnFlagUntilTimeout+0x30>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d113      	bne.n	80036b8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003694:	f043 0220 	orr.w	r2, r3, #32
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2220      	movs	r2, #32
 80036a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e00f      	b.n	80036d8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	4013      	ands	r3, r2
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	bf0c      	ite	eq
 80036c8:	2301      	moveq	r3, #1
 80036ca:	2300      	movne	r3, #0
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	461a      	mov	r2, r3
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d0cd      	beq.n	8003672 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036ec:	e02c      	b.n	8003748 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f8ea 	bl	80038cc <I2C_IsErrorOccurred>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e02a      	b.n	8003758 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003708:	d01e      	beq.n	8003748 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370a:	f7fe fedd 	bl	80024c8 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	429a      	cmp	r2, r3
 8003718:	d302      	bcc.n	8003720 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d113      	bne.n	8003748 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003724:	f043 0220 	orr.w	r2, r3, #32
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e007      	b.n	8003758 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b02      	cmp	r3, #2
 8003754:	d1cb      	bne.n	80036ee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003756:	2300      	movs	r3, #0
}
 8003758:	4618      	mov	r0, r3
 800375a:	3710      	adds	r7, #16
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800376c:	e028      	b.n	80037c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68b9      	ldr	r1, [r7, #8]
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f8aa 	bl	80038cc <I2C_IsErrorOccurred>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e026      	b.n	80037d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003782:	f7fe fea1 	bl	80024c8 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	429a      	cmp	r2, r3
 8003790:	d302      	bcc.n	8003798 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d113      	bne.n	80037c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800379c:	f043 0220 	orr.w	r2, r3, #32
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e007      	b.n	80037d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	d1cf      	bne.n	800376e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3710      	adds	r7, #16
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037e4:	e064      	b.n	80038b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	68b9      	ldr	r1, [r7, #8]
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 f86e 	bl	80038cc <I2C_IsErrorOccurred>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	e062      	b.n	80038c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	f003 0320 	and.w	r3, r3, #32
 8003804:	2b20      	cmp	r3, #32
 8003806:	d138      	bne.n	800387a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	f003 0304 	and.w	r3, r3, #4
 8003812:	2b04      	cmp	r3, #4
 8003814:	d105      	bne.n	8003822 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	e04e      	b.n	80038c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	f003 0310 	and.w	r3, r3, #16
 800382c:	2b10      	cmp	r3, #16
 800382e:	d107      	bne.n	8003840 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2210      	movs	r2, #16
 8003836:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2204      	movs	r2, #4
 800383c:	645a      	str	r2, [r3, #68]	; 0x44
 800383e:	e002      	b.n	8003846 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2220      	movs	r2, #32
 800384c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6859      	ldr	r1, [r3, #4]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800385a:	400b      	ands	r3, r1
 800385c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2220      	movs	r2, #32
 8003862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e022      	b.n	80038c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387a:	f7fe fe25 	bl	80024c8 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	68ba      	ldr	r2, [r7, #8]
 8003886:	429a      	cmp	r2, r3
 8003888:	d302      	bcc.n	8003890 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d10f      	bne.n	80038b0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003894:	f043 0220 	orr.w	r2, r3, #32
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e007      	b.n	80038c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	f003 0304 	and.w	r3, r3, #4
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d193      	bne.n	80037e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	fe00e800 	.word	0xfe00e800

080038cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	; 0x28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	60b9      	str	r1, [r7, #8]
 80038d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d8:	2300      	movs	r3, #0
 80038da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d075      	beq.n	80039e4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2210      	movs	r2, #16
 80038fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003900:	e056      	b.n	80039b0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003908:	d052      	beq.n	80039b0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800390a:	f7fe fddd 	bl	80024c8 <HAL_GetTick>
 800390e:	4602      	mov	r2, r0
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	429a      	cmp	r2, r3
 8003918:	d302      	bcc.n	8003920 <I2C_IsErrorOccurred+0x54>
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d147      	bne.n	80039b0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800392a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003932:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699b      	ldr	r3, [r3, #24]
 800393a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800393e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003942:	d12e      	bne.n	80039a2 <I2C_IsErrorOccurred+0xd6>
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800394a:	d02a      	beq.n	80039a2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800394c:	7cfb      	ldrb	r3, [r7, #19]
 800394e:	2b20      	cmp	r3, #32
 8003950:	d027      	beq.n	80039a2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003960:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003962:	f7fe fdb1 	bl	80024c8 <HAL_GetTick>
 8003966:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003968:	e01b      	b.n	80039a2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800396a:	f7fe fdad 	bl	80024c8 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b19      	cmp	r3, #25
 8003976:	d914      	bls.n	80039a2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397c:	f043 0220 	orr.w	r2, r3, #32
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b20      	cmp	r3, #32
 80039ae:	d1dc      	bne.n	800396a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f003 0320 	and.w	r3, r3, #32
 80039ba:	2b20      	cmp	r3, #32
 80039bc:	d003      	beq.n	80039c6 <I2C_IsErrorOccurred+0xfa>
 80039be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d09d      	beq.n	8003902 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80039c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d103      	bne.n	80039d6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2220      	movs	r2, #32
 80039d4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	f043 0304 	orr.w	r3, r3, #4
 80039dc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699b      	ldr	r3, [r3, #24]
 80039ea:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00b      	beq.n	8003a0e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039f6:	6a3b      	ldr	r3, [r7, #32]
 80039f8:	f043 0301 	orr.w	r3, r3, #1
 80039fc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00b      	beq.n	8003a30 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	f043 0308 	orr.w	r3, r3, #8
 8003a1e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00b      	beq.n	8003a52 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	f043 0302 	orr.w	r3, r3, #2
 8003a40:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a4a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003a52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d01c      	beq.n	8003a94 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f7ff fddc 	bl	8003618 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6859      	ldr	r1, [r3, #4]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4b0d      	ldr	r3, [pc, #52]	; (8003aa0 <I2C_IsErrorOccurred+0x1d4>)
 8003a6c:	400b      	ands	r3, r1
 8003a6e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a74:	6a3b      	ldr	r3, [r7, #32]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003a94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3728      	adds	r7, #40	; 0x28
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	fe00e800 	.word	0xfe00e800

08003aa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b087      	sub	sp, #28
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	817b      	strh	r3, [r7, #10]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ab6:	897b      	ldrh	r3, [r7, #10]
 8003ab8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003abc:	7a7b      	ldrb	r3, [r7, #9]
 8003abe:	041b      	lsls	r3, r3, #16
 8003ac0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ac4:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003aca:	6a3b      	ldr	r3, [r7, #32]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ad2:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685a      	ldr	r2, [r3, #4]
 8003ada:	6a3b      	ldr	r3, [r7, #32]
 8003adc:	0d5b      	lsrs	r3, r3, #21
 8003ade:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003ae2:	4b08      	ldr	r3, [pc, #32]	; (8003b04 <I2C_TransferConfig+0x60>)
 8003ae4:	430b      	orrs	r3, r1
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	ea02 0103 	and.w	r1, r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003af6:	bf00      	nop
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	03ff63ff 	.word	0x03ff63ff

08003b08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b20      	cmp	r3, #32
 8003b1c:	d138      	bne.n	8003b90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e032      	b.n	8003b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2224      	movs	r2, #36	; 0x24
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0201 	bic.w	r2, r2, #1
 8003b4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	6819      	ldr	r1, [r3, #0]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	683a      	ldr	r2, [r7, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	e000      	b.n	8003b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
  }
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b085      	sub	sp, #20
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
 8003ba6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b20      	cmp	r3, #32
 8003bb2:	d139      	bne.n	8003c28 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d101      	bne.n	8003bc2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	e033      	b.n	8003c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2224      	movs	r2, #36	; 0x24
 8003bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0201 	bic.w	r2, r2, #1
 8003be0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003bf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	021b      	lsls	r3, r3, #8
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f042 0201 	orr.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	e000      	b.n	8003c2a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c28:	2302      	movs	r3, #2
  }
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c46:	6013      	str	r3, [r2, #0]
}
 8003c48:	bf00      	nop
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	40007000 	.word	0x40007000

08003c58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003c60:	2300      	movs	r3, #0
 8003c62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e29b      	b.n	80041a6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 8087 	beq.w	8003d8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c7c:	4b96      	ldr	r3, [pc, #600]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 030c 	and.w	r3, r3, #12
 8003c84:	2b04      	cmp	r3, #4
 8003c86:	d00c      	beq.n	8003ca2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c88:	4b93      	ldr	r3, [pc, #588]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 030c 	and.w	r3, r3, #12
 8003c90:	2b08      	cmp	r3, #8
 8003c92:	d112      	bne.n	8003cba <HAL_RCC_OscConfig+0x62>
 8003c94:	4b90      	ldr	r3, [pc, #576]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca0:	d10b      	bne.n	8003cba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca2:	4b8d      	ldr	r3, [pc, #564]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d06c      	beq.n	8003d88 <HAL_RCC_OscConfig+0x130>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d168      	bne.n	8003d88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e275      	b.n	80041a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc2:	d106      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x7a>
 8003cc4:	4b84      	ldr	r3, [pc, #528]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a83      	ldr	r2, [pc, #524]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003cca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cce:	6013      	str	r3, [r2, #0]
 8003cd0:	e02e      	b.n	8003d30 <HAL_RCC_OscConfig+0xd8>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d10c      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x9c>
 8003cda:	4b7f      	ldr	r3, [pc, #508]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a7e      	ldr	r2, [pc, #504]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ce4:	6013      	str	r3, [r2, #0]
 8003ce6:	4b7c      	ldr	r3, [pc, #496]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a7b      	ldr	r2, [pc, #492]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003cec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cf0:	6013      	str	r3, [r2, #0]
 8003cf2:	e01d      	b.n	8003d30 <HAL_RCC_OscConfig+0xd8>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cfc:	d10c      	bne.n	8003d18 <HAL_RCC_OscConfig+0xc0>
 8003cfe:	4b76      	ldr	r3, [pc, #472]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a75      	ldr	r2, [pc, #468]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	4b73      	ldr	r3, [pc, #460]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a72      	ldr	r2, [pc, #456]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	e00b      	b.n	8003d30 <HAL_RCC_OscConfig+0xd8>
 8003d18:	4b6f      	ldr	r3, [pc, #444]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a6e      	ldr	r2, [pc, #440]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	4b6c      	ldr	r3, [pc, #432]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a6b      	ldr	r2, [pc, #428]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d013      	beq.n	8003d60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d38:	f7fe fbc6 	bl	80024c8 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3e:	e008      	b.n	8003d52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d40:	f7fe fbc2 	bl	80024c8 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b64      	cmp	r3, #100	; 0x64
 8003d4c:	d901      	bls.n	8003d52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e229      	b.n	80041a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d52:	4b61      	ldr	r3, [pc, #388]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d0f0      	beq.n	8003d40 <HAL_RCC_OscConfig+0xe8>
 8003d5e:	e014      	b.n	8003d8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d60:	f7fe fbb2 	bl	80024c8 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d68:	f7fe fbae 	bl	80024c8 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b64      	cmp	r3, #100	; 0x64
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e215      	b.n	80041a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d7a:	4b57      	ldr	r3, [pc, #348]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1f0      	bne.n	8003d68 <HAL_RCC_OscConfig+0x110>
 8003d86:	e000      	b.n	8003d8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d069      	beq.n	8003e6a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d96:	4b50      	ldr	r3, [pc, #320]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00b      	beq.n	8003dba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003da2:	4b4d      	ldr	r3, [pc, #308]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 030c 	and.w	r3, r3, #12
 8003daa:	2b08      	cmp	r3, #8
 8003dac:	d11c      	bne.n	8003de8 <HAL_RCC_OscConfig+0x190>
 8003dae:	4b4a      	ldr	r3, [pc, #296]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d116      	bne.n	8003de8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dba:	4b47      	ldr	r3, [pc, #284]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0302 	and.w	r3, r3, #2
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d005      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x17a>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d001      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e1e9      	b.n	80041a6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd2:	4b41      	ldr	r3, [pc, #260]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	00db      	lsls	r3, r3, #3
 8003de0:	493d      	ldr	r1, [pc, #244]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003de6:	e040      	b.n	8003e6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d023      	beq.n	8003e38 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003df0:	4b39      	ldr	r3, [pc, #228]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a38      	ldr	r2, [pc, #224]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003df6:	f043 0301 	orr.w	r3, r3, #1
 8003dfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fe fb64 	bl	80024c8 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e04:	f7fe fb60 	bl	80024c8 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e1c7      	b.n	80041a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e16:	4b30      	ldr	r3, [pc, #192]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e22:	4b2d      	ldr	r3, [pc, #180]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	00db      	lsls	r3, r3, #3
 8003e30:	4929      	ldr	r1, [pc, #164]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	600b      	str	r3, [r1, #0]
 8003e36:	e018      	b.n	8003e6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e38:	4b27      	ldr	r3, [pc, #156]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a26      	ldr	r2, [pc, #152]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003e3e:	f023 0301 	bic.w	r3, r3, #1
 8003e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e44:	f7fe fb40 	bl	80024c8 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e4c:	f7fe fb3c 	bl	80024c8 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e1a3      	b.n	80041a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e5e:	4b1e      	ldr	r3, [pc, #120]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1f0      	bne.n	8003e4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d038      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d019      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e7e:	4b16      	ldr	r3, [pc, #88]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e82:	4a15      	ldr	r2, [pc, #84]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003e84:	f043 0301 	orr.w	r3, r3, #1
 8003e88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e8a:	f7fe fb1d 	bl	80024c8 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e92:	f7fe fb19 	bl	80024c8 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e180      	b.n	80041a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d0f0      	beq.n	8003e92 <HAL_RCC_OscConfig+0x23a>
 8003eb0:	e01a      	b.n	8003ee8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb6:	4a08      	ldr	r2, [pc, #32]	; (8003ed8 <HAL_RCC_OscConfig+0x280>)
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebe:	f7fe fb03 	bl	80024c8 <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec4:	e00a      	b.n	8003edc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ec6:	f7fe faff 	bl	80024c8 <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d903      	bls.n	8003edc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e166      	b.n	80041a6 <HAL_RCC_OscConfig+0x54e>
 8003ed8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003edc:	4b92      	ldr	r3, [pc, #584]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1ee      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0304 	and.w	r3, r3, #4
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 80a4 	beq.w	800403e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ef6:	4b8c      	ldr	r3, [pc, #560]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10d      	bne.n	8003f1e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f02:	4b89      	ldr	r3, [pc, #548]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	4a88      	ldr	r2, [pc, #544]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0e:	4b86      	ldr	r3, [pc, #536]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f16:	60bb      	str	r3, [r7, #8]
 8003f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f1e:	4b83      	ldr	r3, [pc, #524]	; (800412c <HAL_RCC_OscConfig+0x4d4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d118      	bne.n	8003f5c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f2a:	4b80      	ldr	r3, [pc, #512]	; (800412c <HAL_RCC_OscConfig+0x4d4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a7f      	ldr	r2, [pc, #508]	; (800412c <HAL_RCC_OscConfig+0x4d4>)
 8003f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f36:	f7fe fac7 	bl	80024c8 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f3e:	f7fe fac3 	bl	80024c8 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b64      	cmp	r3, #100	; 0x64
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e12a      	b.n	80041a6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f50:	4b76      	ldr	r3, [pc, #472]	; (800412c <HAL_RCC_OscConfig+0x4d4>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d106      	bne.n	8003f72 <HAL_RCC_OscConfig+0x31a>
 8003f64:	4b70      	ldr	r3, [pc, #448]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f68:	4a6f      	ldr	r2, [pc, #444]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003f6a:	f043 0301 	orr.w	r3, r3, #1
 8003f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f70:	e02d      	b.n	8003fce <HAL_RCC_OscConfig+0x376>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCC_OscConfig+0x33c>
 8003f7a:	4b6b      	ldr	r3, [pc, #428]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f7e:	4a6a      	ldr	r2, [pc, #424]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003f80:	f023 0301 	bic.w	r3, r3, #1
 8003f84:	6713      	str	r3, [r2, #112]	; 0x70
 8003f86:	4b68      	ldr	r3, [pc, #416]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8a:	4a67      	ldr	r2, [pc, #412]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003f8c:	f023 0304 	bic.w	r3, r3, #4
 8003f90:	6713      	str	r3, [r2, #112]	; 0x70
 8003f92:	e01c      	b.n	8003fce <HAL_RCC_OscConfig+0x376>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	2b05      	cmp	r3, #5
 8003f9a:	d10c      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x35e>
 8003f9c:	4b62      	ldr	r3, [pc, #392]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa0:	4a61      	ldr	r2, [pc, #388]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003fa2:	f043 0304 	orr.w	r3, r3, #4
 8003fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fa8:	4b5f      	ldr	r3, [pc, #380]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fac:	4a5e      	ldr	r2, [pc, #376]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003fae:	f043 0301 	orr.w	r3, r3, #1
 8003fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb4:	e00b      	b.n	8003fce <HAL_RCC_OscConfig+0x376>
 8003fb6:	4b5c      	ldr	r3, [pc, #368]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fba:	4a5b      	ldr	r2, [pc, #364]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003fbc:	f023 0301 	bic.w	r3, r3, #1
 8003fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc2:	4b59      	ldr	r3, [pc, #356]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc6:	4a58      	ldr	r2, [pc, #352]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003fc8:	f023 0304 	bic.w	r3, r3, #4
 8003fcc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d015      	beq.n	8004002 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd6:	f7fe fa77 	bl	80024c8 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fdc:	e00a      	b.n	8003ff4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fde:	f7fe fa73 	bl	80024c8 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e0d8      	b.n	80041a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff4:	4b4c      	ldr	r3, [pc, #304]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8003ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d0ee      	beq.n	8003fde <HAL_RCC_OscConfig+0x386>
 8004000:	e014      	b.n	800402c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004002:	f7fe fa61 	bl	80024c8 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004008:	e00a      	b.n	8004020 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800400a:	f7fe fa5d 	bl	80024c8 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	f241 3288 	movw	r2, #5000	; 0x1388
 8004018:	4293      	cmp	r3, r2
 800401a:	d901      	bls.n	8004020 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e0c2      	b.n	80041a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004020:	4b41      	ldr	r3, [pc, #260]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8004022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1ee      	bne.n	800400a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800402c:	7dfb      	ldrb	r3, [r7, #23]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d105      	bne.n	800403e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004032:	4b3d      	ldr	r3, [pc, #244]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	4a3c      	ldr	r2, [pc, #240]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8004038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800403c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 80ae 	beq.w	80041a4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004048:	4b37      	ldr	r3, [pc, #220]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f003 030c 	and.w	r3, r3, #12
 8004050:	2b08      	cmp	r3, #8
 8004052:	d06d      	beq.n	8004130 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b02      	cmp	r3, #2
 800405a:	d14b      	bne.n	80040f4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405c:	4b32      	ldr	r3, [pc, #200]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a31      	ldr	r2, [pc, #196]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8004062:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004066:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004068:	f7fe fa2e 	bl	80024c8 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004070:	f7fe fa2a 	bl	80024c8 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e091      	b.n	80041a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004082:	4b29      	ldr	r3, [pc, #164]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1f0      	bne.n	8004070 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69da      	ldr	r2, [r3, #28]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	019b      	lsls	r3, r3, #6
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a4:	085b      	lsrs	r3, r3, #1
 80040a6:	3b01      	subs	r3, #1
 80040a8:	041b      	lsls	r3, r3, #16
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b0:	061b      	lsls	r3, r3, #24
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b8:	071b      	lsls	r3, r3, #28
 80040ba:	491b      	ldr	r1, [pc, #108]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040c0:	4b19      	ldr	r3, [pc, #100]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a18      	ldr	r2, [pc, #96]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 80040c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040cc:	f7fe f9fc 	bl	80024c8 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d4:	f7fe f9f8 	bl	80024c8 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e05f      	b.n	80041a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e6:	4b10      	ldr	r3, [pc, #64]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCC_OscConfig+0x47c>
 80040f2:	e057      	b.n	80041a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040f4:	4b0c      	ldr	r3, [pc, #48]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a0b      	ldr	r2, [pc, #44]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 80040fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fe f9e2 	bl	80024c8 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004108:	f7fe f9de 	bl	80024c8 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e045      	b.n	80041a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411a:	4b03      	ldr	r3, [pc, #12]	; (8004128 <HAL_RCC_OscConfig+0x4d0>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x4b0>
 8004126:	e03d      	b.n	80041a4 <HAL_RCC_OscConfig+0x54c>
 8004128:	40023800 	.word	0x40023800
 800412c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004130:	4b1f      	ldr	r3, [pc, #124]	; (80041b0 <HAL_RCC_OscConfig+0x558>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d030      	beq.n	80041a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004148:	429a      	cmp	r2, r3
 800414a:	d129      	bne.n	80041a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004156:	429a      	cmp	r2, r3
 8004158:	d122      	bne.n	80041a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004160:	4013      	ands	r3, r2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004166:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004168:	4293      	cmp	r3, r2
 800416a:	d119      	bne.n	80041a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	085b      	lsrs	r3, r3, #1
 8004178:	3b01      	subs	r3, #1
 800417a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800417c:	429a      	cmp	r2, r3
 800417e:	d10f      	bne.n	80041a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800418c:	429a      	cmp	r2, r3
 800418e:	d107      	bne.n	80041a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800

080041b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e0d0      	b.n	800436e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041cc:	4b6a      	ldr	r3, [pc, #424]	; (8004378 <HAL_RCC_ClockConfig+0x1c4>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d910      	bls.n	80041fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041da:	4b67      	ldr	r3, [pc, #412]	; (8004378 <HAL_RCC_ClockConfig+0x1c4>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f023 020f 	bic.w	r2, r3, #15
 80041e2:	4965      	ldr	r1, [pc, #404]	; (8004378 <HAL_RCC_ClockConfig+0x1c4>)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ea:	4b63      	ldr	r3, [pc, #396]	; (8004378 <HAL_RCC_ClockConfig+0x1c4>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d001      	beq.n	80041fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0b8      	b.n	800436e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0302 	and.w	r3, r3, #2
 8004204:	2b00      	cmp	r3, #0
 8004206:	d020      	beq.n	800424a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d005      	beq.n	8004220 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004214:	4b59      	ldr	r3, [pc, #356]	; (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	4a58      	ldr	r2, [pc, #352]	; (800437c <HAL_RCC_ClockConfig+0x1c8>)
 800421a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800421e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d005      	beq.n	8004238 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800422c:	4b53      	ldr	r3, [pc, #332]	; (800437c <HAL_RCC_ClockConfig+0x1c8>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	4a52      	ldr	r2, [pc, #328]	; (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004232:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004236:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004238:	4b50      	ldr	r3, [pc, #320]	; (800437c <HAL_RCC_ClockConfig+0x1c8>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	494d      	ldr	r1, [pc, #308]	; (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004246:	4313      	orrs	r3, r2
 8004248:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0301 	and.w	r3, r3, #1
 8004252:	2b00      	cmp	r3, #0
 8004254:	d040      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d107      	bne.n	800426e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425e:	4b47      	ldr	r3, [pc, #284]	; (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d115      	bne.n	8004296 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e07f      	b.n	800436e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d107      	bne.n	8004286 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004276:	4b41      	ldr	r3, [pc, #260]	; (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427e:	2b00      	cmp	r3, #0
 8004280:	d109      	bne.n	8004296 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e073      	b.n	800436e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004286:	4b3d      	ldr	r3, [pc, #244]	; (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e06b      	b.n	800436e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004296:	4b39      	ldr	r3, [pc, #228]	; (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f023 0203 	bic.w	r2, r3, #3
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	4936      	ldr	r1, [pc, #216]	; (800437c <HAL_RCC_ClockConfig+0x1c8>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042a8:	f7fe f90e 	bl	80024c8 <HAL_GetTick>
 80042ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b0:	f7fe f90a 	bl	80024c8 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e053      	b.n	800436e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c6:	4b2d      	ldr	r3, [pc, #180]	; (800437c <HAL_RCC_ClockConfig+0x1c8>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 020c 	and.w	r2, r3, #12
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d1eb      	bne.n	80042b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042d8:	4b27      	ldr	r3, [pc, #156]	; (8004378 <HAL_RCC_ClockConfig+0x1c4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 030f 	and.w	r3, r3, #15
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d210      	bcs.n	8004308 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e6:	4b24      	ldr	r3, [pc, #144]	; (8004378 <HAL_RCC_ClockConfig+0x1c4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f023 020f 	bic.w	r2, r3, #15
 80042ee:	4922      	ldr	r1, [pc, #136]	; (8004378 <HAL_RCC_ClockConfig+0x1c4>)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f6:	4b20      	ldr	r3, [pc, #128]	; (8004378 <HAL_RCC_ClockConfig+0x1c4>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	683a      	ldr	r2, [r7, #0]
 8004300:	429a      	cmp	r2, r3
 8004302:	d001      	beq.n	8004308 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e032      	b.n	800436e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b00      	cmp	r3, #0
 8004312:	d008      	beq.n	8004326 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004314:	4b19      	ldr	r3, [pc, #100]	; (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	4916      	ldr	r1, [pc, #88]	; (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004322:	4313      	orrs	r3, r2
 8004324:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004332:	4b12      	ldr	r3, [pc, #72]	; (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	490e      	ldr	r1, [pc, #56]	; (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004342:	4313      	orrs	r3, r2
 8004344:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004346:	f000 f821 	bl	800438c <HAL_RCC_GetSysClockFreq>
 800434a:	4602      	mov	r2, r0
 800434c:	4b0b      	ldr	r3, [pc, #44]	; (800437c <HAL_RCC_ClockConfig+0x1c8>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	f003 030f 	and.w	r3, r3, #15
 8004356:	490a      	ldr	r1, [pc, #40]	; (8004380 <HAL_RCC_ClockConfig+0x1cc>)
 8004358:	5ccb      	ldrb	r3, [r1, r3]
 800435a:	fa22 f303 	lsr.w	r3, r2, r3
 800435e:	4a09      	ldr	r2, [pc, #36]	; (8004384 <HAL_RCC_ClockConfig+0x1d0>)
 8004360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004362:	4b09      	ldr	r3, [pc, #36]	; (8004388 <HAL_RCC_ClockConfig+0x1d4>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7fe f86a 	bl	8002440 <HAL_InitTick>

  return HAL_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3710      	adds	r7, #16
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	40023c00 	.word	0x40023c00
 800437c:	40023800 	.word	0x40023800
 8004380:	0800b130 	.word	0x0800b130
 8004384:	20000004 	.word	0x20000004
 8004388:	20000008 	.word	0x20000008

0800438c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800438c:	b5b0      	push	{r4, r5, r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004392:	2100      	movs	r1, #0
 8004394:	6079      	str	r1, [r7, #4]
 8004396:	2100      	movs	r1, #0
 8004398:	60f9      	str	r1, [r7, #12]
 800439a:	2100      	movs	r1, #0
 800439c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 800439e:	2100      	movs	r1, #0
 80043a0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043a2:	4952      	ldr	r1, [pc, #328]	; (80044ec <HAL_RCC_GetSysClockFreq+0x160>)
 80043a4:	6889      	ldr	r1, [r1, #8]
 80043a6:	f001 010c 	and.w	r1, r1, #12
 80043aa:	2908      	cmp	r1, #8
 80043ac:	d00d      	beq.n	80043ca <HAL_RCC_GetSysClockFreq+0x3e>
 80043ae:	2908      	cmp	r1, #8
 80043b0:	f200 8094 	bhi.w	80044dc <HAL_RCC_GetSysClockFreq+0x150>
 80043b4:	2900      	cmp	r1, #0
 80043b6:	d002      	beq.n	80043be <HAL_RCC_GetSysClockFreq+0x32>
 80043b8:	2904      	cmp	r1, #4
 80043ba:	d003      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0x38>
 80043bc:	e08e      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043be:	4b4c      	ldr	r3, [pc, #304]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80043c0:	60bb      	str	r3, [r7, #8]
      break;
 80043c2:	e08e      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043c4:	4b4b      	ldr	r3, [pc, #300]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80043c6:	60bb      	str	r3, [r7, #8]
      break;
 80043c8:	e08b      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043ca:	4948      	ldr	r1, [pc, #288]	; (80044ec <HAL_RCC_GetSysClockFreq+0x160>)
 80043cc:	6849      	ldr	r1, [r1, #4]
 80043ce:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80043d2:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80043d4:	4945      	ldr	r1, [pc, #276]	; (80044ec <HAL_RCC_GetSysClockFreq+0x160>)
 80043d6:	6849      	ldr	r1, [r1, #4]
 80043d8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80043dc:	2900      	cmp	r1, #0
 80043de:	d024      	beq.n	800442a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043e0:	4942      	ldr	r1, [pc, #264]	; (80044ec <HAL_RCC_GetSysClockFreq+0x160>)
 80043e2:	6849      	ldr	r1, [r1, #4]
 80043e4:	0989      	lsrs	r1, r1, #6
 80043e6:	4608      	mov	r0, r1
 80043e8:	f04f 0100 	mov.w	r1, #0
 80043ec:	f240 14ff 	movw	r4, #511	; 0x1ff
 80043f0:	f04f 0500 	mov.w	r5, #0
 80043f4:	ea00 0204 	and.w	r2, r0, r4
 80043f8:	ea01 0305 	and.w	r3, r1, r5
 80043fc:	493d      	ldr	r1, [pc, #244]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x168>)
 80043fe:	fb01 f003 	mul.w	r0, r1, r3
 8004402:	2100      	movs	r1, #0
 8004404:	fb01 f102 	mul.w	r1, r1, r2
 8004408:	1844      	adds	r4, r0, r1
 800440a:	493a      	ldr	r1, [pc, #232]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x168>)
 800440c:	fba2 0101 	umull	r0, r1, r2, r1
 8004410:	1863      	adds	r3, r4, r1
 8004412:	4619      	mov	r1, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	461a      	mov	r2, r3
 8004418:	f04f 0300 	mov.w	r3, #0
 800441c:	f7fc f924 	bl	8000668 <__aeabi_uldivmod>
 8004420:	4602      	mov	r2, r0
 8004422:	460b      	mov	r3, r1
 8004424:	4613      	mov	r3, r2
 8004426:	60fb      	str	r3, [r7, #12]
 8004428:	e04a      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800442a:	4b30      	ldr	r3, [pc, #192]	; (80044ec <HAL_RCC_GetSysClockFreq+0x160>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	099b      	lsrs	r3, r3, #6
 8004430:	461a      	mov	r2, r3
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	f240 10ff 	movw	r0, #511	; 0x1ff
 800443a:	f04f 0100 	mov.w	r1, #0
 800443e:	ea02 0400 	and.w	r4, r2, r0
 8004442:	ea03 0501 	and.w	r5, r3, r1
 8004446:	4620      	mov	r0, r4
 8004448:	4629      	mov	r1, r5
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	f04f 0300 	mov.w	r3, #0
 8004452:	014b      	lsls	r3, r1, #5
 8004454:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004458:	0142      	lsls	r2, r0, #5
 800445a:	4610      	mov	r0, r2
 800445c:	4619      	mov	r1, r3
 800445e:	1b00      	subs	r0, r0, r4
 8004460:	eb61 0105 	sbc.w	r1, r1, r5
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	018b      	lsls	r3, r1, #6
 800446e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004472:	0182      	lsls	r2, r0, #6
 8004474:	1a12      	subs	r2, r2, r0
 8004476:	eb63 0301 	sbc.w	r3, r3, r1
 800447a:	f04f 0000 	mov.w	r0, #0
 800447e:	f04f 0100 	mov.w	r1, #0
 8004482:	00d9      	lsls	r1, r3, #3
 8004484:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004488:	00d0      	lsls	r0, r2, #3
 800448a:	4602      	mov	r2, r0
 800448c:	460b      	mov	r3, r1
 800448e:	1912      	adds	r2, r2, r4
 8004490:	eb45 0303 	adc.w	r3, r5, r3
 8004494:	f04f 0000 	mov.w	r0, #0
 8004498:	f04f 0100 	mov.w	r1, #0
 800449c:	0299      	lsls	r1, r3, #10
 800449e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80044a2:	0290      	lsls	r0, r2, #10
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4610      	mov	r0, r2
 80044aa:	4619      	mov	r1, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	461a      	mov	r2, r3
 80044b0:	f04f 0300 	mov.w	r3, #0
 80044b4:	f7fc f8d8 	bl	8000668 <__aeabi_uldivmod>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4613      	mov	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80044c0:	4b0a      	ldr	r3, [pc, #40]	; (80044ec <HAL_RCC_GetSysClockFreq+0x160>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	0c1b      	lsrs	r3, r3, #16
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	3301      	adds	r3, #1
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d8:	60bb      	str	r3, [r7, #8]
      break;
 80044da:	e002      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044dc:	4b04      	ldr	r3, [pc, #16]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x164>)
 80044de:	60bb      	str	r3, [r7, #8]
      break;
 80044e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044e2:	68bb      	ldr	r3, [r7, #8]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bdb0      	pop	{r4, r5, r7, pc}
 80044ec:	40023800 	.word	0x40023800
 80044f0:	00f42400 	.word	0x00f42400
 80044f4:	017d7840 	.word	0x017d7840

080044f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044fc:	4b03      	ldr	r3, [pc, #12]	; (800450c <HAL_RCC_GetHCLKFreq+0x14>)
 80044fe:	681b      	ldr	r3, [r3, #0]
}
 8004500:	4618      	mov	r0, r3
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	20000004 	.word	0x20000004

08004510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004514:	f7ff fff0 	bl	80044f8 <HAL_RCC_GetHCLKFreq>
 8004518:	4602      	mov	r2, r0
 800451a:	4b05      	ldr	r3, [pc, #20]	; (8004530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	0a9b      	lsrs	r3, r3, #10
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	4903      	ldr	r1, [pc, #12]	; (8004534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004526:	5ccb      	ldrb	r3, [r1, r3]
 8004528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800452c:	4618      	mov	r0, r3
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40023800 	.word	0x40023800
 8004534:	0800b140 	.word	0x0800b140

08004538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800453c:	f7ff ffdc 	bl	80044f8 <HAL_RCC_GetHCLKFreq>
 8004540:	4602      	mov	r2, r0
 8004542:	4b05      	ldr	r3, [pc, #20]	; (8004558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	0b5b      	lsrs	r3, r3, #13
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	4903      	ldr	r1, [pc, #12]	; (800455c <HAL_RCC_GetPCLK2Freq+0x24>)
 800454e:	5ccb      	ldrb	r3, [r1, r3]
 8004550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004554:	4618      	mov	r0, r3
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40023800 	.word	0x40023800
 800455c:	0800b140 	.word	0x0800b140

08004560 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004568:	2300      	movs	r3, #0
 800456a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004578:	2300      	movs	r3, #0
 800457a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	d012      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004588:	4b69      	ldr	r3, [pc, #420]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	4a68      	ldr	r2, [pc, #416]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004592:	6093      	str	r3, [r2, #8]
 8004594:	4b66      	ldr	r3, [pc, #408]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459c:	4964      	ldr	r1, [pc, #400]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d101      	bne.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045aa:	2301      	movs	r3, #1
 80045ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d017      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045ba:	4b5d      	ldr	r3, [pc, #372]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c8:	4959      	ldr	r1, [pc, #356]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d8:	d101      	bne.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80045da:	2301      	movs	r3, #1
 80045dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80045e6:	2301      	movs	r3, #1
 80045e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d017      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045f6:	4b4e      	ldr	r3, [pc, #312]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045fc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	494a      	ldr	r1, [pc, #296]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004606:	4313      	orrs	r3, r2
 8004608:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004614:	d101      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004616:	2301      	movs	r3, #1
 8004618:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004622:	2301      	movs	r3, #1
 8004624:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004632:	2301      	movs	r3, #1
 8004634:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	2b00      	cmp	r3, #0
 8004640:	f000 808b 	beq.w	800475a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004644:	4b3a      	ldr	r3, [pc, #232]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004648:	4a39      	ldr	r2, [pc, #228]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800464e:	6413      	str	r3, [r2, #64]	; 0x40
 8004650:	4b37      	ldr	r3, [pc, #220]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004658:	60bb      	str	r3, [r7, #8]
 800465a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800465c:	4b35      	ldr	r3, [pc, #212]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a34      	ldr	r2, [pc, #208]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004668:	f7fd ff2e 	bl	80024c8 <HAL_GetTick>
 800466c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800466e:	e008      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004670:	f7fd ff2a 	bl	80024c8 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b64      	cmp	r3, #100	; 0x64
 800467c:	d901      	bls.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e38f      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004682:	4b2c      	ldr	r3, [pc, #176]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468a:	2b00      	cmp	r3, #0
 800468c:	d0f0      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800468e:	4b28      	ldr	r3, [pc, #160]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004696:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d035      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d02e      	beq.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046ac:	4b20      	ldr	r3, [pc, #128]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046b6:	4b1e      	ldr	r3, [pc, #120]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	4a1d      	ldr	r2, [pc, #116]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046c2:	4b1b      	ldr	r3, [pc, #108]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c6:	4a1a      	ldr	r2, [pc, #104]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046cc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046ce:	4a18      	ldr	r2, [pc, #96]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046d4:	4b16      	ldr	r3, [pc, #88]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d114      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e0:	f7fd fef2 	bl	80024c8 <HAL_GetTick>
 80046e4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e6:	e00a      	b.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046e8:	f7fd feee 	bl	80024c8 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d901      	bls.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e351      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046fe:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0ee      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004716:	d111      	bne.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004724:	4b04      	ldr	r3, [pc, #16]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004726:	400b      	ands	r3, r1
 8004728:	4901      	ldr	r1, [pc, #4]	; (8004730 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800472a:	4313      	orrs	r3, r2
 800472c:	608b      	str	r3, [r1, #8]
 800472e:	e00b      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004730:	40023800 	.word	0x40023800
 8004734:	40007000 	.word	0x40007000
 8004738:	0ffffcff 	.word	0x0ffffcff
 800473c:	4bb3      	ldr	r3, [pc, #716]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	4ab2      	ldr	r2, [pc, #712]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004742:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004746:	6093      	str	r3, [r2, #8]
 8004748:	4bb0      	ldr	r3, [pc, #704]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800474a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004754:	49ad      	ldr	r1, [pc, #692]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004756:	4313      	orrs	r3, r2
 8004758:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0310 	and.w	r3, r3, #16
 8004762:	2b00      	cmp	r3, #0
 8004764:	d010      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004766:	4ba9      	ldr	r3, [pc, #676]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800476c:	4aa7      	ldr	r2, [pc, #668]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800476e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004772:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004776:	4ba5      	ldr	r3, [pc, #660]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004778:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	49a2      	ldr	r1, [pc, #648]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00a      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004794:	4b9d      	ldr	r3, [pc, #628]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047a2:	499a      	ldr	r1, [pc, #616]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047b6:	4b95      	ldr	r3, [pc, #596]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047c4:	4991      	ldr	r1, [pc, #580]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00a      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047d8:	4b8c      	ldr	r3, [pc, #560]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047e6:	4989      	ldr	r1, [pc, #548]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d00a      	beq.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047fa:	4b84      	ldr	r3, [pc, #528]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004800:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	4980      	ldr	r1, [pc, #512]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800481c:	4b7b      	ldr	r3, [pc, #492]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800481e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004822:	f023 0203 	bic.w	r2, r3, #3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	4978      	ldr	r1, [pc, #480]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800482c:	4313      	orrs	r3, r2
 800482e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800483e:	4b73      	ldr	r3, [pc, #460]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004840:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004844:	f023 020c 	bic.w	r2, r3, #12
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800484c:	496f      	ldr	r1, [pc, #444]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800484e:	4313      	orrs	r3, r2
 8004850:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004860:	4b6a      	ldr	r3, [pc, #424]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004862:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004866:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486e:	4967      	ldr	r1, [pc, #412]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004870:	4313      	orrs	r3, r2
 8004872:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00a      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004882:	4b62      	ldr	r3, [pc, #392]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004888:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004890:	495e      	ldr	r1, [pc, #376]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004892:	4313      	orrs	r3, r2
 8004894:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048a4:	4b59      	ldr	r3, [pc, #356]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	4956      	ldr	r1, [pc, #344]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048c6:	4b51      	ldr	r3, [pc, #324]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d4:	494d      	ldr	r1, [pc, #308]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00a      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80048e8:	4b48      	ldr	r3, [pc, #288]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f6:	4945      	ldr	r1, [pc, #276]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800490a:	4b40      	ldr	r3, [pc, #256]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800490c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004910:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004918:	493c      	ldr	r1, [pc, #240]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800492c:	4b37      	ldr	r3, [pc, #220]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800493a:	4934      	ldr	r1, [pc, #208]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d011      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800494e:	4b2f      	ldr	r3, [pc, #188]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004954:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800495c:	492b      	ldr	r1, [pc, #172]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004968:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800496c:	d101      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800496e:	2301      	movs	r3, #1
 8004970:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800497e:	2301      	movs	r3, #1
 8004980:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00a      	beq.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800498e:	4b1f      	ldr	r3, [pc, #124]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004994:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499c:	491b      	ldr	r1, [pc, #108]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00b      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049b0:	4b16      	ldr	r3, [pc, #88]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049c0:	4912      	ldr	r1, [pc, #72]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00b      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80049d4:	4b0d      	ldr	r3, [pc, #52]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e4:	4909      	ldr	r1, [pc, #36]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00f      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80049f8:	4b04      	ldr	r3, [pc, #16]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a08:	e002      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004a0a:	bf00      	nop
 8004a0c:	40023800 	.word	0x40023800
 8004a10:	4986      	ldr	r1, [pc, #536]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00b      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a24:	4b81      	ldr	r3, [pc, #516]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a2a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a34:	497d      	ldr	r1, [pc, #500]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a3c:	69fb      	ldr	r3, [r7, #28]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d006      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 80d6 	beq.w	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a50:	4b76      	ldr	r3, [pc, #472]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a75      	ldr	r2, [pc, #468]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a56:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a5c:	f7fd fd34 	bl	80024c8 <HAL_GetTick>
 8004a60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a64:	f7fd fd30 	bl	80024c8 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b64      	cmp	r3, #100	; 0x64
 8004a70:	d901      	bls.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e195      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a76:	4b6d      	ldr	r3, [pc, #436]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1f0      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d021      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d11d      	bne.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a96:	4b65      	ldr	r3, [pc, #404]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a9c:	0c1b      	lsrs	r3, r3, #16
 8004a9e:	f003 0303 	and.w	r3, r3, #3
 8004aa2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004aa4:	4b61      	ldr	r3, [pc, #388]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aaa:	0e1b      	lsrs	r3, r3, #24
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	019a      	lsls	r2, r3, #6
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	041b      	lsls	r3, r3, #16
 8004abc:	431a      	orrs	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	061b      	lsls	r3, r3, #24
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	071b      	lsls	r3, r3, #28
 8004aca:	4958      	ldr	r1, [pc, #352]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d004      	beq.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ae6:	d00a      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d02e      	beq.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004afc:	d129      	bne.n	8004b52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004afe:	4b4b      	ldr	r3, [pc, #300]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b04:	0c1b      	lsrs	r3, r3, #16
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b0c:	4b47      	ldr	r3, [pc, #284]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b12:	0f1b      	lsrs	r3, r3, #28
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	019a      	lsls	r2, r3, #6
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	041b      	lsls	r3, r3, #16
 8004b24:	431a      	orrs	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	061b      	lsls	r3, r3, #24
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	071b      	lsls	r3, r3, #28
 8004b32:	493e      	ldr	r1, [pc, #248]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b3a:	4b3c      	ldr	r3, [pc, #240]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b40:	f023 021f 	bic.w	r2, r3, #31
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	4938      	ldr	r1, [pc, #224]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d01d      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b5e:	4b33      	ldr	r3, [pc, #204]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b64:	0e1b      	lsrs	r3, r3, #24
 8004b66:	f003 030f 	and.w	r3, r3, #15
 8004b6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b6c:	4b2f      	ldr	r3, [pc, #188]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b72:	0f1b      	lsrs	r3, r3, #28
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	019a      	lsls	r2, r3, #6
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	041b      	lsls	r3, r3, #16
 8004b86:	431a      	orrs	r2, r3
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	061b      	lsls	r3, r3, #24
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	071b      	lsls	r3, r3, #28
 8004b92:	4926      	ldr	r1, [pc, #152]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d011      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	019a      	lsls	r2, r3, #6
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	691b      	ldr	r3, [r3, #16]
 8004bb0:	041b      	lsls	r3, r3, #16
 8004bb2:	431a      	orrs	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	061b      	lsls	r3, r3, #24
 8004bba:	431a      	orrs	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	071b      	lsls	r3, r3, #28
 8004bc2:	491a      	ldr	r1, [pc, #104]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bca:	4b18      	ldr	r3, [pc, #96]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a17      	ldr	r2, [pc, #92]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd6:	f7fd fc77 	bl	80024c8 <HAL_GetTick>
 8004bda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bde:	f7fd fc73 	bl	80024c8 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b64      	cmp	r3, #100	; 0x64
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e0d8      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bf0:	4b0e      	ldr	r3, [pc, #56]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0f0      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	f040 80ce 	bne.w	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c04:	4b09      	ldr	r3, [pc, #36]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a08      	ldr	r2, [pc, #32]	; (8004c2c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c10:	f7fd fc5a 	bl	80024c8 <HAL_GetTick>
 8004c14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c16:	e00b      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c18:	f7fd fc56 	bl	80024c8 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b64      	cmp	r3, #100	; 0x64
 8004c24:	d904      	bls.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e0bb      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004c2a:	bf00      	nop
 8004c2c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c30:	4b5e      	ldr	r3, [pc, #376]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c3c:	d0ec      	beq.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d009      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d02e      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d12a      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c66:	4b51      	ldr	r3, [pc, #324]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6c:	0c1b      	lsrs	r3, r3, #16
 8004c6e:	f003 0303 	and.w	r3, r3, #3
 8004c72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c74:	4b4d      	ldr	r3, [pc, #308]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7a:	0f1b      	lsrs	r3, r3, #28
 8004c7c:	f003 0307 	and.w	r3, r3, #7
 8004c80:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	019a      	lsls	r2, r3, #6
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	041b      	lsls	r3, r3, #16
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	061b      	lsls	r3, r3, #24
 8004c94:	431a      	orrs	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	071b      	lsls	r3, r3, #28
 8004c9a:	4944      	ldr	r1, [pc, #272]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ca2:	4b42      	ldr	r3, [pc, #264]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ca8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	021b      	lsls	r3, r3, #8
 8004cb4:	493d      	ldr	r1, [pc, #244]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d022      	beq.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ccc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cd0:	d11d      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cd2:	4b36      	ldr	r3, [pc, #216]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd8:	0e1b      	lsrs	r3, r3, #24
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ce0:	4b32      	ldr	r3, [pc, #200]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce6:	0f1b      	lsrs	r3, r3, #28
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	019a      	lsls	r2, r3, #6
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	041b      	lsls	r3, r3, #16
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	061b      	lsls	r3, r3, #24
 8004d00:	431a      	orrs	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	071b      	lsls	r3, r3, #28
 8004d06:	4929      	ldr	r1, [pc, #164]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0308 	and.w	r3, r3, #8
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d028      	beq.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d1a:	4b24      	ldr	r3, [pc, #144]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d20:	0e1b      	lsrs	r3, r3, #24
 8004d22:	f003 030f 	and.w	r3, r3, #15
 8004d26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d28:	4b20      	ldr	r3, [pc, #128]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2e:	0c1b      	lsrs	r3, r3, #16
 8004d30:	f003 0303 	and.w	r3, r3, #3
 8004d34:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	019a      	lsls	r2, r3, #6
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	041b      	lsls	r3, r3, #16
 8004d40:	431a      	orrs	r2, r3
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	061b      	lsls	r3, r3, #24
 8004d46:	431a      	orrs	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	69db      	ldr	r3, [r3, #28]
 8004d4c:	071b      	lsls	r3, r3, #28
 8004d4e:	4917      	ldr	r1, [pc, #92]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d56:	4b15      	ldr	r3, [pc, #84]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d64:	4911      	ldr	r1, [pc, #68]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d66:	4313      	orrs	r3, r2
 8004d68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d6c:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a0e      	ldr	r2, [pc, #56]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d78:	f7fd fba6 	bl	80024c8 <HAL_GetTick>
 8004d7c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d7e:	e008      	b.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d80:	f7fd fba2 	bl	80024c8 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	2b64      	cmp	r3, #100	; 0x64
 8004d8c:	d901      	bls.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	e007      	b.n	8004da2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d92:	4b06      	ldr	r3, [pc, #24]	; (8004dac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d9e:	d1ef      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3720      	adds	r7, #32
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40023800 	.word	0x40023800

08004db0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e09d      	b.n	8004efe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d108      	bne.n	8004ddc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dd2:	d009      	beq.n	8004de8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	61da      	str	r2, [r3, #28]
 8004dda:	e005      	b.n	8004de8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d106      	bne.n	8004e08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f7fd f89e 	bl	8001f44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e28:	d902      	bls.n	8004e30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	e002      	b.n	8004e36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004e30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004e3e:	d007      	beq.n	8004e50 <HAL_SPI_Init+0xa0>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e48:	d002      	beq.n	8004e50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004e60:	431a      	orrs	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	f003 0302 	and.w	r3, r3, #2
 8004e6a:	431a      	orrs	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e88:	431a      	orrs	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e92:	ea42 0103 	orr.w	r1, r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	0c1b      	lsrs	r3, r3, #16
 8004eac:	f003 0204 	and.w	r2, r3, #4
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb4:	f003 0310 	and.w	r3, r3, #16
 8004eb8:	431a      	orrs	r2, r3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ebe:	f003 0308 	and.w	r3, r3, #8
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004ecc:	ea42 0103 	orr.w	r1, r2, r3
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	69da      	ldr	r2, [r3, #28]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004eec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_SPI_TransmitReceive_IT+0x20>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e091      	b.n	800504c <HAL_SPI_TransmitReceive_IT+0x144>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f36:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004f3e:	7dbb      	ldrb	r3, [r7, #22]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d00d      	beq.n	8004f60 <HAL_SPI_TransmitReceive_IT+0x58>
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f4a:	d106      	bne.n	8004f5a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d102      	bne.n	8004f5a <HAL_SPI_TransmitReceive_IT+0x52>
 8004f54:	7dbb      	ldrb	r3, [r7, #22]
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d002      	beq.n	8004f60 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f5e:	e070      	b.n	8005042 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d005      	beq.n	8004f72 <HAL_SPI_TransmitReceive_IT+0x6a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <HAL_SPI_TransmitReceive_IT+0x6a>
 8004f6c:	887b      	ldrh	r3, [r7, #2]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d102      	bne.n	8004f78 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8004f72:	2301      	movs	r3, #1
 8004f74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f76:	e064      	b.n	8005042 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b04      	cmp	r3, #4
 8004f82:	d003      	beq.n	8004f8c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2205      	movs	r2, #5
 8004f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	68ba      	ldr	r2, [r7, #8]
 8004f96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	887a      	ldrh	r2, [r7, #2]
 8004f9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	887a      	ldrh	r2, [r7, #2]
 8004fa2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	887a      	ldrh	r2, [r7, #2]
 8004fae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	887a      	ldrh	r2, [r7, #2]
 8004fb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fc2:	d906      	bls.n	8004fd2 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4a24      	ldr	r2, [pc, #144]	; (8005058 <HAL_SPI_TransmitReceive_IT+0x150>)
 8004fc8:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	4a23      	ldr	r2, [pc, #140]	; (800505c <HAL_SPI_TransmitReceive_IT+0x154>)
 8004fce:	651a      	str	r2, [r3, #80]	; 0x50
 8004fd0:	e005      	b.n	8004fde <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	4a22      	ldr	r2, [pc, #136]	; (8005060 <HAL_SPI_TransmitReceive_IT+0x158>)
 8004fd6:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	4a22      	ldr	r2, [pc, #136]	; (8005064 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8004fdc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fe6:	d802      	bhi.n	8004fee <HAL_SPI_TransmitReceive_IT+0xe6>
 8004fe8:	887b      	ldrh	r3, [r7, #2]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d908      	bls.n	8005000 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ffc:	605a      	str	r2, [r3, #4]
 8004ffe:	e007      	b.n	8005010 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685a      	ldr	r2, [r3, #4]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800500e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800501e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502a:	2b40      	cmp	r3, #64	; 0x40
 800502c:	d008      	beq.n	8005040 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	e000      	b.n	8005042 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8005040:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800504a:	7dfb      	ldrb	r3, [r7, #23]
}
 800504c:	4618      	mov	r0, r3
 800504e:	371c      	adds	r7, #28
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr
 8005058:	0800540b 	.word	0x0800540b
 800505c:	08005471 	.word	0x08005471
 8005060:	080052bb 	.word	0x080052bb
 8005064:	08005379 	.word	0x08005379

08005068 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	099b      	lsrs	r3, r3, #6
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10f      	bne.n	80050ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	099b      	lsrs	r3, r3, #6
 800509a:	f003 0301 	and.w	r3, r3, #1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d004      	beq.n	80050ac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	4798      	blx	r3
    return;
 80050aa:	e0d7      	b.n	800525c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	085b      	lsrs	r3, r3, #1
 80050b0:	f003 0301 	and.w	r3, r3, #1
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00a      	beq.n	80050ce <HAL_SPI_IRQHandler+0x66>
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	09db      	lsrs	r3, r3, #7
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d004      	beq.n	80050ce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	4798      	blx	r3
    return;
 80050cc:	e0c6      	b.n	800525c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	095b      	lsrs	r3, r3, #5
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10c      	bne.n	80050f4 <HAL_SPI_IRQHandler+0x8c>
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	099b      	lsrs	r3, r3, #6
 80050de:	f003 0301 	and.w	r3, r3, #1
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d106      	bne.n	80050f4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	0a1b      	lsrs	r3, r3, #8
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 80b4 	beq.w	800525c <HAL_SPI_IRQHandler+0x1f4>
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	095b      	lsrs	r3, r3, #5
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	f000 80ad 	beq.w	800525c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	099b      	lsrs	r3, r3, #6
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d023      	beq.n	8005156 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b03      	cmp	r3, #3
 8005118:	d011      	beq.n	800513e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800511e:	f043 0204 	orr.w	r2, r3, #4
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005126:	2300      	movs	r3, #0
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	e00b      	b.n	8005156 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800513e:	2300      	movs	r3, #0
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	613b      	str	r3, [r7, #16]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	613b      	str	r3, [r7, #16]
 8005152:	693b      	ldr	r3, [r7, #16]
        return;
 8005154:	e082      	b.n	800525c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	095b      	lsrs	r3, r3, #5
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	2b00      	cmp	r3, #0
 8005160:	d014      	beq.n	800518c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005166:	f043 0201 	orr.w	r2, r3, #1
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800516e:	2300      	movs	r3, #0
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	60fb      	str	r3, [r7, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	0a1b      	lsrs	r3, r3, #8
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00c      	beq.n	80051b2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800519c:	f043 0208 	orr.w	r2, r3, #8
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80051a4:	2300      	movs	r3, #0
 80051a6:	60bb      	str	r3, [r7, #8]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	60bb      	str	r3, [r7, #8]
 80051b0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d04f      	beq.n	800525a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685a      	ldr	r2, [r3, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80051c8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d104      	bne.n	80051e6 <HAL_SPI_IRQHandler+0x17e>
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d034      	beq.n	8005250 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f022 0203 	bic.w	r2, r2, #3
 80051f4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d011      	beq.n	8005222 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005202:	4a18      	ldr	r2, [pc, #96]	; (8005264 <HAL_SPI_IRQHandler+0x1fc>)
 8005204:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520a:	4618      	mov	r0, r3
 800520c:	f7fd fb4c 	bl	80028a8 <HAL_DMA_Abort_IT>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d005      	beq.n	8005222 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800521a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005226:	2b00      	cmp	r3, #0
 8005228:	d016      	beq.n	8005258 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522e:	4a0d      	ldr	r2, [pc, #52]	; (8005264 <HAL_SPI_IRQHandler+0x1fc>)
 8005230:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005236:	4618      	mov	r0, r3
 8005238:	f7fd fb36 	bl	80028a8 <HAL_DMA_Abort_IT>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005246:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800524e:	e003      	b.n	8005258 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f813 	bl	800527c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005256:	e000      	b.n	800525a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005258:	bf00      	nop
    return;
 800525a:	bf00      	nop
  }
}
 800525c:	3720      	adds	r7, #32
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	08005291 	.word	0x08005291

08005268 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800529c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f7ff ffe5 	bl	800527c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80052b2:	bf00      	nop
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b082      	sub	sp, #8
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d923      	bls.n	8005316 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68da      	ldr	r2, [r3, #12]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d8:	b292      	uxth	r2, r2
 80052da:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e0:	1c9a      	adds	r2, r3, #2
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	3b02      	subs	r3, #2
 80052f0:	b29a      	uxth	r2, r3
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b01      	cmp	r3, #1
 8005302:	d11f      	bne.n	8005344 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005312:	605a      	str	r2, [r3, #4]
 8005314:	e016      	b.n	8005344 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f103 020c 	add.w	r2, r3, #12
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005322:	7812      	ldrb	r2, [r2, #0]
 8005324:	b2d2      	uxtb	r2, r2
 8005326:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005338:	b29b      	uxth	r3, r3
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800534a:	b29b      	uxth	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d10f      	bne.n	8005370 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800535e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005364:	b29b      	uxth	r3, r3
 8005366:	2b00      	cmp	r3, #0
 8005368:	d102      	bne.n	8005370 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fa38 	bl	80057e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005370:	bf00      	nop
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005384:	b29b      	uxth	r3, r3
 8005386:	2b01      	cmp	r3, #1
 8005388:	d912      	bls.n	80053b0 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	881a      	ldrh	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	1c9a      	adds	r2, r3, #2
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b02      	subs	r3, #2
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053ae:	e012      	b.n	80053d6 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	7812      	ldrb	r2, [r2, #0]
 80053bc:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053da:	b29b      	uxth	r3, r3
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d110      	bne.n	8005402 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053ee:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d102      	bne.n	8005402 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 f9ef 	bl	80057e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005402:	bf00      	nop
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	b292      	uxth	r2, r2
 800541e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	1c9a      	adds	r2, r3, #2
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005442:	b29b      	uxth	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10f      	bne.n	8005468 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685a      	ldr	r2, [r3, #4]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005456:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800545c:	b29b      	uxth	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d102      	bne.n	8005468 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f000 f9bc 	bl	80057e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005468:	bf00      	nop
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547c:	881a      	ldrh	r2, [r3, #0]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005488:	1c9a      	adds	r2, r3, #2
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005492:	b29b      	uxth	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b29a      	uxth	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a0:	b29b      	uxth	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d110      	bne.n	80054c8 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054b4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054bc:	b29b      	uxth	r3, r3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d102      	bne.n	80054c8 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f98c 	bl	80057e0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80054c8:	bf00      	nop
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b088      	sub	sp, #32
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60f8      	str	r0, [r7, #12]
 80054d8:	60b9      	str	r1, [r7, #8]
 80054da:	603b      	str	r3, [r7, #0]
 80054dc:	4613      	mov	r3, r2
 80054de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80054e0:	f7fc fff2 	bl	80024c8 <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e8:	1a9b      	subs	r3, r3, r2
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	4413      	add	r3, r2
 80054ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054f0:	f7fc ffea 	bl	80024c8 <HAL_GetTick>
 80054f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054f6:	4b39      	ldr	r3, [pc, #228]	; (80055dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	015b      	lsls	r3, r3, #5
 80054fc:	0d1b      	lsrs	r3, r3, #20
 80054fe:	69fa      	ldr	r2, [r7, #28]
 8005500:	fb02 f303 	mul.w	r3, r2, r3
 8005504:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005506:	e054      	b.n	80055b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550e:	d050      	beq.n	80055b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005510:	f7fc ffda 	bl	80024c8 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	69fa      	ldr	r2, [r7, #28]
 800551c:	429a      	cmp	r2, r3
 800551e:	d902      	bls.n	8005526 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d13d      	bne.n	80055a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005534:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800553e:	d111      	bne.n	8005564 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005548:	d004      	beq.n	8005554 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005552:	d107      	bne.n	8005564 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005562:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005568:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800556c:	d10f      	bne.n	800558e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800558c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2200      	movs	r2, #0
 800559a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e017      	b.n	80055d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	3b01      	subs	r3, #1
 80055b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	689a      	ldr	r2, [r3, #8]
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	4013      	ands	r3, r2
 80055bc:	68ba      	ldr	r2, [r7, #8]
 80055be:	429a      	cmp	r2, r3
 80055c0:	bf0c      	ite	eq
 80055c2:	2301      	moveq	r3, #1
 80055c4:	2300      	movne	r3, #0
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	79fb      	ldrb	r3, [r7, #7]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d19b      	bne.n	8005508 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3720      	adds	r7, #32
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	20000004 	.word	0x20000004

080055e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08a      	sub	sp, #40	; 0x28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80055ee:	2300      	movs	r3, #0
 80055f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80055f2:	f7fc ff69 	bl	80024c8 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	1a9b      	subs	r3, r3, r2
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	4413      	add	r3, r2
 8005600:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005602:	f7fc ff61 	bl	80024c8 <HAL_GetTick>
 8005606:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	330c      	adds	r3, #12
 800560e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005610:	4b3d      	ldr	r3, [pc, #244]	; (8005708 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	4613      	mov	r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	4413      	add	r3, r2
 800561a:	00da      	lsls	r2, r3, #3
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	0d1b      	lsrs	r3, r3, #20
 8005620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005622:	fb02 f303 	mul.w	r3, r2, r3
 8005626:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005628:	e060      	b.n	80056ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005630:	d107      	bne.n	8005642 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d104      	bne.n	8005642 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005638:	69fb      	ldr	r3, [r7, #28]
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	b2db      	uxtb	r3, r3
 800563e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005640:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005648:	d050      	beq.n	80056ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800564a:	f7fc ff3d 	bl	80024c8 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005656:	429a      	cmp	r2, r3
 8005658:	d902      	bls.n	8005660 <SPI_WaitFifoStateUntilTimeout+0x80>
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	2b00      	cmp	r3, #0
 800565e:	d13d      	bne.n	80056dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800566e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005678:	d111      	bne.n	800569e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005682:	d004      	beq.n	800568e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800568c:	d107      	bne.n	800569e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800569c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056a6:	d10f      	bne.n	80056c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e010      	b.n	80056fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056dc:	69bb      	ldr	r3, [r7, #24]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	4013      	ands	r3, r2
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d196      	bne.n	800562a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3728      	adds	r7, #40	; 0x28
 8005702:	46bd      	mov	sp, r7
 8005704:	bd80      	pop	{r7, pc}
 8005706:	bf00      	nop
 8005708:	20000004 	.word	0x20000004

0800570c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b088      	sub	sp, #32
 8005710:	af02      	add	r7, sp, #8
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	9300      	str	r3, [sp, #0]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	2200      	movs	r2, #0
 8005720:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f7ff ff5b 	bl	80055e0 <SPI_WaitFifoStateUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d007      	beq.n	8005740 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005734:	f043 0220 	orr.w	r2, r3, #32
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e046      	b.n	80057ce <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005740:	4b25      	ldr	r3, [pc, #148]	; (80057d8 <SPI_EndRxTxTransaction+0xcc>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a25      	ldr	r2, [pc, #148]	; (80057dc <SPI_EndRxTxTransaction+0xd0>)
 8005746:	fba2 2303 	umull	r2, r3, r2, r3
 800574a:	0d5b      	lsrs	r3, r3, #21
 800574c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005750:	fb02 f303 	mul.w	r3, r2, r3
 8005754:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800575e:	d112      	bne.n	8005786 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2200      	movs	r2, #0
 8005768:	2180      	movs	r1, #128	; 0x80
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f7ff feb0 	bl	80054d0 <SPI_WaitFlagStateUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d016      	beq.n	80057a4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800577a:	f043 0220 	orr.w	r2, r3, #32
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e023      	b.n	80057ce <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	3b01      	subs	r3, #1
 8005790:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800579c:	2b80      	cmp	r3, #128	; 0x80
 800579e:	d0f2      	beq.n	8005786 <SPI_EndRxTxTransaction+0x7a>
 80057a0:	e000      	b.n	80057a4 <SPI_EndRxTxTransaction+0x98>
        break;
 80057a2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f7ff ff15 	bl	80055e0 <SPI_WaitFifoStateUntilTimeout>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d007      	beq.n	80057cc <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c0:	f043 0220 	orr.w	r2, r3, #32
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e000      	b.n	80057ce <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20000004 	.word	0x20000004
 80057dc:	165e9f81 	.word	0x165e9f81

080057e0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057e8:	f7fc fe6e 	bl	80024c8 <HAL_GetTick>
 80057ec:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f022 0220 	bic.w	r2, r2, #32
 80057fc:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	2164      	movs	r1, #100	; 0x64
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f7ff ff82 	bl	800570c <SPI_EndRxTxTransaction>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d005      	beq.n	800581a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005812:	f043 0220 	orr.w	r2, r3, #32
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800581e:	2b00      	cmp	r3, #0
 8005820:	d115      	bne.n	800584e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b04      	cmp	r3, #4
 800582c:	d107      	bne.n	800583e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005836:	6878      	ldr	r0, [r7, #4]
 8005838:	f7ff fd16 	bl	8005268 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800583c:	e00e      	b.n	800585c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2201      	movs	r2, #1
 8005842:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7fc f966 	bl	8001b18 <HAL_SPI_TxRxCpltCallback>
}
 800584c:	e006      	b.n	800585c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2201      	movs	r2, #1
 8005852:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff fd10 	bl	800527c <HAL_SPI_ErrorCallback>
}
 800585c:	bf00      	nop
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b082      	sub	sp, #8
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d101      	bne.n	8005876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005872:	2301      	movs	r3, #1
 8005874:	e040      	b.n	80058f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fc fc0e 	bl	80020a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2224      	movs	r2, #36	; 0x24
 8005890:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f022 0201 	bic.w	r2, r2, #1
 80058a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f990 	bl	8005bc8 <UART_SetConfig>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d101      	bne.n	80058b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e022      	b.n	80058f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fbe6 	bl	800608c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689a      	ldr	r2, [r3, #8]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f042 0201 	orr.w	r2, r2, #1
 80058ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fc6d 	bl	80061d0 <UART_CheckIdleState>
 80058f6:	4603      	mov	r3, r0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	; 0x28
 8005904:	af02      	add	r7, sp, #8
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	4613      	mov	r3, r2
 800590e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005914:	2b20      	cmp	r3, #32
 8005916:	f040 8081 	bne.w	8005a1c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_UART_Transmit+0x26>
 8005920:	88fb      	ldrh	r3, [r7, #6]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e079      	b.n	8005a1e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_UART_Transmit+0x38>
 8005934:	2302      	movs	r3, #2
 8005936:	e072      	b.n	8005a1e <HAL_UART_Transmit+0x11e>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2221      	movs	r2, #33	; 0x21
 800594c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800594e:	f7fc fdbb 	bl	80024c8 <HAL_GetTick>
 8005952:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	88fa      	ldrh	r2, [r7, #6]
 8005958:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	88fa      	ldrh	r2, [r7, #6]
 8005960:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596c:	d108      	bne.n	8005980 <HAL_UART_Transmit+0x80>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d104      	bne.n	8005980 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005976:	2300      	movs	r3, #0
 8005978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	61bb      	str	r3, [r7, #24]
 800597e:	e003      	b.n	8005988 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005984:	2300      	movs	r3, #0
 8005986:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005990:	e02c      	b.n	80059ec <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	9300      	str	r3, [sp, #0]
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	2200      	movs	r2, #0
 800599a:	2180      	movs	r1, #128	; 0x80
 800599c:	68f8      	ldr	r0, [r7, #12]
 800599e:	f000 fc60 	bl	8006262 <UART_WaitOnFlagUntilTimeout>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e038      	b.n	8005a1e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d10b      	bne.n	80059ca <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	3302      	adds	r3, #2
 80059c6:	61bb      	str	r3, [r7, #24]
 80059c8:	e007      	b.n	80059da <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	781a      	ldrb	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	3301      	adds	r3, #1
 80059d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	3b01      	subs	r3, #1
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1cc      	bne.n	8005992 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	9300      	str	r3, [sp, #0]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	2200      	movs	r2, #0
 8005a00:	2140      	movs	r1, #64	; 0x40
 8005a02:	68f8      	ldr	r0, [r7, #12]
 8005a04:	f000 fc2d 	bl	8006262 <UART_WaitOnFlagUntilTimeout>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d001      	beq.n	8005a12 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e005      	b.n	8005a1e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2220      	movs	r2, #32
 8005a16:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	e000      	b.n	8005a1e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005a1c:	2302      	movs	r3, #2
  }
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3720      	adds	r7, #32
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b08a      	sub	sp, #40	; 0x28
 8005a2a:	af02      	add	r7, sp, #8
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	603b      	str	r3, [r7, #0]
 8005a32:	4613      	mov	r3, r2
 8005a34:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	f040 80be 	bne.w	8005bbc <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d002      	beq.n	8005a4c <HAL_UART_Receive+0x26>
 8005a46:	88fb      	ldrh	r3, [r7, #6]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e0b6      	b.n	8005bbe <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d101      	bne.n	8005a5e <HAL_UART_Receive+0x38>
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	e0af      	b.n	8005bbe <HAL_UART_Receive+0x198>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2222      	movs	r2, #34	; 0x22
 8005a72:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a7a:	f7fc fd25 	bl	80024c8 <HAL_GetTick>
 8005a7e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	88fa      	ldrh	r2, [r7, #6]
 8005a84:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	88fa      	ldrh	r2, [r7, #6]
 8005a8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a98:	d10e      	bne.n	8005ab8 <HAL_UART_Receive+0x92>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d105      	bne.n	8005aae <HAL_UART_Receive+0x88>
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005aa8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005aac:	e02d      	b.n	8005b0a <HAL_UART_Receive+0xe4>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	22ff      	movs	r2, #255	; 0xff
 8005ab2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ab6:	e028      	b.n	8005b0a <HAL_UART_Receive+0xe4>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10d      	bne.n	8005adc <HAL_UART_Receive+0xb6>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d104      	bne.n	8005ad2 <HAL_UART_Receive+0xac>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	22ff      	movs	r2, #255	; 0xff
 8005acc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ad0:	e01b      	b.n	8005b0a <HAL_UART_Receive+0xe4>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	227f      	movs	r2, #127	; 0x7f
 8005ad6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ada:	e016      	b.n	8005b0a <HAL_UART_Receive+0xe4>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ae4:	d10d      	bne.n	8005b02 <HAL_UART_Receive+0xdc>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d104      	bne.n	8005af8 <HAL_UART_Receive+0xd2>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	227f      	movs	r2, #127	; 0x7f
 8005af2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005af6:	e008      	b.n	8005b0a <HAL_UART_Receive+0xe4>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	223f      	movs	r2, #63	; 0x3f
 8005afc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005b00:	e003      	b.n	8005b0a <HAL_UART_Receive+0xe4>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b10:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b1a:	d108      	bne.n	8005b2e <HAL_UART_Receive+0x108>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	691b      	ldr	r3, [r3, #16]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d104      	bne.n	8005b2e <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005b24:	2300      	movs	r3, #0
 8005b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	61bb      	str	r3, [r7, #24]
 8005b2c:	e003      	b.n	8005b36 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b32:	2300      	movs	r3, #0
 8005b34:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005b3e:	e032      	b.n	8005ba6 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	2200      	movs	r2, #0
 8005b48:	2120      	movs	r1, #32
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 fb89 	bl	8006262 <UART_WaitOnFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e031      	b.n	8005bbe <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10c      	bne.n	8005b7a <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	b29a      	uxth	r2, r3
 8005b68:	8a7b      	ldrh	r3, [r7, #18]
 8005b6a:	4013      	ands	r3, r2
 8005b6c:	b29a      	uxth	r2, r3
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	3302      	adds	r3, #2
 8005b76:	61bb      	str	r3, [r7, #24]
 8005b78:	e00c      	b.n	8005b94 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	8a7b      	ldrh	r3, [r7, #18]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	4013      	ands	r3, r2
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	3301      	adds	r3, #1
 8005b92:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	3b01      	subs	r3, #1
 8005b9e:	b29a      	uxth	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1c6      	bne.n	8005b40 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	e000      	b.n	8005bbe <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8005bbc:	2302      	movs	r3, #2
  }
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3720      	adds	r7, #32
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
	...

08005bc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b088      	sub	sp, #32
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	431a      	orrs	r2, r3
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	4ba7      	ldr	r3, [pc, #668]	; (8005e90 <UART_SetConfig+0x2c8>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6812      	ldr	r2, [r2, #0]
 8005bfa:	6979      	ldr	r1, [r7, #20]
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a95      	ldr	r2, [pc, #596]	; (8005e94 <UART_SetConfig+0x2cc>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d120      	bne.n	8005c86 <UART_SetConfig+0xbe>
 8005c44:	4b94      	ldr	r3, [pc, #592]	; (8005e98 <UART_SetConfig+0x2d0>)
 8005c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c4a:	f003 0303 	and.w	r3, r3, #3
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d816      	bhi.n	8005c80 <UART_SetConfig+0xb8>
 8005c52:	a201      	add	r2, pc, #4	; (adr r2, 8005c58 <UART_SetConfig+0x90>)
 8005c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c58:	08005c69 	.word	0x08005c69
 8005c5c:	08005c75 	.word	0x08005c75
 8005c60:	08005c6f 	.word	0x08005c6f
 8005c64:	08005c7b 	.word	0x08005c7b
 8005c68:	2301      	movs	r3, #1
 8005c6a:	77fb      	strb	r3, [r7, #31]
 8005c6c:	e14f      	b.n	8005f0e <UART_SetConfig+0x346>
 8005c6e:	2302      	movs	r3, #2
 8005c70:	77fb      	strb	r3, [r7, #31]
 8005c72:	e14c      	b.n	8005f0e <UART_SetConfig+0x346>
 8005c74:	2304      	movs	r3, #4
 8005c76:	77fb      	strb	r3, [r7, #31]
 8005c78:	e149      	b.n	8005f0e <UART_SetConfig+0x346>
 8005c7a:	2308      	movs	r3, #8
 8005c7c:	77fb      	strb	r3, [r7, #31]
 8005c7e:	e146      	b.n	8005f0e <UART_SetConfig+0x346>
 8005c80:	2310      	movs	r3, #16
 8005c82:	77fb      	strb	r3, [r7, #31]
 8005c84:	e143      	b.n	8005f0e <UART_SetConfig+0x346>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a84      	ldr	r2, [pc, #528]	; (8005e9c <UART_SetConfig+0x2d4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d132      	bne.n	8005cf6 <UART_SetConfig+0x12e>
 8005c90:	4b81      	ldr	r3, [pc, #516]	; (8005e98 <UART_SetConfig+0x2d0>)
 8005c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c96:	f003 030c 	and.w	r3, r3, #12
 8005c9a:	2b0c      	cmp	r3, #12
 8005c9c:	d828      	bhi.n	8005cf0 <UART_SetConfig+0x128>
 8005c9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ca4 <UART_SetConfig+0xdc>)
 8005ca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca4:	08005cd9 	.word	0x08005cd9
 8005ca8:	08005cf1 	.word	0x08005cf1
 8005cac:	08005cf1 	.word	0x08005cf1
 8005cb0:	08005cf1 	.word	0x08005cf1
 8005cb4:	08005ce5 	.word	0x08005ce5
 8005cb8:	08005cf1 	.word	0x08005cf1
 8005cbc:	08005cf1 	.word	0x08005cf1
 8005cc0:	08005cf1 	.word	0x08005cf1
 8005cc4:	08005cdf 	.word	0x08005cdf
 8005cc8:	08005cf1 	.word	0x08005cf1
 8005ccc:	08005cf1 	.word	0x08005cf1
 8005cd0:	08005cf1 	.word	0x08005cf1
 8005cd4:	08005ceb 	.word	0x08005ceb
 8005cd8:	2300      	movs	r3, #0
 8005cda:	77fb      	strb	r3, [r7, #31]
 8005cdc:	e117      	b.n	8005f0e <UART_SetConfig+0x346>
 8005cde:	2302      	movs	r3, #2
 8005ce0:	77fb      	strb	r3, [r7, #31]
 8005ce2:	e114      	b.n	8005f0e <UART_SetConfig+0x346>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	77fb      	strb	r3, [r7, #31]
 8005ce8:	e111      	b.n	8005f0e <UART_SetConfig+0x346>
 8005cea:	2308      	movs	r3, #8
 8005cec:	77fb      	strb	r3, [r7, #31]
 8005cee:	e10e      	b.n	8005f0e <UART_SetConfig+0x346>
 8005cf0:	2310      	movs	r3, #16
 8005cf2:	77fb      	strb	r3, [r7, #31]
 8005cf4:	e10b      	b.n	8005f0e <UART_SetConfig+0x346>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a69      	ldr	r2, [pc, #420]	; (8005ea0 <UART_SetConfig+0x2d8>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d120      	bne.n	8005d42 <UART_SetConfig+0x17a>
 8005d00:	4b65      	ldr	r3, [pc, #404]	; (8005e98 <UART_SetConfig+0x2d0>)
 8005d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d0a:	2b30      	cmp	r3, #48	; 0x30
 8005d0c:	d013      	beq.n	8005d36 <UART_SetConfig+0x16e>
 8005d0e:	2b30      	cmp	r3, #48	; 0x30
 8005d10:	d814      	bhi.n	8005d3c <UART_SetConfig+0x174>
 8005d12:	2b20      	cmp	r3, #32
 8005d14:	d009      	beq.n	8005d2a <UART_SetConfig+0x162>
 8005d16:	2b20      	cmp	r3, #32
 8005d18:	d810      	bhi.n	8005d3c <UART_SetConfig+0x174>
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <UART_SetConfig+0x15c>
 8005d1e:	2b10      	cmp	r3, #16
 8005d20:	d006      	beq.n	8005d30 <UART_SetConfig+0x168>
 8005d22:	e00b      	b.n	8005d3c <UART_SetConfig+0x174>
 8005d24:	2300      	movs	r3, #0
 8005d26:	77fb      	strb	r3, [r7, #31]
 8005d28:	e0f1      	b.n	8005f0e <UART_SetConfig+0x346>
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	77fb      	strb	r3, [r7, #31]
 8005d2e:	e0ee      	b.n	8005f0e <UART_SetConfig+0x346>
 8005d30:	2304      	movs	r3, #4
 8005d32:	77fb      	strb	r3, [r7, #31]
 8005d34:	e0eb      	b.n	8005f0e <UART_SetConfig+0x346>
 8005d36:	2308      	movs	r3, #8
 8005d38:	77fb      	strb	r3, [r7, #31]
 8005d3a:	e0e8      	b.n	8005f0e <UART_SetConfig+0x346>
 8005d3c:	2310      	movs	r3, #16
 8005d3e:	77fb      	strb	r3, [r7, #31]
 8005d40:	e0e5      	b.n	8005f0e <UART_SetConfig+0x346>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a57      	ldr	r2, [pc, #348]	; (8005ea4 <UART_SetConfig+0x2dc>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d120      	bne.n	8005d8e <UART_SetConfig+0x1c6>
 8005d4c:	4b52      	ldr	r3, [pc, #328]	; (8005e98 <UART_SetConfig+0x2d0>)
 8005d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d56:	2bc0      	cmp	r3, #192	; 0xc0
 8005d58:	d013      	beq.n	8005d82 <UART_SetConfig+0x1ba>
 8005d5a:	2bc0      	cmp	r3, #192	; 0xc0
 8005d5c:	d814      	bhi.n	8005d88 <UART_SetConfig+0x1c0>
 8005d5e:	2b80      	cmp	r3, #128	; 0x80
 8005d60:	d009      	beq.n	8005d76 <UART_SetConfig+0x1ae>
 8005d62:	2b80      	cmp	r3, #128	; 0x80
 8005d64:	d810      	bhi.n	8005d88 <UART_SetConfig+0x1c0>
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <UART_SetConfig+0x1a8>
 8005d6a:	2b40      	cmp	r3, #64	; 0x40
 8005d6c:	d006      	beq.n	8005d7c <UART_SetConfig+0x1b4>
 8005d6e:	e00b      	b.n	8005d88 <UART_SetConfig+0x1c0>
 8005d70:	2300      	movs	r3, #0
 8005d72:	77fb      	strb	r3, [r7, #31]
 8005d74:	e0cb      	b.n	8005f0e <UART_SetConfig+0x346>
 8005d76:	2302      	movs	r3, #2
 8005d78:	77fb      	strb	r3, [r7, #31]
 8005d7a:	e0c8      	b.n	8005f0e <UART_SetConfig+0x346>
 8005d7c:	2304      	movs	r3, #4
 8005d7e:	77fb      	strb	r3, [r7, #31]
 8005d80:	e0c5      	b.n	8005f0e <UART_SetConfig+0x346>
 8005d82:	2308      	movs	r3, #8
 8005d84:	77fb      	strb	r3, [r7, #31]
 8005d86:	e0c2      	b.n	8005f0e <UART_SetConfig+0x346>
 8005d88:	2310      	movs	r3, #16
 8005d8a:	77fb      	strb	r3, [r7, #31]
 8005d8c:	e0bf      	b.n	8005f0e <UART_SetConfig+0x346>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a45      	ldr	r2, [pc, #276]	; (8005ea8 <UART_SetConfig+0x2e0>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d125      	bne.n	8005de4 <UART_SetConfig+0x21c>
 8005d98:	4b3f      	ldr	r3, [pc, #252]	; (8005e98 <UART_SetConfig+0x2d0>)
 8005d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005da2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005da6:	d017      	beq.n	8005dd8 <UART_SetConfig+0x210>
 8005da8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dac:	d817      	bhi.n	8005dde <UART_SetConfig+0x216>
 8005dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db2:	d00b      	beq.n	8005dcc <UART_SetConfig+0x204>
 8005db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005db8:	d811      	bhi.n	8005dde <UART_SetConfig+0x216>
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d003      	beq.n	8005dc6 <UART_SetConfig+0x1fe>
 8005dbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005dc2:	d006      	beq.n	8005dd2 <UART_SetConfig+0x20a>
 8005dc4:	e00b      	b.n	8005dde <UART_SetConfig+0x216>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	77fb      	strb	r3, [r7, #31]
 8005dca:	e0a0      	b.n	8005f0e <UART_SetConfig+0x346>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	77fb      	strb	r3, [r7, #31]
 8005dd0:	e09d      	b.n	8005f0e <UART_SetConfig+0x346>
 8005dd2:	2304      	movs	r3, #4
 8005dd4:	77fb      	strb	r3, [r7, #31]
 8005dd6:	e09a      	b.n	8005f0e <UART_SetConfig+0x346>
 8005dd8:	2308      	movs	r3, #8
 8005dda:	77fb      	strb	r3, [r7, #31]
 8005ddc:	e097      	b.n	8005f0e <UART_SetConfig+0x346>
 8005dde:	2310      	movs	r3, #16
 8005de0:	77fb      	strb	r3, [r7, #31]
 8005de2:	e094      	b.n	8005f0e <UART_SetConfig+0x346>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a30      	ldr	r2, [pc, #192]	; (8005eac <UART_SetConfig+0x2e4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d125      	bne.n	8005e3a <UART_SetConfig+0x272>
 8005dee:	4b2a      	ldr	r3, [pc, #168]	; (8005e98 <UART_SetConfig+0x2d0>)
 8005df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005df8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dfc:	d017      	beq.n	8005e2e <UART_SetConfig+0x266>
 8005dfe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e02:	d817      	bhi.n	8005e34 <UART_SetConfig+0x26c>
 8005e04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e08:	d00b      	beq.n	8005e22 <UART_SetConfig+0x25a>
 8005e0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e0e:	d811      	bhi.n	8005e34 <UART_SetConfig+0x26c>
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d003      	beq.n	8005e1c <UART_SetConfig+0x254>
 8005e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e18:	d006      	beq.n	8005e28 <UART_SetConfig+0x260>
 8005e1a:	e00b      	b.n	8005e34 <UART_SetConfig+0x26c>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	77fb      	strb	r3, [r7, #31]
 8005e20:	e075      	b.n	8005f0e <UART_SetConfig+0x346>
 8005e22:	2302      	movs	r3, #2
 8005e24:	77fb      	strb	r3, [r7, #31]
 8005e26:	e072      	b.n	8005f0e <UART_SetConfig+0x346>
 8005e28:	2304      	movs	r3, #4
 8005e2a:	77fb      	strb	r3, [r7, #31]
 8005e2c:	e06f      	b.n	8005f0e <UART_SetConfig+0x346>
 8005e2e:	2308      	movs	r3, #8
 8005e30:	77fb      	strb	r3, [r7, #31]
 8005e32:	e06c      	b.n	8005f0e <UART_SetConfig+0x346>
 8005e34:	2310      	movs	r3, #16
 8005e36:	77fb      	strb	r3, [r7, #31]
 8005e38:	e069      	b.n	8005f0e <UART_SetConfig+0x346>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a1c      	ldr	r2, [pc, #112]	; (8005eb0 <UART_SetConfig+0x2e8>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d137      	bne.n	8005eb4 <UART_SetConfig+0x2ec>
 8005e44:	4b14      	ldr	r3, [pc, #80]	; (8005e98 <UART_SetConfig+0x2d0>)
 8005e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005e4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e52:	d017      	beq.n	8005e84 <UART_SetConfig+0x2bc>
 8005e54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e58:	d817      	bhi.n	8005e8a <UART_SetConfig+0x2c2>
 8005e5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e5e:	d00b      	beq.n	8005e78 <UART_SetConfig+0x2b0>
 8005e60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e64:	d811      	bhi.n	8005e8a <UART_SetConfig+0x2c2>
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <UART_SetConfig+0x2aa>
 8005e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e6e:	d006      	beq.n	8005e7e <UART_SetConfig+0x2b6>
 8005e70:	e00b      	b.n	8005e8a <UART_SetConfig+0x2c2>
 8005e72:	2300      	movs	r3, #0
 8005e74:	77fb      	strb	r3, [r7, #31]
 8005e76:	e04a      	b.n	8005f0e <UART_SetConfig+0x346>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	77fb      	strb	r3, [r7, #31]
 8005e7c:	e047      	b.n	8005f0e <UART_SetConfig+0x346>
 8005e7e:	2304      	movs	r3, #4
 8005e80:	77fb      	strb	r3, [r7, #31]
 8005e82:	e044      	b.n	8005f0e <UART_SetConfig+0x346>
 8005e84:	2308      	movs	r3, #8
 8005e86:	77fb      	strb	r3, [r7, #31]
 8005e88:	e041      	b.n	8005f0e <UART_SetConfig+0x346>
 8005e8a:	2310      	movs	r3, #16
 8005e8c:	77fb      	strb	r3, [r7, #31]
 8005e8e:	e03e      	b.n	8005f0e <UART_SetConfig+0x346>
 8005e90:	efff69f3 	.word	0xefff69f3
 8005e94:	40011000 	.word	0x40011000
 8005e98:	40023800 	.word	0x40023800
 8005e9c:	40004400 	.word	0x40004400
 8005ea0:	40004800 	.word	0x40004800
 8005ea4:	40004c00 	.word	0x40004c00
 8005ea8:	40005000 	.word	0x40005000
 8005eac:	40011400 	.word	0x40011400
 8005eb0:	40007800 	.word	0x40007800
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a71      	ldr	r2, [pc, #452]	; (8006080 <UART_SetConfig+0x4b8>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d125      	bne.n	8005f0a <UART_SetConfig+0x342>
 8005ebe:	4b71      	ldr	r3, [pc, #452]	; (8006084 <UART_SetConfig+0x4bc>)
 8005ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ec4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ec8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ecc:	d017      	beq.n	8005efe <UART_SetConfig+0x336>
 8005ece:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005ed2:	d817      	bhi.n	8005f04 <UART_SetConfig+0x33c>
 8005ed4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ed8:	d00b      	beq.n	8005ef2 <UART_SetConfig+0x32a>
 8005eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ede:	d811      	bhi.n	8005f04 <UART_SetConfig+0x33c>
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <UART_SetConfig+0x324>
 8005ee4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ee8:	d006      	beq.n	8005ef8 <UART_SetConfig+0x330>
 8005eea:	e00b      	b.n	8005f04 <UART_SetConfig+0x33c>
 8005eec:	2300      	movs	r3, #0
 8005eee:	77fb      	strb	r3, [r7, #31]
 8005ef0:	e00d      	b.n	8005f0e <UART_SetConfig+0x346>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	77fb      	strb	r3, [r7, #31]
 8005ef6:	e00a      	b.n	8005f0e <UART_SetConfig+0x346>
 8005ef8:	2304      	movs	r3, #4
 8005efa:	77fb      	strb	r3, [r7, #31]
 8005efc:	e007      	b.n	8005f0e <UART_SetConfig+0x346>
 8005efe:	2308      	movs	r3, #8
 8005f00:	77fb      	strb	r3, [r7, #31]
 8005f02:	e004      	b.n	8005f0e <UART_SetConfig+0x346>
 8005f04:	2310      	movs	r3, #16
 8005f06:	77fb      	strb	r3, [r7, #31]
 8005f08:	e001      	b.n	8005f0e <UART_SetConfig+0x346>
 8005f0a:	2310      	movs	r3, #16
 8005f0c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f16:	d15a      	bne.n	8005fce <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005f18:	7ffb      	ldrb	r3, [r7, #31]
 8005f1a:	2b08      	cmp	r3, #8
 8005f1c:	d827      	bhi.n	8005f6e <UART_SetConfig+0x3a6>
 8005f1e:	a201      	add	r2, pc, #4	; (adr r2, 8005f24 <UART_SetConfig+0x35c>)
 8005f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f24:	08005f49 	.word	0x08005f49
 8005f28:	08005f51 	.word	0x08005f51
 8005f2c:	08005f59 	.word	0x08005f59
 8005f30:	08005f6f 	.word	0x08005f6f
 8005f34:	08005f5f 	.word	0x08005f5f
 8005f38:	08005f6f 	.word	0x08005f6f
 8005f3c:	08005f6f 	.word	0x08005f6f
 8005f40:	08005f6f 	.word	0x08005f6f
 8005f44:	08005f67 	.word	0x08005f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f48:	f7fe fae2 	bl	8004510 <HAL_RCC_GetPCLK1Freq>
 8005f4c:	61b8      	str	r0, [r7, #24]
        break;
 8005f4e:	e013      	b.n	8005f78 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f50:	f7fe faf2 	bl	8004538 <HAL_RCC_GetPCLK2Freq>
 8005f54:	61b8      	str	r0, [r7, #24]
        break;
 8005f56:	e00f      	b.n	8005f78 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f58:	4b4b      	ldr	r3, [pc, #300]	; (8006088 <UART_SetConfig+0x4c0>)
 8005f5a:	61bb      	str	r3, [r7, #24]
        break;
 8005f5c:	e00c      	b.n	8005f78 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f5e:	f7fe fa15 	bl	800438c <HAL_RCC_GetSysClockFreq>
 8005f62:	61b8      	str	r0, [r7, #24]
        break;
 8005f64:	e008      	b.n	8005f78 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f6a:	61bb      	str	r3, [r7, #24]
        break;
 8005f6c:	e004      	b.n	8005f78 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	77bb      	strb	r3, [r7, #30]
        break;
 8005f76:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d074      	beq.n	8006068 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	005a      	lsls	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	085b      	lsrs	r3, r3, #1
 8005f88:	441a      	add	r2, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f92:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	2b0f      	cmp	r3, #15
 8005f98:	d916      	bls.n	8005fc8 <UART_SetConfig+0x400>
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa0:	d212      	bcs.n	8005fc8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	f023 030f 	bic.w	r3, r3, #15
 8005faa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	085b      	lsrs	r3, r3, #1
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	f003 0307 	and.w	r3, r3, #7
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	89fb      	ldrh	r3, [r7, #14]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	89fa      	ldrh	r2, [r7, #14]
 8005fc4:	60da      	str	r2, [r3, #12]
 8005fc6:	e04f      	b.n	8006068 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	77bb      	strb	r3, [r7, #30]
 8005fcc:	e04c      	b.n	8006068 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fce:	7ffb      	ldrb	r3, [r7, #31]
 8005fd0:	2b08      	cmp	r3, #8
 8005fd2:	d828      	bhi.n	8006026 <UART_SetConfig+0x45e>
 8005fd4:	a201      	add	r2, pc, #4	; (adr r2, 8005fdc <UART_SetConfig+0x414>)
 8005fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fda:	bf00      	nop
 8005fdc:	08006001 	.word	0x08006001
 8005fe0:	08006009 	.word	0x08006009
 8005fe4:	08006011 	.word	0x08006011
 8005fe8:	08006027 	.word	0x08006027
 8005fec:	08006017 	.word	0x08006017
 8005ff0:	08006027 	.word	0x08006027
 8005ff4:	08006027 	.word	0x08006027
 8005ff8:	08006027 	.word	0x08006027
 8005ffc:	0800601f 	.word	0x0800601f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006000:	f7fe fa86 	bl	8004510 <HAL_RCC_GetPCLK1Freq>
 8006004:	61b8      	str	r0, [r7, #24]
        break;
 8006006:	e013      	b.n	8006030 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006008:	f7fe fa96 	bl	8004538 <HAL_RCC_GetPCLK2Freq>
 800600c:	61b8      	str	r0, [r7, #24]
        break;
 800600e:	e00f      	b.n	8006030 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006010:	4b1d      	ldr	r3, [pc, #116]	; (8006088 <UART_SetConfig+0x4c0>)
 8006012:	61bb      	str	r3, [r7, #24]
        break;
 8006014:	e00c      	b.n	8006030 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006016:	f7fe f9b9 	bl	800438c <HAL_RCC_GetSysClockFreq>
 800601a:	61b8      	str	r0, [r7, #24]
        break;
 800601c:	e008      	b.n	8006030 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800601e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006022:	61bb      	str	r3, [r7, #24]
        break;
 8006024:	e004      	b.n	8006030 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006026:	2300      	movs	r3, #0
 8006028:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	77bb      	strb	r3, [r7, #30]
        break;
 800602e:	bf00      	nop
    }

    if (pclk != 0U)
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d018      	beq.n	8006068 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	085a      	lsrs	r2, r3, #1
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	441a      	add	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	fbb2 f3f3 	udiv	r3, r2, r3
 8006048:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	2b0f      	cmp	r3, #15
 800604e:	d909      	bls.n	8006064 <UART_SetConfig+0x49c>
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006056:	d205      	bcs.n	8006064 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	b29a      	uxth	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	60da      	str	r2, [r3, #12]
 8006062:	e001      	b.n	8006068 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006074:	7fbb      	ldrb	r3, [r7, #30]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3720      	adds	r7, #32
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	40007c00 	.word	0x40007c00
 8006084:	40023800 	.word	0x40023800
 8006088:	00f42400 	.word	0x00f42400

0800608c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	d00a      	beq.n	80060b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	430a      	orrs	r2, r1
 80060b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d00a      	beq.n	80060d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	430a      	orrs	r2, r1
 80060d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d00a      	beq.n	80060fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	f003 0308 	and.w	r3, r3, #8
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	430a      	orrs	r2, r1
 800611a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00a      	beq.n	800613e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	430a      	orrs	r2, r1
 800613c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	f003 0320 	and.w	r3, r3, #32
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	430a      	orrs	r2, r1
 800615e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006168:	2b00      	cmp	r3, #0
 800616a:	d01a      	beq.n	80061a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	430a      	orrs	r2, r1
 8006180:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800618a:	d10a      	bne.n	80061a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00a      	beq.n	80061c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	430a      	orrs	r2, r1
 80061c2:	605a      	str	r2, [r3, #4]
  }
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af02      	add	r7, sp, #8
 80061d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061e0:	f7fc f972 	bl	80024c8 <HAL_GetTick>
 80061e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d10e      	bne.n	8006212 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80061f8:	9300      	str	r3, [sp, #0]
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f82d 	bl	8006262 <UART_WaitOnFlagUntilTimeout>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d001      	beq.n	8006212 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e023      	b.n	800625a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b04      	cmp	r3, #4
 800621e:	d10e      	bne.n	800623e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006220:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f817 	bl	8006262 <UART_WaitOnFlagUntilTimeout>
 8006234:	4603      	mov	r3, r0
 8006236:	2b00      	cmp	r3, #0
 8006238:	d001      	beq.n	800623e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e00d      	b.n	800625a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2220      	movs	r2, #32
 8006242:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2220      	movs	r2, #32
 8006248:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b09c      	sub	sp, #112	; 0x70
 8006266:	af00      	add	r7, sp, #0
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	603b      	str	r3, [r7, #0]
 800626e:	4613      	mov	r3, r2
 8006270:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006272:	e0a5      	b.n	80063c0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006274:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627a:	f000 80a1 	beq.w	80063c0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800627e:	f7fc f923 	bl	80024c8 <HAL_GetTick>
 8006282:	4602      	mov	r2, r0
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800628a:	429a      	cmp	r2, r3
 800628c:	d302      	bcc.n	8006294 <UART_WaitOnFlagUntilTimeout+0x32>
 800628e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006290:	2b00      	cmp	r3, #0
 8006292:	d13e      	bne.n	8006312 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062a4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80062a8:	667b      	str	r3, [r7, #100]	; 0x64
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062b4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80062b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80062c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e6      	bne.n	8006294 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3308      	adds	r3, #8
 80062cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80062d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d8:	f023 0301 	bic.w	r3, r3, #1
 80062dc:	663b      	str	r3, [r7, #96]	; 0x60
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3308      	adds	r3, #8
 80062e4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062e6:	64ba      	str	r2, [r7, #72]	; 0x48
 80062e8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80062ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80062f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e5      	bne.n	80062c6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2220      	movs	r2, #32
 80062fe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2220      	movs	r2, #32
 8006304:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800630e:	2303      	movs	r3, #3
 8006310:	e067      	b.n	80063e2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b00      	cmp	r3, #0
 800631e:	d04f      	beq.n	80063c0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800632a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800632e:	d147      	bne.n	80063c0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006338:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006342:	e853 3f00 	ldrex	r3, [r3]
 8006346:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800634e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006358:	637b      	str	r3, [r7, #52]	; 0x34
 800635a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800635e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006360:	e841 2300 	strex	r3, r2, [r1]
 8006364:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e6      	bne.n	800633a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	3308      	adds	r3, #8
 8006372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	e853 3f00 	ldrex	r3, [r3]
 800637a:	613b      	str	r3, [r7, #16]
   return(result);
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	f023 0301 	bic.w	r3, r3, #1
 8006382:	66bb      	str	r3, [r7, #104]	; 0x68
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3308      	adds	r3, #8
 800638a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800638c:	623a      	str	r2, [r7, #32]
 800638e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	69f9      	ldr	r1, [r7, #28]
 8006392:	6a3a      	ldr	r2, [r7, #32]
 8006394:	e841 2300 	strex	r3, r2, [r1]
 8006398:	61bb      	str	r3, [r7, #24]
   return(result);
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e5      	bne.n	800636c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2220      	movs	r2, #32
 80063a4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2220      	movs	r2, #32
 80063aa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2220      	movs	r2, #32
 80063b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e010      	b.n	80063e2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	69da      	ldr	r2, [r3, #28]
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	4013      	ands	r3, r2
 80063ca:	68ba      	ldr	r2, [r7, #8]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	bf0c      	ite	eq
 80063d0:	2301      	moveq	r3, #1
 80063d2:	2300      	movne	r3, #0
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	461a      	mov	r2, r3
 80063d8:	79fb      	ldrb	r3, [r7, #7]
 80063da:	429a      	cmp	r2, r3
 80063dc:	f43f af4a 	beq.w	8006274 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3770      	adds	r7, #112	; 0x70
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
	...

080063ec <__errno>:
 80063ec:	4b01      	ldr	r3, [pc, #4]	; (80063f4 <__errno+0x8>)
 80063ee:	6818      	ldr	r0, [r3, #0]
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	20000010 	.word	0x20000010

080063f8 <__libc_init_array>:
 80063f8:	b570      	push	{r4, r5, r6, lr}
 80063fa:	4d0d      	ldr	r5, [pc, #52]	; (8006430 <__libc_init_array+0x38>)
 80063fc:	4c0d      	ldr	r4, [pc, #52]	; (8006434 <__libc_init_array+0x3c>)
 80063fe:	1b64      	subs	r4, r4, r5
 8006400:	10a4      	asrs	r4, r4, #2
 8006402:	2600      	movs	r6, #0
 8006404:	42a6      	cmp	r6, r4
 8006406:	d109      	bne.n	800641c <__libc_init_array+0x24>
 8006408:	4d0b      	ldr	r5, [pc, #44]	; (8006438 <__libc_init_array+0x40>)
 800640a:	4c0c      	ldr	r4, [pc, #48]	; (800643c <__libc_init_array+0x44>)
 800640c:	f004 fc5e 	bl	800accc <_init>
 8006410:	1b64      	subs	r4, r4, r5
 8006412:	10a4      	asrs	r4, r4, #2
 8006414:	2600      	movs	r6, #0
 8006416:	42a6      	cmp	r6, r4
 8006418:	d105      	bne.n	8006426 <__libc_init_array+0x2e>
 800641a:	bd70      	pop	{r4, r5, r6, pc}
 800641c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006420:	4798      	blx	r3
 8006422:	3601      	adds	r6, #1
 8006424:	e7ee      	b.n	8006404 <__libc_init_array+0xc>
 8006426:	f855 3b04 	ldr.w	r3, [r5], #4
 800642a:	4798      	blx	r3
 800642c:	3601      	adds	r6, #1
 800642e:	e7f2      	b.n	8006416 <__libc_init_array+0x1e>
 8006430:	0800b60c 	.word	0x0800b60c
 8006434:	0800b60c 	.word	0x0800b60c
 8006438:	0800b60c 	.word	0x0800b60c
 800643c:	0800b610 	.word	0x0800b610

08006440 <memset>:
 8006440:	4402      	add	r2, r0
 8006442:	4603      	mov	r3, r0
 8006444:	4293      	cmp	r3, r2
 8006446:	d100      	bne.n	800644a <memset+0xa>
 8006448:	4770      	bx	lr
 800644a:	f803 1b01 	strb.w	r1, [r3], #1
 800644e:	e7f9      	b.n	8006444 <memset+0x4>

08006450 <__cvt>:
 8006450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006452:	ed2d 8b02 	vpush	{d8}
 8006456:	eeb0 8b40 	vmov.f64	d8, d0
 800645a:	b085      	sub	sp, #20
 800645c:	4617      	mov	r7, r2
 800645e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006460:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006462:	ee18 2a90 	vmov	r2, s17
 8006466:	f025 0520 	bic.w	r5, r5, #32
 800646a:	2a00      	cmp	r2, #0
 800646c:	bfb6      	itet	lt
 800646e:	222d      	movlt	r2, #45	; 0x2d
 8006470:	2200      	movge	r2, #0
 8006472:	eeb1 8b40 	vneglt.f64	d8, d0
 8006476:	2d46      	cmp	r5, #70	; 0x46
 8006478:	460c      	mov	r4, r1
 800647a:	701a      	strb	r2, [r3, #0]
 800647c:	d004      	beq.n	8006488 <__cvt+0x38>
 800647e:	2d45      	cmp	r5, #69	; 0x45
 8006480:	d100      	bne.n	8006484 <__cvt+0x34>
 8006482:	3401      	adds	r4, #1
 8006484:	2102      	movs	r1, #2
 8006486:	e000      	b.n	800648a <__cvt+0x3a>
 8006488:	2103      	movs	r1, #3
 800648a:	ab03      	add	r3, sp, #12
 800648c:	9301      	str	r3, [sp, #4]
 800648e:	ab02      	add	r3, sp, #8
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	4622      	mov	r2, r4
 8006494:	4633      	mov	r3, r6
 8006496:	eeb0 0b48 	vmov.f64	d0, d8
 800649a:	f001 feb5 	bl	8008208 <_dtoa_r>
 800649e:	2d47      	cmp	r5, #71	; 0x47
 80064a0:	d109      	bne.n	80064b6 <__cvt+0x66>
 80064a2:	07fb      	lsls	r3, r7, #31
 80064a4:	d407      	bmi.n	80064b6 <__cvt+0x66>
 80064a6:	9b03      	ldr	r3, [sp, #12]
 80064a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80064aa:	1a1b      	subs	r3, r3, r0
 80064ac:	6013      	str	r3, [r2, #0]
 80064ae:	b005      	add	sp, #20
 80064b0:	ecbd 8b02 	vpop	{d8}
 80064b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064b6:	2d46      	cmp	r5, #70	; 0x46
 80064b8:	eb00 0204 	add.w	r2, r0, r4
 80064bc:	d10c      	bne.n	80064d8 <__cvt+0x88>
 80064be:	7803      	ldrb	r3, [r0, #0]
 80064c0:	2b30      	cmp	r3, #48	; 0x30
 80064c2:	d107      	bne.n	80064d4 <__cvt+0x84>
 80064c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80064c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064cc:	bf1c      	itt	ne
 80064ce:	f1c4 0401 	rsbne	r4, r4, #1
 80064d2:	6034      	strne	r4, [r6, #0]
 80064d4:	6833      	ldr	r3, [r6, #0]
 80064d6:	441a      	add	r2, r3
 80064d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80064dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064e0:	bf08      	it	eq
 80064e2:	9203      	streq	r2, [sp, #12]
 80064e4:	2130      	movs	r1, #48	; 0x30
 80064e6:	9b03      	ldr	r3, [sp, #12]
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d2dc      	bcs.n	80064a6 <__cvt+0x56>
 80064ec:	1c5c      	adds	r4, r3, #1
 80064ee:	9403      	str	r4, [sp, #12]
 80064f0:	7019      	strb	r1, [r3, #0]
 80064f2:	e7f8      	b.n	80064e6 <__cvt+0x96>

080064f4 <__exponent>:
 80064f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064f6:	4603      	mov	r3, r0
 80064f8:	2900      	cmp	r1, #0
 80064fa:	bfb8      	it	lt
 80064fc:	4249      	neglt	r1, r1
 80064fe:	f803 2b02 	strb.w	r2, [r3], #2
 8006502:	bfb4      	ite	lt
 8006504:	222d      	movlt	r2, #45	; 0x2d
 8006506:	222b      	movge	r2, #43	; 0x2b
 8006508:	2909      	cmp	r1, #9
 800650a:	7042      	strb	r2, [r0, #1]
 800650c:	dd2a      	ble.n	8006564 <__exponent+0x70>
 800650e:	f10d 0407 	add.w	r4, sp, #7
 8006512:	46a4      	mov	ip, r4
 8006514:	270a      	movs	r7, #10
 8006516:	46a6      	mov	lr, r4
 8006518:	460a      	mov	r2, r1
 800651a:	fb91 f6f7 	sdiv	r6, r1, r7
 800651e:	fb07 1516 	mls	r5, r7, r6, r1
 8006522:	3530      	adds	r5, #48	; 0x30
 8006524:	2a63      	cmp	r2, #99	; 0x63
 8006526:	f104 34ff 	add.w	r4, r4, #4294967295
 800652a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800652e:	4631      	mov	r1, r6
 8006530:	dcf1      	bgt.n	8006516 <__exponent+0x22>
 8006532:	3130      	adds	r1, #48	; 0x30
 8006534:	f1ae 0502 	sub.w	r5, lr, #2
 8006538:	f804 1c01 	strb.w	r1, [r4, #-1]
 800653c:	1c44      	adds	r4, r0, #1
 800653e:	4629      	mov	r1, r5
 8006540:	4561      	cmp	r1, ip
 8006542:	d30a      	bcc.n	800655a <__exponent+0x66>
 8006544:	f10d 0209 	add.w	r2, sp, #9
 8006548:	eba2 020e 	sub.w	r2, r2, lr
 800654c:	4565      	cmp	r5, ip
 800654e:	bf88      	it	hi
 8006550:	2200      	movhi	r2, #0
 8006552:	4413      	add	r3, r2
 8006554:	1a18      	subs	r0, r3, r0
 8006556:	b003      	add	sp, #12
 8006558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800655a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800655e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006562:	e7ed      	b.n	8006540 <__exponent+0x4c>
 8006564:	2330      	movs	r3, #48	; 0x30
 8006566:	3130      	adds	r1, #48	; 0x30
 8006568:	7083      	strb	r3, [r0, #2]
 800656a:	70c1      	strb	r1, [r0, #3]
 800656c:	1d03      	adds	r3, r0, #4
 800656e:	e7f1      	b.n	8006554 <__exponent+0x60>

08006570 <_printf_float>:
 8006570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006574:	b08b      	sub	sp, #44	; 0x2c
 8006576:	460c      	mov	r4, r1
 8006578:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800657c:	4616      	mov	r6, r2
 800657e:	461f      	mov	r7, r3
 8006580:	4605      	mov	r5, r0
 8006582:	f003 f8e9 	bl	8009758 <_localeconv_r>
 8006586:	f8d0 b000 	ldr.w	fp, [r0]
 800658a:	4658      	mov	r0, fp
 800658c:	f7f9 fe58 	bl	8000240 <strlen>
 8006590:	2300      	movs	r3, #0
 8006592:	9308      	str	r3, [sp, #32]
 8006594:	f8d8 3000 	ldr.w	r3, [r8]
 8006598:	f894 9018 	ldrb.w	r9, [r4, #24]
 800659c:	6822      	ldr	r2, [r4, #0]
 800659e:	3307      	adds	r3, #7
 80065a0:	f023 0307 	bic.w	r3, r3, #7
 80065a4:	f103 0108 	add.w	r1, r3, #8
 80065a8:	f8c8 1000 	str.w	r1, [r8]
 80065ac:	4682      	mov	sl, r0
 80065ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065b2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80065b6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006818 <_printf_float+0x2a8>
 80065ba:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80065be:	eeb0 6bc0 	vabs.f64	d6, d0
 80065c2:	eeb4 6b47 	vcmp.f64	d6, d7
 80065c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ca:	dd24      	ble.n	8006616 <_printf_float+0xa6>
 80065cc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80065d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d4:	d502      	bpl.n	80065dc <_printf_float+0x6c>
 80065d6:	232d      	movs	r3, #45	; 0x2d
 80065d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065dc:	4b90      	ldr	r3, [pc, #576]	; (8006820 <_printf_float+0x2b0>)
 80065de:	4891      	ldr	r0, [pc, #580]	; (8006824 <_printf_float+0x2b4>)
 80065e0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80065e4:	bf94      	ite	ls
 80065e6:	4698      	movls	r8, r3
 80065e8:	4680      	movhi	r8, r0
 80065ea:	2303      	movs	r3, #3
 80065ec:	6123      	str	r3, [r4, #16]
 80065ee:	f022 0204 	bic.w	r2, r2, #4
 80065f2:	2300      	movs	r3, #0
 80065f4:	6022      	str	r2, [r4, #0]
 80065f6:	9304      	str	r3, [sp, #16]
 80065f8:	9700      	str	r7, [sp, #0]
 80065fa:	4633      	mov	r3, r6
 80065fc:	aa09      	add	r2, sp, #36	; 0x24
 80065fe:	4621      	mov	r1, r4
 8006600:	4628      	mov	r0, r5
 8006602:	f000 f9d3 	bl	80069ac <_printf_common>
 8006606:	3001      	adds	r0, #1
 8006608:	f040 808a 	bne.w	8006720 <_printf_float+0x1b0>
 800660c:	f04f 30ff 	mov.w	r0, #4294967295
 8006610:	b00b      	add	sp, #44	; 0x2c
 8006612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006616:	eeb4 0b40 	vcmp.f64	d0, d0
 800661a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800661e:	d709      	bvc.n	8006634 <_printf_float+0xc4>
 8006620:	ee10 3a90 	vmov	r3, s1
 8006624:	2b00      	cmp	r3, #0
 8006626:	bfbc      	itt	lt
 8006628:	232d      	movlt	r3, #45	; 0x2d
 800662a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800662e:	487e      	ldr	r0, [pc, #504]	; (8006828 <_printf_float+0x2b8>)
 8006630:	4b7e      	ldr	r3, [pc, #504]	; (800682c <_printf_float+0x2bc>)
 8006632:	e7d5      	b.n	80065e0 <_printf_float+0x70>
 8006634:	6863      	ldr	r3, [r4, #4]
 8006636:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800663a:	9104      	str	r1, [sp, #16]
 800663c:	1c59      	adds	r1, r3, #1
 800663e:	d13c      	bne.n	80066ba <_printf_float+0x14a>
 8006640:	2306      	movs	r3, #6
 8006642:	6063      	str	r3, [r4, #4]
 8006644:	2300      	movs	r3, #0
 8006646:	9303      	str	r3, [sp, #12]
 8006648:	ab08      	add	r3, sp, #32
 800664a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800664e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006652:	ab07      	add	r3, sp, #28
 8006654:	6861      	ldr	r1, [r4, #4]
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	6022      	str	r2, [r4, #0]
 800665a:	f10d 031b 	add.w	r3, sp, #27
 800665e:	4628      	mov	r0, r5
 8006660:	f7ff fef6 	bl	8006450 <__cvt>
 8006664:	9b04      	ldr	r3, [sp, #16]
 8006666:	9907      	ldr	r1, [sp, #28]
 8006668:	2b47      	cmp	r3, #71	; 0x47
 800666a:	4680      	mov	r8, r0
 800666c:	d108      	bne.n	8006680 <_printf_float+0x110>
 800666e:	1cc8      	adds	r0, r1, #3
 8006670:	db02      	blt.n	8006678 <_printf_float+0x108>
 8006672:	6863      	ldr	r3, [r4, #4]
 8006674:	4299      	cmp	r1, r3
 8006676:	dd41      	ble.n	80066fc <_printf_float+0x18c>
 8006678:	f1a9 0902 	sub.w	r9, r9, #2
 800667c:	fa5f f989 	uxtb.w	r9, r9
 8006680:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006684:	d820      	bhi.n	80066c8 <_printf_float+0x158>
 8006686:	3901      	subs	r1, #1
 8006688:	464a      	mov	r2, r9
 800668a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800668e:	9107      	str	r1, [sp, #28]
 8006690:	f7ff ff30 	bl	80064f4 <__exponent>
 8006694:	9a08      	ldr	r2, [sp, #32]
 8006696:	9004      	str	r0, [sp, #16]
 8006698:	1813      	adds	r3, r2, r0
 800669a:	2a01      	cmp	r2, #1
 800669c:	6123      	str	r3, [r4, #16]
 800669e:	dc02      	bgt.n	80066a6 <_printf_float+0x136>
 80066a0:	6822      	ldr	r2, [r4, #0]
 80066a2:	07d2      	lsls	r2, r2, #31
 80066a4:	d501      	bpl.n	80066aa <_printf_float+0x13a>
 80066a6:	3301      	adds	r3, #1
 80066a8:	6123      	str	r3, [r4, #16]
 80066aa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0a2      	beq.n	80065f8 <_printf_float+0x88>
 80066b2:	232d      	movs	r3, #45	; 0x2d
 80066b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066b8:	e79e      	b.n	80065f8 <_printf_float+0x88>
 80066ba:	9904      	ldr	r1, [sp, #16]
 80066bc:	2947      	cmp	r1, #71	; 0x47
 80066be:	d1c1      	bne.n	8006644 <_printf_float+0xd4>
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1bf      	bne.n	8006644 <_printf_float+0xd4>
 80066c4:	2301      	movs	r3, #1
 80066c6:	e7bc      	b.n	8006642 <_printf_float+0xd2>
 80066c8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80066cc:	d118      	bne.n	8006700 <_printf_float+0x190>
 80066ce:	2900      	cmp	r1, #0
 80066d0:	6863      	ldr	r3, [r4, #4]
 80066d2:	dd0b      	ble.n	80066ec <_printf_float+0x17c>
 80066d4:	6121      	str	r1, [r4, #16]
 80066d6:	b913      	cbnz	r3, 80066de <_printf_float+0x16e>
 80066d8:	6822      	ldr	r2, [r4, #0]
 80066da:	07d0      	lsls	r0, r2, #31
 80066dc:	d502      	bpl.n	80066e4 <_printf_float+0x174>
 80066de:	3301      	adds	r3, #1
 80066e0:	440b      	add	r3, r1
 80066e2:	6123      	str	r3, [r4, #16]
 80066e4:	2300      	movs	r3, #0
 80066e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80066e8:	9304      	str	r3, [sp, #16]
 80066ea:	e7de      	b.n	80066aa <_printf_float+0x13a>
 80066ec:	b913      	cbnz	r3, 80066f4 <_printf_float+0x184>
 80066ee:	6822      	ldr	r2, [r4, #0]
 80066f0:	07d2      	lsls	r2, r2, #31
 80066f2:	d501      	bpl.n	80066f8 <_printf_float+0x188>
 80066f4:	3302      	adds	r3, #2
 80066f6:	e7f4      	b.n	80066e2 <_printf_float+0x172>
 80066f8:	2301      	movs	r3, #1
 80066fa:	e7f2      	b.n	80066e2 <_printf_float+0x172>
 80066fc:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006700:	9b08      	ldr	r3, [sp, #32]
 8006702:	4299      	cmp	r1, r3
 8006704:	db05      	blt.n	8006712 <_printf_float+0x1a2>
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	6121      	str	r1, [r4, #16]
 800670a:	07d8      	lsls	r0, r3, #31
 800670c:	d5ea      	bpl.n	80066e4 <_printf_float+0x174>
 800670e:	1c4b      	adds	r3, r1, #1
 8006710:	e7e7      	b.n	80066e2 <_printf_float+0x172>
 8006712:	2900      	cmp	r1, #0
 8006714:	bfd4      	ite	le
 8006716:	f1c1 0202 	rsble	r2, r1, #2
 800671a:	2201      	movgt	r2, #1
 800671c:	4413      	add	r3, r2
 800671e:	e7e0      	b.n	80066e2 <_printf_float+0x172>
 8006720:	6823      	ldr	r3, [r4, #0]
 8006722:	055a      	lsls	r2, r3, #21
 8006724:	d407      	bmi.n	8006736 <_printf_float+0x1c6>
 8006726:	6923      	ldr	r3, [r4, #16]
 8006728:	4642      	mov	r2, r8
 800672a:	4631      	mov	r1, r6
 800672c:	4628      	mov	r0, r5
 800672e:	47b8      	blx	r7
 8006730:	3001      	adds	r0, #1
 8006732:	d12a      	bne.n	800678a <_printf_float+0x21a>
 8006734:	e76a      	b.n	800660c <_printf_float+0x9c>
 8006736:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800673a:	f240 80e2 	bls.w	8006902 <_printf_float+0x392>
 800673e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006742:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800674a:	d133      	bne.n	80067b4 <_printf_float+0x244>
 800674c:	4a38      	ldr	r2, [pc, #224]	; (8006830 <_printf_float+0x2c0>)
 800674e:	2301      	movs	r3, #1
 8006750:	4631      	mov	r1, r6
 8006752:	4628      	mov	r0, r5
 8006754:	47b8      	blx	r7
 8006756:	3001      	adds	r0, #1
 8006758:	f43f af58 	beq.w	800660c <_printf_float+0x9c>
 800675c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006760:	429a      	cmp	r2, r3
 8006762:	db02      	blt.n	800676a <_printf_float+0x1fa>
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	07d8      	lsls	r0, r3, #31
 8006768:	d50f      	bpl.n	800678a <_printf_float+0x21a>
 800676a:	4653      	mov	r3, sl
 800676c:	465a      	mov	r2, fp
 800676e:	4631      	mov	r1, r6
 8006770:	4628      	mov	r0, r5
 8006772:	47b8      	blx	r7
 8006774:	3001      	adds	r0, #1
 8006776:	f43f af49 	beq.w	800660c <_printf_float+0x9c>
 800677a:	f04f 0800 	mov.w	r8, #0
 800677e:	f104 091a 	add.w	r9, r4, #26
 8006782:	9b08      	ldr	r3, [sp, #32]
 8006784:	3b01      	subs	r3, #1
 8006786:	4543      	cmp	r3, r8
 8006788:	dc09      	bgt.n	800679e <_printf_float+0x22e>
 800678a:	6823      	ldr	r3, [r4, #0]
 800678c:	079b      	lsls	r3, r3, #30
 800678e:	f100 8108 	bmi.w	80069a2 <_printf_float+0x432>
 8006792:	68e0      	ldr	r0, [r4, #12]
 8006794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006796:	4298      	cmp	r0, r3
 8006798:	bfb8      	it	lt
 800679a:	4618      	movlt	r0, r3
 800679c:	e738      	b.n	8006610 <_printf_float+0xa0>
 800679e:	2301      	movs	r3, #1
 80067a0:	464a      	mov	r2, r9
 80067a2:	4631      	mov	r1, r6
 80067a4:	4628      	mov	r0, r5
 80067a6:	47b8      	blx	r7
 80067a8:	3001      	adds	r0, #1
 80067aa:	f43f af2f 	beq.w	800660c <_printf_float+0x9c>
 80067ae:	f108 0801 	add.w	r8, r8, #1
 80067b2:	e7e6      	b.n	8006782 <_printf_float+0x212>
 80067b4:	9b07      	ldr	r3, [sp, #28]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	dc3c      	bgt.n	8006834 <_printf_float+0x2c4>
 80067ba:	4a1d      	ldr	r2, [pc, #116]	; (8006830 <_printf_float+0x2c0>)
 80067bc:	2301      	movs	r3, #1
 80067be:	4631      	mov	r1, r6
 80067c0:	4628      	mov	r0, r5
 80067c2:	47b8      	blx	r7
 80067c4:	3001      	adds	r0, #1
 80067c6:	f43f af21 	beq.w	800660c <_printf_float+0x9c>
 80067ca:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80067ce:	4313      	orrs	r3, r2
 80067d0:	d102      	bne.n	80067d8 <_printf_float+0x268>
 80067d2:	6823      	ldr	r3, [r4, #0]
 80067d4:	07d9      	lsls	r1, r3, #31
 80067d6:	d5d8      	bpl.n	800678a <_printf_float+0x21a>
 80067d8:	4653      	mov	r3, sl
 80067da:	465a      	mov	r2, fp
 80067dc:	4631      	mov	r1, r6
 80067de:	4628      	mov	r0, r5
 80067e0:	47b8      	blx	r7
 80067e2:	3001      	adds	r0, #1
 80067e4:	f43f af12 	beq.w	800660c <_printf_float+0x9c>
 80067e8:	f04f 0900 	mov.w	r9, #0
 80067ec:	f104 0a1a 	add.w	sl, r4, #26
 80067f0:	9b07      	ldr	r3, [sp, #28]
 80067f2:	425b      	negs	r3, r3
 80067f4:	454b      	cmp	r3, r9
 80067f6:	dc01      	bgt.n	80067fc <_printf_float+0x28c>
 80067f8:	9b08      	ldr	r3, [sp, #32]
 80067fa:	e795      	b.n	8006728 <_printf_float+0x1b8>
 80067fc:	2301      	movs	r3, #1
 80067fe:	4652      	mov	r2, sl
 8006800:	4631      	mov	r1, r6
 8006802:	4628      	mov	r0, r5
 8006804:	47b8      	blx	r7
 8006806:	3001      	adds	r0, #1
 8006808:	f43f af00 	beq.w	800660c <_printf_float+0x9c>
 800680c:	f109 0901 	add.w	r9, r9, #1
 8006810:	e7ee      	b.n	80067f0 <_printf_float+0x280>
 8006812:	bf00      	nop
 8006814:	f3af 8000 	nop.w
 8006818:	ffffffff 	.word	0xffffffff
 800681c:	7fefffff 	.word	0x7fefffff
 8006820:	0800b154 	.word	0x0800b154
 8006824:	0800b158 	.word	0x0800b158
 8006828:	0800b160 	.word	0x0800b160
 800682c:	0800b15c 	.word	0x0800b15c
 8006830:	0800b164 	.word	0x0800b164
 8006834:	9a08      	ldr	r2, [sp, #32]
 8006836:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006838:	429a      	cmp	r2, r3
 800683a:	bfa8      	it	ge
 800683c:	461a      	movge	r2, r3
 800683e:	2a00      	cmp	r2, #0
 8006840:	4691      	mov	r9, r2
 8006842:	dc38      	bgt.n	80068b6 <_printf_float+0x346>
 8006844:	2300      	movs	r3, #0
 8006846:	9305      	str	r3, [sp, #20]
 8006848:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800684c:	f104 021a 	add.w	r2, r4, #26
 8006850:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006852:	9905      	ldr	r1, [sp, #20]
 8006854:	9304      	str	r3, [sp, #16]
 8006856:	eba3 0309 	sub.w	r3, r3, r9
 800685a:	428b      	cmp	r3, r1
 800685c:	dc33      	bgt.n	80068c6 <_printf_float+0x356>
 800685e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006862:	429a      	cmp	r2, r3
 8006864:	db3c      	blt.n	80068e0 <_printf_float+0x370>
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	07da      	lsls	r2, r3, #31
 800686a:	d439      	bmi.n	80068e0 <_printf_float+0x370>
 800686c:	9a08      	ldr	r2, [sp, #32]
 800686e:	9b04      	ldr	r3, [sp, #16]
 8006870:	9907      	ldr	r1, [sp, #28]
 8006872:	1ad3      	subs	r3, r2, r3
 8006874:	eba2 0901 	sub.w	r9, r2, r1
 8006878:	4599      	cmp	r9, r3
 800687a:	bfa8      	it	ge
 800687c:	4699      	movge	r9, r3
 800687e:	f1b9 0f00 	cmp.w	r9, #0
 8006882:	dc35      	bgt.n	80068f0 <_printf_float+0x380>
 8006884:	f04f 0800 	mov.w	r8, #0
 8006888:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800688c:	f104 0a1a 	add.w	sl, r4, #26
 8006890:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006894:	1a9b      	subs	r3, r3, r2
 8006896:	eba3 0309 	sub.w	r3, r3, r9
 800689a:	4543      	cmp	r3, r8
 800689c:	f77f af75 	ble.w	800678a <_printf_float+0x21a>
 80068a0:	2301      	movs	r3, #1
 80068a2:	4652      	mov	r2, sl
 80068a4:	4631      	mov	r1, r6
 80068a6:	4628      	mov	r0, r5
 80068a8:	47b8      	blx	r7
 80068aa:	3001      	adds	r0, #1
 80068ac:	f43f aeae 	beq.w	800660c <_printf_float+0x9c>
 80068b0:	f108 0801 	add.w	r8, r8, #1
 80068b4:	e7ec      	b.n	8006890 <_printf_float+0x320>
 80068b6:	4613      	mov	r3, r2
 80068b8:	4631      	mov	r1, r6
 80068ba:	4642      	mov	r2, r8
 80068bc:	4628      	mov	r0, r5
 80068be:	47b8      	blx	r7
 80068c0:	3001      	adds	r0, #1
 80068c2:	d1bf      	bne.n	8006844 <_printf_float+0x2d4>
 80068c4:	e6a2      	b.n	800660c <_printf_float+0x9c>
 80068c6:	2301      	movs	r3, #1
 80068c8:	4631      	mov	r1, r6
 80068ca:	4628      	mov	r0, r5
 80068cc:	9204      	str	r2, [sp, #16]
 80068ce:	47b8      	blx	r7
 80068d0:	3001      	adds	r0, #1
 80068d2:	f43f ae9b 	beq.w	800660c <_printf_float+0x9c>
 80068d6:	9b05      	ldr	r3, [sp, #20]
 80068d8:	9a04      	ldr	r2, [sp, #16]
 80068da:	3301      	adds	r3, #1
 80068dc:	9305      	str	r3, [sp, #20]
 80068de:	e7b7      	b.n	8006850 <_printf_float+0x2e0>
 80068e0:	4653      	mov	r3, sl
 80068e2:	465a      	mov	r2, fp
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	47b8      	blx	r7
 80068ea:	3001      	adds	r0, #1
 80068ec:	d1be      	bne.n	800686c <_printf_float+0x2fc>
 80068ee:	e68d      	b.n	800660c <_printf_float+0x9c>
 80068f0:	9a04      	ldr	r2, [sp, #16]
 80068f2:	464b      	mov	r3, r9
 80068f4:	4442      	add	r2, r8
 80068f6:	4631      	mov	r1, r6
 80068f8:	4628      	mov	r0, r5
 80068fa:	47b8      	blx	r7
 80068fc:	3001      	adds	r0, #1
 80068fe:	d1c1      	bne.n	8006884 <_printf_float+0x314>
 8006900:	e684      	b.n	800660c <_printf_float+0x9c>
 8006902:	9a08      	ldr	r2, [sp, #32]
 8006904:	2a01      	cmp	r2, #1
 8006906:	dc01      	bgt.n	800690c <_printf_float+0x39c>
 8006908:	07db      	lsls	r3, r3, #31
 800690a:	d537      	bpl.n	800697c <_printf_float+0x40c>
 800690c:	2301      	movs	r3, #1
 800690e:	4642      	mov	r2, r8
 8006910:	4631      	mov	r1, r6
 8006912:	4628      	mov	r0, r5
 8006914:	47b8      	blx	r7
 8006916:	3001      	adds	r0, #1
 8006918:	f43f ae78 	beq.w	800660c <_printf_float+0x9c>
 800691c:	4653      	mov	r3, sl
 800691e:	465a      	mov	r2, fp
 8006920:	4631      	mov	r1, r6
 8006922:	4628      	mov	r0, r5
 8006924:	47b8      	blx	r7
 8006926:	3001      	adds	r0, #1
 8006928:	f43f ae70 	beq.w	800660c <_printf_float+0x9c>
 800692c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006930:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006938:	d01b      	beq.n	8006972 <_printf_float+0x402>
 800693a:	9b08      	ldr	r3, [sp, #32]
 800693c:	f108 0201 	add.w	r2, r8, #1
 8006940:	3b01      	subs	r3, #1
 8006942:	4631      	mov	r1, r6
 8006944:	4628      	mov	r0, r5
 8006946:	47b8      	blx	r7
 8006948:	3001      	adds	r0, #1
 800694a:	d10e      	bne.n	800696a <_printf_float+0x3fa>
 800694c:	e65e      	b.n	800660c <_printf_float+0x9c>
 800694e:	2301      	movs	r3, #1
 8006950:	464a      	mov	r2, r9
 8006952:	4631      	mov	r1, r6
 8006954:	4628      	mov	r0, r5
 8006956:	47b8      	blx	r7
 8006958:	3001      	adds	r0, #1
 800695a:	f43f ae57 	beq.w	800660c <_printf_float+0x9c>
 800695e:	f108 0801 	add.w	r8, r8, #1
 8006962:	9b08      	ldr	r3, [sp, #32]
 8006964:	3b01      	subs	r3, #1
 8006966:	4543      	cmp	r3, r8
 8006968:	dcf1      	bgt.n	800694e <_printf_float+0x3de>
 800696a:	9b04      	ldr	r3, [sp, #16]
 800696c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006970:	e6db      	b.n	800672a <_printf_float+0x1ba>
 8006972:	f04f 0800 	mov.w	r8, #0
 8006976:	f104 091a 	add.w	r9, r4, #26
 800697a:	e7f2      	b.n	8006962 <_printf_float+0x3f2>
 800697c:	2301      	movs	r3, #1
 800697e:	4642      	mov	r2, r8
 8006980:	e7df      	b.n	8006942 <_printf_float+0x3d2>
 8006982:	2301      	movs	r3, #1
 8006984:	464a      	mov	r2, r9
 8006986:	4631      	mov	r1, r6
 8006988:	4628      	mov	r0, r5
 800698a:	47b8      	blx	r7
 800698c:	3001      	adds	r0, #1
 800698e:	f43f ae3d 	beq.w	800660c <_printf_float+0x9c>
 8006992:	f108 0801 	add.w	r8, r8, #1
 8006996:	68e3      	ldr	r3, [r4, #12]
 8006998:	9909      	ldr	r1, [sp, #36]	; 0x24
 800699a:	1a5b      	subs	r3, r3, r1
 800699c:	4543      	cmp	r3, r8
 800699e:	dcf0      	bgt.n	8006982 <_printf_float+0x412>
 80069a0:	e6f7      	b.n	8006792 <_printf_float+0x222>
 80069a2:	f04f 0800 	mov.w	r8, #0
 80069a6:	f104 0919 	add.w	r9, r4, #25
 80069aa:	e7f4      	b.n	8006996 <_printf_float+0x426>

080069ac <_printf_common>:
 80069ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069b0:	4616      	mov	r6, r2
 80069b2:	4699      	mov	r9, r3
 80069b4:	688a      	ldr	r2, [r1, #8]
 80069b6:	690b      	ldr	r3, [r1, #16]
 80069b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069bc:	4293      	cmp	r3, r2
 80069be:	bfb8      	it	lt
 80069c0:	4613      	movlt	r3, r2
 80069c2:	6033      	str	r3, [r6, #0]
 80069c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069c8:	4607      	mov	r7, r0
 80069ca:	460c      	mov	r4, r1
 80069cc:	b10a      	cbz	r2, 80069d2 <_printf_common+0x26>
 80069ce:	3301      	adds	r3, #1
 80069d0:	6033      	str	r3, [r6, #0]
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	0699      	lsls	r1, r3, #26
 80069d6:	bf42      	ittt	mi
 80069d8:	6833      	ldrmi	r3, [r6, #0]
 80069da:	3302      	addmi	r3, #2
 80069dc:	6033      	strmi	r3, [r6, #0]
 80069de:	6825      	ldr	r5, [r4, #0]
 80069e0:	f015 0506 	ands.w	r5, r5, #6
 80069e4:	d106      	bne.n	80069f4 <_printf_common+0x48>
 80069e6:	f104 0a19 	add.w	sl, r4, #25
 80069ea:	68e3      	ldr	r3, [r4, #12]
 80069ec:	6832      	ldr	r2, [r6, #0]
 80069ee:	1a9b      	subs	r3, r3, r2
 80069f0:	42ab      	cmp	r3, r5
 80069f2:	dc26      	bgt.n	8006a42 <_printf_common+0x96>
 80069f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069f8:	1e13      	subs	r3, r2, #0
 80069fa:	6822      	ldr	r2, [r4, #0]
 80069fc:	bf18      	it	ne
 80069fe:	2301      	movne	r3, #1
 8006a00:	0692      	lsls	r2, r2, #26
 8006a02:	d42b      	bmi.n	8006a5c <_printf_common+0xb0>
 8006a04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a08:	4649      	mov	r1, r9
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	47c0      	blx	r8
 8006a0e:	3001      	adds	r0, #1
 8006a10:	d01e      	beq.n	8006a50 <_printf_common+0xa4>
 8006a12:	6823      	ldr	r3, [r4, #0]
 8006a14:	68e5      	ldr	r5, [r4, #12]
 8006a16:	6832      	ldr	r2, [r6, #0]
 8006a18:	f003 0306 	and.w	r3, r3, #6
 8006a1c:	2b04      	cmp	r3, #4
 8006a1e:	bf08      	it	eq
 8006a20:	1aad      	subeq	r5, r5, r2
 8006a22:	68a3      	ldr	r3, [r4, #8]
 8006a24:	6922      	ldr	r2, [r4, #16]
 8006a26:	bf0c      	ite	eq
 8006a28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a2c:	2500      	movne	r5, #0
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	bfc4      	itt	gt
 8006a32:	1a9b      	subgt	r3, r3, r2
 8006a34:	18ed      	addgt	r5, r5, r3
 8006a36:	2600      	movs	r6, #0
 8006a38:	341a      	adds	r4, #26
 8006a3a:	42b5      	cmp	r5, r6
 8006a3c:	d11a      	bne.n	8006a74 <_printf_common+0xc8>
 8006a3e:	2000      	movs	r0, #0
 8006a40:	e008      	b.n	8006a54 <_printf_common+0xa8>
 8006a42:	2301      	movs	r3, #1
 8006a44:	4652      	mov	r2, sl
 8006a46:	4649      	mov	r1, r9
 8006a48:	4638      	mov	r0, r7
 8006a4a:	47c0      	blx	r8
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d103      	bne.n	8006a58 <_printf_common+0xac>
 8006a50:	f04f 30ff 	mov.w	r0, #4294967295
 8006a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a58:	3501      	adds	r5, #1
 8006a5a:	e7c6      	b.n	80069ea <_printf_common+0x3e>
 8006a5c:	18e1      	adds	r1, r4, r3
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	2030      	movs	r0, #48	; 0x30
 8006a62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a66:	4422      	add	r2, r4
 8006a68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a70:	3302      	adds	r3, #2
 8006a72:	e7c7      	b.n	8006a04 <_printf_common+0x58>
 8006a74:	2301      	movs	r3, #1
 8006a76:	4622      	mov	r2, r4
 8006a78:	4649      	mov	r1, r9
 8006a7a:	4638      	mov	r0, r7
 8006a7c:	47c0      	blx	r8
 8006a7e:	3001      	adds	r0, #1
 8006a80:	d0e6      	beq.n	8006a50 <_printf_common+0xa4>
 8006a82:	3601      	adds	r6, #1
 8006a84:	e7d9      	b.n	8006a3a <_printf_common+0x8e>
	...

08006a88 <_printf_i>:
 8006a88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a8c:	460c      	mov	r4, r1
 8006a8e:	4691      	mov	r9, r2
 8006a90:	7e27      	ldrb	r7, [r4, #24]
 8006a92:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a94:	2f78      	cmp	r7, #120	; 0x78
 8006a96:	4680      	mov	r8, r0
 8006a98:	469a      	mov	sl, r3
 8006a9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a9e:	d807      	bhi.n	8006ab0 <_printf_i+0x28>
 8006aa0:	2f62      	cmp	r7, #98	; 0x62
 8006aa2:	d80a      	bhi.n	8006aba <_printf_i+0x32>
 8006aa4:	2f00      	cmp	r7, #0
 8006aa6:	f000 80d8 	beq.w	8006c5a <_printf_i+0x1d2>
 8006aaa:	2f58      	cmp	r7, #88	; 0x58
 8006aac:	f000 80a3 	beq.w	8006bf6 <_printf_i+0x16e>
 8006ab0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ab4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ab8:	e03a      	b.n	8006b30 <_printf_i+0xa8>
 8006aba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006abe:	2b15      	cmp	r3, #21
 8006ac0:	d8f6      	bhi.n	8006ab0 <_printf_i+0x28>
 8006ac2:	a001      	add	r0, pc, #4	; (adr r0, 8006ac8 <_printf_i+0x40>)
 8006ac4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006ac8:	08006b21 	.word	0x08006b21
 8006acc:	08006b35 	.word	0x08006b35
 8006ad0:	08006ab1 	.word	0x08006ab1
 8006ad4:	08006ab1 	.word	0x08006ab1
 8006ad8:	08006ab1 	.word	0x08006ab1
 8006adc:	08006ab1 	.word	0x08006ab1
 8006ae0:	08006b35 	.word	0x08006b35
 8006ae4:	08006ab1 	.word	0x08006ab1
 8006ae8:	08006ab1 	.word	0x08006ab1
 8006aec:	08006ab1 	.word	0x08006ab1
 8006af0:	08006ab1 	.word	0x08006ab1
 8006af4:	08006c41 	.word	0x08006c41
 8006af8:	08006b65 	.word	0x08006b65
 8006afc:	08006c23 	.word	0x08006c23
 8006b00:	08006ab1 	.word	0x08006ab1
 8006b04:	08006ab1 	.word	0x08006ab1
 8006b08:	08006c63 	.word	0x08006c63
 8006b0c:	08006ab1 	.word	0x08006ab1
 8006b10:	08006b65 	.word	0x08006b65
 8006b14:	08006ab1 	.word	0x08006ab1
 8006b18:	08006ab1 	.word	0x08006ab1
 8006b1c:	08006c2b 	.word	0x08006c2b
 8006b20:	680b      	ldr	r3, [r1, #0]
 8006b22:	1d1a      	adds	r2, r3, #4
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	600a      	str	r2, [r1, #0]
 8006b28:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b30:	2301      	movs	r3, #1
 8006b32:	e0a3      	b.n	8006c7c <_printf_i+0x1f4>
 8006b34:	6825      	ldr	r5, [r4, #0]
 8006b36:	6808      	ldr	r0, [r1, #0]
 8006b38:	062e      	lsls	r6, r5, #24
 8006b3a:	f100 0304 	add.w	r3, r0, #4
 8006b3e:	d50a      	bpl.n	8006b56 <_printf_i+0xce>
 8006b40:	6805      	ldr	r5, [r0, #0]
 8006b42:	600b      	str	r3, [r1, #0]
 8006b44:	2d00      	cmp	r5, #0
 8006b46:	da03      	bge.n	8006b50 <_printf_i+0xc8>
 8006b48:	232d      	movs	r3, #45	; 0x2d
 8006b4a:	426d      	negs	r5, r5
 8006b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b50:	485e      	ldr	r0, [pc, #376]	; (8006ccc <_printf_i+0x244>)
 8006b52:	230a      	movs	r3, #10
 8006b54:	e019      	b.n	8006b8a <_printf_i+0x102>
 8006b56:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006b5a:	6805      	ldr	r5, [r0, #0]
 8006b5c:	600b      	str	r3, [r1, #0]
 8006b5e:	bf18      	it	ne
 8006b60:	b22d      	sxthne	r5, r5
 8006b62:	e7ef      	b.n	8006b44 <_printf_i+0xbc>
 8006b64:	680b      	ldr	r3, [r1, #0]
 8006b66:	6825      	ldr	r5, [r4, #0]
 8006b68:	1d18      	adds	r0, r3, #4
 8006b6a:	6008      	str	r0, [r1, #0]
 8006b6c:	0628      	lsls	r0, r5, #24
 8006b6e:	d501      	bpl.n	8006b74 <_printf_i+0xec>
 8006b70:	681d      	ldr	r5, [r3, #0]
 8006b72:	e002      	b.n	8006b7a <_printf_i+0xf2>
 8006b74:	0669      	lsls	r1, r5, #25
 8006b76:	d5fb      	bpl.n	8006b70 <_printf_i+0xe8>
 8006b78:	881d      	ldrh	r5, [r3, #0]
 8006b7a:	4854      	ldr	r0, [pc, #336]	; (8006ccc <_printf_i+0x244>)
 8006b7c:	2f6f      	cmp	r7, #111	; 0x6f
 8006b7e:	bf0c      	ite	eq
 8006b80:	2308      	moveq	r3, #8
 8006b82:	230a      	movne	r3, #10
 8006b84:	2100      	movs	r1, #0
 8006b86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b8a:	6866      	ldr	r6, [r4, #4]
 8006b8c:	60a6      	str	r6, [r4, #8]
 8006b8e:	2e00      	cmp	r6, #0
 8006b90:	bfa2      	ittt	ge
 8006b92:	6821      	ldrge	r1, [r4, #0]
 8006b94:	f021 0104 	bicge.w	r1, r1, #4
 8006b98:	6021      	strge	r1, [r4, #0]
 8006b9a:	b90d      	cbnz	r5, 8006ba0 <_printf_i+0x118>
 8006b9c:	2e00      	cmp	r6, #0
 8006b9e:	d04d      	beq.n	8006c3c <_printf_i+0x1b4>
 8006ba0:	4616      	mov	r6, r2
 8006ba2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006ba6:	fb03 5711 	mls	r7, r3, r1, r5
 8006baa:	5dc7      	ldrb	r7, [r0, r7]
 8006bac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bb0:	462f      	mov	r7, r5
 8006bb2:	42bb      	cmp	r3, r7
 8006bb4:	460d      	mov	r5, r1
 8006bb6:	d9f4      	bls.n	8006ba2 <_printf_i+0x11a>
 8006bb8:	2b08      	cmp	r3, #8
 8006bba:	d10b      	bne.n	8006bd4 <_printf_i+0x14c>
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	07df      	lsls	r7, r3, #31
 8006bc0:	d508      	bpl.n	8006bd4 <_printf_i+0x14c>
 8006bc2:	6923      	ldr	r3, [r4, #16]
 8006bc4:	6861      	ldr	r1, [r4, #4]
 8006bc6:	4299      	cmp	r1, r3
 8006bc8:	bfde      	ittt	le
 8006bca:	2330      	movle	r3, #48	; 0x30
 8006bcc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bd0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006bd4:	1b92      	subs	r2, r2, r6
 8006bd6:	6122      	str	r2, [r4, #16]
 8006bd8:	f8cd a000 	str.w	sl, [sp]
 8006bdc:	464b      	mov	r3, r9
 8006bde:	aa03      	add	r2, sp, #12
 8006be0:	4621      	mov	r1, r4
 8006be2:	4640      	mov	r0, r8
 8006be4:	f7ff fee2 	bl	80069ac <_printf_common>
 8006be8:	3001      	adds	r0, #1
 8006bea:	d14c      	bne.n	8006c86 <_printf_i+0x1fe>
 8006bec:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf0:	b004      	add	sp, #16
 8006bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf6:	4835      	ldr	r0, [pc, #212]	; (8006ccc <_printf_i+0x244>)
 8006bf8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	680e      	ldr	r6, [r1, #0]
 8006c00:	061f      	lsls	r7, r3, #24
 8006c02:	f856 5b04 	ldr.w	r5, [r6], #4
 8006c06:	600e      	str	r6, [r1, #0]
 8006c08:	d514      	bpl.n	8006c34 <_printf_i+0x1ac>
 8006c0a:	07d9      	lsls	r1, r3, #31
 8006c0c:	bf44      	itt	mi
 8006c0e:	f043 0320 	orrmi.w	r3, r3, #32
 8006c12:	6023      	strmi	r3, [r4, #0]
 8006c14:	b91d      	cbnz	r5, 8006c1e <_printf_i+0x196>
 8006c16:	6823      	ldr	r3, [r4, #0]
 8006c18:	f023 0320 	bic.w	r3, r3, #32
 8006c1c:	6023      	str	r3, [r4, #0]
 8006c1e:	2310      	movs	r3, #16
 8006c20:	e7b0      	b.n	8006b84 <_printf_i+0xfc>
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	f043 0320 	orr.w	r3, r3, #32
 8006c28:	6023      	str	r3, [r4, #0]
 8006c2a:	2378      	movs	r3, #120	; 0x78
 8006c2c:	4828      	ldr	r0, [pc, #160]	; (8006cd0 <_printf_i+0x248>)
 8006c2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c32:	e7e3      	b.n	8006bfc <_printf_i+0x174>
 8006c34:	065e      	lsls	r6, r3, #25
 8006c36:	bf48      	it	mi
 8006c38:	b2ad      	uxthmi	r5, r5
 8006c3a:	e7e6      	b.n	8006c0a <_printf_i+0x182>
 8006c3c:	4616      	mov	r6, r2
 8006c3e:	e7bb      	b.n	8006bb8 <_printf_i+0x130>
 8006c40:	680b      	ldr	r3, [r1, #0]
 8006c42:	6826      	ldr	r6, [r4, #0]
 8006c44:	6960      	ldr	r0, [r4, #20]
 8006c46:	1d1d      	adds	r5, r3, #4
 8006c48:	600d      	str	r5, [r1, #0]
 8006c4a:	0635      	lsls	r5, r6, #24
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	d501      	bpl.n	8006c54 <_printf_i+0x1cc>
 8006c50:	6018      	str	r0, [r3, #0]
 8006c52:	e002      	b.n	8006c5a <_printf_i+0x1d2>
 8006c54:	0671      	lsls	r1, r6, #25
 8006c56:	d5fb      	bpl.n	8006c50 <_printf_i+0x1c8>
 8006c58:	8018      	strh	r0, [r3, #0]
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	6123      	str	r3, [r4, #16]
 8006c5e:	4616      	mov	r6, r2
 8006c60:	e7ba      	b.n	8006bd8 <_printf_i+0x150>
 8006c62:	680b      	ldr	r3, [r1, #0]
 8006c64:	1d1a      	adds	r2, r3, #4
 8006c66:	600a      	str	r2, [r1, #0]
 8006c68:	681e      	ldr	r6, [r3, #0]
 8006c6a:	6862      	ldr	r2, [r4, #4]
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	4630      	mov	r0, r6
 8006c70:	f7f9 faee 	bl	8000250 <memchr>
 8006c74:	b108      	cbz	r0, 8006c7a <_printf_i+0x1f2>
 8006c76:	1b80      	subs	r0, r0, r6
 8006c78:	6060      	str	r0, [r4, #4]
 8006c7a:	6863      	ldr	r3, [r4, #4]
 8006c7c:	6123      	str	r3, [r4, #16]
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c84:	e7a8      	b.n	8006bd8 <_printf_i+0x150>
 8006c86:	6923      	ldr	r3, [r4, #16]
 8006c88:	4632      	mov	r2, r6
 8006c8a:	4649      	mov	r1, r9
 8006c8c:	4640      	mov	r0, r8
 8006c8e:	47d0      	blx	sl
 8006c90:	3001      	adds	r0, #1
 8006c92:	d0ab      	beq.n	8006bec <_printf_i+0x164>
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	079b      	lsls	r3, r3, #30
 8006c98:	d413      	bmi.n	8006cc2 <_printf_i+0x23a>
 8006c9a:	68e0      	ldr	r0, [r4, #12]
 8006c9c:	9b03      	ldr	r3, [sp, #12]
 8006c9e:	4298      	cmp	r0, r3
 8006ca0:	bfb8      	it	lt
 8006ca2:	4618      	movlt	r0, r3
 8006ca4:	e7a4      	b.n	8006bf0 <_printf_i+0x168>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	4632      	mov	r2, r6
 8006caa:	4649      	mov	r1, r9
 8006cac:	4640      	mov	r0, r8
 8006cae:	47d0      	blx	sl
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	d09b      	beq.n	8006bec <_printf_i+0x164>
 8006cb4:	3501      	adds	r5, #1
 8006cb6:	68e3      	ldr	r3, [r4, #12]
 8006cb8:	9903      	ldr	r1, [sp, #12]
 8006cba:	1a5b      	subs	r3, r3, r1
 8006cbc:	42ab      	cmp	r3, r5
 8006cbe:	dcf2      	bgt.n	8006ca6 <_printf_i+0x21e>
 8006cc0:	e7eb      	b.n	8006c9a <_printf_i+0x212>
 8006cc2:	2500      	movs	r5, #0
 8006cc4:	f104 0619 	add.w	r6, r4, #25
 8006cc8:	e7f5      	b.n	8006cb6 <_printf_i+0x22e>
 8006cca:	bf00      	nop
 8006ccc:	0800b166 	.word	0x0800b166
 8006cd0:	0800b177 	.word	0x0800b177

08006cd4 <_scanf_float>:
 8006cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd8:	b087      	sub	sp, #28
 8006cda:	4617      	mov	r7, r2
 8006cdc:	9303      	str	r3, [sp, #12]
 8006cde:	688b      	ldr	r3, [r1, #8]
 8006ce0:	1e5a      	subs	r2, r3, #1
 8006ce2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006ce6:	bf83      	ittte	hi
 8006ce8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006cec:	195b      	addhi	r3, r3, r5
 8006cee:	9302      	strhi	r3, [sp, #8]
 8006cf0:	2300      	movls	r3, #0
 8006cf2:	bf86      	itte	hi
 8006cf4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006cf8:	608b      	strhi	r3, [r1, #8]
 8006cfa:	9302      	strls	r3, [sp, #8]
 8006cfc:	680b      	ldr	r3, [r1, #0]
 8006cfe:	468b      	mov	fp, r1
 8006d00:	2500      	movs	r5, #0
 8006d02:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006d06:	f84b 3b1c 	str.w	r3, [fp], #28
 8006d0a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006d0e:	4680      	mov	r8, r0
 8006d10:	460c      	mov	r4, r1
 8006d12:	465e      	mov	r6, fp
 8006d14:	46aa      	mov	sl, r5
 8006d16:	46a9      	mov	r9, r5
 8006d18:	9501      	str	r5, [sp, #4]
 8006d1a:	68a2      	ldr	r2, [r4, #8]
 8006d1c:	b152      	cbz	r2, 8006d34 <_scanf_float+0x60>
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	2b4e      	cmp	r3, #78	; 0x4e
 8006d24:	d864      	bhi.n	8006df0 <_scanf_float+0x11c>
 8006d26:	2b40      	cmp	r3, #64	; 0x40
 8006d28:	d83c      	bhi.n	8006da4 <_scanf_float+0xd0>
 8006d2a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006d2e:	b2c8      	uxtb	r0, r1
 8006d30:	280e      	cmp	r0, #14
 8006d32:	d93a      	bls.n	8006daa <_scanf_float+0xd6>
 8006d34:	f1b9 0f00 	cmp.w	r9, #0
 8006d38:	d003      	beq.n	8006d42 <_scanf_float+0x6e>
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d40:	6023      	str	r3, [r4, #0]
 8006d42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d46:	f1ba 0f01 	cmp.w	sl, #1
 8006d4a:	f200 8113 	bhi.w	8006f74 <_scanf_float+0x2a0>
 8006d4e:	455e      	cmp	r6, fp
 8006d50:	f200 8105 	bhi.w	8006f5e <_scanf_float+0x28a>
 8006d54:	2501      	movs	r5, #1
 8006d56:	4628      	mov	r0, r5
 8006d58:	b007      	add	sp, #28
 8006d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d5e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006d62:	2a0d      	cmp	r2, #13
 8006d64:	d8e6      	bhi.n	8006d34 <_scanf_float+0x60>
 8006d66:	a101      	add	r1, pc, #4	; (adr r1, 8006d6c <_scanf_float+0x98>)
 8006d68:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006d6c:	08006eab 	.word	0x08006eab
 8006d70:	08006d35 	.word	0x08006d35
 8006d74:	08006d35 	.word	0x08006d35
 8006d78:	08006d35 	.word	0x08006d35
 8006d7c:	08006f0b 	.word	0x08006f0b
 8006d80:	08006ee3 	.word	0x08006ee3
 8006d84:	08006d35 	.word	0x08006d35
 8006d88:	08006d35 	.word	0x08006d35
 8006d8c:	08006eb9 	.word	0x08006eb9
 8006d90:	08006d35 	.word	0x08006d35
 8006d94:	08006d35 	.word	0x08006d35
 8006d98:	08006d35 	.word	0x08006d35
 8006d9c:	08006d35 	.word	0x08006d35
 8006da0:	08006e71 	.word	0x08006e71
 8006da4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006da8:	e7db      	b.n	8006d62 <_scanf_float+0x8e>
 8006daa:	290e      	cmp	r1, #14
 8006dac:	d8c2      	bhi.n	8006d34 <_scanf_float+0x60>
 8006dae:	a001      	add	r0, pc, #4	; (adr r0, 8006db4 <_scanf_float+0xe0>)
 8006db0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006db4:	08006e63 	.word	0x08006e63
 8006db8:	08006d35 	.word	0x08006d35
 8006dbc:	08006e63 	.word	0x08006e63
 8006dc0:	08006ef7 	.word	0x08006ef7
 8006dc4:	08006d35 	.word	0x08006d35
 8006dc8:	08006e11 	.word	0x08006e11
 8006dcc:	08006e4d 	.word	0x08006e4d
 8006dd0:	08006e4d 	.word	0x08006e4d
 8006dd4:	08006e4d 	.word	0x08006e4d
 8006dd8:	08006e4d 	.word	0x08006e4d
 8006ddc:	08006e4d 	.word	0x08006e4d
 8006de0:	08006e4d 	.word	0x08006e4d
 8006de4:	08006e4d 	.word	0x08006e4d
 8006de8:	08006e4d 	.word	0x08006e4d
 8006dec:	08006e4d 	.word	0x08006e4d
 8006df0:	2b6e      	cmp	r3, #110	; 0x6e
 8006df2:	d809      	bhi.n	8006e08 <_scanf_float+0x134>
 8006df4:	2b60      	cmp	r3, #96	; 0x60
 8006df6:	d8b2      	bhi.n	8006d5e <_scanf_float+0x8a>
 8006df8:	2b54      	cmp	r3, #84	; 0x54
 8006dfa:	d077      	beq.n	8006eec <_scanf_float+0x218>
 8006dfc:	2b59      	cmp	r3, #89	; 0x59
 8006dfe:	d199      	bne.n	8006d34 <_scanf_float+0x60>
 8006e00:	2d07      	cmp	r5, #7
 8006e02:	d197      	bne.n	8006d34 <_scanf_float+0x60>
 8006e04:	2508      	movs	r5, #8
 8006e06:	e029      	b.n	8006e5c <_scanf_float+0x188>
 8006e08:	2b74      	cmp	r3, #116	; 0x74
 8006e0a:	d06f      	beq.n	8006eec <_scanf_float+0x218>
 8006e0c:	2b79      	cmp	r3, #121	; 0x79
 8006e0e:	e7f6      	b.n	8006dfe <_scanf_float+0x12a>
 8006e10:	6821      	ldr	r1, [r4, #0]
 8006e12:	05c8      	lsls	r0, r1, #23
 8006e14:	d51a      	bpl.n	8006e4c <_scanf_float+0x178>
 8006e16:	9b02      	ldr	r3, [sp, #8]
 8006e18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006e1c:	6021      	str	r1, [r4, #0]
 8006e1e:	f109 0901 	add.w	r9, r9, #1
 8006e22:	b11b      	cbz	r3, 8006e2c <_scanf_float+0x158>
 8006e24:	3b01      	subs	r3, #1
 8006e26:	3201      	adds	r2, #1
 8006e28:	9302      	str	r3, [sp, #8]
 8006e2a:	60a2      	str	r2, [r4, #8]
 8006e2c:	68a3      	ldr	r3, [r4, #8]
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	60a3      	str	r3, [r4, #8]
 8006e32:	6923      	ldr	r3, [r4, #16]
 8006e34:	3301      	adds	r3, #1
 8006e36:	6123      	str	r3, [r4, #16]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	607b      	str	r3, [r7, #4]
 8006e40:	f340 8084 	ble.w	8006f4c <_scanf_float+0x278>
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	3301      	adds	r3, #1
 8006e48:	603b      	str	r3, [r7, #0]
 8006e4a:	e766      	b.n	8006d1a <_scanf_float+0x46>
 8006e4c:	eb1a 0f05 	cmn.w	sl, r5
 8006e50:	f47f af70 	bne.w	8006d34 <_scanf_float+0x60>
 8006e54:	6822      	ldr	r2, [r4, #0]
 8006e56:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006e5a:	6022      	str	r2, [r4, #0]
 8006e5c:	f806 3b01 	strb.w	r3, [r6], #1
 8006e60:	e7e4      	b.n	8006e2c <_scanf_float+0x158>
 8006e62:	6822      	ldr	r2, [r4, #0]
 8006e64:	0610      	lsls	r0, r2, #24
 8006e66:	f57f af65 	bpl.w	8006d34 <_scanf_float+0x60>
 8006e6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e6e:	e7f4      	b.n	8006e5a <_scanf_float+0x186>
 8006e70:	f1ba 0f00 	cmp.w	sl, #0
 8006e74:	d10e      	bne.n	8006e94 <_scanf_float+0x1c0>
 8006e76:	f1b9 0f00 	cmp.w	r9, #0
 8006e7a:	d10e      	bne.n	8006e9a <_scanf_float+0x1c6>
 8006e7c:	6822      	ldr	r2, [r4, #0]
 8006e7e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006e82:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006e86:	d108      	bne.n	8006e9a <_scanf_float+0x1c6>
 8006e88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006e8c:	6022      	str	r2, [r4, #0]
 8006e8e:	f04f 0a01 	mov.w	sl, #1
 8006e92:	e7e3      	b.n	8006e5c <_scanf_float+0x188>
 8006e94:	f1ba 0f02 	cmp.w	sl, #2
 8006e98:	d055      	beq.n	8006f46 <_scanf_float+0x272>
 8006e9a:	2d01      	cmp	r5, #1
 8006e9c:	d002      	beq.n	8006ea4 <_scanf_float+0x1d0>
 8006e9e:	2d04      	cmp	r5, #4
 8006ea0:	f47f af48 	bne.w	8006d34 <_scanf_float+0x60>
 8006ea4:	3501      	adds	r5, #1
 8006ea6:	b2ed      	uxtb	r5, r5
 8006ea8:	e7d8      	b.n	8006e5c <_scanf_float+0x188>
 8006eaa:	f1ba 0f01 	cmp.w	sl, #1
 8006eae:	f47f af41 	bne.w	8006d34 <_scanf_float+0x60>
 8006eb2:	f04f 0a02 	mov.w	sl, #2
 8006eb6:	e7d1      	b.n	8006e5c <_scanf_float+0x188>
 8006eb8:	b97d      	cbnz	r5, 8006eda <_scanf_float+0x206>
 8006eba:	f1b9 0f00 	cmp.w	r9, #0
 8006ebe:	f47f af3c 	bne.w	8006d3a <_scanf_float+0x66>
 8006ec2:	6822      	ldr	r2, [r4, #0]
 8006ec4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006ec8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006ecc:	f47f af39 	bne.w	8006d42 <_scanf_float+0x6e>
 8006ed0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006ed4:	6022      	str	r2, [r4, #0]
 8006ed6:	2501      	movs	r5, #1
 8006ed8:	e7c0      	b.n	8006e5c <_scanf_float+0x188>
 8006eda:	2d03      	cmp	r5, #3
 8006edc:	d0e2      	beq.n	8006ea4 <_scanf_float+0x1d0>
 8006ede:	2d05      	cmp	r5, #5
 8006ee0:	e7de      	b.n	8006ea0 <_scanf_float+0x1cc>
 8006ee2:	2d02      	cmp	r5, #2
 8006ee4:	f47f af26 	bne.w	8006d34 <_scanf_float+0x60>
 8006ee8:	2503      	movs	r5, #3
 8006eea:	e7b7      	b.n	8006e5c <_scanf_float+0x188>
 8006eec:	2d06      	cmp	r5, #6
 8006eee:	f47f af21 	bne.w	8006d34 <_scanf_float+0x60>
 8006ef2:	2507      	movs	r5, #7
 8006ef4:	e7b2      	b.n	8006e5c <_scanf_float+0x188>
 8006ef6:	6822      	ldr	r2, [r4, #0]
 8006ef8:	0591      	lsls	r1, r2, #22
 8006efa:	f57f af1b 	bpl.w	8006d34 <_scanf_float+0x60>
 8006efe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006f02:	6022      	str	r2, [r4, #0]
 8006f04:	f8cd 9004 	str.w	r9, [sp, #4]
 8006f08:	e7a8      	b.n	8006e5c <_scanf_float+0x188>
 8006f0a:	6822      	ldr	r2, [r4, #0]
 8006f0c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006f10:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006f14:	d006      	beq.n	8006f24 <_scanf_float+0x250>
 8006f16:	0550      	lsls	r0, r2, #21
 8006f18:	f57f af0c 	bpl.w	8006d34 <_scanf_float+0x60>
 8006f1c:	f1b9 0f00 	cmp.w	r9, #0
 8006f20:	f43f af0f 	beq.w	8006d42 <_scanf_float+0x6e>
 8006f24:	0591      	lsls	r1, r2, #22
 8006f26:	bf58      	it	pl
 8006f28:	9901      	ldrpl	r1, [sp, #4]
 8006f2a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006f2e:	bf58      	it	pl
 8006f30:	eba9 0101 	subpl.w	r1, r9, r1
 8006f34:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006f38:	bf58      	it	pl
 8006f3a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006f3e:	6022      	str	r2, [r4, #0]
 8006f40:	f04f 0900 	mov.w	r9, #0
 8006f44:	e78a      	b.n	8006e5c <_scanf_float+0x188>
 8006f46:	f04f 0a03 	mov.w	sl, #3
 8006f4a:	e787      	b.n	8006e5c <_scanf_float+0x188>
 8006f4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006f50:	4639      	mov	r1, r7
 8006f52:	4640      	mov	r0, r8
 8006f54:	4798      	blx	r3
 8006f56:	2800      	cmp	r0, #0
 8006f58:	f43f aedf 	beq.w	8006d1a <_scanf_float+0x46>
 8006f5c:	e6ea      	b.n	8006d34 <_scanf_float+0x60>
 8006f5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f66:	463a      	mov	r2, r7
 8006f68:	4640      	mov	r0, r8
 8006f6a:	4798      	blx	r3
 8006f6c:	6923      	ldr	r3, [r4, #16]
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	6123      	str	r3, [r4, #16]
 8006f72:	e6ec      	b.n	8006d4e <_scanf_float+0x7a>
 8006f74:	1e6b      	subs	r3, r5, #1
 8006f76:	2b06      	cmp	r3, #6
 8006f78:	d825      	bhi.n	8006fc6 <_scanf_float+0x2f2>
 8006f7a:	2d02      	cmp	r5, #2
 8006f7c:	d836      	bhi.n	8006fec <_scanf_float+0x318>
 8006f7e:	455e      	cmp	r6, fp
 8006f80:	f67f aee8 	bls.w	8006d54 <_scanf_float+0x80>
 8006f84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006f88:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f8c:	463a      	mov	r2, r7
 8006f8e:	4640      	mov	r0, r8
 8006f90:	4798      	blx	r3
 8006f92:	6923      	ldr	r3, [r4, #16]
 8006f94:	3b01      	subs	r3, #1
 8006f96:	6123      	str	r3, [r4, #16]
 8006f98:	e7f1      	b.n	8006f7e <_scanf_float+0x2aa>
 8006f9a:	9802      	ldr	r0, [sp, #8]
 8006f9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fa0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006fa4:	9002      	str	r0, [sp, #8]
 8006fa6:	463a      	mov	r2, r7
 8006fa8:	4640      	mov	r0, r8
 8006faa:	4798      	blx	r3
 8006fac:	6923      	ldr	r3, [r4, #16]
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	6123      	str	r3, [r4, #16]
 8006fb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fb6:	fa5f fa8a 	uxtb.w	sl, sl
 8006fba:	f1ba 0f02 	cmp.w	sl, #2
 8006fbe:	d1ec      	bne.n	8006f9a <_scanf_float+0x2c6>
 8006fc0:	3d03      	subs	r5, #3
 8006fc2:	b2ed      	uxtb	r5, r5
 8006fc4:	1b76      	subs	r6, r6, r5
 8006fc6:	6823      	ldr	r3, [r4, #0]
 8006fc8:	05da      	lsls	r2, r3, #23
 8006fca:	d52f      	bpl.n	800702c <_scanf_float+0x358>
 8006fcc:	055b      	lsls	r3, r3, #21
 8006fce:	d510      	bpl.n	8006ff2 <_scanf_float+0x31e>
 8006fd0:	455e      	cmp	r6, fp
 8006fd2:	f67f aebf 	bls.w	8006d54 <_scanf_float+0x80>
 8006fd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006fda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006fde:	463a      	mov	r2, r7
 8006fe0:	4640      	mov	r0, r8
 8006fe2:	4798      	blx	r3
 8006fe4:	6923      	ldr	r3, [r4, #16]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	6123      	str	r3, [r4, #16]
 8006fea:	e7f1      	b.n	8006fd0 <_scanf_float+0x2fc>
 8006fec:	46aa      	mov	sl, r5
 8006fee:	9602      	str	r6, [sp, #8]
 8006ff0:	e7df      	b.n	8006fb2 <_scanf_float+0x2de>
 8006ff2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006ff6:	6923      	ldr	r3, [r4, #16]
 8006ff8:	2965      	cmp	r1, #101	; 0x65
 8006ffa:	f103 33ff 	add.w	r3, r3, #4294967295
 8006ffe:	f106 35ff 	add.w	r5, r6, #4294967295
 8007002:	6123      	str	r3, [r4, #16]
 8007004:	d00c      	beq.n	8007020 <_scanf_float+0x34c>
 8007006:	2945      	cmp	r1, #69	; 0x45
 8007008:	d00a      	beq.n	8007020 <_scanf_float+0x34c>
 800700a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800700e:	463a      	mov	r2, r7
 8007010:	4640      	mov	r0, r8
 8007012:	4798      	blx	r3
 8007014:	6923      	ldr	r3, [r4, #16]
 8007016:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800701a:	3b01      	subs	r3, #1
 800701c:	1eb5      	subs	r5, r6, #2
 800701e:	6123      	str	r3, [r4, #16]
 8007020:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007024:	463a      	mov	r2, r7
 8007026:	4640      	mov	r0, r8
 8007028:	4798      	blx	r3
 800702a:	462e      	mov	r6, r5
 800702c:	6825      	ldr	r5, [r4, #0]
 800702e:	f015 0510 	ands.w	r5, r5, #16
 8007032:	d14d      	bne.n	80070d0 <_scanf_float+0x3fc>
 8007034:	7035      	strb	r5, [r6, #0]
 8007036:	6823      	ldr	r3, [r4, #0]
 8007038:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800703c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007040:	d11a      	bne.n	8007078 <_scanf_float+0x3a4>
 8007042:	9b01      	ldr	r3, [sp, #4]
 8007044:	454b      	cmp	r3, r9
 8007046:	eba3 0209 	sub.w	r2, r3, r9
 800704a:	d122      	bne.n	8007092 <_scanf_float+0x3be>
 800704c:	2200      	movs	r2, #0
 800704e:	4659      	mov	r1, fp
 8007050:	4640      	mov	r0, r8
 8007052:	f000 feff 	bl	8007e54 <_strtod_r>
 8007056:	9b03      	ldr	r3, [sp, #12]
 8007058:	6821      	ldr	r1, [r4, #0]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f011 0f02 	tst.w	r1, #2
 8007060:	f103 0204 	add.w	r2, r3, #4
 8007064:	d020      	beq.n	80070a8 <_scanf_float+0x3d4>
 8007066:	9903      	ldr	r1, [sp, #12]
 8007068:	600a      	str	r2, [r1, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	ed83 0b00 	vstr	d0, [r3]
 8007070:	68e3      	ldr	r3, [r4, #12]
 8007072:	3301      	adds	r3, #1
 8007074:	60e3      	str	r3, [r4, #12]
 8007076:	e66e      	b.n	8006d56 <_scanf_float+0x82>
 8007078:	9b04      	ldr	r3, [sp, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d0e6      	beq.n	800704c <_scanf_float+0x378>
 800707e:	9905      	ldr	r1, [sp, #20]
 8007080:	230a      	movs	r3, #10
 8007082:	462a      	mov	r2, r5
 8007084:	3101      	adds	r1, #1
 8007086:	4640      	mov	r0, r8
 8007088:	f000 ff6e 	bl	8007f68 <_strtol_r>
 800708c:	9b04      	ldr	r3, [sp, #16]
 800708e:	9e05      	ldr	r6, [sp, #20]
 8007090:	1ac2      	subs	r2, r0, r3
 8007092:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007096:	429e      	cmp	r6, r3
 8007098:	bf28      	it	cs
 800709a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800709e:	490d      	ldr	r1, [pc, #52]	; (80070d4 <_scanf_float+0x400>)
 80070a0:	4630      	mov	r0, r6
 80070a2:	f000 f8c5 	bl	8007230 <siprintf>
 80070a6:	e7d1      	b.n	800704c <_scanf_float+0x378>
 80070a8:	f011 0f04 	tst.w	r1, #4
 80070ac:	9903      	ldr	r1, [sp, #12]
 80070ae:	600a      	str	r2, [r1, #0]
 80070b0:	d1db      	bne.n	800706a <_scanf_float+0x396>
 80070b2:	eeb4 0b40 	vcmp.f64	d0, d0
 80070b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ba:	681e      	ldr	r6, [r3, #0]
 80070bc:	d705      	bvc.n	80070ca <_scanf_float+0x3f6>
 80070be:	4806      	ldr	r0, [pc, #24]	; (80070d8 <_scanf_float+0x404>)
 80070c0:	f000 f8b0 	bl	8007224 <nanf>
 80070c4:	ed86 0a00 	vstr	s0, [r6]
 80070c8:	e7d2      	b.n	8007070 <_scanf_float+0x39c>
 80070ca:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80070ce:	e7f9      	b.n	80070c4 <_scanf_float+0x3f0>
 80070d0:	2500      	movs	r5, #0
 80070d2:	e640      	b.n	8006d56 <_scanf_float+0x82>
 80070d4:	0800b188 	.word	0x0800b188
 80070d8:	0800b600 	.word	0x0800b600

080070dc <iprintf>:
 80070dc:	b40f      	push	{r0, r1, r2, r3}
 80070de:	4b0a      	ldr	r3, [pc, #40]	; (8007108 <iprintf+0x2c>)
 80070e0:	b513      	push	{r0, r1, r4, lr}
 80070e2:	681c      	ldr	r4, [r3, #0]
 80070e4:	b124      	cbz	r4, 80070f0 <iprintf+0x14>
 80070e6:	69a3      	ldr	r3, [r4, #24]
 80070e8:	b913      	cbnz	r3, 80070f0 <iprintf+0x14>
 80070ea:	4620      	mov	r0, r4
 80070ec:	f001 ff28 	bl	8008f40 <__sinit>
 80070f0:	ab05      	add	r3, sp, #20
 80070f2:	9a04      	ldr	r2, [sp, #16]
 80070f4:	68a1      	ldr	r1, [r4, #8]
 80070f6:	9301      	str	r3, [sp, #4]
 80070f8:	4620      	mov	r0, r4
 80070fa:	f003 fabd 	bl	800a678 <_vfiprintf_r>
 80070fe:	b002      	add	sp, #8
 8007100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007104:	b004      	add	sp, #16
 8007106:	4770      	bx	lr
 8007108:	20000010 	.word	0x20000010

0800710c <putchar>:
 800710c:	4b09      	ldr	r3, [pc, #36]	; (8007134 <putchar+0x28>)
 800710e:	b513      	push	{r0, r1, r4, lr}
 8007110:	681c      	ldr	r4, [r3, #0]
 8007112:	4601      	mov	r1, r0
 8007114:	b134      	cbz	r4, 8007124 <putchar+0x18>
 8007116:	69a3      	ldr	r3, [r4, #24]
 8007118:	b923      	cbnz	r3, 8007124 <putchar+0x18>
 800711a:	9001      	str	r0, [sp, #4]
 800711c:	4620      	mov	r0, r4
 800711e:	f001 ff0f 	bl	8008f40 <__sinit>
 8007122:	9901      	ldr	r1, [sp, #4]
 8007124:	68a2      	ldr	r2, [r4, #8]
 8007126:	4620      	mov	r0, r4
 8007128:	b002      	add	sp, #8
 800712a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800712e:	f003 bbd3 	b.w	800a8d8 <_putc_r>
 8007132:	bf00      	nop
 8007134:	20000010 	.word	0x20000010

08007138 <_puts_r>:
 8007138:	b570      	push	{r4, r5, r6, lr}
 800713a:	460e      	mov	r6, r1
 800713c:	4605      	mov	r5, r0
 800713e:	b118      	cbz	r0, 8007148 <_puts_r+0x10>
 8007140:	6983      	ldr	r3, [r0, #24]
 8007142:	b90b      	cbnz	r3, 8007148 <_puts_r+0x10>
 8007144:	f001 fefc 	bl	8008f40 <__sinit>
 8007148:	69ab      	ldr	r3, [r5, #24]
 800714a:	68ac      	ldr	r4, [r5, #8]
 800714c:	b913      	cbnz	r3, 8007154 <_puts_r+0x1c>
 800714e:	4628      	mov	r0, r5
 8007150:	f001 fef6 	bl	8008f40 <__sinit>
 8007154:	4b2c      	ldr	r3, [pc, #176]	; (8007208 <_puts_r+0xd0>)
 8007156:	429c      	cmp	r4, r3
 8007158:	d120      	bne.n	800719c <_puts_r+0x64>
 800715a:	686c      	ldr	r4, [r5, #4]
 800715c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800715e:	07db      	lsls	r3, r3, #31
 8007160:	d405      	bmi.n	800716e <_puts_r+0x36>
 8007162:	89a3      	ldrh	r3, [r4, #12]
 8007164:	0598      	lsls	r0, r3, #22
 8007166:	d402      	bmi.n	800716e <_puts_r+0x36>
 8007168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800716a:	f002 fafa 	bl	8009762 <__retarget_lock_acquire_recursive>
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	0719      	lsls	r1, r3, #28
 8007172:	d51d      	bpl.n	80071b0 <_puts_r+0x78>
 8007174:	6923      	ldr	r3, [r4, #16]
 8007176:	b1db      	cbz	r3, 80071b0 <_puts_r+0x78>
 8007178:	3e01      	subs	r6, #1
 800717a:	68a3      	ldr	r3, [r4, #8]
 800717c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007180:	3b01      	subs	r3, #1
 8007182:	60a3      	str	r3, [r4, #8]
 8007184:	bb39      	cbnz	r1, 80071d6 <_puts_r+0x9e>
 8007186:	2b00      	cmp	r3, #0
 8007188:	da38      	bge.n	80071fc <_puts_r+0xc4>
 800718a:	4622      	mov	r2, r4
 800718c:	210a      	movs	r1, #10
 800718e:	4628      	mov	r0, r5
 8007190:	f000 feec 	bl	8007f6c <__swbuf_r>
 8007194:	3001      	adds	r0, #1
 8007196:	d011      	beq.n	80071bc <_puts_r+0x84>
 8007198:	250a      	movs	r5, #10
 800719a:	e011      	b.n	80071c0 <_puts_r+0x88>
 800719c:	4b1b      	ldr	r3, [pc, #108]	; (800720c <_puts_r+0xd4>)
 800719e:	429c      	cmp	r4, r3
 80071a0:	d101      	bne.n	80071a6 <_puts_r+0x6e>
 80071a2:	68ac      	ldr	r4, [r5, #8]
 80071a4:	e7da      	b.n	800715c <_puts_r+0x24>
 80071a6:	4b1a      	ldr	r3, [pc, #104]	; (8007210 <_puts_r+0xd8>)
 80071a8:	429c      	cmp	r4, r3
 80071aa:	bf08      	it	eq
 80071ac:	68ec      	ldreq	r4, [r5, #12]
 80071ae:	e7d5      	b.n	800715c <_puts_r+0x24>
 80071b0:	4621      	mov	r1, r4
 80071b2:	4628      	mov	r0, r5
 80071b4:	f000 ff2c 	bl	8008010 <__swsetup_r>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d0dd      	beq.n	8007178 <_puts_r+0x40>
 80071bc:	f04f 35ff 	mov.w	r5, #4294967295
 80071c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071c2:	07da      	lsls	r2, r3, #31
 80071c4:	d405      	bmi.n	80071d2 <_puts_r+0x9a>
 80071c6:	89a3      	ldrh	r3, [r4, #12]
 80071c8:	059b      	lsls	r3, r3, #22
 80071ca:	d402      	bmi.n	80071d2 <_puts_r+0x9a>
 80071cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071ce:	f002 fac9 	bl	8009764 <__retarget_lock_release_recursive>
 80071d2:	4628      	mov	r0, r5
 80071d4:	bd70      	pop	{r4, r5, r6, pc}
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	da04      	bge.n	80071e4 <_puts_r+0xac>
 80071da:	69a2      	ldr	r2, [r4, #24]
 80071dc:	429a      	cmp	r2, r3
 80071de:	dc06      	bgt.n	80071ee <_puts_r+0xb6>
 80071e0:	290a      	cmp	r1, #10
 80071e2:	d004      	beq.n	80071ee <_puts_r+0xb6>
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	1c5a      	adds	r2, r3, #1
 80071e8:	6022      	str	r2, [r4, #0]
 80071ea:	7019      	strb	r1, [r3, #0]
 80071ec:	e7c5      	b.n	800717a <_puts_r+0x42>
 80071ee:	4622      	mov	r2, r4
 80071f0:	4628      	mov	r0, r5
 80071f2:	f000 febb 	bl	8007f6c <__swbuf_r>
 80071f6:	3001      	adds	r0, #1
 80071f8:	d1bf      	bne.n	800717a <_puts_r+0x42>
 80071fa:	e7df      	b.n	80071bc <_puts_r+0x84>
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	250a      	movs	r5, #10
 8007200:	1c5a      	adds	r2, r3, #1
 8007202:	6022      	str	r2, [r4, #0]
 8007204:	701d      	strb	r5, [r3, #0]
 8007206:	e7db      	b.n	80071c0 <_puts_r+0x88>
 8007208:	0800b398 	.word	0x0800b398
 800720c:	0800b3b8 	.word	0x0800b3b8
 8007210:	0800b378 	.word	0x0800b378

08007214 <puts>:
 8007214:	4b02      	ldr	r3, [pc, #8]	; (8007220 <puts+0xc>)
 8007216:	4601      	mov	r1, r0
 8007218:	6818      	ldr	r0, [r3, #0]
 800721a:	f7ff bf8d 	b.w	8007138 <_puts_r>
 800721e:	bf00      	nop
 8007220:	20000010 	.word	0x20000010

08007224 <nanf>:
 8007224:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800722c <nanf+0x8>
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	7fc00000 	.word	0x7fc00000

08007230 <siprintf>:
 8007230:	b40e      	push	{r1, r2, r3}
 8007232:	b500      	push	{lr}
 8007234:	b09c      	sub	sp, #112	; 0x70
 8007236:	ab1d      	add	r3, sp, #116	; 0x74
 8007238:	9002      	str	r0, [sp, #8]
 800723a:	9006      	str	r0, [sp, #24]
 800723c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007240:	4809      	ldr	r0, [pc, #36]	; (8007268 <siprintf+0x38>)
 8007242:	9107      	str	r1, [sp, #28]
 8007244:	9104      	str	r1, [sp, #16]
 8007246:	4909      	ldr	r1, [pc, #36]	; (800726c <siprintf+0x3c>)
 8007248:	f853 2b04 	ldr.w	r2, [r3], #4
 800724c:	9105      	str	r1, [sp, #20]
 800724e:	6800      	ldr	r0, [r0, #0]
 8007250:	9301      	str	r3, [sp, #4]
 8007252:	a902      	add	r1, sp, #8
 8007254:	f003 f8e6 	bl	800a424 <_svfiprintf_r>
 8007258:	9b02      	ldr	r3, [sp, #8]
 800725a:	2200      	movs	r2, #0
 800725c:	701a      	strb	r2, [r3, #0]
 800725e:	b01c      	add	sp, #112	; 0x70
 8007260:	f85d eb04 	ldr.w	lr, [sp], #4
 8007264:	b003      	add	sp, #12
 8007266:	4770      	bx	lr
 8007268:	20000010 	.word	0x20000010
 800726c:	ffff0208 	.word	0xffff0208

08007270 <sulp>:
 8007270:	b570      	push	{r4, r5, r6, lr}
 8007272:	4604      	mov	r4, r0
 8007274:	460d      	mov	r5, r1
 8007276:	4616      	mov	r6, r2
 8007278:	ec45 4b10 	vmov	d0, r4, r5
 800727c:	f002 fe6c 	bl	8009f58 <__ulp>
 8007280:	b17e      	cbz	r6, 80072a2 <sulp+0x32>
 8007282:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007286:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800728a:	2b00      	cmp	r3, #0
 800728c:	dd09      	ble.n	80072a2 <sulp+0x32>
 800728e:	051b      	lsls	r3, r3, #20
 8007290:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8007294:	2000      	movs	r0, #0
 8007296:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800729a:	ec41 0b17 	vmov	d7, r0, r1
 800729e:	ee20 0b07 	vmul.f64	d0, d0, d7
 80072a2:	bd70      	pop	{r4, r5, r6, pc}
 80072a4:	0000      	movs	r0, r0
	...

080072a8 <_strtod_l>:
 80072a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ac:	ed2d 8b0c 	vpush	{d8-d13}
 80072b0:	b09d      	sub	sp, #116	; 0x74
 80072b2:	461f      	mov	r7, r3
 80072b4:	2300      	movs	r3, #0
 80072b6:	9318      	str	r3, [sp, #96]	; 0x60
 80072b8:	4ba6      	ldr	r3, [pc, #664]	; (8007554 <_strtod_l+0x2ac>)
 80072ba:	9213      	str	r2, [sp, #76]	; 0x4c
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	9308      	str	r3, [sp, #32]
 80072c0:	4604      	mov	r4, r0
 80072c2:	4618      	mov	r0, r3
 80072c4:	468a      	mov	sl, r1
 80072c6:	f7f8 ffbb 	bl	8000240 <strlen>
 80072ca:	f04f 0800 	mov.w	r8, #0
 80072ce:	4605      	mov	r5, r0
 80072d0:	f04f 0900 	mov.w	r9, #0
 80072d4:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80072d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80072da:	781a      	ldrb	r2, [r3, #0]
 80072dc:	2a2b      	cmp	r2, #43	; 0x2b
 80072de:	d04d      	beq.n	800737c <_strtod_l+0xd4>
 80072e0:	d83a      	bhi.n	8007358 <_strtod_l+0xb0>
 80072e2:	2a0d      	cmp	r2, #13
 80072e4:	d833      	bhi.n	800734e <_strtod_l+0xa6>
 80072e6:	2a08      	cmp	r2, #8
 80072e8:	d833      	bhi.n	8007352 <_strtod_l+0xaa>
 80072ea:	2a00      	cmp	r2, #0
 80072ec:	d03d      	beq.n	800736a <_strtod_l+0xc2>
 80072ee:	2300      	movs	r3, #0
 80072f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80072f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80072f4:	7833      	ldrb	r3, [r6, #0]
 80072f6:	2b30      	cmp	r3, #48	; 0x30
 80072f8:	f040 80b6 	bne.w	8007468 <_strtod_l+0x1c0>
 80072fc:	7873      	ldrb	r3, [r6, #1]
 80072fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007302:	2b58      	cmp	r3, #88	; 0x58
 8007304:	d16d      	bne.n	80073e2 <_strtod_l+0x13a>
 8007306:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007308:	9301      	str	r3, [sp, #4]
 800730a:	ab18      	add	r3, sp, #96	; 0x60
 800730c:	9702      	str	r7, [sp, #8]
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	4a91      	ldr	r2, [pc, #580]	; (8007558 <_strtod_l+0x2b0>)
 8007312:	ab19      	add	r3, sp, #100	; 0x64
 8007314:	a917      	add	r1, sp, #92	; 0x5c
 8007316:	4620      	mov	r0, r4
 8007318:	f001 ff16 	bl	8009148 <__gethex>
 800731c:	f010 0507 	ands.w	r5, r0, #7
 8007320:	4607      	mov	r7, r0
 8007322:	d005      	beq.n	8007330 <_strtod_l+0x88>
 8007324:	2d06      	cmp	r5, #6
 8007326:	d12b      	bne.n	8007380 <_strtod_l+0xd8>
 8007328:	3601      	adds	r6, #1
 800732a:	2300      	movs	r3, #0
 800732c:	9617      	str	r6, [sp, #92]	; 0x5c
 800732e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007330:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007332:	2b00      	cmp	r3, #0
 8007334:	f040 856e 	bne.w	8007e14 <_strtod_l+0xb6c>
 8007338:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800733a:	b1e3      	cbz	r3, 8007376 <_strtod_l+0xce>
 800733c:	ec49 8b17 	vmov	d7, r8, r9
 8007340:	eeb1 0b47 	vneg.f64	d0, d7
 8007344:	b01d      	add	sp, #116	; 0x74
 8007346:	ecbd 8b0c 	vpop	{d8-d13}
 800734a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800734e:	2a20      	cmp	r2, #32
 8007350:	d1cd      	bne.n	80072ee <_strtod_l+0x46>
 8007352:	3301      	adds	r3, #1
 8007354:	9317      	str	r3, [sp, #92]	; 0x5c
 8007356:	e7bf      	b.n	80072d8 <_strtod_l+0x30>
 8007358:	2a2d      	cmp	r2, #45	; 0x2d
 800735a:	d1c8      	bne.n	80072ee <_strtod_l+0x46>
 800735c:	2201      	movs	r2, #1
 800735e:	920b      	str	r2, [sp, #44]	; 0x2c
 8007360:	1c5a      	adds	r2, r3, #1
 8007362:	9217      	str	r2, [sp, #92]	; 0x5c
 8007364:	785b      	ldrb	r3, [r3, #1]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1c3      	bne.n	80072f2 <_strtod_l+0x4a>
 800736a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800736c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8007370:	2b00      	cmp	r3, #0
 8007372:	f040 854d 	bne.w	8007e10 <_strtod_l+0xb68>
 8007376:	ec49 8b10 	vmov	d0, r8, r9
 800737a:	e7e3      	b.n	8007344 <_strtod_l+0x9c>
 800737c:	2200      	movs	r2, #0
 800737e:	e7ee      	b.n	800735e <_strtod_l+0xb6>
 8007380:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007382:	b13a      	cbz	r2, 8007394 <_strtod_l+0xec>
 8007384:	2135      	movs	r1, #53	; 0x35
 8007386:	a81a      	add	r0, sp, #104	; 0x68
 8007388:	f002 fef2 	bl	800a170 <__copybits>
 800738c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800738e:	4620      	mov	r0, r4
 8007390:	f002 fab6 	bl	8009900 <_Bfree>
 8007394:	3d01      	subs	r5, #1
 8007396:	2d05      	cmp	r5, #5
 8007398:	d807      	bhi.n	80073aa <_strtod_l+0x102>
 800739a:	e8df f005 	tbb	[pc, r5]
 800739e:	0b0e      	.short	0x0b0e
 80073a0:	030e1d18 	.word	0x030e1d18
 80073a4:	f04f 0900 	mov.w	r9, #0
 80073a8:	46c8      	mov	r8, r9
 80073aa:	073b      	lsls	r3, r7, #28
 80073ac:	d5c0      	bpl.n	8007330 <_strtod_l+0x88>
 80073ae:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80073b2:	e7bd      	b.n	8007330 <_strtod_l+0x88>
 80073b4:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 80073b8:	e7f7      	b.n	80073aa <_strtod_l+0x102>
 80073ba:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 80073be:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80073c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80073c4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80073c8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80073cc:	e7ed      	b.n	80073aa <_strtod_l+0x102>
 80073ce:	f8df 918c 	ldr.w	r9, [pc, #396]	; 800755c <_strtod_l+0x2b4>
 80073d2:	f04f 0800 	mov.w	r8, #0
 80073d6:	e7e8      	b.n	80073aa <_strtod_l+0x102>
 80073d8:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80073dc:	f04f 38ff 	mov.w	r8, #4294967295
 80073e0:	e7e3      	b.n	80073aa <_strtod_l+0x102>
 80073e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073e4:	1c5a      	adds	r2, r3, #1
 80073e6:	9217      	str	r2, [sp, #92]	; 0x5c
 80073e8:	785b      	ldrb	r3, [r3, #1]
 80073ea:	2b30      	cmp	r3, #48	; 0x30
 80073ec:	d0f9      	beq.n	80073e2 <_strtod_l+0x13a>
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d09e      	beq.n	8007330 <_strtod_l+0x88>
 80073f2:	2301      	movs	r3, #1
 80073f4:	9306      	str	r3, [sp, #24]
 80073f6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073f8:	930c      	str	r3, [sp, #48]	; 0x30
 80073fa:	2300      	movs	r3, #0
 80073fc:	9304      	str	r3, [sp, #16]
 80073fe:	930a      	str	r3, [sp, #40]	; 0x28
 8007400:	461e      	mov	r6, r3
 8007402:	220a      	movs	r2, #10
 8007404:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007406:	f890 b000 	ldrb.w	fp, [r0]
 800740a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 800740e:	b2d9      	uxtb	r1, r3
 8007410:	2909      	cmp	r1, #9
 8007412:	d92b      	bls.n	800746c <_strtod_l+0x1c4>
 8007414:	9908      	ldr	r1, [sp, #32]
 8007416:	462a      	mov	r2, r5
 8007418:	f003 fb01 	bl	800aa1e <strncmp>
 800741c:	2800      	cmp	r0, #0
 800741e:	d035      	beq.n	800748c <_strtod_l+0x1e4>
 8007420:	2000      	movs	r0, #0
 8007422:	465a      	mov	r2, fp
 8007424:	4633      	mov	r3, r6
 8007426:	4683      	mov	fp, r0
 8007428:	4601      	mov	r1, r0
 800742a:	2a65      	cmp	r2, #101	; 0x65
 800742c:	d001      	beq.n	8007432 <_strtod_l+0x18a>
 800742e:	2a45      	cmp	r2, #69	; 0x45
 8007430:	d118      	bne.n	8007464 <_strtod_l+0x1bc>
 8007432:	b91b      	cbnz	r3, 800743c <_strtod_l+0x194>
 8007434:	9b06      	ldr	r3, [sp, #24]
 8007436:	4303      	orrs	r3, r0
 8007438:	d097      	beq.n	800736a <_strtod_l+0xc2>
 800743a:	2300      	movs	r3, #0
 800743c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8007440:	f10a 0201 	add.w	r2, sl, #1
 8007444:	9217      	str	r2, [sp, #92]	; 0x5c
 8007446:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800744a:	2a2b      	cmp	r2, #43	; 0x2b
 800744c:	d077      	beq.n	800753e <_strtod_l+0x296>
 800744e:	2a2d      	cmp	r2, #45	; 0x2d
 8007450:	d07d      	beq.n	800754e <_strtod_l+0x2a6>
 8007452:	f04f 0e00 	mov.w	lr, #0
 8007456:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800745a:	2d09      	cmp	r5, #9
 800745c:	f240 8084 	bls.w	8007568 <_strtod_l+0x2c0>
 8007460:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8007464:	2500      	movs	r5, #0
 8007466:	e09f      	b.n	80075a8 <_strtod_l+0x300>
 8007468:	2300      	movs	r3, #0
 800746a:	e7c3      	b.n	80073f4 <_strtod_l+0x14c>
 800746c:	2e08      	cmp	r6, #8
 800746e:	bfd5      	itete	le
 8007470:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007472:	9904      	ldrgt	r1, [sp, #16]
 8007474:	fb02 3301 	mlale	r3, r2, r1, r3
 8007478:	fb02 3301 	mlagt	r3, r2, r1, r3
 800747c:	f100 0001 	add.w	r0, r0, #1
 8007480:	bfd4      	ite	le
 8007482:	930a      	strle	r3, [sp, #40]	; 0x28
 8007484:	9304      	strgt	r3, [sp, #16]
 8007486:	3601      	adds	r6, #1
 8007488:	9017      	str	r0, [sp, #92]	; 0x5c
 800748a:	e7bb      	b.n	8007404 <_strtod_l+0x15c>
 800748c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800748e:	195a      	adds	r2, r3, r5
 8007490:	9217      	str	r2, [sp, #92]	; 0x5c
 8007492:	5d5a      	ldrb	r2, [r3, r5]
 8007494:	b3ae      	cbz	r6, 8007502 <_strtod_l+0x25a>
 8007496:	4683      	mov	fp, r0
 8007498:	4633      	mov	r3, r6
 800749a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800749e:	2909      	cmp	r1, #9
 80074a0:	d912      	bls.n	80074c8 <_strtod_l+0x220>
 80074a2:	2101      	movs	r1, #1
 80074a4:	e7c1      	b.n	800742a <_strtod_l+0x182>
 80074a6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074a8:	1c5a      	adds	r2, r3, #1
 80074aa:	9217      	str	r2, [sp, #92]	; 0x5c
 80074ac:	785a      	ldrb	r2, [r3, #1]
 80074ae:	3001      	adds	r0, #1
 80074b0:	2a30      	cmp	r2, #48	; 0x30
 80074b2:	d0f8      	beq.n	80074a6 <_strtod_l+0x1fe>
 80074b4:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80074b8:	2b08      	cmp	r3, #8
 80074ba:	f200 84b0 	bhi.w	8007e1e <_strtod_l+0xb76>
 80074be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80074c0:	930c      	str	r3, [sp, #48]	; 0x30
 80074c2:	4683      	mov	fp, r0
 80074c4:	2000      	movs	r0, #0
 80074c6:	4603      	mov	r3, r0
 80074c8:	3a30      	subs	r2, #48	; 0x30
 80074ca:	f100 0101 	add.w	r1, r0, #1
 80074ce:	d012      	beq.n	80074f6 <_strtod_l+0x24e>
 80074d0:	448b      	add	fp, r1
 80074d2:	eb00 0c03 	add.w	ip, r0, r3
 80074d6:	4619      	mov	r1, r3
 80074d8:	250a      	movs	r5, #10
 80074da:	4561      	cmp	r1, ip
 80074dc:	d113      	bne.n	8007506 <_strtod_l+0x25e>
 80074de:	1819      	adds	r1, r3, r0
 80074e0:	2908      	cmp	r1, #8
 80074e2:	f103 0301 	add.w	r3, r3, #1
 80074e6:	4403      	add	r3, r0
 80074e8:	dc1d      	bgt.n	8007526 <_strtod_l+0x27e>
 80074ea:	980a      	ldr	r0, [sp, #40]	; 0x28
 80074ec:	210a      	movs	r1, #10
 80074ee:	fb01 2200 	mla	r2, r1, r0, r2
 80074f2:	920a      	str	r2, [sp, #40]	; 0x28
 80074f4:	2100      	movs	r1, #0
 80074f6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80074f8:	1c50      	adds	r0, r2, #1
 80074fa:	9017      	str	r0, [sp, #92]	; 0x5c
 80074fc:	7852      	ldrb	r2, [r2, #1]
 80074fe:	4608      	mov	r0, r1
 8007500:	e7cb      	b.n	800749a <_strtod_l+0x1f2>
 8007502:	4630      	mov	r0, r6
 8007504:	e7d4      	b.n	80074b0 <_strtod_l+0x208>
 8007506:	2908      	cmp	r1, #8
 8007508:	dc04      	bgt.n	8007514 <_strtod_l+0x26c>
 800750a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800750c:	436f      	muls	r7, r5
 800750e:	970a      	str	r7, [sp, #40]	; 0x28
 8007510:	3101      	adds	r1, #1
 8007512:	e7e2      	b.n	80074da <_strtod_l+0x232>
 8007514:	f101 0e01 	add.w	lr, r1, #1
 8007518:	f1be 0f10 	cmp.w	lr, #16
 800751c:	bfde      	ittt	le
 800751e:	9f04      	ldrle	r7, [sp, #16]
 8007520:	436f      	mulle	r7, r5
 8007522:	9704      	strle	r7, [sp, #16]
 8007524:	e7f4      	b.n	8007510 <_strtod_l+0x268>
 8007526:	2b10      	cmp	r3, #16
 8007528:	bfdf      	itttt	le
 800752a:	9804      	ldrle	r0, [sp, #16]
 800752c:	210a      	movle	r1, #10
 800752e:	fb01 2200 	mlale	r2, r1, r0, r2
 8007532:	9204      	strle	r2, [sp, #16]
 8007534:	e7de      	b.n	80074f4 <_strtod_l+0x24c>
 8007536:	f04f 0b00 	mov.w	fp, #0
 800753a:	2101      	movs	r1, #1
 800753c:	e77a      	b.n	8007434 <_strtod_l+0x18c>
 800753e:	f04f 0e00 	mov.w	lr, #0
 8007542:	f10a 0202 	add.w	r2, sl, #2
 8007546:	9217      	str	r2, [sp, #92]	; 0x5c
 8007548:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800754c:	e783      	b.n	8007456 <_strtod_l+0x1ae>
 800754e:	f04f 0e01 	mov.w	lr, #1
 8007552:	e7f6      	b.n	8007542 <_strtod_l+0x29a>
 8007554:	0800b444 	.word	0x0800b444
 8007558:	0800b190 	.word	0x0800b190
 800755c:	7ff00000 	.word	0x7ff00000
 8007560:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007562:	1c55      	adds	r5, r2, #1
 8007564:	9517      	str	r5, [sp, #92]	; 0x5c
 8007566:	7852      	ldrb	r2, [r2, #1]
 8007568:	2a30      	cmp	r2, #48	; 0x30
 800756a:	d0f9      	beq.n	8007560 <_strtod_l+0x2b8>
 800756c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8007570:	2d08      	cmp	r5, #8
 8007572:	f63f af77 	bhi.w	8007464 <_strtod_l+0x1bc>
 8007576:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800757a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800757c:	9208      	str	r2, [sp, #32]
 800757e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007580:	1c55      	adds	r5, r2, #1
 8007582:	9517      	str	r5, [sp, #92]	; 0x5c
 8007584:	7852      	ldrb	r2, [r2, #1]
 8007586:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800758a:	2f09      	cmp	r7, #9
 800758c:	d937      	bls.n	80075fe <_strtod_l+0x356>
 800758e:	9f08      	ldr	r7, [sp, #32]
 8007590:	1bed      	subs	r5, r5, r7
 8007592:	2d08      	cmp	r5, #8
 8007594:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007598:	dc02      	bgt.n	80075a0 <_strtod_l+0x2f8>
 800759a:	4565      	cmp	r5, ip
 800759c:	bfa8      	it	ge
 800759e:	4665      	movge	r5, ip
 80075a0:	f1be 0f00 	cmp.w	lr, #0
 80075a4:	d000      	beq.n	80075a8 <_strtod_l+0x300>
 80075a6:	426d      	negs	r5, r5
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d14f      	bne.n	800764c <_strtod_l+0x3a4>
 80075ac:	9b06      	ldr	r3, [sp, #24]
 80075ae:	4303      	orrs	r3, r0
 80075b0:	f47f aebe 	bne.w	8007330 <_strtod_l+0x88>
 80075b4:	2900      	cmp	r1, #0
 80075b6:	f47f aed8 	bne.w	800736a <_strtod_l+0xc2>
 80075ba:	2a69      	cmp	r2, #105	; 0x69
 80075bc:	d027      	beq.n	800760e <_strtod_l+0x366>
 80075be:	dc24      	bgt.n	800760a <_strtod_l+0x362>
 80075c0:	2a49      	cmp	r2, #73	; 0x49
 80075c2:	d024      	beq.n	800760e <_strtod_l+0x366>
 80075c4:	2a4e      	cmp	r2, #78	; 0x4e
 80075c6:	f47f aed0 	bne.w	800736a <_strtod_l+0xc2>
 80075ca:	499b      	ldr	r1, [pc, #620]	; (8007838 <_strtod_l+0x590>)
 80075cc:	a817      	add	r0, sp, #92	; 0x5c
 80075ce:	f002 f813 	bl	80095f8 <__match>
 80075d2:	2800      	cmp	r0, #0
 80075d4:	f43f aec9 	beq.w	800736a <_strtod_l+0xc2>
 80075d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b28      	cmp	r3, #40	; 0x28
 80075de:	d12d      	bne.n	800763c <_strtod_l+0x394>
 80075e0:	4996      	ldr	r1, [pc, #600]	; (800783c <_strtod_l+0x594>)
 80075e2:	aa1a      	add	r2, sp, #104	; 0x68
 80075e4:	a817      	add	r0, sp, #92	; 0x5c
 80075e6:	f002 f81b 	bl	8009620 <__hexnan>
 80075ea:	2805      	cmp	r0, #5
 80075ec:	d126      	bne.n	800763c <_strtod_l+0x394>
 80075ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80075f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80075f4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80075f8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80075fc:	e698      	b.n	8007330 <_strtod_l+0x88>
 80075fe:	250a      	movs	r5, #10
 8007600:	fb05 250c 	mla	r5, r5, ip, r2
 8007604:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8007608:	e7b9      	b.n	800757e <_strtod_l+0x2d6>
 800760a:	2a6e      	cmp	r2, #110	; 0x6e
 800760c:	e7db      	b.n	80075c6 <_strtod_l+0x31e>
 800760e:	498c      	ldr	r1, [pc, #560]	; (8007840 <_strtod_l+0x598>)
 8007610:	a817      	add	r0, sp, #92	; 0x5c
 8007612:	f001 fff1 	bl	80095f8 <__match>
 8007616:	2800      	cmp	r0, #0
 8007618:	f43f aea7 	beq.w	800736a <_strtod_l+0xc2>
 800761c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800761e:	4989      	ldr	r1, [pc, #548]	; (8007844 <_strtod_l+0x59c>)
 8007620:	3b01      	subs	r3, #1
 8007622:	a817      	add	r0, sp, #92	; 0x5c
 8007624:	9317      	str	r3, [sp, #92]	; 0x5c
 8007626:	f001 ffe7 	bl	80095f8 <__match>
 800762a:	b910      	cbnz	r0, 8007632 <_strtod_l+0x38a>
 800762c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800762e:	3301      	adds	r3, #1
 8007630:	9317      	str	r3, [sp, #92]	; 0x5c
 8007632:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8007858 <_strtod_l+0x5b0>
 8007636:	f04f 0800 	mov.w	r8, #0
 800763a:	e679      	b.n	8007330 <_strtod_l+0x88>
 800763c:	4882      	ldr	r0, [pc, #520]	; (8007848 <_strtod_l+0x5a0>)
 800763e:	f003 f993 	bl	800a968 <nan>
 8007642:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007646:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800764a:	e671      	b.n	8007330 <_strtod_l+0x88>
 800764c:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8007650:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007654:	eba5 020b 	sub.w	r2, r5, fp
 8007658:	2e00      	cmp	r6, #0
 800765a:	bf08      	it	eq
 800765c:	461e      	moveq	r6, r3
 800765e:	2b10      	cmp	r3, #16
 8007660:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007664:	9206      	str	r2, [sp, #24]
 8007666:	461a      	mov	r2, r3
 8007668:	bfa8      	it	ge
 800766a:	2210      	movge	r2, #16
 800766c:	2b09      	cmp	r3, #9
 800766e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8007672:	dd0e      	ble.n	8007692 <_strtod_l+0x3ea>
 8007674:	4975      	ldr	r1, [pc, #468]	; (800784c <_strtod_l+0x5a4>)
 8007676:	eddd 7a04 	vldr	s15, [sp, #16]
 800767a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800767e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8007682:	ed9d 5b08 	vldr	d5, [sp, #32]
 8007686:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800768a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800768e:	ec59 8b17 	vmov	r8, r9, d7
 8007692:	2b0f      	cmp	r3, #15
 8007694:	dc37      	bgt.n	8007706 <_strtod_l+0x45e>
 8007696:	9906      	ldr	r1, [sp, #24]
 8007698:	2900      	cmp	r1, #0
 800769a:	f43f ae49 	beq.w	8007330 <_strtod_l+0x88>
 800769e:	dd23      	ble.n	80076e8 <_strtod_l+0x440>
 80076a0:	2916      	cmp	r1, #22
 80076a2:	dc0b      	bgt.n	80076bc <_strtod_l+0x414>
 80076a4:	4b69      	ldr	r3, [pc, #420]	; (800784c <_strtod_l+0x5a4>)
 80076a6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80076aa:	ed93 7b00 	vldr	d7, [r3]
 80076ae:	ec49 8b16 	vmov	d6, r8, r9
 80076b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80076b6:	ec59 8b17 	vmov	r8, r9, d7
 80076ba:	e639      	b.n	8007330 <_strtod_l+0x88>
 80076bc:	9806      	ldr	r0, [sp, #24]
 80076be:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80076c2:	4281      	cmp	r1, r0
 80076c4:	db1f      	blt.n	8007706 <_strtod_l+0x45e>
 80076c6:	4a61      	ldr	r2, [pc, #388]	; (800784c <_strtod_l+0x5a4>)
 80076c8:	f1c3 030f 	rsb	r3, r3, #15
 80076cc:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80076d0:	ed91 7b00 	vldr	d7, [r1]
 80076d4:	ec49 8b16 	vmov	d6, r8, r9
 80076d8:	1ac3      	subs	r3, r0, r3
 80076da:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80076de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80076e2:	ed92 6b00 	vldr	d6, [r2]
 80076e6:	e7e4      	b.n	80076b2 <_strtod_l+0x40a>
 80076e8:	9906      	ldr	r1, [sp, #24]
 80076ea:	3116      	adds	r1, #22
 80076ec:	db0b      	blt.n	8007706 <_strtod_l+0x45e>
 80076ee:	4b57      	ldr	r3, [pc, #348]	; (800784c <_strtod_l+0x5a4>)
 80076f0:	ebab 0505 	sub.w	r5, fp, r5
 80076f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80076f8:	ed95 7b00 	vldr	d7, [r5]
 80076fc:	ec49 8b16 	vmov	d6, r8, r9
 8007700:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007704:	e7d7      	b.n	80076b6 <_strtod_l+0x40e>
 8007706:	9906      	ldr	r1, [sp, #24]
 8007708:	1a9a      	subs	r2, r3, r2
 800770a:	440a      	add	r2, r1
 800770c:	2a00      	cmp	r2, #0
 800770e:	dd74      	ble.n	80077fa <_strtod_l+0x552>
 8007710:	f012 000f 	ands.w	r0, r2, #15
 8007714:	d00a      	beq.n	800772c <_strtod_l+0x484>
 8007716:	494d      	ldr	r1, [pc, #308]	; (800784c <_strtod_l+0x5a4>)
 8007718:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800771c:	ed91 7b00 	vldr	d7, [r1]
 8007720:	ec49 8b16 	vmov	d6, r8, r9
 8007724:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007728:	ec59 8b17 	vmov	r8, r9, d7
 800772c:	f032 020f 	bics.w	r2, r2, #15
 8007730:	d04f      	beq.n	80077d2 <_strtod_l+0x52a>
 8007732:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8007736:	dd22      	ble.n	800777e <_strtod_l+0x4d6>
 8007738:	2500      	movs	r5, #0
 800773a:	462e      	mov	r6, r5
 800773c:	950a      	str	r5, [sp, #40]	; 0x28
 800773e:	462f      	mov	r7, r5
 8007740:	2322      	movs	r3, #34	; 0x22
 8007742:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8007858 <_strtod_l+0x5b0>
 8007746:	6023      	str	r3, [r4, #0]
 8007748:	f04f 0800 	mov.w	r8, #0
 800774c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800774e:	2b00      	cmp	r3, #0
 8007750:	f43f adee 	beq.w	8007330 <_strtod_l+0x88>
 8007754:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007756:	4620      	mov	r0, r4
 8007758:	f002 f8d2 	bl	8009900 <_Bfree>
 800775c:	4639      	mov	r1, r7
 800775e:	4620      	mov	r0, r4
 8007760:	f002 f8ce 	bl	8009900 <_Bfree>
 8007764:	4631      	mov	r1, r6
 8007766:	4620      	mov	r0, r4
 8007768:	f002 f8ca 	bl	8009900 <_Bfree>
 800776c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800776e:	4620      	mov	r0, r4
 8007770:	f002 f8c6 	bl	8009900 <_Bfree>
 8007774:	4629      	mov	r1, r5
 8007776:	4620      	mov	r0, r4
 8007778:	f002 f8c2 	bl	8009900 <_Bfree>
 800777c:	e5d8      	b.n	8007330 <_strtod_l+0x88>
 800777e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8007782:	2000      	movs	r0, #0
 8007784:	4f32      	ldr	r7, [pc, #200]	; (8007850 <_strtod_l+0x5a8>)
 8007786:	1112      	asrs	r2, r2, #4
 8007788:	4601      	mov	r1, r0
 800778a:	2a01      	cmp	r2, #1
 800778c:	dc24      	bgt.n	80077d8 <_strtod_l+0x530>
 800778e:	b108      	cbz	r0, 8007794 <_strtod_l+0x4ec>
 8007790:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007794:	4a2e      	ldr	r2, [pc, #184]	; (8007850 <_strtod_l+0x5a8>)
 8007796:	482f      	ldr	r0, [pc, #188]	; (8007854 <_strtod_l+0x5ac>)
 8007798:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800779c:	ed91 7b00 	vldr	d7, [r1]
 80077a0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80077a4:	ec49 8b16 	vmov	d6, r8, r9
 80077a8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80077ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 80077b0:	9905      	ldr	r1, [sp, #20]
 80077b2:	4a29      	ldr	r2, [pc, #164]	; (8007858 <_strtod_l+0x5b0>)
 80077b4:	400a      	ands	r2, r1
 80077b6:	4282      	cmp	r2, r0
 80077b8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80077bc:	d8bc      	bhi.n	8007738 <_strtod_l+0x490>
 80077be:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80077c2:	4282      	cmp	r2, r0
 80077c4:	bf86      	itte	hi
 80077c6:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800785c <_strtod_l+0x5b4>
 80077ca:	f04f 38ff 	movhi.w	r8, #4294967295
 80077ce:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80077d2:	2200      	movs	r2, #0
 80077d4:	9204      	str	r2, [sp, #16]
 80077d6:	e07f      	b.n	80078d8 <_strtod_l+0x630>
 80077d8:	f012 0f01 	tst.w	r2, #1
 80077dc:	d00a      	beq.n	80077f4 <_strtod_l+0x54c>
 80077de:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 80077e2:	ed90 7b00 	vldr	d7, [r0]
 80077e6:	ed9d 6b04 	vldr	d6, [sp, #16]
 80077ea:	ee26 7b07 	vmul.f64	d7, d6, d7
 80077ee:	ed8d 7b04 	vstr	d7, [sp, #16]
 80077f2:	2001      	movs	r0, #1
 80077f4:	3101      	adds	r1, #1
 80077f6:	1052      	asrs	r2, r2, #1
 80077f8:	e7c7      	b.n	800778a <_strtod_l+0x4e2>
 80077fa:	d0ea      	beq.n	80077d2 <_strtod_l+0x52a>
 80077fc:	4252      	negs	r2, r2
 80077fe:	f012 000f 	ands.w	r0, r2, #15
 8007802:	d00a      	beq.n	800781a <_strtod_l+0x572>
 8007804:	4911      	ldr	r1, [pc, #68]	; (800784c <_strtod_l+0x5a4>)
 8007806:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800780a:	ed91 7b00 	vldr	d7, [r1]
 800780e:	ec49 8b16 	vmov	d6, r8, r9
 8007812:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007816:	ec59 8b17 	vmov	r8, r9, d7
 800781a:	1112      	asrs	r2, r2, #4
 800781c:	d0d9      	beq.n	80077d2 <_strtod_l+0x52a>
 800781e:	2a1f      	cmp	r2, #31
 8007820:	dd1e      	ble.n	8007860 <_strtod_l+0x5b8>
 8007822:	2500      	movs	r5, #0
 8007824:	462e      	mov	r6, r5
 8007826:	950a      	str	r5, [sp, #40]	; 0x28
 8007828:	462f      	mov	r7, r5
 800782a:	2322      	movs	r3, #34	; 0x22
 800782c:	f04f 0800 	mov.w	r8, #0
 8007830:	f04f 0900 	mov.w	r9, #0
 8007834:	6023      	str	r3, [r4, #0]
 8007836:	e789      	b.n	800774c <_strtod_l+0x4a4>
 8007838:	0800b161 	.word	0x0800b161
 800783c:	0800b1a4 	.word	0x0800b1a4
 8007840:	0800b159 	.word	0x0800b159
 8007844:	0800b2e4 	.word	0x0800b2e4
 8007848:	0800b600 	.word	0x0800b600
 800784c:	0800b4e0 	.word	0x0800b4e0
 8007850:	0800b4b8 	.word	0x0800b4b8
 8007854:	7ca00000 	.word	0x7ca00000
 8007858:	7ff00000 	.word	0x7ff00000
 800785c:	7fefffff 	.word	0x7fefffff
 8007860:	f012 0110 	ands.w	r1, r2, #16
 8007864:	bf18      	it	ne
 8007866:	216a      	movne	r1, #106	; 0x6a
 8007868:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800786c:	9104      	str	r1, [sp, #16]
 800786e:	49c0      	ldr	r1, [pc, #768]	; (8007b70 <_strtod_l+0x8c8>)
 8007870:	2000      	movs	r0, #0
 8007872:	07d7      	lsls	r7, r2, #31
 8007874:	d508      	bpl.n	8007888 <_strtod_l+0x5e0>
 8007876:	ed9d 6b08 	vldr	d6, [sp, #32]
 800787a:	ed91 7b00 	vldr	d7, [r1]
 800787e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007882:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007886:	2001      	movs	r0, #1
 8007888:	1052      	asrs	r2, r2, #1
 800788a:	f101 0108 	add.w	r1, r1, #8
 800788e:	d1f0      	bne.n	8007872 <_strtod_l+0x5ca>
 8007890:	b108      	cbz	r0, 8007896 <_strtod_l+0x5ee>
 8007892:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8007896:	9a04      	ldr	r2, [sp, #16]
 8007898:	b1ba      	cbz	r2, 80078ca <_strtod_l+0x622>
 800789a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800789e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80078a2:	2a00      	cmp	r2, #0
 80078a4:	4649      	mov	r1, r9
 80078a6:	dd10      	ble.n	80078ca <_strtod_l+0x622>
 80078a8:	2a1f      	cmp	r2, #31
 80078aa:	f340 8132 	ble.w	8007b12 <_strtod_l+0x86a>
 80078ae:	2a34      	cmp	r2, #52	; 0x34
 80078b0:	bfde      	ittt	le
 80078b2:	3a20      	suble	r2, #32
 80078b4:	f04f 30ff 	movle.w	r0, #4294967295
 80078b8:	fa00 f202 	lslle.w	r2, r0, r2
 80078bc:	f04f 0800 	mov.w	r8, #0
 80078c0:	bfcc      	ite	gt
 80078c2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80078c6:	ea02 0901 	andle.w	r9, r2, r1
 80078ca:	ec49 8b17 	vmov	d7, r8, r9
 80078ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80078d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078d6:	d0a4      	beq.n	8007822 <_strtod_l+0x57a>
 80078d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078da:	9200      	str	r2, [sp, #0]
 80078dc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80078de:	4632      	mov	r2, r6
 80078e0:	4620      	mov	r0, r4
 80078e2:	f002 f879 	bl	80099d8 <__s2b>
 80078e6:	900a      	str	r0, [sp, #40]	; 0x28
 80078e8:	2800      	cmp	r0, #0
 80078ea:	f43f af25 	beq.w	8007738 <_strtod_l+0x490>
 80078ee:	9b06      	ldr	r3, [sp, #24]
 80078f0:	ebab 0505 	sub.w	r5, fp, r5
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	bfb4      	ite	lt
 80078f8:	462b      	movlt	r3, r5
 80078fa:	2300      	movge	r3, #0
 80078fc:	930c      	str	r3, [sp, #48]	; 0x30
 80078fe:	9b06      	ldr	r3, [sp, #24]
 8007900:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8007b58 <_strtod_l+0x8b0>
 8007904:	ed9f ab96 	vldr	d10, [pc, #600]	; 8007b60 <_strtod_l+0x8b8>
 8007908:	ed9f bb97 	vldr	d11, [pc, #604]	; 8007b68 <_strtod_l+0x8c0>
 800790c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007910:	2500      	movs	r5, #0
 8007912:	9312      	str	r3, [sp, #72]	; 0x48
 8007914:	462e      	mov	r6, r5
 8007916:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007918:	4620      	mov	r0, r4
 800791a:	6859      	ldr	r1, [r3, #4]
 800791c:	f001 ffb0 	bl	8009880 <_Balloc>
 8007920:	4607      	mov	r7, r0
 8007922:	2800      	cmp	r0, #0
 8007924:	f43f af0c 	beq.w	8007740 <_strtod_l+0x498>
 8007928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800792a:	691a      	ldr	r2, [r3, #16]
 800792c:	3202      	adds	r2, #2
 800792e:	f103 010c 	add.w	r1, r3, #12
 8007932:	0092      	lsls	r2, r2, #2
 8007934:	300c      	adds	r0, #12
 8007936:	f001 ff95 	bl	8009864 <memcpy>
 800793a:	ec49 8b10 	vmov	d0, r8, r9
 800793e:	aa1a      	add	r2, sp, #104	; 0x68
 8007940:	a919      	add	r1, sp, #100	; 0x64
 8007942:	4620      	mov	r0, r4
 8007944:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8007948:	f002 fb82 	bl	800a050 <__d2b>
 800794c:	9018      	str	r0, [sp, #96]	; 0x60
 800794e:	2800      	cmp	r0, #0
 8007950:	f43f aef6 	beq.w	8007740 <_strtod_l+0x498>
 8007954:	2101      	movs	r1, #1
 8007956:	4620      	mov	r0, r4
 8007958:	f002 f8d8 	bl	8009b0c <__i2b>
 800795c:	4606      	mov	r6, r0
 800795e:	2800      	cmp	r0, #0
 8007960:	f43f aeee 	beq.w	8007740 <_strtod_l+0x498>
 8007964:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007966:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007968:	2b00      	cmp	r3, #0
 800796a:	bfab      	itete	ge
 800796c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800796e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007970:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8007974:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8007978:	bfac      	ite	ge
 800797a:	eb03 0b02 	addge.w	fp, r3, r2
 800797e:	eba2 0a03 	sublt.w	sl, r2, r3
 8007982:	9a04      	ldr	r2, [sp, #16]
 8007984:	1a9b      	subs	r3, r3, r2
 8007986:	440b      	add	r3, r1
 8007988:	4a7a      	ldr	r2, [pc, #488]	; (8007b74 <_strtod_l+0x8cc>)
 800798a:	3b01      	subs	r3, #1
 800798c:	4293      	cmp	r3, r2
 800798e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8007992:	f280 80d1 	bge.w	8007b38 <_strtod_l+0x890>
 8007996:	1ad2      	subs	r2, r2, r3
 8007998:	2a1f      	cmp	r2, #31
 800799a:	eba1 0102 	sub.w	r1, r1, r2
 800799e:	f04f 0001 	mov.w	r0, #1
 80079a2:	f300 80bd 	bgt.w	8007b20 <_strtod_l+0x878>
 80079a6:	fa00 f302 	lsl.w	r3, r0, r2
 80079aa:	930e      	str	r3, [sp, #56]	; 0x38
 80079ac:	2300      	movs	r3, #0
 80079ae:	930d      	str	r3, [sp, #52]	; 0x34
 80079b0:	eb0b 0301 	add.w	r3, fp, r1
 80079b4:	9a04      	ldr	r2, [sp, #16]
 80079b6:	459b      	cmp	fp, r3
 80079b8:	448a      	add	sl, r1
 80079ba:	4492      	add	sl, r2
 80079bc:	465a      	mov	r2, fp
 80079be:	bfa8      	it	ge
 80079c0:	461a      	movge	r2, r3
 80079c2:	4552      	cmp	r2, sl
 80079c4:	bfa8      	it	ge
 80079c6:	4652      	movge	r2, sl
 80079c8:	2a00      	cmp	r2, #0
 80079ca:	bfc2      	ittt	gt
 80079cc:	1a9b      	subgt	r3, r3, r2
 80079ce:	ebaa 0a02 	subgt.w	sl, sl, r2
 80079d2:	ebab 0b02 	subgt.w	fp, fp, r2
 80079d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079d8:	2a00      	cmp	r2, #0
 80079da:	dd18      	ble.n	8007a0e <_strtod_l+0x766>
 80079dc:	4631      	mov	r1, r6
 80079de:	4620      	mov	r0, r4
 80079e0:	9315      	str	r3, [sp, #84]	; 0x54
 80079e2:	f002 f94f 	bl	8009c84 <__pow5mult>
 80079e6:	4606      	mov	r6, r0
 80079e8:	2800      	cmp	r0, #0
 80079ea:	f43f aea9 	beq.w	8007740 <_strtod_l+0x498>
 80079ee:	4601      	mov	r1, r0
 80079f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80079f2:	4620      	mov	r0, r4
 80079f4:	f002 f8a0 	bl	8009b38 <__multiply>
 80079f8:	9014      	str	r0, [sp, #80]	; 0x50
 80079fa:	2800      	cmp	r0, #0
 80079fc:	f43f aea0 	beq.w	8007740 <_strtod_l+0x498>
 8007a00:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a02:	4620      	mov	r0, r4
 8007a04:	f001 ff7c 	bl	8009900 <_Bfree>
 8007a08:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007a0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a0c:	9218      	str	r2, [sp, #96]	; 0x60
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f300 8097 	bgt.w	8007b42 <_strtod_l+0x89a>
 8007a14:	9b06      	ldr	r3, [sp, #24]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	dd08      	ble.n	8007a2c <_strtod_l+0x784>
 8007a1a:	4639      	mov	r1, r7
 8007a1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007a1e:	4620      	mov	r0, r4
 8007a20:	f002 f930 	bl	8009c84 <__pow5mult>
 8007a24:	4607      	mov	r7, r0
 8007a26:	2800      	cmp	r0, #0
 8007a28:	f43f ae8a 	beq.w	8007740 <_strtod_l+0x498>
 8007a2c:	f1ba 0f00 	cmp.w	sl, #0
 8007a30:	dd08      	ble.n	8007a44 <_strtod_l+0x79c>
 8007a32:	4639      	mov	r1, r7
 8007a34:	4652      	mov	r2, sl
 8007a36:	4620      	mov	r0, r4
 8007a38:	f002 f97e 	bl	8009d38 <__lshift>
 8007a3c:	4607      	mov	r7, r0
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	f43f ae7e 	beq.w	8007740 <_strtod_l+0x498>
 8007a44:	f1bb 0f00 	cmp.w	fp, #0
 8007a48:	dd08      	ble.n	8007a5c <_strtod_l+0x7b4>
 8007a4a:	4631      	mov	r1, r6
 8007a4c:	465a      	mov	r2, fp
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f002 f972 	bl	8009d38 <__lshift>
 8007a54:	4606      	mov	r6, r0
 8007a56:	2800      	cmp	r0, #0
 8007a58:	f43f ae72 	beq.w	8007740 <_strtod_l+0x498>
 8007a5c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a5e:	463a      	mov	r2, r7
 8007a60:	4620      	mov	r0, r4
 8007a62:	f002 f9f1 	bl	8009e48 <__mdiff>
 8007a66:	4605      	mov	r5, r0
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	f43f ae69 	beq.w	8007740 <_strtod_l+0x498>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8007a74:	60c3      	str	r3, [r0, #12]
 8007a76:	4631      	mov	r1, r6
 8007a78:	f002 f9ca 	bl	8009e10 <__mcmp>
 8007a7c:	2800      	cmp	r0, #0
 8007a7e:	da7f      	bge.n	8007b80 <_strtod_l+0x8d8>
 8007a80:	ea5a 0308 	orrs.w	r3, sl, r8
 8007a84:	f040 80a5 	bne.w	8007bd2 <_strtod_l+0x92a>
 8007a88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f040 80a0 	bne.w	8007bd2 <_strtod_l+0x92a>
 8007a92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007a96:	0d1b      	lsrs	r3, r3, #20
 8007a98:	051b      	lsls	r3, r3, #20
 8007a9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007a9e:	f240 8098 	bls.w	8007bd2 <_strtod_l+0x92a>
 8007aa2:	696b      	ldr	r3, [r5, #20]
 8007aa4:	b91b      	cbnz	r3, 8007aae <_strtod_l+0x806>
 8007aa6:	692b      	ldr	r3, [r5, #16]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	f340 8092 	ble.w	8007bd2 <_strtod_l+0x92a>
 8007aae:	4629      	mov	r1, r5
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	f002 f940 	bl	8009d38 <__lshift>
 8007ab8:	4631      	mov	r1, r6
 8007aba:	4605      	mov	r5, r0
 8007abc:	f002 f9a8 	bl	8009e10 <__mcmp>
 8007ac0:	2800      	cmp	r0, #0
 8007ac2:	f340 8086 	ble.w	8007bd2 <_strtod_l+0x92a>
 8007ac6:	9904      	ldr	r1, [sp, #16]
 8007ac8:	4a2b      	ldr	r2, [pc, #172]	; (8007b78 <_strtod_l+0x8d0>)
 8007aca:	464b      	mov	r3, r9
 8007acc:	2900      	cmp	r1, #0
 8007ace:	f000 80a1 	beq.w	8007c14 <_strtod_l+0x96c>
 8007ad2:	ea02 0109 	and.w	r1, r2, r9
 8007ad6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007ada:	f300 809b 	bgt.w	8007c14 <_strtod_l+0x96c>
 8007ade:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007ae2:	f77f aea2 	ble.w	800782a <_strtod_l+0x582>
 8007ae6:	4a25      	ldr	r2, [pc, #148]	; (8007b7c <_strtod_l+0x8d4>)
 8007ae8:	2300      	movs	r3, #0
 8007aea:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8007aee:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8007af2:	ec49 8b17 	vmov	d7, r8, r9
 8007af6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007afa:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007afe:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	bf08      	it	eq
 8007b06:	2322      	moveq	r3, #34	; 0x22
 8007b08:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007b0c:	bf08      	it	eq
 8007b0e:	6023      	streq	r3, [r4, #0]
 8007b10:	e620      	b.n	8007754 <_strtod_l+0x4ac>
 8007b12:	f04f 31ff 	mov.w	r1, #4294967295
 8007b16:	fa01 f202 	lsl.w	r2, r1, r2
 8007b1a:	ea02 0808 	and.w	r8, r2, r8
 8007b1e:	e6d4      	b.n	80078ca <_strtod_l+0x622>
 8007b20:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8007b24:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8007b28:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8007b2c:	33e2      	adds	r3, #226	; 0xe2
 8007b2e:	fa00 f303 	lsl.w	r3, r0, r3
 8007b32:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8007b36:	e73b      	b.n	80079b0 <_strtod_l+0x708>
 8007b38:	2000      	movs	r0, #0
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8007b40:	e736      	b.n	80079b0 <_strtod_l+0x708>
 8007b42:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b44:	461a      	mov	r2, r3
 8007b46:	4620      	mov	r0, r4
 8007b48:	f002 f8f6 	bl	8009d38 <__lshift>
 8007b4c:	9018      	str	r0, [sp, #96]	; 0x60
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	f47f af60 	bne.w	8007a14 <_strtod_l+0x76c>
 8007b54:	e5f4      	b.n	8007740 <_strtod_l+0x498>
 8007b56:	bf00      	nop
 8007b58:	94a03595 	.word	0x94a03595
 8007b5c:	3fcfffff 	.word	0x3fcfffff
 8007b60:	94a03595 	.word	0x94a03595
 8007b64:	3fdfffff 	.word	0x3fdfffff
 8007b68:	35afe535 	.word	0x35afe535
 8007b6c:	3fe00000 	.word	0x3fe00000
 8007b70:	0800b1b8 	.word	0x0800b1b8
 8007b74:	fffffc02 	.word	0xfffffc02
 8007b78:	7ff00000 	.word	0x7ff00000
 8007b7c:	39500000 	.word	0x39500000
 8007b80:	46cb      	mov	fp, r9
 8007b82:	d165      	bne.n	8007c50 <_strtod_l+0x9a8>
 8007b84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b88:	f1ba 0f00 	cmp.w	sl, #0
 8007b8c:	d02a      	beq.n	8007be4 <_strtod_l+0x93c>
 8007b8e:	4aaa      	ldr	r2, [pc, #680]	; (8007e38 <_strtod_l+0xb90>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d12b      	bne.n	8007bec <_strtod_l+0x944>
 8007b94:	9b04      	ldr	r3, [sp, #16]
 8007b96:	4641      	mov	r1, r8
 8007b98:	b1fb      	cbz	r3, 8007bda <_strtod_l+0x932>
 8007b9a:	4aa8      	ldr	r2, [pc, #672]	; (8007e3c <_strtod_l+0xb94>)
 8007b9c:	ea09 0202 	and.w	r2, r9, r2
 8007ba0:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba8:	d81a      	bhi.n	8007be0 <_strtod_l+0x938>
 8007baa:	0d12      	lsrs	r2, r2, #20
 8007bac:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007bb0:	fa00 f303 	lsl.w	r3, r0, r3
 8007bb4:	4299      	cmp	r1, r3
 8007bb6:	d119      	bne.n	8007bec <_strtod_l+0x944>
 8007bb8:	4ba1      	ldr	r3, [pc, #644]	; (8007e40 <_strtod_l+0xb98>)
 8007bba:	459b      	cmp	fp, r3
 8007bbc:	d102      	bne.n	8007bc4 <_strtod_l+0x91c>
 8007bbe:	3101      	adds	r1, #1
 8007bc0:	f43f adbe 	beq.w	8007740 <_strtod_l+0x498>
 8007bc4:	4b9d      	ldr	r3, [pc, #628]	; (8007e3c <_strtod_l+0xb94>)
 8007bc6:	ea0b 0303 	and.w	r3, fp, r3
 8007bca:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007bce:	f04f 0800 	mov.w	r8, #0
 8007bd2:	9b04      	ldr	r3, [sp, #16]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d186      	bne.n	8007ae6 <_strtod_l+0x83e>
 8007bd8:	e5bc      	b.n	8007754 <_strtod_l+0x4ac>
 8007bda:	f04f 33ff 	mov.w	r3, #4294967295
 8007bde:	e7e9      	b.n	8007bb4 <_strtod_l+0x90c>
 8007be0:	4603      	mov	r3, r0
 8007be2:	e7e7      	b.n	8007bb4 <_strtod_l+0x90c>
 8007be4:	ea53 0308 	orrs.w	r3, r3, r8
 8007be8:	f43f af6d 	beq.w	8007ac6 <_strtod_l+0x81e>
 8007bec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bee:	b1db      	cbz	r3, 8007c28 <_strtod_l+0x980>
 8007bf0:	ea13 0f0b 	tst.w	r3, fp
 8007bf4:	d0ed      	beq.n	8007bd2 <_strtod_l+0x92a>
 8007bf6:	9a04      	ldr	r2, [sp, #16]
 8007bf8:	4640      	mov	r0, r8
 8007bfa:	4649      	mov	r1, r9
 8007bfc:	f1ba 0f00 	cmp.w	sl, #0
 8007c00:	d016      	beq.n	8007c30 <_strtod_l+0x988>
 8007c02:	f7ff fb35 	bl	8007270 <sulp>
 8007c06:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007c0a:	ee37 7b00 	vadd.f64	d7, d7, d0
 8007c0e:	ec59 8b17 	vmov	r8, r9, d7
 8007c12:	e7de      	b.n	8007bd2 <_strtod_l+0x92a>
 8007c14:	4013      	ands	r3, r2
 8007c16:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007c1a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007c1e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007c22:	f04f 38ff 	mov.w	r8, #4294967295
 8007c26:	e7d4      	b.n	8007bd2 <_strtod_l+0x92a>
 8007c28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c2a:	ea13 0f08 	tst.w	r3, r8
 8007c2e:	e7e1      	b.n	8007bf4 <_strtod_l+0x94c>
 8007c30:	f7ff fb1e 	bl	8007270 <sulp>
 8007c34:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007c38:	ee37 7b40 	vsub.f64	d7, d7, d0
 8007c3c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007c40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c48:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8007c4c:	d1c1      	bne.n	8007bd2 <_strtod_l+0x92a>
 8007c4e:	e5ec      	b.n	800782a <_strtod_l+0x582>
 8007c50:	4631      	mov	r1, r6
 8007c52:	4628      	mov	r0, r5
 8007c54:	f002 fa58 	bl	800a108 <__ratio>
 8007c58:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8007c5c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c64:	d867      	bhi.n	8007d36 <_strtod_l+0xa8e>
 8007c66:	f1ba 0f00 	cmp.w	sl, #0
 8007c6a:	d044      	beq.n	8007cf6 <_strtod_l+0xa4e>
 8007c6c:	4b75      	ldr	r3, [pc, #468]	; (8007e44 <_strtod_l+0xb9c>)
 8007c6e:	2200      	movs	r2, #0
 8007c70:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8007c74:	4971      	ldr	r1, [pc, #452]	; (8007e3c <_strtod_l+0xb94>)
 8007c76:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8007e50 <_strtod_l+0xba8>
 8007c7a:	ea0b 0001 	and.w	r0, fp, r1
 8007c7e:	4560      	cmp	r0, ip
 8007c80:	900d      	str	r0, [sp, #52]	; 0x34
 8007c82:	f040 808b 	bne.w	8007d9c <_strtod_l+0xaf4>
 8007c86:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007c8a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8007c8e:	ec49 8b10 	vmov	d0, r8, r9
 8007c92:	ec43 2b1c 	vmov	d12, r2, r3
 8007c96:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007c9a:	f002 f95d 	bl	8009f58 <__ulp>
 8007c9e:	ec49 8b1d 	vmov	d13, r8, r9
 8007ca2:	eeac db00 	vfma.f64	d13, d12, d0
 8007ca6:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8007caa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cac:	4963      	ldr	r1, [pc, #396]	; (8007e3c <_strtod_l+0xb94>)
 8007cae:	4a66      	ldr	r2, [pc, #408]	; (8007e48 <_strtod_l+0xba0>)
 8007cb0:	4019      	ands	r1, r3
 8007cb2:	4291      	cmp	r1, r2
 8007cb4:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8007cb8:	d947      	bls.n	8007d4a <_strtod_l+0xaa2>
 8007cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cbc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007cc0:	4293      	cmp	r3, r2
 8007cc2:	d103      	bne.n	8007ccc <_strtod_l+0xa24>
 8007cc4:	9b08      	ldr	r3, [sp, #32]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	f43f ad3a 	beq.w	8007740 <_strtod_l+0x498>
 8007ccc:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8007e40 <_strtod_l+0xb98>
 8007cd0:	f04f 38ff 	mov.w	r8, #4294967295
 8007cd4:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f001 fe12 	bl	8009900 <_Bfree>
 8007cdc:	4639      	mov	r1, r7
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f001 fe0e 	bl	8009900 <_Bfree>
 8007ce4:	4631      	mov	r1, r6
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f001 fe0a 	bl	8009900 <_Bfree>
 8007cec:	4629      	mov	r1, r5
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f001 fe06 	bl	8009900 <_Bfree>
 8007cf4:	e60f      	b.n	8007916 <_strtod_l+0x66e>
 8007cf6:	f1b8 0f00 	cmp.w	r8, #0
 8007cfa:	d112      	bne.n	8007d22 <_strtod_l+0xa7a>
 8007cfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d00:	b9b3      	cbnz	r3, 8007d30 <_strtod_l+0xa88>
 8007d02:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007d06:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d0e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8007d12:	d401      	bmi.n	8007d18 <_strtod_l+0xa70>
 8007d14:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007d18:	eeb1 7b48 	vneg.f64	d7, d8
 8007d1c:	ec53 2b17 	vmov	r2, r3, d7
 8007d20:	e7a8      	b.n	8007c74 <_strtod_l+0x9cc>
 8007d22:	f1b8 0f01 	cmp.w	r8, #1
 8007d26:	d103      	bne.n	8007d30 <_strtod_l+0xa88>
 8007d28:	f1b9 0f00 	cmp.w	r9, #0
 8007d2c:	f43f ad7d 	beq.w	800782a <_strtod_l+0x582>
 8007d30:	4b46      	ldr	r3, [pc, #280]	; (8007e4c <_strtod_l+0xba4>)
 8007d32:	2200      	movs	r2, #0
 8007d34:	e79c      	b.n	8007c70 <_strtod_l+0x9c8>
 8007d36:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8007d3a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007d3e:	f1ba 0f00 	cmp.w	sl, #0
 8007d42:	d0e9      	beq.n	8007d18 <_strtod_l+0xa70>
 8007d44:	ec53 2b18 	vmov	r2, r3, d8
 8007d48:	e794      	b.n	8007c74 <_strtod_l+0x9cc>
 8007d4a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007d4e:	9b04      	ldr	r3, [sp, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d1bf      	bne.n	8007cd4 <_strtod_l+0xa2c>
 8007d54:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007d58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007d5a:	0d1b      	lsrs	r3, r3, #20
 8007d5c:	051b      	lsls	r3, r3, #20
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d1b8      	bne.n	8007cd4 <_strtod_l+0xa2c>
 8007d62:	ec51 0b18 	vmov	r0, r1, d8
 8007d66:	f7f8 fc97 	bl	8000698 <__aeabi_d2lz>
 8007d6a:	f7f8 fc4f 	bl	800060c <__aeabi_l2d>
 8007d6e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d72:	ec41 0b17 	vmov	d7, r0, r1
 8007d76:	ea43 0308 	orr.w	r3, r3, r8
 8007d7a:	ea53 030a 	orrs.w	r3, r3, sl
 8007d7e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8007d82:	d03e      	beq.n	8007e02 <_strtod_l+0xb5a>
 8007d84:	eeb4 8bca 	vcmpe.f64	d8, d10
 8007d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d8c:	f53f ace2 	bmi.w	8007754 <_strtod_l+0x4ac>
 8007d90:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8007d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d98:	dd9c      	ble.n	8007cd4 <_strtod_l+0xa2c>
 8007d9a:	e4db      	b.n	8007754 <_strtod_l+0x4ac>
 8007d9c:	9904      	ldr	r1, [sp, #16]
 8007d9e:	b301      	cbz	r1, 8007de2 <_strtod_l+0xb3a>
 8007da0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007da2:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8007da6:	d81c      	bhi.n	8007de2 <_strtod_l+0xb3a>
 8007da8:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8007e30 <_strtod_l+0xb88>
 8007dac:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007db4:	d811      	bhi.n	8007dda <_strtod_l+0xb32>
 8007db6:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8007dba:	ee18 3a10 	vmov	r3, s16
 8007dbe:	2b01      	cmp	r3, #1
 8007dc0:	bf38      	it	cc
 8007dc2:	2301      	movcc	r3, #1
 8007dc4:	ee08 3a10 	vmov	s16, r3
 8007dc8:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8007dcc:	f1ba 0f00 	cmp.w	sl, #0
 8007dd0:	d114      	bne.n	8007dfc <_strtod_l+0xb54>
 8007dd2:	eeb1 7b48 	vneg.f64	d7, d8
 8007dd6:	ec53 2b17 	vmov	r2, r3, d7
 8007dda:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007ddc:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8007de0:	1a0b      	subs	r3, r1, r0
 8007de2:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007de6:	ec43 2b1c 	vmov	d12, r2, r3
 8007dea:	f002 f8b5 	bl	8009f58 <__ulp>
 8007dee:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007df2:	eeac 7b00 	vfma.f64	d7, d12, d0
 8007df6:	ec59 8b17 	vmov	r8, r9, d7
 8007dfa:	e7a8      	b.n	8007d4e <_strtod_l+0xaa6>
 8007dfc:	ec53 2b18 	vmov	r2, r3, d8
 8007e00:	e7eb      	b.n	8007dda <_strtod_l+0xb32>
 8007e02:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8007e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e0a:	f57f af63 	bpl.w	8007cd4 <_strtod_l+0xa2c>
 8007e0e:	e4a1      	b.n	8007754 <_strtod_l+0x4ac>
 8007e10:	2300      	movs	r3, #0
 8007e12:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e14:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007e16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e18:	6013      	str	r3, [r2, #0]
 8007e1a:	f7ff ba8d 	b.w	8007338 <_strtod_l+0x90>
 8007e1e:	2a65      	cmp	r2, #101	; 0x65
 8007e20:	f43f ab89 	beq.w	8007536 <_strtod_l+0x28e>
 8007e24:	2a45      	cmp	r2, #69	; 0x45
 8007e26:	f43f ab86 	beq.w	8007536 <_strtod_l+0x28e>
 8007e2a:	2101      	movs	r1, #1
 8007e2c:	f7ff bbbe 	b.w	80075ac <_strtod_l+0x304>
 8007e30:	ffc00000 	.word	0xffc00000
 8007e34:	41dfffff 	.word	0x41dfffff
 8007e38:	000fffff 	.word	0x000fffff
 8007e3c:	7ff00000 	.word	0x7ff00000
 8007e40:	7fefffff 	.word	0x7fefffff
 8007e44:	3ff00000 	.word	0x3ff00000
 8007e48:	7c9fffff 	.word	0x7c9fffff
 8007e4c:	bff00000 	.word	0xbff00000
 8007e50:	7fe00000 	.word	0x7fe00000

08007e54 <_strtod_r>:
 8007e54:	4b01      	ldr	r3, [pc, #4]	; (8007e5c <_strtod_r+0x8>)
 8007e56:	f7ff ba27 	b.w	80072a8 <_strtod_l>
 8007e5a:	bf00      	nop
 8007e5c:	20000078 	.word	0x20000078

08007e60 <_strtol_l.isra.0>:
 8007e60:	2b01      	cmp	r3, #1
 8007e62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e66:	d001      	beq.n	8007e6c <_strtol_l.isra.0+0xc>
 8007e68:	2b24      	cmp	r3, #36	; 0x24
 8007e6a:	d906      	bls.n	8007e7a <_strtol_l.isra.0+0x1a>
 8007e6c:	f7fe fabe 	bl	80063ec <__errno>
 8007e70:	2316      	movs	r3, #22
 8007e72:	6003      	str	r3, [r0, #0]
 8007e74:	2000      	movs	r0, #0
 8007e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e7a:	4f3a      	ldr	r7, [pc, #232]	; (8007f64 <_strtol_l.isra.0+0x104>)
 8007e7c:	468e      	mov	lr, r1
 8007e7e:	4676      	mov	r6, lr
 8007e80:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007e84:	5de5      	ldrb	r5, [r4, r7]
 8007e86:	f015 0508 	ands.w	r5, r5, #8
 8007e8a:	d1f8      	bne.n	8007e7e <_strtol_l.isra.0+0x1e>
 8007e8c:	2c2d      	cmp	r4, #45	; 0x2d
 8007e8e:	d134      	bne.n	8007efa <_strtol_l.isra.0+0x9a>
 8007e90:	f89e 4000 	ldrb.w	r4, [lr]
 8007e94:	f04f 0801 	mov.w	r8, #1
 8007e98:	f106 0e02 	add.w	lr, r6, #2
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d05c      	beq.n	8007f5a <_strtol_l.isra.0+0xfa>
 8007ea0:	2b10      	cmp	r3, #16
 8007ea2:	d10c      	bne.n	8007ebe <_strtol_l.isra.0+0x5e>
 8007ea4:	2c30      	cmp	r4, #48	; 0x30
 8007ea6:	d10a      	bne.n	8007ebe <_strtol_l.isra.0+0x5e>
 8007ea8:	f89e 4000 	ldrb.w	r4, [lr]
 8007eac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007eb0:	2c58      	cmp	r4, #88	; 0x58
 8007eb2:	d14d      	bne.n	8007f50 <_strtol_l.isra.0+0xf0>
 8007eb4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007eb8:	2310      	movs	r3, #16
 8007eba:	f10e 0e02 	add.w	lr, lr, #2
 8007ebe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007ec2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007ec6:	2600      	movs	r6, #0
 8007ec8:	fbbc f9f3 	udiv	r9, ip, r3
 8007ecc:	4635      	mov	r5, r6
 8007ece:	fb03 ca19 	mls	sl, r3, r9, ip
 8007ed2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007ed6:	2f09      	cmp	r7, #9
 8007ed8:	d818      	bhi.n	8007f0c <_strtol_l.isra.0+0xac>
 8007eda:	463c      	mov	r4, r7
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	dd24      	ble.n	8007f2a <_strtol_l.isra.0+0xca>
 8007ee0:	2e00      	cmp	r6, #0
 8007ee2:	db1f      	blt.n	8007f24 <_strtol_l.isra.0+0xc4>
 8007ee4:	45a9      	cmp	r9, r5
 8007ee6:	d31d      	bcc.n	8007f24 <_strtol_l.isra.0+0xc4>
 8007ee8:	d101      	bne.n	8007eee <_strtol_l.isra.0+0x8e>
 8007eea:	45a2      	cmp	sl, r4
 8007eec:	db1a      	blt.n	8007f24 <_strtol_l.isra.0+0xc4>
 8007eee:	fb05 4503 	mla	r5, r5, r3, r4
 8007ef2:	2601      	movs	r6, #1
 8007ef4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007ef8:	e7eb      	b.n	8007ed2 <_strtol_l.isra.0+0x72>
 8007efa:	2c2b      	cmp	r4, #43	; 0x2b
 8007efc:	bf08      	it	eq
 8007efe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007f02:	46a8      	mov	r8, r5
 8007f04:	bf08      	it	eq
 8007f06:	f106 0e02 	addeq.w	lr, r6, #2
 8007f0a:	e7c7      	b.n	8007e9c <_strtol_l.isra.0+0x3c>
 8007f0c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007f10:	2f19      	cmp	r7, #25
 8007f12:	d801      	bhi.n	8007f18 <_strtol_l.isra.0+0xb8>
 8007f14:	3c37      	subs	r4, #55	; 0x37
 8007f16:	e7e1      	b.n	8007edc <_strtol_l.isra.0+0x7c>
 8007f18:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007f1c:	2f19      	cmp	r7, #25
 8007f1e:	d804      	bhi.n	8007f2a <_strtol_l.isra.0+0xca>
 8007f20:	3c57      	subs	r4, #87	; 0x57
 8007f22:	e7db      	b.n	8007edc <_strtol_l.isra.0+0x7c>
 8007f24:	f04f 36ff 	mov.w	r6, #4294967295
 8007f28:	e7e4      	b.n	8007ef4 <_strtol_l.isra.0+0x94>
 8007f2a:	2e00      	cmp	r6, #0
 8007f2c:	da05      	bge.n	8007f3a <_strtol_l.isra.0+0xda>
 8007f2e:	2322      	movs	r3, #34	; 0x22
 8007f30:	6003      	str	r3, [r0, #0]
 8007f32:	4665      	mov	r5, ip
 8007f34:	b942      	cbnz	r2, 8007f48 <_strtol_l.isra.0+0xe8>
 8007f36:	4628      	mov	r0, r5
 8007f38:	e79d      	b.n	8007e76 <_strtol_l.isra.0+0x16>
 8007f3a:	f1b8 0f00 	cmp.w	r8, #0
 8007f3e:	d000      	beq.n	8007f42 <_strtol_l.isra.0+0xe2>
 8007f40:	426d      	negs	r5, r5
 8007f42:	2a00      	cmp	r2, #0
 8007f44:	d0f7      	beq.n	8007f36 <_strtol_l.isra.0+0xd6>
 8007f46:	b10e      	cbz	r6, 8007f4c <_strtol_l.isra.0+0xec>
 8007f48:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007f4c:	6011      	str	r1, [r2, #0]
 8007f4e:	e7f2      	b.n	8007f36 <_strtol_l.isra.0+0xd6>
 8007f50:	2430      	movs	r4, #48	; 0x30
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1b3      	bne.n	8007ebe <_strtol_l.isra.0+0x5e>
 8007f56:	2308      	movs	r3, #8
 8007f58:	e7b1      	b.n	8007ebe <_strtol_l.isra.0+0x5e>
 8007f5a:	2c30      	cmp	r4, #48	; 0x30
 8007f5c:	d0a4      	beq.n	8007ea8 <_strtol_l.isra.0+0x48>
 8007f5e:	230a      	movs	r3, #10
 8007f60:	e7ad      	b.n	8007ebe <_strtol_l.isra.0+0x5e>
 8007f62:	bf00      	nop
 8007f64:	0800b1e1 	.word	0x0800b1e1

08007f68 <_strtol_r>:
 8007f68:	f7ff bf7a 	b.w	8007e60 <_strtol_l.isra.0>

08007f6c <__swbuf_r>:
 8007f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f6e:	460e      	mov	r6, r1
 8007f70:	4614      	mov	r4, r2
 8007f72:	4605      	mov	r5, r0
 8007f74:	b118      	cbz	r0, 8007f7e <__swbuf_r+0x12>
 8007f76:	6983      	ldr	r3, [r0, #24]
 8007f78:	b90b      	cbnz	r3, 8007f7e <__swbuf_r+0x12>
 8007f7a:	f000 ffe1 	bl	8008f40 <__sinit>
 8007f7e:	4b21      	ldr	r3, [pc, #132]	; (8008004 <__swbuf_r+0x98>)
 8007f80:	429c      	cmp	r4, r3
 8007f82:	d12b      	bne.n	8007fdc <__swbuf_r+0x70>
 8007f84:	686c      	ldr	r4, [r5, #4]
 8007f86:	69a3      	ldr	r3, [r4, #24]
 8007f88:	60a3      	str	r3, [r4, #8]
 8007f8a:	89a3      	ldrh	r3, [r4, #12]
 8007f8c:	071a      	lsls	r2, r3, #28
 8007f8e:	d52f      	bpl.n	8007ff0 <__swbuf_r+0x84>
 8007f90:	6923      	ldr	r3, [r4, #16]
 8007f92:	b36b      	cbz	r3, 8007ff0 <__swbuf_r+0x84>
 8007f94:	6923      	ldr	r3, [r4, #16]
 8007f96:	6820      	ldr	r0, [r4, #0]
 8007f98:	1ac0      	subs	r0, r0, r3
 8007f9a:	6963      	ldr	r3, [r4, #20]
 8007f9c:	b2f6      	uxtb	r6, r6
 8007f9e:	4283      	cmp	r3, r0
 8007fa0:	4637      	mov	r7, r6
 8007fa2:	dc04      	bgt.n	8007fae <__swbuf_r+0x42>
 8007fa4:	4621      	mov	r1, r4
 8007fa6:	4628      	mov	r0, r5
 8007fa8:	f000 ff36 	bl	8008e18 <_fflush_r>
 8007fac:	bb30      	cbnz	r0, 8007ffc <__swbuf_r+0x90>
 8007fae:	68a3      	ldr	r3, [r4, #8]
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	60a3      	str	r3, [r4, #8]
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	1c5a      	adds	r2, r3, #1
 8007fb8:	6022      	str	r2, [r4, #0]
 8007fba:	701e      	strb	r6, [r3, #0]
 8007fbc:	6963      	ldr	r3, [r4, #20]
 8007fbe:	3001      	adds	r0, #1
 8007fc0:	4283      	cmp	r3, r0
 8007fc2:	d004      	beq.n	8007fce <__swbuf_r+0x62>
 8007fc4:	89a3      	ldrh	r3, [r4, #12]
 8007fc6:	07db      	lsls	r3, r3, #31
 8007fc8:	d506      	bpl.n	8007fd8 <__swbuf_r+0x6c>
 8007fca:	2e0a      	cmp	r6, #10
 8007fcc:	d104      	bne.n	8007fd8 <__swbuf_r+0x6c>
 8007fce:	4621      	mov	r1, r4
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	f000 ff21 	bl	8008e18 <_fflush_r>
 8007fd6:	b988      	cbnz	r0, 8007ffc <__swbuf_r+0x90>
 8007fd8:	4638      	mov	r0, r7
 8007fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fdc:	4b0a      	ldr	r3, [pc, #40]	; (8008008 <__swbuf_r+0x9c>)
 8007fde:	429c      	cmp	r4, r3
 8007fe0:	d101      	bne.n	8007fe6 <__swbuf_r+0x7a>
 8007fe2:	68ac      	ldr	r4, [r5, #8]
 8007fe4:	e7cf      	b.n	8007f86 <__swbuf_r+0x1a>
 8007fe6:	4b09      	ldr	r3, [pc, #36]	; (800800c <__swbuf_r+0xa0>)
 8007fe8:	429c      	cmp	r4, r3
 8007fea:	bf08      	it	eq
 8007fec:	68ec      	ldreq	r4, [r5, #12]
 8007fee:	e7ca      	b.n	8007f86 <__swbuf_r+0x1a>
 8007ff0:	4621      	mov	r1, r4
 8007ff2:	4628      	mov	r0, r5
 8007ff4:	f000 f80c 	bl	8008010 <__swsetup_r>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d0cb      	beq.n	8007f94 <__swbuf_r+0x28>
 8007ffc:	f04f 37ff 	mov.w	r7, #4294967295
 8008000:	e7ea      	b.n	8007fd8 <__swbuf_r+0x6c>
 8008002:	bf00      	nop
 8008004:	0800b398 	.word	0x0800b398
 8008008:	0800b3b8 	.word	0x0800b3b8
 800800c:	0800b378 	.word	0x0800b378

08008010 <__swsetup_r>:
 8008010:	4b32      	ldr	r3, [pc, #200]	; (80080dc <__swsetup_r+0xcc>)
 8008012:	b570      	push	{r4, r5, r6, lr}
 8008014:	681d      	ldr	r5, [r3, #0]
 8008016:	4606      	mov	r6, r0
 8008018:	460c      	mov	r4, r1
 800801a:	b125      	cbz	r5, 8008026 <__swsetup_r+0x16>
 800801c:	69ab      	ldr	r3, [r5, #24]
 800801e:	b913      	cbnz	r3, 8008026 <__swsetup_r+0x16>
 8008020:	4628      	mov	r0, r5
 8008022:	f000 ff8d 	bl	8008f40 <__sinit>
 8008026:	4b2e      	ldr	r3, [pc, #184]	; (80080e0 <__swsetup_r+0xd0>)
 8008028:	429c      	cmp	r4, r3
 800802a:	d10f      	bne.n	800804c <__swsetup_r+0x3c>
 800802c:	686c      	ldr	r4, [r5, #4]
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008034:	0719      	lsls	r1, r3, #28
 8008036:	d42c      	bmi.n	8008092 <__swsetup_r+0x82>
 8008038:	06dd      	lsls	r5, r3, #27
 800803a:	d411      	bmi.n	8008060 <__swsetup_r+0x50>
 800803c:	2309      	movs	r3, #9
 800803e:	6033      	str	r3, [r6, #0]
 8008040:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008044:	81a3      	strh	r3, [r4, #12]
 8008046:	f04f 30ff 	mov.w	r0, #4294967295
 800804a:	e03e      	b.n	80080ca <__swsetup_r+0xba>
 800804c:	4b25      	ldr	r3, [pc, #148]	; (80080e4 <__swsetup_r+0xd4>)
 800804e:	429c      	cmp	r4, r3
 8008050:	d101      	bne.n	8008056 <__swsetup_r+0x46>
 8008052:	68ac      	ldr	r4, [r5, #8]
 8008054:	e7eb      	b.n	800802e <__swsetup_r+0x1e>
 8008056:	4b24      	ldr	r3, [pc, #144]	; (80080e8 <__swsetup_r+0xd8>)
 8008058:	429c      	cmp	r4, r3
 800805a:	bf08      	it	eq
 800805c:	68ec      	ldreq	r4, [r5, #12]
 800805e:	e7e6      	b.n	800802e <__swsetup_r+0x1e>
 8008060:	0758      	lsls	r0, r3, #29
 8008062:	d512      	bpl.n	800808a <__swsetup_r+0x7a>
 8008064:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008066:	b141      	cbz	r1, 800807a <__swsetup_r+0x6a>
 8008068:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800806c:	4299      	cmp	r1, r3
 800806e:	d002      	beq.n	8008076 <__swsetup_r+0x66>
 8008070:	4630      	mov	r0, r6
 8008072:	f002 f8d1 	bl	800a218 <_free_r>
 8008076:	2300      	movs	r3, #0
 8008078:	6363      	str	r3, [r4, #52]	; 0x34
 800807a:	89a3      	ldrh	r3, [r4, #12]
 800807c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008080:	81a3      	strh	r3, [r4, #12]
 8008082:	2300      	movs	r3, #0
 8008084:	6063      	str	r3, [r4, #4]
 8008086:	6923      	ldr	r3, [r4, #16]
 8008088:	6023      	str	r3, [r4, #0]
 800808a:	89a3      	ldrh	r3, [r4, #12]
 800808c:	f043 0308 	orr.w	r3, r3, #8
 8008090:	81a3      	strh	r3, [r4, #12]
 8008092:	6923      	ldr	r3, [r4, #16]
 8008094:	b94b      	cbnz	r3, 80080aa <__swsetup_r+0x9a>
 8008096:	89a3      	ldrh	r3, [r4, #12]
 8008098:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800809c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080a0:	d003      	beq.n	80080aa <__swsetup_r+0x9a>
 80080a2:	4621      	mov	r1, r4
 80080a4:	4630      	mov	r0, r6
 80080a6:	f001 fb83 	bl	80097b0 <__smakebuf_r>
 80080aa:	89a0      	ldrh	r0, [r4, #12]
 80080ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080b0:	f010 0301 	ands.w	r3, r0, #1
 80080b4:	d00a      	beq.n	80080cc <__swsetup_r+0xbc>
 80080b6:	2300      	movs	r3, #0
 80080b8:	60a3      	str	r3, [r4, #8]
 80080ba:	6963      	ldr	r3, [r4, #20]
 80080bc:	425b      	negs	r3, r3
 80080be:	61a3      	str	r3, [r4, #24]
 80080c0:	6923      	ldr	r3, [r4, #16]
 80080c2:	b943      	cbnz	r3, 80080d6 <__swsetup_r+0xc6>
 80080c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080c8:	d1ba      	bne.n	8008040 <__swsetup_r+0x30>
 80080ca:	bd70      	pop	{r4, r5, r6, pc}
 80080cc:	0781      	lsls	r1, r0, #30
 80080ce:	bf58      	it	pl
 80080d0:	6963      	ldrpl	r3, [r4, #20]
 80080d2:	60a3      	str	r3, [r4, #8]
 80080d4:	e7f4      	b.n	80080c0 <__swsetup_r+0xb0>
 80080d6:	2000      	movs	r0, #0
 80080d8:	e7f7      	b.n	80080ca <__swsetup_r+0xba>
 80080da:	bf00      	nop
 80080dc:	20000010 	.word	0x20000010
 80080e0:	0800b398 	.word	0x0800b398
 80080e4:	0800b3b8 	.word	0x0800b3b8
 80080e8:	0800b378 	.word	0x0800b378

080080ec <quorem>:
 80080ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f0:	6903      	ldr	r3, [r0, #16]
 80080f2:	690c      	ldr	r4, [r1, #16]
 80080f4:	42a3      	cmp	r3, r4
 80080f6:	4607      	mov	r7, r0
 80080f8:	f2c0 8081 	blt.w	80081fe <quorem+0x112>
 80080fc:	3c01      	subs	r4, #1
 80080fe:	f101 0814 	add.w	r8, r1, #20
 8008102:	f100 0514 	add.w	r5, r0, #20
 8008106:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800810a:	9301      	str	r3, [sp, #4]
 800810c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008110:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008114:	3301      	adds	r3, #1
 8008116:	429a      	cmp	r2, r3
 8008118:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800811c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008120:	fbb2 f6f3 	udiv	r6, r2, r3
 8008124:	d331      	bcc.n	800818a <quorem+0x9e>
 8008126:	f04f 0e00 	mov.w	lr, #0
 800812a:	4640      	mov	r0, r8
 800812c:	46ac      	mov	ip, r5
 800812e:	46f2      	mov	sl, lr
 8008130:	f850 2b04 	ldr.w	r2, [r0], #4
 8008134:	b293      	uxth	r3, r2
 8008136:	fb06 e303 	mla	r3, r6, r3, lr
 800813a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800813e:	b29b      	uxth	r3, r3
 8008140:	ebaa 0303 	sub.w	r3, sl, r3
 8008144:	0c12      	lsrs	r2, r2, #16
 8008146:	f8dc a000 	ldr.w	sl, [ip]
 800814a:	fb06 e202 	mla	r2, r6, r2, lr
 800814e:	fa13 f38a 	uxtah	r3, r3, sl
 8008152:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008156:	fa1f fa82 	uxth.w	sl, r2
 800815a:	f8dc 2000 	ldr.w	r2, [ip]
 800815e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008162:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008166:	b29b      	uxth	r3, r3
 8008168:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800816c:	4581      	cmp	r9, r0
 800816e:	f84c 3b04 	str.w	r3, [ip], #4
 8008172:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008176:	d2db      	bcs.n	8008130 <quorem+0x44>
 8008178:	f855 300b 	ldr.w	r3, [r5, fp]
 800817c:	b92b      	cbnz	r3, 800818a <quorem+0x9e>
 800817e:	9b01      	ldr	r3, [sp, #4]
 8008180:	3b04      	subs	r3, #4
 8008182:	429d      	cmp	r5, r3
 8008184:	461a      	mov	r2, r3
 8008186:	d32e      	bcc.n	80081e6 <quorem+0xfa>
 8008188:	613c      	str	r4, [r7, #16]
 800818a:	4638      	mov	r0, r7
 800818c:	f001 fe40 	bl	8009e10 <__mcmp>
 8008190:	2800      	cmp	r0, #0
 8008192:	db24      	blt.n	80081de <quorem+0xf2>
 8008194:	3601      	adds	r6, #1
 8008196:	4628      	mov	r0, r5
 8008198:	f04f 0c00 	mov.w	ip, #0
 800819c:	f858 2b04 	ldr.w	r2, [r8], #4
 80081a0:	f8d0 e000 	ldr.w	lr, [r0]
 80081a4:	b293      	uxth	r3, r2
 80081a6:	ebac 0303 	sub.w	r3, ip, r3
 80081aa:	0c12      	lsrs	r2, r2, #16
 80081ac:	fa13 f38e 	uxtah	r3, r3, lr
 80081b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80081b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081be:	45c1      	cmp	r9, r8
 80081c0:	f840 3b04 	str.w	r3, [r0], #4
 80081c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80081c8:	d2e8      	bcs.n	800819c <quorem+0xb0>
 80081ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081d2:	b922      	cbnz	r2, 80081de <quorem+0xf2>
 80081d4:	3b04      	subs	r3, #4
 80081d6:	429d      	cmp	r5, r3
 80081d8:	461a      	mov	r2, r3
 80081da:	d30a      	bcc.n	80081f2 <quorem+0x106>
 80081dc:	613c      	str	r4, [r7, #16]
 80081de:	4630      	mov	r0, r6
 80081e0:	b003      	add	sp, #12
 80081e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081e6:	6812      	ldr	r2, [r2, #0]
 80081e8:	3b04      	subs	r3, #4
 80081ea:	2a00      	cmp	r2, #0
 80081ec:	d1cc      	bne.n	8008188 <quorem+0x9c>
 80081ee:	3c01      	subs	r4, #1
 80081f0:	e7c7      	b.n	8008182 <quorem+0x96>
 80081f2:	6812      	ldr	r2, [r2, #0]
 80081f4:	3b04      	subs	r3, #4
 80081f6:	2a00      	cmp	r2, #0
 80081f8:	d1f0      	bne.n	80081dc <quorem+0xf0>
 80081fa:	3c01      	subs	r4, #1
 80081fc:	e7eb      	b.n	80081d6 <quorem+0xea>
 80081fe:	2000      	movs	r0, #0
 8008200:	e7ee      	b.n	80081e0 <quorem+0xf4>
 8008202:	0000      	movs	r0, r0
 8008204:	0000      	movs	r0, r0
	...

08008208 <_dtoa_r>:
 8008208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800820c:	ec59 8b10 	vmov	r8, r9, d0
 8008210:	b095      	sub	sp, #84	; 0x54
 8008212:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008214:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8008216:	9107      	str	r1, [sp, #28]
 8008218:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800821c:	4606      	mov	r6, r0
 800821e:	9209      	str	r2, [sp, #36]	; 0x24
 8008220:	9310      	str	r3, [sp, #64]	; 0x40
 8008222:	b975      	cbnz	r5, 8008242 <_dtoa_r+0x3a>
 8008224:	2010      	movs	r0, #16
 8008226:	f001 fb03 	bl	8009830 <malloc>
 800822a:	4602      	mov	r2, r0
 800822c:	6270      	str	r0, [r6, #36]	; 0x24
 800822e:	b920      	cbnz	r0, 800823a <_dtoa_r+0x32>
 8008230:	4bab      	ldr	r3, [pc, #684]	; (80084e0 <_dtoa_r+0x2d8>)
 8008232:	21ea      	movs	r1, #234	; 0xea
 8008234:	48ab      	ldr	r0, [pc, #684]	; (80084e4 <_dtoa_r+0x2dc>)
 8008236:	f002 fc23 	bl	800aa80 <__assert_func>
 800823a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800823e:	6005      	str	r5, [r0, #0]
 8008240:	60c5      	str	r5, [r0, #12]
 8008242:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008244:	6819      	ldr	r1, [r3, #0]
 8008246:	b151      	cbz	r1, 800825e <_dtoa_r+0x56>
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	604a      	str	r2, [r1, #4]
 800824c:	2301      	movs	r3, #1
 800824e:	4093      	lsls	r3, r2
 8008250:	608b      	str	r3, [r1, #8]
 8008252:	4630      	mov	r0, r6
 8008254:	f001 fb54 	bl	8009900 <_Bfree>
 8008258:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800825a:	2200      	movs	r2, #0
 800825c:	601a      	str	r2, [r3, #0]
 800825e:	f1b9 0300 	subs.w	r3, r9, #0
 8008262:	bfbb      	ittet	lt
 8008264:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008268:	9303      	strlt	r3, [sp, #12]
 800826a:	2300      	movge	r3, #0
 800826c:	2201      	movlt	r2, #1
 800826e:	bfac      	ite	ge
 8008270:	6023      	strge	r3, [r4, #0]
 8008272:	6022      	strlt	r2, [r4, #0]
 8008274:	4b9c      	ldr	r3, [pc, #624]	; (80084e8 <_dtoa_r+0x2e0>)
 8008276:	9c03      	ldr	r4, [sp, #12]
 8008278:	43a3      	bics	r3, r4
 800827a:	d11a      	bne.n	80082b2 <_dtoa_r+0xaa>
 800827c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800827e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008282:	6013      	str	r3, [r2, #0]
 8008284:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008288:	ea53 0308 	orrs.w	r3, r3, r8
 800828c:	f000 8512 	beq.w	8008cb4 <_dtoa_r+0xaac>
 8008290:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008292:	b953      	cbnz	r3, 80082aa <_dtoa_r+0xa2>
 8008294:	4b95      	ldr	r3, [pc, #596]	; (80084ec <_dtoa_r+0x2e4>)
 8008296:	e01f      	b.n	80082d8 <_dtoa_r+0xd0>
 8008298:	4b95      	ldr	r3, [pc, #596]	; (80084f0 <_dtoa_r+0x2e8>)
 800829a:	9300      	str	r3, [sp, #0]
 800829c:	3308      	adds	r3, #8
 800829e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80082a0:	6013      	str	r3, [r2, #0]
 80082a2:	9800      	ldr	r0, [sp, #0]
 80082a4:	b015      	add	sp, #84	; 0x54
 80082a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082aa:	4b90      	ldr	r3, [pc, #576]	; (80084ec <_dtoa_r+0x2e4>)
 80082ac:	9300      	str	r3, [sp, #0]
 80082ae:	3303      	adds	r3, #3
 80082b0:	e7f5      	b.n	800829e <_dtoa_r+0x96>
 80082b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80082ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082be:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80082c2:	d10b      	bne.n	80082dc <_dtoa_r+0xd4>
 80082c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082c6:	2301      	movs	r3, #1
 80082c8:	6013      	str	r3, [r2, #0]
 80082ca:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	f000 84ee 	beq.w	8008cae <_dtoa_r+0xaa6>
 80082d2:	4888      	ldr	r0, [pc, #544]	; (80084f4 <_dtoa_r+0x2ec>)
 80082d4:	6018      	str	r0, [r3, #0]
 80082d6:	1e43      	subs	r3, r0, #1
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	e7e2      	b.n	80082a2 <_dtoa_r+0x9a>
 80082dc:	a913      	add	r1, sp, #76	; 0x4c
 80082de:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80082e2:	aa12      	add	r2, sp, #72	; 0x48
 80082e4:	4630      	mov	r0, r6
 80082e6:	f001 feb3 	bl	800a050 <__d2b>
 80082ea:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80082ee:	4605      	mov	r5, r0
 80082f0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80082f2:	2900      	cmp	r1, #0
 80082f4:	d047      	beq.n	8008386 <_dtoa_r+0x17e>
 80082f6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80082f8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80082fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008300:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8008304:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008308:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800830c:	2400      	movs	r4, #0
 800830e:	ec43 2b16 	vmov	d6, r2, r3
 8008312:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008316:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80084c8 <_dtoa_r+0x2c0>
 800831a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800831e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80084d0 <_dtoa_r+0x2c8>
 8008322:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008326:	eeb0 7b46 	vmov.f64	d7, d6
 800832a:	ee06 1a90 	vmov	s13, r1
 800832e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8008332:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80084d8 <_dtoa_r+0x2d0>
 8008336:	eea5 7b06 	vfma.f64	d7, d5, d6
 800833a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800833e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008346:	ee16 ba90 	vmov	fp, s13
 800834a:	9411      	str	r4, [sp, #68]	; 0x44
 800834c:	d508      	bpl.n	8008360 <_dtoa_r+0x158>
 800834e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008352:	eeb4 6b47 	vcmp.f64	d6, d7
 8008356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800835a:	bf18      	it	ne
 800835c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008360:	f1bb 0f16 	cmp.w	fp, #22
 8008364:	d832      	bhi.n	80083cc <_dtoa_r+0x1c4>
 8008366:	4b64      	ldr	r3, [pc, #400]	; (80084f8 <_dtoa_r+0x2f0>)
 8008368:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800836c:	ed93 7b00 	vldr	d7, [r3]
 8008370:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8008374:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800837c:	d501      	bpl.n	8008382 <_dtoa_r+0x17a>
 800837e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008382:	2300      	movs	r3, #0
 8008384:	e023      	b.n	80083ce <_dtoa_r+0x1c6>
 8008386:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008388:	4401      	add	r1, r0
 800838a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800838e:	2b20      	cmp	r3, #32
 8008390:	bfc3      	ittte	gt
 8008392:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008396:	fa04 f303 	lslgt.w	r3, r4, r3
 800839a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800839e:	f1c3 0320 	rsble	r3, r3, #32
 80083a2:	bfc6      	itte	gt
 80083a4:	fa28 f804 	lsrgt.w	r8, r8, r4
 80083a8:	ea43 0308 	orrgt.w	r3, r3, r8
 80083ac:	fa08 f303 	lslle.w	r3, r8, r3
 80083b0:	ee07 3a90 	vmov	s15, r3
 80083b4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80083b8:	3901      	subs	r1, #1
 80083ba:	ed8d 7b00 	vstr	d7, [sp]
 80083be:	9c01      	ldr	r4, [sp, #4]
 80083c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083c4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80083c8:	2401      	movs	r4, #1
 80083ca:	e7a0      	b.n	800830e <_dtoa_r+0x106>
 80083cc:	2301      	movs	r3, #1
 80083ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80083d0:	1a43      	subs	r3, r0, r1
 80083d2:	1e5a      	subs	r2, r3, #1
 80083d4:	bf45      	ittet	mi
 80083d6:	f1c3 0301 	rsbmi	r3, r3, #1
 80083da:	9305      	strmi	r3, [sp, #20]
 80083dc:	2300      	movpl	r3, #0
 80083de:	2300      	movmi	r3, #0
 80083e0:	9206      	str	r2, [sp, #24]
 80083e2:	bf54      	ite	pl
 80083e4:	9305      	strpl	r3, [sp, #20]
 80083e6:	9306      	strmi	r3, [sp, #24]
 80083e8:	f1bb 0f00 	cmp.w	fp, #0
 80083ec:	db18      	blt.n	8008420 <_dtoa_r+0x218>
 80083ee:	9b06      	ldr	r3, [sp, #24]
 80083f0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80083f4:	445b      	add	r3, fp
 80083f6:	9306      	str	r3, [sp, #24]
 80083f8:	2300      	movs	r3, #0
 80083fa:	9a07      	ldr	r2, [sp, #28]
 80083fc:	2a09      	cmp	r2, #9
 80083fe:	d849      	bhi.n	8008494 <_dtoa_r+0x28c>
 8008400:	2a05      	cmp	r2, #5
 8008402:	bfc4      	itt	gt
 8008404:	3a04      	subgt	r2, #4
 8008406:	9207      	strgt	r2, [sp, #28]
 8008408:	9a07      	ldr	r2, [sp, #28]
 800840a:	f1a2 0202 	sub.w	r2, r2, #2
 800840e:	bfcc      	ite	gt
 8008410:	2400      	movgt	r4, #0
 8008412:	2401      	movle	r4, #1
 8008414:	2a03      	cmp	r2, #3
 8008416:	d848      	bhi.n	80084aa <_dtoa_r+0x2a2>
 8008418:	e8df f002 	tbb	[pc, r2]
 800841c:	3a2c2e0b 	.word	0x3a2c2e0b
 8008420:	9b05      	ldr	r3, [sp, #20]
 8008422:	2200      	movs	r2, #0
 8008424:	eba3 030b 	sub.w	r3, r3, fp
 8008428:	9305      	str	r3, [sp, #20]
 800842a:	920e      	str	r2, [sp, #56]	; 0x38
 800842c:	f1cb 0300 	rsb	r3, fp, #0
 8008430:	e7e3      	b.n	80083fa <_dtoa_r+0x1f2>
 8008432:	2200      	movs	r2, #0
 8008434:	9208      	str	r2, [sp, #32]
 8008436:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008438:	2a00      	cmp	r2, #0
 800843a:	dc39      	bgt.n	80084b0 <_dtoa_r+0x2a8>
 800843c:	f04f 0a01 	mov.w	sl, #1
 8008440:	46d1      	mov	r9, sl
 8008442:	4652      	mov	r2, sl
 8008444:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008448:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800844a:	2100      	movs	r1, #0
 800844c:	6079      	str	r1, [r7, #4]
 800844e:	2004      	movs	r0, #4
 8008450:	f100 0c14 	add.w	ip, r0, #20
 8008454:	4594      	cmp	ip, r2
 8008456:	6879      	ldr	r1, [r7, #4]
 8008458:	d92f      	bls.n	80084ba <_dtoa_r+0x2b2>
 800845a:	4630      	mov	r0, r6
 800845c:	930c      	str	r3, [sp, #48]	; 0x30
 800845e:	f001 fa0f 	bl	8009880 <_Balloc>
 8008462:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008464:	9000      	str	r0, [sp, #0]
 8008466:	4602      	mov	r2, r0
 8008468:	2800      	cmp	r0, #0
 800846a:	d149      	bne.n	8008500 <_dtoa_r+0x2f8>
 800846c:	4b23      	ldr	r3, [pc, #140]	; (80084fc <_dtoa_r+0x2f4>)
 800846e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008472:	e6df      	b.n	8008234 <_dtoa_r+0x2c>
 8008474:	2201      	movs	r2, #1
 8008476:	e7dd      	b.n	8008434 <_dtoa_r+0x22c>
 8008478:	2200      	movs	r2, #0
 800847a:	9208      	str	r2, [sp, #32]
 800847c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800847e:	eb0b 0a02 	add.w	sl, fp, r2
 8008482:	f10a 0901 	add.w	r9, sl, #1
 8008486:	464a      	mov	r2, r9
 8008488:	2a01      	cmp	r2, #1
 800848a:	bfb8      	it	lt
 800848c:	2201      	movlt	r2, #1
 800848e:	e7db      	b.n	8008448 <_dtoa_r+0x240>
 8008490:	2201      	movs	r2, #1
 8008492:	e7f2      	b.n	800847a <_dtoa_r+0x272>
 8008494:	2401      	movs	r4, #1
 8008496:	2200      	movs	r2, #0
 8008498:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800849c:	f04f 3aff 	mov.w	sl, #4294967295
 80084a0:	2100      	movs	r1, #0
 80084a2:	46d1      	mov	r9, sl
 80084a4:	2212      	movs	r2, #18
 80084a6:	9109      	str	r1, [sp, #36]	; 0x24
 80084a8:	e7ce      	b.n	8008448 <_dtoa_r+0x240>
 80084aa:	2201      	movs	r2, #1
 80084ac:	9208      	str	r2, [sp, #32]
 80084ae:	e7f5      	b.n	800849c <_dtoa_r+0x294>
 80084b0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80084b4:	46d1      	mov	r9, sl
 80084b6:	4652      	mov	r2, sl
 80084b8:	e7c6      	b.n	8008448 <_dtoa_r+0x240>
 80084ba:	3101      	adds	r1, #1
 80084bc:	6079      	str	r1, [r7, #4]
 80084be:	0040      	lsls	r0, r0, #1
 80084c0:	e7c6      	b.n	8008450 <_dtoa_r+0x248>
 80084c2:	bf00      	nop
 80084c4:	f3af 8000 	nop.w
 80084c8:	636f4361 	.word	0x636f4361
 80084cc:	3fd287a7 	.word	0x3fd287a7
 80084d0:	8b60c8b3 	.word	0x8b60c8b3
 80084d4:	3fc68a28 	.word	0x3fc68a28
 80084d8:	509f79fb 	.word	0x509f79fb
 80084dc:	3fd34413 	.word	0x3fd34413
 80084e0:	0800b2ee 	.word	0x0800b2ee
 80084e4:	0800b305 	.word	0x0800b305
 80084e8:	7ff00000 	.word	0x7ff00000
 80084ec:	0800b2ea 	.word	0x0800b2ea
 80084f0:	0800b2e1 	.word	0x0800b2e1
 80084f4:	0800b165 	.word	0x0800b165
 80084f8:	0800b4e0 	.word	0x0800b4e0
 80084fc:	0800b364 	.word	0x0800b364
 8008500:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008502:	9900      	ldr	r1, [sp, #0]
 8008504:	6011      	str	r1, [r2, #0]
 8008506:	f1b9 0f0e 	cmp.w	r9, #14
 800850a:	d872      	bhi.n	80085f2 <_dtoa_r+0x3ea>
 800850c:	2c00      	cmp	r4, #0
 800850e:	d070      	beq.n	80085f2 <_dtoa_r+0x3ea>
 8008510:	f1bb 0f00 	cmp.w	fp, #0
 8008514:	f340 80a6 	ble.w	8008664 <_dtoa_r+0x45c>
 8008518:	49ca      	ldr	r1, [pc, #808]	; (8008844 <_dtoa_r+0x63c>)
 800851a:	f00b 020f 	and.w	r2, fp, #15
 800851e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008522:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008526:	ed92 7b00 	vldr	d7, [r2]
 800852a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800852e:	f000 808d 	beq.w	800864c <_dtoa_r+0x444>
 8008532:	4ac5      	ldr	r2, [pc, #788]	; (8008848 <_dtoa_r+0x640>)
 8008534:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8008538:	ed92 6b08 	vldr	d6, [r2, #32]
 800853c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8008540:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008544:	f001 010f 	and.w	r1, r1, #15
 8008548:	2203      	movs	r2, #3
 800854a:	48bf      	ldr	r0, [pc, #764]	; (8008848 <_dtoa_r+0x640>)
 800854c:	2900      	cmp	r1, #0
 800854e:	d17f      	bne.n	8008650 <_dtoa_r+0x448>
 8008550:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008554:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008558:	ed8d 7b02 	vstr	d7, [sp, #8]
 800855c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800855e:	2900      	cmp	r1, #0
 8008560:	f000 80b2 	beq.w	80086c8 <_dtoa_r+0x4c0>
 8008564:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008568:	ed9d 7b02 	vldr	d7, [sp, #8]
 800856c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008574:	f140 80a8 	bpl.w	80086c8 <_dtoa_r+0x4c0>
 8008578:	f1b9 0f00 	cmp.w	r9, #0
 800857c:	f000 80a4 	beq.w	80086c8 <_dtoa_r+0x4c0>
 8008580:	f1ba 0f00 	cmp.w	sl, #0
 8008584:	dd31      	ble.n	80085ea <_dtoa_r+0x3e2>
 8008586:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800858a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800858e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008592:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008596:	3201      	adds	r2, #1
 8008598:	4650      	mov	r0, sl
 800859a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800859e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80085a2:	ee07 2a90 	vmov	s15, r2
 80085a6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80085aa:	eea7 5b06 	vfma.f64	d5, d7, d6
 80085ae:	ed8d 5b02 	vstr	d5, [sp, #8]
 80085b2:	9c03      	ldr	r4, [sp, #12]
 80085b4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80085b8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80085bc:	2800      	cmp	r0, #0
 80085be:	f040 8086 	bne.w	80086ce <_dtoa_r+0x4c6>
 80085c2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80085c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80085ca:	ec42 1b17 	vmov	d7, r1, r2
 80085ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80085d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085d6:	f300 8272 	bgt.w	8008abe <_dtoa_r+0x8b6>
 80085da:	eeb1 7b47 	vneg.f64	d7, d7
 80085de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80085e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085e6:	f100 8267 	bmi.w	8008ab8 <_dtoa_r+0x8b0>
 80085ea:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80085ee:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80085f2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80085f4:	2a00      	cmp	r2, #0
 80085f6:	f2c0 8129 	blt.w	800884c <_dtoa_r+0x644>
 80085fa:	f1bb 0f0e 	cmp.w	fp, #14
 80085fe:	f300 8125 	bgt.w	800884c <_dtoa_r+0x644>
 8008602:	4b90      	ldr	r3, [pc, #576]	; (8008844 <_dtoa_r+0x63c>)
 8008604:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008608:	ed93 6b00 	vldr	d6, [r3]
 800860c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800860e:	2b00      	cmp	r3, #0
 8008610:	f280 80c3 	bge.w	800879a <_dtoa_r+0x592>
 8008614:	f1b9 0f00 	cmp.w	r9, #0
 8008618:	f300 80bf 	bgt.w	800879a <_dtoa_r+0x592>
 800861c:	f040 824c 	bne.w	8008ab8 <_dtoa_r+0x8b0>
 8008620:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008624:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008628:	ed9d 7b02 	vldr	d7, [sp, #8]
 800862c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008634:	464c      	mov	r4, r9
 8008636:	464f      	mov	r7, r9
 8008638:	f280 8222 	bge.w	8008a80 <_dtoa_r+0x878>
 800863c:	f8dd 8000 	ldr.w	r8, [sp]
 8008640:	2331      	movs	r3, #49	; 0x31
 8008642:	f808 3b01 	strb.w	r3, [r8], #1
 8008646:	f10b 0b01 	add.w	fp, fp, #1
 800864a:	e21e      	b.n	8008a8a <_dtoa_r+0x882>
 800864c:	2202      	movs	r2, #2
 800864e:	e77c      	b.n	800854a <_dtoa_r+0x342>
 8008650:	07cc      	lsls	r4, r1, #31
 8008652:	d504      	bpl.n	800865e <_dtoa_r+0x456>
 8008654:	ed90 6b00 	vldr	d6, [r0]
 8008658:	3201      	adds	r2, #1
 800865a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800865e:	1049      	asrs	r1, r1, #1
 8008660:	3008      	adds	r0, #8
 8008662:	e773      	b.n	800854c <_dtoa_r+0x344>
 8008664:	d02e      	beq.n	80086c4 <_dtoa_r+0x4bc>
 8008666:	f1cb 0100 	rsb	r1, fp, #0
 800866a:	4a76      	ldr	r2, [pc, #472]	; (8008844 <_dtoa_r+0x63c>)
 800866c:	f001 000f 	and.w	r0, r1, #15
 8008670:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008674:	ed92 7b00 	vldr	d7, [r2]
 8008678:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800867c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008680:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008684:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8008688:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800868c:	486e      	ldr	r0, [pc, #440]	; (8008848 <_dtoa_r+0x640>)
 800868e:	1109      	asrs	r1, r1, #4
 8008690:	2400      	movs	r4, #0
 8008692:	2202      	movs	r2, #2
 8008694:	b939      	cbnz	r1, 80086a6 <_dtoa_r+0x49e>
 8008696:	2c00      	cmp	r4, #0
 8008698:	f43f af60 	beq.w	800855c <_dtoa_r+0x354>
 800869c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80086a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086a4:	e75a      	b.n	800855c <_dtoa_r+0x354>
 80086a6:	07cf      	lsls	r7, r1, #31
 80086a8:	d509      	bpl.n	80086be <_dtoa_r+0x4b6>
 80086aa:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80086ae:	ed90 7b00 	vldr	d7, [r0]
 80086b2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80086b6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80086ba:	3201      	adds	r2, #1
 80086bc:	2401      	movs	r4, #1
 80086be:	1049      	asrs	r1, r1, #1
 80086c0:	3008      	adds	r0, #8
 80086c2:	e7e7      	b.n	8008694 <_dtoa_r+0x48c>
 80086c4:	2202      	movs	r2, #2
 80086c6:	e749      	b.n	800855c <_dtoa_r+0x354>
 80086c8:	465f      	mov	r7, fp
 80086ca:	4648      	mov	r0, r9
 80086cc:	e765      	b.n	800859a <_dtoa_r+0x392>
 80086ce:	ec42 1b17 	vmov	d7, r1, r2
 80086d2:	4a5c      	ldr	r2, [pc, #368]	; (8008844 <_dtoa_r+0x63c>)
 80086d4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80086d8:	ed12 4b02 	vldr	d4, [r2, #-8]
 80086dc:	9a00      	ldr	r2, [sp, #0]
 80086de:	1814      	adds	r4, r2, r0
 80086e0:	9a08      	ldr	r2, [sp, #32]
 80086e2:	b352      	cbz	r2, 800873a <_dtoa_r+0x532>
 80086e4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80086e8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80086ec:	f8dd 8000 	ldr.w	r8, [sp]
 80086f0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80086f4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80086f8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80086fc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008700:	ee14 2a90 	vmov	r2, s9
 8008704:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008708:	3230      	adds	r2, #48	; 0x30
 800870a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800870e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008716:	f808 2b01 	strb.w	r2, [r8], #1
 800871a:	d439      	bmi.n	8008790 <_dtoa_r+0x588>
 800871c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008720:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008728:	d472      	bmi.n	8008810 <_dtoa_r+0x608>
 800872a:	45a0      	cmp	r8, r4
 800872c:	f43f af5d 	beq.w	80085ea <_dtoa_r+0x3e2>
 8008730:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008734:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008738:	e7e0      	b.n	80086fc <_dtoa_r+0x4f4>
 800873a:	f8dd 8000 	ldr.w	r8, [sp]
 800873e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008742:	4621      	mov	r1, r4
 8008744:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008748:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800874c:	ee14 2a90 	vmov	r2, s9
 8008750:	3230      	adds	r2, #48	; 0x30
 8008752:	f808 2b01 	strb.w	r2, [r8], #1
 8008756:	45a0      	cmp	r8, r4
 8008758:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800875c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008760:	d118      	bne.n	8008794 <_dtoa_r+0x58c>
 8008762:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008766:	ee37 4b05 	vadd.f64	d4, d7, d5
 800876a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800876e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008772:	dc4d      	bgt.n	8008810 <_dtoa_r+0x608>
 8008774:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008778:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800877c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008780:	f57f af33 	bpl.w	80085ea <_dtoa_r+0x3e2>
 8008784:	4688      	mov	r8, r1
 8008786:	3901      	subs	r1, #1
 8008788:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800878c:	2b30      	cmp	r3, #48	; 0x30
 800878e:	d0f9      	beq.n	8008784 <_dtoa_r+0x57c>
 8008790:	46bb      	mov	fp, r7
 8008792:	e02a      	b.n	80087ea <_dtoa_r+0x5e2>
 8008794:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008798:	e7d6      	b.n	8008748 <_dtoa_r+0x540>
 800879a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800879e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80087a2:	f8dd 8000 	ldr.w	r8, [sp]
 80087a6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80087aa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80087ae:	ee15 3a10 	vmov	r3, s10
 80087b2:	3330      	adds	r3, #48	; 0x30
 80087b4:	f808 3b01 	strb.w	r3, [r8], #1
 80087b8:	9b00      	ldr	r3, [sp, #0]
 80087ba:	eba8 0303 	sub.w	r3, r8, r3
 80087be:	4599      	cmp	r9, r3
 80087c0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80087c4:	eea3 7b46 	vfms.f64	d7, d3, d6
 80087c8:	d133      	bne.n	8008832 <_dtoa_r+0x62a>
 80087ca:	ee37 7b07 	vadd.f64	d7, d7, d7
 80087ce:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80087d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087d6:	dc1a      	bgt.n	800880e <_dtoa_r+0x606>
 80087d8:	eeb4 7b46 	vcmp.f64	d7, d6
 80087dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e0:	d103      	bne.n	80087ea <_dtoa_r+0x5e2>
 80087e2:	ee15 3a10 	vmov	r3, s10
 80087e6:	07d9      	lsls	r1, r3, #31
 80087e8:	d411      	bmi.n	800880e <_dtoa_r+0x606>
 80087ea:	4629      	mov	r1, r5
 80087ec:	4630      	mov	r0, r6
 80087ee:	f001 f887 	bl	8009900 <_Bfree>
 80087f2:	2300      	movs	r3, #0
 80087f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80087f6:	f888 3000 	strb.w	r3, [r8]
 80087fa:	f10b 0301 	add.w	r3, fp, #1
 80087fe:	6013      	str	r3, [r2, #0]
 8008800:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008802:	2b00      	cmp	r3, #0
 8008804:	f43f ad4d 	beq.w	80082a2 <_dtoa_r+0x9a>
 8008808:	f8c3 8000 	str.w	r8, [r3]
 800880c:	e549      	b.n	80082a2 <_dtoa_r+0x9a>
 800880e:	465f      	mov	r7, fp
 8008810:	4643      	mov	r3, r8
 8008812:	4698      	mov	r8, r3
 8008814:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008818:	2a39      	cmp	r2, #57	; 0x39
 800881a:	d106      	bne.n	800882a <_dtoa_r+0x622>
 800881c:	9a00      	ldr	r2, [sp, #0]
 800881e:	429a      	cmp	r2, r3
 8008820:	d1f7      	bne.n	8008812 <_dtoa_r+0x60a>
 8008822:	9900      	ldr	r1, [sp, #0]
 8008824:	2230      	movs	r2, #48	; 0x30
 8008826:	3701      	adds	r7, #1
 8008828:	700a      	strb	r2, [r1, #0]
 800882a:	781a      	ldrb	r2, [r3, #0]
 800882c:	3201      	adds	r2, #1
 800882e:	701a      	strb	r2, [r3, #0]
 8008830:	e7ae      	b.n	8008790 <_dtoa_r+0x588>
 8008832:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008836:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800883a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800883e:	d1b2      	bne.n	80087a6 <_dtoa_r+0x59e>
 8008840:	e7d3      	b.n	80087ea <_dtoa_r+0x5e2>
 8008842:	bf00      	nop
 8008844:	0800b4e0 	.word	0x0800b4e0
 8008848:	0800b4b8 	.word	0x0800b4b8
 800884c:	9908      	ldr	r1, [sp, #32]
 800884e:	2900      	cmp	r1, #0
 8008850:	f000 80d1 	beq.w	80089f6 <_dtoa_r+0x7ee>
 8008854:	9907      	ldr	r1, [sp, #28]
 8008856:	2901      	cmp	r1, #1
 8008858:	f300 80b4 	bgt.w	80089c4 <_dtoa_r+0x7bc>
 800885c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800885e:	2900      	cmp	r1, #0
 8008860:	f000 80ac 	beq.w	80089bc <_dtoa_r+0x7b4>
 8008864:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008868:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800886c:	461c      	mov	r4, r3
 800886e:	930a      	str	r3, [sp, #40]	; 0x28
 8008870:	9b05      	ldr	r3, [sp, #20]
 8008872:	4413      	add	r3, r2
 8008874:	9305      	str	r3, [sp, #20]
 8008876:	9b06      	ldr	r3, [sp, #24]
 8008878:	2101      	movs	r1, #1
 800887a:	4413      	add	r3, r2
 800887c:	4630      	mov	r0, r6
 800887e:	9306      	str	r3, [sp, #24]
 8008880:	f001 f944 	bl	8009b0c <__i2b>
 8008884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008886:	4607      	mov	r7, r0
 8008888:	f1b8 0f00 	cmp.w	r8, #0
 800888c:	dd0d      	ble.n	80088aa <_dtoa_r+0x6a2>
 800888e:	9a06      	ldr	r2, [sp, #24]
 8008890:	2a00      	cmp	r2, #0
 8008892:	dd0a      	ble.n	80088aa <_dtoa_r+0x6a2>
 8008894:	4542      	cmp	r2, r8
 8008896:	9905      	ldr	r1, [sp, #20]
 8008898:	bfa8      	it	ge
 800889a:	4642      	movge	r2, r8
 800889c:	1a89      	subs	r1, r1, r2
 800889e:	9105      	str	r1, [sp, #20]
 80088a0:	9906      	ldr	r1, [sp, #24]
 80088a2:	eba8 0802 	sub.w	r8, r8, r2
 80088a6:	1a8a      	subs	r2, r1, r2
 80088a8:	9206      	str	r2, [sp, #24]
 80088aa:	b303      	cbz	r3, 80088ee <_dtoa_r+0x6e6>
 80088ac:	9a08      	ldr	r2, [sp, #32]
 80088ae:	2a00      	cmp	r2, #0
 80088b0:	f000 80a6 	beq.w	8008a00 <_dtoa_r+0x7f8>
 80088b4:	2c00      	cmp	r4, #0
 80088b6:	dd13      	ble.n	80088e0 <_dtoa_r+0x6d8>
 80088b8:	4639      	mov	r1, r7
 80088ba:	4622      	mov	r2, r4
 80088bc:	4630      	mov	r0, r6
 80088be:	930c      	str	r3, [sp, #48]	; 0x30
 80088c0:	f001 f9e0 	bl	8009c84 <__pow5mult>
 80088c4:	462a      	mov	r2, r5
 80088c6:	4601      	mov	r1, r0
 80088c8:	4607      	mov	r7, r0
 80088ca:	4630      	mov	r0, r6
 80088cc:	f001 f934 	bl	8009b38 <__multiply>
 80088d0:	4629      	mov	r1, r5
 80088d2:	900a      	str	r0, [sp, #40]	; 0x28
 80088d4:	4630      	mov	r0, r6
 80088d6:	f001 f813 	bl	8009900 <_Bfree>
 80088da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088de:	4615      	mov	r5, r2
 80088e0:	1b1a      	subs	r2, r3, r4
 80088e2:	d004      	beq.n	80088ee <_dtoa_r+0x6e6>
 80088e4:	4629      	mov	r1, r5
 80088e6:	4630      	mov	r0, r6
 80088e8:	f001 f9cc 	bl	8009c84 <__pow5mult>
 80088ec:	4605      	mov	r5, r0
 80088ee:	2101      	movs	r1, #1
 80088f0:	4630      	mov	r0, r6
 80088f2:	f001 f90b 	bl	8009b0c <__i2b>
 80088f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	4604      	mov	r4, r0
 80088fc:	f340 8082 	ble.w	8008a04 <_dtoa_r+0x7fc>
 8008900:	461a      	mov	r2, r3
 8008902:	4601      	mov	r1, r0
 8008904:	4630      	mov	r0, r6
 8008906:	f001 f9bd 	bl	8009c84 <__pow5mult>
 800890a:	9b07      	ldr	r3, [sp, #28]
 800890c:	2b01      	cmp	r3, #1
 800890e:	4604      	mov	r4, r0
 8008910:	dd7b      	ble.n	8008a0a <_dtoa_r+0x802>
 8008912:	2300      	movs	r3, #0
 8008914:	930a      	str	r3, [sp, #40]	; 0x28
 8008916:	6922      	ldr	r2, [r4, #16]
 8008918:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800891c:	6910      	ldr	r0, [r2, #16]
 800891e:	f001 f8a5 	bl	8009a6c <__hi0bits>
 8008922:	f1c0 0020 	rsb	r0, r0, #32
 8008926:	9b06      	ldr	r3, [sp, #24]
 8008928:	4418      	add	r0, r3
 800892a:	f010 001f 	ands.w	r0, r0, #31
 800892e:	f000 808d 	beq.w	8008a4c <_dtoa_r+0x844>
 8008932:	f1c0 0220 	rsb	r2, r0, #32
 8008936:	2a04      	cmp	r2, #4
 8008938:	f340 8086 	ble.w	8008a48 <_dtoa_r+0x840>
 800893c:	f1c0 001c 	rsb	r0, r0, #28
 8008940:	9b05      	ldr	r3, [sp, #20]
 8008942:	4403      	add	r3, r0
 8008944:	9305      	str	r3, [sp, #20]
 8008946:	9b06      	ldr	r3, [sp, #24]
 8008948:	4403      	add	r3, r0
 800894a:	4480      	add	r8, r0
 800894c:	9306      	str	r3, [sp, #24]
 800894e:	9b05      	ldr	r3, [sp, #20]
 8008950:	2b00      	cmp	r3, #0
 8008952:	dd05      	ble.n	8008960 <_dtoa_r+0x758>
 8008954:	4629      	mov	r1, r5
 8008956:	461a      	mov	r2, r3
 8008958:	4630      	mov	r0, r6
 800895a:	f001 f9ed 	bl	8009d38 <__lshift>
 800895e:	4605      	mov	r5, r0
 8008960:	9b06      	ldr	r3, [sp, #24]
 8008962:	2b00      	cmp	r3, #0
 8008964:	dd05      	ble.n	8008972 <_dtoa_r+0x76a>
 8008966:	4621      	mov	r1, r4
 8008968:	461a      	mov	r2, r3
 800896a:	4630      	mov	r0, r6
 800896c:	f001 f9e4 	bl	8009d38 <__lshift>
 8008970:	4604      	mov	r4, r0
 8008972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008974:	2b00      	cmp	r3, #0
 8008976:	d06b      	beq.n	8008a50 <_dtoa_r+0x848>
 8008978:	4621      	mov	r1, r4
 800897a:	4628      	mov	r0, r5
 800897c:	f001 fa48 	bl	8009e10 <__mcmp>
 8008980:	2800      	cmp	r0, #0
 8008982:	da65      	bge.n	8008a50 <_dtoa_r+0x848>
 8008984:	2300      	movs	r3, #0
 8008986:	4629      	mov	r1, r5
 8008988:	220a      	movs	r2, #10
 800898a:	4630      	mov	r0, r6
 800898c:	f000 ffda 	bl	8009944 <__multadd>
 8008990:	9b08      	ldr	r3, [sp, #32]
 8008992:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008996:	4605      	mov	r5, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 8192 	beq.w	8008cc2 <_dtoa_r+0xaba>
 800899e:	4639      	mov	r1, r7
 80089a0:	2300      	movs	r3, #0
 80089a2:	220a      	movs	r2, #10
 80089a4:	4630      	mov	r0, r6
 80089a6:	f000 ffcd 	bl	8009944 <__multadd>
 80089aa:	f1ba 0f00 	cmp.w	sl, #0
 80089ae:	4607      	mov	r7, r0
 80089b0:	f300 808e 	bgt.w	8008ad0 <_dtoa_r+0x8c8>
 80089b4:	9b07      	ldr	r3, [sp, #28]
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	dc51      	bgt.n	8008a5e <_dtoa_r+0x856>
 80089ba:	e089      	b.n	8008ad0 <_dtoa_r+0x8c8>
 80089bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089be:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80089c2:	e751      	b.n	8008868 <_dtoa_r+0x660>
 80089c4:	f109 34ff 	add.w	r4, r9, #4294967295
 80089c8:	42a3      	cmp	r3, r4
 80089ca:	bfbf      	itttt	lt
 80089cc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80089ce:	1ae3      	sublt	r3, r4, r3
 80089d0:	18d2      	addlt	r2, r2, r3
 80089d2:	4613      	movlt	r3, r2
 80089d4:	bfb7      	itett	lt
 80089d6:	930e      	strlt	r3, [sp, #56]	; 0x38
 80089d8:	1b1c      	subge	r4, r3, r4
 80089da:	4623      	movlt	r3, r4
 80089dc:	2400      	movlt	r4, #0
 80089de:	f1b9 0f00 	cmp.w	r9, #0
 80089e2:	bfb5      	itete	lt
 80089e4:	9a05      	ldrlt	r2, [sp, #20]
 80089e6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80089ea:	eba2 0809 	sublt.w	r8, r2, r9
 80089ee:	464a      	movge	r2, r9
 80089f0:	bfb8      	it	lt
 80089f2:	2200      	movlt	r2, #0
 80089f4:	e73b      	b.n	800886e <_dtoa_r+0x666>
 80089f6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80089fa:	9f08      	ldr	r7, [sp, #32]
 80089fc:	461c      	mov	r4, r3
 80089fe:	e743      	b.n	8008888 <_dtoa_r+0x680>
 8008a00:	461a      	mov	r2, r3
 8008a02:	e76f      	b.n	80088e4 <_dtoa_r+0x6dc>
 8008a04:	9b07      	ldr	r3, [sp, #28]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	dc18      	bgt.n	8008a3c <_dtoa_r+0x834>
 8008a0a:	9b02      	ldr	r3, [sp, #8]
 8008a0c:	b9b3      	cbnz	r3, 8008a3c <_dtoa_r+0x834>
 8008a0e:	9b03      	ldr	r3, [sp, #12]
 8008a10:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008a14:	b9a2      	cbnz	r2, 8008a40 <_dtoa_r+0x838>
 8008a16:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008a1a:	0d12      	lsrs	r2, r2, #20
 8008a1c:	0512      	lsls	r2, r2, #20
 8008a1e:	b18a      	cbz	r2, 8008a44 <_dtoa_r+0x83c>
 8008a20:	9b05      	ldr	r3, [sp, #20]
 8008a22:	3301      	adds	r3, #1
 8008a24:	9305      	str	r3, [sp, #20]
 8008a26:	9b06      	ldr	r3, [sp, #24]
 8008a28:	3301      	adds	r3, #1
 8008a2a:	9306      	str	r3, [sp, #24]
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	930a      	str	r3, [sp, #40]	; 0x28
 8008a30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f47f af6f 	bne.w	8008916 <_dtoa_r+0x70e>
 8008a38:	2001      	movs	r0, #1
 8008a3a:	e774      	b.n	8008926 <_dtoa_r+0x71e>
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	e7f6      	b.n	8008a2e <_dtoa_r+0x826>
 8008a40:	9b02      	ldr	r3, [sp, #8]
 8008a42:	e7f4      	b.n	8008a2e <_dtoa_r+0x826>
 8008a44:	920a      	str	r2, [sp, #40]	; 0x28
 8008a46:	e7f3      	b.n	8008a30 <_dtoa_r+0x828>
 8008a48:	d081      	beq.n	800894e <_dtoa_r+0x746>
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	301c      	adds	r0, #28
 8008a4e:	e777      	b.n	8008940 <_dtoa_r+0x738>
 8008a50:	f1b9 0f00 	cmp.w	r9, #0
 8008a54:	dc37      	bgt.n	8008ac6 <_dtoa_r+0x8be>
 8008a56:	9b07      	ldr	r3, [sp, #28]
 8008a58:	2b02      	cmp	r3, #2
 8008a5a:	dd34      	ble.n	8008ac6 <_dtoa_r+0x8be>
 8008a5c:	46ca      	mov	sl, r9
 8008a5e:	f1ba 0f00 	cmp.w	sl, #0
 8008a62:	d10d      	bne.n	8008a80 <_dtoa_r+0x878>
 8008a64:	4621      	mov	r1, r4
 8008a66:	4653      	mov	r3, sl
 8008a68:	2205      	movs	r2, #5
 8008a6a:	4630      	mov	r0, r6
 8008a6c:	f000 ff6a 	bl	8009944 <__multadd>
 8008a70:	4601      	mov	r1, r0
 8008a72:	4604      	mov	r4, r0
 8008a74:	4628      	mov	r0, r5
 8008a76:	f001 f9cb 	bl	8009e10 <__mcmp>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	f73f adde 	bgt.w	800863c <_dtoa_r+0x434>
 8008a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a82:	f8dd 8000 	ldr.w	r8, [sp]
 8008a86:	ea6f 0b03 	mvn.w	fp, r3
 8008a8a:	f04f 0900 	mov.w	r9, #0
 8008a8e:	4621      	mov	r1, r4
 8008a90:	4630      	mov	r0, r6
 8008a92:	f000 ff35 	bl	8009900 <_Bfree>
 8008a96:	2f00      	cmp	r7, #0
 8008a98:	f43f aea7 	beq.w	80087ea <_dtoa_r+0x5e2>
 8008a9c:	f1b9 0f00 	cmp.w	r9, #0
 8008aa0:	d005      	beq.n	8008aae <_dtoa_r+0x8a6>
 8008aa2:	45b9      	cmp	r9, r7
 8008aa4:	d003      	beq.n	8008aae <_dtoa_r+0x8a6>
 8008aa6:	4649      	mov	r1, r9
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f000 ff29 	bl	8009900 <_Bfree>
 8008aae:	4639      	mov	r1, r7
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	f000 ff25 	bl	8009900 <_Bfree>
 8008ab6:	e698      	b.n	80087ea <_dtoa_r+0x5e2>
 8008ab8:	2400      	movs	r4, #0
 8008aba:	4627      	mov	r7, r4
 8008abc:	e7e0      	b.n	8008a80 <_dtoa_r+0x878>
 8008abe:	46bb      	mov	fp, r7
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	4607      	mov	r7, r0
 8008ac4:	e5ba      	b.n	800863c <_dtoa_r+0x434>
 8008ac6:	9b08      	ldr	r3, [sp, #32]
 8008ac8:	46ca      	mov	sl, r9
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f000 8100 	beq.w	8008cd0 <_dtoa_r+0xac8>
 8008ad0:	f1b8 0f00 	cmp.w	r8, #0
 8008ad4:	dd05      	ble.n	8008ae2 <_dtoa_r+0x8da>
 8008ad6:	4639      	mov	r1, r7
 8008ad8:	4642      	mov	r2, r8
 8008ada:	4630      	mov	r0, r6
 8008adc:	f001 f92c 	bl	8009d38 <__lshift>
 8008ae0:	4607      	mov	r7, r0
 8008ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d05d      	beq.n	8008ba4 <_dtoa_r+0x99c>
 8008ae8:	6879      	ldr	r1, [r7, #4]
 8008aea:	4630      	mov	r0, r6
 8008aec:	f000 fec8 	bl	8009880 <_Balloc>
 8008af0:	4680      	mov	r8, r0
 8008af2:	b928      	cbnz	r0, 8008b00 <_dtoa_r+0x8f8>
 8008af4:	4b82      	ldr	r3, [pc, #520]	; (8008d00 <_dtoa_r+0xaf8>)
 8008af6:	4602      	mov	r2, r0
 8008af8:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008afc:	f7ff bb9a 	b.w	8008234 <_dtoa_r+0x2c>
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	3202      	adds	r2, #2
 8008b04:	0092      	lsls	r2, r2, #2
 8008b06:	f107 010c 	add.w	r1, r7, #12
 8008b0a:	300c      	adds	r0, #12
 8008b0c:	f000 feaa 	bl	8009864 <memcpy>
 8008b10:	2201      	movs	r2, #1
 8008b12:	4641      	mov	r1, r8
 8008b14:	4630      	mov	r0, r6
 8008b16:	f001 f90f 	bl	8009d38 <__lshift>
 8008b1a:	9b00      	ldr	r3, [sp, #0]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	9305      	str	r3, [sp, #20]
 8008b20:	9b00      	ldr	r3, [sp, #0]
 8008b22:	4453      	add	r3, sl
 8008b24:	9309      	str	r3, [sp, #36]	; 0x24
 8008b26:	9b02      	ldr	r3, [sp, #8]
 8008b28:	f003 0301 	and.w	r3, r3, #1
 8008b2c:	46b9      	mov	r9, r7
 8008b2e:	9308      	str	r3, [sp, #32]
 8008b30:	4607      	mov	r7, r0
 8008b32:	9b05      	ldr	r3, [sp, #20]
 8008b34:	4621      	mov	r1, r4
 8008b36:	3b01      	subs	r3, #1
 8008b38:	4628      	mov	r0, r5
 8008b3a:	9302      	str	r3, [sp, #8]
 8008b3c:	f7ff fad6 	bl	80080ec <quorem>
 8008b40:	4603      	mov	r3, r0
 8008b42:	3330      	adds	r3, #48	; 0x30
 8008b44:	9006      	str	r0, [sp, #24]
 8008b46:	4649      	mov	r1, r9
 8008b48:	4628      	mov	r0, r5
 8008b4a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b4c:	f001 f960 	bl	8009e10 <__mcmp>
 8008b50:	463a      	mov	r2, r7
 8008b52:	4682      	mov	sl, r0
 8008b54:	4621      	mov	r1, r4
 8008b56:	4630      	mov	r0, r6
 8008b58:	f001 f976 	bl	8009e48 <__mdiff>
 8008b5c:	68c2      	ldr	r2, [r0, #12]
 8008b5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b60:	4680      	mov	r8, r0
 8008b62:	bb0a      	cbnz	r2, 8008ba8 <_dtoa_r+0x9a0>
 8008b64:	4601      	mov	r1, r0
 8008b66:	4628      	mov	r0, r5
 8008b68:	f001 f952 	bl	8009e10 <__mcmp>
 8008b6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b6e:	4602      	mov	r2, r0
 8008b70:	4641      	mov	r1, r8
 8008b72:	4630      	mov	r0, r6
 8008b74:	920e      	str	r2, [sp, #56]	; 0x38
 8008b76:	930a      	str	r3, [sp, #40]	; 0x28
 8008b78:	f000 fec2 	bl	8009900 <_Bfree>
 8008b7c:	9b07      	ldr	r3, [sp, #28]
 8008b7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b80:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008b84:	ea43 0102 	orr.w	r1, r3, r2
 8008b88:	9b08      	ldr	r3, [sp, #32]
 8008b8a:	430b      	orrs	r3, r1
 8008b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b8e:	d10d      	bne.n	8008bac <_dtoa_r+0x9a4>
 8008b90:	2b39      	cmp	r3, #57	; 0x39
 8008b92:	d029      	beq.n	8008be8 <_dtoa_r+0x9e0>
 8008b94:	f1ba 0f00 	cmp.w	sl, #0
 8008b98:	dd01      	ble.n	8008b9e <_dtoa_r+0x996>
 8008b9a:	9b06      	ldr	r3, [sp, #24]
 8008b9c:	3331      	adds	r3, #49	; 0x31
 8008b9e:	9a02      	ldr	r2, [sp, #8]
 8008ba0:	7013      	strb	r3, [r2, #0]
 8008ba2:	e774      	b.n	8008a8e <_dtoa_r+0x886>
 8008ba4:	4638      	mov	r0, r7
 8008ba6:	e7b8      	b.n	8008b1a <_dtoa_r+0x912>
 8008ba8:	2201      	movs	r2, #1
 8008baa:	e7e1      	b.n	8008b70 <_dtoa_r+0x968>
 8008bac:	f1ba 0f00 	cmp.w	sl, #0
 8008bb0:	db06      	blt.n	8008bc0 <_dtoa_r+0x9b8>
 8008bb2:	9907      	ldr	r1, [sp, #28]
 8008bb4:	ea41 0a0a 	orr.w	sl, r1, sl
 8008bb8:	9908      	ldr	r1, [sp, #32]
 8008bba:	ea5a 0101 	orrs.w	r1, sl, r1
 8008bbe:	d120      	bne.n	8008c02 <_dtoa_r+0x9fa>
 8008bc0:	2a00      	cmp	r2, #0
 8008bc2:	ddec      	ble.n	8008b9e <_dtoa_r+0x996>
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	4630      	mov	r0, r6
 8008bca:	9305      	str	r3, [sp, #20]
 8008bcc:	f001 f8b4 	bl	8009d38 <__lshift>
 8008bd0:	4621      	mov	r1, r4
 8008bd2:	4605      	mov	r5, r0
 8008bd4:	f001 f91c 	bl	8009e10 <__mcmp>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	9b05      	ldr	r3, [sp, #20]
 8008bdc:	dc02      	bgt.n	8008be4 <_dtoa_r+0x9dc>
 8008bde:	d1de      	bne.n	8008b9e <_dtoa_r+0x996>
 8008be0:	07da      	lsls	r2, r3, #31
 8008be2:	d5dc      	bpl.n	8008b9e <_dtoa_r+0x996>
 8008be4:	2b39      	cmp	r3, #57	; 0x39
 8008be6:	d1d8      	bne.n	8008b9a <_dtoa_r+0x992>
 8008be8:	9a02      	ldr	r2, [sp, #8]
 8008bea:	2339      	movs	r3, #57	; 0x39
 8008bec:	7013      	strb	r3, [r2, #0]
 8008bee:	4643      	mov	r3, r8
 8008bf0:	4698      	mov	r8, r3
 8008bf2:	3b01      	subs	r3, #1
 8008bf4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008bf8:	2a39      	cmp	r2, #57	; 0x39
 8008bfa:	d051      	beq.n	8008ca0 <_dtoa_r+0xa98>
 8008bfc:	3201      	adds	r2, #1
 8008bfe:	701a      	strb	r2, [r3, #0]
 8008c00:	e745      	b.n	8008a8e <_dtoa_r+0x886>
 8008c02:	2a00      	cmp	r2, #0
 8008c04:	dd03      	ble.n	8008c0e <_dtoa_r+0xa06>
 8008c06:	2b39      	cmp	r3, #57	; 0x39
 8008c08:	d0ee      	beq.n	8008be8 <_dtoa_r+0x9e0>
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	e7c7      	b.n	8008b9e <_dtoa_r+0x996>
 8008c0e:	9a05      	ldr	r2, [sp, #20]
 8008c10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c12:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008c16:	428a      	cmp	r2, r1
 8008c18:	d02b      	beq.n	8008c72 <_dtoa_r+0xa6a>
 8008c1a:	4629      	mov	r1, r5
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	220a      	movs	r2, #10
 8008c20:	4630      	mov	r0, r6
 8008c22:	f000 fe8f 	bl	8009944 <__multadd>
 8008c26:	45b9      	cmp	r9, r7
 8008c28:	4605      	mov	r5, r0
 8008c2a:	f04f 0300 	mov.w	r3, #0
 8008c2e:	f04f 020a 	mov.w	r2, #10
 8008c32:	4649      	mov	r1, r9
 8008c34:	4630      	mov	r0, r6
 8008c36:	d107      	bne.n	8008c48 <_dtoa_r+0xa40>
 8008c38:	f000 fe84 	bl	8009944 <__multadd>
 8008c3c:	4681      	mov	r9, r0
 8008c3e:	4607      	mov	r7, r0
 8008c40:	9b05      	ldr	r3, [sp, #20]
 8008c42:	3301      	adds	r3, #1
 8008c44:	9305      	str	r3, [sp, #20]
 8008c46:	e774      	b.n	8008b32 <_dtoa_r+0x92a>
 8008c48:	f000 fe7c 	bl	8009944 <__multadd>
 8008c4c:	4639      	mov	r1, r7
 8008c4e:	4681      	mov	r9, r0
 8008c50:	2300      	movs	r3, #0
 8008c52:	220a      	movs	r2, #10
 8008c54:	4630      	mov	r0, r6
 8008c56:	f000 fe75 	bl	8009944 <__multadd>
 8008c5a:	4607      	mov	r7, r0
 8008c5c:	e7f0      	b.n	8008c40 <_dtoa_r+0xa38>
 8008c5e:	f1ba 0f00 	cmp.w	sl, #0
 8008c62:	9a00      	ldr	r2, [sp, #0]
 8008c64:	bfcc      	ite	gt
 8008c66:	46d0      	movgt	r8, sl
 8008c68:	f04f 0801 	movle.w	r8, #1
 8008c6c:	4490      	add	r8, r2
 8008c6e:	f04f 0900 	mov.w	r9, #0
 8008c72:	4629      	mov	r1, r5
 8008c74:	2201      	movs	r2, #1
 8008c76:	4630      	mov	r0, r6
 8008c78:	9302      	str	r3, [sp, #8]
 8008c7a:	f001 f85d 	bl	8009d38 <__lshift>
 8008c7e:	4621      	mov	r1, r4
 8008c80:	4605      	mov	r5, r0
 8008c82:	f001 f8c5 	bl	8009e10 <__mcmp>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	dcb1      	bgt.n	8008bee <_dtoa_r+0x9e6>
 8008c8a:	d102      	bne.n	8008c92 <_dtoa_r+0xa8a>
 8008c8c:	9b02      	ldr	r3, [sp, #8]
 8008c8e:	07db      	lsls	r3, r3, #31
 8008c90:	d4ad      	bmi.n	8008bee <_dtoa_r+0x9e6>
 8008c92:	4643      	mov	r3, r8
 8008c94:	4698      	mov	r8, r3
 8008c96:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c9a:	2a30      	cmp	r2, #48	; 0x30
 8008c9c:	d0fa      	beq.n	8008c94 <_dtoa_r+0xa8c>
 8008c9e:	e6f6      	b.n	8008a8e <_dtoa_r+0x886>
 8008ca0:	9a00      	ldr	r2, [sp, #0]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d1a4      	bne.n	8008bf0 <_dtoa_r+0x9e8>
 8008ca6:	f10b 0b01 	add.w	fp, fp, #1
 8008caa:	2331      	movs	r3, #49	; 0x31
 8008cac:	e778      	b.n	8008ba0 <_dtoa_r+0x998>
 8008cae:	4b15      	ldr	r3, [pc, #84]	; (8008d04 <_dtoa_r+0xafc>)
 8008cb0:	f7ff bb12 	b.w	80082d8 <_dtoa_r+0xd0>
 8008cb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f47f aaee 	bne.w	8008298 <_dtoa_r+0x90>
 8008cbc:	4b12      	ldr	r3, [pc, #72]	; (8008d08 <_dtoa_r+0xb00>)
 8008cbe:	f7ff bb0b 	b.w	80082d8 <_dtoa_r+0xd0>
 8008cc2:	f1ba 0f00 	cmp.w	sl, #0
 8008cc6:	dc03      	bgt.n	8008cd0 <_dtoa_r+0xac8>
 8008cc8:	9b07      	ldr	r3, [sp, #28]
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	f73f aec7 	bgt.w	8008a5e <_dtoa_r+0x856>
 8008cd0:	f8dd 8000 	ldr.w	r8, [sp]
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	f7ff fa08 	bl	80080ec <quorem>
 8008cdc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008ce0:	f808 3b01 	strb.w	r3, [r8], #1
 8008ce4:	9a00      	ldr	r2, [sp, #0]
 8008ce6:	eba8 0202 	sub.w	r2, r8, r2
 8008cea:	4592      	cmp	sl, r2
 8008cec:	ddb7      	ble.n	8008c5e <_dtoa_r+0xa56>
 8008cee:	4629      	mov	r1, r5
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	220a      	movs	r2, #10
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	f000 fe25 	bl	8009944 <__multadd>
 8008cfa:	4605      	mov	r5, r0
 8008cfc:	e7ea      	b.n	8008cd4 <_dtoa_r+0xacc>
 8008cfe:	bf00      	nop
 8008d00:	0800b364 	.word	0x0800b364
 8008d04:	0800b164 	.word	0x0800b164
 8008d08:	0800b2e1 	.word	0x0800b2e1

08008d0c <__sflush_r>:
 8008d0c:	898a      	ldrh	r2, [r1, #12]
 8008d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d12:	4605      	mov	r5, r0
 8008d14:	0710      	lsls	r0, r2, #28
 8008d16:	460c      	mov	r4, r1
 8008d18:	d458      	bmi.n	8008dcc <__sflush_r+0xc0>
 8008d1a:	684b      	ldr	r3, [r1, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	dc05      	bgt.n	8008d2c <__sflush_r+0x20>
 8008d20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	dc02      	bgt.n	8008d2c <__sflush_r+0x20>
 8008d26:	2000      	movs	r0, #0
 8008d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d2e:	2e00      	cmp	r6, #0
 8008d30:	d0f9      	beq.n	8008d26 <__sflush_r+0x1a>
 8008d32:	2300      	movs	r3, #0
 8008d34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d38:	682f      	ldr	r7, [r5, #0]
 8008d3a:	602b      	str	r3, [r5, #0]
 8008d3c:	d032      	beq.n	8008da4 <__sflush_r+0x98>
 8008d3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d40:	89a3      	ldrh	r3, [r4, #12]
 8008d42:	075a      	lsls	r2, r3, #29
 8008d44:	d505      	bpl.n	8008d52 <__sflush_r+0x46>
 8008d46:	6863      	ldr	r3, [r4, #4]
 8008d48:	1ac0      	subs	r0, r0, r3
 8008d4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d4c:	b10b      	cbz	r3, 8008d52 <__sflush_r+0x46>
 8008d4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d50:	1ac0      	subs	r0, r0, r3
 8008d52:	2300      	movs	r3, #0
 8008d54:	4602      	mov	r2, r0
 8008d56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d58:	6a21      	ldr	r1, [r4, #32]
 8008d5a:	4628      	mov	r0, r5
 8008d5c:	47b0      	blx	r6
 8008d5e:	1c43      	adds	r3, r0, #1
 8008d60:	89a3      	ldrh	r3, [r4, #12]
 8008d62:	d106      	bne.n	8008d72 <__sflush_r+0x66>
 8008d64:	6829      	ldr	r1, [r5, #0]
 8008d66:	291d      	cmp	r1, #29
 8008d68:	d82c      	bhi.n	8008dc4 <__sflush_r+0xb8>
 8008d6a:	4a2a      	ldr	r2, [pc, #168]	; (8008e14 <__sflush_r+0x108>)
 8008d6c:	40ca      	lsrs	r2, r1
 8008d6e:	07d6      	lsls	r6, r2, #31
 8008d70:	d528      	bpl.n	8008dc4 <__sflush_r+0xb8>
 8008d72:	2200      	movs	r2, #0
 8008d74:	6062      	str	r2, [r4, #4]
 8008d76:	04d9      	lsls	r1, r3, #19
 8008d78:	6922      	ldr	r2, [r4, #16]
 8008d7a:	6022      	str	r2, [r4, #0]
 8008d7c:	d504      	bpl.n	8008d88 <__sflush_r+0x7c>
 8008d7e:	1c42      	adds	r2, r0, #1
 8008d80:	d101      	bne.n	8008d86 <__sflush_r+0x7a>
 8008d82:	682b      	ldr	r3, [r5, #0]
 8008d84:	b903      	cbnz	r3, 8008d88 <__sflush_r+0x7c>
 8008d86:	6560      	str	r0, [r4, #84]	; 0x54
 8008d88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d8a:	602f      	str	r7, [r5, #0]
 8008d8c:	2900      	cmp	r1, #0
 8008d8e:	d0ca      	beq.n	8008d26 <__sflush_r+0x1a>
 8008d90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d94:	4299      	cmp	r1, r3
 8008d96:	d002      	beq.n	8008d9e <__sflush_r+0x92>
 8008d98:	4628      	mov	r0, r5
 8008d9a:	f001 fa3d 	bl	800a218 <_free_r>
 8008d9e:	2000      	movs	r0, #0
 8008da0:	6360      	str	r0, [r4, #52]	; 0x34
 8008da2:	e7c1      	b.n	8008d28 <__sflush_r+0x1c>
 8008da4:	6a21      	ldr	r1, [r4, #32]
 8008da6:	2301      	movs	r3, #1
 8008da8:	4628      	mov	r0, r5
 8008daa:	47b0      	blx	r6
 8008dac:	1c41      	adds	r1, r0, #1
 8008dae:	d1c7      	bne.n	8008d40 <__sflush_r+0x34>
 8008db0:	682b      	ldr	r3, [r5, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d0c4      	beq.n	8008d40 <__sflush_r+0x34>
 8008db6:	2b1d      	cmp	r3, #29
 8008db8:	d001      	beq.n	8008dbe <__sflush_r+0xb2>
 8008dba:	2b16      	cmp	r3, #22
 8008dbc:	d101      	bne.n	8008dc2 <__sflush_r+0xb6>
 8008dbe:	602f      	str	r7, [r5, #0]
 8008dc0:	e7b1      	b.n	8008d26 <__sflush_r+0x1a>
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dc8:	81a3      	strh	r3, [r4, #12]
 8008dca:	e7ad      	b.n	8008d28 <__sflush_r+0x1c>
 8008dcc:	690f      	ldr	r7, [r1, #16]
 8008dce:	2f00      	cmp	r7, #0
 8008dd0:	d0a9      	beq.n	8008d26 <__sflush_r+0x1a>
 8008dd2:	0793      	lsls	r3, r2, #30
 8008dd4:	680e      	ldr	r6, [r1, #0]
 8008dd6:	bf08      	it	eq
 8008dd8:	694b      	ldreq	r3, [r1, #20]
 8008dda:	600f      	str	r7, [r1, #0]
 8008ddc:	bf18      	it	ne
 8008dde:	2300      	movne	r3, #0
 8008de0:	eba6 0807 	sub.w	r8, r6, r7
 8008de4:	608b      	str	r3, [r1, #8]
 8008de6:	f1b8 0f00 	cmp.w	r8, #0
 8008dea:	dd9c      	ble.n	8008d26 <__sflush_r+0x1a>
 8008dec:	6a21      	ldr	r1, [r4, #32]
 8008dee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008df0:	4643      	mov	r3, r8
 8008df2:	463a      	mov	r2, r7
 8008df4:	4628      	mov	r0, r5
 8008df6:	47b0      	blx	r6
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	dc06      	bgt.n	8008e0a <__sflush_r+0xfe>
 8008dfc:	89a3      	ldrh	r3, [r4, #12]
 8008dfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e02:	81a3      	strh	r3, [r4, #12]
 8008e04:	f04f 30ff 	mov.w	r0, #4294967295
 8008e08:	e78e      	b.n	8008d28 <__sflush_r+0x1c>
 8008e0a:	4407      	add	r7, r0
 8008e0c:	eba8 0800 	sub.w	r8, r8, r0
 8008e10:	e7e9      	b.n	8008de6 <__sflush_r+0xda>
 8008e12:	bf00      	nop
 8008e14:	20400001 	.word	0x20400001

08008e18 <_fflush_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	690b      	ldr	r3, [r1, #16]
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	460c      	mov	r4, r1
 8008e20:	b913      	cbnz	r3, 8008e28 <_fflush_r+0x10>
 8008e22:	2500      	movs	r5, #0
 8008e24:	4628      	mov	r0, r5
 8008e26:	bd38      	pop	{r3, r4, r5, pc}
 8008e28:	b118      	cbz	r0, 8008e32 <_fflush_r+0x1a>
 8008e2a:	6983      	ldr	r3, [r0, #24]
 8008e2c:	b90b      	cbnz	r3, 8008e32 <_fflush_r+0x1a>
 8008e2e:	f000 f887 	bl	8008f40 <__sinit>
 8008e32:	4b14      	ldr	r3, [pc, #80]	; (8008e84 <_fflush_r+0x6c>)
 8008e34:	429c      	cmp	r4, r3
 8008e36:	d11b      	bne.n	8008e70 <_fflush_r+0x58>
 8008e38:	686c      	ldr	r4, [r5, #4]
 8008e3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d0ef      	beq.n	8008e22 <_fflush_r+0xa>
 8008e42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e44:	07d0      	lsls	r0, r2, #31
 8008e46:	d404      	bmi.n	8008e52 <_fflush_r+0x3a>
 8008e48:	0599      	lsls	r1, r3, #22
 8008e4a:	d402      	bmi.n	8008e52 <_fflush_r+0x3a>
 8008e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e4e:	f000 fc88 	bl	8009762 <__retarget_lock_acquire_recursive>
 8008e52:	4628      	mov	r0, r5
 8008e54:	4621      	mov	r1, r4
 8008e56:	f7ff ff59 	bl	8008d0c <__sflush_r>
 8008e5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e5c:	07da      	lsls	r2, r3, #31
 8008e5e:	4605      	mov	r5, r0
 8008e60:	d4e0      	bmi.n	8008e24 <_fflush_r+0xc>
 8008e62:	89a3      	ldrh	r3, [r4, #12]
 8008e64:	059b      	lsls	r3, r3, #22
 8008e66:	d4dd      	bmi.n	8008e24 <_fflush_r+0xc>
 8008e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e6a:	f000 fc7b 	bl	8009764 <__retarget_lock_release_recursive>
 8008e6e:	e7d9      	b.n	8008e24 <_fflush_r+0xc>
 8008e70:	4b05      	ldr	r3, [pc, #20]	; (8008e88 <_fflush_r+0x70>)
 8008e72:	429c      	cmp	r4, r3
 8008e74:	d101      	bne.n	8008e7a <_fflush_r+0x62>
 8008e76:	68ac      	ldr	r4, [r5, #8]
 8008e78:	e7df      	b.n	8008e3a <_fflush_r+0x22>
 8008e7a:	4b04      	ldr	r3, [pc, #16]	; (8008e8c <_fflush_r+0x74>)
 8008e7c:	429c      	cmp	r4, r3
 8008e7e:	bf08      	it	eq
 8008e80:	68ec      	ldreq	r4, [r5, #12]
 8008e82:	e7da      	b.n	8008e3a <_fflush_r+0x22>
 8008e84:	0800b398 	.word	0x0800b398
 8008e88:	0800b3b8 	.word	0x0800b3b8
 8008e8c:	0800b378 	.word	0x0800b378

08008e90 <std>:
 8008e90:	2300      	movs	r3, #0
 8008e92:	b510      	push	{r4, lr}
 8008e94:	4604      	mov	r4, r0
 8008e96:	e9c0 3300 	strd	r3, r3, [r0]
 8008e9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e9e:	6083      	str	r3, [r0, #8]
 8008ea0:	8181      	strh	r1, [r0, #12]
 8008ea2:	6643      	str	r3, [r0, #100]	; 0x64
 8008ea4:	81c2      	strh	r2, [r0, #14]
 8008ea6:	6183      	str	r3, [r0, #24]
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	2208      	movs	r2, #8
 8008eac:	305c      	adds	r0, #92	; 0x5c
 8008eae:	f7fd fac7 	bl	8006440 <memset>
 8008eb2:	4b05      	ldr	r3, [pc, #20]	; (8008ec8 <std+0x38>)
 8008eb4:	6263      	str	r3, [r4, #36]	; 0x24
 8008eb6:	4b05      	ldr	r3, [pc, #20]	; (8008ecc <std+0x3c>)
 8008eb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8008eba:	4b05      	ldr	r3, [pc, #20]	; (8008ed0 <std+0x40>)
 8008ebc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ebe:	4b05      	ldr	r3, [pc, #20]	; (8008ed4 <std+0x44>)
 8008ec0:	6224      	str	r4, [r4, #32]
 8008ec2:	6323      	str	r3, [r4, #48]	; 0x30
 8008ec4:	bd10      	pop	{r4, pc}
 8008ec6:	bf00      	nop
 8008ec8:	0800a999 	.word	0x0800a999
 8008ecc:	0800a9bb 	.word	0x0800a9bb
 8008ed0:	0800a9f3 	.word	0x0800a9f3
 8008ed4:	0800aa17 	.word	0x0800aa17

08008ed8 <_cleanup_r>:
 8008ed8:	4901      	ldr	r1, [pc, #4]	; (8008ee0 <_cleanup_r+0x8>)
 8008eda:	f000 b8af 	b.w	800903c <_fwalk_reent>
 8008ede:	bf00      	nop
 8008ee0:	08008e19 	.word	0x08008e19

08008ee4 <__sfmoreglue>:
 8008ee4:	b570      	push	{r4, r5, r6, lr}
 8008ee6:	1e4a      	subs	r2, r1, #1
 8008ee8:	2568      	movs	r5, #104	; 0x68
 8008eea:	4355      	muls	r5, r2
 8008eec:	460e      	mov	r6, r1
 8008eee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008ef2:	f001 f9e1 	bl	800a2b8 <_malloc_r>
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	b140      	cbz	r0, 8008f0c <__sfmoreglue+0x28>
 8008efa:	2100      	movs	r1, #0
 8008efc:	e9c0 1600 	strd	r1, r6, [r0]
 8008f00:	300c      	adds	r0, #12
 8008f02:	60a0      	str	r0, [r4, #8]
 8008f04:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008f08:	f7fd fa9a 	bl	8006440 <memset>
 8008f0c:	4620      	mov	r0, r4
 8008f0e:	bd70      	pop	{r4, r5, r6, pc}

08008f10 <__sfp_lock_acquire>:
 8008f10:	4801      	ldr	r0, [pc, #4]	; (8008f18 <__sfp_lock_acquire+0x8>)
 8008f12:	f000 bc26 	b.w	8009762 <__retarget_lock_acquire_recursive>
 8008f16:	bf00      	nop
 8008f18:	2000064c 	.word	0x2000064c

08008f1c <__sfp_lock_release>:
 8008f1c:	4801      	ldr	r0, [pc, #4]	; (8008f24 <__sfp_lock_release+0x8>)
 8008f1e:	f000 bc21 	b.w	8009764 <__retarget_lock_release_recursive>
 8008f22:	bf00      	nop
 8008f24:	2000064c 	.word	0x2000064c

08008f28 <__sinit_lock_acquire>:
 8008f28:	4801      	ldr	r0, [pc, #4]	; (8008f30 <__sinit_lock_acquire+0x8>)
 8008f2a:	f000 bc1a 	b.w	8009762 <__retarget_lock_acquire_recursive>
 8008f2e:	bf00      	nop
 8008f30:	20000647 	.word	0x20000647

08008f34 <__sinit_lock_release>:
 8008f34:	4801      	ldr	r0, [pc, #4]	; (8008f3c <__sinit_lock_release+0x8>)
 8008f36:	f000 bc15 	b.w	8009764 <__retarget_lock_release_recursive>
 8008f3a:	bf00      	nop
 8008f3c:	20000647 	.word	0x20000647

08008f40 <__sinit>:
 8008f40:	b510      	push	{r4, lr}
 8008f42:	4604      	mov	r4, r0
 8008f44:	f7ff fff0 	bl	8008f28 <__sinit_lock_acquire>
 8008f48:	69a3      	ldr	r3, [r4, #24]
 8008f4a:	b11b      	cbz	r3, 8008f54 <__sinit+0x14>
 8008f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f50:	f7ff bff0 	b.w	8008f34 <__sinit_lock_release>
 8008f54:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008f58:	6523      	str	r3, [r4, #80]	; 0x50
 8008f5a:	4b13      	ldr	r3, [pc, #76]	; (8008fa8 <__sinit+0x68>)
 8008f5c:	4a13      	ldr	r2, [pc, #76]	; (8008fac <__sinit+0x6c>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	62a2      	str	r2, [r4, #40]	; 0x28
 8008f62:	42a3      	cmp	r3, r4
 8008f64:	bf04      	itt	eq
 8008f66:	2301      	moveq	r3, #1
 8008f68:	61a3      	streq	r3, [r4, #24]
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f000 f820 	bl	8008fb0 <__sfp>
 8008f70:	6060      	str	r0, [r4, #4]
 8008f72:	4620      	mov	r0, r4
 8008f74:	f000 f81c 	bl	8008fb0 <__sfp>
 8008f78:	60a0      	str	r0, [r4, #8]
 8008f7a:	4620      	mov	r0, r4
 8008f7c:	f000 f818 	bl	8008fb0 <__sfp>
 8008f80:	2200      	movs	r2, #0
 8008f82:	60e0      	str	r0, [r4, #12]
 8008f84:	2104      	movs	r1, #4
 8008f86:	6860      	ldr	r0, [r4, #4]
 8008f88:	f7ff ff82 	bl	8008e90 <std>
 8008f8c:	68a0      	ldr	r0, [r4, #8]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	2109      	movs	r1, #9
 8008f92:	f7ff ff7d 	bl	8008e90 <std>
 8008f96:	68e0      	ldr	r0, [r4, #12]
 8008f98:	2202      	movs	r2, #2
 8008f9a:	2112      	movs	r1, #18
 8008f9c:	f7ff ff78 	bl	8008e90 <std>
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	61a3      	str	r3, [r4, #24]
 8008fa4:	e7d2      	b.n	8008f4c <__sinit+0xc>
 8008fa6:	bf00      	nop
 8008fa8:	0800b150 	.word	0x0800b150
 8008fac:	08008ed9 	.word	0x08008ed9

08008fb0 <__sfp>:
 8008fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb2:	4607      	mov	r7, r0
 8008fb4:	f7ff ffac 	bl	8008f10 <__sfp_lock_acquire>
 8008fb8:	4b1e      	ldr	r3, [pc, #120]	; (8009034 <__sfp+0x84>)
 8008fba:	681e      	ldr	r6, [r3, #0]
 8008fbc:	69b3      	ldr	r3, [r6, #24]
 8008fbe:	b913      	cbnz	r3, 8008fc6 <__sfp+0x16>
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	f7ff ffbd 	bl	8008f40 <__sinit>
 8008fc6:	3648      	adds	r6, #72	; 0x48
 8008fc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008fcc:	3b01      	subs	r3, #1
 8008fce:	d503      	bpl.n	8008fd8 <__sfp+0x28>
 8008fd0:	6833      	ldr	r3, [r6, #0]
 8008fd2:	b30b      	cbz	r3, 8009018 <__sfp+0x68>
 8008fd4:	6836      	ldr	r6, [r6, #0]
 8008fd6:	e7f7      	b.n	8008fc8 <__sfp+0x18>
 8008fd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008fdc:	b9d5      	cbnz	r5, 8009014 <__sfp+0x64>
 8008fde:	4b16      	ldr	r3, [pc, #88]	; (8009038 <__sfp+0x88>)
 8008fe0:	60e3      	str	r3, [r4, #12]
 8008fe2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008fe6:	6665      	str	r5, [r4, #100]	; 0x64
 8008fe8:	f000 fbba 	bl	8009760 <__retarget_lock_init_recursive>
 8008fec:	f7ff ff96 	bl	8008f1c <__sfp_lock_release>
 8008ff0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ff4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008ff8:	6025      	str	r5, [r4, #0]
 8008ffa:	61a5      	str	r5, [r4, #24]
 8008ffc:	2208      	movs	r2, #8
 8008ffe:	4629      	mov	r1, r5
 8009000:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009004:	f7fd fa1c 	bl	8006440 <memset>
 8009008:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800900c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009010:	4620      	mov	r0, r4
 8009012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009014:	3468      	adds	r4, #104	; 0x68
 8009016:	e7d9      	b.n	8008fcc <__sfp+0x1c>
 8009018:	2104      	movs	r1, #4
 800901a:	4638      	mov	r0, r7
 800901c:	f7ff ff62 	bl	8008ee4 <__sfmoreglue>
 8009020:	4604      	mov	r4, r0
 8009022:	6030      	str	r0, [r6, #0]
 8009024:	2800      	cmp	r0, #0
 8009026:	d1d5      	bne.n	8008fd4 <__sfp+0x24>
 8009028:	f7ff ff78 	bl	8008f1c <__sfp_lock_release>
 800902c:	230c      	movs	r3, #12
 800902e:	603b      	str	r3, [r7, #0]
 8009030:	e7ee      	b.n	8009010 <__sfp+0x60>
 8009032:	bf00      	nop
 8009034:	0800b150 	.word	0x0800b150
 8009038:	ffff0001 	.word	0xffff0001

0800903c <_fwalk_reent>:
 800903c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009040:	4606      	mov	r6, r0
 8009042:	4688      	mov	r8, r1
 8009044:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009048:	2700      	movs	r7, #0
 800904a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800904e:	f1b9 0901 	subs.w	r9, r9, #1
 8009052:	d505      	bpl.n	8009060 <_fwalk_reent+0x24>
 8009054:	6824      	ldr	r4, [r4, #0]
 8009056:	2c00      	cmp	r4, #0
 8009058:	d1f7      	bne.n	800904a <_fwalk_reent+0xe>
 800905a:	4638      	mov	r0, r7
 800905c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009060:	89ab      	ldrh	r3, [r5, #12]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d907      	bls.n	8009076 <_fwalk_reent+0x3a>
 8009066:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800906a:	3301      	adds	r3, #1
 800906c:	d003      	beq.n	8009076 <_fwalk_reent+0x3a>
 800906e:	4629      	mov	r1, r5
 8009070:	4630      	mov	r0, r6
 8009072:	47c0      	blx	r8
 8009074:	4307      	orrs	r7, r0
 8009076:	3568      	adds	r5, #104	; 0x68
 8009078:	e7e9      	b.n	800904e <_fwalk_reent+0x12>

0800907a <rshift>:
 800907a:	6903      	ldr	r3, [r0, #16]
 800907c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009080:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009084:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009088:	f100 0414 	add.w	r4, r0, #20
 800908c:	dd45      	ble.n	800911a <rshift+0xa0>
 800908e:	f011 011f 	ands.w	r1, r1, #31
 8009092:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009096:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800909a:	d10c      	bne.n	80090b6 <rshift+0x3c>
 800909c:	f100 0710 	add.w	r7, r0, #16
 80090a0:	4629      	mov	r1, r5
 80090a2:	42b1      	cmp	r1, r6
 80090a4:	d334      	bcc.n	8009110 <rshift+0x96>
 80090a6:	1a9b      	subs	r3, r3, r2
 80090a8:	009b      	lsls	r3, r3, #2
 80090aa:	1eea      	subs	r2, r5, #3
 80090ac:	4296      	cmp	r6, r2
 80090ae:	bf38      	it	cc
 80090b0:	2300      	movcc	r3, #0
 80090b2:	4423      	add	r3, r4
 80090b4:	e015      	b.n	80090e2 <rshift+0x68>
 80090b6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80090ba:	f1c1 0820 	rsb	r8, r1, #32
 80090be:	40cf      	lsrs	r7, r1
 80090c0:	f105 0e04 	add.w	lr, r5, #4
 80090c4:	46a1      	mov	r9, r4
 80090c6:	4576      	cmp	r6, lr
 80090c8:	46f4      	mov	ip, lr
 80090ca:	d815      	bhi.n	80090f8 <rshift+0x7e>
 80090cc:	1a9b      	subs	r3, r3, r2
 80090ce:	009a      	lsls	r2, r3, #2
 80090d0:	3a04      	subs	r2, #4
 80090d2:	3501      	adds	r5, #1
 80090d4:	42ae      	cmp	r6, r5
 80090d6:	bf38      	it	cc
 80090d8:	2200      	movcc	r2, #0
 80090da:	18a3      	adds	r3, r4, r2
 80090dc:	50a7      	str	r7, [r4, r2]
 80090de:	b107      	cbz	r7, 80090e2 <rshift+0x68>
 80090e0:	3304      	adds	r3, #4
 80090e2:	1b1a      	subs	r2, r3, r4
 80090e4:	42a3      	cmp	r3, r4
 80090e6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80090ea:	bf08      	it	eq
 80090ec:	2300      	moveq	r3, #0
 80090ee:	6102      	str	r2, [r0, #16]
 80090f0:	bf08      	it	eq
 80090f2:	6143      	streq	r3, [r0, #20]
 80090f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80090f8:	f8dc c000 	ldr.w	ip, [ip]
 80090fc:	fa0c fc08 	lsl.w	ip, ip, r8
 8009100:	ea4c 0707 	orr.w	r7, ip, r7
 8009104:	f849 7b04 	str.w	r7, [r9], #4
 8009108:	f85e 7b04 	ldr.w	r7, [lr], #4
 800910c:	40cf      	lsrs	r7, r1
 800910e:	e7da      	b.n	80090c6 <rshift+0x4c>
 8009110:	f851 cb04 	ldr.w	ip, [r1], #4
 8009114:	f847 cf04 	str.w	ip, [r7, #4]!
 8009118:	e7c3      	b.n	80090a2 <rshift+0x28>
 800911a:	4623      	mov	r3, r4
 800911c:	e7e1      	b.n	80090e2 <rshift+0x68>

0800911e <__hexdig_fun>:
 800911e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009122:	2b09      	cmp	r3, #9
 8009124:	d802      	bhi.n	800912c <__hexdig_fun+0xe>
 8009126:	3820      	subs	r0, #32
 8009128:	b2c0      	uxtb	r0, r0
 800912a:	4770      	bx	lr
 800912c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009130:	2b05      	cmp	r3, #5
 8009132:	d801      	bhi.n	8009138 <__hexdig_fun+0x1a>
 8009134:	3847      	subs	r0, #71	; 0x47
 8009136:	e7f7      	b.n	8009128 <__hexdig_fun+0xa>
 8009138:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800913c:	2b05      	cmp	r3, #5
 800913e:	d801      	bhi.n	8009144 <__hexdig_fun+0x26>
 8009140:	3827      	subs	r0, #39	; 0x27
 8009142:	e7f1      	b.n	8009128 <__hexdig_fun+0xa>
 8009144:	2000      	movs	r0, #0
 8009146:	4770      	bx	lr

08009148 <__gethex>:
 8009148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914c:	ed2d 8b02 	vpush	{d8}
 8009150:	b089      	sub	sp, #36	; 0x24
 8009152:	ee08 0a10 	vmov	s16, r0
 8009156:	9304      	str	r3, [sp, #16]
 8009158:	4bbc      	ldr	r3, [pc, #752]	; (800944c <__gethex+0x304>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	9301      	str	r3, [sp, #4]
 800915e:	4618      	mov	r0, r3
 8009160:	468b      	mov	fp, r1
 8009162:	4690      	mov	r8, r2
 8009164:	f7f7 f86c 	bl	8000240 <strlen>
 8009168:	9b01      	ldr	r3, [sp, #4]
 800916a:	f8db 2000 	ldr.w	r2, [fp]
 800916e:	4403      	add	r3, r0
 8009170:	4682      	mov	sl, r0
 8009172:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009176:	9305      	str	r3, [sp, #20]
 8009178:	1c93      	adds	r3, r2, #2
 800917a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800917e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009182:	32fe      	adds	r2, #254	; 0xfe
 8009184:	18d1      	adds	r1, r2, r3
 8009186:	461f      	mov	r7, r3
 8009188:	f813 0b01 	ldrb.w	r0, [r3], #1
 800918c:	9100      	str	r1, [sp, #0]
 800918e:	2830      	cmp	r0, #48	; 0x30
 8009190:	d0f8      	beq.n	8009184 <__gethex+0x3c>
 8009192:	f7ff ffc4 	bl	800911e <__hexdig_fun>
 8009196:	4604      	mov	r4, r0
 8009198:	2800      	cmp	r0, #0
 800919a:	d13a      	bne.n	8009212 <__gethex+0xca>
 800919c:	9901      	ldr	r1, [sp, #4]
 800919e:	4652      	mov	r2, sl
 80091a0:	4638      	mov	r0, r7
 80091a2:	f001 fc3c 	bl	800aa1e <strncmp>
 80091a6:	4605      	mov	r5, r0
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d168      	bne.n	800927e <__gethex+0x136>
 80091ac:	f817 000a 	ldrb.w	r0, [r7, sl]
 80091b0:	eb07 060a 	add.w	r6, r7, sl
 80091b4:	f7ff ffb3 	bl	800911e <__hexdig_fun>
 80091b8:	2800      	cmp	r0, #0
 80091ba:	d062      	beq.n	8009282 <__gethex+0x13a>
 80091bc:	4633      	mov	r3, r6
 80091be:	7818      	ldrb	r0, [r3, #0]
 80091c0:	2830      	cmp	r0, #48	; 0x30
 80091c2:	461f      	mov	r7, r3
 80091c4:	f103 0301 	add.w	r3, r3, #1
 80091c8:	d0f9      	beq.n	80091be <__gethex+0x76>
 80091ca:	f7ff ffa8 	bl	800911e <__hexdig_fun>
 80091ce:	2301      	movs	r3, #1
 80091d0:	fab0 f480 	clz	r4, r0
 80091d4:	0964      	lsrs	r4, r4, #5
 80091d6:	4635      	mov	r5, r6
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	463a      	mov	r2, r7
 80091dc:	4616      	mov	r6, r2
 80091de:	3201      	adds	r2, #1
 80091e0:	7830      	ldrb	r0, [r6, #0]
 80091e2:	f7ff ff9c 	bl	800911e <__hexdig_fun>
 80091e6:	2800      	cmp	r0, #0
 80091e8:	d1f8      	bne.n	80091dc <__gethex+0x94>
 80091ea:	9901      	ldr	r1, [sp, #4]
 80091ec:	4652      	mov	r2, sl
 80091ee:	4630      	mov	r0, r6
 80091f0:	f001 fc15 	bl	800aa1e <strncmp>
 80091f4:	b980      	cbnz	r0, 8009218 <__gethex+0xd0>
 80091f6:	b94d      	cbnz	r5, 800920c <__gethex+0xc4>
 80091f8:	eb06 050a 	add.w	r5, r6, sl
 80091fc:	462a      	mov	r2, r5
 80091fe:	4616      	mov	r6, r2
 8009200:	3201      	adds	r2, #1
 8009202:	7830      	ldrb	r0, [r6, #0]
 8009204:	f7ff ff8b 	bl	800911e <__hexdig_fun>
 8009208:	2800      	cmp	r0, #0
 800920a:	d1f8      	bne.n	80091fe <__gethex+0xb6>
 800920c:	1bad      	subs	r5, r5, r6
 800920e:	00ad      	lsls	r5, r5, #2
 8009210:	e004      	b.n	800921c <__gethex+0xd4>
 8009212:	2400      	movs	r4, #0
 8009214:	4625      	mov	r5, r4
 8009216:	e7e0      	b.n	80091da <__gethex+0x92>
 8009218:	2d00      	cmp	r5, #0
 800921a:	d1f7      	bne.n	800920c <__gethex+0xc4>
 800921c:	7833      	ldrb	r3, [r6, #0]
 800921e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009222:	2b50      	cmp	r3, #80	; 0x50
 8009224:	d13b      	bne.n	800929e <__gethex+0x156>
 8009226:	7873      	ldrb	r3, [r6, #1]
 8009228:	2b2b      	cmp	r3, #43	; 0x2b
 800922a:	d02c      	beq.n	8009286 <__gethex+0x13e>
 800922c:	2b2d      	cmp	r3, #45	; 0x2d
 800922e:	d02e      	beq.n	800928e <__gethex+0x146>
 8009230:	1c71      	adds	r1, r6, #1
 8009232:	f04f 0900 	mov.w	r9, #0
 8009236:	7808      	ldrb	r0, [r1, #0]
 8009238:	f7ff ff71 	bl	800911e <__hexdig_fun>
 800923c:	1e43      	subs	r3, r0, #1
 800923e:	b2db      	uxtb	r3, r3
 8009240:	2b18      	cmp	r3, #24
 8009242:	d82c      	bhi.n	800929e <__gethex+0x156>
 8009244:	f1a0 0210 	sub.w	r2, r0, #16
 8009248:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800924c:	f7ff ff67 	bl	800911e <__hexdig_fun>
 8009250:	1e43      	subs	r3, r0, #1
 8009252:	b2db      	uxtb	r3, r3
 8009254:	2b18      	cmp	r3, #24
 8009256:	d91d      	bls.n	8009294 <__gethex+0x14c>
 8009258:	f1b9 0f00 	cmp.w	r9, #0
 800925c:	d000      	beq.n	8009260 <__gethex+0x118>
 800925e:	4252      	negs	r2, r2
 8009260:	4415      	add	r5, r2
 8009262:	f8cb 1000 	str.w	r1, [fp]
 8009266:	b1e4      	cbz	r4, 80092a2 <__gethex+0x15a>
 8009268:	9b00      	ldr	r3, [sp, #0]
 800926a:	2b00      	cmp	r3, #0
 800926c:	bf14      	ite	ne
 800926e:	2700      	movne	r7, #0
 8009270:	2706      	moveq	r7, #6
 8009272:	4638      	mov	r0, r7
 8009274:	b009      	add	sp, #36	; 0x24
 8009276:	ecbd 8b02 	vpop	{d8}
 800927a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800927e:	463e      	mov	r6, r7
 8009280:	4625      	mov	r5, r4
 8009282:	2401      	movs	r4, #1
 8009284:	e7ca      	b.n	800921c <__gethex+0xd4>
 8009286:	f04f 0900 	mov.w	r9, #0
 800928a:	1cb1      	adds	r1, r6, #2
 800928c:	e7d3      	b.n	8009236 <__gethex+0xee>
 800928e:	f04f 0901 	mov.w	r9, #1
 8009292:	e7fa      	b.n	800928a <__gethex+0x142>
 8009294:	230a      	movs	r3, #10
 8009296:	fb03 0202 	mla	r2, r3, r2, r0
 800929a:	3a10      	subs	r2, #16
 800929c:	e7d4      	b.n	8009248 <__gethex+0x100>
 800929e:	4631      	mov	r1, r6
 80092a0:	e7df      	b.n	8009262 <__gethex+0x11a>
 80092a2:	1bf3      	subs	r3, r6, r7
 80092a4:	3b01      	subs	r3, #1
 80092a6:	4621      	mov	r1, r4
 80092a8:	2b07      	cmp	r3, #7
 80092aa:	dc0b      	bgt.n	80092c4 <__gethex+0x17c>
 80092ac:	ee18 0a10 	vmov	r0, s16
 80092b0:	f000 fae6 	bl	8009880 <_Balloc>
 80092b4:	4604      	mov	r4, r0
 80092b6:	b940      	cbnz	r0, 80092ca <__gethex+0x182>
 80092b8:	4b65      	ldr	r3, [pc, #404]	; (8009450 <__gethex+0x308>)
 80092ba:	4602      	mov	r2, r0
 80092bc:	21de      	movs	r1, #222	; 0xde
 80092be:	4865      	ldr	r0, [pc, #404]	; (8009454 <__gethex+0x30c>)
 80092c0:	f001 fbde 	bl	800aa80 <__assert_func>
 80092c4:	3101      	adds	r1, #1
 80092c6:	105b      	asrs	r3, r3, #1
 80092c8:	e7ee      	b.n	80092a8 <__gethex+0x160>
 80092ca:	f100 0914 	add.w	r9, r0, #20
 80092ce:	f04f 0b00 	mov.w	fp, #0
 80092d2:	f1ca 0301 	rsb	r3, sl, #1
 80092d6:	f8cd 9008 	str.w	r9, [sp, #8]
 80092da:	f8cd b000 	str.w	fp, [sp]
 80092de:	9306      	str	r3, [sp, #24]
 80092e0:	42b7      	cmp	r7, r6
 80092e2:	d340      	bcc.n	8009366 <__gethex+0x21e>
 80092e4:	9802      	ldr	r0, [sp, #8]
 80092e6:	9b00      	ldr	r3, [sp, #0]
 80092e8:	f840 3b04 	str.w	r3, [r0], #4
 80092ec:	eba0 0009 	sub.w	r0, r0, r9
 80092f0:	1080      	asrs	r0, r0, #2
 80092f2:	0146      	lsls	r6, r0, #5
 80092f4:	6120      	str	r0, [r4, #16]
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 fbb8 	bl	8009a6c <__hi0bits>
 80092fc:	1a30      	subs	r0, r6, r0
 80092fe:	f8d8 6000 	ldr.w	r6, [r8]
 8009302:	42b0      	cmp	r0, r6
 8009304:	dd63      	ble.n	80093ce <__gethex+0x286>
 8009306:	1b87      	subs	r7, r0, r6
 8009308:	4639      	mov	r1, r7
 800930a:	4620      	mov	r0, r4
 800930c:	f000 ff53 	bl	800a1b6 <__any_on>
 8009310:	4682      	mov	sl, r0
 8009312:	b1a8      	cbz	r0, 8009340 <__gethex+0x1f8>
 8009314:	1e7b      	subs	r3, r7, #1
 8009316:	1159      	asrs	r1, r3, #5
 8009318:	f003 021f 	and.w	r2, r3, #31
 800931c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009320:	f04f 0a01 	mov.w	sl, #1
 8009324:	fa0a f202 	lsl.w	r2, sl, r2
 8009328:	420a      	tst	r2, r1
 800932a:	d009      	beq.n	8009340 <__gethex+0x1f8>
 800932c:	4553      	cmp	r3, sl
 800932e:	dd05      	ble.n	800933c <__gethex+0x1f4>
 8009330:	1eb9      	subs	r1, r7, #2
 8009332:	4620      	mov	r0, r4
 8009334:	f000 ff3f 	bl	800a1b6 <__any_on>
 8009338:	2800      	cmp	r0, #0
 800933a:	d145      	bne.n	80093c8 <__gethex+0x280>
 800933c:	f04f 0a02 	mov.w	sl, #2
 8009340:	4639      	mov	r1, r7
 8009342:	4620      	mov	r0, r4
 8009344:	f7ff fe99 	bl	800907a <rshift>
 8009348:	443d      	add	r5, r7
 800934a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800934e:	42ab      	cmp	r3, r5
 8009350:	da4c      	bge.n	80093ec <__gethex+0x2a4>
 8009352:	ee18 0a10 	vmov	r0, s16
 8009356:	4621      	mov	r1, r4
 8009358:	f000 fad2 	bl	8009900 <_Bfree>
 800935c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800935e:	2300      	movs	r3, #0
 8009360:	6013      	str	r3, [r2, #0]
 8009362:	27a3      	movs	r7, #163	; 0xa3
 8009364:	e785      	b.n	8009272 <__gethex+0x12a>
 8009366:	1e73      	subs	r3, r6, #1
 8009368:	9a05      	ldr	r2, [sp, #20]
 800936a:	9303      	str	r3, [sp, #12]
 800936c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009370:	4293      	cmp	r3, r2
 8009372:	d019      	beq.n	80093a8 <__gethex+0x260>
 8009374:	f1bb 0f20 	cmp.w	fp, #32
 8009378:	d107      	bne.n	800938a <__gethex+0x242>
 800937a:	9b02      	ldr	r3, [sp, #8]
 800937c:	9a00      	ldr	r2, [sp, #0]
 800937e:	f843 2b04 	str.w	r2, [r3], #4
 8009382:	9302      	str	r3, [sp, #8]
 8009384:	2300      	movs	r3, #0
 8009386:	9300      	str	r3, [sp, #0]
 8009388:	469b      	mov	fp, r3
 800938a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800938e:	f7ff fec6 	bl	800911e <__hexdig_fun>
 8009392:	9b00      	ldr	r3, [sp, #0]
 8009394:	f000 000f 	and.w	r0, r0, #15
 8009398:	fa00 f00b 	lsl.w	r0, r0, fp
 800939c:	4303      	orrs	r3, r0
 800939e:	9300      	str	r3, [sp, #0]
 80093a0:	f10b 0b04 	add.w	fp, fp, #4
 80093a4:	9b03      	ldr	r3, [sp, #12]
 80093a6:	e00d      	b.n	80093c4 <__gethex+0x27c>
 80093a8:	9b03      	ldr	r3, [sp, #12]
 80093aa:	9a06      	ldr	r2, [sp, #24]
 80093ac:	4413      	add	r3, r2
 80093ae:	42bb      	cmp	r3, r7
 80093b0:	d3e0      	bcc.n	8009374 <__gethex+0x22c>
 80093b2:	4618      	mov	r0, r3
 80093b4:	9901      	ldr	r1, [sp, #4]
 80093b6:	9307      	str	r3, [sp, #28]
 80093b8:	4652      	mov	r2, sl
 80093ba:	f001 fb30 	bl	800aa1e <strncmp>
 80093be:	9b07      	ldr	r3, [sp, #28]
 80093c0:	2800      	cmp	r0, #0
 80093c2:	d1d7      	bne.n	8009374 <__gethex+0x22c>
 80093c4:	461e      	mov	r6, r3
 80093c6:	e78b      	b.n	80092e0 <__gethex+0x198>
 80093c8:	f04f 0a03 	mov.w	sl, #3
 80093cc:	e7b8      	b.n	8009340 <__gethex+0x1f8>
 80093ce:	da0a      	bge.n	80093e6 <__gethex+0x29e>
 80093d0:	1a37      	subs	r7, r6, r0
 80093d2:	4621      	mov	r1, r4
 80093d4:	ee18 0a10 	vmov	r0, s16
 80093d8:	463a      	mov	r2, r7
 80093da:	f000 fcad 	bl	8009d38 <__lshift>
 80093de:	1bed      	subs	r5, r5, r7
 80093e0:	4604      	mov	r4, r0
 80093e2:	f100 0914 	add.w	r9, r0, #20
 80093e6:	f04f 0a00 	mov.w	sl, #0
 80093ea:	e7ae      	b.n	800934a <__gethex+0x202>
 80093ec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80093f0:	42a8      	cmp	r0, r5
 80093f2:	dd72      	ble.n	80094da <__gethex+0x392>
 80093f4:	1b45      	subs	r5, r0, r5
 80093f6:	42ae      	cmp	r6, r5
 80093f8:	dc36      	bgt.n	8009468 <__gethex+0x320>
 80093fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d02a      	beq.n	8009458 <__gethex+0x310>
 8009402:	2b03      	cmp	r3, #3
 8009404:	d02c      	beq.n	8009460 <__gethex+0x318>
 8009406:	2b01      	cmp	r3, #1
 8009408:	d115      	bne.n	8009436 <__gethex+0x2ee>
 800940a:	42ae      	cmp	r6, r5
 800940c:	d113      	bne.n	8009436 <__gethex+0x2ee>
 800940e:	2e01      	cmp	r6, #1
 8009410:	d10b      	bne.n	800942a <__gethex+0x2e2>
 8009412:	9a04      	ldr	r2, [sp, #16]
 8009414:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009418:	6013      	str	r3, [r2, #0]
 800941a:	2301      	movs	r3, #1
 800941c:	6123      	str	r3, [r4, #16]
 800941e:	f8c9 3000 	str.w	r3, [r9]
 8009422:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009424:	2762      	movs	r7, #98	; 0x62
 8009426:	601c      	str	r4, [r3, #0]
 8009428:	e723      	b.n	8009272 <__gethex+0x12a>
 800942a:	1e71      	subs	r1, r6, #1
 800942c:	4620      	mov	r0, r4
 800942e:	f000 fec2 	bl	800a1b6 <__any_on>
 8009432:	2800      	cmp	r0, #0
 8009434:	d1ed      	bne.n	8009412 <__gethex+0x2ca>
 8009436:	ee18 0a10 	vmov	r0, s16
 800943a:	4621      	mov	r1, r4
 800943c:	f000 fa60 	bl	8009900 <_Bfree>
 8009440:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009442:	2300      	movs	r3, #0
 8009444:	6013      	str	r3, [r2, #0]
 8009446:	2750      	movs	r7, #80	; 0x50
 8009448:	e713      	b.n	8009272 <__gethex+0x12a>
 800944a:	bf00      	nop
 800944c:	0800b444 	.word	0x0800b444
 8009450:	0800b364 	.word	0x0800b364
 8009454:	0800b3d8 	.word	0x0800b3d8
 8009458:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1eb      	bne.n	8009436 <__gethex+0x2ee>
 800945e:	e7d8      	b.n	8009412 <__gethex+0x2ca>
 8009460:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1d5      	bne.n	8009412 <__gethex+0x2ca>
 8009466:	e7e6      	b.n	8009436 <__gethex+0x2ee>
 8009468:	1e6f      	subs	r7, r5, #1
 800946a:	f1ba 0f00 	cmp.w	sl, #0
 800946e:	d131      	bne.n	80094d4 <__gethex+0x38c>
 8009470:	b127      	cbz	r7, 800947c <__gethex+0x334>
 8009472:	4639      	mov	r1, r7
 8009474:	4620      	mov	r0, r4
 8009476:	f000 fe9e 	bl	800a1b6 <__any_on>
 800947a:	4682      	mov	sl, r0
 800947c:	117b      	asrs	r3, r7, #5
 800947e:	2101      	movs	r1, #1
 8009480:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009484:	f007 071f 	and.w	r7, r7, #31
 8009488:	fa01 f707 	lsl.w	r7, r1, r7
 800948c:	421f      	tst	r7, r3
 800948e:	4629      	mov	r1, r5
 8009490:	4620      	mov	r0, r4
 8009492:	bf18      	it	ne
 8009494:	f04a 0a02 	orrne.w	sl, sl, #2
 8009498:	1b76      	subs	r6, r6, r5
 800949a:	f7ff fdee 	bl	800907a <rshift>
 800949e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80094a2:	2702      	movs	r7, #2
 80094a4:	f1ba 0f00 	cmp.w	sl, #0
 80094a8:	d048      	beq.n	800953c <__gethex+0x3f4>
 80094aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d015      	beq.n	80094de <__gethex+0x396>
 80094b2:	2b03      	cmp	r3, #3
 80094b4:	d017      	beq.n	80094e6 <__gethex+0x39e>
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d109      	bne.n	80094ce <__gethex+0x386>
 80094ba:	f01a 0f02 	tst.w	sl, #2
 80094be:	d006      	beq.n	80094ce <__gethex+0x386>
 80094c0:	f8d9 0000 	ldr.w	r0, [r9]
 80094c4:	ea4a 0a00 	orr.w	sl, sl, r0
 80094c8:	f01a 0f01 	tst.w	sl, #1
 80094cc:	d10e      	bne.n	80094ec <__gethex+0x3a4>
 80094ce:	f047 0710 	orr.w	r7, r7, #16
 80094d2:	e033      	b.n	800953c <__gethex+0x3f4>
 80094d4:	f04f 0a01 	mov.w	sl, #1
 80094d8:	e7d0      	b.n	800947c <__gethex+0x334>
 80094da:	2701      	movs	r7, #1
 80094dc:	e7e2      	b.n	80094a4 <__gethex+0x35c>
 80094de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094e0:	f1c3 0301 	rsb	r3, r3, #1
 80094e4:	9315      	str	r3, [sp, #84]	; 0x54
 80094e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d0f0      	beq.n	80094ce <__gethex+0x386>
 80094ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80094f0:	f104 0314 	add.w	r3, r4, #20
 80094f4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80094f8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80094fc:	f04f 0c00 	mov.w	ip, #0
 8009500:	4618      	mov	r0, r3
 8009502:	f853 2b04 	ldr.w	r2, [r3], #4
 8009506:	f1b2 3fff 	cmp.w	r2, #4294967295
 800950a:	d01c      	beq.n	8009546 <__gethex+0x3fe>
 800950c:	3201      	adds	r2, #1
 800950e:	6002      	str	r2, [r0, #0]
 8009510:	2f02      	cmp	r7, #2
 8009512:	f104 0314 	add.w	r3, r4, #20
 8009516:	d13f      	bne.n	8009598 <__gethex+0x450>
 8009518:	f8d8 2000 	ldr.w	r2, [r8]
 800951c:	3a01      	subs	r2, #1
 800951e:	42b2      	cmp	r2, r6
 8009520:	d10a      	bne.n	8009538 <__gethex+0x3f0>
 8009522:	1171      	asrs	r1, r6, #5
 8009524:	2201      	movs	r2, #1
 8009526:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800952a:	f006 061f 	and.w	r6, r6, #31
 800952e:	fa02 f606 	lsl.w	r6, r2, r6
 8009532:	421e      	tst	r6, r3
 8009534:	bf18      	it	ne
 8009536:	4617      	movne	r7, r2
 8009538:	f047 0720 	orr.w	r7, r7, #32
 800953c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800953e:	601c      	str	r4, [r3, #0]
 8009540:	9b04      	ldr	r3, [sp, #16]
 8009542:	601d      	str	r5, [r3, #0]
 8009544:	e695      	b.n	8009272 <__gethex+0x12a>
 8009546:	4299      	cmp	r1, r3
 8009548:	f843 cc04 	str.w	ip, [r3, #-4]
 800954c:	d8d8      	bhi.n	8009500 <__gethex+0x3b8>
 800954e:	68a3      	ldr	r3, [r4, #8]
 8009550:	459b      	cmp	fp, r3
 8009552:	db19      	blt.n	8009588 <__gethex+0x440>
 8009554:	6861      	ldr	r1, [r4, #4]
 8009556:	ee18 0a10 	vmov	r0, s16
 800955a:	3101      	adds	r1, #1
 800955c:	f000 f990 	bl	8009880 <_Balloc>
 8009560:	4681      	mov	r9, r0
 8009562:	b918      	cbnz	r0, 800956c <__gethex+0x424>
 8009564:	4b1a      	ldr	r3, [pc, #104]	; (80095d0 <__gethex+0x488>)
 8009566:	4602      	mov	r2, r0
 8009568:	2184      	movs	r1, #132	; 0x84
 800956a:	e6a8      	b.n	80092be <__gethex+0x176>
 800956c:	6922      	ldr	r2, [r4, #16]
 800956e:	3202      	adds	r2, #2
 8009570:	f104 010c 	add.w	r1, r4, #12
 8009574:	0092      	lsls	r2, r2, #2
 8009576:	300c      	adds	r0, #12
 8009578:	f000 f974 	bl	8009864 <memcpy>
 800957c:	4621      	mov	r1, r4
 800957e:	ee18 0a10 	vmov	r0, s16
 8009582:	f000 f9bd 	bl	8009900 <_Bfree>
 8009586:	464c      	mov	r4, r9
 8009588:	6923      	ldr	r3, [r4, #16]
 800958a:	1c5a      	adds	r2, r3, #1
 800958c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009590:	6122      	str	r2, [r4, #16]
 8009592:	2201      	movs	r2, #1
 8009594:	615a      	str	r2, [r3, #20]
 8009596:	e7bb      	b.n	8009510 <__gethex+0x3c8>
 8009598:	6922      	ldr	r2, [r4, #16]
 800959a:	455a      	cmp	r2, fp
 800959c:	dd0b      	ble.n	80095b6 <__gethex+0x46e>
 800959e:	2101      	movs	r1, #1
 80095a0:	4620      	mov	r0, r4
 80095a2:	f7ff fd6a 	bl	800907a <rshift>
 80095a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80095aa:	3501      	adds	r5, #1
 80095ac:	42ab      	cmp	r3, r5
 80095ae:	f6ff aed0 	blt.w	8009352 <__gethex+0x20a>
 80095b2:	2701      	movs	r7, #1
 80095b4:	e7c0      	b.n	8009538 <__gethex+0x3f0>
 80095b6:	f016 061f 	ands.w	r6, r6, #31
 80095ba:	d0fa      	beq.n	80095b2 <__gethex+0x46a>
 80095bc:	449a      	add	sl, r3
 80095be:	f1c6 0620 	rsb	r6, r6, #32
 80095c2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80095c6:	f000 fa51 	bl	8009a6c <__hi0bits>
 80095ca:	42b0      	cmp	r0, r6
 80095cc:	dbe7      	blt.n	800959e <__gethex+0x456>
 80095ce:	e7f0      	b.n	80095b2 <__gethex+0x46a>
 80095d0:	0800b364 	.word	0x0800b364

080095d4 <L_shift>:
 80095d4:	f1c2 0208 	rsb	r2, r2, #8
 80095d8:	0092      	lsls	r2, r2, #2
 80095da:	b570      	push	{r4, r5, r6, lr}
 80095dc:	f1c2 0620 	rsb	r6, r2, #32
 80095e0:	6843      	ldr	r3, [r0, #4]
 80095e2:	6804      	ldr	r4, [r0, #0]
 80095e4:	fa03 f506 	lsl.w	r5, r3, r6
 80095e8:	432c      	orrs	r4, r5
 80095ea:	40d3      	lsrs	r3, r2
 80095ec:	6004      	str	r4, [r0, #0]
 80095ee:	f840 3f04 	str.w	r3, [r0, #4]!
 80095f2:	4288      	cmp	r0, r1
 80095f4:	d3f4      	bcc.n	80095e0 <L_shift+0xc>
 80095f6:	bd70      	pop	{r4, r5, r6, pc}

080095f8 <__match>:
 80095f8:	b530      	push	{r4, r5, lr}
 80095fa:	6803      	ldr	r3, [r0, #0]
 80095fc:	3301      	adds	r3, #1
 80095fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009602:	b914      	cbnz	r4, 800960a <__match+0x12>
 8009604:	6003      	str	r3, [r0, #0]
 8009606:	2001      	movs	r0, #1
 8009608:	bd30      	pop	{r4, r5, pc}
 800960a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800960e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009612:	2d19      	cmp	r5, #25
 8009614:	bf98      	it	ls
 8009616:	3220      	addls	r2, #32
 8009618:	42a2      	cmp	r2, r4
 800961a:	d0f0      	beq.n	80095fe <__match+0x6>
 800961c:	2000      	movs	r0, #0
 800961e:	e7f3      	b.n	8009608 <__match+0x10>

08009620 <__hexnan>:
 8009620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009624:	680b      	ldr	r3, [r1, #0]
 8009626:	6801      	ldr	r1, [r0, #0]
 8009628:	115e      	asrs	r6, r3, #5
 800962a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800962e:	f013 031f 	ands.w	r3, r3, #31
 8009632:	b087      	sub	sp, #28
 8009634:	bf18      	it	ne
 8009636:	3604      	addne	r6, #4
 8009638:	2500      	movs	r5, #0
 800963a:	1f37      	subs	r7, r6, #4
 800963c:	4682      	mov	sl, r0
 800963e:	4690      	mov	r8, r2
 8009640:	9301      	str	r3, [sp, #4]
 8009642:	f846 5c04 	str.w	r5, [r6, #-4]
 8009646:	46b9      	mov	r9, r7
 8009648:	463c      	mov	r4, r7
 800964a:	9502      	str	r5, [sp, #8]
 800964c:	46ab      	mov	fp, r5
 800964e:	784a      	ldrb	r2, [r1, #1]
 8009650:	1c4b      	adds	r3, r1, #1
 8009652:	9303      	str	r3, [sp, #12]
 8009654:	b342      	cbz	r2, 80096a8 <__hexnan+0x88>
 8009656:	4610      	mov	r0, r2
 8009658:	9105      	str	r1, [sp, #20]
 800965a:	9204      	str	r2, [sp, #16]
 800965c:	f7ff fd5f 	bl	800911e <__hexdig_fun>
 8009660:	2800      	cmp	r0, #0
 8009662:	d14f      	bne.n	8009704 <__hexnan+0xe4>
 8009664:	9a04      	ldr	r2, [sp, #16]
 8009666:	9905      	ldr	r1, [sp, #20]
 8009668:	2a20      	cmp	r2, #32
 800966a:	d818      	bhi.n	800969e <__hexnan+0x7e>
 800966c:	9b02      	ldr	r3, [sp, #8]
 800966e:	459b      	cmp	fp, r3
 8009670:	dd13      	ble.n	800969a <__hexnan+0x7a>
 8009672:	454c      	cmp	r4, r9
 8009674:	d206      	bcs.n	8009684 <__hexnan+0x64>
 8009676:	2d07      	cmp	r5, #7
 8009678:	dc04      	bgt.n	8009684 <__hexnan+0x64>
 800967a:	462a      	mov	r2, r5
 800967c:	4649      	mov	r1, r9
 800967e:	4620      	mov	r0, r4
 8009680:	f7ff ffa8 	bl	80095d4 <L_shift>
 8009684:	4544      	cmp	r4, r8
 8009686:	d950      	bls.n	800972a <__hexnan+0x10a>
 8009688:	2300      	movs	r3, #0
 800968a:	f1a4 0904 	sub.w	r9, r4, #4
 800968e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009692:	f8cd b008 	str.w	fp, [sp, #8]
 8009696:	464c      	mov	r4, r9
 8009698:	461d      	mov	r5, r3
 800969a:	9903      	ldr	r1, [sp, #12]
 800969c:	e7d7      	b.n	800964e <__hexnan+0x2e>
 800969e:	2a29      	cmp	r2, #41	; 0x29
 80096a0:	d156      	bne.n	8009750 <__hexnan+0x130>
 80096a2:	3102      	adds	r1, #2
 80096a4:	f8ca 1000 	str.w	r1, [sl]
 80096a8:	f1bb 0f00 	cmp.w	fp, #0
 80096ac:	d050      	beq.n	8009750 <__hexnan+0x130>
 80096ae:	454c      	cmp	r4, r9
 80096b0:	d206      	bcs.n	80096c0 <__hexnan+0xa0>
 80096b2:	2d07      	cmp	r5, #7
 80096b4:	dc04      	bgt.n	80096c0 <__hexnan+0xa0>
 80096b6:	462a      	mov	r2, r5
 80096b8:	4649      	mov	r1, r9
 80096ba:	4620      	mov	r0, r4
 80096bc:	f7ff ff8a 	bl	80095d4 <L_shift>
 80096c0:	4544      	cmp	r4, r8
 80096c2:	d934      	bls.n	800972e <__hexnan+0x10e>
 80096c4:	f1a8 0204 	sub.w	r2, r8, #4
 80096c8:	4623      	mov	r3, r4
 80096ca:	f853 1b04 	ldr.w	r1, [r3], #4
 80096ce:	f842 1f04 	str.w	r1, [r2, #4]!
 80096d2:	429f      	cmp	r7, r3
 80096d4:	d2f9      	bcs.n	80096ca <__hexnan+0xaa>
 80096d6:	1b3b      	subs	r3, r7, r4
 80096d8:	f023 0303 	bic.w	r3, r3, #3
 80096dc:	3304      	adds	r3, #4
 80096de:	3401      	adds	r4, #1
 80096e0:	3e03      	subs	r6, #3
 80096e2:	42b4      	cmp	r4, r6
 80096e4:	bf88      	it	hi
 80096e6:	2304      	movhi	r3, #4
 80096e8:	4443      	add	r3, r8
 80096ea:	2200      	movs	r2, #0
 80096ec:	f843 2b04 	str.w	r2, [r3], #4
 80096f0:	429f      	cmp	r7, r3
 80096f2:	d2fb      	bcs.n	80096ec <__hexnan+0xcc>
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	b91b      	cbnz	r3, 8009700 <__hexnan+0xe0>
 80096f8:	4547      	cmp	r7, r8
 80096fa:	d127      	bne.n	800974c <__hexnan+0x12c>
 80096fc:	2301      	movs	r3, #1
 80096fe:	603b      	str	r3, [r7, #0]
 8009700:	2005      	movs	r0, #5
 8009702:	e026      	b.n	8009752 <__hexnan+0x132>
 8009704:	3501      	adds	r5, #1
 8009706:	2d08      	cmp	r5, #8
 8009708:	f10b 0b01 	add.w	fp, fp, #1
 800970c:	dd06      	ble.n	800971c <__hexnan+0xfc>
 800970e:	4544      	cmp	r4, r8
 8009710:	d9c3      	bls.n	800969a <__hexnan+0x7a>
 8009712:	2300      	movs	r3, #0
 8009714:	f844 3c04 	str.w	r3, [r4, #-4]
 8009718:	2501      	movs	r5, #1
 800971a:	3c04      	subs	r4, #4
 800971c:	6822      	ldr	r2, [r4, #0]
 800971e:	f000 000f 	and.w	r0, r0, #15
 8009722:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009726:	6022      	str	r2, [r4, #0]
 8009728:	e7b7      	b.n	800969a <__hexnan+0x7a>
 800972a:	2508      	movs	r5, #8
 800972c:	e7b5      	b.n	800969a <__hexnan+0x7a>
 800972e:	9b01      	ldr	r3, [sp, #4]
 8009730:	2b00      	cmp	r3, #0
 8009732:	d0df      	beq.n	80096f4 <__hexnan+0xd4>
 8009734:	f04f 32ff 	mov.w	r2, #4294967295
 8009738:	f1c3 0320 	rsb	r3, r3, #32
 800973c:	fa22 f303 	lsr.w	r3, r2, r3
 8009740:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009744:	401a      	ands	r2, r3
 8009746:	f846 2c04 	str.w	r2, [r6, #-4]
 800974a:	e7d3      	b.n	80096f4 <__hexnan+0xd4>
 800974c:	3f04      	subs	r7, #4
 800974e:	e7d1      	b.n	80096f4 <__hexnan+0xd4>
 8009750:	2004      	movs	r0, #4
 8009752:	b007      	add	sp, #28
 8009754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009758 <_localeconv_r>:
 8009758:	4800      	ldr	r0, [pc, #0]	; (800975c <_localeconv_r+0x4>)
 800975a:	4770      	bx	lr
 800975c:	20000168 	.word	0x20000168

08009760 <__retarget_lock_init_recursive>:
 8009760:	4770      	bx	lr

08009762 <__retarget_lock_acquire_recursive>:
 8009762:	4770      	bx	lr

08009764 <__retarget_lock_release_recursive>:
 8009764:	4770      	bx	lr

08009766 <__swhatbuf_r>:
 8009766:	b570      	push	{r4, r5, r6, lr}
 8009768:	460e      	mov	r6, r1
 800976a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800976e:	2900      	cmp	r1, #0
 8009770:	b096      	sub	sp, #88	; 0x58
 8009772:	4614      	mov	r4, r2
 8009774:	461d      	mov	r5, r3
 8009776:	da07      	bge.n	8009788 <__swhatbuf_r+0x22>
 8009778:	2300      	movs	r3, #0
 800977a:	602b      	str	r3, [r5, #0]
 800977c:	89b3      	ldrh	r3, [r6, #12]
 800977e:	061a      	lsls	r2, r3, #24
 8009780:	d410      	bmi.n	80097a4 <__swhatbuf_r+0x3e>
 8009782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009786:	e00e      	b.n	80097a6 <__swhatbuf_r+0x40>
 8009788:	466a      	mov	r2, sp
 800978a:	f001 f9b9 	bl	800ab00 <_fstat_r>
 800978e:	2800      	cmp	r0, #0
 8009790:	dbf2      	blt.n	8009778 <__swhatbuf_r+0x12>
 8009792:	9a01      	ldr	r2, [sp, #4]
 8009794:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009798:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800979c:	425a      	negs	r2, r3
 800979e:	415a      	adcs	r2, r3
 80097a0:	602a      	str	r2, [r5, #0]
 80097a2:	e7ee      	b.n	8009782 <__swhatbuf_r+0x1c>
 80097a4:	2340      	movs	r3, #64	; 0x40
 80097a6:	2000      	movs	r0, #0
 80097a8:	6023      	str	r3, [r4, #0]
 80097aa:	b016      	add	sp, #88	; 0x58
 80097ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080097b0 <__smakebuf_r>:
 80097b0:	898b      	ldrh	r3, [r1, #12]
 80097b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097b4:	079d      	lsls	r5, r3, #30
 80097b6:	4606      	mov	r6, r0
 80097b8:	460c      	mov	r4, r1
 80097ba:	d507      	bpl.n	80097cc <__smakebuf_r+0x1c>
 80097bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	6123      	str	r3, [r4, #16]
 80097c4:	2301      	movs	r3, #1
 80097c6:	6163      	str	r3, [r4, #20]
 80097c8:	b002      	add	sp, #8
 80097ca:	bd70      	pop	{r4, r5, r6, pc}
 80097cc:	ab01      	add	r3, sp, #4
 80097ce:	466a      	mov	r2, sp
 80097d0:	f7ff ffc9 	bl	8009766 <__swhatbuf_r>
 80097d4:	9900      	ldr	r1, [sp, #0]
 80097d6:	4605      	mov	r5, r0
 80097d8:	4630      	mov	r0, r6
 80097da:	f000 fd6d 	bl	800a2b8 <_malloc_r>
 80097de:	b948      	cbnz	r0, 80097f4 <__smakebuf_r+0x44>
 80097e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e4:	059a      	lsls	r2, r3, #22
 80097e6:	d4ef      	bmi.n	80097c8 <__smakebuf_r+0x18>
 80097e8:	f023 0303 	bic.w	r3, r3, #3
 80097ec:	f043 0302 	orr.w	r3, r3, #2
 80097f0:	81a3      	strh	r3, [r4, #12]
 80097f2:	e7e3      	b.n	80097bc <__smakebuf_r+0xc>
 80097f4:	4b0d      	ldr	r3, [pc, #52]	; (800982c <__smakebuf_r+0x7c>)
 80097f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80097f8:	89a3      	ldrh	r3, [r4, #12]
 80097fa:	6020      	str	r0, [r4, #0]
 80097fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009800:	81a3      	strh	r3, [r4, #12]
 8009802:	9b00      	ldr	r3, [sp, #0]
 8009804:	6163      	str	r3, [r4, #20]
 8009806:	9b01      	ldr	r3, [sp, #4]
 8009808:	6120      	str	r0, [r4, #16]
 800980a:	b15b      	cbz	r3, 8009824 <__smakebuf_r+0x74>
 800980c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009810:	4630      	mov	r0, r6
 8009812:	f001 f987 	bl	800ab24 <_isatty_r>
 8009816:	b128      	cbz	r0, 8009824 <__smakebuf_r+0x74>
 8009818:	89a3      	ldrh	r3, [r4, #12]
 800981a:	f023 0303 	bic.w	r3, r3, #3
 800981e:	f043 0301 	orr.w	r3, r3, #1
 8009822:	81a3      	strh	r3, [r4, #12]
 8009824:	89a0      	ldrh	r0, [r4, #12]
 8009826:	4305      	orrs	r5, r0
 8009828:	81a5      	strh	r5, [r4, #12]
 800982a:	e7cd      	b.n	80097c8 <__smakebuf_r+0x18>
 800982c:	08008ed9 	.word	0x08008ed9

08009830 <malloc>:
 8009830:	4b02      	ldr	r3, [pc, #8]	; (800983c <malloc+0xc>)
 8009832:	4601      	mov	r1, r0
 8009834:	6818      	ldr	r0, [r3, #0]
 8009836:	f000 bd3f 	b.w	800a2b8 <_malloc_r>
 800983a:	bf00      	nop
 800983c:	20000010 	.word	0x20000010

08009840 <__ascii_mbtowc>:
 8009840:	b082      	sub	sp, #8
 8009842:	b901      	cbnz	r1, 8009846 <__ascii_mbtowc+0x6>
 8009844:	a901      	add	r1, sp, #4
 8009846:	b142      	cbz	r2, 800985a <__ascii_mbtowc+0x1a>
 8009848:	b14b      	cbz	r3, 800985e <__ascii_mbtowc+0x1e>
 800984a:	7813      	ldrb	r3, [r2, #0]
 800984c:	600b      	str	r3, [r1, #0]
 800984e:	7812      	ldrb	r2, [r2, #0]
 8009850:	1e10      	subs	r0, r2, #0
 8009852:	bf18      	it	ne
 8009854:	2001      	movne	r0, #1
 8009856:	b002      	add	sp, #8
 8009858:	4770      	bx	lr
 800985a:	4610      	mov	r0, r2
 800985c:	e7fb      	b.n	8009856 <__ascii_mbtowc+0x16>
 800985e:	f06f 0001 	mvn.w	r0, #1
 8009862:	e7f8      	b.n	8009856 <__ascii_mbtowc+0x16>

08009864 <memcpy>:
 8009864:	440a      	add	r2, r1
 8009866:	4291      	cmp	r1, r2
 8009868:	f100 33ff 	add.w	r3, r0, #4294967295
 800986c:	d100      	bne.n	8009870 <memcpy+0xc>
 800986e:	4770      	bx	lr
 8009870:	b510      	push	{r4, lr}
 8009872:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009876:	f803 4f01 	strb.w	r4, [r3, #1]!
 800987a:	4291      	cmp	r1, r2
 800987c:	d1f9      	bne.n	8009872 <memcpy+0xe>
 800987e:	bd10      	pop	{r4, pc}

08009880 <_Balloc>:
 8009880:	b570      	push	{r4, r5, r6, lr}
 8009882:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009884:	4604      	mov	r4, r0
 8009886:	460d      	mov	r5, r1
 8009888:	b976      	cbnz	r6, 80098a8 <_Balloc+0x28>
 800988a:	2010      	movs	r0, #16
 800988c:	f7ff ffd0 	bl	8009830 <malloc>
 8009890:	4602      	mov	r2, r0
 8009892:	6260      	str	r0, [r4, #36]	; 0x24
 8009894:	b920      	cbnz	r0, 80098a0 <_Balloc+0x20>
 8009896:	4b18      	ldr	r3, [pc, #96]	; (80098f8 <_Balloc+0x78>)
 8009898:	4818      	ldr	r0, [pc, #96]	; (80098fc <_Balloc+0x7c>)
 800989a:	2166      	movs	r1, #102	; 0x66
 800989c:	f001 f8f0 	bl	800aa80 <__assert_func>
 80098a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098a4:	6006      	str	r6, [r0, #0]
 80098a6:	60c6      	str	r6, [r0, #12]
 80098a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80098aa:	68f3      	ldr	r3, [r6, #12]
 80098ac:	b183      	cbz	r3, 80098d0 <_Balloc+0x50>
 80098ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098b6:	b9b8      	cbnz	r0, 80098e8 <_Balloc+0x68>
 80098b8:	2101      	movs	r1, #1
 80098ba:	fa01 f605 	lsl.w	r6, r1, r5
 80098be:	1d72      	adds	r2, r6, #5
 80098c0:	0092      	lsls	r2, r2, #2
 80098c2:	4620      	mov	r0, r4
 80098c4:	f000 fc98 	bl	800a1f8 <_calloc_r>
 80098c8:	b160      	cbz	r0, 80098e4 <_Balloc+0x64>
 80098ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098ce:	e00e      	b.n	80098ee <_Balloc+0x6e>
 80098d0:	2221      	movs	r2, #33	; 0x21
 80098d2:	2104      	movs	r1, #4
 80098d4:	4620      	mov	r0, r4
 80098d6:	f000 fc8f 	bl	800a1f8 <_calloc_r>
 80098da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098dc:	60f0      	str	r0, [r6, #12]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d1e4      	bne.n	80098ae <_Balloc+0x2e>
 80098e4:	2000      	movs	r0, #0
 80098e6:	bd70      	pop	{r4, r5, r6, pc}
 80098e8:	6802      	ldr	r2, [r0, #0]
 80098ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098ee:	2300      	movs	r3, #0
 80098f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098f4:	e7f7      	b.n	80098e6 <_Balloc+0x66>
 80098f6:	bf00      	nop
 80098f8:	0800b2ee 	.word	0x0800b2ee
 80098fc:	0800b458 	.word	0x0800b458

08009900 <_Bfree>:
 8009900:	b570      	push	{r4, r5, r6, lr}
 8009902:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009904:	4605      	mov	r5, r0
 8009906:	460c      	mov	r4, r1
 8009908:	b976      	cbnz	r6, 8009928 <_Bfree+0x28>
 800990a:	2010      	movs	r0, #16
 800990c:	f7ff ff90 	bl	8009830 <malloc>
 8009910:	4602      	mov	r2, r0
 8009912:	6268      	str	r0, [r5, #36]	; 0x24
 8009914:	b920      	cbnz	r0, 8009920 <_Bfree+0x20>
 8009916:	4b09      	ldr	r3, [pc, #36]	; (800993c <_Bfree+0x3c>)
 8009918:	4809      	ldr	r0, [pc, #36]	; (8009940 <_Bfree+0x40>)
 800991a:	218a      	movs	r1, #138	; 0x8a
 800991c:	f001 f8b0 	bl	800aa80 <__assert_func>
 8009920:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009924:	6006      	str	r6, [r0, #0]
 8009926:	60c6      	str	r6, [r0, #12]
 8009928:	b13c      	cbz	r4, 800993a <_Bfree+0x3a>
 800992a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800992c:	6862      	ldr	r2, [r4, #4]
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009934:	6021      	str	r1, [r4, #0]
 8009936:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800993a:	bd70      	pop	{r4, r5, r6, pc}
 800993c:	0800b2ee 	.word	0x0800b2ee
 8009940:	0800b458 	.word	0x0800b458

08009944 <__multadd>:
 8009944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009948:	690e      	ldr	r6, [r1, #16]
 800994a:	4607      	mov	r7, r0
 800994c:	4698      	mov	r8, r3
 800994e:	460c      	mov	r4, r1
 8009950:	f101 0014 	add.w	r0, r1, #20
 8009954:	2300      	movs	r3, #0
 8009956:	6805      	ldr	r5, [r0, #0]
 8009958:	b2a9      	uxth	r1, r5
 800995a:	fb02 8101 	mla	r1, r2, r1, r8
 800995e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009962:	0c2d      	lsrs	r5, r5, #16
 8009964:	fb02 c505 	mla	r5, r2, r5, ip
 8009968:	b289      	uxth	r1, r1
 800996a:	3301      	adds	r3, #1
 800996c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009970:	429e      	cmp	r6, r3
 8009972:	f840 1b04 	str.w	r1, [r0], #4
 8009976:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800997a:	dcec      	bgt.n	8009956 <__multadd+0x12>
 800997c:	f1b8 0f00 	cmp.w	r8, #0
 8009980:	d022      	beq.n	80099c8 <__multadd+0x84>
 8009982:	68a3      	ldr	r3, [r4, #8]
 8009984:	42b3      	cmp	r3, r6
 8009986:	dc19      	bgt.n	80099bc <__multadd+0x78>
 8009988:	6861      	ldr	r1, [r4, #4]
 800998a:	4638      	mov	r0, r7
 800998c:	3101      	adds	r1, #1
 800998e:	f7ff ff77 	bl	8009880 <_Balloc>
 8009992:	4605      	mov	r5, r0
 8009994:	b928      	cbnz	r0, 80099a2 <__multadd+0x5e>
 8009996:	4602      	mov	r2, r0
 8009998:	4b0d      	ldr	r3, [pc, #52]	; (80099d0 <__multadd+0x8c>)
 800999a:	480e      	ldr	r0, [pc, #56]	; (80099d4 <__multadd+0x90>)
 800999c:	21b5      	movs	r1, #181	; 0xb5
 800999e:	f001 f86f 	bl	800aa80 <__assert_func>
 80099a2:	6922      	ldr	r2, [r4, #16]
 80099a4:	3202      	adds	r2, #2
 80099a6:	f104 010c 	add.w	r1, r4, #12
 80099aa:	0092      	lsls	r2, r2, #2
 80099ac:	300c      	adds	r0, #12
 80099ae:	f7ff ff59 	bl	8009864 <memcpy>
 80099b2:	4621      	mov	r1, r4
 80099b4:	4638      	mov	r0, r7
 80099b6:	f7ff ffa3 	bl	8009900 <_Bfree>
 80099ba:	462c      	mov	r4, r5
 80099bc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80099c0:	3601      	adds	r6, #1
 80099c2:	f8c3 8014 	str.w	r8, [r3, #20]
 80099c6:	6126      	str	r6, [r4, #16]
 80099c8:	4620      	mov	r0, r4
 80099ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099ce:	bf00      	nop
 80099d0:	0800b364 	.word	0x0800b364
 80099d4:	0800b458 	.word	0x0800b458

080099d8 <__s2b>:
 80099d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099dc:	460c      	mov	r4, r1
 80099de:	4615      	mov	r5, r2
 80099e0:	461f      	mov	r7, r3
 80099e2:	2209      	movs	r2, #9
 80099e4:	3308      	adds	r3, #8
 80099e6:	4606      	mov	r6, r0
 80099e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80099ec:	2100      	movs	r1, #0
 80099ee:	2201      	movs	r2, #1
 80099f0:	429a      	cmp	r2, r3
 80099f2:	db09      	blt.n	8009a08 <__s2b+0x30>
 80099f4:	4630      	mov	r0, r6
 80099f6:	f7ff ff43 	bl	8009880 <_Balloc>
 80099fa:	b940      	cbnz	r0, 8009a0e <__s2b+0x36>
 80099fc:	4602      	mov	r2, r0
 80099fe:	4b19      	ldr	r3, [pc, #100]	; (8009a64 <__s2b+0x8c>)
 8009a00:	4819      	ldr	r0, [pc, #100]	; (8009a68 <__s2b+0x90>)
 8009a02:	21ce      	movs	r1, #206	; 0xce
 8009a04:	f001 f83c 	bl	800aa80 <__assert_func>
 8009a08:	0052      	lsls	r2, r2, #1
 8009a0a:	3101      	adds	r1, #1
 8009a0c:	e7f0      	b.n	80099f0 <__s2b+0x18>
 8009a0e:	9b08      	ldr	r3, [sp, #32]
 8009a10:	6143      	str	r3, [r0, #20]
 8009a12:	2d09      	cmp	r5, #9
 8009a14:	f04f 0301 	mov.w	r3, #1
 8009a18:	6103      	str	r3, [r0, #16]
 8009a1a:	dd16      	ble.n	8009a4a <__s2b+0x72>
 8009a1c:	f104 0909 	add.w	r9, r4, #9
 8009a20:	46c8      	mov	r8, r9
 8009a22:	442c      	add	r4, r5
 8009a24:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009a28:	4601      	mov	r1, r0
 8009a2a:	3b30      	subs	r3, #48	; 0x30
 8009a2c:	220a      	movs	r2, #10
 8009a2e:	4630      	mov	r0, r6
 8009a30:	f7ff ff88 	bl	8009944 <__multadd>
 8009a34:	45a0      	cmp	r8, r4
 8009a36:	d1f5      	bne.n	8009a24 <__s2b+0x4c>
 8009a38:	f1a5 0408 	sub.w	r4, r5, #8
 8009a3c:	444c      	add	r4, r9
 8009a3e:	1b2d      	subs	r5, r5, r4
 8009a40:	1963      	adds	r3, r4, r5
 8009a42:	42bb      	cmp	r3, r7
 8009a44:	db04      	blt.n	8009a50 <__s2b+0x78>
 8009a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a4a:	340a      	adds	r4, #10
 8009a4c:	2509      	movs	r5, #9
 8009a4e:	e7f6      	b.n	8009a3e <__s2b+0x66>
 8009a50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a54:	4601      	mov	r1, r0
 8009a56:	3b30      	subs	r3, #48	; 0x30
 8009a58:	220a      	movs	r2, #10
 8009a5a:	4630      	mov	r0, r6
 8009a5c:	f7ff ff72 	bl	8009944 <__multadd>
 8009a60:	e7ee      	b.n	8009a40 <__s2b+0x68>
 8009a62:	bf00      	nop
 8009a64:	0800b364 	.word	0x0800b364
 8009a68:	0800b458 	.word	0x0800b458

08009a6c <__hi0bits>:
 8009a6c:	0c03      	lsrs	r3, r0, #16
 8009a6e:	041b      	lsls	r3, r3, #16
 8009a70:	b9d3      	cbnz	r3, 8009aa8 <__hi0bits+0x3c>
 8009a72:	0400      	lsls	r0, r0, #16
 8009a74:	2310      	movs	r3, #16
 8009a76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009a7a:	bf04      	itt	eq
 8009a7c:	0200      	lsleq	r0, r0, #8
 8009a7e:	3308      	addeq	r3, #8
 8009a80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009a84:	bf04      	itt	eq
 8009a86:	0100      	lsleq	r0, r0, #4
 8009a88:	3304      	addeq	r3, #4
 8009a8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009a8e:	bf04      	itt	eq
 8009a90:	0080      	lsleq	r0, r0, #2
 8009a92:	3302      	addeq	r3, #2
 8009a94:	2800      	cmp	r0, #0
 8009a96:	db05      	blt.n	8009aa4 <__hi0bits+0x38>
 8009a98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009a9c:	f103 0301 	add.w	r3, r3, #1
 8009aa0:	bf08      	it	eq
 8009aa2:	2320      	moveq	r3, #32
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	4770      	bx	lr
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	e7e4      	b.n	8009a76 <__hi0bits+0xa>

08009aac <__lo0bits>:
 8009aac:	6803      	ldr	r3, [r0, #0]
 8009aae:	f013 0207 	ands.w	r2, r3, #7
 8009ab2:	4601      	mov	r1, r0
 8009ab4:	d00b      	beq.n	8009ace <__lo0bits+0x22>
 8009ab6:	07da      	lsls	r2, r3, #31
 8009ab8:	d424      	bmi.n	8009b04 <__lo0bits+0x58>
 8009aba:	0798      	lsls	r0, r3, #30
 8009abc:	bf49      	itett	mi
 8009abe:	085b      	lsrmi	r3, r3, #1
 8009ac0:	089b      	lsrpl	r3, r3, #2
 8009ac2:	2001      	movmi	r0, #1
 8009ac4:	600b      	strmi	r3, [r1, #0]
 8009ac6:	bf5c      	itt	pl
 8009ac8:	600b      	strpl	r3, [r1, #0]
 8009aca:	2002      	movpl	r0, #2
 8009acc:	4770      	bx	lr
 8009ace:	b298      	uxth	r0, r3
 8009ad0:	b9b0      	cbnz	r0, 8009b00 <__lo0bits+0x54>
 8009ad2:	0c1b      	lsrs	r3, r3, #16
 8009ad4:	2010      	movs	r0, #16
 8009ad6:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009ada:	bf04      	itt	eq
 8009adc:	0a1b      	lsreq	r3, r3, #8
 8009ade:	3008      	addeq	r0, #8
 8009ae0:	071a      	lsls	r2, r3, #28
 8009ae2:	bf04      	itt	eq
 8009ae4:	091b      	lsreq	r3, r3, #4
 8009ae6:	3004      	addeq	r0, #4
 8009ae8:	079a      	lsls	r2, r3, #30
 8009aea:	bf04      	itt	eq
 8009aec:	089b      	lsreq	r3, r3, #2
 8009aee:	3002      	addeq	r0, #2
 8009af0:	07da      	lsls	r2, r3, #31
 8009af2:	d403      	bmi.n	8009afc <__lo0bits+0x50>
 8009af4:	085b      	lsrs	r3, r3, #1
 8009af6:	f100 0001 	add.w	r0, r0, #1
 8009afa:	d005      	beq.n	8009b08 <__lo0bits+0x5c>
 8009afc:	600b      	str	r3, [r1, #0]
 8009afe:	4770      	bx	lr
 8009b00:	4610      	mov	r0, r2
 8009b02:	e7e8      	b.n	8009ad6 <__lo0bits+0x2a>
 8009b04:	2000      	movs	r0, #0
 8009b06:	4770      	bx	lr
 8009b08:	2020      	movs	r0, #32
 8009b0a:	4770      	bx	lr

08009b0c <__i2b>:
 8009b0c:	b510      	push	{r4, lr}
 8009b0e:	460c      	mov	r4, r1
 8009b10:	2101      	movs	r1, #1
 8009b12:	f7ff feb5 	bl	8009880 <_Balloc>
 8009b16:	4602      	mov	r2, r0
 8009b18:	b928      	cbnz	r0, 8009b26 <__i2b+0x1a>
 8009b1a:	4b05      	ldr	r3, [pc, #20]	; (8009b30 <__i2b+0x24>)
 8009b1c:	4805      	ldr	r0, [pc, #20]	; (8009b34 <__i2b+0x28>)
 8009b1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009b22:	f000 ffad 	bl	800aa80 <__assert_func>
 8009b26:	2301      	movs	r3, #1
 8009b28:	6144      	str	r4, [r0, #20]
 8009b2a:	6103      	str	r3, [r0, #16]
 8009b2c:	bd10      	pop	{r4, pc}
 8009b2e:	bf00      	nop
 8009b30:	0800b364 	.word	0x0800b364
 8009b34:	0800b458 	.word	0x0800b458

08009b38 <__multiply>:
 8009b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b3c:	4614      	mov	r4, r2
 8009b3e:	690a      	ldr	r2, [r1, #16]
 8009b40:	6923      	ldr	r3, [r4, #16]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	bfb8      	it	lt
 8009b46:	460b      	movlt	r3, r1
 8009b48:	460d      	mov	r5, r1
 8009b4a:	bfbc      	itt	lt
 8009b4c:	4625      	movlt	r5, r4
 8009b4e:	461c      	movlt	r4, r3
 8009b50:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8009b54:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009b58:	68ab      	ldr	r3, [r5, #8]
 8009b5a:	6869      	ldr	r1, [r5, #4]
 8009b5c:	eb0a 0709 	add.w	r7, sl, r9
 8009b60:	42bb      	cmp	r3, r7
 8009b62:	b085      	sub	sp, #20
 8009b64:	bfb8      	it	lt
 8009b66:	3101      	addlt	r1, #1
 8009b68:	f7ff fe8a 	bl	8009880 <_Balloc>
 8009b6c:	b930      	cbnz	r0, 8009b7c <__multiply+0x44>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	4b42      	ldr	r3, [pc, #264]	; (8009c7c <__multiply+0x144>)
 8009b72:	4843      	ldr	r0, [pc, #268]	; (8009c80 <__multiply+0x148>)
 8009b74:	f240 115d 	movw	r1, #349	; 0x15d
 8009b78:	f000 ff82 	bl	800aa80 <__assert_func>
 8009b7c:	f100 0614 	add.w	r6, r0, #20
 8009b80:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009b84:	4633      	mov	r3, r6
 8009b86:	2200      	movs	r2, #0
 8009b88:	4543      	cmp	r3, r8
 8009b8a:	d31e      	bcc.n	8009bca <__multiply+0x92>
 8009b8c:	f105 0c14 	add.w	ip, r5, #20
 8009b90:	f104 0314 	add.w	r3, r4, #20
 8009b94:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009b98:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8009b9c:	9202      	str	r2, [sp, #8]
 8009b9e:	ebac 0205 	sub.w	r2, ip, r5
 8009ba2:	3a15      	subs	r2, #21
 8009ba4:	f022 0203 	bic.w	r2, r2, #3
 8009ba8:	3204      	adds	r2, #4
 8009baa:	f105 0115 	add.w	r1, r5, #21
 8009bae:	458c      	cmp	ip, r1
 8009bb0:	bf38      	it	cc
 8009bb2:	2204      	movcc	r2, #4
 8009bb4:	9201      	str	r2, [sp, #4]
 8009bb6:	9a02      	ldr	r2, [sp, #8]
 8009bb8:	9303      	str	r3, [sp, #12]
 8009bba:	429a      	cmp	r2, r3
 8009bbc:	d808      	bhi.n	8009bd0 <__multiply+0x98>
 8009bbe:	2f00      	cmp	r7, #0
 8009bc0:	dc55      	bgt.n	8009c6e <__multiply+0x136>
 8009bc2:	6107      	str	r7, [r0, #16]
 8009bc4:	b005      	add	sp, #20
 8009bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bca:	f843 2b04 	str.w	r2, [r3], #4
 8009bce:	e7db      	b.n	8009b88 <__multiply+0x50>
 8009bd0:	f8b3 a000 	ldrh.w	sl, [r3]
 8009bd4:	f1ba 0f00 	cmp.w	sl, #0
 8009bd8:	d020      	beq.n	8009c1c <__multiply+0xe4>
 8009bda:	f105 0e14 	add.w	lr, r5, #20
 8009bde:	46b1      	mov	r9, r6
 8009be0:	2200      	movs	r2, #0
 8009be2:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009be6:	f8d9 b000 	ldr.w	fp, [r9]
 8009bea:	b2a1      	uxth	r1, r4
 8009bec:	fa1f fb8b 	uxth.w	fp, fp
 8009bf0:	fb0a b101 	mla	r1, sl, r1, fp
 8009bf4:	4411      	add	r1, r2
 8009bf6:	f8d9 2000 	ldr.w	r2, [r9]
 8009bfa:	0c24      	lsrs	r4, r4, #16
 8009bfc:	0c12      	lsrs	r2, r2, #16
 8009bfe:	fb0a 2404 	mla	r4, sl, r4, r2
 8009c02:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009c06:	b289      	uxth	r1, r1
 8009c08:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8009c0c:	45f4      	cmp	ip, lr
 8009c0e:	f849 1b04 	str.w	r1, [r9], #4
 8009c12:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009c16:	d8e4      	bhi.n	8009be2 <__multiply+0xaa>
 8009c18:	9901      	ldr	r1, [sp, #4]
 8009c1a:	5072      	str	r2, [r6, r1]
 8009c1c:	9a03      	ldr	r2, [sp, #12]
 8009c1e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c22:	3304      	adds	r3, #4
 8009c24:	f1b9 0f00 	cmp.w	r9, #0
 8009c28:	d01f      	beq.n	8009c6a <__multiply+0x132>
 8009c2a:	6834      	ldr	r4, [r6, #0]
 8009c2c:	f105 0114 	add.w	r1, r5, #20
 8009c30:	46b6      	mov	lr, r6
 8009c32:	f04f 0a00 	mov.w	sl, #0
 8009c36:	880a      	ldrh	r2, [r1, #0]
 8009c38:	f8be b002 	ldrh.w	fp, [lr, #2]
 8009c3c:	fb09 b202 	mla	r2, r9, r2, fp
 8009c40:	4492      	add	sl, r2
 8009c42:	b2a4      	uxth	r4, r4
 8009c44:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8009c48:	f84e 4b04 	str.w	r4, [lr], #4
 8009c4c:	f851 4b04 	ldr.w	r4, [r1], #4
 8009c50:	f8be 2000 	ldrh.w	r2, [lr]
 8009c54:	0c24      	lsrs	r4, r4, #16
 8009c56:	fb09 2404 	mla	r4, r9, r4, r2
 8009c5a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8009c5e:	458c      	cmp	ip, r1
 8009c60:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009c64:	d8e7      	bhi.n	8009c36 <__multiply+0xfe>
 8009c66:	9a01      	ldr	r2, [sp, #4]
 8009c68:	50b4      	str	r4, [r6, r2]
 8009c6a:	3604      	adds	r6, #4
 8009c6c:	e7a3      	b.n	8009bb6 <__multiply+0x7e>
 8009c6e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d1a5      	bne.n	8009bc2 <__multiply+0x8a>
 8009c76:	3f01      	subs	r7, #1
 8009c78:	e7a1      	b.n	8009bbe <__multiply+0x86>
 8009c7a:	bf00      	nop
 8009c7c:	0800b364 	.word	0x0800b364
 8009c80:	0800b458 	.word	0x0800b458

08009c84 <__pow5mult>:
 8009c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c88:	4615      	mov	r5, r2
 8009c8a:	f012 0203 	ands.w	r2, r2, #3
 8009c8e:	4606      	mov	r6, r0
 8009c90:	460f      	mov	r7, r1
 8009c92:	d007      	beq.n	8009ca4 <__pow5mult+0x20>
 8009c94:	4c25      	ldr	r4, [pc, #148]	; (8009d2c <__pow5mult+0xa8>)
 8009c96:	3a01      	subs	r2, #1
 8009c98:	2300      	movs	r3, #0
 8009c9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c9e:	f7ff fe51 	bl	8009944 <__multadd>
 8009ca2:	4607      	mov	r7, r0
 8009ca4:	10ad      	asrs	r5, r5, #2
 8009ca6:	d03d      	beq.n	8009d24 <__pow5mult+0xa0>
 8009ca8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009caa:	b97c      	cbnz	r4, 8009ccc <__pow5mult+0x48>
 8009cac:	2010      	movs	r0, #16
 8009cae:	f7ff fdbf 	bl	8009830 <malloc>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	6270      	str	r0, [r6, #36]	; 0x24
 8009cb6:	b928      	cbnz	r0, 8009cc4 <__pow5mult+0x40>
 8009cb8:	4b1d      	ldr	r3, [pc, #116]	; (8009d30 <__pow5mult+0xac>)
 8009cba:	481e      	ldr	r0, [pc, #120]	; (8009d34 <__pow5mult+0xb0>)
 8009cbc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009cc0:	f000 fede 	bl	800aa80 <__assert_func>
 8009cc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009cc8:	6004      	str	r4, [r0, #0]
 8009cca:	60c4      	str	r4, [r0, #12]
 8009ccc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009cd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009cd4:	b94c      	cbnz	r4, 8009cea <__pow5mult+0x66>
 8009cd6:	f240 2171 	movw	r1, #625	; 0x271
 8009cda:	4630      	mov	r0, r6
 8009cdc:	f7ff ff16 	bl	8009b0c <__i2b>
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	6003      	str	r3, [r0, #0]
 8009cea:	f04f 0900 	mov.w	r9, #0
 8009cee:	07eb      	lsls	r3, r5, #31
 8009cf0:	d50a      	bpl.n	8009d08 <__pow5mult+0x84>
 8009cf2:	4639      	mov	r1, r7
 8009cf4:	4622      	mov	r2, r4
 8009cf6:	4630      	mov	r0, r6
 8009cf8:	f7ff ff1e 	bl	8009b38 <__multiply>
 8009cfc:	4639      	mov	r1, r7
 8009cfe:	4680      	mov	r8, r0
 8009d00:	4630      	mov	r0, r6
 8009d02:	f7ff fdfd 	bl	8009900 <_Bfree>
 8009d06:	4647      	mov	r7, r8
 8009d08:	106d      	asrs	r5, r5, #1
 8009d0a:	d00b      	beq.n	8009d24 <__pow5mult+0xa0>
 8009d0c:	6820      	ldr	r0, [r4, #0]
 8009d0e:	b938      	cbnz	r0, 8009d20 <__pow5mult+0x9c>
 8009d10:	4622      	mov	r2, r4
 8009d12:	4621      	mov	r1, r4
 8009d14:	4630      	mov	r0, r6
 8009d16:	f7ff ff0f 	bl	8009b38 <__multiply>
 8009d1a:	6020      	str	r0, [r4, #0]
 8009d1c:	f8c0 9000 	str.w	r9, [r0]
 8009d20:	4604      	mov	r4, r0
 8009d22:	e7e4      	b.n	8009cee <__pow5mult+0x6a>
 8009d24:	4638      	mov	r0, r7
 8009d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d2a:	bf00      	nop
 8009d2c:	0800b5a8 	.word	0x0800b5a8
 8009d30:	0800b2ee 	.word	0x0800b2ee
 8009d34:	0800b458 	.word	0x0800b458

08009d38 <__lshift>:
 8009d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d3c:	460c      	mov	r4, r1
 8009d3e:	6849      	ldr	r1, [r1, #4]
 8009d40:	6923      	ldr	r3, [r4, #16]
 8009d42:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d46:	68a3      	ldr	r3, [r4, #8]
 8009d48:	4607      	mov	r7, r0
 8009d4a:	4691      	mov	r9, r2
 8009d4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d50:	f108 0601 	add.w	r6, r8, #1
 8009d54:	42b3      	cmp	r3, r6
 8009d56:	db0b      	blt.n	8009d70 <__lshift+0x38>
 8009d58:	4638      	mov	r0, r7
 8009d5a:	f7ff fd91 	bl	8009880 <_Balloc>
 8009d5e:	4605      	mov	r5, r0
 8009d60:	b948      	cbnz	r0, 8009d76 <__lshift+0x3e>
 8009d62:	4602      	mov	r2, r0
 8009d64:	4b28      	ldr	r3, [pc, #160]	; (8009e08 <__lshift+0xd0>)
 8009d66:	4829      	ldr	r0, [pc, #164]	; (8009e0c <__lshift+0xd4>)
 8009d68:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009d6c:	f000 fe88 	bl	800aa80 <__assert_func>
 8009d70:	3101      	adds	r1, #1
 8009d72:	005b      	lsls	r3, r3, #1
 8009d74:	e7ee      	b.n	8009d54 <__lshift+0x1c>
 8009d76:	2300      	movs	r3, #0
 8009d78:	f100 0114 	add.w	r1, r0, #20
 8009d7c:	f100 0210 	add.w	r2, r0, #16
 8009d80:	4618      	mov	r0, r3
 8009d82:	4553      	cmp	r3, sl
 8009d84:	db33      	blt.n	8009dee <__lshift+0xb6>
 8009d86:	6920      	ldr	r0, [r4, #16]
 8009d88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d8c:	f104 0314 	add.w	r3, r4, #20
 8009d90:	f019 091f 	ands.w	r9, r9, #31
 8009d94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d9c:	d02b      	beq.n	8009df6 <__lshift+0xbe>
 8009d9e:	f1c9 0e20 	rsb	lr, r9, #32
 8009da2:	468a      	mov	sl, r1
 8009da4:	2200      	movs	r2, #0
 8009da6:	6818      	ldr	r0, [r3, #0]
 8009da8:	fa00 f009 	lsl.w	r0, r0, r9
 8009dac:	4302      	orrs	r2, r0
 8009dae:	f84a 2b04 	str.w	r2, [sl], #4
 8009db2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009db6:	459c      	cmp	ip, r3
 8009db8:	fa22 f20e 	lsr.w	r2, r2, lr
 8009dbc:	d8f3      	bhi.n	8009da6 <__lshift+0x6e>
 8009dbe:	ebac 0304 	sub.w	r3, ip, r4
 8009dc2:	3b15      	subs	r3, #21
 8009dc4:	f023 0303 	bic.w	r3, r3, #3
 8009dc8:	3304      	adds	r3, #4
 8009dca:	f104 0015 	add.w	r0, r4, #21
 8009dce:	4584      	cmp	ip, r0
 8009dd0:	bf38      	it	cc
 8009dd2:	2304      	movcc	r3, #4
 8009dd4:	50ca      	str	r2, [r1, r3]
 8009dd6:	b10a      	cbz	r2, 8009ddc <__lshift+0xa4>
 8009dd8:	f108 0602 	add.w	r6, r8, #2
 8009ddc:	3e01      	subs	r6, #1
 8009dde:	4638      	mov	r0, r7
 8009de0:	612e      	str	r6, [r5, #16]
 8009de2:	4621      	mov	r1, r4
 8009de4:	f7ff fd8c 	bl	8009900 <_Bfree>
 8009de8:	4628      	mov	r0, r5
 8009dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dee:	f842 0f04 	str.w	r0, [r2, #4]!
 8009df2:	3301      	adds	r3, #1
 8009df4:	e7c5      	b.n	8009d82 <__lshift+0x4a>
 8009df6:	3904      	subs	r1, #4
 8009df8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dfc:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e00:	459c      	cmp	ip, r3
 8009e02:	d8f9      	bhi.n	8009df8 <__lshift+0xc0>
 8009e04:	e7ea      	b.n	8009ddc <__lshift+0xa4>
 8009e06:	bf00      	nop
 8009e08:	0800b364 	.word	0x0800b364
 8009e0c:	0800b458 	.word	0x0800b458

08009e10 <__mcmp>:
 8009e10:	b530      	push	{r4, r5, lr}
 8009e12:	6902      	ldr	r2, [r0, #16]
 8009e14:	690c      	ldr	r4, [r1, #16]
 8009e16:	1b12      	subs	r2, r2, r4
 8009e18:	d10e      	bne.n	8009e38 <__mcmp+0x28>
 8009e1a:	f100 0314 	add.w	r3, r0, #20
 8009e1e:	3114      	adds	r1, #20
 8009e20:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e24:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e28:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e2c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e30:	42a5      	cmp	r5, r4
 8009e32:	d003      	beq.n	8009e3c <__mcmp+0x2c>
 8009e34:	d305      	bcc.n	8009e42 <__mcmp+0x32>
 8009e36:	2201      	movs	r2, #1
 8009e38:	4610      	mov	r0, r2
 8009e3a:	bd30      	pop	{r4, r5, pc}
 8009e3c:	4283      	cmp	r3, r0
 8009e3e:	d3f3      	bcc.n	8009e28 <__mcmp+0x18>
 8009e40:	e7fa      	b.n	8009e38 <__mcmp+0x28>
 8009e42:	f04f 32ff 	mov.w	r2, #4294967295
 8009e46:	e7f7      	b.n	8009e38 <__mcmp+0x28>

08009e48 <__mdiff>:
 8009e48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e4c:	460c      	mov	r4, r1
 8009e4e:	4606      	mov	r6, r0
 8009e50:	4611      	mov	r1, r2
 8009e52:	4620      	mov	r0, r4
 8009e54:	4617      	mov	r7, r2
 8009e56:	f7ff ffdb 	bl	8009e10 <__mcmp>
 8009e5a:	1e05      	subs	r5, r0, #0
 8009e5c:	d110      	bne.n	8009e80 <__mdiff+0x38>
 8009e5e:	4629      	mov	r1, r5
 8009e60:	4630      	mov	r0, r6
 8009e62:	f7ff fd0d 	bl	8009880 <_Balloc>
 8009e66:	b930      	cbnz	r0, 8009e76 <__mdiff+0x2e>
 8009e68:	4b39      	ldr	r3, [pc, #228]	; (8009f50 <__mdiff+0x108>)
 8009e6a:	4602      	mov	r2, r0
 8009e6c:	f240 2132 	movw	r1, #562	; 0x232
 8009e70:	4838      	ldr	r0, [pc, #224]	; (8009f54 <__mdiff+0x10c>)
 8009e72:	f000 fe05 	bl	800aa80 <__assert_func>
 8009e76:	2301      	movs	r3, #1
 8009e78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e80:	bfa4      	itt	ge
 8009e82:	463b      	movge	r3, r7
 8009e84:	4627      	movge	r7, r4
 8009e86:	4630      	mov	r0, r6
 8009e88:	6879      	ldr	r1, [r7, #4]
 8009e8a:	bfa6      	itte	ge
 8009e8c:	461c      	movge	r4, r3
 8009e8e:	2500      	movge	r5, #0
 8009e90:	2501      	movlt	r5, #1
 8009e92:	f7ff fcf5 	bl	8009880 <_Balloc>
 8009e96:	b920      	cbnz	r0, 8009ea2 <__mdiff+0x5a>
 8009e98:	4b2d      	ldr	r3, [pc, #180]	; (8009f50 <__mdiff+0x108>)
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009ea0:	e7e6      	b.n	8009e70 <__mdiff+0x28>
 8009ea2:	693e      	ldr	r6, [r7, #16]
 8009ea4:	60c5      	str	r5, [r0, #12]
 8009ea6:	6925      	ldr	r5, [r4, #16]
 8009ea8:	f107 0114 	add.w	r1, r7, #20
 8009eac:	f104 0914 	add.w	r9, r4, #20
 8009eb0:	f100 0e14 	add.w	lr, r0, #20
 8009eb4:	f107 0210 	add.w	r2, r7, #16
 8009eb8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009ebc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009ec0:	46f2      	mov	sl, lr
 8009ec2:	2700      	movs	r7, #0
 8009ec4:	f859 3b04 	ldr.w	r3, [r9], #4
 8009ec8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009ecc:	fa1f f883 	uxth.w	r8, r3
 8009ed0:	fa17 f78b 	uxtah	r7, r7, fp
 8009ed4:	0c1b      	lsrs	r3, r3, #16
 8009ed6:	eba7 0808 	sub.w	r8, r7, r8
 8009eda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009ede:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009ee2:	fa1f f888 	uxth.w	r8, r8
 8009ee6:	141f      	asrs	r7, r3, #16
 8009ee8:	454d      	cmp	r5, r9
 8009eea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009eee:	f84a 3b04 	str.w	r3, [sl], #4
 8009ef2:	d8e7      	bhi.n	8009ec4 <__mdiff+0x7c>
 8009ef4:	1b2b      	subs	r3, r5, r4
 8009ef6:	3b15      	subs	r3, #21
 8009ef8:	f023 0303 	bic.w	r3, r3, #3
 8009efc:	3304      	adds	r3, #4
 8009efe:	3415      	adds	r4, #21
 8009f00:	42a5      	cmp	r5, r4
 8009f02:	bf38      	it	cc
 8009f04:	2304      	movcc	r3, #4
 8009f06:	4419      	add	r1, r3
 8009f08:	4473      	add	r3, lr
 8009f0a:	469e      	mov	lr, r3
 8009f0c:	460d      	mov	r5, r1
 8009f0e:	4565      	cmp	r5, ip
 8009f10:	d30e      	bcc.n	8009f30 <__mdiff+0xe8>
 8009f12:	f10c 0203 	add.w	r2, ip, #3
 8009f16:	1a52      	subs	r2, r2, r1
 8009f18:	f022 0203 	bic.w	r2, r2, #3
 8009f1c:	3903      	subs	r1, #3
 8009f1e:	458c      	cmp	ip, r1
 8009f20:	bf38      	it	cc
 8009f22:	2200      	movcc	r2, #0
 8009f24:	441a      	add	r2, r3
 8009f26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009f2a:	b17b      	cbz	r3, 8009f4c <__mdiff+0x104>
 8009f2c:	6106      	str	r6, [r0, #16]
 8009f2e:	e7a5      	b.n	8009e7c <__mdiff+0x34>
 8009f30:	f855 8b04 	ldr.w	r8, [r5], #4
 8009f34:	fa17 f488 	uxtah	r4, r7, r8
 8009f38:	1422      	asrs	r2, r4, #16
 8009f3a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009f3e:	b2a4      	uxth	r4, r4
 8009f40:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009f44:	f84e 4b04 	str.w	r4, [lr], #4
 8009f48:	1417      	asrs	r7, r2, #16
 8009f4a:	e7e0      	b.n	8009f0e <__mdiff+0xc6>
 8009f4c:	3e01      	subs	r6, #1
 8009f4e:	e7ea      	b.n	8009f26 <__mdiff+0xde>
 8009f50:	0800b364 	.word	0x0800b364
 8009f54:	0800b458 	.word	0x0800b458

08009f58 <__ulp>:
 8009f58:	b082      	sub	sp, #8
 8009f5a:	ed8d 0b00 	vstr	d0, [sp]
 8009f5e:	9b01      	ldr	r3, [sp, #4]
 8009f60:	4912      	ldr	r1, [pc, #72]	; (8009fac <__ulp+0x54>)
 8009f62:	4019      	ands	r1, r3
 8009f64:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009f68:	2900      	cmp	r1, #0
 8009f6a:	dd05      	ble.n	8009f78 <__ulp+0x20>
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	ec43 2b10 	vmov	d0, r2, r3
 8009f74:	b002      	add	sp, #8
 8009f76:	4770      	bx	lr
 8009f78:	4249      	negs	r1, r1
 8009f7a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009f7e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009f82:	f04f 0200 	mov.w	r2, #0
 8009f86:	f04f 0300 	mov.w	r3, #0
 8009f8a:	da04      	bge.n	8009f96 <__ulp+0x3e>
 8009f8c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009f90:	fa41 f300 	asr.w	r3, r1, r0
 8009f94:	e7ec      	b.n	8009f70 <__ulp+0x18>
 8009f96:	f1a0 0114 	sub.w	r1, r0, #20
 8009f9a:	291e      	cmp	r1, #30
 8009f9c:	bfda      	itte	le
 8009f9e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009fa2:	fa20 f101 	lsrle.w	r1, r0, r1
 8009fa6:	2101      	movgt	r1, #1
 8009fa8:	460a      	mov	r2, r1
 8009faa:	e7e1      	b.n	8009f70 <__ulp+0x18>
 8009fac:	7ff00000 	.word	0x7ff00000

08009fb0 <__b2d>:
 8009fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb2:	6905      	ldr	r5, [r0, #16]
 8009fb4:	f100 0714 	add.w	r7, r0, #20
 8009fb8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009fbc:	1f2e      	subs	r6, r5, #4
 8009fbe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f7ff fd52 	bl	8009a6c <__hi0bits>
 8009fc8:	f1c0 0320 	rsb	r3, r0, #32
 8009fcc:	280a      	cmp	r0, #10
 8009fce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a04c <__b2d+0x9c>
 8009fd2:	600b      	str	r3, [r1, #0]
 8009fd4:	dc14      	bgt.n	800a000 <__b2d+0x50>
 8009fd6:	f1c0 0e0b 	rsb	lr, r0, #11
 8009fda:	fa24 f10e 	lsr.w	r1, r4, lr
 8009fde:	42b7      	cmp	r7, r6
 8009fe0:	ea41 030c 	orr.w	r3, r1, ip
 8009fe4:	bf34      	ite	cc
 8009fe6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009fea:	2100      	movcs	r1, #0
 8009fec:	3015      	adds	r0, #21
 8009fee:	fa04 f000 	lsl.w	r0, r4, r0
 8009ff2:	fa21 f10e 	lsr.w	r1, r1, lr
 8009ff6:	ea40 0201 	orr.w	r2, r0, r1
 8009ffa:	ec43 2b10 	vmov	d0, r2, r3
 8009ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a000:	42b7      	cmp	r7, r6
 800a002:	bf3a      	itte	cc
 800a004:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a008:	f1a5 0608 	subcc.w	r6, r5, #8
 800a00c:	2100      	movcs	r1, #0
 800a00e:	380b      	subs	r0, #11
 800a010:	d017      	beq.n	800a042 <__b2d+0x92>
 800a012:	f1c0 0c20 	rsb	ip, r0, #32
 800a016:	fa04 f500 	lsl.w	r5, r4, r0
 800a01a:	42be      	cmp	r6, r7
 800a01c:	fa21 f40c 	lsr.w	r4, r1, ip
 800a020:	ea45 0504 	orr.w	r5, r5, r4
 800a024:	bf8c      	ite	hi
 800a026:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a02a:	2400      	movls	r4, #0
 800a02c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a030:	fa01 f000 	lsl.w	r0, r1, r0
 800a034:	fa24 f40c 	lsr.w	r4, r4, ip
 800a038:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a03c:	ea40 0204 	orr.w	r2, r0, r4
 800a040:	e7db      	b.n	8009ffa <__b2d+0x4a>
 800a042:	ea44 030c 	orr.w	r3, r4, ip
 800a046:	460a      	mov	r2, r1
 800a048:	e7d7      	b.n	8009ffa <__b2d+0x4a>
 800a04a:	bf00      	nop
 800a04c:	3ff00000 	.word	0x3ff00000

0800a050 <__d2b>:
 800a050:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a054:	4689      	mov	r9, r1
 800a056:	2101      	movs	r1, #1
 800a058:	ec57 6b10 	vmov	r6, r7, d0
 800a05c:	4690      	mov	r8, r2
 800a05e:	f7ff fc0f 	bl	8009880 <_Balloc>
 800a062:	4604      	mov	r4, r0
 800a064:	b930      	cbnz	r0, 800a074 <__d2b+0x24>
 800a066:	4602      	mov	r2, r0
 800a068:	4b25      	ldr	r3, [pc, #148]	; (800a100 <__d2b+0xb0>)
 800a06a:	4826      	ldr	r0, [pc, #152]	; (800a104 <__d2b+0xb4>)
 800a06c:	f240 310a 	movw	r1, #778	; 0x30a
 800a070:	f000 fd06 	bl	800aa80 <__assert_func>
 800a074:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a078:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a07c:	bb35      	cbnz	r5, 800a0cc <__d2b+0x7c>
 800a07e:	2e00      	cmp	r6, #0
 800a080:	9301      	str	r3, [sp, #4]
 800a082:	d028      	beq.n	800a0d6 <__d2b+0x86>
 800a084:	4668      	mov	r0, sp
 800a086:	9600      	str	r6, [sp, #0]
 800a088:	f7ff fd10 	bl	8009aac <__lo0bits>
 800a08c:	9900      	ldr	r1, [sp, #0]
 800a08e:	b300      	cbz	r0, 800a0d2 <__d2b+0x82>
 800a090:	9a01      	ldr	r2, [sp, #4]
 800a092:	f1c0 0320 	rsb	r3, r0, #32
 800a096:	fa02 f303 	lsl.w	r3, r2, r3
 800a09a:	430b      	orrs	r3, r1
 800a09c:	40c2      	lsrs	r2, r0
 800a09e:	6163      	str	r3, [r4, #20]
 800a0a0:	9201      	str	r2, [sp, #4]
 800a0a2:	9b01      	ldr	r3, [sp, #4]
 800a0a4:	61a3      	str	r3, [r4, #24]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	bf14      	ite	ne
 800a0aa:	2202      	movne	r2, #2
 800a0ac:	2201      	moveq	r2, #1
 800a0ae:	6122      	str	r2, [r4, #16]
 800a0b0:	b1d5      	cbz	r5, 800a0e8 <__d2b+0x98>
 800a0b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a0b6:	4405      	add	r5, r0
 800a0b8:	f8c9 5000 	str.w	r5, [r9]
 800a0bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a0c0:	f8c8 0000 	str.w	r0, [r8]
 800a0c4:	4620      	mov	r0, r4
 800a0c6:	b003      	add	sp, #12
 800a0c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0d0:	e7d5      	b.n	800a07e <__d2b+0x2e>
 800a0d2:	6161      	str	r1, [r4, #20]
 800a0d4:	e7e5      	b.n	800a0a2 <__d2b+0x52>
 800a0d6:	a801      	add	r0, sp, #4
 800a0d8:	f7ff fce8 	bl	8009aac <__lo0bits>
 800a0dc:	9b01      	ldr	r3, [sp, #4]
 800a0de:	6163      	str	r3, [r4, #20]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	6122      	str	r2, [r4, #16]
 800a0e4:	3020      	adds	r0, #32
 800a0e6:	e7e3      	b.n	800a0b0 <__d2b+0x60>
 800a0e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0f0:	f8c9 0000 	str.w	r0, [r9]
 800a0f4:	6918      	ldr	r0, [r3, #16]
 800a0f6:	f7ff fcb9 	bl	8009a6c <__hi0bits>
 800a0fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0fe:	e7df      	b.n	800a0c0 <__d2b+0x70>
 800a100:	0800b364 	.word	0x0800b364
 800a104:	0800b458 	.word	0x0800b458

0800a108 <__ratio>:
 800a108:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a10c:	468a      	mov	sl, r1
 800a10e:	4669      	mov	r1, sp
 800a110:	4683      	mov	fp, r0
 800a112:	f7ff ff4d 	bl	8009fb0 <__b2d>
 800a116:	a901      	add	r1, sp, #4
 800a118:	4650      	mov	r0, sl
 800a11a:	ec59 8b10 	vmov	r8, r9, d0
 800a11e:	ee10 6a10 	vmov	r6, s0
 800a122:	f7ff ff45 	bl	8009fb0 <__b2d>
 800a126:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a12a:	f8da 2010 	ldr.w	r2, [sl, #16]
 800a12e:	eba3 0c02 	sub.w	ip, r3, r2
 800a132:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a136:	1a9b      	subs	r3, r3, r2
 800a138:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a13c:	ec55 4b10 	vmov	r4, r5, d0
 800a140:	2b00      	cmp	r3, #0
 800a142:	ee10 0a10 	vmov	r0, s0
 800a146:	bfce      	itee	gt
 800a148:	464a      	movgt	r2, r9
 800a14a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a14e:	462a      	movle	r2, r5
 800a150:	464f      	mov	r7, r9
 800a152:	4629      	mov	r1, r5
 800a154:	bfcc      	ite	gt
 800a156:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a15a:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800a15e:	ec47 6b17 	vmov	d7, r6, r7
 800a162:	ec41 0b16 	vmov	d6, r0, r1
 800a166:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800a16a:	b003      	add	sp, #12
 800a16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a170 <__copybits>:
 800a170:	3901      	subs	r1, #1
 800a172:	b570      	push	{r4, r5, r6, lr}
 800a174:	1149      	asrs	r1, r1, #5
 800a176:	6914      	ldr	r4, [r2, #16]
 800a178:	3101      	adds	r1, #1
 800a17a:	f102 0314 	add.w	r3, r2, #20
 800a17e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a182:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a186:	1f05      	subs	r5, r0, #4
 800a188:	42a3      	cmp	r3, r4
 800a18a:	d30c      	bcc.n	800a1a6 <__copybits+0x36>
 800a18c:	1aa3      	subs	r3, r4, r2
 800a18e:	3b11      	subs	r3, #17
 800a190:	f023 0303 	bic.w	r3, r3, #3
 800a194:	3211      	adds	r2, #17
 800a196:	42a2      	cmp	r2, r4
 800a198:	bf88      	it	hi
 800a19a:	2300      	movhi	r3, #0
 800a19c:	4418      	add	r0, r3
 800a19e:	2300      	movs	r3, #0
 800a1a0:	4288      	cmp	r0, r1
 800a1a2:	d305      	bcc.n	800a1b0 <__copybits+0x40>
 800a1a4:	bd70      	pop	{r4, r5, r6, pc}
 800a1a6:	f853 6b04 	ldr.w	r6, [r3], #4
 800a1aa:	f845 6f04 	str.w	r6, [r5, #4]!
 800a1ae:	e7eb      	b.n	800a188 <__copybits+0x18>
 800a1b0:	f840 3b04 	str.w	r3, [r0], #4
 800a1b4:	e7f4      	b.n	800a1a0 <__copybits+0x30>

0800a1b6 <__any_on>:
 800a1b6:	f100 0214 	add.w	r2, r0, #20
 800a1ba:	6900      	ldr	r0, [r0, #16]
 800a1bc:	114b      	asrs	r3, r1, #5
 800a1be:	4298      	cmp	r0, r3
 800a1c0:	b510      	push	{r4, lr}
 800a1c2:	db11      	blt.n	800a1e8 <__any_on+0x32>
 800a1c4:	dd0a      	ble.n	800a1dc <__any_on+0x26>
 800a1c6:	f011 011f 	ands.w	r1, r1, #31
 800a1ca:	d007      	beq.n	800a1dc <__any_on+0x26>
 800a1cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a1d0:	fa24 f001 	lsr.w	r0, r4, r1
 800a1d4:	fa00 f101 	lsl.w	r1, r0, r1
 800a1d8:	428c      	cmp	r4, r1
 800a1da:	d10b      	bne.n	800a1f4 <__any_on+0x3e>
 800a1dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d803      	bhi.n	800a1ec <__any_on+0x36>
 800a1e4:	2000      	movs	r0, #0
 800a1e6:	bd10      	pop	{r4, pc}
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	e7f7      	b.n	800a1dc <__any_on+0x26>
 800a1ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1f0:	2900      	cmp	r1, #0
 800a1f2:	d0f5      	beq.n	800a1e0 <__any_on+0x2a>
 800a1f4:	2001      	movs	r0, #1
 800a1f6:	e7f6      	b.n	800a1e6 <__any_on+0x30>

0800a1f8 <_calloc_r>:
 800a1f8:	b513      	push	{r0, r1, r4, lr}
 800a1fa:	434a      	muls	r2, r1
 800a1fc:	4611      	mov	r1, r2
 800a1fe:	9201      	str	r2, [sp, #4]
 800a200:	f000 f85a 	bl	800a2b8 <_malloc_r>
 800a204:	4604      	mov	r4, r0
 800a206:	b118      	cbz	r0, 800a210 <_calloc_r+0x18>
 800a208:	9a01      	ldr	r2, [sp, #4]
 800a20a:	2100      	movs	r1, #0
 800a20c:	f7fc f918 	bl	8006440 <memset>
 800a210:	4620      	mov	r0, r4
 800a212:	b002      	add	sp, #8
 800a214:	bd10      	pop	{r4, pc}
	...

0800a218 <_free_r>:
 800a218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a21a:	2900      	cmp	r1, #0
 800a21c:	d048      	beq.n	800a2b0 <_free_r+0x98>
 800a21e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a222:	9001      	str	r0, [sp, #4]
 800a224:	2b00      	cmp	r3, #0
 800a226:	f1a1 0404 	sub.w	r4, r1, #4
 800a22a:	bfb8      	it	lt
 800a22c:	18e4      	addlt	r4, r4, r3
 800a22e:	f000 fcb5 	bl	800ab9c <__malloc_lock>
 800a232:	4a20      	ldr	r2, [pc, #128]	; (800a2b4 <_free_r+0x9c>)
 800a234:	9801      	ldr	r0, [sp, #4]
 800a236:	6813      	ldr	r3, [r2, #0]
 800a238:	4615      	mov	r5, r2
 800a23a:	b933      	cbnz	r3, 800a24a <_free_r+0x32>
 800a23c:	6063      	str	r3, [r4, #4]
 800a23e:	6014      	str	r4, [r2, #0]
 800a240:	b003      	add	sp, #12
 800a242:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a246:	f000 bcaf 	b.w	800aba8 <__malloc_unlock>
 800a24a:	42a3      	cmp	r3, r4
 800a24c:	d90b      	bls.n	800a266 <_free_r+0x4e>
 800a24e:	6821      	ldr	r1, [r4, #0]
 800a250:	1862      	adds	r2, r4, r1
 800a252:	4293      	cmp	r3, r2
 800a254:	bf04      	itt	eq
 800a256:	681a      	ldreq	r2, [r3, #0]
 800a258:	685b      	ldreq	r3, [r3, #4]
 800a25a:	6063      	str	r3, [r4, #4]
 800a25c:	bf04      	itt	eq
 800a25e:	1852      	addeq	r2, r2, r1
 800a260:	6022      	streq	r2, [r4, #0]
 800a262:	602c      	str	r4, [r5, #0]
 800a264:	e7ec      	b.n	800a240 <_free_r+0x28>
 800a266:	461a      	mov	r2, r3
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	b10b      	cbz	r3, 800a270 <_free_r+0x58>
 800a26c:	42a3      	cmp	r3, r4
 800a26e:	d9fa      	bls.n	800a266 <_free_r+0x4e>
 800a270:	6811      	ldr	r1, [r2, #0]
 800a272:	1855      	adds	r5, r2, r1
 800a274:	42a5      	cmp	r5, r4
 800a276:	d10b      	bne.n	800a290 <_free_r+0x78>
 800a278:	6824      	ldr	r4, [r4, #0]
 800a27a:	4421      	add	r1, r4
 800a27c:	1854      	adds	r4, r2, r1
 800a27e:	42a3      	cmp	r3, r4
 800a280:	6011      	str	r1, [r2, #0]
 800a282:	d1dd      	bne.n	800a240 <_free_r+0x28>
 800a284:	681c      	ldr	r4, [r3, #0]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	6053      	str	r3, [r2, #4]
 800a28a:	4421      	add	r1, r4
 800a28c:	6011      	str	r1, [r2, #0]
 800a28e:	e7d7      	b.n	800a240 <_free_r+0x28>
 800a290:	d902      	bls.n	800a298 <_free_r+0x80>
 800a292:	230c      	movs	r3, #12
 800a294:	6003      	str	r3, [r0, #0]
 800a296:	e7d3      	b.n	800a240 <_free_r+0x28>
 800a298:	6825      	ldr	r5, [r4, #0]
 800a29a:	1961      	adds	r1, r4, r5
 800a29c:	428b      	cmp	r3, r1
 800a29e:	bf04      	itt	eq
 800a2a0:	6819      	ldreq	r1, [r3, #0]
 800a2a2:	685b      	ldreq	r3, [r3, #4]
 800a2a4:	6063      	str	r3, [r4, #4]
 800a2a6:	bf04      	itt	eq
 800a2a8:	1949      	addeq	r1, r1, r5
 800a2aa:	6021      	streq	r1, [r4, #0]
 800a2ac:	6054      	str	r4, [r2, #4]
 800a2ae:	e7c7      	b.n	800a240 <_free_r+0x28>
 800a2b0:	b003      	add	sp, #12
 800a2b2:	bd30      	pop	{r4, r5, pc}
 800a2b4:	20000310 	.word	0x20000310

0800a2b8 <_malloc_r>:
 800a2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ba:	1ccd      	adds	r5, r1, #3
 800a2bc:	f025 0503 	bic.w	r5, r5, #3
 800a2c0:	3508      	adds	r5, #8
 800a2c2:	2d0c      	cmp	r5, #12
 800a2c4:	bf38      	it	cc
 800a2c6:	250c      	movcc	r5, #12
 800a2c8:	2d00      	cmp	r5, #0
 800a2ca:	4606      	mov	r6, r0
 800a2cc:	db01      	blt.n	800a2d2 <_malloc_r+0x1a>
 800a2ce:	42a9      	cmp	r1, r5
 800a2d0:	d903      	bls.n	800a2da <_malloc_r+0x22>
 800a2d2:	230c      	movs	r3, #12
 800a2d4:	6033      	str	r3, [r6, #0]
 800a2d6:	2000      	movs	r0, #0
 800a2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2da:	f000 fc5f 	bl	800ab9c <__malloc_lock>
 800a2de:	4921      	ldr	r1, [pc, #132]	; (800a364 <_malloc_r+0xac>)
 800a2e0:	680a      	ldr	r2, [r1, #0]
 800a2e2:	4614      	mov	r4, r2
 800a2e4:	b99c      	cbnz	r4, 800a30e <_malloc_r+0x56>
 800a2e6:	4f20      	ldr	r7, [pc, #128]	; (800a368 <_malloc_r+0xb0>)
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	b923      	cbnz	r3, 800a2f6 <_malloc_r+0x3e>
 800a2ec:	4621      	mov	r1, r4
 800a2ee:	4630      	mov	r0, r6
 800a2f0:	f000 fb42 	bl	800a978 <_sbrk_r>
 800a2f4:	6038      	str	r0, [r7, #0]
 800a2f6:	4629      	mov	r1, r5
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	f000 fb3d 	bl	800a978 <_sbrk_r>
 800a2fe:	1c43      	adds	r3, r0, #1
 800a300:	d123      	bne.n	800a34a <_malloc_r+0x92>
 800a302:	230c      	movs	r3, #12
 800a304:	6033      	str	r3, [r6, #0]
 800a306:	4630      	mov	r0, r6
 800a308:	f000 fc4e 	bl	800aba8 <__malloc_unlock>
 800a30c:	e7e3      	b.n	800a2d6 <_malloc_r+0x1e>
 800a30e:	6823      	ldr	r3, [r4, #0]
 800a310:	1b5b      	subs	r3, r3, r5
 800a312:	d417      	bmi.n	800a344 <_malloc_r+0x8c>
 800a314:	2b0b      	cmp	r3, #11
 800a316:	d903      	bls.n	800a320 <_malloc_r+0x68>
 800a318:	6023      	str	r3, [r4, #0]
 800a31a:	441c      	add	r4, r3
 800a31c:	6025      	str	r5, [r4, #0]
 800a31e:	e004      	b.n	800a32a <_malloc_r+0x72>
 800a320:	6863      	ldr	r3, [r4, #4]
 800a322:	42a2      	cmp	r2, r4
 800a324:	bf0c      	ite	eq
 800a326:	600b      	streq	r3, [r1, #0]
 800a328:	6053      	strne	r3, [r2, #4]
 800a32a:	4630      	mov	r0, r6
 800a32c:	f000 fc3c 	bl	800aba8 <__malloc_unlock>
 800a330:	f104 000b 	add.w	r0, r4, #11
 800a334:	1d23      	adds	r3, r4, #4
 800a336:	f020 0007 	bic.w	r0, r0, #7
 800a33a:	1ac2      	subs	r2, r0, r3
 800a33c:	d0cc      	beq.n	800a2d8 <_malloc_r+0x20>
 800a33e:	1a1b      	subs	r3, r3, r0
 800a340:	50a3      	str	r3, [r4, r2]
 800a342:	e7c9      	b.n	800a2d8 <_malloc_r+0x20>
 800a344:	4622      	mov	r2, r4
 800a346:	6864      	ldr	r4, [r4, #4]
 800a348:	e7cc      	b.n	800a2e4 <_malloc_r+0x2c>
 800a34a:	1cc4      	adds	r4, r0, #3
 800a34c:	f024 0403 	bic.w	r4, r4, #3
 800a350:	42a0      	cmp	r0, r4
 800a352:	d0e3      	beq.n	800a31c <_malloc_r+0x64>
 800a354:	1a21      	subs	r1, r4, r0
 800a356:	4630      	mov	r0, r6
 800a358:	f000 fb0e 	bl	800a978 <_sbrk_r>
 800a35c:	3001      	adds	r0, #1
 800a35e:	d1dd      	bne.n	800a31c <_malloc_r+0x64>
 800a360:	e7cf      	b.n	800a302 <_malloc_r+0x4a>
 800a362:	bf00      	nop
 800a364:	20000310 	.word	0x20000310
 800a368:	20000314 	.word	0x20000314

0800a36c <__ssputs_r>:
 800a36c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a370:	688e      	ldr	r6, [r1, #8]
 800a372:	429e      	cmp	r6, r3
 800a374:	4682      	mov	sl, r0
 800a376:	460c      	mov	r4, r1
 800a378:	4690      	mov	r8, r2
 800a37a:	461f      	mov	r7, r3
 800a37c:	d838      	bhi.n	800a3f0 <__ssputs_r+0x84>
 800a37e:	898a      	ldrh	r2, [r1, #12]
 800a380:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a384:	d032      	beq.n	800a3ec <__ssputs_r+0x80>
 800a386:	6825      	ldr	r5, [r4, #0]
 800a388:	6909      	ldr	r1, [r1, #16]
 800a38a:	eba5 0901 	sub.w	r9, r5, r1
 800a38e:	6965      	ldr	r5, [r4, #20]
 800a390:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a394:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a398:	3301      	adds	r3, #1
 800a39a:	444b      	add	r3, r9
 800a39c:	106d      	asrs	r5, r5, #1
 800a39e:	429d      	cmp	r5, r3
 800a3a0:	bf38      	it	cc
 800a3a2:	461d      	movcc	r5, r3
 800a3a4:	0553      	lsls	r3, r2, #21
 800a3a6:	d531      	bpl.n	800a40c <__ssputs_r+0xa0>
 800a3a8:	4629      	mov	r1, r5
 800a3aa:	f7ff ff85 	bl	800a2b8 <_malloc_r>
 800a3ae:	4606      	mov	r6, r0
 800a3b0:	b950      	cbnz	r0, 800a3c8 <__ssputs_r+0x5c>
 800a3b2:	230c      	movs	r3, #12
 800a3b4:	f8ca 3000 	str.w	r3, [sl]
 800a3b8:	89a3      	ldrh	r3, [r4, #12]
 800a3ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3be:	81a3      	strh	r3, [r4, #12]
 800a3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c8:	6921      	ldr	r1, [r4, #16]
 800a3ca:	464a      	mov	r2, r9
 800a3cc:	f7ff fa4a 	bl	8009864 <memcpy>
 800a3d0:	89a3      	ldrh	r3, [r4, #12]
 800a3d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3da:	81a3      	strh	r3, [r4, #12]
 800a3dc:	6126      	str	r6, [r4, #16]
 800a3de:	6165      	str	r5, [r4, #20]
 800a3e0:	444e      	add	r6, r9
 800a3e2:	eba5 0509 	sub.w	r5, r5, r9
 800a3e6:	6026      	str	r6, [r4, #0]
 800a3e8:	60a5      	str	r5, [r4, #8]
 800a3ea:	463e      	mov	r6, r7
 800a3ec:	42be      	cmp	r6, r7
 800a3ee:	d900      	bls.n	800a3f2 <__ssputs_r+0x86>
 800a3f0:	463e      	mov	r6, r7
 800a3f2:	4632      	mov	r2, r6
 800a3f4:	6820      	ldr	r0, [r4, #0]
 800a3f6:	4641      	mov	r1, r8
 800a3f8:	f000 fbb6 	bl	800ab68 <memmove>
 800a3fc:	68a3      	ldr	r3, [r4, #8]
 800a3fe:	6822      	ldr	r2, [r4, #0]
 800a400:	1b9b      	subs	r3, r3, r6
 800a402:	4432      	add	r2, r6
 800a404:	60a3      	str	r3, [r4, #8]
 800a406:	6022      	str	r2, [r4, #0]
 800a408:	2000      	movs	r0, #0
 800a40a:	e7db      	b.n	800a3c4 <__ssputs_r+0x58>
 800a40c:	462a      	mov	r2, r5
 800a40e:	f000 fbd1 	bl	800abb4 <_realloc_r>
 800a412:	4606      	mov	r6, r0
 800a414:	2800      	cmp	r0, #0
 800a416:	d1e1      	bne.n	800a3dc <__ssputs_r+0x70>
 800a418:	6921      	ldr	r1, [r4, #16]
 800a41a:	4650      	mov	r0, sl
 800a41c:	f7ff fefc 	bl	800a218 <_free_r>
 800a420:	e7c7      	b.n	800a3b2 <__ssputs_r+0x46>
	...

0800a424 <_svfiprintf_r>:
 800a424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a428:	4698      	mov	r8, r3
 800a42a:	898b      	ldrh	r3, [r1, #12]
 800a42c:	061b      	lsls	r3, r3, #24
 800a42e:	b09d      	sub	sp, #116	; 0x74
 800a430:	4607      	mov	r7, r0
 800a432:	460d      	mov	r5, r1
 800a434:	4614      	mov	r4, r2
 800a436:	d50e      	bpl.n	800a456 <_svfiprintf_r+0x32>
 800a438:	690b      	ldr	r3, [r1, #16]
 800a43a:	b963      	cbnz	r3, 800a456 <_svfiprintf_r+0x32>
 800a43c:	2140      	movs	r1, #64	; 0x40
 800a43e:	f7ff ff3b 	bl	800a2b8 <_malloc_r>
 800a442:	6028      	str	r0, [r5, #0]
 800a444:	6128      	str	r0, [r5, #16]
 800a446:	b920      	cbnz	r0, 800a452 <_svfiprintf_r+0x2e>
 800a448:	230c      	movs	r3, #12
 800a44a:	603b      	str	r3, [r7, #0]
 800a44c:	f04f 30ff 	mov.w	r0, #4294967295
 800a450:	e0d1      	b.n	800a5f6 <_svfiprintf_r+0x1d2>
 800a452:	2340      	movs	r3, #64	; 0x40
 800a454:	616b      	str	r3, [r5, #20]
 800a456:	2300      	movs	r3, #0
 800a458:	9309      	str	r3, [sp, #36]	; 0x24
 800a45a:	2320      	movs	r3, #32
 800a45c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a460:	f8cd 800c 	str.w	r8, [sp, #12]
 800a464:	2330      	movs	r3, #48	; 0x30
 800a466:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a610 <_svfiprintf_r+0x1ec>
 800a46a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a46e:	f04f 0901 	mov.w	r9, #1
 800a472:	4623      	mov	r3, r4
 800a474:	469a      	mov	sl, r3
 800a476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a47a:	b10a      	cbz	r2, 800a480 <_svfiprintf_r+0x5c>
 800a47c:	2a25      	cmp	r2, #37	; 0x25
 800a47e:	d1f9      	bne.n	800a474 <_svfiprintf_r+0x50>
 800a480:	ebba 0b04 	subs.w	fp, sl, r4
 800a484:	d00b      	beq.n	800a49e <_svfiprintf_r+0x7a>
 800a486:	465b      	mov	r3, fp
 800a488:	4622      	mov	r2, r4
 800a48a:	4629      	mov	r1, r5
 800a48c:	4638      	mov	r0, r7
 800a48e:	f7ff ff6d 	bl	800a36c <__ssputs_r>
 800a492:	3001      	adds	r0, #1
 800a494:	f000 80aa 	beq.w	800a5ec <_svfiprintf_r+0x1c8>
 800a498:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a49a:	445a      	add	r2, fp
 800a49c:	9209      	str	r2, [sp, #36]	; 0x24
 800a49e:	f89a 3000 	ldrb.w	r3, [sl]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f000 80a2 	beq.w	800a5ec <_svfiprintf_r+0x1c8>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4b2:	f10a 0a01 	add.w	sl, sl, #1
 800a4b6:	9304      	str	r3, [sp, #16]
 800a4b8:	9307      	str	r3, [sp, #28]
 800a4ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4be:	931a      	str	r3, [sp, #104]	; 0x68
 800a4c0:	4654      	mov	r4, sl
 800a4c2:	2205      	movs	r2, #5
 800a4c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c8:	4851      	ldr	r0, [pc, #324]	; (800a610 <_svfiprintf_r+0x1ec>)
 800a4ca:	f7f5 fec1 	bl	8000250 <memchr>
 800a4ce:	9a04      	ldr	r2, [sp, #16]
 800a4d0:	b9d8      	cbnz	r0, 800a50a <_svfiprintf_r+0xe6>
 800a4d2:	06d0      	lsls	r0, r2, #27
 800a4d4:	bf44      	itt	mi
 800a4d6:	2320      	movmi	r3, #32
 800a4d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4dc:	0711      	lsls	r1, r2, #28
 800a4de:	bf44      	itt	mi
 800a4e0:	232b      	movmi	r3, #43	; 0x2b
 800a4e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a4ea:	2b2a      	cmp	r3, #42	; 0x2a
 800a4ec:	d015      	beq.n	800a51a <_svfiprintf_r+0xf6>
 800a4ee:	9a07      	ldr	r2, [sp, #28]
 800a4f0:	4654      	mov	r4, sl
 800a4f2:	2000      	movs	r0, #0
 800a4f4:	f04f 0c0a 	mov.w	ip, #10
 800a4f8:	4621      	mov	r1, r4
 800a4fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4fe:	3b30      	subs	r3, #48	; 0x30
 800a500:	2b09      	cmp	r3, #9
 800a502:	d94e      	bls.n	800a5a2 <_svfiprintf_r+0x17e>
 800a504:	b1b0      	cbz	r0, 800a534 <_svfiprintf_r+0x110>
 800a506:	9207      	str	r2, [sp, #28]
 800a508:	e014      	b.n	800a534 <_svfiprintf_r+0x110>
 800a50a:	eba0 0308 	sub.w	r3, r0, r8
 800a50e:	fa09 f303 	lsl.w	r3, r9, r3
 800a512:	4313      	orrs	r3, r2
 800a514:	9304      	str	r3, [sp, #16]
 800a516:	46a2      	mov	sl, r4
 800a518:	e7d2      	b.n	800a4c0 <_svfiprintf_r+0x9c>
 800a51a:	9b03      	ldr	r3, [sp, #12]
 800a51c:	1d19      	adds	r1, r3, #4
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	9103      	str	r1, [sp, #12]
 800a522:	2b00      	cmp	r3, #0
 800a524:	bfbb      	ittet	lt
 800a526:	425b      	neglt	r3, r3
 800a528:	f042 0202 	orrlt.w	r2, r2, #2
 800a52c:	9307      	strge	r3, [sp, #28]
 800a52e:	9307      	strlt	r3, [sp, #28]
 800a530:	bfb8      	it	lt
 800a532:	9204      	strlt	r2, [sp, #16]
 800a534:	7823      	ldrb	r3, [r4, #0]
 800a536:	2b2e      	cmp	r3, #46	; 0x2e
 800a538:	d10c      	bne.n	800a554 <_svfiprintf_r+0x130>
 800a53a:	7863      	ldrb	r3, [r4, #1]
 800a53c:	2b2a      	cmp	r3, #42	; 0x2a
 800a53e:	d135      	bne.n	800a5ac <_svfiprintf_r+0x188>
 800a540:	9b03      	ldr	r3, [sp, #12]
 800a542:	1d1a      	adds	r2, r3, #4
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	9203      	str	r2, [sp, #12]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	bfb8      	it	lt
 800a54c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a550:	3402      	adds	r4, #2
 800a552:	9305      	str	r3, [sp, #20]
 800a554:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a620 <_svfiprintf_r+0x1fc>
 800a558:	7821      	ldrb	r1, [r4, #0]
 800a55a:	2203      	movs	r2, #3
 800a55c:	4650      	mov	r0, sl
 800a55e:	f7f5 fe77 	bl	8000250 <memchr>
 800a562:	b140      	cbz	r0, 800a576 <_svfiprintf_r+0x152>
 800a564:	2340      	movs	r3, #64	; 0x40
 800a566:	eba0 000a 	sub.w	r0, r0, sl
 800a56a:	fa03 f000 	lsl.w	r0, r3, r0
 800a56e:	9b04      	ldr	r3, [sp, #16]
 800a570:	4303      	orrs	r3, r0
 800a572:	3401      	adds	r4, #1
 800a574:	9304      	str	r3, [sp, #16]
 800a576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a57a:	4826      	ldr	r0, [pc, #152]	; (800a614 <_svfiprintf_r+0x1f0>)
 800a57c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a580:	2206      	movs	r2, #6
 800a582:	f7f5 fe65 	bl	8000250 <memchr>
 800a586:	2800      	cmp	r0, #0
 800a588:	d038      	beq.n	800a5fc <_svfiprintf_r+0x1d8>
 800a58a:	4b23      	ldr	r3, [pc, #140]	; (800a618 <_svfiprintf_r+0x1f4>)
 800a58c:	bb1b      	cbnz	r3, 800a5d6 <_svfiprintf_r+0x1b2>
 800a58e:	9b03      	ldr	r3, [sp, #12]
 800a590:	3307      	adds	r3, #7
 800a592:	f023 0307 	bic.w	r3, r3, #7
 800a596:	3308      	adds	r3, #8
 800a598:	9303      	str	r3, [sp, #12]
 800a59a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a59c:	4433      	add	r3, r6
 800a59e:	9309      	str	r3, [sp, #36]	; 0x24
 800a5a0:	e767      	b.n	800a472 <_svfiprintf_r+0x4e>
 800a5a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5a6:	460c      	mov	r4, r1
 800a5a8:	2001      	movs	r0, #1
 800a5aa:	e7a5      	b.n	800a4f8 <_svfiprintf_r+0xd4>
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	3401      	adds	r4, #1
 800a5b0:	9305      	str	r3, [sp, #20]
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	f04f 0c0a 	mov.w	ip, #10
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5be:	3a30      	subs	r2, #48	; 0x30
 800a5c0:	2a09      	cmp	r2, #9
 800a5c2:	d903      	bls.n	800a5cc <_svfiprintf_r+0x1a8>
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d0c5      	beq.n	800a554 <_svfiprintf_r+0x130>
 800a5c8:	9105      	str	r1, [sp, #20]
 800a5ca:	e7c3      	b.n	800a554 <_svfiprintf_r+0x130>
 800a5cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e7f0      	b.n	800a5b8 <_svfiprintf_r+0x194>
 800a5d6:	ab03      	add	r3, sp, #12
 800a5d8:	9300      	str	r3, [sp, #0]
 800a5da:	462a      	mov	r2, r5
 800a5dc:	4b0f      	ldr	r3, [pc, #60]	; (800a61c <_svfiprintf_r+0x1f8>)
 800a5de:	a904      	add	r1, sp, #16
 800a5e0:	4638      	mov	r0, r7
 800a5e2:	f7fb ffc5 	bl	8006570 <_printf_float>
 800a5e6:	1c42      	adds	r2, r0, #1
 800a5e8:	4606      	mov	r6, r0
 800a5ea:	d1d6      	bne.n	800a59a <_svfiprintf_r+0x176>
 800a5ec:	89ab      	ldrh	r3, [r5, #12]
 800a5ee:	065b      	lsls	r3, r3, #25
 800a5f0:	f53f af2c 	bmi.w	800a44c <_svfiprintf_r+0x28>
 800a5f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5f6:	b01d      	add	sp, #116	; 0x74
 800a5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5fc:	ab03      	add	r3, sp, #12
 800a5fe:	9300      	str	r3, [sp, #0]
 800a600:	462a      	mov	r2, r5
 800a602:	4b06      	ldr	r3, [pc, #24]	; (800a61c <_svfiprintf_r+0x1f8>)
 800a604:	a904      	add	r1, sp, #16
 800a606:	4638      	mov	r0, r7
 800a608:	f7fc fa3e 	bl	8006a88 <_printf_i>
 800a60c:	e7eb      	b.n	800a5e6 <_svfiprintf_r+0x1c2>
 800a60e:	bf00      	nop
 800a610:	0800b5b4 	.word	0x0800b5b4
 800a614:	0800b5be 	.word	0x0800b5be
 800a618:	08006571 	.word	0x08006571
 800a61c:	0800a36d 	.word	0x0800a36d
 800a620:	0800b5ba 	.word	0x0800b5ba

0800a624 <__sfputc_r>:
 800a624:	6893      	ldr	r3, [r2, #8]
 800a626:	3b01      	subs	r3, #1
 800a628:	2b00      	cmp	r3, #0
 800a62a:	b410      	push	{r4}
 800a62c:	6093      	str	r3, [r2, #8]
 800a62e:	da08      	bge.n	800a642 <__sfputc_r+0x1e>
 800a630:	6994      	ldr	r4, [r2, #24]
 800a632:	42a3      	cmp	r3, r4
 800a634:	db01      	blt.n	800a63a <__sfputc_r+0x16>
 800a636:	290a      	cmp	r1, #10
 800a638:	d103      	bne.n	800a642 <__sfputc_r+0x1e>
 800a63a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a63e:	f7fd bc95 	b.w	8007f6c <__swbuf_r>
 800a642:	6813      	ldr	r3, [r2, #0]
 800a644:	1c58      	adds	r0, r3, #1
 800a646:	6010      	str	r0, [r2, #0]
 800a648:	7019      	strb	r1, [r3, #0]
 800a64a:	4608      	mov	r0, r1
 800a64c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a650:	4770      	bx	lr

0800a652 <__sfputs_r>:
 800a652:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a654:	4606      	mov	r6, r0
 800a656:	460f      	mov	r7, r1
 800a658:	4614      	mov	r4, r2
 800a65a:	18d5      	adds	r5, r2, r3
 800a65c:	42ac      	cmp	r4, r5
 800a65e:	d101      	bne.n	800a664 <__sfputs_r+0x12>
 800a660:	2000      	movs	r0, #0
 800a662:	e007      	b.n	800a674 <__sfputs_r+0x22>
 800a664:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a668:	463a      	mov	r2, r7
 800a66a:	4630      	mov	r0, r6
 800a66c:	f7ff ffda 	bl	800a624 <__sfputc_r>
 800a670:	1c43      	adds	r3, r0, #1
 800a672:	d1f3      	bne.n	800a65c <__sfputs_r+0xa>
 800a674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a678 <_vfiprintf_r>:
 800a678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a67c:	460d      	mov	r5, r1
 800a67e:	b09d      	sub	sp, #116	; 0x74
 800a680:	4614      	mov	r4, r2
 800a682:	4698      	mov	r8, r3
 800a684:	4606      	mov	r6, r0
 800a686:	b118      	cbz	r0, 800a690 <_vfiprintf_r+0x18>
 800a688:	6983      	ldr	r3, [r0, #24]
 800a68a:	b90b      	cbnz	r3, 800a690 <_vfiprintf_r+0x18>
 800a68c:	f7fe fc58 	bl	8008f40 <__sinit>
 800a690:	4b89      	ldr	r3, [pc, #548]	; (800a8b8 <_vfiprintf_r+0x240>)
 800a692:	429d      	cmp	r5, r3
 800a694:	d11b      	bne.n	800a6ce <_vfiprintf_r+0x56>
 800a696:	6875      	ldr	r5, [r6, #4]
 800a698:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a69a:	07d9      	lsls	r1, r3, #31
 800a69c:	d405      	bmi.n	800a6aa <_vfiprintf_r+0x32>
 800a69e:	89ab      	ldrh	r3, [r5, #12]
 800a6a0:	059a      	lsls	r2, r3, #22
 800a6a2:	d402      	bmi.n	800a6aa <_vfiprintf_r+0x32>
 800a6a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6a6:	f7ff f85c 	bl	8009762 <__retarget_lock_acquire_recursive>
 800a6aa:	89ab      	ldrh	r3, [r5, #12]
 800a6ac:	071b      	lsls	r3, r3, #28
 800a6ae:	d501      	bpl.n	800a6b4 <_vfiprintf_r+0x3c>
 800a6b0:	692b      	ldr	r3, [r5, #16]
 800a6b2:	b9eb      	cbnz	r3, 800a6f0 <_vfiprintf_r+0x78>
 800a6b4:	4629      	mov	r1, r5
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	f7fd fcaa 	bl	8008010 <__swsetup_r>
 800a6bc:	b1c0      	cbz	r0, 800a6f0 <_vfiprintf_r+0x78>
 800a6be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6c0:	07dc      	lsls	r4, r3, #31
 800a6c2:	d50e      	bpl.n	800a6e2 <_vfiprintf_r+0x6a>
 800a6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6c8:	b01d      	add	sp, #116	; 0x74
 800a6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ce:	4b7b      	ldr	r3, [pc, #492]	; (800a8bc <_vfiprintf_r+0x244>)
 800a6d0:	429d      	cmp	r5, r3
 800a6d2:	d101      	bne.n	800a6d8 <_vfiprintf_r+0x60>
 800a6d4:	68b5      	ldr	r5, [r6, #8]
 800a6d6:	e7df      	b.n	800a698 <_vfiprintf_r+0x20>
 800a6d8:	4b79      	ldr	r3, [pc, #484]	; (800a8c0 <_vfiprintf_r+0x248>)
 800a6da:	429d      	cmp	r5, r3
 800a6dc:	bf08      	it	eq
 800a6de:	68f5      	ldreq	r5, [r6, #12]
 800a6e0:	e7da      	b.n	800a698 <_vfiprintf_r+0x20>
 800a6e2:	89ab      	ldrh	r3, [r5, #12]
 800a6e4:	0598      	lsls	r0, r3, #22
 800a6e6:	d4ed      	bmi.n	800a6c4 <_vfiprintf_r+0x4c>
 800a6e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6ea:	f7ff f83b 	bl	8009764 <__retarget_lock_release_recursive>
 800a6ee:	e7e9      	b.n	800a6c4 <_vfiprintf_r+0x4c>
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a6f4:	2320      	movs	r3, #32
 800a6f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6fe:	2330      	movs	r3, #48	; 0x30
 800a700:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a8c4 <_vfiprintf_r+0x24c>
 800a704:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a708:	f04f 0901 	mov.w	r9, #1
 800a70c:	4623      	mov	r3, r4
 800a70e:	469a      	mov	sl, r3
 800a710:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a714:	b10a      	cbz	r2, 800a71a <_vfiprintf_r+0xa2>
 800a716:	2a25      	cmp	r2, #37	; 0x25
 800a718:	d1f9      	bne.n	800a70e <_vfiprintf_r+0x96>
 800a71a:	ebba 0b04 	subs.w	fp, sl, r4
 800a71e:	d00b      	beq.n	800a738 <_vfiprintf_r+0xc0>
 800a720:	465b      	mov	r3, fp
 800a722:	4622      	mov	r2, r4
 800a724:	4629      	mov	r1, r5
 800a726:	4630      	mov	r0, r6
 800a728:	f7ff ff93 	bl	800a652 <__sfputs_r>
 800a72c:	3001      	adds	r0, #1
 800a72e:	f000 80aa 	beq.w	800a886 <_vfiprintf_r+0x20e>
 800a732:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a734:	445a      	add	r2, fp
 800a736:	9209      	str	r2, [sp, #36]	; 0x24
 800a738:	f89a 3000 	ldrb.w	r3, [sl]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	f000 80a2 	beq.w	800a886 <_vfiprintf_r+0x20e>
 800a742:	2300      	movs	r3, #0
 800a744:	f04f 32ff 	mov.w	r2, #4294967295
 800a748:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a74c:	f10a 0a01 	add.w	sl, sl, #1
 800a750:	9304      	str	r3, [sp, #16]
 800a752:	9307      	str	r3, [sp, #28]
 800a754:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a758:	931a      	str	r3, [sp, #104]	; 0x68
 800a75a:	4654      	mov	r4, sl
 800a75c:	2205      	movs	r2, #5
 800a75e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a762:	4858      	ldr	r0, [pc, #352]	; (800a8c4 <_vfiprintf_r+0x24c>)
 800a764:	f7f5 fd74 	bl	8000250 <memchr>
 800a768:	9a04      	ldr	r2, [sp, #16]
 800a76a:	b9d8      	cbnz	r0, 800a7a4 <_vfiprintf_r+0x12c>
 800a76c:	06d1      	lsls	r1, r2, #27
 800a76e:	bf44      	itt	mi
 800a770:	2320      	movmi	r3, #32
 800a772:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a776:	0713      	lsls	r3, r2, #28
 800a778:	bf44      	itt	mi
 800a77a:	232b      	movmi	r3, #43	; 0x2b
 800a77c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a780:	f89a 3000 	ldrb.w	r3, [sl]
 800a784:	2b2a      	cmp	r3, #42	; 0x2a
 800a786:	d015      	beq.n	800a7b4 <_vfiprintf_r+0x13c>
 800a788:	9a07      	ldr	r2, [sp, #28]
 800a78a:	4654      	mov	r4, sl
 800a78c:	2000      	movs	r0, #0
 800a78e:	f04f 0c0a 	mov.w	ip, #10
 800a792:	4621      	mov	r1, r4
 800a794:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a798:	3b30      	subs	r3, #48	; 0x30
 800a79a:	2b09      	cmp	r3, #9
 800a79c:	d94e      	bls.n	800a83c <_vfiprintf_r+0x1c4>
 800a79e:	b1b0      	cbz	r0, 800a7ce <_vfiprintf_r+0x156>
 800a7a0:	9207      	str	r2, [sp, #28]
 800a7a2:	e014      	b.n	800a7ce <_vfiprintf_r+0x156>
 800a7a4:	eba0 0308 	sub.w	r3, r0, r8
 800a7a8:	fa09 f303 	lsl.w	r3, r9, r3
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	9304      	str	r3, [sp, #16]
 800a7b0:	46a2      	mov	sl, r4
 800a7b2:	e7d2      	b.n	800a75a <_vfiprintf_r+0xe2>
 800a7b4:	9b03      	ldr	r3, [sp, #12]
 800a7b6:	1d19      	adds	r1, r3, #4
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	9103      	str	r1, [sp, #12]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	bfbb      	ittet	lt
 800a7c0:	425b      	neglt	r3, r3
 800a7c2:	f042 0202 	orrlt.w	r2, r2, #2
 800a7c6:	9307      	strge	r3, [sp, #28]
 800a7c8:	9307      	strlt	r3, [sp, #28]
 800a7ca:	bfb8      	it	lt
 800a7cc:	9204      	strlt	r2, [sp, #16]
 800a7ce:	7823      	ldrb	r3, [r4, #0]
 800a7d0:	2b2e      	cmp	r3, #46	; 0x2e
 800a7d2:	d10c      	bne.n	800a7ee <_vfiprintf_r+0x176>
 800a7d4:	7863      	ldrb	r3, [r4, #1]
 800a7d6:	2b2a      	cmp	r3, #42	; 0x2a
 800a7d8:	d135      	bne.n	800a846 <_vfiprintf_r+0x1ce>
 800a7da:	9b03      	ldr	r3, [sp, #12]
 800a7dc:	1d1a      	adds	r2, r3, #4
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	9203      	str	r2, [sp, #12]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	bfb8      	it	lt
 800a7e6:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7ea:	3402      	adds	r4, #2
 800a7ec:	9305      	str	r3, [sp, #20]
 800a7ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a8d4 <_vfiprintf_r+0x25c>
 800a7f2:	7821      	ldrb	r1, [r4, #0]
 800a7f4:	2203      	movs	r2, #3
 800a7f6:	4650      	mov	r0, sl
 800a7f8:	f7f5 fd2a 	bl	8000250 <memchr>
 800a7fc:	b140      	cbz	r0, 800a810 <_vfiprintf_r+0x198>
 800a7fe:	2340      	movs	r3, #64	; 0x40
 800a800:	eba0 000a 	sub.w	r0, r0, sl
 800a804:	fa03 f000 	lsl.w	r0, r3, r0
 800a808:	9b04      	ldr	r3, [sp, #16]
 800a80a:	4303      	orrs	r3, r0
 800a80c:	3401      	adds	r4, #1
 800a80e:	9304      	str	r3, [sp, #16]
 800a810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a814:	482c      	ldr	r0, [pc, #176]	; (800a8c8 <_vfiprintf_r+0x250>)
 800a816:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a81a:	2206      	movs	r2, #6
 800a81c:	f7f5 fd18 	bl	8000250 <memchr>
 800a820:	2800      	cmp	r0, #0
 800a822:	d03f      	beq.n	800a8a4 <_vfiprintf_r+0x22c>
 800a824:	4b29      	ldr	r3, [pc, #164]	; (800a8cc <_vfiprintf_r+0x254>)
 800a826:	bb1b      	cbnz	r3, 800a870 <_vfiprintf_r+0x1f8>
 800a828:	9b03      	ldr	r3, [sp, #12]
 800a82a:	3307      	adds	r3, #7
 800a82c:	f023 0307 	bic.w	r3, r3, #7
 800a830:	3308      	adds	r3, #8
 800a832:	9303      	str	r3, [sp, #12]
 800a834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a836:	443b      	add	r3, r7
 800a838:	9309      	str	r3, [sp, #36]	; 0x24
 800a83a:	e767      	b.n	800a70c <_vfiprintf_r+0x94>
 800a83c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a840:	460c      	mov	r4, r1
 800a842:	2001      	movs	r0, #1
 800a844:	e7a5      	b.n	800a792 <_vfiprintf_r+0x11a>
 800a846:	2300      	movs	r3, #0
 800a848:	3401      	adds	r4, #1
 800a84a:	9305      	str	r3, [sp, #20]
 800a84c:	4619      	mov	r1, r3
 800a84e:	f04f 0c0a 	mov.w	ip, #10
 800a852:	4620      	mov	r0, r4
 800a854:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a858:	3a30      	subs	r2, #48	; 0x30
 800a85a:	2a09      	cmp	r2, #9
 800a85c:	d903      	bls.n	800a866 <_vfiprintf_r+0x1ee>
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d0c5      	beq.n	800a7ee <_vfiprintf_r+0x176>
 800a862:	9105      	str	r1, [sp, #20]
 800a864:	e7c3      	b.n	800a7ee <_vfiprintf_r+0x176>
 800a866:	fb0c 2101 	mla	r1, ip, r1, r2
 800a86a:	4604      	mov	r4, r0
 800a86c:	2301      	movs	r3, #1
 800a86e:	e7f0      	b.n	800a852 <_vfiprintf_r+0x1da>
 800a870:	ab03      	add	r3, sp, #12
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	462a      	mov	r2, r5
 800a876:	4b16      	ldr	r3, [pc, #88]	; (800a8d0 <_vfiprintf_r+0x258>)
 800a878:	a904      	add	r1, sp, #16
 800a87a:	4630      	mov	r0, r6
 800a87c:	f7fb fe78 	bl	8006570 <_printf_float>
 800a880:	4607      	mov	r7, r0
 800a882:	1c78      	adds	r0, r7, #1
 800a884:	d1d6      	bne.n	800a834 <_vfiprintf_r+0x1bc>
 800a886:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a888:	07d9      	lsls	r1, r3, #31
 800a88a:	d405      	bmi.n	800a898 <_vfiprintf_r+0x220>
 800a88c:	89ab      	ldrh	r3, [r5, #12]
 800a88e:	059a      	lsls	r2, r3, #22
 800a890:	d402      	bmi.n	800a898 <_vfiprintf_r+0x220>
 800a892:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a894:	f7fe ff66 	bl	8009764 <__retarget_lock_release_recursive>
 800a898:	89ab      	ldrh	r3, [r5, #12]
 800a89a:	065b      	lsls	r3, r3, #25
 800a89c:	f53f af12 	bmi.w	800a6c4 <_vfiprintf_r+0x4c>
 800a8a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8a2:	e711      	b.n	800a6c8 <_vfiprintf_r+0x50>
 800a8a4:	ab03      	add	r3, sp, #12
 800a8a6:	9300      	str	r3, [sp, #0]
 800a8a8:	462a      	mov	r2, r5
 800a8aa:	4b09      	ldr	r3, [pc, #36]	; (800a8d0 <_vfiprintf_r+0x258>)
 800a8ac:	a904      	add	r1, sp, #16
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	f7fc f8ea 	bl	8006a88 <_printf_i>
 800a8b4:	e7e4      	b.n	800a880 <_vfiprintf_r+0x208>
 800a8b6:	bf00      	nop
 800a8b8:	0800b398 	.word	0x0800b398
 800a8bc:	0800b3b8 	.word	0x0800b3b8
 800a8c0:	0800b378 	.word	0x0800b378
 800a8c4:	0800b5b4 	.word	0x0800b5b4
 800a8c8:	0800b5be 	.word	0x0800b5be
 800a8cc:	08006571 	.word	0x08006571
 800a8d0:	0800a653 	.word	0x0800a653
 800a8d4:	0800b5ba 	.word	0x0800b5ba

0800a8d8 <_putc_r>:
 800a8d8:	b570      	push	{r4, r5, r6, lr}
 800a8da:	460d      	mov	r5, r1
 800a8dc:	4614      	mov	r4, r2
 800a8de:	4606      	mov	r6, r0
 800a8e0:	b118      	cbz	r0, 800a8ea <_putc_r+0x12>
 800a8e2:	6983      	ldr	r3, [r0, #24]
 800a8e4:	b90b      	cbnz	r3, 800a8ea <_putc_r+0x12>
 800a8e6:	f7fe fb2b 	bl	8008f40 <__sinit>
 800a8ea:	4b1c      	ldr	r3, [pc, #112]	; (800a95c <_putc_r+0x84>)
 800a8ec:	429c      	cmp	r4, r3
 800a8ee:	d124      	bne.n	800a93a <_putc_r+0x62>
 800a8f0:	6874      	ldr	r4, [r6, #4]
 800a8f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8f4:	07d8      	lsls	r0, r3, #31
 800a8f6:	d405      	bmi.n	800a904 <_putc_r+0x2c>
 800a8f8:	89a3      	ldrh	r3, [r4, #12]
 800a8fa:	0599      	lsls	r1, r3, #22
 800a8fc:	d402      	bmi.n	800a904 <_putc_r+0x2c>
 800a8fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a900:	f7fe ff2f 	bl	8009762 <__retarget_lock_acquire_recursive>
 800a904:	68a3      	ldr	r3, [r4, #8]
 800a906:	3b01      	subs	r3, #1
 800a908:	2b00      	cmp	r3, #0
 800a90a:	60a3      	str	r3, [r4, #8]
 800a90c:	da05      	bge.n	800a91a <_putc_r+0x42>
 800a90e:	69a2      	ldr	r2, [r4, #24]
 800a910:	4293      	cmp	r3, r2
 800a912:	db1c      	blt.n	800a94e <_putc_r+0x76>
 800a914:	b2eb      	uxtb	r3, r5
 800a916:	2b0a      	cmp	r3, #10
 800a918:	d019      	beq.n	800a94e <_putc_r+0x76>
 800a91a:	6823      	ldr	r3, [r4, #0]
 800a91c:	1c5a      	adds	r2, r3, #1
 800a91e:	6022      	str	r2, [r4, #0]
 800a920:	701d      	strb	r5, [r3, #0]
 800a922:	b2ed      	uxtb	r5, r5
 800a924:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a926:	07da      	lsls	r2, r3, #31
 800a928:	d405      	bmi.n	800a936 <_putc_r+0x5e>
 800a92a:	89a3      	ldrh	r3, [r4, #12]
 800a92c:	059b      	lsls	r3, r3, #22
 800a92e:	d402      	bmi.n	800a936 <_putc_r+0x5e>
 800a930:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a932:	f7fe ff17 	bl	8009764 <__retarget_lock_release_recursive>
 800a936:	4628      	mov	r0, r5
 800a938:	bd70      	pop	{r4, r5, r6, pc}
 800a93a:	4b09      	ldr	r3, [pc, #36]	; (800a960 <_putc_r+0x88>)
 800a93c:	429c      	cmp	r4, r3
 800a93e:	d101      	bne.n	800a944 <_putc_r+0x6c>
 800a940:	68b4      	ldr	r4, [r6, #8]
 800a942:	e7d6      	b.n	800a8f2 <_putc_r+0x1a>
 800a944:	4b07      	ldr	r3, [pc, #28]	; (800a964 <_putc_r+0x8c>)
 800a946:	429c      	cmp	r4, r3
 800a948:	bf08      	it	eq
 800a94a:	68f4      	ldreq	r4, [r6, #12]
 800a94c:	e7d1      	b.n	800a8f2 <_putc_r+0x1a>
 800a94e:	4629      	mov	r1, r5
 800a950:	4622      	mov	r2, r4
 800a952:	4630      	mov	r0, r6
 800a954:	f7fd fb0a 	bl	8007f6c <__swbuf_r>
 800a958:	4605      	mov	r5, r0
 800a95a:	e7e3      	b.n	800a924 <_putc_r+0x4c>
 800a95c:	0800b398 	.word	0x0800b398
 800a960:	0800b3b8 	.word	0x0800b3b8
 800a964:	0800b378 	.word	0x0800b378

0800a968 <nan>:
 800a968:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a970 <nan+0x8>
 800a96c:	4770      	bx	lr
 800a96e:	bf00      	nop
 800a970:	00000000 	.word	0x00000000
 800a974:	7ff80000 	.word	0x7ff80000

0800a978 <_sbrk_r>:
 800a978:	b538      	push	{r3, r4, r5, lr}
 800a97a:	4d06      	ldr	r5, [pc, #24]	; (800a994 <_sbrk_r+0x1c>)
 800a97c:	2300      	movs	r3, #0
 800a97e:	4604      	mov	r4, r0
 800a980:	4608      	mov	r0, r1
 800a982:	602b      	str	r3, [r5, #0]
 800a984:	f7f7 fcde 	bl	8002344 <_sbrk>
 800a988:	1c43      	adds	r3, r0, #1
 800a98a:	d102      	bne.n	800a992 <_sbrk_r+0x1a>
 800a98c:	682b      	ldr	r3, [r5, #0]
 800a98e:	b103      	cbz	r3, 800a992 <_sbrk_r+0x1a>
 800a990:	6023      	str	r3, [r4, #0]
 800a992:	bd38      	pop	{r3, r4, r5, pc}
 800a994:	20000650 	.word	0x20000650

0800a998 <__sread>:
 800a998:	b510      	push	{r4, lr}
 800a99a:	460c      	mov	r4, r1
 800a99c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9a0:	f000 f92e 	bl	800ac00 <_read_r>
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	bfab      	itete	ge
 800a9a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a9aa:	89a3      	ldrhlt	r3, [r4, #12]
 800a9ac:	181b      	addge	r3, r3, r0
 800a9ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a9b2:	bfac      	ite	ge
 800a9b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a9b6:	81a3      	strhlt	r3, [r4, #12]
 800a9b8:	bd10      	pop	{r4, pc}

0800a9ba <__swrite>:
 800a9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9be:	461f      	mov	r7, r3
 800a9c0:	898b      	ldrh	r3, [r1, #12]
 800a9c2:	05db      	lsls	r3, r3, #23
 800a9c4:	4605      	mov	r5, r0
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	4616      	mov	r6, r2
 800a9ca:	d505      	bpl.n	800a9d8 <__swrite+0x1e>
 800a9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9d0:	2302      	movs	r3, #2
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f000 f8b6 	bl	800ab44 <_lseek_r>
 800a9d8:	89a3      	ldrh	r3, [r4, #12]
 800a9da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9e2:	81a3      	strh	r3, [r4, #12]
 800a9e4:	4632      	mov	r2, r6
 800a9e6:	463b      	mov	r3, r7
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9ee:	f000 b835 	b.w	800aa5c <_write_r>

0800a9f2 <__sseek>:
 800a9f2:	b510      	push	{r4, lr}
 800a9f4:	460c      	mov	r4, r1
 800a9f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9fa:	f000 f8a3 	bl	800ab44 <_lseek_r>
 800a9fe:	1c43      	adds	r3, r0, #1
 800aa00:	89a3      	ldrh	r3, [r4, #12]
 800aa02:	bf15      	itete	ne
 800aa04:	6560      	strne	r0, [r4, #84]	; 0x54
 800aa06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800aa0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800aa0e:	81a3      	strheq	r3, [r4, #12]
 800aa10:	bf18      	it	ne
 800aa12:	81a3      	strhne	r3, [r4, #12]
 800aa14:	bd10      	pop	{r4, pc}

0800aa16 <__sclose>:
 800aa16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa1a:	f000 b84f 	b.w	800aabc <_close_r>

0800aa1e <strncmp>:
 800aa1e:	b510      	push	{r4, lr}
 800aa20:	b16a      	cbz	r2, 800aa3e <strncmp+0x20>
 800aa22:	3901      	subs	r1, #1
 800aa24:	1884      	adds	r4, r0, r2
 800aa26:	f810 3b01 	ldrb.w	r3, [r0], #1
 800aa2a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d103      	bne.n	800aa3a <strncmp+0x1c>
 800aa32:	42a0      	cmp	r0, r4
 800aa34:	d001      	beq.n	800aa3a <strncmp+0x1c>
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d1f5      	bne.n	800aa26 <strncmp+0x8>
 800aa3a:	1a98      	subs	r0, r3, r2
 800aa3c:	bd10      	pop	{r4, pc}
 800aa3e:	4610      	mov	r0, r2
 800aa40:	e7fc      	b.n	800aa3c <strncmp+0x1e>

0800aa42 <__ascii_wctomb>:
 800aa42:	b149      	cbz	r1, 800aa58 <__ascii_wctomb+0x16>
 800aa44:	2aff      	cmp	r2, #255	; 0xff
 800aa46:	bf85      	ittet	hi
 800aa48:	238a      	movhi	r3, #138	; 0x8a
 800aa4a:	6003      	strhi	r3, [r0, #0]
 800aa4c:	700a      	strbls	r2, [r1, #0]
 800aa4e:	f04f 30ff 	movhi.w	r0, #4294967295
 800aa52:	bf98      	it	ls
 800aa54:	2001      	movls	r0, #1
 800aa56:	4770      	bx	lr
 800aa58:	4608      	mov	r0, r1
 800aa5a:	4770      	bx	lr

0800aa5c <_write_r>:
 800aa5c:	b538      	push	{r3, r4, r5, lr}
 800aa5e:	4d07      	ldr	r5, [pc, #28]	; (800aa7c <_write_r+0x20>)
 800aa60:	4604      	mov	r4, r0
 800aa62:	4608      	mov	r0, r1
 800aa64:	4611      	mov	r1, r2
 800aa66:	2200      	movs	r2, #0
 800aa68:	602a      	str	r2, [r5, #0]
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	f7f7 fc19 	bl	80022a2 <_write>
 800aa70:	1c43      	adds	r3, r0, #1
 800aa72:	d102      	bne.n	800aa7a <_write_r+0x1e>
 800aa74:	682b      	ldr	r3, [r5, #0]
 800aa76:	b103      	cbz	r3, 800aa7a <_write_r+0x1e>
 800aa78:	6023      	str	r3, [r4, #0]
 800aa7a:	bd38      	pop	{r3, r4, r5, pc}
 800aa7c:	20000650 	.word	0x20000650

0800aa80 <__assert_func>:
 800aa80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aa82:	4614      	mov	r4, r2
 800aa84:	461a      	mov	r2, r3
 800aa86:	4b09      	ldr	r3, [pc, #36]	; (800aaac <__assert_func+0x2c>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	4605      	mov	r5, r0
 800aa8c:	68d8      	ldr	r0, [r3, #12]
 800aa8e:	b14c      	cbz	r4, 800aaa4 <__assert_func+0x24>
 800aa90:	4b07      	ldr	r3, [pc, #28]	; (800aab0 <__assert_func+0x30>)
 800aa92:	9100      	str	r1, [sp, #0]
 800aa94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aa98:	4906      	ldr	r1, [pc, #24]	; (800aab4 <__assert_func+0x34>)
 800aa9a:	462b      	mov	r3, r5
 800aa9c:	f000 f81e 	bl	800aadc <fiprintf>
 800aaa0:	f000 f8c0 	bl	800ac24 <abort>
 800aaa4:	4b04      	ldr	r3, [pc, #16]	; (800aab8 <__assert_func+0x38>)
 800aaa6:	461c      	mov	r4, r3
 800aaa8:	e7f3      	b.n	800aa92 <__assert_func+0x12>
 800aaaa:	bf00      	nop
 800aaac:	20000010 	.word	0x20000010
 800aab0:	0800b5c5 	.word	0x0800b5c5
 800aab4:	0800b5d2 	.word	0x0800b5d2
 800aab8:	0800b600 	.word	0x0800b600

0800aabc <_close_r>:
 800aabc:	b538      	push	{r3, r4, r5, lr}
 800aabe:	4d06      	ldr	r5, [pc, #24]	; (800aad8 <_close_r+0x1c>)
 800aac0:	2300      	movs	r3, #0
 800aac2:	4604      	mov	r4, r0
 800aac4:	4608      	mov	r0, r1
 800aac6:	602b      	str	r3, [r5, #0]
 800aac8:	f7f7 fc07 	bl	80022da <_close>
 800aacc:	1c43      	adds	r3, r0, #1
 800aace:	d102      	bne.n	800aad6 <_close_r+0x1a>
 800aad0:	682b      	ldr	r3, [r5, #0]
 800aad2:	b103      	cbz	r3, 800aad6 <_close_r+0x1a>
 800aad4:	6023      	str	r3, [r4, #0]
 800aad6:	bd38      	pop	{r3, r4, r5, pc}
 800aad8:	20000650 	.word	0x20000650

0800aadc <fiprintf>:
 800aadc:	b40e      	push	{r1, r2, r3}
 800aade:	b503      	push	{r0, r1, lr}
 800aae0:	4601      	mov	r1, r0
 800aae2:	ab03      	add	r3, sp, #12
 800aae4:	4805      	ldr	r0, [pc, #20]	; (800aafc <fiprintf+0x20>)
 800aae6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaea:	6800      	ldr	r0, [r0, #0]
 800aaec:	9301      	str	r3, [sp, #4]
 800aaee:	f7ff fdc3 	bl	800a678 <_vfiprintf_r>
 800aaf2:	b002      	add	sp, #8
 800aaf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aaf8:	b003      	add	sp, #12
 800aafa:	4770      	bx	lr
 800aafc:	20000010 	.word	0x20000010

0800ab00 <_fstat_r>:
 800ab00:	b538      	push	{r3, r4, r5, lr}
 800ab02:	4d07      	ldr	r5, [pc, #28]	; (800ab20 <_fstat_r+0x20>)
 800ab04:	2300      	movs	r3, #0
 800ab06:	4604      	mov	r4, r0
 800ab08:	4608      	mov	r0, r1
 800ab0a:	4611      	mov	r1, r2
 800ab0c:	602b      	str	r3, [r5, #0]
 800ab0e:	f7f7 fbf0 	bl	80022f2 <_fstat>
 800ab12:	1c43      	adds	r3, r0, #1
 800ab14:	d102      	bne.n	800ab1c <_fstat_r+0x1c>
 800ab16:	682b      	ldr	r3, [r5, #0]
 800ab18:	b103      	cbz	r3, 800ab1c <_fstat_r+0x1c>
 800ab1a:	6023      	str	r3, [r4, #0]
 800ab1c:	bd38      	pop	{r3, r4, r5, pc}
 800ab1e:	bf00      	nop
 800ab20:	20000650 	.word	0x20000650

0800ab24 <_isatty_r>:
 800ab24:	b538      	push	{r3, r4, r5, lr}
 800ab26:	4d06      	ldr	r5, [pc, #24]	; (800ab40 <_isatty_r+0x1c>)
 800ab28:	2300      	movs	r3, #0
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	4608      	mov	r0, r1
 800ab2e:	602b      	str	r3, [r5, #0]
 800ab30:	f7f7 fbef 	bl	8002312 <_isatty>
 800ab34:	1c43      	adds	r3, r0, #1
 800ab36:	d102      	bne.n	800ab3e <_isatty_r+0x1a>
 800ab38:	682b      	ldr	r3, [r5, #0]
 800ab3a:	b103      	cbz	r3, 800ab3e <_isatty_r+0x1a>
 800ab3c:	6023      	str	r3, [r4, #0]
 800ab3e:	bd38      	pop	{r3, r4, r5, pc}
 800ab40:	20000650 	.word	0x20000650

0800ab44 <_lseek_r>:
 800ab44:	b538      	push	{r3, r4, r5, lr}
 800ab46:	4d07      	ldr	r5, [pc, #28]	; (800ab64 <_lseek_r+0x20>)
 800ab48:	4604      	mov	r4, r0
 800ab4a:	4608      	mov	r0, r1
 800ab4c:	4611      	mov	r1, r2
 800ab4e:	2200      	movs	r2, #0
 800ab50:	602a      	str	r2, [r5, #0]
 800ab52:	461a      	mov	r2, r3
 800ab54:	f7f7 fbe8 	bl	8002328 <_lseek>
 800ab58:	1c43      	adds	r3, r0, #1
 800ab5a:	d102      	bne.n	800ab62 <_lseek_r+0x1e>
 800ab5c:	682b      	ldr	r3, [r5, #0]
 800ab5e:	b103      	cbz	r3, 800ab62 <_lseek_r+0x1e>
 800ab60:	6023      	str	r3, [r4, #0]
 800ab62:	bd38      	pop	{r3, r4, r5, pc}
 800ab64:	20000650 	.word	0x20000650

0800ab68 <memmove>:
 800ab68:	4288      	cmp	r0, r1
 800ab6a:	b510      	push	{r4, lr}
 800ab6c:	eb01 0402 	add.w	r4, r1, r2
 800ab70:	d902      	bls.n	800ab78 <memmove+0x10>
 800ab72:	4284      	cmp	r4, r0
 800ab74:	4623      	mov	r3, r4
 800ab76:	d807      	bhi.n	800ab88 <memmove+0x20>
 800ab78:	1e43      	subs	r3, r0, #1
 800ab7a:	42a1      	cmp	r1, r4
 800ab7c:	d008      	beq.n	800ab90 <memmove+0x28>
 800ab7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ab82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ab86:	e7f8      	b.n	800ab7a <memmove+0x12>
 800ab88:	4402      	add	r2, r0
 800ab8a:	4601      	mov	r1, r0
 800ab8c:	428a      	cmp	r2, r1
 800ab8e:	d100      	bne.n	800ab92 <memmove+0x2a>
 800ab90:	bd10      	pop	{r4, pc}
 800ab92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ab9a:	e7f7      	b.n	800ab8c <memmove+0x24>

0800ab9c <__malloc_lock>:
 800ab9c:	4801      	ldr	r0, [pc, #4]	; (800aba4 <__malloc_lock+0x8>)
 800ab9e:	f7fe bde0 	b.w	8009762 <__retarget_lock_acquire_recursive>
 800aba2:	bf00      	nop
 800aba4:	20000648 	.word	0x20000648

0800aba8 <__malloc_unlock>:
 800aba8:	4801      	ldr	r0, [pc, #4]	; (800abb0 <__malloc_unlock+0x8>)
 800abaa:	f7fe bddb 	b.w	8009764 <__retarget_lock_release_recursive>
 800abae:	bf00      	nop
 800abb0:	20000648 	.word	0x20000648

0800abb4 <_realloc_r>:
 800abb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb6:	4607      	mov	r7, r0
 800abb8:	4614      	mov	r4, r2
 800abba:	460e      	mov	r6, r1
 800abbc:	b921      	cbnz	r1, 800abc8 <_realloc_r+0x14>
 800abbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800abc2:	4611      	mov	r1, r2
 800abc4:	f7ff bb78 	b.w	800a2b8 <_malloc_r>
 800abc8:	b922      	cbnz	r2, 800abd4 <_realloc_r+0x20>
 800abca:	f7ff fb25 	bl	800a218 <_free_r>
 800abce:	4625      	mov	r5, r4
 800abd0:	4628      	mov	r0, r5
 800abd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abd4:	f000 f82d 	bl	800ac32 <_malloc_usable_size_r>
 800abd8:	42a0      	cmp	r0, r4
 800abda:	d20f      	bcs.n	800abfc <_realloc_r+0x48>
 800abdc:	4621      	mov	r1, r4
 800abde:	4638      	mov	r0, r7
 800abe0:	f7ff fb6a 	bl	800a2b8 <_malloc_r>
 800abe4:	4605      	mov	r5, r0
 800abe6:	2800      	cmp	r0, #0
 800abe8:	d0f2      	beq.n	800abd0 <_realloc_r+0x1c>
 800abea:	4631      	mov	r1, r6
 800abec:	4622      	mov	r2, r4
 800abee:	f7fe fe39 	bl	8009864 <memcpy>
 800abf2:	4631      	mov	r1, r6
 800abf4:	4638      	mov	r0, r7
 800abf6:	f7ff fb0f 	bl	800a218 <_free_r>
 800abfa:	e7e9      	b.n	800abd0 <_realloc_r+0x1c>
 800abfc:	4635      	mov	r5, r6
 800abfe:	e7e7      	b.n	800abd0 <_realloc_r+0x1c>

0800ac00 <_read_r>:
 800ac00:	b538      	push	{r3, r4, r5, lr}
 800ac02:	4d07      	ldr	r5, [pc, #28]	; (800ac20 <_read_r+0x20>)
 800ac04:	4604      	mov	r4, r0
 800ac06:	4608      	mov	r0, r1
 800ac08:	4611      	mov	r1, r2
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	602a      	str	r2, [r5, #0]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	f7f7 fb2a 	bl	8002268 <_read>
 800ac14:	1c43      	adds	r3, r0, #1
 800ac16:	d102      	bne.n	800ac1e <_read_r+0x1e>
 800ac18:	682b      	ldr	r3, [r5, #0]
 800ac1a:	b103      	cbz	r3, 800ac1e <_read_r+0x1e>
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	bd38      	pop	{r3, r4, r5, pc}
 800ac20:	20000650 	.word	0x20000650

0800ac24 <abort>:
 800ac24:	b508      	push	{r3, lr}
 800ac26:	2006      	movs	r0, #6
 800ac28:	f000 f834 	bl	800ac94 <raise>
 800ac2c:	2001      	movs	r0, #1
 800ac2e:	f7f7 fb11 	bl	8002254 <_exit>

0800ac32 <_malloc_usable_size_r>:
 800ac32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac36:	1f18      	subs	r0, r3, #4
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	bfbc      	itt	lt
 800ac3c:	580b      	ldrlt	r3, [r1, r0]
 800ac3e:	18c0      	addlt	r0, r0, r3
 800ac40:	4770      	bx	lr

0800ac42 <_raise_r>:
 800ac42:	291f      	cmp	r1, #31
 800ac44:	b538      	push	{r3, r4, r5, lr}
 800ac46:	4604      	mov	r4, r0
 800ac48:	460d      	mov	r5, r1
 800ac4a:	d904      	bls.n	800ac56 <_raise_r+0x14>
 800ac4c:	2316      	movs	r3, #22
 800ac4e:	6003      	str	r3, [r0, #0]
 800ac50:	f04f 30ff 	mov.w	r0, #4294967295
 800ac54:	bd38      	pop	{r3, r4, r5, pc}
 800ac56:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ac58:	b112      	cbz	r2, 800ac60 <_raise_r+0x1e>
 800ac5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ac5e:	b94b      	cbnz	r3, 800ac74 <_raise_r+0x32>
 800ac60:	4620      	mov	r0, r4
 800ac62:	f000 f831 	bl	800acc8 <_getpid_r>
 800ac66:	462a      	mov	r2, r5
 800ac68:	4601      	mov	r1, r0
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac70:	f000 b818 	b.w	800aca4 <_kill_r>
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d00a      	beq.n	800ac8e <_raise_r+0x4c>
 800ac78:	1c59      	adds	r1, r3, #1
 800ac7a:	d103      	bne.n	800ac84 <_raise_r+0x42>
 800ac7c:	2316      	movs	r3, #22
 800ac7e:	6003      	str	r3, [r0, #0]
 800ac80:	2001      	movs	r0, #1
 800ac82:	e7e7      	b.n	800ac54 <_raise_r+0x12>
 800ac84:	2400      	movs	r4, #0
 800ac86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	4798      	blx	r3
 800ac8e:	2000      	movs	r0, #0
 800ac90:	e7e0      	b.n	800ac54 <_raise_r+0x12>
	...

0800ac94 <raise>:
 800ac94:	4b02      	ldr	r3, [pc, #8]	; (800aca0 <raise+0xc>)
 800ac96:	4601      	mov	r1, r0
 800ac98:	6818      	ldr	r0, [r3, #0]
 800ac9a:	f7ff bfd2 	b.w	800ac42 <_raise_r>
 800ac9e:	bf00      	nop
 800aca0:	20000010 	.word	0x20000010

0800aca4 <_kill_r>:
 800aca4:	b538      	push	{r3, r4, r5, lr}
 800aca6:	4d07      	ldr	r5, [pc, #28]	; (800acc4 <_kill_r+0x20>)
 800aca8:	2300      	movs	r3, #0
 800acaa:	4604      	mov	r4, r0
 800acac:	4608      	mov	r0, r1
 800acae:	4611      	mov	r1, r2
 800acb0:	602b      	str	r3, [r5, #0]
 800acb2:	f7f7 fabf 	bl	8002234 <_kill>
 800acb6:	1c43      	adds	r3, r0, #1
 800acb8:	d102      	bne.n	800acc0 <_kill_r+0x1c>
 800acba:	682b      	ldr	r3, [r5, #0]
 800acbc:	b103      	cbz	r3, 800acc0 <_kill_r+0x1c>
 800acbe:	6023      	str	r3, [r4, #0]
 800acc0:	bd38      	pop	{r3, r4, r5, pc}
 800acc2:	bf00      	nop
 800acc4:	20000650 	.word	0x20000650

0800acc8 <_getpid_r>:
 800acc8:	f7f7 baac 	b.w	8002224 <_getpid>

0800accc <_init>:
 800accc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acce:	bf00      	nop
 800acd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acd2:	bc08      	pop	{r3}
 800acd4:	469e      	mov	lr, r3
 800acd6:	4770      	bx	lr

0800acd8 <_fini>:
 800acd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acda:	bf00      	nop
 800acdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acde:	bc08      	pop	{r3}
 800ace0:	469e      	mov	lr, r3
 800ace2:	4770      	bx	lr
