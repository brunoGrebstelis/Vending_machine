
Vending_machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a844  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000894  0800aa48  0800aa48  0001aa48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2dc  0800b2dc  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b2dc  0800b2dc  0001b2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b2e4  0800b2e4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2e4  0800b2e4  0001b2e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2e8  0800b2e8  0001b2e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800b2ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000338  200001e8  0800b4d4  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000520  0800b4d4  00020520  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015462  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b3  00000000  00000000  00035678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00038030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d58  00000000  00000000  00038e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028d9c  00000000  00000000  00039be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b3c  00000000  00000000  00062984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6521  00000000  00000000  000754c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016b9e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fd4  00000000  00000000  0016ba34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e8 	.word	0x200001e8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800aa2c 	.word	0x0800aa2c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ec 	.word	0x200001ec
 800023c:	0800aa2c 	.word	0x0800aa2c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <HAL_SPI_RxCpltCallback>:
/* USER CODE END 0 */

/* USER CODE BEGIN 1 */

// SPI receive complete callback
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a07      	ldr	r2, [pc, #28]	; (80009fc <HAL_SPI_RxCpltCallback+0x2c>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d108      	bne.n	80009f4 <HAL_SPI_RxCpltCallback+0x24>
        Process_SPI_Command(spi_rx_buffer, SPI_BUFFER_SIZE);
 80009e2:	2106      	movs	r1, #6
 80009e4:	4806      	ldr	r0, [pc, #24]	; (8000a00 <HAL_SPI_RxCpltCallback+0x30>)
 80009e6:	f000 f80f 	bl	8000a08 <Process_SPI_Command>
        HAL_SPI_Receive_IT(&hspi1, spi_rx_buffer, SPI_BUFFER_SIZE);
 80009ea:	2206      	movs	r2, #6
 80009ec:	4904      	ldr	r1, [pc, #16]	; (8000a00 <HAL_SPI_RxCpltCallback+0x30>)
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <HAL_SPI_RxCpltCallback+0x34>)
 80009f0:	f003 ff8e 	bl	8004910 <HAL_SPI_Receive_IT>
    }
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40013000 	.word	0x40013000
 8000a00:	20000414 	.word	0x20000414
 8000a04:	20000424 	.word	0x20000424

08000a08 <Process_SPI_Command>:

// Function to handle received SPI data
void Process_SPI_Command(uint8_t *data, uint16_t size) {
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b089      	sub	sp, #36	; 0x24
 8000a0c:	af02      	add	r7, sp, #8
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	460b      	mov	r3, r1
 8000a12:	807b      	strh	r3, [r7, #2]
    // Debug: Print received data over UART
    printf("SPI Data Received: ");
 8000a14:	4860      	ldr	r0, [pc, #384]	; (8000b98 <Process_SPI_Command+0x190>)
 8000a16:	f006 fa11 	bl	8006e3c <iprintf>
    for (uint16_t i = 0; i < size; i++) {
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	82fb      	strh	r3, [r7, #22]
 8000a1e:	e00a      	b.n	8000a36 <Process_SPI_Command+0x2e>
        printf("0x%02X ", data[i]);
 8000a20:	8afb      	ldrh	r3, [r7, #22]
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	485c      	ldr	r0, [pc, #368]	; (8000b9c <Process_SPI_Command+0x194>)
 8000a2c:	f006 fa06 	bl	8006e3c <iprintf>
    for (uint16_t i = 0; i < size; i++) {
 8000a30:	8afb      	ldrh	r3, [r7, #22]
 8000a32:	3301      	adds	r3, #1
 8000a34:	82fb      	strh	r3, [r7, #22]
 8000a36:	8afa      	ldrh	r2, [r7, #22]
 8000a38:	887b      	ldrh	r3, [r7, #2]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d3f0      	bcc.n	8000a20 <Process_SPI_Command+0x18>
    }
    printf("\r\n");
 8000a3e:	4858      	ldr	r0, [pc, #352]	; (8000ba0 <Process_SPI_Command+0x198>)
 8000a40:	f006 fa98 	bl	8006f74 <puts>

    // Example: Handle LED color command (0x01)
    if (data[0] == 0x01) {
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d158      	bne.n	8000afe <Process_SPI_Command+0xf6>
        uint8_t locker_id = data[1];
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	785b      	ldrb	r3, [r3, #1]
 8000a50:	73fb      	strb	r3, [r7, #15]
        red = data[2];
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	789a      	ldrb	r2, [r3, #2]
 8000a56:	4b53      	ldr	r3, [pc, #332]	; (8000ba4 <Process_SPI_Command+0x19c>)
 8000a58:	701a      	strb	r2, [r3, #0]
        green = data[3];
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	78da      	ldrb	r2, [r3, #3]
 8000a5e:	4b52      	ldr	r3, [pc, #328]	; (8000ba8 <Process_SPI_Command+0x1a0>)
 8000a60:	701a      	strb	r2, [r3, #0]
        blue = data[4];
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	791a      	ldrb	r2, [r3, #4]
 8000a66:	4b51      	ldr	r3, [pc, #324]	; (8000bac <Process_SPI_Command+0x1a4>)
 8000a68:	701a      	strb	r2, [r3, #0]
        mode = data[5];  // single space around '='
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	795a      	ldrb	r2, [r3, #5]
 8000a6e:	4b50      	ldr	r3, [pc, #320]	; (8000bb0 <Process_SPI_Command+0x1a8>)
 8000a70:	701a      	strb	r2, [r3, #0]

        if(locker_id == 255) {
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
 8000a74:	2bff      	cmp	r3, #255	; 0xff
 8000a76:	d124      	bne.n	8000ac2 <Process_SPI_Command+0xba>
            printf("Set all LED to Color: R=%d, G=%d, B=%d\r\n", red, green, blue);
 8000a78:	4b4a      	ldr	r3, [pc, #296]	; (8000ba4 <Process_SPI_Command+0x19c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4b4a      	ldr	r3, [pc, #296]	; (8000ba8 <Process_SPI_Command+0x1a0>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	461a      	mov	r2, r3
 8000a84:	4b49      	ldr	r3, [pc, #292]	; (8000bac <Process_SPI_Command+0x1a4>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	484a      	ldr	r0, [pc, #296]	; (8000bb4 <Process_SPI_Command+0x1ac>)
 8000a8a:	f006 f9d7 	bl	8006e3c <iprintf>
            for(int i = 1; i <= 14; i++) {
 8000a8e:	2301      	movs	r3, #1
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	e012      	b.n	8000aba <Process_SPI_Command+0xb2>
                Send_RGB(i + 100, red, green, blue, mode);
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	3364      	adds	r3, #100	; 0x64
 8000a9a:	b298      	uxth	r0, r3
 8000a9c:	4b41      	ldr	r3, [pc, #260]	; (8000ba4 <Process_SPI_Command+0x19c>)
 8000a9e:	7819      	ldrb	r1, [r3, #0]
 8000aa0:	4b41      	ldr	r3, [pc, #260]	; (8000ba8 <Process_SPI_Command+0x1a0>)
 8000aa2:	781a      	ldrb	r2, [r3, #0]
 8000aa4:	4b41      	ldr	r3, [pc, #260]	; (8000bac <Process_SPI_Command+0x1a4>)
 8000aa6:	781c      	ldrb	r4, [r3, #0]
 8000aa8:	4b41      	ldr	r3, [pc, #260]	; (8000bb0 <Process_SPI_Command+0x1a8>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	4623      	mov	r3, r4
 8000ab0:	f000 f88c 	bl	8000bcc <Send_RGB>
            for(int i = 1; i <= 14; i++) {
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	2b0e      	cmp	r3, #14
 8000abe:	dde9      	ble.n	8000a94 <Process_SPI_Command+0x8c>
 8000ac0:	e01d      	b.n	8000afe <Process_SPI_Command+0xf6>
            }
        } else {
            Send_RGB(locker_id + 100, red, green, blue, mode);
 8000ac2:	7bfb      	ldrb	r3, [r7, #15]
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	3364      	adds	r3, #100	; 0x64
 8000ac8:	b298      	uxth	r0, r3
 8000aca:	4b36      	ldr	r3, [pc, #216]	; (8000ba4 <Process_SPI_Command+0x19c>)
 8000acc:	7819      	ldrb	r1, [r3, #0]
 8000ace:	4b36      	ldr	r3, [pc, #216]	; (8000ba8 <Process_SPI_Command+0x1a0>)
 8000ad0:	781a      	ldrb	r2, [r3, #0]
 8000ad2:	4b36      	ldr	r3, [pc, #216]	; (8000bac <Process_SPI_Command+0x1a4>)
 8000ad4:	781c      	ldrb	r4, [r3, #0]
 8000ad6:	4b36      	ldr	r3, [pc, #216]	; (8000bb0 <Process_SPI_Command+0x1a8>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	9300      	str	r3, [sp, #0]
 8000adc:	4623      	mov	r3, r4
 8000ade:	f000 f875 	bl	8000bcc <Send_RGB>
            printf("Set LED Color: Locker %d, R=%d, G=%d, B=%d\r\n", locker_id, red, green, blue);
 8000ae2:	7bf9      	ldrb	r1, [r7, #15]
 8000ae4:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <Process_SPI_Command+0x19c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b2f      	ldr	r3, [pc, #188]	; (8000ba8 <Process_SPI_Command+0x1a0>)
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	4b2e      	ldr	r3, [pc, #184]	; (8000bac <Process_SPI_Command+0x1a4>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	9300      	str	r3, [sp, #0]
 8000af6:	4603      	mov	r3, r0
 8000af8:	482f      	ldr	r0, [pc, #188]	; (8000bb8 <Process_SPI_Command+0x1b0>)
 8000afa:	f006 f99f 	bl	8006e3c <iprintf>
        }
    }

    // Example: Handle price command (0x02)
    if (data[0] == 0x02) {
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d11f      	bne.n	8000b46 <Process_SPI_Command+0x13e>
        uint8_t locker_id = data[1];
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	785b      	ldrb	r3, [r3, #1]
 8000b0a:	73bb      	strb	r3, [r7, #14]
        uint16_t price = (data[2] << 8) | data[3];
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	3302      	adds	r3, #2
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	021b      	lsls	r3, r3, #8
 8000b14:	b21a      	sxth	r2, r3
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	3303      	adds	r3, #3
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b21b      	sxth	r3, r3
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	b21b      	sxth	r3, r3
 8000b22:	81bb      	strh	r3, [r7, #12]
        printf("Set Price: Locker %d, Price=%d euro\r\n", locker_id, price);
 8000b24:	7bbb      	ldrb	r3, [r7, #14]
 8000b26:	89ba      	ldrh	r2, [r7, #12]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	4824      	ldr	r0, [pc, #144]	; (8000bbc <Process_SPI_Command+0x1b4>)
 8000b2c:	f006 f986 	bl	8006e3c <iprintf>
        Send_Price(locker_id, data[2], data[3]);
 8000b30:	7bbb      	ldrb	r3, [r7, #14]
 8000b32:	b298      	uxth	r0, r3
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3302      	adds	r3, #2
 8000b38:	7819      	ldrb	r1, [r3, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	3303      	adds	r3, #3
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	f000 f86d 	bl	8000c20 <Send_Price>
    }

    // Example: Handle unlock command (0x03)
    if (data[0] == 0x03) {
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	2b03      	cmp	r3, #3
 8000b4c:	d116      	bne.n	8000b7c <Process_SPI_Command+0x174>
        uint8_t locker_id = data[1];
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	785b      	ldrb	r3, [r3, #1]
 8000b52:	72fb      	strb	r3, [r7, #11]
        printf("Unlock: Locker %d\r\n", locker_id);
 8000b54:	7afb      	ldrb	r3, [r7, #11]
 8000b56:	4619      	mov	r1, r3
 8000b58:	4819      	ldr	r0, [pc, #100]	; (8000bc0 <Process_SPI_Command+0x1b8>)
 8000b5a:	f006 f96f 	bl	8006e3c <iprintf>
        open_cabinet(locker_id);
 8000b5e:	7afb      	ldrb	r3, [r7, #11]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 f8d3 	bl	8000d0c <open_cabinet>
        Send_RGB(locker_id + 100, 0, 0, 0, 0);
 8000b66:	7afb      	ldrb	r3, [r7, #11]
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	3364      	adds	r3, #100	; 0x64
 8000b6c:	b298      	uxth	r0, r3
 8000b6e:	2300      	movs	r3, #0
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	2300      	movs	r3, #0
 8000b74:	2200      	movs	r2, #0
 8000b76:	2100      	movs	r1, #0
 8000b78:	f000 f828 	bl	8000bcc <Send_RGB>
    }

    // Example: Echo command (0xFF)
    if (data[0] == 0xFF) {
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2bff      	cmp	r3, #255	; 0xff
 8000b82:	d105      	bne.n	8000b90 <Process_SPI_Command+0x188>
        HAL_SPI_Transmit(&hspi1, spi_tx_buffer, SPI_BUFFER_SIZE, 100);
 8000b84:	2364      	movs	r3, #100	; 0x64
 8000b86:	2206      	movs	r2, #6
 8000b88:	490e      	ldr	r1, [pc, #56]	; (8000bc4 <Process_SPI_Command+0x1bc>)
 8000b8a:	480f      	ldr	r0, [pc, #60]	; (8000bc8 <Process_SPI_Command+0x1c0>)
 8000b8c:	f003 fd51 	bl	8004632 <HAL_SPI_Transmit>
    }
}
 8000b90:	bf00      	nop
 8000b92:	371c      	adds	r7, #28
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd90      	pop	{r4, r7, pc}
 8000b98:	0800aa48 	.word	0x0800aa48
 8000b9c:	0800aa5c 	.word	0x0800aa5c
 8000ba0:	0800aa64 	.word	0x0800aa64
 8000ba4:	20000001 	.word	0x20000001
 8000ba8:	20000002 	.word	0x20000002
 8000bac:	20000003 	.word	0x20000003
 8000bb0:	20000004 	.word	0x20000004
 8000bb4:	0800aa68 	.word	0x0800aa68
 8000bb8:	0800aa94 	.word	0x0800aa94
 8000bbc:	0800aac4 	.word	0x0800aac4
 8000bc0:	0800aaec 	.word	0x0800aaec
 8000bc4:	2000041c 	.word	0x2000041c
 8000bc8:	20000424 	.word	0x20000424

08000bcc <Send_RGB>:
        // Could handle error here
    }
}

// Send RGB data over I2C
void Send_RGB(uint16_t address, uint8_t red, uint8_t green, uint8_t blue, uint8_t mode) {
 8000bcc:	b590      	push	{r4, r7, lr}
 8000bce:	b087      	sub	sp, #28
 8000bd0:	af02      	add	r7, sp, #8
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	4608      	mov	r0, r1
 8000bd6:	4611      	mov	r1, r2
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4623      	mov	r3, r4
 8000bdc:	80fb      	strh	r3, [r7, #6]
 8000bde:	4603      	mov	r3, r0
 8000be0:	717b      	strb	r3, [r7, #5]
 8000be2:	460b      	mov	r3, r1
 8000be4:	713b      	strb	r3, [r7, #4]
 8000be6:	4613      	mov	r3, r2
 8000be8:	70fb      	strb	r3, [r7, #3]
    uint8_t RGB_Buffer[4];
    RGB_Buffer[0] = red;
 8000bea:	797b      	ldrb	r3, [r7, #5]
 8000bec:	733b      	strb	r3, [r7, #12]
    RGB_Buffer[1] = green;
 8000bee:	793b      	ldrb	r3, [r7, #4]
 8000bf0:	737b      	strb	r3, [r7, #13]
    RGB_Buffer[2] = blue;
 8000bf2:	78fb      	ldrb	r3, [r7, #3]
 8000bf4:	73bb      	strb	r3, [r7, #14]
    RGB_Buffer[3] = mode;
 8000bf6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bfa:	73fb      	strb	r3, [r7, #15]

    // Transmit RGB values to the slave
    if (HAL_I2C_Master_Transmit(&hi2c1, (address << 1), RGB_Buffer, 4, HAL_MAX_DELAY) != HAL_OK) {
 8000bfc:	88fb      	ldrh	r3, [r7, #6]
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	b299      	uxth	r1, r3
 8000c02:	f107 020c 	add.w	r2, r7, #12
 8000c06:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0a:	9300      	str	r3, [sp, #0]
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	4803      	ldr	r0, [pc, #12]	; (8000c1c <Send_RGB+0x50>)
 8000c10:	f001 feae 	bl	8002970 <HAL_I2C_Master_Transmit>
        //errorState = STATE_LED_DRIVER;
        //error_locker = address - 100;
        //error_flag = true;
    }
}
 8000c14:	bf00      	nop
 8000c16:	3714      	adds	r7, #20
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd90      	pop	{r4, r7, pc}
 8000c1c:	2000037c 	.word	0x2000037c

08000c20 <Send_Price>:

// Send price values to the slave
void Send_Price(uint16_t address, uint8_t byte1, uint8_t byte2) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af02      	add	r7, sp, #8
 8000c26:	4603      	mov	r3, r0
 8000c28:	80fb      	strh	r3, [r7, #6]
 8000c2a:	460b      	mov	r3, r1
 8000c2c:	717b      	strb	r3, [r7, #5]
 8000c2e:	4613      	mov	r3, r2
 8000c30:	713b      	strb	r3, [r7, #4]
    uint8_t Price_Buffer[2];
    Price_Buffer[0] = byte1;
 8000c32:	797b      	ldrb	r3, [r7, #5]
 8000c34:	733b      	strb	r3, [r7, #12]
    Price_Buffer[1] = byte2;
 8000c36:	793b      	ldrb	r3, [r7, #4]
 8000c38:	737b      	strb	r3, [r7, #13]

    // Transmit price values to the slave
    if (HAL_I2C_Master_Transmit(&hi2c1, (address << 1), Price_Buffer, 2, HAL_MAX_DELAY) != HAL_OK) {
 8000c3a:	88fb      	ldrh	r3, [r7, #6]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	b299      	uxth	r1, r3
 8000c40:	f107 020c 	add.w	r2, r7, #12
 8000c44:	f04f 33ff 	mov.w	r3, #4294967295
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <Send_Price+0x3c>)
 8000c4e:	f001 fe8f 	bl	8002970 <HAL_I2C_Master_Transmit>
        //errorState = STATE_PRICE_TAG;
        //error_locker = address;
        //error_flag = true;
    }
}
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	2000037c 	.word	0x2000037c

08000c60 <SPI_SendMessage>:




// Send a message over SPI to the master
void SPI_SendMessage(uint8_t command, uint8_t locker_id, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4) {
 8000c60:	b590      	push	{r4, r7, lr}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4604      	mov	r4, r0
 8000c68:	4608      	mov	r0, r1
 8000c6a:	4611      	mov	r1, r2
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4623      	mov	r3, r4
 8000c70:	71fb      	strb	r3, [r7, #7]
 8000c72:	4603      	mov	r3, r0
 8000c74:	71bb      	strb	r3, [r7, #6]
 8000c76:	460b      	mov	r3, r1
 8000c78:	717b      	strb	r3, [r7, #5]
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	713b      	strb	r3, [r7, #4]
    spi_tx_buffer[0] = command;
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <SPI_SendMessage+0x68>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	7013      	strb	r3, [r2, #0]
    spi_tx_buffer[1] = locker_id;
 8000c84:	4a10      	ldr	r2, [pc, #64]	; (8000cc8 <SPI_SendMessage+0x68>)
 8000c86:	79bb      	ldrb	r3, [r7, #6]
 8000c88:	7053      	strb	r3, [r2, #1]
    spi_tx_buffer[2] = data1;
 8000c8a:	4a0f      	ldr	r2, [pc, #60]	; (8000cc8 <SPI_SendMessage+0x68>)
 8000c8c:	797b      	ldrb	r3, [r7, #5]
 8000c8e:	7093      	strb	r3, [r2, #2]
    spi_tx_buffer[3] = data2;
 8000c90:	4a0d      	ldr	r2, [pc, #52]	; (8000cc8 <SPI_SendMessage+0x68>)
 8000c92:	793b      	ldrb	r3, [r7, #4]
 8000c94:	70d3      	strb	r3, [r2, #3]
    spi_tx_buffer[4] = data3;
 8000c96:	4a0c      	ldr	r2, [pc, #48]	; (8000cc8 <SPI_SendMessage+0x68>)
 8000c98:	7e3b      	ldrb	r3, [r7, #24]
 8000c9a:	7113      	strb	r3, [r2, #4]
    spi_tx_buffer[5] = data4;
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <SPI_SendMessage+0x68>)
 8000c9e:	7f3b      	ldrb	r3, [r7, #28]
 8000ca0:	7153      	strb	r3, [r2, #5]

    // Trigger the interrupt pin (PG10) to signal the Raspberry Pi
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca8:	4808      	ldr	r0, [pc, #32]	; (8000ccc <SPI_SendMessage+0x6c>)
 8000caa:	f001 fdb7 	bl	800281c <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8000cae:	2064      	movs	r0, #100	; 0x64
 8000cb0:	f001 fab0 	bl	8002214 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cba:	4804      	ldr	r0, [pc, #16]	; (8000ccc <SPI_SendMessage+0x6c>)
 8000cbc:	f001 fdae 	bl	800281c <HAL_GPIO_WritePin>
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd90      	pop	{r4, r7, pc}
 8000cc8:	2000041c 	.word	0x2000041c
 8000ccc:	40021800 	.word	0x40021800

08000cd0 <calculate_checksum>:

// Function to calculate XOR checksum
uint8_t calculate_checksum(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3) {
 8000cd0:	b490      	push	{r4, r7}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4604      	mov	r4, r0
 8000cd8:	4608      	mov	r0, r1
 8000cda:	4611      	mov	r1, r2
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4623      	mov	r3, r4
 8000ce0:	71fb      	strb	r3, [r7, #7]
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	71bb      	strb	r3, [r7, #6]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	717b      	strb	r3, [r7, #5]
 8000cea:	4613      	mov	r3, r2
 8000cec:	713b      	strb	r3, [r7, #4]
    return byte0 ^ byte1 ^ byte2 ^ byte3;
 8000cee:	79fa      	ldrb	r2, [r7, #7]
 8000cf0:	79bb      	ldrb	r3, [r7, #6]
 8000cf2:	4053      	eors	r3, r2
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	797b      	ldrb	r3, [r7, #5]
 8000cf8:	4053      	eors	r3, r2
 8000cfa:	b2da      	uxtb	r2, r3
 8000cfc:	793b      	ldrb	r3, [r7, #4]
 8000cfe:	4053      	eors	r3, r2
 8000d00:	b2db      	uxtb	r3, r3
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc90      	pop	{r4, r7}
 8000d0a:	4770      	bx	lr

08000d0c <open_cabinet>:

// Function to open a cabinet
void open_cabinet(uint8_t locker_id) {
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b089      	sub	sp, #36	; 0x24
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
    if (locker_id < 1 || locker_id > 24) {
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d002      	beq.n	8000d22 <open_cabinet+0x16>
 8000d1c:	79fb      	ldrb	r3, [r7, #7]
 8000d1e:	2b18      	cmp	r3, #24
 8000d20:	d903      	bls.n	8000d2a <open_cabinet+0x1e>
        printf("Invalid locker ID. Must be between 1 and 24.\n");
 8000d22:	484b      	ldr	r0, [pc, #300]	; (8000e50 <open_cabinet+0x144>)
 8000d24:	f006 f926 	bl	8006f74 <puts>
        return;
 8000d28:	e08f      	b.n	8000e4a <open_cabinet+0x13e>
    }

    // Check the cabinet status first
    int status = read_cabinet_status(locker_id);
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f000 f8b1 	bl	8000e94 <read_cabinet_status>
 8000d32:	61b8      	str	r0, [r7, #24]
    if (status == 1) {
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d105      	bne.n	8000d46 <open_cabinet+0x3a>
        printf("Locker %d is already open. No action required.\n", locker_id);
 8000d3a:	79fb      	ldrb	r3, [r7, #7]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	4845      	ldr	r0, [pc, #276]	; (8000e54 <open_cabinet+0x148>)
 8000d40:	f006 f87c 	bl	8006e3c <iprintf>
        return;
 8000d44:	e081      	b.n	8000e4a <open_cabinet+0x13e>
    } else if (status == 0) {
 8000d46:	69bb      	ldr	r3, [r7, #24]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d179      	bne.n	8000e40 <open_cabinet+0x134>
        uint8_t command[5];
        uint8_t response[5];

        // Build the command to open the cabinet
        command[0] = 0x8A;
 8000d4c:	238a      	movs	r3, #138	; 0x8a
 8000d4e:	743b      	strb	r3, [r7, #16]
        command[1] = 0x01;
 8000d50:	2301      	movs	r3, #1
 8000d52:	747b      	strb	r3, [r7, #17]
        command[2] = locker_id;
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	74bb      	strb	r3, [r7, #18]
        command[3] = 0x11;
 8000d58:	2311      	movs	r3, #17
 8000d5a:	74fb      	strb	r3, [r7, #19]
        command[4] = calculate_checksum(command[0], command[1], command[2], command[3]);
 8000d5c:	7c38      	ldrb	r0, [r7, #16]
 8000d5e:	7c79      	ldrb	r1, [r7, #17]
 8000d60:	7cba      	ldrb	r2, [r7, #18]
 8000d62:	7cfb      	ldrb	r3, [r7, #19]
 8000d64:	f7ff ffb4 	bl	8000cd0 <calculate_checksum>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	753b      	strb	r3, [r7, #20]

        // Transmit the command
        RS485_Transmit(command, sizeof(command));
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	2105      	movs	r1, #5
 8000d72:	4618      	mov	r0, r3
 8000d74:	f000 f946 	bl	8001004 <RS485_Transmit>

        // Wait for the response
        if (HAL_UART_Receive(&huart2, response, sizeof(response), 1000) == HAL_OK) {
 8000d78:	f107 0108 	add.w	r1, r7, #8
 8000d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d80:	2205      	movs	r2, #5
 8000d82:	4835      	ldr	r0, [pc, #212]	; (8000e58 <open_cabinet+0x14c>)
 8000d84:	f004 fcfd 	bl	8005782 <HAL_UART_Receive>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d154      	bne.n	8000e38 <open_cabinet+0x12c>
            printf("Response received: ");
 8000d8e:	4833      	ldr	r0, [pc, #204]	; (8000e5c <open_cabinet+0x150>)
 8000d90:	f006 f854 	bl	8006e3c <iprintf>
            for (int i = 0; i < sizeof(response); i++) {
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
 8000d98:	e00b      	b.n	8000db2 <open_cabinet+0xa6>
                printf("0x%02X ", response[i]);
 8000d9a:	f107 0208 	add.w	r2, r7, #8
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	4413      	add	r3, r2
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	482e      	ldr	r0, [pc, #184]	; (8000e60 <open_cabinet+0x154>)
 8000da8:	f006 f848 	bl	8006e3c <iprintf>
            for (int i = 0; i < sizeof(response); i++) {
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	3301      	adds	r3, #1
 8000db0:	61fb      	str	r3, [r7, #28]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	2b04      	cmp	r3, #4
 8000db6:	d9f0      	bls.n	8000d9a <open_cabinet+0x8e>
            }
            printf("\n");
 8000db8:	200a      	movs	r0, #10
 8000dba:	f006 f857 	bl	8006e6c <putchar>

            uint8_t expected_checksum = calculate_checksum(response[0], response[1], response[2], response[3]);
 8000dbe:	7a38      	ldrb	r0, [r7, #8]
 8000dc0:	7a79      	ldrb	r1, [r7, #9]
 8000dc2:	7aba      	ldrb	r2, [r7, #10]
 8000dc4:	7afb      	ldrb	r3, [r7, #11]
 8000dc6:	f7ff ff83 	bl	8000cd0 <calculate_checksum>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	75fb      	strb	r3, [r7, #23]
            if (response[4] != expected_checksum) {
 8000dce:	7b3b      	ldrb	r3, [r7, #12]
 8000dd0:	7dfa      	ldrb	r2, [r7, #23]
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	d003      	beq.n	8000dde <open_cabinet+0xd2>
                printf("Response checksum error.\n");
 8000dd6:	4823      	ldr	r0, [pc, #140]	; (8000e64 <open_cabinet+0x158>)
 8000dd8:	f006 f8cc 	bl	8006f74 <puts>
 8000ddc:	e035      	b.n	8000e4a <open_cabinet+0x13e>
                return;
            }

            if (response[3] == 0x11) {
 8000dde:	7afb      	ldrb	r3, [r7, #11]
 8000de0:	2b11      	cmp	r3, #17
 8000de2:	d11a      	bne.n	8000e1a <open_cabinet+0x10e>
                printf("Locker %d opened successfully.\n", locker_id);
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	4619      	mov	r1, r3
 8000de8:	481f      	ldr	r0, [pc, #124]	; (8000e68 <open_cabinet+0x15c>)
 8000dea:	f006 f827 	bl	8006e3c <iprintf>
                lockerOpened[locker_id - 1] = true;
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	3b01      	subs	r3, #1
 8000df2:	4a1e      	ldr	r2, [pc, #120]	; (8000e6c <open_cabinet+0x160>)
 8000df4:	2101      	movs	r1, #1
 8000df6:	54d1      	strb	r1, [r2, r3]
                openTimestamp[locker_id - 1] = HAL_GetTick();
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	1e5c      	subs	r4, r3, #1
 8000dfc:	f001 f9fe 	bl	80021fc <HAL_GetTick>
 8000e00:	4603      	mov	r3, r0
 8000e02:	4a1b      	ldr	r2, [pc, #108]	; (8000e70 <open_cabinet+0x164>)
 8000e04:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
                checkPending[locker_id - 1] = true;
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	4a19      	ldr	r2, [pc, #100]	; (8000e74 <open_cabinet+0x168>)
 8000e0e:	2101      	movs	r1, #1
 8000e10:	54d1      	strb	r1, [r2, r3]
                lockerFlag = true;
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <open_cabinet+0x16c>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	701a      	strb	r2, [r3, #0]
 8000e18:	e017      	b.n	8000e4a <open_cabinet+0x13e>
            } else {
                printf("Unexpected response when opening locker %d.\n", locker_id);
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4817      	ldr	r0, [pc, #92]	; (8000e7c <open_cabinet+0x170>)
 8000e20:	f006 f80c 	bl	8006e3c <iprintf>
                errorState = STATE_JAMMED;
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <open_cabinet+0x174>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
                error_locker = locker_id;
 8000e2a:	4a16      	ldr	r2, [pc, #88]	; (8000e84 <open_cabinet+0x178>)
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	7013      	strb	r3, [r2, #0]
                error_flag = true;
 8000e30:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <open_cabinet+0x17c>)
 8000e32:	2201      	movs	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]
 8000e36:	e008      	b.n	8000e4a <open_cabinet+0x13e>
            }
        } else {
            printf("No response received when opening the cabinet.\n");
 8000e38:	4814      	ldr	r0, [pc, #80]	; (8000e8c <open_cabinet+0x180>)
 8000e3a:	f006 f89b 	bl	8006f74 <puts>
 8000e3e:	e004      	b.n	8000e4a <open_cabinet+0x13e>
        }
    } else {
        printf("Failed to determine the status of locker %d. Aborting open operation.\n", locker_id);
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	4619      	mov	r1, r3
 8000e44:	4812      	ldr	r0, [pc, #72]	; (8000e90 <open_cabinet+0x184>)
 8000e46:	f005 fff9 	bl	8006e3c <iprintf>
    }
}
 8000e4a:	3724      	adds	r7, #36	; 0x24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd90      	pop	{r4, r7, pc}
 8000e50:	0800ab00 	.word	0x0800ab00
 8000e54:	0800ab30 	.word	0x0800ab30
 8000e58:	20000488 	.word	0x20000488
 8000e5c:	0800ab60 	.word	0x0800ab60
 8000e60:	0800aa5c 	.word	0x0800aa5c
 8000e64:	0800ab74 	.word	0x0800ab74
 8000e68:	0800ab90 	.word	0x0800ab90
 8000e6c:	2000020c 	.word	0x2000020c
 8000e70:	2000023c 	.word	0x2000023c
 8000e74:	20000224 	.word	0x20000224
 8000e78:	20000208 	.word	0x20000208
 8000e7c:	0800abb0 	.word	0x0800abb0
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000207 	.word	0x20000207
 8000e88:	20000204 	.word	0x20000204
 8000e8c:	0800abe0 	.word	0x0800abe0
 8000e90:	0800ac10 	.word	0x0800ac10

08000e94 <read_cabinet_status>:

// Function to read the cabinet status
int read_cabinet_status(uint8_t locker_id) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	71fb      	strb	r3, [r7, #7]
    if (locker_id < 1 || locker_id > 24) {
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d002      	beq.n	8000eaa <read_cabinet_status+0x16>
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	2b18      	cmp	r3, #24
 8000ea8:	d905      	bls.n	8000eb6 <read_cabinet_status+0x22>
        printf("Invalid locker ID. Must be between 1 and 24.\n");
 8000eaa:	483b      	ldr	r0, [pc, #236]	; (8000f98 <read_cabinet_status+0x104>)
 8000eac:	f006 f862 	bl	8006f74 <puts>
        return -1;
 8000eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb4:	e06b      	b.n	8000f8e <read_cabinet_status+0xfa>

    uint8_t command[5];
    uint8_t response[5];

    // Build the command to read the cabinet status
    command[0] = 0x80;
 8000eb6:	2380      	movs	r3, #128	; 0x80
 8000eb8:	753b      	strb	r3, [r7, #20]
    command[1] = 0x01;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	757b      	strb	r3, [r7, #21]
    command[2] = locker_id;
 8000ebe:	79fb      	ldrb	r3, [r7, #7]
 8000ec0:	75bb      	strb	r3, [r7, #22]
    command[3] = 0x33;
 8000ec2:	2333      	movs	r3, #51	; 0x33
 8000ec4:	75fb      	strb	r3, [r7, #23]
    command[4] = calculate_checksum(command[0], command[1], command[2], command[3]);
 8000ec6:	7d38      	ldrb	r0, [r7, #20]
 8000ec8:	7d79      	ldrb	r1, [r7, #21]
 8000eca:	7dba      	ldrb	r2, [r7, #22]
 8000ecc:	7dfb      	ldrb	r3, [r7, #23]
 8000ece:	f7ff feff 	bl	8000cd0 <calculate_checksum>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	763b      	strb	r3, [r7, #24]

    // Transmit the command
    RS485_Transmit(command, sizeof(command));
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	2105      	movs	r1, #5
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 f891 	bl	8001004 <RS485_Transmit>

    // Wait for the response
    if (HAL_UART_Receive(&huart2, response, sizeof(response), 1000) == HAL_OK) {
 8000ee2:	f107 010c 	add.w	r1, r7, #12
 8000ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eea:	2205      	movs	r2, #5
 8000eec:	482b      	ldr	r0, [pc, #172]	; (8000f9c <read_cabinet_status+0x108>)
 8000eee:	f004 fc48 	bl	8005782 <HAL_UART_Receive>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d145      	bne.n	8000f84 <read_cabinet_status+0xf0>
        // Print the raw response
        printf("Response received: ");
 8000ef8:	4829      	ldr	r0, [pc, #164]	; (8000fa0 <read_cabinet_status+0x10c>)
 8000efa:	f005 ff9f 	bl	8006e3c <iprintf>
        for (int i = 0; i < sizeof(response); i++) {
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
 8000f02:	e00b      	b.n	8000f1c <read_cabinet_status+0x88>
            printf("0x%02X ", response[i]);
 8000f04:	f107 020c 	add.w	r2, r7, #12
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4824      	ldr	r0, [pc, #144]	; (8000fa4 <read_cabinet_status+0x110>)
 8000f12:	f005 ff93 	bl	8006e3c <iprintf>
        for (int i = 0; i < sizeof(response); i++) {
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	61fb      	str	r3, [r7, #28]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	d9f0      	bls.n	8000f04 <read_cabinet_status+0x70>
        }
        printf("\n");
 8000f22:	200a      	movs	r0, #10
 8000f24:	f005 ffa2 	bl	8006e6c <putchar>

        // Validate the response
        uint8_t expected_checksum = calculate_checksum(response[0], response[1], response[2], response[3]);
 8000f28:	7b38      	ldrb	r0, [r7, #12]
 8000f2a:	7b79      	ldrb	r1, [r7, #13]
 8000f2c:	7bba      	ldrb	r2, [r7, #14]
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	f7ff fece 	bl	8000cd0 <calculate_checksum>
 8000f34:	4603      	mov	r3, r0
 8000f36:	76fb      	strb	r3, [r7, #27]
        if (response[4] != expected_checksum) {
 8000f38:	7c3b      	ldrb	r3, [r7, #16]
 8000f3a:	7efa      	ldrb	r2, [r7, #27]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d005      	beq.n	8000f4c <read_cabinet_status+0xb8>
            printf("Response checksum error.\n");
 8000f40:	4819      	ldr	r0, [pc, #100]	; (8000fa8 <read_cabinet_status+0x114>)
 8000f42:	f006 f817 	bl	8006f74 <puts>
            return -1;
 8000f46:	f04f 33ff 	mov.w	r3, #4294967295
 8000f4a:	e020      	b.n	8000f8e <read_cabinet_status+0xfa>
        }

        // Interpret the response
        if (response[3] == 0x11) {
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	2b11      	cmp	r3, #17
 8000f50:	d106      	bne.n	8000f60 <read_cabinet_status+0xcc>
            printf("Locker %d is open.\n", locker_id);
 8000f52:	79fb      	ldrb	r3, [r7, #7]
 8000f54:	4619      	mov	r1, r3
 8000f56:	4815      	ldr	r0, [pc, #84]	; (8000fac <read_cabinet_status+0x118>)
 8000f58:	f005 ff70 	bl	8006e3c <iprintf>
            return 1; // Locker is open
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	e016      	b.n	8000f8e <read_cabinet_status+0xfa>
        } else if (response[3] == 0x00) {
 8000f60:	7bfb      	ldrb	r3, [r7, #15]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d106      	bne.n	8000f74 <read_cabinet_status+0xe0>
            printf("Locker %d is closed.\n", locker_id);
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4811      	ldr	r0, [pc, #68]	; (8000fb0 <read_cabinet_status+0x11c>)
 8000f6c:	f005 ff66 	bl	8006e3c <iprintf>
            return 0; // Locker is closed
 8000f70:	2300      	movs	r3, #0
 8000f72:	e00c      	b.n	8000f8e <read_cabinet_status+0xfa>
        } else {
            printf("Unexpected response for locker %d.\n", locker_id);
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	4619      	mov	r1, r3
 8000f78:	480e      	ldr	r0, [pc, #56]	; (8000fb4 <read_cabinet_status+0x120>)
 8000f7a:	f005 ff5f 	bl	8006e3c <iprintf>
            return -1; // Error or unexpected
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	e004      	b.n	8000f8e <read_cabinet_status+0xfa>
        }
    } else {
        printf("No response received when reading the cabinet status.\n");
 8000f84:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <read_cabinet_status+0x124>)
 8000f86:	f005 fff5 	bl	8006f74 <puts>
        return -1;
 8000f8a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3720      	adds	r7, #32
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	0800ab00 	.word	0x0800ab00
 8000f9c:	20000488 	.word	0x20000488
 8000fa0:	0800ab60 	.word	0x0800ab60
 8000fa4:	0800aa5c 	.word	0x0800aa5c
 8000fa8:	0800ab74 	.word	0x0800ab74
 8000fac:	0800ac58 	.word	0x0800ac58
 8000fb0:	0800ac6c 	.word	0x0800ac6c
 8000fb4:	0800ac84 	.word	0x0800ac84
 8000fb8:	0800aca8 	.word	0x0800aca8

08000fbc <RS485_SetTransmitMode>:

// Set RS485 to transmit mode
void RS485_SetTransmitMode(void) {
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_SET);
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <RS485_SetTransmitMode+0x20>)
 8000fc8:	f001 fc28 	bl	800281c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fd2:	4802      	ldr	r0, [pc, #8]	; (8000fdc <RS485_SetTransmitMode+0x20>)
 8000fd4:	f001 fc22 	bl	800281c <HAL_GPIO_WritePin>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40021800 	.word	0x40021800

08000fe0 <RS485_SetReceiveMode>:

// Set RS485 to receive mode
void RS485_SetReceiveMode(void) {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_RESET);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fea:	4805      	ldr	r0, [pc, #20]	; (8001000 <RS485_SetReceiveMode+0x20>)
 8000fec:	f001 fc16 	bl	800281c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff6:	4802      	ldr	r0, [pc, #8]	; (8001000 <RS485_SetReceiveMode+0x20>)
 8000ff8:	f001 fc10 	bl	800281c <HAL_GPIO_WritePin>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40021800 	.word	0x40021800

08001004 <RS485_Transmit>:

// Transmit data via RS485
void RS485_Transmit(uint8_t *data, uint16_t size) {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	460b      	mov	r3, r1
 800100e:	807b      	strh	r3, [r7, #2]
    RS485_SetTransmitMode();
 8001010:	f7ff ffd4 	bl	8000fbc <RS485_SetTransmitMode>
    HAL_UART_Transmit(&huart2, data, size, HAL_MAX_DELAY);
 8001014:	887a      	ldrh	r2, [r7, #2]
 8001016:	f04f 33ff 	mov.w	r3, #4294967295
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	4804      	ldr	r0, [pc, #16]	; (8001030 <RS485_Transmit+0x2c>)
 800101e:	f004 fb1d 	bl	800565c <HAL_UART_Transmit>
    RS485_SetReceiveMode();
 8001022:	f7ff ffdd 	bl	8000fe0 <RS485_SetReceiveMode>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000488 	.word	0x20000488

08001034 <HandleState>:
    RS485_SetReceiveMode();
    HAL_UART_Receive(&huart2, data, size, timeout);
}

// Handle error states
void HandleState(SystemErrorState state) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af02      	add	r7, sp, #8
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	3b01      	subs	r3, #1
 8001042:	2b06      	cmp	r3, #6
 8001044:	f200 80a6 	bhi.w	8001194 <HandleState+0x160>
 8001048:	a201      	add	r2, pc, #4	; (adr r2, 8001050 <HandleState+0x1c>)
 800104a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104e:	bf00      	nop
 8001050:	0800106d 	.word	0x0800106d
 8001054:	0800109d 	.word	0x0800109d
 8001058:	080010cd 	.word	0x080010cd
 800105c:	080010d5 	.word	0x080010d5
 8001060:	08001105 	.word	0x08001105
 8001064:	08001135 	.word	0x08001135
 8001068:	08001165 	.word	0x08001165
        case STATE_JAMMED:
            printf("Case 1: JAMMED\n");
 800106c:	484d      	ldr	r0, [pc, #308]	; (80011a4 <HandleState+0x170>)
 800106e:	f005 ff81 	bl	8006f74 <puts>
            SPI_SendMessage(0xF1, error_locker, 150, 0xFF, 0xFF, 0xFF);
 8001072:	4b4d      	ldr	r3, [pc, #308]	; (80011a8 <HandleState+0x174>)
 8001074:	7819      	ldrb	r1, [r3, #0]
 8001076:	23ff      	movs	r3, #255	; 0xff
 8001078:	9301      	str	r3, [sp, #4]
 800107a:	23ff      	movs	r3, #255	; 0xff
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	23ff      	movs	r3, #255	; 0xff
 8001080:	2296      	movs	r2, #150	; 0x96
 8001082:	20f1      	movs	r0, #241	; 0xf1
 8001084:	f7ff fdec 	bl	8000c60 <SPI_SendMessage>
            errorState = NO_ERROR;
 8001088:	4b48      	ldr	r3, [pc, #288]	; (80011ac <HandleState+0x178>)
 800108a:	2208      	movs	r2, #8
 800108c:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 800108e:	4b46      	ldr	r3, [pc, #280]	; (80011a8 <HandleState+0x174>)
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 8001094:	4b46      	ldr	r3, [pc, #280]	; (80011b0 <HandleState+0x17c>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
            break;
 800109a:	e07f      	b.n	800119c <HandleState+0x168>
        case STATE_OPENED:
            printf("Case 2: OPENED\n");
 800109c:	4845      	ldr	r0, [pc, #276]	; (80011b4 <HandleState+0x180>)
 800109e:	f005 ff69 	bl	8006f74 <puts>
            SPI_SendMessage(0xF1, error_locker, 50, 0xFF, 0xFF, 0xFF);
 80010a2:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <HandleState+0x174>)
 80010a4:	7819      	ldrb	r1, [r3, #0]
 80010a6:	23ff      	movs	r3, #255	; 0xff
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	23ff      	movs	r3, #255	; 0xff
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	23ff      	movs	r3, #255	; 0xff
 80010b0:	2232      	movs	r2, #50	; 0x32
 80010b2:	20f1      	movs	r0, #241	; 0xf1
 80010b4:	f7ff fdd4 	bl	8000c60 <SPI_SendMessage>
            errorState = NO_ERROR;
 80010b8:	4b3c      	ldr	r3, [pc, #240]	; (80011ac <HandleState+0x178>)
 80010ba:	2208      	movs	r2, #8
 80010bc:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 80010be:	4b3a      	ldr	r3, [pc, #232]	; (80011a8 <HandleState+0x174>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 80010c4:	4b3a      	ldr	r3, [pc, #232]	; (80011b0 <HandleState+0x17c>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
            break;
 80010ca:	e067      	b.n	800119c <HandleState+0x168>
        case STATE_CLOSED:
            printf("Case 3: CLOSED\n");
 80010cc:	483a      	ldr	r0, [pc, #232]	; (80011b8 <HandleState+0x184>)
 80010ce:	f005 ff51 	bl	8006f74 <puts>
            break;
 80010d2:	e063      	b.n	800119c <HandleState+0x168>
        case STATE_PRICE_TAG:
            printf("Case 4: PRICE_TAG\n");
 80010d4:	4839      	ldr	r0, [pc, #228]	; (80011bc <HandleState+0x188>)
 80010d6:	f005 ff4d 	bl	8006f74 <puts>
            SPI_SendMessage(0xF2, error_locker, 50, 0xFF, 0xFF, 0xFF);
 80010da:	4b33      	ldr	r3, [pc, #204]	; (80011a8 <HandleState+0x174>)
 80010dc:	7819      	ldrb	r1, [r3, #0]
 80010de:	23ff      	movs	r3, #255	; 0xff
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	23ff      	movs	r3, #255	; 0xff
 80010e4:	9300      	str	r3, [sp, #0]
 80010e6:	23ff      	movs	r3, #255	; 0xff
 80010e8:	2232      	movs	r2, #50	; 0x32
 80010ea:	20f2      	movs	r0, #242	; 0xf2
 80010ec:	f7ff fdb8 	bl	8000c60 <SPI_SendMessage>
            errorState = NO_ERROR;
 80010f0:	4b2e      	ldr	r3, [pc, #184]	; (80011ac <HandleState+0x178>)
 80010f2:	2208      	movs	r2, #8
 80010f4:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 80010f6:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <HandleState+0x174>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 80010fc:	4b2c      	ldr	r3, [pc, #176]	; (80011b0 <HandleState+0x17c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
            break;
 8001102:	e04b      	b.n	800119c <HandleState+0x168>
        case STATE_LED_DRIVER:
            printf("Case 5: LED_DRIVER\n");
 8001104:	482e      	ldr	r0, [pc, #184]	; (80011c0 <HandleState+0x18c>)
 8001106:	f005 ff35 	bl	8006f74 <puts>
            SPI_SendMessage(0xF2, error_locker, 100, 0xFF, 0xFF, 0xFF);
 800110a:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <HandleState+0x174>)
 800110c:	7819      	ldrb	r1, [r3, #0]
 800110e:	23ff      	movs	r3, #255	; 0xff
 8001110:	9301      	str	r3, [sp, #4]
 8001112:	23ff      	movs	r3, #255	; 0xff
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	23ff      	movs	r3, #255	; 0xff
 8001118:	2264      	movs	r2, #100	; 0x64
 800111a:	20f2      	movs	r0, #242	; 0xf2
 800111c:	f7ff fda0 	bl	8000c60 <SPI_SendMessage>
            errorState = NO_ERROR;
 8001120:	4b22      	ldr	r3, [pc, #136]	; (80011ac <HandleState+0x178>)
 8001122:	2208      	movs	r2, #8
 8001124:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <HandleState+0x174>)
 8001128:	2200      	movs	r2, #0
 800112a:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 800112c:	4b20      	ldr	r3, [pc, #128]	; (80011b0 <HandleState+0x17c>)
 800112e:	2200      	movs	r2, #0
 8001130:	701a      	strb	r2, [r3, #0]
            break;
 8001132:	e033      	b.n	800119c <HandleState+0x168>
        case STATE_TEMPERATURE:
            printf("Case 6: TEMPERATURE\n");
 8001134:	4823      	ldr	r0, [pc, #140]	; (80011c4 <HandleState+0x190>)
 8001136:	f005 ff1d 	bl	8006f74 <puts>
            SPI_SendMessage(0xF3, error_locker, 50, 0xFF, 0xFF, 0xFF);
 800113a:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <HandleState+0x174>)
 800113c:	7819      	ldrb	r1, [r3, #0]
 800113e:	23ff      	movs	r3, #255	; 0xff
 8001140:	9301      	str	r3, [sp, #4]
 8001142:	23ff      	movs	r3, #255	; 0xff
 8001144:	9300      	str	r3, [sp, #0]
 8001146:	23ff      	movs	r3, #255	; 0xff
 8001148:	2232      	movs	r2, #50	; 0x32
 800114a:	20f3      	movs	r0, #243	; 0xf3
 800114c:	f7ff fd88 	bl	8000c60 <SPI_SendMessage>
            errorState = NO_ERROR;
 8001150:	4b16      	ldr	r3, [pc, #88]	; (80011ac <HandleState+0x178>)
 8001152:	2208      	movs	r2, #8
 8001154:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <HandleState+0x174>)
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <HandleState+0x17c>)
 800115e:	2200      	movs	r2, #0
 8001160:	701a      	strb	r2, [r3, #0]
            break;
 8001162:	e01b      	b.n	800119c <HandleState+0x168>
        case STATE_SENSOR:
            printf("Case 7: SENSOR\n");
 8001164:	4818      	ldr	r0, [pc, #96]	; (80011c8 <HandleState+0x194>)
 8001166:	f005 ff05 	bl	8006f74 <puts>
            SPI_SendMessage(0xF3, error_locker, 100, 0xFF, 0xFF, 0xFF);
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HandleState+0x174>)
 800116c:	7819      	ldrb	r1, [r3, #0]
 800116e:	23ff      	movs	r3, #255	; 0xff
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	23ff      	movs	r3, #255	; 0xff
 8001174:	9300      	str	r3, [sp, #0]
 8001176:	23ff      	movs	r3, #255	; 0xff
 8001178:	2264      	movs	r2, #100	; 0x64
 800117a:	20f3      	movs	r0, #243	; 0xf3
 800117c:	f7ff fd70 	bl	8000c60 <SPI_SendMessage>
            errorState = NO_ERROR;
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HandleState+0x178>)
 8001182:	2208      	movs	r2, #8
 8001184:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <HandleState+0x174>)
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <HandleState+0x17c>)
 800118e:	2200      	movs	r2, #0
 8001190:	701a      	strb	r2, [r3, #0]
            break;
 8001192:	e003      	b.n	800119c <HandleState+0x168>
        default:
            printf("Invalid state\n");
 8001194:	480d      	ldr	r0, [pc, #52]	; (80011cc <HandleState+0x198>)
 8001196:	f005 feed 	bl	8006f74 <puts>
            break;
 800119a:	bf00      	nop
    }
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	0800ace0 	.word	0x0800ace0
 80011a8:	20000207 	.word	0x20000207
 80011ac:	20000000 	.word	0x20000000
 80011b0:	20000204 	.word	0x20000204
 80011b4:	0800acf0 	.word	0x0800acf0
 80011b8:	0800ad00 	.word	0x0800ad00
 80011bc:	0800ad10 	.word	0x0800ad10
 80011c0:	0800ad24 	.word	0x0800ad24
 80011c4:	0800ad38 	.word	0x0800ad38
 80011c8:	0800ad4c 	.word	0x0800ad4c
 80011cc:	0800ad5c 	.word	0x0800ad5c

080011d0 <CheckAllLockersAfterDelay>:

// Check all lockers after delay (5 minutes) to see if they remain open
void CheckAllLockersAfterDelay(void) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
    bool anyOpenedOrPending = false;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]
    uint32_t currentTime = HAL_GetTick();
 80011da:	f001 f80f 	bl	80021fc <HAL_GetTick>
 80011de:	6078      	str	r0, [r7, #4]

    for (int i = 0; i < 24; i++) {
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	e048      	b.n	8001278 <CheckAllLockersAfterDelay+0xa8>
        // If we had marked a locker for a re-check
        if (checkPending[i]) {
 80011e6:	4a29      	ldr	r2, [pc, #164]	; (800128c <CheckAllLockersAfterDelay+0xbc>)
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4413      	add	r3, r2
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d037      	beq.n	8001262 <CheckAllLockersAfterDelay+0x92>
            anyOpenedOrPending = true;
 80011f2:	2301      	movs	r3, #1
 80011f4:	73fb      	strb	r3, [r7, #15]
            // Has 5 minutes passed since we opened it?
            if ((currentTime - openTimestamp[i]) >= LOCKER_CHECK_DELAY) {
 80011f6:	4a26      	ldr	r2, [pc, #152]	; (8001290 <CheckAllLockersAfterDelay+0xc0>)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001206:	4293      	cmp	r3, r2
 8001208:	d933      	bls.n	8001272 <CheckAllLockersAfterDelay+0xa2>
                int status = read_cabinet_status(i + 1);
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	b2db      	uxtb	r3, r3
 800120e:	3301      	adds	r3, #1
 8001210:	b2db      	uxtb	r3, r3
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fe3e 	bl	8000e94 <read_cabinet_status>
 8001218:	6038      	str	r0, [r7, #0]
                if (status == 1) {
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2b01      	cmp	r3, #1
 800121e:	d112      	bne.n	8001246 <CheckAllLockersAfterDelay+0x76>
                    errorState = STATE_OPENED;
 8001220:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <CheckAllLockersAfterDelay+0xc4>)
 8001222:	2202      	movs	r2, #2
 8001224:	701a      	strb	r2, [r3, #0]
                    error_locker = i + 1;
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	b2db      	uxtb	r3, r3
 800122a:	3301      	adds	r3, #1
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <CheckAllLockersAfterDelay+0xc8>)
 8001230:	701a      	strb	r2, [r3, #0]
                    error_flag = true;
 8001232:	4b1a      	ldr	r3, [pc, #104]	; (800129c <CheckAllLockersAfterDelay+0xcc>)
 8001234:	2201      	movs	r2, #1
 8001236:	701a      	strb	r2, [r3, #0]
                    printf("Locker %d is still open after 5 minutes!\n", i + 1);
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	3301      	adds	r3, #1
 800123c:	4619      	mov	r1, r3
 800123e:	4818      	ldr	r0, [pc, #96]	; (80012a0 <CheckAllLockersAfterDelay+0xd0>)
 8001240:	f005 fdfc 	bl	8006e3c <iprintf>
 8001244:	e007      	b.n	8001256 <CheckAllLockersAfterDelay+0x86>
                } else if (status == 0) {
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d104      	bne.n	8001256 <CheckAllLockersAfterDelay+0x86>
                    // It's now closed
                    lockerOpened[i] = false;
 800124c:	4a15      	ldr	r2, [pc, #84]	; (80012a4 <CheckAllLockersAfterDelay+0xd4>)
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	4413      	add	r3, r2
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
                }
                checkPending[i] = false;
 8001256:	4a0d      	ldr	r2, [pc, #52]	; (800128c <CheckAllLockersAfterDelay+0xbc>)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	4413      	add	r3, r2
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	e007      	b.n	8001272 <CheckAllLockersAfterDelay+0xa2>
            }
        } else {
            if (lockerOpened[i]) {
 8001262:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <CheckAllLockersAfterDelay+0xd4>)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	4413      	add	r3, r2
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <CheckAllLockersAfterDelay+0xa2>
                anyOpenedOrPending = true;
 800126e:	2301      	movs	r3, #1
 8001270:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 24; i++) {
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	3301      	adds	r3, #1
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	2b17      	cmp	r3, #23
 800127c:	ddb3      	ble.n	80011e6 <CheckAllLockersAfterDelay+0x16>
            }
        }
    }
    lockerFlag = anyOpenedOrPending;
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <CheckAllLockersAfterDelay+0xd8>)
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	7013      	strb	r3, [r2, #0]
}
 8001284:	bf00      	nop
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000224 	.word	0x20000224
 8001290:	2000023c 	.word	0x2000023c
 8001294:	20000000 	.word	0x20000000
 8001298:	20000207 	.word	0x20000207
 800129c:	20000204 	.word	0x20000204
 80012a0:	0800ad6c 	.word	0x0800ad6c
 80012a4:	2000020c 	.word	0x2000020c
 80012a8:	20000208 	.word	0x20000208

080012ac <CheckTemperature>:

// Periodic temperature check
void CheckTemperature(void) {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af02      	add	r7, sp, #8

//	for (int i =0; i<8; i++){
//		AHT20_ReadData_PCA9548A(&hi2c2, PCA9548A_ADDRESS, sensors[i]);
//	}
    float temperature, humidity;
    if (AHT20_ReadData_PCA9548A(&hi2c2, PCA9548A_ADDRESS, CHANNEL_2_MASK, &temperature, &humidity) == HAL_OK) {
 80012b2:	1d3a      	adds	r2, r7, #4
 80012b4:	463b      	mov	r3, r7
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	4613      	mov	r3, r2
 80012ba:	2204      	movs	r2, #4
 80012bc:	2170      	movs	r1, #112	; 0x70
 80012be:	4844      	ldr	r0, [pc, #272]	; (80013d0 <CheckTemperature+0x124>)
 80012c0:	f000 fbd6 	bl	8001a70 <AHT20_ReadData_PCA9548A>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d141      	bne.n	800134e <CheckTemperature+0xa2>
        printf("Temperature: %.2f C\r\n", temperature);
 80012ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012d2:	ec53 2b17 	vmov	r2, r3, d7
 80012d6:	483f      	ldr	r0, [pc, #252]	; (80013d4 <CheckTemperature+0x128>)
 80012d8:	f005 fdb0 	bl	8006e3c <iprintf>
        printf("Humidity: %.2f %%RH\r\n", humidity);
 80012dc:	edd7 7a00 	vldr	s15, [r7]
 80012e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80012e4:	ec53 2b17 	vmov	r2, r3, d7
 80012e8:	483b      	ldr	r0, [pc, #236]	; (80013d8 <CheckTemperature+0x12c>)
 80012ea:	f005 fda7 	bl	8006e3c <iprintf>

        int16_t tRaw = (int16_t)(temperature * 100.0f);
 80012ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f2:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80013dc <CheckTemperature+0x130>
 80012f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012fe:	ee17 3a90 	vmov	r3, s15
 8001302:	81fb      	strh	r3, [r7, #14]
        int16_t hRaw = (int16_t)(humidity * 100.0f);
 8001304:	edd7 7a00 	vldr	s15, [r7]
 8001308:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80013dc <CheckTemperature+0x130>
 800130c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001310:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001314:	ee17 3a90 	vmov	r3, s15
 8001318:	81bb      	strh	r3, [r7, #12]
        uint8_t tHigh = (uint8_t)((tRaw >> 8) & 0xFF);
 800131a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800131e:	121b      	asrs	r3, r3, #8
 8001320:	b21b      	sxth	r3, r3
 8001322:	72fb      	strb	r3, [r7, #11]
        uint8_t tLow  = (uint8_t)( tRaw       & 0xFF);
 8001324:	89fb      	ldrh	r3, [r7, #14]
 8001326:	72bb      	strb	r3, [r7, #10]
        uint8_t hHigh = (uint8_t)((hRaw >> 8) & 0xFF);
 8001328:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800132c:	121b      	asrs	r3, r3, #8
 800132e:	b21b      	sxth	r3, r3
 8001330:	727b      	strb	r3, [r7, #9]
        uint8_t hLow  = (uint8_t)( hRaw       & 0xFF);
 8001332:	89bb      	ldrh	r3, [r7, #12]
 8001334:	723b      	strb	r3, [r7, #8]
        SPI_SendMessage(0xF4, 3, tHigh, tLow, hHigh, hLow);
 8001336:	7ab9      	ldrb	r1, [r7, #10]
 8001338:	7afa      	ldrb	r2, [r7, #11]
 800133a:	7a3b      	ldrb	r3, [r7, #8]
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	7a7b      	ldrb	r3, [r7, #9]
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	460b      	mov	r3, r1
 8001344:	2103      	movs	r1, #3
 8001346:	20f4      	movs	r0, #244	; 0xf4
 8001348:	f7ff fc8a 	bl	8000c60 <SPI_SendMessage>
 800134c:	e015      	b.n	800137a <CheckTemperature+0xce>

    } else {
        printf("Failed to read data from AHT20 sensor.\r\n");
 800134e:	4824      	ldr	r0, [pc, #144]	; (80013e0 <CheckTemperature+0x134>)
 8001350:	f005 fe10 	bl	8006f74 <puts>
        if (!tempSensFailed) {
 8001354:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <CheckTemperature+0x138>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	f083 0301 	eor.w	r3, r3, #1
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00b      	beq.n	800137a <CheckTemperature+0xce>
            errorState = STATE_SENSOR;
 8001362:	4b21      	ldr	r3, [pc, #132]	; (80013e8 <CheckTemperature+0x13c>)
 8001364:	2207      	movs	r2, #7
 8001366:	701a      	strb	r2, [r3, #0]
            error_locker = 3;
 8001368:	4b20      	ldr	r3, [pc, #128]	; (80013ec <CheckTemperature+0x140>)
 800136a:	2203      	movs	r2, #3
 800136c:	701a      	strb	r2, [r3, #0]
            error_flag = true;
 800136e:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <CheckTemperature+0x144>)
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
            tempSensFailed = true;
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <CheckTemperature+0x138>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]
        }
    }

    if (temperature < 0.0 && !tempBelowZero) {
 800137a:	edd7 7a01 	vldr	s15, [r7, #4]
 800137e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001386:	d513      	bpl.n	80013b0 <CheckTemperature+0x104>
 8001388:	4b1a      	ldr	r3, [pc, #104]	; (80013f4 <CheckTemperature+0x148>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	f083 0301 	eor.w	r3, r3, #1
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00c      	beq.n	80013b0 <CheckTemperature+0x104>
        tempBelowZero = true;
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <CheckTemperature+0x148>)
 8001398:	2201      	movs	r2, #1
 800139a:	701a      	strb	r2, [r3, #0]
        errorState = STATE_TEMPERATURE;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <CheckTemperature+0x13c>)
 800139e:	2206      	movs	r2, #6
 80013a0:	701a      	strb	r2, [r3, #0]
        error_locker = 3;
 80013a2:	4b12      	ldr	r3, [pc, #72]	; (80013ec <CheckTemperature+0x140>)
 80013a4:	2203      	movs	r2, #3
 80013a6:	701a      	strb	r2, [r3, #0]
        error_flag = true;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <CheckTemperature+0x144>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	701a      	strb	r2, [r3, #0]
    } else if (temperature >= 0.0) {
        tempBelowZero = false;
    }
}
 80013ae:	e00a      	b.n	80013c6 <CheckTemperature+0x11a>
    } else if (temperature >= 0.0) {
 80013b0:	edd7 7a01 	vldr	s15, [r7, #4]
 80013b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013bc:	da00      	bge.n	80013c0 <CheckTemperature+0x114>
}
 80013be:	e002      	b.n	80013c6 <CheckTemperature+0x11a>
        tempBelowZero = false;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <CheckTemperature+0x148>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
}
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200003c8 	.word	0x200003c8
 80013d4:	0800ad98 	.word	0x0800ad98
 80013d8:	0800adb0 	.word	0x0800adb0
 80013dc:	42c80000 	.word	0x42c80000
 80013e0:	0800adc8 	.word	0x0800adc8
 80013e4:	20000205 	.word	0x20000205
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000207 	.word	0x20000207
 80013f0:	20000204 	.word	0x20000204
 80013f4:	20000206 	.word	0x20000206

080013f8 <__io_putchar>:


#ifdef __GNUC__
int __io_putchar(int ch) {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001400:	1d39      	adds	r1, r7, #4
 8001402:	f04f 33ff 	mov.w	r3, #4294967295
 8001406:	2201      	movs	r2, #1
 8001408:	4803      	ldr	r0, [pc, #12]	; (8001418 <__io_putchar+0x20>)
 800140a:	f004 f927 	bl	800565c <HAL_UART_Transmit>
    return ch;
 800140e:	687b      	ldr	r3, [r7, #4]
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200002f8 	.word	0x200002f8

0800141c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001420:	f000 fe9b 	bl	800215a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001424:	f000 f846 	bl	80014b4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001428:	f000 fa22 	bl	8001870 <MX_GPIO_Init>
  MX_SPI1_Init();
 800142c:	f000 f988 	bl	8001740 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001430:	f000 f9ee 	bl	8001810 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001434:	f000 f8c4 	bl	80015c0 <MX_I2C1_Init>
  MX_I2C4_Init();
 8001438:	f000 f942 	bl	80016c0 <MX_I2C4_Init>
  MX_I2C2_Init();
 800143c:	f000 f900 	bl	8001640 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001440:	f000 f9b6 	bl	80017b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("STM32 SPI Slave Ready\r\n"); // Print ready message
 8001444:	4814      	ldr	r0, [pc, #80]	; (8001498 <main+0x7c>)
 8001446:	f005 fd95 	bl	8006f74 <puts>
  HAL_SPI_Receive_IT(&hspi1, spi_rx_buffer, SPI_BUFFER_SIZE);
 800144a:	2206      	movs	r2, #6
 800144c:	4913      	ldr	r1, [pc, #76]	; (800149c <main+0x80>)
 800144e:	4814      	ldr	r0, [pc, #80]	; (80014a0 <main+0x84>)
 8001450:	f003 fa5e 	bl	8004910 <HAL_SPI_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if(error_flag) HandleState(errorState);
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <main+0x88>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d004      	beq.n	8001466 <main+0x4a>
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <main+0x8c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fde7 	bl	8001034 <HandleState>

    if(lockerFlag) CheckAllLockersAfterDelay();
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <main+0x90>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <main+0x56>
 800146e:	f7ff feaf 	bl	80011d0 <CheckAllLockersAfterDelay>

    if(HAL_GetTick() - lastTime >= 5000) {
 8001472:	f000 fec3 	bl	80021fc <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	4b0d      	ldr	r3, [pc, #52]	; (80014b0 <main+0x94>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	f241 3287 	movw	r2, #4999	; 0x1387
 8001482:	4293      	cmp	r3, r2
 8001484:	d9e6      	bls.n	8001454 <main+0x38>
      lastTime = HAL_GetTick();
 8001486:	f000 feb9 	bl	80021fc <HAL_GetTick>
 800148a:	4603      	mov	r3, r0
 800148c:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <main+0x94>)
 800148e:	6013      	str	r3, [r2, #0]
      CheckTemperature();
 8001490:	f7ff ff0c 	bl	80012ac <CheckTemperature>
    if(error_flag) HandleState(errorState);
 8001494:	e7de      	b.n	8001454 <main+0x38>
 8001496:	bf00      	nop
 8001498:	0800adf0 	.word	0x0800adf0
 800149c:	20000414 	.word	0x20000414
 80014a0:	20000424 	.word	0x20000424
 80014a4:	20000204 	.word	0x20000204
 80014a8:	20000000 	.word	0x20000000
 80014ac:	20000208 	.word	0x20000208
 80014b0:	2000029c 	.word	0x2000029c

080014b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0b8      	sub	sp, #224	; 0xe0
 80014b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ba:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014be:	2234      	movs	r2, #52	; 0x34
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f004 fe6a 	bl	800619c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014d8:	f107 0308 	add.w	r3, r7, #8
 80014dc:	2290      	movs	r2, #144	; 0x90
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f004 fe5b 	bl	800619c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014e6:	f001 ff3d 	bl	8003364 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ea:	4b32      	ldr	r3, [pc, #200]	; (80015b4 <SystemClock_Config+0x100>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	4a31      	ldr	r2, [pc, #196]	; (80015b4 <SystemClock_Config+0x100>)
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	6413      	str	r3, [r2, #64]	; 0x40
 80014f6:	4b2f      	ldr	r3, [pc, #188]	; (80015b4 <SystemClock_Config+0x100>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001502:	4b2d      	ldr	r3, [pc, #180]	; (80015b8 <SystemClock_Config+0x104>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800150a:	4a2b      	ldr	r2, [pc, #172]	; (80015b8 <SystemClock_Config+0x104>)
 800150c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001510:	6013      	str	r3, [r2, #0]
 8001512:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <SystemClock_Config+0x104>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800151e:	2302      	movs	r3, #2
 8001520:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001524:	2301      	movs	r3, #1
 8001526:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800152a:	2310      	movs	r3, #16
 800152c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001530:	2300      	movs	r3, #0
 8001532:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001536:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800153a:	4618      	mov	r0, r3
 800153c:	f001 ff22 	bl	8003384 <HAL_RCC_OscConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001546:	f000 fa27 	bl	8001998 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154a:	230f      	movs	r3, #15
 800154c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001550:	2300      	movs	r3, #0
 8001552:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800155c:	2300      	movs	r3, #0
 800155e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001568:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f002 f9b6 	bl	80038e0 <HAL_RCC_ClockConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800157a:	f000 fa0d 	bl	8001998 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <SystemClock_Config+0x108>)
 8001580:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001582:	2300      	movs	r3, #0
 8001584:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001586:	2300      	movs	r3, #0
 8001588:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800158a:	2300      	movs	r3, #0
 800158c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800158e:	2300      	movs	r3, #0
 8001590:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001592:	2300      	movs	r3, #0
 8001594:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001596:	f107 0308 	add.w	r3, r7, #8
 800159a:	4618      	mov	r0, r3
 800159c:	f002 fb76 	bl	8003c8c <HAL_RCCEx_PeriphCLKConfig>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80015a6:	f000 f9f7 	bl	8001998 <Error_Handler>
  }
}
 80015aa:	bf00      	nop
 80015ac:	37e0      	adds	r7, #224	; 0xe0
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40007000 	.word	0x40007000
 80015bc:	0002c180 	.word	0x0002c180

080015c0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <MX_I2C1_Init+0x74>)
 80015c6:	4a1c      	ldr	r2, [pc, #112]	; (8001638 <MX_I2C1_Init+0x78>)
 80015c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <MX_I2C1_Init+0x74>)
 80015cc:	4a1b      	ldr	r2, [pc, #108]	; (800163c <MX_I2C1_Init+0x7c>)
 80015ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <MX_I2C1_Init+0x74>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <MX_I2C1_Init+0x74>)
 80015d8:	2201      	movs	r2, #1
 80015da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <MX_I2C1_Init+0x74>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_I2C1_Init+0x74>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <MX_I2C1_Init+0x74>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <MX_I2C1_Init+0x74>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <MX_I2C1_Init+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015fa:	480e      	ldr	r0, [pc, #56]	; (8001634 <MX_I2C1_Init+0x74>)
 80015fc:	f001 f928 	bl	8002850 <HAL_I2C_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001606:	f000 f9c7 	bl	8001998 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800160a:	2100      	movs	r1, #0
 800160c:	4809      	ldr	r0, [pc, #36]	; (8001634 <MX_I2C1_Init+0x74>)
 800160e:	f001 fe11 	bl	8003234 <HAL_I2CEx_ConfigAnalogFilter>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001618:	f000 f9be 	bl	8001998 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800161c:	2100      	movs	r1, #0
 800161e:	4805      	ldr	r0, [pc, #20]	; (8001634 <MX_I2C1_Init+0x74>)
 8001620:	f001 fe53 	bl	80032ca <HAL_I2CEx_ConfigDigitalFilter>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800162a:	f000 f9b5 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	2000037c 	.word	0x2000037c
 8001638:	40005400 	.word	0x40005400
 800163c:	00303d5b 	.word	0x00303d5b

08001640 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <MX_I2C2_Init+0x74>)
 8001646:	4a1c      	ldr	r2, [pc, #112]	; (80016b8 <MX_I2C2_Init+0x78>)
 8001648:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800164a:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <MX_I2C2_Init+0x74>)
 800164c:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <MX_I2C2_Init+0x7c>)
 800164e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <MX_I2C2_Init+0x74>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <MX_I2C2_Init+0x74>)
 8001658:	2201      	movs	r2, #1
 800165a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <MX_I2C2_Init+0x74>)
 800165e:	2200      	movs	r2, #0
 8001660:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001662:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <MX_I2C2_Init+0x74>)
 8001664:	2200      	movs	r2, #0
 8001666:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <MX_I2C2_Init+0x74>)
 800166a:	2200      	movs	r2, #0
 800166c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_I2C2_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <MX_I2C2_Init+0x74>)
 8001676:	2200      	movs	r2, #0
 8001678:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800167a:	480e      	ldr	r0, [pc, #56]	; (80016b4 <MX_I2C2_Init+0x74>)
 800167c:	f001 f8e8 	bl	8002850 <HAL_I2C_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001686:	f000 f987 	bl	8001998 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800168a:	2100      	movs	r1, #0
 800168c:	4809      	ldr	r0, [pc, #36]	; (80016b4 <MX_I2C2_Init+0x74>)
 800168e:	f001 fdd1 	bl	8003234 <HAL_I2CEx_ConfigAnalogFilter>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001698:	f000 f97e 	bl	8001998 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800169c:	2100      	movs	r1, #0
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_I2C2_Init+0x74>)
 80016a0:	f001 fe13 	bl	80032ca <HAL_I2CEx_ConfigDigitalFilter>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80016aa:	f000 f975 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200003c8 	.word	0x200003c8
 80016b8:	40005800 	.word	0x40005800
 80016bc:	00303d5b 	.word	0x00303d5b

080016c0 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <MX_I2C4_Init+0x74>)
 80016c6:	4a1c      	ldr	r2, [pc, #112]	; (8001738 <MX_I2C4_Init+0x78>)
 80016c8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00303D5B;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	; (8001734 <MX_I2C4_Init+0x74>)
 80016cc:	4a1b      	ldr	r2, [pc, #108]	; (800173c <MX_I2C4_Init+0x7c>)
 80016ce:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80016d0:	4b18      	ldr	r3, [pc, #96]	; (8001734 <MX_I2C4_Init+0x74>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <MX_I2C4_Init+0x74>)
 80016d8:	2201      	movs	r2, #1
 80016da:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016dc:	4b15      	ldr	r3, [pc, #84]	; (8001734 <MX_I2C4_Init+0x74>)
 80016de:	2200      	movs	r2, #0
 80016e0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80016e2:	4b14      	ldr	r3, [pc, #80]	; (8001734 <MX_I2C4_Init+0x74>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <MX_I2C4_Init+0x74>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ee:	4b11      	ldr	r3, [pc, #68]	; (8001734 <MX_I2C4_Init+0x74>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <MX_I2C4_Init+0x74>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80016fa:	480e      	ldr	r0, [pc, #56]	; (8001734 <MX_I2C4_Init+0x74>)
 80016fc:	f001 f8a8 	bl	8002850 <HAL_I2C_Init>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001706:	f000 f947 	bl	8001998 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800170a:	2100      	movs	r1, #0
 800170c:	4809      	ldr	r0, [pc, #36]	; (8001734 <MX_I2C4_Init+0x74>)
 800170e:	f001 fd91 	bl	8003234 <HAL_I2CEx_ConfigAnalogFilter>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001718:	f000 f93e 	bl	8001998 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800171c:	2100      	movs	r1, #0
 800171e:	4805      	ldr	r0, [pc, #20]	; (8001734 <MX_I2C4_Init+0x74>)
 8001720:	f001 fdd3 	bl	80032ca <HAL_I2CEx_ConfigDigitalFilter>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800172a:	f000 f935 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200002ac 	.word	0x200002ac
 8001738:	40006000 	.word	0x40006000
 800173c:	00303d5b 	.word	0x00303d5b

08001740 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001744:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <MX_SPI1_Init+0x68>)
 8001746:	4a19      	ldr	r2, [pc, #100]	; (80017ac <MX_SPI1_Init+0x6c>)
 8001748:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <MX_SPI1_Init+0x68>)
 800174c:	2200      	movs	r2, #0
 800174e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001750:	4b15      	ldr	r3, [pc, #84]	; (80017a8 <MX_SPI1_Init+0x68>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <MX_SPI1_Init+0x68>)
 8001758:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800175c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800175e:	4b12      	ldr	r3, [pc, #72]	; (80017a8 <MX_SPI1_Init+0x68>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <MX_SPI1_Init+0x68>)
 8001766:	2200      	movs	r2, #0
 8001768:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800176a:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <MX_SPI1_Init+0x68>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001770:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <MX_SPI1_Init+0x68>)
 8001772:	2200      	movs	r2, #0
 8001774:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001776:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <MX_SPI1_Init+0x68>)
 8001778:	2200      	movs	r2, #0
 800177a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <MX_SPI1_Init+0x68>)
 800177e:	2200      	movs	r2, #0
 8001780:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <MX_SPI1_Init+0x68>)
 8001784:	2207      	movs	r2, #7
 8001786:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <MX_SPI1_Init+0x68>)
 800178a:	2200      	movs	r2, #0
 800178c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800178e:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <MX_SPI1_Init+0x68>)
 8001790:	2200      	movs	r2, #0
 8001792:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001794:	4804      	ldr	r0, [pc, #16]	; (80017a8 <MX_SPI1_Init+0x68>)
 8001796:	f002 fea1 	bl	80044dc <HAL_SPI_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80017a0:	f000 f8fa 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000424 	.word	0x20000424
 80017ac:	40013000 	.word	0x40013000

080017b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017b6:	4a15      	ldr	r2, [pc, #84]	; (800180c <MX_USART2_UART_Init+0x5c>)
 80017b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017d6:	220c      	movs	r2, #12
 80017d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017da:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e0:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017f2:	4805      	ldr	r0, [pc, #20]	; (8001808 <MX_USART2_UART_Init+0x58>)
 80017f4:	f003 fee4 	bl	80055c0 <HAL_UART_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017fe:	f000 f8cb 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20000488 	.word	0x20000488
 800180c:	40004400 	.word	0x40004400

08001810 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001814:	4b14      	ldr	r3, [pc, #80]	; (8001868 <MX_USART3_UART_Init+0x58>)
 8001816:	4a15      	ldr	r2, [pc, #84]	; (800186c <MX_USART3_UART_Init+0x5c>)
 8001818:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800181a:	4b13      	ldr	r3, [pc, #76]	; (8001868 <MX_USART3_UART_Init+0x58>)
 800181c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001820:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <MX_USART3_UART_Init+0x58>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <MX_USART3_UART_Init+0x58>)
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <MX_USART3_UART_Init+0x58>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_USART3_UART_Init+0x58>)
 8001836:	220c      	movs	r2, #12
 8001838:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800183a:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <MX_USART3_UART_Init+0x58>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001840:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_USART3_UART_Init+0x58>)
 8001842:	2200      	movs	r2, #0
 8001844:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001846:	4b08      	ldr	r3, [pc, #32]	; (8001868 <MX_USART3_UART_Init+0x58>)
 8001848:	2200      	movs	r2, #0
 800184a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <MX_USART3_UART_Init+0x58>)
 800184e:	2200      	movs	r2, #0
 8001850:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <MX_USART3_UART_Init+0x58>)
 8001854:	f003 feb4 	bl	80055c0 <HAL_UART_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800185e:	f000 f89b 	bl	8001998 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001862:	bf00      	nop
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	200002f8 	.word	0x200002f8
 800186c:	40004800 	.word	0x40004800

08001870 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08c      	sub	sp, #48	; 0x30
 8001874:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001876:	f107 031c 	add.w	r3, r7, #28
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	60da      	str	r2, [r3, #12]
 8001884:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001886:	4b41      	ldr	r3, [pc, #260]	; (800198c <MX_GPIO_Init+0x11c>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a40      	ldr	r2, [pc, #256]	; (800198c <MX_GPIO_Init+0x11c>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b3e      	ldr	r3, [pc, #248]	; (800198c <MX_GPIO_Init+0x11c>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0304 	and.w	r3, r3, #4
 800189a:	61bb      	str	r3, [r7, #24]
 800189c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800189e:	4b3b      	ldr	r3, [pc, #236]	; (800198c <MX_GPIO_Init+0x11c>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	4a3a      	ldr	r2, [pc, #232]	; (800198c <MX_GPIO_Init+0x11c>)
 80018a4:	f043 0320 	orr.w	r3, r3, #32
 80018a8:	6313      	str	r3, [r2, #48]	; 0x30
 80018aa:	4b38      	ldr	r3, [pc, #224]	; (800198c <MX_GPIO_Init+0x11c>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	f003 0320 	and.w	r3, r3, #32
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018b6:	4b35      	ldr	r3, [pc, #212]	; (800198c <MX_GPIO_Init+0x11c>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a34      	ldr	r2, [pc, #208]	; (800198c <MX_GPIO_Init+0x11c>)
 80018bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b32      	ldr	r3, [pc, #200]	; (800198c <MX_GPIO_Init+0x11c>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ce:	4b2f      	ldr	r3, [pc, #188]	; (800198c <MX_GPIO_Init+0x11c>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a2e      	ldr	r2, [pc, #184]	; (800198c <MX_GPIO_Init+0x11c>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b2c      	ldr	r3, [pc, #176]	; (800198c <MX_GPIO_Init+0x11c>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e6:	4b29      	ldr	r3, [pc, #164]	; (800198c <MX_GPIO_Init+0x11c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a28      	ldr	r2, [pc, #160]	; (800198c <MX_GPIO_Init+0x11c>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b26      	ldr	r3, [pc, #152]	; (800198c <MX_GPIO_Init+0x11c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018fe:	4b23      	ldr	r3, [pc, #140]	; (800198c <MX_GPIO_Init+0x11c>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	4a22      	ldr	r2, [pc, #136]	; (800198c <MX_GPIO_Init+0x11c>)
 8001904:	f043 0308 	orr.w	r3, r3, #8
 8001908:	6313      	str	r3, [r2, #48]	; 0x30
 800190a:	4b20      	ldr	r3, [pc, #128]	; (800198c <MX_GPIO_Init+0x11c>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	f003 0308 	and.w	r3, r3, #8
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001916:	4b1d      	ldr	r3, [pc, #116]	; (800198c <MX_GPIO_Init+0x11c>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	4a1c      	ldr	r2, [pc, #112]	; (800198c <MX_GPIO_Init+0x11c>)
 800191c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001920:	6313      	str	r3, [r2, #48]	; 0x30
 8001922:	4b1a      	ldr	r3, [pc, #104]	; (800198c <MX_GPIO_Init+0x11c>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800192e:	2200      	movs	r2, #0
 8001930:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001934:	4816      	ldr	r0, [pc, #88]	; (8001990 <MX_GPIO_Init+0x120>)
 8001936:	f000 ff71 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13, GPIO_PIN_RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8001940:	4814      	ldr	r0, [pc, #80]	; (8001994 <MX_GPIO_Init+0x124>)
 8001942:	f000 ff6b 	bl	800281c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001946:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800194a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194c:	2301      	movs	r3, #1
 800194e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	4619      	mov	r1, r3
 800195e:	480c      	ldr	r0, [pc, #48]	; (8001990 <MX_GPIO_Init+0x120>)
 8001960:	f000 fdb0 	bl	80024c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG10 PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13;
 8001964:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196a:	2301      	movs	r3, #1
 800196c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001972:	2300      	movs	r3, #0
 8001974:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001976:	f107 031c 	add.w	r3, r7, #28
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_GPIO_Init+0x124>)
 800197e:	f000 fda1 	bl	80024c4 <HAL_GPIO_Init>

}
 8001982:	bf00      	nop
 8001984:	3730      	adds	r7, #48	; 0x30
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023800 	.word	0x40023800
 8001990:	40020400 	.word	0x40020400
 8001994:	40021800 	.word	0x40021800

08001998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800199c:	b672      	cpsid	i
}
 800199e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1) {
 80019a0:	e7fe      	b.n	80019a0 <Error_Handler+0x8>
 80019a2:	0000      	movs	r0, r0
 80019a4:	0000      	movs	r0, r0
	...

080019a8 <AHT20_CalculateValues>:
    AHT20_CalculateValues(raw_data, temperature, humidity);
    return HAL_OK;
}

// Function to calculate temperature and humidity from raw data
void AHT20_CalculateValues(uint8_t *data, float *temperature, float *humidity) {
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
    uint32_t raw_humidity = (data[1] << 12) | (data[2] << 4) | (data[3] >> 4);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	3301      	adds	r3, #1
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	031a      	lsls	r2, r3, #12
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3302      	adds	r3, #2
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	011b      	lsls	r3, r3, #4
 80019c4:	4313      	orrs	r3, r2
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	3203      	adds	r2, #3
 80019ca:	7812      	ldrb	r2, [r2, #0]
 80019cc:	0912      	lsrs	r2, r2, #4
 80019ce:	b2d2      	uxtb	r2, r2
 80019d0:	4313      	orrs	r3, r2
 80019d2:	617b      	str	r3, [r7, #20]
    uint32_t raw_temperature = ((data[3] & 0xF) << 16) | (data[4] << 8) | data[5];
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3303      	adds	r3, #3
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	041b      	lsls	r3, r3, #16
 80019dc:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	3304      	adds	r3, #4
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	4313      	orrs	r3, r2
 80019ea:	68fa      	ldr	r2, [r7, #12]
 80019ec:	3205      	adds	r2, #5
 80019ee:	7812      	ldrb	r2, [r2, #0]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
    *humidity = (raw_humidity * 100.0) / 1048576;
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	ee07 3a90 	vmov	s15, r3
 80019fa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80019fe:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8001a50 <AHT20_CalculateValues+0xa8>
 8001a02:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a06:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8001a58 <AHT20_CalculateValues+0xb0>
 8001a0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a0e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	edc3 7a00 	vstr	s15, [r3]
    *temperature = ((raw_temperature * 200.0) / 1048576) - 50.0;
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	ee07 3a90 	vmov	s15, r3
 8001a1e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8001a22:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8001a60 <AHT20_CalculateValues+0xb8>
 8001a26:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001a2a:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8001a58 <AHT20_CalculateValues+0xb0>
 8001a2e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001a32:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8001a68 <AHT20_CalculateValues+0xc0>
 8001a36:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001a3a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	edc3 7a00 	vstr	s15, [r3]
}
 8001a44:	bf00      	nop
 8001a46:	371c      	adds	r7, #28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	00000000 	.word	0x00000000
 8001a54:	40590000 	.word	0x40590000
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	41300000 	.word	0x41300000
 8001a60:	00000000 	.word	0x00000000
 8001a64:	40690000 	.word	0x40690000
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	40490000 	.word	0x40490000

08001a70 <AHT20_ReadData_PCA9548A>:


// Read data from AHT20 via PCA9548A
HAL_StatusTypeDef AHT20_ReadData_PCA9548A(I2C_HandleTypeDef *hi2c, uint8_t pca9548a_address, uint8_t channel, float *temperature, float *humidity) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08c      	sub	sp, #48	; 0x30
 8001a74:	af02      	add	r7, sp, #8
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	72fb      	strb	r3, [r7, #11]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	72bb      	strb	r3, [r7, #10]
    uint8_t cmd_measure[] = {0xAC, 0x33, 0x00};
 8001a82:	4a53      	ldr	r2, [pc, #332]	; (8001bd0 <AHT20_ReadData_PCA9548A+0x160>)
 8001a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	8019      	strh	r1, [r3, #0]
 8001a8e:	3302      	adds	r3, #2
 8001a90:	0c12      	lsrs	r2, r2, #16
 8001a92:	701a      	strb	r2, [r3, #0]
    uint8_t raw_data[6];
    uint8_t status;

    // Select the appropriate channel on PCA9548A
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, pca9548a_address << 1, &channel, 1, HAL_MAX_DELAY);
 8001a94:	7afb      	ldrb	r3, [r7, #11]
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	b299      	uxth	r1, r3
 8001a9c:	f107 020a 	add.w	r2, r7, #10
 8001aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	68f8      	ldr	r0, [r7, #12]
 8001aaa:	f000 ff61 	bl	8002970 <HAL_I2C_Master_Transmit>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (ret != HAL_OK) return ret;
 8001ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d002      	beq.n	8001ac2 <AHT20_ReadData_PCA9548A+0x52>
 8001abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ac0:	e081      	b.n	8001bc6 <AHT20_ReadData_PCA9548A+0x156>

    // Check status of AHT20
    ret = HAL_I2C_Master_Transmit(hi2c, AHT20_ADDRESS, (uint8_t[]){0x71}, 1, HAL_MAX_DELAY);
 8001ac2:	2371      	movs	r3, #113	; 0x71
 8001ac4:	763b      	strb	r3, [r7, #24]
 8001ac6:	f107 0218 	add.w	r2, r7, #24
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	2170      	movs	r1, #112	; 0x70
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 ff4b 	bl	8002970 <HAL_I2C_Master_Transmit>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (ret != HAL_OK) return ret;
 8001ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d002      	beq.n	8001aee <AHT20_ReadData_PCA9548A+0x7e>
 8001ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aec:	e06b      	b.n	8001bc6 <AHT20_ReadData_PCA9548A+0x156>

    ret = HAL_I2C_Master_Receive(hi2c, AHT20_ADDRESS, &status, 1, HAL_MAX_DELAY);
 8001aee:	f107 021b 	add.w	r2, r7, #27
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2301      	movs	r3, #1
 8001afa:	2170      	movs	r1, #112	; 0x70
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f001 f82b 	bl	8002b58 <HAL_I2C_Master_Receive>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (ret != HAL_OK) return ret;
 8001b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d002      	beq.n	8001b16 <AHT20_ReadData_PCA9548A+0xa6>
 8001b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b14:	e057      	b.n	8001bc6 <AHT20_ReadData_PCA9548A+0x156>

    // Check if the sensor is calibrated
    if ((status & 0x18) != 0x18) {
 8001b16:	7efb      	ldrb	r3, [r7, #27]
 8001b18:	f003 0318 	and.w	r3, r3, #24
 8001b1c:	2b18      	cmp	r3, #24
 8001b1e:	d01f      	beq.n	8001b60 <AHT20_ReadData_PCA9548A+0xf0>
        uint8_t init_cmd[] = {0xBE, 0x08, 0x00};
 8001b20:	4a2c      	ldr	r2, [pc, #176]	; (8001bd4 <AHT20_ReadData_PCA9548A+0x164>)
 8001b22:	f107 0314 	add.w	r3, r7, #20
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	4611      	mov	r1, r2
 8001b2a:	8019      	strh	r1, [r3, #0]
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	0c12      	lsrs	r2, r2, #16
 8001b30:	701a      	strb	r2, [r3, #0]
        ret = HAL_I2C_Master_Transmit(hi2c, AHT20_ADDRESS, init_cmd, 3, HAL_MAX_DELAY);
 8001b32:	f107 0214 	add.w	r2, r7, #20
 8001b36:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	2170      	movs	r1, #112	; 0x70
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 ff15 	bl	8002970 <HAL_I2C_Master_Transmit>
 8001b46:	4603      	mov	r3, r0
 8001b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (ret != HAL_OK) return ret;
 8001b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d002      	beq.n	8001b5a <AHT20_ReadData_PCA9548A+0xea>
 8001b54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b58:	e035      	b.n	8001bc6 <AHT20_ReadData_PCA9548A+0x156>
        HAL_Delay(10);
 8001b5a:	200a      	movs	r0, #10
 8001b5c:	f000 fb5a 	bl	8002214 <HAL_Delay>
    }

    // Trigger measurement
    ret = HAL_I2C_Master_Transmit(hi2c, AHT20_ADDRESS, cmd_measure, sizeof(cmd_measure), HAL_MAX_DELAY);
 8001b60:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001b64:	f04f 33ff 	mov.w	r3, #4294967295
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	2170      	movs	r1, #112	; 0x70
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f000 fefe 	bl	8002970 <HAL_I2C_Master_Transmit>
 8001b74:	4603      	mov	r3, r0
 8001b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (ret != HAL_OK) return ret;
 8001b7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d002      	beq.n	8001b88 <AHT20_ReadData_PCA9548A+0x118>
 8001b82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b86:	e01e      	b.n	8001bc6 <AHT20_ReadData_PCA9548A+0x156>

    // Wait for measurement
    HAL_Delay(80);
 8001b88:	2050      	movs	r0, #80	; 0x50
 8001b8a:	f000 fb43 	bl	8002214 <HAL_Delay>

    // Read measurement data
    ret = HAL_I2C_Master_Receive(hi2c, AHT20_ADDRESS, raw_data, sizeof(raw_data), HAL_MAX_DELAY);
 8001b8e:	f107 021c 	add.w	r2, r7, #28
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	2306      	movs	r3, #6
 8001b9a:	2170      	movs	r1, #112	; 0x70
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f000 ffdb 	bl	8002b58 <HAL_I2C_Master_Receive>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (ret != HAL_OK) return ret;
 8001ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d002      	beq.n	8001bb6 <AHT20_ReadData_PCA9548A+0x146>
 8001bb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bb4:	e007      	b.n	8001bc6 <AHT20_ReadData_PCA9548A+0x156>

    // Calculate temperature and humidity
    AHT20_CalculateValues(raw_data, temperature, humidity);
 8001bb6:	f107 031c 	add.w	r3, r7, #28
 8001bba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fef2 	bl	80019a8 <AHT20_CalculateValues>
    return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3728      	adds	r7, #40	; 0x28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	0800ae08 	.word	0x0800ae08
 8001bd4:	0800ae0c 	.word	0x0800ae0c

08001bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <HAL_MspInit+0x44>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	4a0e      	ldr	r2, [pc, #56]	; (8001c1c <HAL_MspInit+0x44>)
 8001be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001be8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <HAL_MspInit+0x44>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf6:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_MspInit+0x44>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfa:	4a08      	ldr	r2, [pc, #32]	; (8001c1c <HAL_MspInit+0x44>)
 8001bfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c00:	6453      	str	r3, [r2, #68]	; 0x44
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <HAL_MspInit+0x44>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40023800 	.word	0x40023800

08001c20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b08e      	sub	sp, #56	; 0x38
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a45      	ldr	r2, [pc, #276]	; (8001d54 <HAL_I2C_MspInit+0x134>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d128      	bne.n	8001c94 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	4b45      	ldr	r3, [pc, #276]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a44      	ldr	r2, [pc, #272]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001c48:	f043 0302 	orr.w	r3, r3, #2
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b42      	ldr	r3, [pc, #264]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	623b      	str	r3, [r7, #32]
 8001c58:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c5a:	23c0      	movs	r3, #192	; 0xc0
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c5e:	2312      	movs	r3, #18
 8001c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c62:	2301      	movs	r3, #1
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c66:	2303      	movs	r3, #3
 8001c68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c72:	4619      	mov	r1, r3
 8001c74:	4839      	ldr	r0, [pc, #228]	; (8001d5c <HAL_I2C_MspInit+0x13c>)
 8001c76:	f000 fc25 	bl	80024c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c7a:	4b37      	ldr	r3, [pc, #220]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	4a36      	ldr	r2, [pc, #216]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001c80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c84:	6413      	str	r3, [r2, #64]	; 0x40
 8001c86:	4b34      	ldr	r3, [pc, #208]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001c92:	e05b      	b.n	8001d4c <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a31      	ldr	r2, [pc, #196]	; (8001d60 <HAL_I2C_MspInit+0x140>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d128      	bne.n	8001cf0 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c9e:	4b2e      	ldr	r3, [pc, #184]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a2d      	ldr	r2, [pc, #180]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001ca4:	f043 0320 	orr.w	r3, r3, #32
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0320 	and.w	r3, r3, #32
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cba:	2312      	movs	r3, #18
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4824      	ldr	r0, [pc, #144]	; (8001d64 <HAL_I2C_MspInit+0x144>)
 8001cd2:	f000 fbf7 	bl	80024c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cd6:	4b20      	ldr	r3, [pc, #128]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a1f      	ldr	r2, [pc, #124]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001cdc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697b      	ldr	r3, [r7, #20]
}
 8001cee:	e02d      	b.n	8001d4c <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C4)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1c      	ldr	r2, [pc, #112]	; (8001d68 <HAL_I2C_MspInit+0x148>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d128      	bne.n	8001d4c <HAL_I2C_MspInit+0x12c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cfa:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a16      	ldr	r2, [pc, #88]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001d00:	f043 0320 	orr.w	r3, r3, #32
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b14      	ldr	r3, [pc, #80]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0320 	and.w	r3, r3, #32
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d12:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d18:	2312      	movs	r3, #18
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d20:	2303      	movs	r3, #3
 8001d22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001d24:	2304      	movs	r3, #4
 8001d26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	480d      	ldr	r0, [pc, #52]	; (8001d64 <HAL_I2C_MspInit+0x144>)
 8001d30:	f000 fbc8 	bl	80024c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001d34:	4b08      	ldr	r3, [pc, #32]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <HAL_I2C_MspInit+0x138>)
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	bf00      	nop
 8001d4e:	3738      	adds	r7, #56	; 0x38
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40005400 	.word	0x40005400
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	40005800 	.word	0x40005800
 8001d64:	40021400 	.word	0x40021400
 8001d68:	40006000 	.word	0x40006000

08001d6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a1b      	ldr	r2, [pc, #108]	; (8001df8 <HAL_SPI_MspInit+0x8c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d12f      	bne.n	8001dee <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d8e:	4b1b      	ldr	r3, [pc, #108]	; (8001dfc <HAL_SPI_MspInit+0x90>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	4a1a      	ldr	r2, [pc, #104]	; (8001dfc <HAL_SPI_MspInit+0x90>)
 8001d94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d98:	6453      	str	r3, [r2, #68]	; 0x44
 8001d9a:	4b18      	ldr	r3, [pc, #96]	; (8001dfc <HAL_SPI_MspInit+0x90>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001da2:	613b      	str	r3, [r7, #16]
 8001da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <HAL_SPI_MspInit+0x90>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a14      	ldr	r2, [pc, #80]	; (8001dfc <HAL_SPI_MspInit+0x90>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <HAL_SPI_MspInit+0x90>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001dbe:	23f0      	movs	r3, #240	; 0xf0
 8001dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dce:	2305      	movs	r3, #5
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	f107 0314 	add.w	r3, r7, #20
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4809      	ldr	r0, [pc, #36]	; (8001e00 <HAL_SPI_MspInit+0x94>)
 8001dda:	f000 fb73 	bl	80024c4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001dde:	2200      	movs	r2, #0
 8001de0:	2100      	movs	r1, #0
 8001de2:	2023      	movs	r0, #35	; 0x23
 8001de4:	f000 fb15 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001de8:	2023      	movs	r0, #35	; 0x23
 8001dea:	f000 fb2e 	bl	800244a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001dee:	bf00      	nop
 8001df0:	3728      	adds	r7, #40	; 0x28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40013000 	.word	0x40013000
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40020000 	.word	0x40020000

08001e04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08c      	sub	sp, #48	; 0x30
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0c:	f107 031c 	add.w	r3, r7, #28
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
 8001e14:	605a      	str	r2, [r3, #4]
 8001e16:	609a      	str	r2, [r3, #8]
 8001e18:	60da      	str	r2, [r3, #12]
 8001e1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a2e      	ldr	r2, [pc, #184]	; (8001edc <HAL_UART_MspInit+0xd8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d128      	bne.n	8001e78 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e26:	4b2e      	ldr	r3, [pc, #184]	; (8001ee0 <HAL_UART_MspInit+0xdc>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	4a2d      	ldr	r2, [pc, #180]	; (8001ee0 <HAL_UART_MspInit+0xdc>)
 8001e2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e30:	6413      	str	r3, [r2, #64]	; 0x40
 8001e32:	4b2b      	ldr	r3, [pc, #172]	; (8001ee0 <HAL_UART_MspInit+0xdc>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	61bb      	str	r3, [r7, #24]
 8001e3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e3e:	4b28      	ldr	r3, [pc, #160]	; (8001ee0 <HAL_UART_MspInit+0xdc>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	4a27      	ldr	r2, [pc, #156]	; (8001ee0 <HAL_UART_MspInit+0xdc>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4a:	4b25      	ldr	r3, [pc, #148]	; (8001ee0 <HAL_UART_MspInit+0xdc>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e56:	230c      	movs	r3, #12
 8001e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e62:	2303      	movs	r3, #3
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e66:	2307      	movs	r3, #7
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e6a:	f107 031c 	add.w	r3, r7, #28
 8001e6e:	4619      	mov	r1, r3
 8001e70:	481c      	ldr	r0, [pc, #112]	; (8001ee4 <HAL_UART_MspInit+0xe0>)
 8001e72:	f000 fb27 	bl	80024c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e76:	e02d      	b.n	8001ed4 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a1a      	ldr	r2, [pc, #104]	; (8001ee8 <HAL_UART_MspInit+0xe4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d128      	bne.n	8001ed4 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e82:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <HAL_UART_MspInit+0xdc>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	4a16      	ldr	r2, [pc, #88]	; (8001ee0 <HAL_UART_MspInit+0xdc>)
 8001e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8e:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <HAL_UART_MspInit+0xdc>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <HAL_UART_MspInit+0xdc>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a10      	ldr	r2, [pc, #64]	; (8001ee0 <HAL_UART_MspInit+0xdc>)
 8001ea0:	f043 0308 	orr.w	r3, r3, #8
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <HAL_UART_MspInit+0xdc>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ec4:	2307      	movs	r3, #7
 8001ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ec8:	f107 031c 	add.w	r3, r7, #28
 8001ecc:	4619      	mov	r1, r3
 8001ece:	4807      	ldr	r0, [pc, #28]	; (8001eec <HAL_UART_MspInit+0xe8>)
 8001ed0:	f000 faf8 	bl	80024c4 <HAL_GPIO_Init>
}
 8001ed4:	bf00      	nop
 8001ed6:	3730      	adds	r7, #48	; 0x30
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40004400 	.word	0x40004400
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40020000 	.word	0x40020000
 8001ee8:	40004800 	.word	0x40004800
 8001eec:	40020c00 	.word	0x40020c00

08001ef0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ef4:	e7fe      	b.n	8001ef4 <NMI_Handler+0x4>

08001ef6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001efa:	e7fe      	b.n	8001efa <HardFault_Handler+0x4>

08001efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <MemManage_Handler+0x4>

08001f02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f06:	e7fe      	b.n	8001f06 <BusFault_Handler+0x4>

08001f08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <UsageFault_Handler+0x4>

08001f0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f3c:	f000 f94a 	bl	80021d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f40:	bf00      	nop
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001f48:	4802      	ldr	r0, [pc, #8]	; (8001f54 <SPI1_IRQHandler+0x10>)
 8001f4a:	f002 fe41 	bl	8004bd0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000424 	.word	0x20000424

08001f58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
	return 1;
 8001f5c:	2301      	movs	r3, #1
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <_kill>:

int _kill(int pid, int sig)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f72:	f004 f8e9 	bl	8006148 <__errno>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2216      	movs	r2, #22
 8001f7a:	601a      	str	r2, [r3, #0]
	return -1;
 8001f7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <_exit>:

void _exit (int status)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f90:	f04f 31ff 	mov.w	r1, #4294967295
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff ffe7 	bl	8001f68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f9a:	e7fe      	b.n	8001f9a <_exit+0x12>

08001f9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	e00a      	b.n	8001fc4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001fae:	f3af 8000 	nop.w
 8001fb2:	4601      	mov	r1, r0
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	60ba      	str	r2, [r7, #8]
 8001fba:	b2ca      	uxtb	r2, r1
 8001fbc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	dbf0      	blt.n	8001fae <_read+0x12>
	}

return len;
 8001fcc:	687b      	ldr	r3, [r7, #4]
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	e009      	b.n	8001ffc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	60ba      	str	r2, [r7, #8]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff fa01 	bl	80013f8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	429a      	cmp	r2, r3
 8002002:	dbf1      	blt.n	8001fe8 <_write+0x12>
	}
	return len;
 8002004:	687b      	ldr	r3, [r7, #4]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <_close>:

int _close(int file)
{
 800200e:	b480      	push	{r7}
 8002010:	b083      	sub	sp, #12
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
	return -1;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
 800202e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002036:	605a      	str	r2, [r3, #4]
	return 0;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr

08002046 <_isatty>:

int _isatty(int file)
{
 8002046:	b480      	push	{r7}
 8002048:	b083      	sub	sp, #12
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
	return 1;
 800204e:	2301      	movs	r3, #1
}
 8002050:	4618      	mov	r0, r3
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800205c:	b480      	push	{r7}
 800205e:	b085      	sub	sp, #20
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
	return 0;
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
	...

08002078 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002080:	4a14      	ldr	r2, [pc, #80]	; (80020d4 <_sbrk+0x5c>)
 8002082:	4b15      	ldr	r3, [pc, #84]	; (80020d8 <_sbrk+0x60>)
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800208c:	4b13      	ldr	r3, [pc, #76]	; (80020dc <_sbrk+0x64>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d102      	bne.n	800209a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <_sbrk+0x64>)
 8002096:	4a12      	ldr	r2, [pc, #72]	; (80020e0 <_sbrk+0x68>)
 8002098:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800209a:	4b10      	ldr	r3, [pc, #64]	; (80020dc <_sbrk+0x64>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d207      	bcs.n	80020b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020a8:	f004 f84e 	bl	8006148 <__errno>
 80020ac:	4603      	mov	r3, r0
 80020ae:	220c      	movs	r2, #12
 80020b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295
 80020b6:	e009      	b.n	80020cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <_sbrk+0x64>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020be:	4b07      	ldr	r3, [pc, #28]	; (80020dc <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	4a05      	ldr	r2, [pc, #20]	; (80020dc <_sbrk+0x64>)
 80020c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ca:	68fb      	ldr	r3, [r7, #12]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3718      	adds	r7, #24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	20080000 	.word	0x20080000
 80020d8:	00000400 	.word	0x00000400
 80020dc:	200002a0 	.word	0x200002a0
 80020e0:	20000520 	.word	0x20000520

080020e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <SystemInit+0x20>)
 80020ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ee:	4a05      	ldr	r2, [pc, #20]	; (8002104 <SystemInit+0x20>)
 80020f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000ed00 	.word	0xe000ed00

08002108 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002108:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002140 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800210c:	480d      	ldr	r0, [pc, #52]	; (8002144 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800210e:	490e      	ldr	r1, [pc, #56]	; (8002148 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002110:	4a0e      	ldr	r2, [pc, #56]	; (800214c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002112:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002114:	e002      	b.n	800211c <LoopCopyDataInit>

08002116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800211a:	3304      	adds	r3, #4

0800211c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800211c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800211e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002120:	d3f9      	bcc.n	8002116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002122:	4a0b      	ldr	r2, [pc, #44]	; (8002150 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002124:	4c0b      	ldr	r4, [pc, #44]	; (8002154 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002128:	e001      	b.n	800212e <LoopFillZerobss>

0800212a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800212a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800212c:	3204      	adds	r2, #4

0800212e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800212e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002130:	d3fb      	bcc.n	800212a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002132:	f7ff ffd7 	bl	80020e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002136:	f004 f80d 	bl	8006154 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800213a:	f7ff f96f 	bl	800141c <main>
  bx  lr    
 800213e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002140:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002148:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800214c:	0800b2ec 	.word	0x0800b2ec
  ldr r2, =_sbss
 8002150:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002154:	20000520 	.word	0x20000520

08002158 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002158:	e7fe      	b.n	8002158 <ADC_IRQHandler>

0800215a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800215e:	2003      	movs	r0, #3
 8002160:	f000 f94c 	bl	80023fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002164:	2000      	movs	r0, #0
 8002166:	f000 f805 	bl	8002174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800216a:	f7ff fd35 	bl	8001bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_InitTick+0x54>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <HAL_InitTick+0x58>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4619      	mov	r1, r3
 8002186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800218a:	fbb3 f3f1 	udiv	r3, r3, r1
 800218e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f967 	bl	8002466 <HAL_SYSTICK_Config>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e00e      	b.n	80021c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b0f      	cmp	r3, #15
 80021a6:	d80a      	bhi.n	80021be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a8:	2200      	movs	r2, #0
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	f000 f92f 	bl	8002412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b4:	4a06      	ldr	r2, [pc, #24]	; (80021d0 <HAL_InitTick+0x5c>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	e000      	b.n	80021c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000008 	.word	0x20000008
 80021cc:	20000010 	.word	0x20000010
 80021d0:	2000000c 	.word	0x2000000c

080021d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_IncTick+0x20>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_IncTick+0x24>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4413      	add	r3, r2
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <HAL_IncTick+0x24>)
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20000010 	.word	0x20000010
 80021f8:	2000050c 	.word	0x2000050c

080021fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <HAL_GetTick+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	2000050c 	.word	0x2000050c

08002214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800221c:	f7ff ffee 	bl	80021fc <HAL_GetTick>
 8002220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222c:	d005      	beq.n	800223a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800222e:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <HAL_Delay+0x44>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4413      	add	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800223a:	bf00      	nop
 800223c:	f7ff ffde 	bl	80021fc <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	429a      	cmp	r2, r3
 800224a:	d8f7      	bhi.n	800223c <HAL_Delay+0x28>
  {
  }
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000010 	.word	0x20000010

0800225c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <__NVIC_SetPriorityGrouping+0x40>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002278:	4013      	ands	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002286:	4313      	orrs	r3, r2
 8002288:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228a:	4a04      	ldr	r2, [pc, #16]	; (800229c <__NVIC_SetPriorityGrouping+0x40>)
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	60d3      	str	r3, [r2, #12]
}
 8002290:	bf00      	nop
 8002292:	3714      	adds	r7, #20
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	e000ed00 	.word	0xe000ed00
 80022a0:	05fa0000 	.word	0x05fa0000

080022a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <__NVIC_GetPriorityGrouping+0x18>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	0a1b      	lsrs	r3, r3, #8
 80022ae:	f003 0307 	and.w	r3, r3, #7
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	db0b      	blt.n	80022ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	f003 021f 	and.w	r2, r3, #31
 80022d8:	4907      	ldr	r1, [pc, #28]	; (80022f8 <__NVIC_EnableIRQ+0x38>)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	2001      	movs	r0, #1
 80022e2:	fa00 f202 	lsl.w	r2, r0, r2
 80022e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000e100 	.word	0xe000e100

080022fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	6039      	str	r1, [r7, #0]
 8002306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	2b00      	cmp	r3, #0
 800230e:	db0a      	blt.n	8002326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	490c      	ldr	r1, [pc, #48]	; (8002348 <__NVIC_SetPriority+0x4c>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	0112      	lsls	r2, r2, #4
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	440b      	add	r3, r1
 8002320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002324:	e00a      	b.n	800233c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4908      	ldr	r1, [pc, #32]	; (800234c <__NVIC_SetPriority+0x50>)
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	3b04      	subs	r3, #4
 8002334:	0112      	lsls	r2, r2, #4
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	440b      	add	r3, r1
 800233a:	761a      	strb	r2, [r3, #24]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000e100 	.word	0xe000e100
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f1c3 0307 	rsb	r3, r3, #7
 800236a:	2b04      	cmp	r3, #4
 800236c:	bf28      	it	cs
 800236e:	2304      	movcs	r3, #4
 8002370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3304      	adds	r3, #4
 8002376:	2b06      	cmp	r3, #6
 8002378:	d902      	bls.n	8002380 <NVIC_EncodePriority+0x30>
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3b03      	subs	r3, #3
 800237e:	e000      	b.n	8002382 <NVIC_EncodePriority+0x32>
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	f04f 32ff 	mov.w	r2, #4294967295
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	401a      	ands	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002398:	f04f 31ff 	mov.w	r1, #4294967295
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43d9      	mvns	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	4313      	orrs	r3, r2
         );
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3724      	adds	r7, #36	; 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023c8:	d301      	bcc.n	80023ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ca:	2301      	movs	r3, #1
 80023cc:	e00f      	b.n	80023ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ce:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <SysTick_Config+0x40>)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023d6:	210f      	movs	r1, #15
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295
 80023dc:	f7ff ff8e 	bl	80022fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <SysTick_Config+0x40>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023e6:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <SysTick_Config+0x40>)
 80023e8:	2207      	movs	r2, #7
 80023ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	e000e010 	.word	0xe000e010

080023fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff ff29 	bl	800225c <__NVIC_SetPriorityGrouping>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002412:	b580      	push	{r7, lr}
 8002414:	b086      	sub	sp, #24
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002424:	f7ff ff3e 	bl	80022a4 <__NVIC_GetPriorityGrouping>
 8002428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	6978      	ldr	r0, [r7, #20]
 8002430:	f7ff ff8e 	bl	8002350 <NVIC_EncodePriority>
 8002434:	4602      	mov	r2, r0
 8002436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff5d 	bl	80022fc <__NVIC_SetPriority>
}
 8002442:	bf00      	nop
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff31 	bl	80022c0 <__NVIC_EnableIRQ>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff ffa2 	bl	80023b8 <SysTick_Config>
 8002474:	4603      	mov	r3, r0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d004      	beq.n	800249c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2280      	movs	r2, #128	; 0x80
 8002496:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e00c      	b.n	80024b6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2205      	movs	r2, #5
 80024a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f022 0201 	bic.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b089      	sub	sp, #36	; 0x24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80024da:	2300      	movs	r3, #0
 80024dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	e175      	b.n	80027d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80024e4:	2201      	movs	r2, #1
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4013      	ands	r3, r2
 80024f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	f040 8164 	bne.w	80027ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b01      	cmp	r3, #1
 800250c:	d005      	beq.n	800251a <HAL_GPIO_Init+0x56>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d130      	bne.n	800257c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	2203      	movs	r2, #3
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	68da      	ldr	r2, [r3, #12]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	005b      	lsls	r3, r3, #1
 800253a:	fa02 f303 	lsl.w	r3, r2, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002550:	2201      	movs	r2, #1
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	091b      	lsrs	r3, r3, #4
 8002566:	f003 0201 	and.w	r2, r3, #1
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f003 0303 	and.w	r3, r3, #3
 8002584:	2b03      	cmp	r3, #3
 8002586:	d017      	beq.n	80025b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	2203      	movs	r2, #3
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	43db      	mvns	r3, r3
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4013      	ands	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f003 0303 	and.w	r3, r3, #3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d123      	bne.n	800260c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	08da      	lsrs	r2, r3, #3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3208      	adds	r2, #8
 80025cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	f003 0307 	and.w	r3, r3, #7
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	220f      	movs	r2, #15
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	691a      	ldr	r2, [r3, #16]
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f003 0307 	and.w	r3, r3, #7
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	08da      	lsrs	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3208      	adds	r2, #8
 8002606:	69b9      	ldr	r1, [r7, #24]
 8002608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	2203      	movs	r2, #3
 8002618:	fa02 f303 	lsl.w	r3, r2, r3
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f003 0203 	and.w	r2, r3, #3
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	4313      	orrs	r3, r2
 8002638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002648:	2b00      	cmp	r3, #0
 800264a:	f000 80be 	beq.w	80027ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800264e:	4b66      	ldr	r3, [pc, #408]	; (80027e8 <HAL_GPIO_Init+0x324>)
 8002650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002652:	4a65      	ldr	r2, [pc, #404]	; (80027e8 <HAL_GPIO_Init+0x324>)
 8002654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002658:	6453      	str	r3, [r2, #68]	; 0x44
 800265a:	4b63      	ldr	r3, [pc, #396]	; (80027e8 <HAL_GPIO_Init+0x324>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002666:	4a61      	ldr	r2, [pc, #388]	; (80027ec <HAL_GPIO_Init+0x328>)
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	089b      	lsrs	r3, r3, #2
 800266c:	3302      	adds	r3, #2
 800266e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	220f      	movs	r2, #15
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a58      	ldr	r2, [pc, #352]	; (80027f0 <HAL_GPIO_Init+0x32c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d037      	beq.n	8002702 <HAL_GPIO_Init+0x23e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a57      	ldr	r2, [pc, #348]	; (80027f4 <HAL_GPIO_Init+0x330>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d031      	beq.n	80026fe <HAL_GPIO_Init+0x23a>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a56      	ldr	r2, [pc, #344]	; (80027f8 <HAL_GPIO_Init+0x334>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d02b      	beq.n	80026fa <HAL_GPIO_Init+0x236>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a55      	ldr	r2, [pc, #340]	; (80027fc <HAL_GPIO_Init+0x338>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d025      	beq.n	80026f6 <HAL_GPIO_Init+0x232>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a54      	ldr	r2, [pc, #336]	; (8002800 <HAL_GPIO_Init+0x33c>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01f      	beq.n	80026f2 <HAL_GPIO_Init+0x22e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a53      	ldr	r2, [pc, #332]	; (8002804 <HAL_GPIO_Init+0x340>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d019      	beq.n	80026ee <HAL_GPIO_Init+0x22a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a52      	ldr	r2, [pc, #328]	; (8002808 <HAL_GPIO_Init+0x344>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_GPIO_Init+0x226>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a51      	ldr	r2, [pc, #324]	; (800280c <HAL_GPIO_Init+0x348>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_GPIO_Init+0x222>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a50      	ldr	r2, [pc, #320]	; (8002810 <HAL_GPIO_Init+0x34c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_Init+0x21e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4f      	ldr	r2, [pc, #316]	; (8002814 <HAL_GPIO_Init+0x350>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_GPIO_Init+0x21a>
 80026da:	2309      	movs	r3, #9
 80026dc:	e012      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026de:	230a      	movs	r3, #10
 80026e0:	e010      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026e2:	2308      	movs	r3, #8
 80026e4:	e00e      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026e6:	2307      	movs	r3, #7
 80026e8:	e00c      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026ea:	2306      	movs	r3, #6
 80026ec:	e00a      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026ee:	2305      	movs	r3, #5
 80026f0:	e008      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026f2:	2304      	movs	r3, #4
 80026f4:	e006      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026f6:	2303      	movs	r3, #3
 80026f8:	e004      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e002      	b.n	8002704 <HAL_GPIO_Init+0x240>
 80026fe:	2301      	movs	r3, #1
 8002700:	e000      	b.n	8002704 <HAL_GPIO_Init+0x240>
 8002702:	2300      	movs	r3, #0
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	f002 0203 	and.w	r2, r2, #3
 800270a:	0092      	lsls	r2, r2, #2
 800270c:	4093      	lsls	r3, r2
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002714:	4935      	ldr	r1, [pc, #212]	; (80027ec <HAL_GPIO_Init+0x328>)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	3302      	adds	r3, #2
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002722:	4b3d      	ldr	r3, [pc, #244]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	43db      	mvns	r3, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4013      	ands	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002746:	4a34      	ldr	r2, [pc, #208]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800274c:	4b32      	ldr	r3, [pc, #200]	; (8002818 <HAL_GPIO_Init+0x354>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4313      	orrs	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002770:	4a29      	ldr	r2, [pc, #164]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002776:	4b28      	ldr	r3, [pc, #160]	; (8002818 <HAL_GPIO_Init+0x354>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800279a:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <HAL_GPIO_Init+0x354>)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027a0:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <HAL_GPIO_Init+0x354>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027c4:	4a14      	ldr	r2, [pc, #80]	; (8002818 <HAL_GPIO_Init+0x354>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	3301      	adds	r3, #1
 80027ce:	61fb      	str	r3, [r7, #28]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2b0f      	cmp	r3, #15
 80027d4:	f67f ae86 	bls.w	80024e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80027d8:	bf00      	nop
 80027da:	bf00      	nop
 80027dc:	3724      	adds	r7, #36	; 0x24
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40013800 	.word	0x40013800
 80027f0:	40020000 	.word	0x40020000
 80027f4:	40020400 	.word	0x40020400
 80027f8:	40020800 	.word	0x40020800
 80027fc:	40020c00 	.word	0x40020c00
 8002800:	40021000 	.word	0x40021000
 8002804:	40021400 	.word	0x40021400
 8002808:	40021800 	.word	0x40021800
 800280c:	40021c00 	.word	0x40021c00
 8002810:	40022000 	.word	0x40022000
 8002814:	40022400 	.word	0x40022400
 8002818:	40013c00 	.word	0x40013c00

0800281c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	460b      	mov	r3, r1
 8002826:	807b      	strh	r3, [r7, #2]
 8002828:	4613      	mov	r3, r2
 800282a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800282c:	787b      	ldrb	r3, [r7, #1]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002832:	887a      	ldrh	r2, [r7, #2]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002838:	e003      	b.n	8002842 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800283a:	887b      	ldrh	r3, [r7, #2]
 800283c:	041a      	lsls	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	619a      	str	r2, [r3, #24]
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e07f      	b.n	8002962 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff f9d2 	bl	8001c20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2224      	movs	r2, #36	; 0x24
 8002880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f022 0201 	bic.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d107      	bne.n	80028ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028c6:	609a      	str	r2, [r3, #8]
 80028c8:	e006      	b.n	80028d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d104      	bne.n	80028ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	6859      	ldr	r1, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b1d      	ldr	r3, [pc, #116]	; (800296c <HAL_I2C_Init+0x11c>)
 80028f6:	430b      	orrs	r3, r1
 80028f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	68da      	ldr	r2, [r3, #12]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002908:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	430a      	orrs	r2, r1
 8002922:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69d9      	ldr	r1, [r3, #28]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a1a      	ldr	r2, [r3, #32]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	430a      	orrs	r2, r1
 8002932:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f042 0201 	orr.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2220      	movs	r2, #32
 800294e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	02008000 	.word	0x02008000

08002970 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b088      	sub	sp, #32
 8002974:	af02      	add	r7, sp, #8
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	607a      	str	r2, [r7, #4]
 800297a:	461a      	mov	r2, r3
 800297c:	460b      	mov	r3, r1
 800297e:	817b      	strh	r3, [r7, #10]
 8002980:	4613      	mov	r3, r2
 8002982:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b20      	cmp	r3, #32
 800298e:	f040 80da 	bne.w	8002b46 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_I2C_Master_Transmit+0x30>
 800299c:	2302      	movs	r3, #2
 800299e:	e0d3      	b.n	8002b48 <HAL_I2C_Master_Transmit+0x1d8>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029a8:	f7ff fc28 	bl	80021fc <HAL_GetTick>
 80029ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	2319      	movs	r3, #25
 80029b4:	2201      	movs	r2, #1
 80029b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029ba:	68f8      	ldr	r0, [r7, #12]
 80029bc:	f000 f9e6 	bl	8002d8c <I2C_WaitOnFlagUntilTimeout>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d001      	beq.n	80029ca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e0be      	b.n	8002b48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2221      	movs	r2, #33	; 0x21
 80029ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2210      	movs	r2, #16
 80029d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	893a      	ldrh	r2, [r7, #8]
 80029ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2bff      	cmp	r3, #255	; 0xff
 80029fa:	d90e      	bls.n	8002a1a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	22ff      	movs	r2, #255	; 0xff
 8002a00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	8979      	ldrh	r1, [r7, #10]
 8002a0a:	4b51      	ldr	r3, [pc, #324]	; (8002b50 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fbdc 	bl	80031d0 <I2C_TransferConfig>
 8002a18:	e06c      	b.n	8002af4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	8979      	ldrh	r1, [r7, #10]
 8002a2c:	4b48      	ldr	r3, [pc, #288]	; (8002b50 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fbcb 	bl	80031d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a3a:	e05b      	b.n	8002af4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	6a39      	ldr	r1, [r7, #32]
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f9e3 	bl	8002e0c <I2C_WaitOnTXISFlagUntilTimeout>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e07b      	b.n	8002b48 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	781a      	ldrb	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	b29a      	uxth	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d034      	beq.n	8002af4 <HAL_I2C_Master_Transmit+0x184>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d130      	bne.n	8002af4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2180      	movs	r1, #128	; 0x80
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f000 f975 	bl	8002d8c <I2C_WaitOnFlagUntilTimeout>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e04d      	b.n	8002b48 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	2bff      	cmp	r3, #255	; 0xff
 8002ab4:	d90e      	bls.n	8002ad4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	22ff      	movs	r2, #255	; 0xff
 8002aba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac0:	b2da      	uxtb	r2, r3
 8002ac2:	8979      	ldrh	r1, [r7, #10]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002acc:	68f8      	ldr	r0, [r7, #12]
 8002ace:	f000 fb7f 	bl	80031d0 <I2C_TransferConfig>
 8002ad2:	e00f      	b.n	8002af4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	8979      	ldrh	r1, [r7, #10]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 fb6e 	bl	80031d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d19e      	bne.n	8002a3c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	6a39      	ldr	r1, [r7, #32]
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f9c2 	bl	8002e8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e01a      	b.n	8002b48 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2220      	movs	r2, #32
 8002b18:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <HAL_I2C_Master_Transmit+0x1e4>)
 8002b26:	400b      	ands	r3, r1
 8002b28:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	e000      	b.n	8002b48 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002b46:	2302      	movs	r3, #2
  }
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3718      	adds	r7, #24
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	80002000 	.word	0x80002000
 8002b54:	fe00e800 	.word	0xfe00e800

08002b58 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b088      	sub	sp, #32
 8002b5c:	af02      	add	r7, sp, #8
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	607a      	str	r2, [r7, #4]
 8002b62:	461a      	mov	r2, r3
 8002b64:	460b      	mov	r3, r1
 8002b66:	817b      	strh	r3, [r7, #10]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2b20      	cmp	r3, #32
 8002b76:	f040 80db 	bne.w	8002d30 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_I2C_Master_Receive+0x30>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e0d4      	b.n	8002d32 <HAL_I2C_Master_Receive+0x1da>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b90:	f7ff fb34 	bl	80021fc <HAL_GetTick>
 8002b94:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	2319      	movs	r3, #25
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f000 f8f2 	bl	8002d8c <I2C_WaitOnFlagUntilTimeout>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e0bf      	b.n	8002d32 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2222      	movs	r2, #34	; 0x22
 8002bb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2210      	movs	r2, #16
 8002bbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	893a      	ldrh	r2, [r7, #8]
 8002bd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2bff      	cmp	r3, #255	; 0xff
 8002be2:	d90e      	bls.n	8002c02 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	22ff      	movs	r2, #255	; 0xff
 8002be8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	8979      	ldrh	r1, [r7, #10]
 8002bf2:	4b52      	ldr	r3, [pc, #328]	; (8002d3c <HAL_I2C_Master_Receive+0x1e4>)
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002bfa:	68f8      	ldr	r0, [r7, #12]
 8002bfc:	f000 fae8 	bl	80031d0 <I2C_TransferConfig>
 8002c00:	e06d      	b.n	8002cde <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c10:	b2da      	uxtb	r2, r3
 8002c12:	8979      	ldrh	r1, [r7, #10]
 8002c14:	4b49      	ldr	r3, [pc, #292]	; (8002d3c <HAL_I2C_Master_Receive+0x1e4>)
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 fad7 	bl	80031d0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002c22:	e05c      	b.n	8002cde <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	6a39      	ldr	r1, [r7, #32]
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f96b 	bl	8002f04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e07c      	b.n	8002d32 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4a:	1c5a      	adds	r2, r3, #1
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d034      	beq.n	8002cde <HAL_I2C_Master_Receive+0x186>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d130      	bne.n	8002cde <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	6a3b      	ldr	r3, [r7, #32]
 8002c82:	2200      	movs	r2, #0
 8002c84:	2180      	movs	r1, #128	; 0x80
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 f880 	bl	8002d8c <I2C_WaitOnFlagUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e04d      	b.n	8002d32 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	2bff      	cmp	r3, #255	; 0xff
 8002c9e:	d90e      	bls.n	8002cbe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	22ff      	movs	r2, #255	; 0xff
 8002ca4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	8979      	ldrh	r1, [r7, #10]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fa8a 	bl	80031d0 <I2C_TransferConfig>
 8002cbc:	e00f      	b.n	8002cde <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	8979      	ldrh	r1, [r7, #10]
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 fa79 	bl	80031d0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d19d      	bne.n	8002c24 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	6a39      	ldr	r1, [r7, #32]
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 f8cd 	bl	8002e8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e01a      	b.n	8002d32 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2220      	movs	r2, #32
 8002d02:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	6859      	ldr	r1, [r3, #4]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <HAL_I2C_Master_Receive+0x1e8>)
 8002d10:	400b      	ands	r3, r1
 8002d12:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	e000      	b.n	8002d32 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002d30:	2302      	movs	r3, #2
  }
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	80002400 	.word	0x80002400
 8002d40:	fe00e800 	.word	0xfe00e800

08002d44 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f003 0302 	and.w	r3, r3, #2
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d103      	bne.n	8002d62 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d007      	beq.n	8002d80 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	619a      	str	r2, [r3, #24]
  }
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	603b      	str	r3, [r7, #0]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d9c:	e022      	b.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da4:	d01e      	beq.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da6:	f7ff fa29 	bl	80021fc <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	683a      	ldr	r2, [r7, #0]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d302      	bcc.n	8002dbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d113      	bne.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc0:	f043 0220 	orr.w	r2, r3, #32
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2220      	movs	r2, #32
 8002dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e00f      	b.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4013      	ands	r3, r2
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d0cd      	beq.n	8002d9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e18:	e02c      	b.n	8002e74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f8ea 	bl	8002ff8 <I2C_IsErrorOccurred>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e02a      	b.n	8002e84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d01e      	beq.n	8002e74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e36:	f7ff f9e1 	bl	80021fc <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d302      	bcc.n	8002e4c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d113      	bne.n	8002e74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e50:	f043 0220 	orr.w	r2, r3, #32
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e007      	b.n	8002e84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d1cb      	bne.n	8002e1a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e98:	e028      	b.n	8002eec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f8aa 	bl	8002ff8 <I2C_IsErrorOccurred>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e026      	b.n	8002efc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eae:	f7ff f9a5 	bl	80021fc <HAL_GetTick>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	1ad3      	subs	r3, r2, r3
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d302      	bcc.n	8002ec4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d113      	bne.n	8002eec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	f043 0220 	orr.w	r2, r3, #32
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e007      	b.n	8002efc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b20      	cmp	r3, #32
 8002ef8:	d1cf      	bne.n	8002e9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f10:	e064      	b.n	8002fdc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	68f8      	ldr	r0, [r7, #12]
 8002f18:	f000 f86e 	bl	8002ff8 <I2C_IsErrorOccurred>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d001      	beq.n	8002f26 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e062      	b.n	8002fec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	699b      	ldr	r3, [r3, #24]
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b20      	cmp	r3, #32
 8002f32:	d138      	bne.n	8002fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d105      	bne.n	8002f4e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	e04e      	b.n	8002fec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f003 0310 	and.w	r3, r3, #16
 8002f58:	2b10      	cmp	r3, #16
 8002f5a:	d107      	bne.n	8002f6c <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2210      	movs	r2, #16
 8002f62:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2204      	movs	r2, #4
 8002f68:	645a      	str	r2, [r3, #68]	; 0x44
 8002f6a:	e002      	b.n	8002f72 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2220      	movs	r2, #32
 8002f78:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	6859      	ldr	r1, [r3, #4]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	4b1b      	ldr	r3, [pc, #108]	; (8002ff4 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002f86:	400b      	ands	r3, r1
 8002f88:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e022      	b.n	8002fec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fa6:	f7ff f929 	bl	80021fc <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d302      	bcc.n	8002fbc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d10f      	bne.n	8002fdc <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc0:	f043 0220 	orr.w	r2, r3, #32
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e007      	b.n	8002fec <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d193      	bne.n	8002f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	fe00e800 	.word	0xfe00e800

08002ff8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b08a      	sub	sp, #40	; 0x28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003004:	2300      	movs	r3, #0
 8003006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003012:	2300      	movs	r3, #0
 8003014:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	f003 0310 	and.w	r3, r3, #16
 8003020:	2b00      	cmp	r3, #0
 8003022:	d075      	beq.n	8003110 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2210      	movs	r2, #16
 800302a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800302c:	e056      	b.n	80030dc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003034:	d052      	beq.n	80030dc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003036:	f7ff f8e1 	bl	80021fc <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	68ba      	ldr	r2, [r7, #8]
 8003042:	429a      	cmp	r2, r3
 8003044:	d302      	bcc.n	800304c <I2C_IsErrorOccurred+0x54>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d147      	bne.n	80030dc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003056:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800305e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800306a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800306e:	d12e      	bne.n	80030ce <I2C_IsErrorOccurred+0xd6>
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003076:	d02a      	beq.n	80030ce <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	2b20      	cmp	r3, #32
 800307c:	d027      	beq.n	80030ce <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685a      	ldr	r2, [r3, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800308c:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800308e:	f7ff f8b5 	bl	80021fc <HAL_GetTick>
 8003092:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003094:	e01b      	b.n	80030ce <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003096:	f7ff f8b1 	bl	80021fc <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b19      	cmp	r3, #25
 80030a2:	d914      	bls.n	80030ce <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	f043 0220 	orr.w	r2, r3, #32
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b20      	cmp	r3, #32
 80030da:	d1dc      	bne.n	8003096 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f003 0320 	and.w	r3, r3, #32
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d003      	beq.n	80030f2 <I2C_IsErrorOccurred+0xfa>
 80030ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d09d      	beq.n	800302e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80030f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d103      	bne.n	8003102 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2220      	movs	r2, #32
 8003100:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003102:	6a3b      	ldr	r3, [r7, #32]
 8003104:	f043 0304 	orr.w	r3, r3, #4
 8003108:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00b      	beq.n	800313a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003122:	6a3b      	ldr	r3, [r7, #32]
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003132:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00b      	beq.n	800315c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	f043 0308 	orr.w	r3, r3, #8
 800314a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003154:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	f043 0302 	orr.w	r3, r3, #2
 800316c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003176:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800317e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003182:	2b00      	cmp	r3, #0
 8003184:	d01c      	beq.n	80031c0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f7ff fddc 	bl	8002d44 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6859      	ldr	r1, [r3, #4]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	4b0d      	ldr	r3, [pc, #52]	; (80031cc <I2C_IsErrorOccurred+0x1d4>)
 8003198:	400b      	ands	r3, r1
 800319a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	431a      	orrs	r2, r3
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80031c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3728      	adds	r7, #40	; 0x28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	fe00e800 	.word	0xfe00e800

080031d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b087      	sub	sp, #28
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	607b      	str	r3, [r7, #4]
 80031da:	460b      	mov	r3, r1
 80031dc:	817b      	strh	r3, [r7, #10]
 80031de:	4613      	mov	r3, r2
 80031e0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031e2:	897b      	ldrh	r3, [r7, #10]
 80031e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031e8:	7a7b      	ldrb	r3, [r7, #9]
 80031ea:	041b      	lsls	r3, r3, #16
 80031ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031f0:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80031f6:	6a3b      	ldr	r3, [r7, #32]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031fe:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	0d5b      	lsrs	r3, r3, #21
 800320a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800320e:	4b08      	ldr	r3, [pc, #32]	; (8003230 <I2C_TransferConfig+0x60>)
 8003210:	430b      	orrs	r3, r1
 8003212:	43db      	mvns	r3, r3
 8003214:	ea02 0103 	and.w	r1, r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	03ff63ff 	.word	0x03ff63ff

08003234 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b20      	cmp	r3, #32
 8003248:	d138      	bne.n	80032bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003250:	2b01      	cmp	r3, #1
 8003252:	d101      	bne.n	8003258 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003254:	2302      	movs	r3, #2
 8003256:	e032      	b.n	80032be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2224      	movs	r2, #36	; 0x24
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f022 0201 	bic.w	r2, r2, #1
 8003276:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003286:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6819      	ldr	r1, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f042 0201 	orr.w	r2, r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	e000      	b.n	80032be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80032bc:	2302      	movs	r3, #2
  }
}
 80032be:	4618      	mov	r0, r3
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b085      	sub	sp, #20
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d139      	bne.n	8003354 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d101      	bne.n	80032ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e033      	b.n	8003356 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2224      	movs	r2, #36	; 0x24
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0201 	bic.w	r2, r2, #1
 800330c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800331c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	021b      	lsls	r3, r3, #8
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	4313      	orrs	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2220      	movs	r2, #32
 8003344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	e000      	b.n	8003356 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003354:	2302      	movs	r3, #2
  }
}
 8003356:	4618      	mov	r0, r3
 8003358:	3714      	adds	r7, #20
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003368:	4b05      	ldr	r3, [pc, #20]	; (8003380 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a04      	ldr	r2, [pc, #16]	; (8003380 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800336e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003372:	6013      	str	r3, [r2, #0]
}
 8003374:	bf00      	nop
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40007000 	.word	0x40007000

08003384 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b086      	sub	sp, #24
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800338c:	2300      	movs	r3, #0
 800338e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e29b      	b.n	80038d2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f000 8087 	beq.w	80034b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033a8:	4b96      	ldr	r3, [pc, #600]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 030c 	and.w	r3, r3, #12
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d00c      	beq.n	80033ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033b4:	4b93      	ldr	r3, [pc, #588]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 030c 	and.w	r3, r3, #12
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d112      	bne.n	80033e6 <HAL_RCC_OscConfig+0x62>
 80033c0:	4b90      	ldr	r3, [pc, #576]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033cc:	d10b      	bne.n	80033e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ce:	4b8d      	ldr	r3, [pc, #564]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d06c      	beq.n	80034b4 <HAL_RCC_OscConfig+0x130>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d168      	bne.n	80034b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e275      	b.n	80038d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ee:	d106      	bne.n	80033fe <HAL_RCC_OscConfig+0x7a>
 80033f0:	4b84      	ldr	r3, [pc, #528]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a83      	ldr	r2, [pc, #524]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 80033f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fa:	6013      	str	r3, [r2, #0]
 80033fc:	e02e      	b.n	800345c <HAL_RCC_OscConfig+0xd8>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d10c      	bne.n	8003420 <HAL_RCC_OscConfig+0x9c>
 8003406:	4b7f      	ldr	r3, [pc, #508]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a7e      	ldr	r2, [pc, #504]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 800340c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	4b7c      	ldr	r3, [pc, #496]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a7b      	ldr	r2, [pc, #492]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 8003418:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800341c:	6013      	str	r3, [r2, #0]
 800341e:	e01d      	b.n	800345c <HAL_RCC_OscConfig+0xd8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003428:	d10c      	bne.n	8003444 <HAL_RCC_OscConfig+0xc0>
 800342a:	4b76      	ldr	r3, [pc, #472]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a75      	ldr	r2, [pc, #468]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 8003430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4b73      	ldr	r3, [pc, #460]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a72      	ldr	r2, [pc, #456]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 800343c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e00b      	b.n	800345c <HAL_RCC_OscConfig+0xd8>
 8003444:	4b6f      	ldr	r3, [pc, #444]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a6e      	ldr	r2, [pc, #440]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 800344a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800344e:	6013      	str	r3, [r2, #0]
 8003450:	4b6c      	ldr	r3, [pc, #432]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a6b      	ldr	r2, [pc, #428]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 8003456:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800345a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d013      	beq.n	800348c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003464:	f7fe feca 	bl	80021fc <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800346a:	e008      	b.n	800347e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800346c:	f7fe fec6 	bl	80021fc <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	2b64      	cmp	r3, #100	; 0x64
 8003478:	d901      	bls.n	800347e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e229      	b.n	80038d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800347e:	4b61      	ldr	r3, [pc, #388]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d0f0      	beq.n	800346c <HAL_RCC_OscConfig+0xe8>
 800348a:	e014      	b.n	80034b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fe feb6 	bl	80021fc <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003494:	f7fe feb2 	bl	80021fc <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	; 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e215      	b.n	80038d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034a6:	4b57      	ldr	r3, [pc, #348]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x110>
 80034b2:	e000      	b.n	80034b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d069      	beq.n	8003596 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034c2:	4b50      	ldr	r3, [pc, #320]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 80034c4:	689b      	ldr	r3, [r3, #8]
 80034c6:	f003 030c 	and.w	r3, r3, #12
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00b      	beq.n	80034e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034ce:	4b4d      	ldr	r3, [pc, #308]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 030c 	and.w	r3, r3, #12
 80034d6:	2b08      	cmp	r3, #8
 80034d8:	d11c      	bne.n	8003514 <HAL_RCC_OscConfig+0x190>
 80034da:	4b4a      	ldr	r3, [pc, #296]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d116      	bne.n	8003514 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034e6:	4b47      	ldr	r3, [pc, #284]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <HAL_RCC_OscConfig+0x17a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d001      	beq.n	80034fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e1e9      	b.n	80038d2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034fe:	4b41      	ldr	r3, [pc, #260]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	493d      	ldr	r1, [pc, #244]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003512:	e040      	b.n	8003596 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d023      	beq.n	8003564 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800351c:	4b39      	ldr	r3, [pc, #228]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a38      	ldr	r2, [pc, #224]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fe fe68 	bl	80021fc <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003530:	f7fe fe64 	bl	80021fc <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e1c7      	b.n	80038d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003542:	4b30      	ldr	r3, [pc, #192]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354e:	4b2d      	ldr	r3, [pc, #180]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	4929      	ldr	r1, [pc, #164]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]
 8003562:	e018      	b.n	8003596 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003564:	4b27      	ldr	r3, [pc, #156]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a26      	ldr	r2, [pc, #152]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fe fe44 	bl	80021fc <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003578:	f7fe fe40 	bl	80021fc <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e1a3      	b.n	80038d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358a:	4b1e      	ldr	r3, [pc, #120]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1f0      	bne.n	8003578 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0308 	and.w	r3, r3, #8
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d038      	beq.n	8003614 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d019      	beq.n	80035de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035aa:	4b16      	ldr	r3, [pc, #88]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 80035ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ae:	4a15      	ldr	r2, [pc, #84]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b6:	f7fe fe21 	bl	80021fc <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035be:	f7fe fe1d 	bl	80021fc <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e180      	b.n	80038d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d0:	4b0c      	ldr	r3, [pc, #48]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 80035d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x23a>
 80035dc:	e01a      	b.n	8003614 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035de:	4b09      	ldr	r3, [pc, #36]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 80035e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e2:	4a08      	ldr	r2, [pc, #32]	; (8003604 <HAL_RCC_OscConfig+0x280>)
 80035e4:	f023 0301 	bic.w	r3, r3, #1
 80035e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ea:	f7fe fe07 	bl	80021fc <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f0:	e00a      	b.n	8003608 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f2:	f7fe fe03 	bl	80021fc <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d903      	bls.n	8003608 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e166      	b.n	80038d2 <HAL_RCC_OscConfig+0x54e>
 8003604:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003608:	4b92      	ldr	r3, [pc, #584]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 800360a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360c:	f003 0302 	and.w	r3, r3, #2
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1ee      	bne.n	80035f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 80a4 	beq.w	800376a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003622:	4b8c      	ldr	r3, [pc, #560]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10d      	bne.n	800364a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800362e:	4b89      	ldr	r3, [pc, #548]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	4a88      	ldr	r2, [pc, #544]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 8003634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003638:	6413      	str	r3, [r2, #64]	; 0x40
 800363a:	4b86      	ldr	r3, [pc, #536]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003646:	2301      	movs	r3, #1
 8003648:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800364a:	4b83      	ldr	r3, [pc, #524]	; (8003858 <HAL_RCC_OscConfig+0x4d4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003652:	2b00      	cmp	r3, #0
 8003654:	d118      	bne.n	8003688 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003656:	4b80      	ldr	r3, [pc, #512]	; (8003858 <HAL_RCC_OscConfig+0x4d4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a7f      	ldr	r2, [pc, #508]	; (8003858 <HAL_RCC_OscConfig+0x4d4>)
 800365c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003662:	f7fe fdcb 	bl	80021fc <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366a:	f7fe fdc7 	bl	80021fc <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b64      	cmp	r3, #100	; 0x64
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e12a      	b.n	80038d2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800367c:	4b76      	ldr	r3, [pc, #472]	; (8003858 <HAL_RCC_OscConfig+0x4d4>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d106      	bne.n	800369e <HAL_RCC_OscConfig+0x31a>
 8003690:	4b70      	ldr	r3, [pc, #448]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	4a6f      	ldr	r2, [pc, #444]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	6713      	str	r3, [r2, #112]	; 0x70
 800369c:	e02d      	b.n	80036fa <HAL_RCC_OscConfig+0x376>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCC_OscConfig+0x33c>
 80036a6:	4b6b      	ldr	r3, [pc, #428]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 80036a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036aa:	4a6a      	ldr	r2, [pc, #424]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	6713      	str	r3, [r2, #112]	; 0x70
 80036b2:	4b68      	ldr	r3, [pc, #416]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	4a67      	ldr	r2, [pc, #412]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 80036b8:	f023 0304 	bic.w	r3, r3, #4
 80036bc:	6713      	str	r3, [r2, #112]	; 0x70
 80036be:	e01c      	b.n	80036fa <HAL_RCC_OscConfig+0x376>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b05      	cmp	r3, #5
 80036c6:	d10c      	bne.n	80036e2 <HAL_RCC_OscConfig+0x35e>
 80036c8:	4b62      	ldr	r3, [pc, #392]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 80036ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036cc:	4a61      	ldr	r2, [pc, #388]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 80036ce:	f043 0304 	orr.w	r3, r3, #4
 80036d2:	6713      	str	r3, [r2, #112]	; 0x70
 80036d4:	4b5f      	ldr	r3, [pc, #380]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 80036d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d8:	4a5e      	ldr	r2, [pc, #376]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	6713      	str	r3, [r2, #112]	; 0x70
 80036e0:	e00b      	b.n	80036fa <HAL_RCC_OscConfig+0x376>
 80036e2:	4b5c      	ldr	r3, [pc, #368]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 80036e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e6:	4a5b      	ldr	r2, [pc, #364]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	6713      	str	r3, [r2, #112]	; 0x70
 80036ee:	4b59      	ldr	r3, [pc, #356]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	4a58      	ldr	r2, [pc, #352]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 80036f4:	f023 0304 	bic.w	r3, r3, #4
 80036f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d015      	beq.n	800372e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003702:	f7fe fd7b 	bl	80021fc <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003708:	e00a      	b.n	8003720 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800370a:	f7fe fd77 	bl	80021fc <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f241 3288 	movw	r2, #5000	; 0x1388
 8003718:	4293      	cmp	r3, r2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e0d8      	b.n	80038d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003720:	4b4c      	ldr	r3, [pc, #304]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 8003722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0ee      	beq.n	800370a <HAL_RCC_OscConfig+0x386>
 800372c:	e014      	b.n	8003758 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372e:	f7fe fd65 	bl	80021fc <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003734:	e00a      	b.n	800374c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003736:	f7fe fd61 	bl	80021fc <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	f241 3288 	movw	r2, #5000	; 0x1388
 8003744:	4293      	cmp	r3, r2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e0c2      	b.n	80038d2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800374c:	4b41      	ldr	r3, [pc, #260]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 800374e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1ee      	bne.n	8003736 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003758:	7dfb      	ldrb	r3, [r7, #23]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d105      	bne.n	800376a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800375e:	4b3d      	ldr	r3, [pc, #244]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	4a3c      	ldr	r2, [pc, #240]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 8003764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003768:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	2b00      	cmp	r3, #0
 8003770:	f000 80ae 	beq.w	80038d0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003774:	4b37      	ldr	r3, [pc, #220]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	f003 030c 	and.w	r3, r3, #12
 800377c:	2b08      	cmp	r3, #8
 800377e:	d06d      	beq.n	800385c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	2b02      	cmp	r3, #2
 8003786:	d14b      	bne.n	8003820 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003788:	4b32      	ldr	r3, [pc, #200]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a31      	ldr	r2, [pc, #196]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 800378e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7fe fd32 	bl	80021fc <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379c:	f7fe fd2e 	bl	80021fc <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e091      	b.n	80038d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ae:	4b29      	ldr	r3, [pc, #164]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f0      	bne.n	800379c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69da      	ldr	r2, [r3, #28]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	019b      	lsls	r3, r3, #6
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d0:	085b      	lsrs	r3, r3, #1
 80037d2:	3b01      	subs	r3, #1
 80037d4:	041b      	lsls	r3, r3, #16
 80037d6:	431a      	orrs	r2, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037dc:	061b      	lsls	r3, r3, #24
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e4:	071b      	lsls	r3, r3, #28
 80037e6:	491b      	ldr	r1, [pc, #108]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037ec:	4b19      	ldr	r3, [pc, #100]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a18      	ldr	r2, [pc, #96]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 80037f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f8:	f7fe fd00 	bl	80021fc <HAL_GetTick>
 80037fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037fe:	e008      	b.n	8003812 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003800:	f7fe fcfc 	bl	80021fc <HAL_GetTick>
 8003804:	4602      	mov	r2, r0
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	2b02      	cmp	r3, #2
 800380c:	d901      	bls.n	8003812 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e05f      	b.n	80038d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003812:	4b10      	ldr	r3, [pc, #64]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0f0      	beq.n	8003800 <HAL_RCC_OscConfig+0x47c>
 800381e:	e057      	b.n	80038d0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003820:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a0b      	ldr	r2, [pc, #44]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 8003826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800382a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800382c:	f7fe fce6 	bl	80021fc <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003834:	f7fe fce2 	bl	80021fc <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e045      	b.n	80038d2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003846:	4b03      	ldr	r3, [pc, #12]	; (8003854 <HAL_RCC_OscConfig+0x4d0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d1f0      	bne.n	8003834 <HAL_RCC_OscConfig+0x4b0>
 8003852:	e03d      	b.n	80038d0 <HAL_RCC_OscConfig+0x54c>
 8003854:	40023800 	.word	0x40023800
 8003858:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800385c:	4b1f      	ldr	r3, [pc, #124]	; (80038dc <HAL_RCC_OscConfig+0x558>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d030      	beq.n	80038cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003874:	429a      	cmp	r2, r3
 8003876:	d129      	bne.n	80038cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003882:	429a      	cmp	r2, r3
 8003884:	d122      	bne.n	80038cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800388c:	4013      	ands	r3, r2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003892:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003894:	4293      	cmp	r3, r2
 8003896:	d119      	bne.n	80038cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a2:	085b      	lsrs	r3, r3, #1
 80038a4:	3b01      	subs	r3, #1
 80038a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d10f      	bne.n	80038cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d107      	bne.n	80038cc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	40023800 	.word	0x40023800

080038e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0d0      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038f8:	4b6a      	ldr	r3, [pc, #424]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 030f 	and.w	r3, r3, #15
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d910      	bls.n	8003928 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b67      	ldr	r3, [pc, #412]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 020f 	bic.w	r2, r3, #15
 800390e:	4965      	ldr	r1, [pc, #404]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b63      	ldr	r3, [pc, #396]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0b8      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d020      	beq.n	8003976 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d005      	beq.n	800394c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003940:	4b59      	ldr	r3, [pc, #356]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a58      	ldr	r2, [pc, #352]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003946:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800394a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0308 	and.w	r3, r3, #8
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003958:	4b53      	ldr	r3, [pc, #332]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4a52      	ldr	r2, [pc, #328]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 800395e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003962:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003964:	4b50      	ldr	r3, [pc, #320]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	494d      	ldr	r1, [pc, #308]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003972:	4313      	orrs	r3, r2
 8003974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d040      	beq.n	8003a04 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	2b01      	cmp	r3, #1
 8003988:	d107      	bne.n	800399a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398a:	4b47      	ldr	r3, [pc, #284]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d115      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e07f      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d107      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039a2:	4b41      	ldr	r3, [pc, #260]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d109      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e073      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b2:	4b3d      	ldr	r3, [pc, #244]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0302 	and.w	r3, r3, #2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e06b      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039c2:	4b39      	ldr	r3, [pc, #228]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f023 0203 	bic.w	r2, r3, #3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4936      	ldr	r1, [pc, #216]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d4:	f7fe fc12 	bl	80021fc <HAL_GetTick>
 80039d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039dc:	f7fe fc0e 	bl	80021fc <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e053      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039f2:	4b2d      	ldr	r3, [pc, #180]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 020c 	and.w	r2, r3, #12
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d1eb      	bne.n	80039dc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a04:	4b27      	ldr	r3, [pc, #156]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 030f 	and.w	r3, r3, #15
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d210      	bcs.n	8003a34 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a12:	4b24      	ldr	r3, [pc, #144]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f023 020f 	bic.w	r2, r3, #15
 8003a1a:	4922      	ldr	r1, [pc, #136]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a22:	4b20      	ldr	r3, [pc, #128]	; (8003aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	d001      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e032      	b.n	8003a9a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a40:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	4916      	ldr	r1, [pc, #88]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d009      	beq.n	8003a72 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a5e:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	00db      	lsls	r3, r3, #3
 8003a6c:	490e      	ldr	r1, [pc, #56]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a72:	f000 f821 	bl	8003ab8 <HAL_RCC_GetSysClockFreq>
 8003a76:	4602      	mov	r2, r0
 8003a78:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	091b      	lsrs	r3, r3, #4
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	490a      	ldr	r1, [pc, #40]	; (8003aac <HAL_RCC_ClockConfig+0x1cc>)
 8003a84:	5ccb      	ldrb	r3, [r1, r3]
 8003a86:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8a:	4a09      	ldr	r2, [pc, #36]	; (8003ab0 <HAL_RCC_ClockConfig+0x1d0>)
 8003a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a8e:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <HAL_RCC_ClockConfig+0x1d4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fe fb6e 	bl	8002174 <HAL_InitTick>

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40023c00 	.word	0x40023c00
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	0800ae10 	.word	0x0800ae10
 8003ab0:	20000008 	.word	0x20000008
 8003ab4:	2000000c 	.word	0x2000000c

08003ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab8:	b5b0      	push	{r4, r5, r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003abe:	2100      	movs	r1, #0
 8003ac0:	6079      	str	r1, [r7, #4]
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	60f9      	str	r1, [r7, #12]
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003aca:	2100      	movs	r1, #0
 8003acc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ace:	4952      	ldr	r1, [pc, #328]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ad0:	6889      	ldr	r1, [r1, #8]
 8003ad2:	f001 010c 	and.w	r1, r1, #12
 8003ad6:	2908      	cmp	r1, #8
 8003ad8:	d00d      	beq.n	8003af6 <HAL_RCC_GetSysClockFreq+0x3e>
 8003ada:	2908      	cmp	r1, #8
 8003adc:	f200 8094 	bhi.w	8003c08 <HAL_RCC_GetSysClockFreq+0x150>
 8003ae0:	2900      	cmp	r1, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_RCC_GetSysClockFreq+0x32>
 8003ae4:	2904      	cmp	r1, #4
 8003ae6:	d003      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0x38>
 8003ae8:	e08e      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003aea:	4b4c      	ldr	r3, [pc, #304]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x164>)
 8003aec:	60bb      	str	r3, [r7, #8]
      break;
 8003aee:	e08e      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003af0:	4b4b      	ldr	r3, [pc, #300]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x168>)
 8003af2:	60bb      	str	r3, [r7, #8]
      break;
 8003af4:	e08b      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003af6:	4948      	ldr	r1, [pc, #288]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x160>)
 8003af8:	6849      	ldr	r1, [r1, #4]
 8003afa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003afe:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b00:	4945      	ldr	r1, [pc, #276]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b02:	6849      	ldr	r1, [r1, #4]
 8003b04:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003b08:	2900      	cmp	r1, #0
 8003b0a:	d024      	beq.n	8003b56 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b0c:	4942      	ldr	r1, [pc, #264]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b0e:	6849      	ldr	r1, [r1, #4]
 8003b10:	0989      	lsrs	r1, r1, #6
 8003b12:	4608      	mov	r0, r1
 8003b14:	f04f 0100 	mov.w	r1, #0
 8003b18:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003b1c:	f04f 0500 	mov.w	r5, #0
 8003b20:	ea00 0204 	and.w	r2, r0, r4
 8003b24:	ea01 0305 	and.w	r3, r1, r5
 8003b28:	493d      	ldr	r1, [pc, #244]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x168>)
 8003b2a:	fb01 f003 	mul.w	r0, r1, r3
 8003b2e:	2100      	movs	r1, #0
 8003b30:	fb01 f102 	mul.w	r1, r1, r2
 8003b34:	1844      	adds	r4, r0, r1
 8003b36:	493a      	ldr	r1, [pc, #232]	; (8003c20 <HAL_RCC_GetSysClockFreq+0x168>)
 8003b38:	fba2 0101 	umull	r0, r1, r2, r1
 8003b3c:	1863      	adds	r3, r4, r1
 8003b3e:	4619      	mov	r1, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	461a      	mov	r2, r3
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	f7fc fd8e 	bl	8000668 <__aeabi_uldivmod>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4613      	mov	r3, r2
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	e04a      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b56:	4b30      	ldr	r3, [pc, #192]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	099b      	lsrs	r3, r3, #6
 8003b5c:	461a      	mov	r2, r3
 8003b5e:	f04f 0300 	mov.w	r3, #0
 8003b62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b66:	f04f 0100 	mov.w	r1, #0
 8003b6a:	ea02 0400 	and.w	r4, r2, r0
 8003b6e:	ea03 0501 	and.w	r5, r3, r1
 8003b72:	4620      	mov	r0, r4
 8003b74:	4629      	mov	r1, r5
 8003b76:	f04f 0200 	mov.w	r2, #0
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	014b      	lsls	r3, r1, #5
 8003b80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b84:	0142      	lsls	r2, r0, #5
 8003b86:	4610      	mov	r0, r2
 8003b88:	4619      	mov	r1, r3
 8003b8a:	1b00      	subs	r0, r0, r4
 8003b8c:	eb61 0105 	sbc.w	r1, r1, r5
 8003b90:	f04f 0200 	mov.w	r2, #0
 8003b94:	f04f 0300 	mov.w	r3, #0
 8003b98:	018b      	lsls	r3, r1, #6
 8003b9a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b9e:	0182      	lsls	r2, r0, #6
 8003ba0:	1a12      	subs	r2, r2, r0
 8003ba2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ba6:	f04f 0000 	mov.w	r0, #0
 8003baa:	f04f 0100 	mov.w	r1, #0
 8003bae:	00d9      	lsls	r1, r3, #3
 8003bb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bb4:	00d0      	lsls	r0, r2, #3
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	1912      	adds	r2, r2, r4
 8003bbc:	eb45 0303 	adc.w	r3, r5, r3
 8003bc0:	f04f 0000 	mov.w	r0, #0
 8003bc4:	f04f 0100 	mov.w	r1, #0
 8003bc8:	0299      	lsls	r1, r3, #10
 8003bca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003bce:	0290      	lsls	r0, r2, #10
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	4619      	mov	r1, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	f04f 0300 	mov.w	r3, #0
 8003be0:	f7fc fd42 	bl	8000668 <__aeabi_uldivmod>
 8003be4:	4602      	mov	r2, r0
 8003be6:	460b      	mov	r3, r1
 8003be8:	4613      	mov	r3, r2
 8003bea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x160>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	0c1b      	lsrs	r3, r3, #16
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c04:	60bb      	str	r3, [r7, #8]
      break;
 8003c06:	e002      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c08:	4b04      	ldr	r3, [pc, #16]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x164>)
 8003c0a:	60bb      	str	r3, [r7, #8]
      break;
 8003c0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3710      	adds	r7, #16
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bdb0      	pop	{r4, r5, r7, pc}
 8003c18:	40023800 	.word	0x40023800
 8003c1c:	00f42400 	.word	0x00f42400
 8003c20:	017d7840 	.word	0x017d7840

08003c24 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c24:	b480      	push	{r7}
 8003c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c28:	4b03      	ldr	r3, [pc, #12]	; (8003c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	20000008 	.word	0x20000008

08003c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c40:	f7ff fff0 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8003c44:	4602      	mov	r2, r0
 8003c46:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	0a9b      	lsrs	r3, r3, #10
 8003c4c:	f003 0307 	and.w	r3, r3, #7
 8003c50:	4903      	ldr	r1, [pc, #12]	; (8003c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c52:	5ccb      	ldrb	r3, [r1, r3]
 8003c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	0800ae20 	.word	0x0800ae20

08003c64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c68:	f7ff ffdc 	bl	8003c24 <HAL_RCC_GetHCLKFreq>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	0b5b      	lsrs	r3, r3, #13
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	4903      	ldr	r1, [pc, #12]	; (8003c88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c7a:	5ccb      	ldrb	r3, [r1, r3]
 8003c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40023800 	.word	0x40023800
 8003c88:	0800ae20 	.word	0x0800ae20

08003c8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d012      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cb4:	4b69      	ldr	r3, [pc, #420]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	4a68      	ldr	r2, [pc, #416]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003cbe:	6093      	str	r3, [r2, #8]
 8003cc0:	4b66      	ldr	r3, [pc, #408]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cc8:	4964      	ldr	r1, [pc, #400]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d017      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ce6:	4b5d      	ldr	r3, [pc, #372]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf4:	4959      	ldr	r1, [pc, #356]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d04:	d101      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d06:	2301      	movs	r3, #1
 8003d08:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d12:	2301      	movs	r3, #1
 8003d14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d017      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d22:	4b4e      	ldr	r3, [pc, #312]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	494a      	ldr	r1, [pc, #296]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d40:	d101      	bne.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d42:	2301      	movs	r3, #1
 8003d44:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0320 	and.w	r3, r3, #32
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 808b 	beq.w	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d70:	4b3a      	ldr	r3, [pc, #232]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	4a39      	ldr	r2, [pc, #228]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8003d7c:	4b37      	ldr	r3, [pc, #220]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d84:	60bb      	str	r3, [r7, #8]
 8003d86:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d88:	4b35      	ldr	r3, [pc, #212]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a34      	ldr	r2, [pc, #208]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d94:	f7fe fa32 	bl	80021fc <HAL_GetTick>
 8003d98:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003d9a:	e008      	b.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d9c:	f7fe fa2e 	bl	80021fc <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e38f      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dae:	4b2c      	ldr	r3, [pc, #176]	; (8003e60 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dba:	4b28      	ldr	r3, [pc, #160]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d035      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d02e      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dd8:	4b20      	ldr	r3, [pc, #128]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ddc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003de0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003de2:	4b1e      	ldr	r3, [pc, #120]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de6:	4a1d      	ldr	r2, [pc, #116]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dec:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dee:	4b1b      	ldr	r3, [pc, #108]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	4a1a      	ldr	r2, [pc, #104]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003dfa:	4a18      	ldr	r2, [pc, #96]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e00:	4b16      	ldr	r3, [pc, #88]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d114      	bne.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e0c:	f7fe f9f6 	bl	80021fc <HAL_GetTick>
 8003e10:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e12:	e00a      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e14:	f7fe f9f2 	bl	80021fc <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e351      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d0ee      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e42:	d111      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e44:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e50:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e52:	400b      	ands	r3, r1
 8003e54:	4901      	ldr	r1, [pc, #4]	; (8003e5c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e56:	4313      	orrs	r3, r2
 8003e58:	608b      	str	r3, [r1, #8]
 8003e5a:	e00b      	b.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	40007000 	.word	0x40007000
 8003e64:	0ffffcff 	.word	0x0ffffcff
 8003e68:	4bb3      	ldr	r3, [pc, #716]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	4ab2      	ldr	r2, [pc, #712]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e6e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e72:	6093      	str	r3, [r2, #8]
 8003e74:	4bb0      	ldr	r3, [pc, #704]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e80:	49ad      	ldr	r1, [pc, #692]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0310 	and.w	r3, r3, #16
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d010      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e92:	4ba9      	ldr	r3, [pc, #676]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e98:	4aa7      	ldr	r2, [pc, #668]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e9e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ea2:	4ba5      	ldr	r3, [pc, #660]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ea4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eac:	49a2      	ldr	r1, [pc, #648]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ec0:	4b9d      	ldr	r3, [pc, #628]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ece:	499a      	ldr	r1, [pc, #616]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00a      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ee2:	4b95      	ldr	r3, [pc, #596]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ef0:	4991      	ldr	r1, [pc, #580]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f04:	4b8c      	ldr	r3, [pc, #560]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f12:	4989      	ldr	r1, [pc, #548]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f26:	4b84      	ldr	r3, [pc, #528]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f34:	4980      	ldr	r1, [pc, #512]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f48:	4b7b      	ldr	r3, [pc, #492]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4e:	f023 0203 	bic.w	r2, r3, #3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	4978      	ldr	r1, [pc, #480]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f6a:	4b73      	ldr	r3, [pc, #460]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f70:	f023 020c 	bic.w	r2, r3, #12
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f78:	496f      	ldr	r1, [pc, #444]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f8c:	4b6a      	ldr	r3, [pc, #424]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f92:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9a:	4967      	ldr	r1, [pc, #412]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fae:	4b62      	ldr	r3, [pc, #392]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fbc:	495e      	ldr	r1, [pc, #376]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003fd0:	4b59      	ldr	r3, [pc, #356]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fde:	4956      	ldr	r1, [pc, #344]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003ff2:	4b51      	ldr	r3, [pc, #324]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004000:	494d      	ldr	r1, [pc, #308]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004014:	4b48      	ldr	r3, [pc, #288]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004022:	4945      	ldr	r1, [pc, #276]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004036:	4b40      	ldr	r3, [pc, #256]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004044:	493c      	ldr	r1, [pc, #240]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004058:	4b37      	ldr	r3, [pc, #220]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004066:	4934      	ldr	r1, [pc, #208]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d011      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800407a:	4b2f      	ldr	r3, [pc, #188]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004080:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004088:	492b      	ldr	r1, [pc, #172]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004094:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004098:	d101      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800409a:	2301      	movs	r3, #1
 800409c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0308 	and.w	r3, r3, #8
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80040aa:	2301      	movs	r3, #1
 80040ac:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040ba:	4b1f      	ldr	r3, [pc, #124]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c8:	491b      	ldr	r1, [pc, #108]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00b      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80040dc:	4b16      	ldr	r3, [pc, #88]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ec:	4912      	ldr	r1, [pc, #72]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00b      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004100:	4b0d      	ldr	r3, [pc, #52]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004106:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004110:	4909      	ldr	r1, [pc, #36]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00f      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004124:	4b04      	ldr	r3, [pc, #16]	; (8004138 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004126:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800412a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004134:	e002      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004136:	bf00      	nop
 8004138:	40023800 	.word	0x40023800
 800413c:	4986      	ldr	r1, [pc, #536]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800413e:	4313      	orrs	r3, r2
 8004140:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00b      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004150:	4b81      	ldr	r3, [pc, #516]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004152:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004156:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004160:	497d      	ldr	r1, [pc, #500]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d006      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 80d6 	beq.w	8004328 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800417c:	4b76      	ldr	r3, [pc, #472]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a75      	ldr	r2, [pc, #468]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004182:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004186:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004188:	f7fe f838 	bl	80021fc <HAL_GetTick>
 800418c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004190:	f7fe f834 	bl	80021fc <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b64      	cmp	r3, #100	; 0x64
 800419c:	d901      	bls.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e195      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041a2:	4b6d      	ldr	r3, [pc, #436]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d021      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x572>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d11d      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041c2:	4b65      	ldr	r3, [pc, #404]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041c8:	0c1b      	lsrs	r3, r3, #16
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041d0:	4b61      	ldr	r3, [pc, #388]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d6:	0e1b      	lsrs	r3, r3, #24
 80041d8:	f003 030f 	and.w	r3, r3, #15
 80041dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	019a      	lsls	r2, r3, #6
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	041b      	lsls	r3, r3, #16
 80041e8:	431a      	orrs	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	061b      	lsls	r3, r3, #24
 80041ee:	431a      	orrs	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	071b      	lsls	r3, r3, #28
 80041f6:	4958      	ldr	r1, [pc, #352]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d004      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004212:	d00a      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800421c:	2b00      	cmp	r3, #0
 800421e:	d02e      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004224:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004228:	d129      	bne.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800422a:	4b4b      	ldr	r3, [pc, #300]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004230:	0c1b      	lsrs	r3, r3, #16
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004238:	4b47      	ldr	r3, [pc, #284]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800423a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800423e:	0f1b      	lsrs	r3, r3, #28
 8004240:	f003 0307 	and.w	r3, r3, #7
 8004244:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	019a      	lsls	r2, r3, #6
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	041b      	lsls	r3, r3, #16
 8004250:	431a      	orrs	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	061b      	lsls	r3, r3, #24
 8004258:	431a      	orrs	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	071b      	lsls	r3, r3, #28
 800425e:	493e      	ldr	r1, [pc, #248]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004260:	4313      	orrs	r3, r2
 8004262:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004266:	4b3c      	ldr	r3, [pc, #240]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004268:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800426c:	f023 021f 	bic.w	r2, r3, #31
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	3b01      	subs	r3, #1
 8004276:	4938      	ldr	r1, [pc, #224]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d01d      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800428a:	4b33      	ldr	r3, [pc, #204]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800428c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004290:	0e1b      	lsrs	r3, r3, #24
 8004292:	f003 030f 	and.w	r3, r3, #15
 8004296:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004298:	4b2f      	ldr	r3, [pc, #188]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800429a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800429e:	0f1b      	lsrs	r3, r3, #28
 80042a0:	f003 0307 	and.w	r3, r3, #7
 80042a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	019a      	lsls	r2, r3, #6
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	041b      	lsls	r3, r3, #16
 80042b2:	431a      	orrs	r2, r3
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	061b      	lsls	r3, r3, #24
 80042b8:	431a      	orrs	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	071b      	lsls	r3, r3, #28
 80042be:	4926      	ldr	r1, [pc, #152]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d011      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	019a      	lsls	r2, r3, #6
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	041b      	lsls	r3, r3, #16
 80042de:	431a      	orrs	r2, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	061b      	lsls	r3, r3, #24
 80042e6:	431a      	orrs	r2, r3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	071b      	lsls	r3, r3, #28
 80042ee:	491a      	ldr	r1, [pc, #104]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80042f6:	4b18      	ldr	r3, [pc, #96]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a17      	ldr	r2, [pc, #92]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042fc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004302:	f7fd ff7b 	bl	80021fc <HAL_GetTick>
 8004306:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004308:	e008      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800430a:	f7fd ff77 	bl	80021fc <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b64      	cmp	r3, #100	; 0x64
 8004316:	d901      	bls.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e0d8      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800431c:	4b0e      	ldr	r3, [pc, #56]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0f0      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	2b01      	cmp	r3, #1
 800432c:	f040 80ce 	bne.w	80044cc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004330:	4b09      	ldr	r3, [pc, #36]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a08      	ldr	r2, [pc, #32]	; (8004358 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800433a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800433c:	f7fd ff5e 	bl	80021fc <HAL_GetTick>
 8004340:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004342:	e00b      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004344:	f7fd ff5a 	bl	80021fc <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b64      	cmp	r3, #100	; 0x64
 8004350:	d904      	bls.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e0bb      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004356:	bf00      	nop
 8004358:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800435c:	4b5e      	ldr	r3, [pc, #376]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004368:	d0ec      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d003      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437a:	2b00      	cmp	r3, #0
 800437c:	d009      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004386:	2b00      	cmp	r3, #0
 8004388:	d02e      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	d12a      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004392:	4b51      	ldr	r3, [pc, #324]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004398:	0c1b      	lsrs	r3, r3, #16
 800439a:	f003 0303 	and.w	r3, r3, #3
 800439e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043a0:	4b4d      	ldr	r3, [pc, #308]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043a6:	0f1b      	lsrs	r3, r3, #28
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	019a      	lsls	r2, r3, #6
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	041b      	lsls	r3, r3, #16
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	061b      	lsls	r3, r3, #24
 80043c0:	431a      	orrs	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	071b      	lsls	r3, r3, #28
 80043c6:	4944      	ldr	r1, [pc, #272]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043ce:	4b42      	ldr	r3, [pc, #264]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043dc:	3b01      	subs	r3, #1
 80043de:	021b      	lsls	r3, r3, #8
 80043e0:	493d      	ldr	r1, [pc, #244]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d022      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043fc:	d11d      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043fe:	4b36      	ldr	r3, [pc, #216]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004404:	0e1b      	lsrs	r3, r3, #24
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800440c:	4b32      	ldr	r3, [pc, #200]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004412:	0f1b      	lsrs	r3, r3, #28
 8004414:	f003 0307 	and.w	r3, r3, #7
 8004418:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	019a      	lsls	r2, r3, #6
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a1b      	ldr	r3, [r3, #32]
 8004424:	041b      	lsls	r3, r3, #16
 8004426:	431a      	orrs	r2, r3
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	061b      	lsls	r3, r3, #24
 800442c:	431a      	orrs	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	071b      	lsls	r3, r3, #28
 8004432:	4929      	ldr	r1, [pc, #164]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004434:	4313      	orrs	r3, r2
 8004436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d028      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004446:	4b24      	ldr	r3, [pc, #144]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444c:	0e1b      	lsrs	r3, r3, #24
 800444e:	f003 030f 	and.w	r3, r3, #15
 8004452:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004454:	4b20      	ldr	r3, [pc, #128]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445a:	0c1b      	lsrs	r3, r3, #16
 800445c:	f003 0303 	and.w	r3, r3, #3
 8004460:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	019a      	lsls	r2, r3, #6
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	041b      	lsls	r3, r3, #16
 800446c:	431a      	orrs	r2, r3
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	061b      	lsls	r3, r3, #24
 8004472:	431a      	orrs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	071b      	lsls	r3, r3, #28
 800447a:	4917      	ldr	r1, [pc, #92]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004482:	4b15      	ldr	r3, [pc, #84]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004484:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004488:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	4911      	ldr	r1, [pc, #68]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004492:	4313      	orrs	r3, r2
 8004494:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004498:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a0e      	ldr	r2, [pc, #56]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800449e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a4:	f7fd feaa 	bl	80021fc <HAL_GetTick>
 80044a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044aa:	e008      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044ac:	f7fd fea6 	bl	80021fc <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b64      	cmp	r3, #100	; 0x64
 80044b8:	d901      	bls.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e007      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044be:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044ca:	d1ef      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3720      	adds	r7, #32
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40023800 	.word	0x40023800

080044dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e09d      	b.n	800462a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d108      	bne.n	8004508 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044fe:	d009      	beq.n	8004514 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	61da      	str	r2, [r3, #28]
 8004506:	e005      	b.n	8004514 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fd fc1c 	bl	8001d6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2202      	movs	r2, #2
 8004538:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800454a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004554:	d902      	bls.n	800455c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004556:	2300      	movs	r3, #0
 8004558:	60fb      	str	r3, [r7, #12]
 800455a:	e002      	b.n	8004562 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800455c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004560:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800456a:	d007      	beq.n	800457c <HAL_SPI_Init+0xa0>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004574:	d002      	beq.n	800457c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800458c:	431a      	orrs	r2, r3
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	695b      	ldr	r3, [r3, #20]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	699b      	ldr	r3, [r3, #24]
 80045a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a1b      	ldr	r3, [r3, #32]
 80045ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045be:	ea42 0103 	orr.w	r1, r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	699b      	ldr	r3, [r3, #24]
 80045d6:	0c1b      	lsrs	r3, r3, #16
 80045d8:	f003 0204 	and.w	r2, r3, #4
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80045f8:	ea42 0103 	orr.w	r1, r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	69da      	ldr	r2, [r3, #28]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004618:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b088      	sub	sp, #32
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	4613      	mov	r3, r2
 8004640:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_SPI_Transmit+0x22>
 8004650:	2302      	movs	r3, #2
 8004652:	e158      	b.n	8004906 <HAL_SPI_Transmit+0x2d4>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800465c:	f7fd fdce 	bl	80021fc <HAL_GetTick>
 8004660:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004662:	88fb      	ldrh	r3, [r7, #6]
 8004664:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b01      	cmp	r3, #1
 8004670:	d002      	beq.n	8004678 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004672:	2302      	movs	r3, #2
 8004674:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004676:	e13d      	b.n	80048f4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d002      	beq.n	8004684 <HAL_SPI_Transmit+0x52>
 800467e:	88fb      	ldrh	r3, [r7, #6]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d102      	bne.n	800468a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004688:	e134      	b.n	80048f4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2203      	movs	r2, #3
 800468e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	88fa      	ldrh	r2, [r7, #6]
 80046a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	88fa      	ldrh	r2, [r7, #6]
 80046a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2200      	movs	r2, #0
 80046ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046d4:	d10f      	bne.n	80046f6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046e4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	d007      	beq.n	8004714 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004712:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	68db      	ldr	r3, [r3, #12]
 8004718:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800471c:	d94b      	bls.n	80047b6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <HAL_SPI_Transmit+0xfa>
 8004726:	8afb      	ldrh	r3, [r7, #22]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d13e      	bne.n	80047aa <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	881a      	ldrh	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	1c9a      	adds	r2, r3, #2
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004746:	b29b      	uxth	r3, r3
 8004748:	3b01      	subs	r3, #1
 800474a:	b29a      	uxth	r2, r3
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004750:	e02b      	b.n	80047aa <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b02      	cmp	r3, #2
 800475e:	d112      	bne.n	8004786 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	881a      	ldrh	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	1c9a      	adds	r2, r3, #2
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800477a:	b29b      	uxth	r3, r3
 800477c:	3b01      	subs	r3, #1
 800477e:	b29a      	uxth	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004784:	e011      	b.n	80047aa <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004786:	f7fd fd39 	bl	80021fc <HAL_GetTick>
 800478a:	4602      	mov	r2, r0
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	1ad3      	subs	r3, r2, r3
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	429a      	cmp	r2, r3
 8004794:	d803      	bhi.n	800479e <HAL_SPI_Transmit+0x16c>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479c:	d102      	bne.n	80047a4 <HAL_SPI_Transmit+0x172>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d102      	bne.n	80047aa <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047a8:	e0a4      	b.n	80048f4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1ce      	bne.n	8004752 <HAL_SPI_Transmit+0x120>
 80047b4:	e07c      	b.n	80048b0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d002      	beq.n	80047c4 <HAL_SPI_Transmit+0x192>
 80047be:	8afb      	ldrh	r3, [r7, #22]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d170      	bne.n	80048a6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d912      	bls.n	80047f4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	881a      	ldrh	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	1c9a      	adds	r2, r3, #2
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b02      	subs	r3, #2
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047f2:	e058      	b.n	80048a6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	330c      	adds	r3, #12
 80047fe:	7812      	ldrb	r2, [r2, #0]
 8004800:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	1c5a      	adds	r2, r3, #1
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004810:	b29b      	uxth	r3, r3
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800481a:	e044      	b.n	80048a6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b02      	cmp	r3, #2
 8004828:	d12b      	bne.n	8004882 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800482e:	b29b      	uxth	r3, r3
 8004830:	2b01      	cmp	r3, #1
 8004832:	d912      	bls.n	800485a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	881a      	ldrh	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004844:	1c9a      	adds	r2, r3, #2
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800484e:	b29b      	uxth	r3, r3
 8004850:	3b02      	subs	r3, #2
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004858:	e025      	b.n	80048a6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	330c      	adds	r3, #12
 8004864:	7812      	ldrb	r2, [r2, #0]
 8004866:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	1c5a      	adds	r2, r3, #1
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b01      	subs	r3, #1
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004880:	e011      	b.n	80048a6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004882:	f7fd fcbb 	bl	80021fc <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	1ad3      	subs	r3, r2, r3
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	429a      	cmp	r2, r3
 8004890:	d803      	bhi.n	800489a <HAL_SPI_Transmit+0x268>
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004898:	d102      	bne.n	80048a0 <HAL_SPI_Transmit+0x26e>
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d102      	bne.n	80048a6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048a4:	e026      	b.n	80048f4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d1b5      	bne.n	800481c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	6839      	ldr	r1, [r7, #0]
 80048b4:	68f8      	ldr	r0, [r7, #12]
 80048b6:	f000 fda7 	bl	8005408 <SPI_EndRxTxTransaction>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d002      	beq.n	80048c6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10a      	bne.n	80048e4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048ce:	2300      	movs	r3, #0
 80048d0:	613b      	str	r3, [r7, #16]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	613b      	str	r3, [r7, #16]
 80048e2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d002      	beq.n	80048f2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	77fb      	strb	r3, [r7, #31]
 80048f0:	e000      	b.n	80048f4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80048f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004904:	7ffb      	ldrb	r3, [r7, #31]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3720      	adds	r7, #32
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
	...

08004910 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	4613      	mov	r3, r2
 800491c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800491e:	2300      	movs	r3, #0
 8004920:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d110      	bne.n	800494c <HAL_SPI_Receive_IT+0x3c>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004932:	d10b      	bne.n	800494c <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2204      	movs	r2, #4
 8004938:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800493c:	88fb      	ldrh	r3, [r7, #6]
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	68b9      	ldr	r1, [r7, #8]
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 f894 	bl	8004a70 <HAL_SPI_TransmitReceive_IT>
 8004948:	4603      	mov	r3, r0
 800494a:	e089      	b.n	8004a60 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004952:	2b01      	cmp	r3, #1
 8004954:	d101      	bne.n	800495a <HAL_SPI_Receive_IT+0x4a>
 8004956:	2302      	movs	r3, #2
 8004958:	e082      	b.n	8004a60 <HAL_SPI_Receive_IT+0x150>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2201      	movs	r2, #1
 800495e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004968:	b2db      	uxtb	r3, r3
 800496a:	2b01      	cmp	r3, #1
 800496c:	d002      	beq.n	8004974 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 800496e:	2302      	movs	r3, #2
 8004970:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004972:	e070      	b.n	8004a56 <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <HAL_SPI_Receive_IT+0x70>
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d102      	bne.n	8004986 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004984:	e067      	b.n	8004a56 <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2204      	movs	r2, #4
 800498a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	2200      	movs	r2, #0
 8004992:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	88fa      	ldrh	r2, [r7, #6]
 800499e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	88fa      	ldrh	r2, [r7, #6]
 80049a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2200      	movs	r2, #0
 80049ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049ca:	d90b      	bls.n	80049e4 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685a      	ldr	r2, [r3, #4]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80049da:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4a22      	ldr	r2, [pc, #136]	; (8004a68 <HAL_SPI_Receive_IT+0x158>)
 80049e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80049e2:	e00a      	b.n	80049fa <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049f2:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4a1d      	ldr	r2, [pc, #116]	; (8004a6c <HAL_SPI_Receive_IT+0x15c>)
 80049f8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a02:	d10f      	bne.n	8004a24 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a12:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a22:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	685a      	ldr	r2, [r3, #4]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004a32:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3e:	2b40      	cmp	r3, #64	; 0x40
 8004a40:	d008      	beq.n	8004a54 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	e000      	b.n	8004a56 <HAL_SPI_Receive_IT+0x146>
  }

error :
 8004a54:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3718      	adds	r7, #24
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}
 8004a68:	08005089 	.word	0x08005089
 8004a6c:	08005039 	.word	0x08005039

08004a70 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d101      	bne.n	8004a90 <HAL_SPI_TransmitReceive_IT+0x20>
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	e091      	b.n	8004bb4 <HAL_SPI_TransmitReceive_IT+0x144>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a9e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004aa6:	7dbb      	ldrb	r3, [r7, #22]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d00d      	beq.n	8004ac8 <HAL_SPI_TransmitReceive_IT+0x58>
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ab2:	d106      	bne.n	8004ac2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <HAL_SPI_TransmitReceive_IT+0x52>
 8004abc:	7dbb      	ldrb	r3, [r7, #22]
 8004abe:	2b04      	cmp	r3, #4
 8004ac0:	d002      	beq.n	8004ac8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ac6:	e070      	b.n	8004baa <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d005      	beq.n	8004ada <HAL_SPI_TransmitReceive_IT+0x6a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d002      	beq.n	8004ada <HAL_SPI_TransmitReceive_IT+0x6a>
 8004ad4:	887b      	ldrh	r3, [r7, #2]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d102      	bne.n	8004ae0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ade:	e064      	b.n	8004baa <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	2b04      	cmp	r3, #4
 8004aea:	d003      	beq.n	8004af4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2205      	movs	r2, #5
 8004af0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	887a      	ldrh	r2, [r7, #2]
 8004b04:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	887a      	ldrh	r2, [r7, #2]
 8004b0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	887a      	ldrh	r2, [r7, #2]
 8004b16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	887a      	ldrh	r2, [r7, #2]
 8004b1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b2a:	d906      	bls.n	8004b3a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4a24      	ldr	r2, [pc, #144]	; (8004bc0 <HAL_SPI_TransmitReceive_IT+0x150>)
 8004b30:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	4a23      	ldr	r2, [pc, #140]	; (8004bc4 <HAL_SPI_TransmitReceive_IT+0x154>)
 8004b36:	651a      	str	r2, [r3, #80]	; 0x50
 8004b38:	e005      	b.n	8004b46 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	4a22      	ldr	r2, [pc, #136]	; (8004bc8 <HAL_SPI_TransmitReceive_IT+0x158>)
 8004b3e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	4a22      	ldr	r2, [pc, #136]	; (8004bcc <HAL_SPI_TransmitReceive_IT+0x15c>)
 8004b44:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b4e:	d802      	bhi.n	8004b56 <HAL_SPI_TransmitReceive_IT+0xe6>
 8004b50:	887b      	ldrh	r3, [r7, #2]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d908      	bls.n	8004b68 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b64:	605a      	str	r2, [r3, #4]
 8004b66:	e007      	b.n	8004b78 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b76:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8004b86:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b92:	2b40      	cmp	r3, #64	; 0x40
 8004b94:	d008      	beq.n	8004ba8 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ba4:	601a      	str	r2, [r3, #0]
 8004ba6:	e000      	b.n	8004baa <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8004ba8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	371c      	adds	r7, #28
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	08004f73 	.word	0x08004f73
 8004bc4:	08004fd9 	.word	0x08004fd9
 8004bc8:	08004e23 	.word	0x08004e23
 8004bcc:	08004ee1 	.word	0x08004ee1

08004bd0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b088      	sub	sp, #32
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004be8:	69bb      	ldr	r3, [r7, #24]
 8004bea:	099b      	lsrs	r3, r3, #6
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10f      	bne.n	8004c14 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	099b      	lsrs	r3, r3, #6
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d004      	beq.n	8004c14 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	4798      	blx	r3
    return;
 8004c12:	e0d7      	b.n	8004dc4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	085b      	lsrs	r3, r3, #1
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <HAL_SPI_IRQHandler+0x66>
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	09db      	lsrs	r3, r3, #7
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d004      	beq.n	8004c36 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	4798      	blx	r3
    return;
 8004c34:	e0c6      	b.n	8004dc4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	095b      	lsrs	r3, r3, #5
 8004c3a:	f003 0301 	and.w	r3, r3, #1
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10c      	bne.n	8004c5c <HAL_SPI_IRQHandler+0x8c>
 8004c42:	69bb      	ldr	r3, [r7, #24]
 8004c44:	099b      	lsrs	r3, r3, #6
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d106      	bne.n	8004c5c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	0a1b      	lsrs	r3, r3, #8
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 80b4 	beq.w	8004dc4 <HAL_SPI_IRQHandler+0x1f4>
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	f003 0301 	and.w	r3, r3, #1
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 80ad 	beq.w	8004dc4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	099b      	lsrs	r3, r3, #6
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d023      	beq.n	8004cbe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	d011      	beq.n	8004ca6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c86:	f043 0204 	orr.w	r2, r3, #4
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	617b      	str	r3, [r7, #20]
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	e00b      	b.n	8004cbe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	613b      	str	r3, [r7, #16]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	693b      	ldr	r3, [r7, #16]
        return;
 8004cbc:	e082      	b.n	8004dc4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	095b      	lsrs	r3, r3, #5
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d014      	beq.n	8004cf4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cce:	f043 0201 	orr.w	r2, r3, #1
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	60fb      	str	r3, [r7, #12]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	0a1b      	lsrs	r3, r3, #8
 8004cf8:	f003 0301 	and.w	r3, r3, #1
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00c      	beq.n	8004d1a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d04:	f043 0208 	orr.w	r2, r3, #8
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60bb      	str	r3, [r7, #8]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	60bb      	str	r3, [r7, #8]
 8004d18:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d04f      	beq.n	8004dc2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d30:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <HAL_SPI_IRQHandler+0x17e>
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d034      	beq.n	8004db8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0203 	bic.w	r2, r2, #3
 8004d5c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d011      	beq.n	8004d8a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6a:	4a18      	ldr	r2, [pc, #96]	; (8004dcc <HAL_SPI_IRQHandler+0x1fc>)
 8004d6c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fd fb83 	bl	800247e <HAL_DMA_Abort_IT>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d005      	beq.n	8004d8a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d82:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d016      	beq.n	8004dc0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d96:	4a0d      	ldr	r2, [pc, #52]	; (8004dcc <HAL_SPI_IRQHandler+0x1fc>)
 8004d98:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fd fb6d 	bl	800247e <HAL_DMA_Abort_IT>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004db6:	e003      	b.n	8004dc0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f813 	bl	8004de4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004dbe:	e000      	b.n	8004dc2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004dc0:	bf00      	nop
    return;
 8004dc2:	bf00      	nop
  }
}
 8004dc4:	3720      	adds	r7, #32
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	08004df9 	.word	0x08004df9

08004dd0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de2:	4770      	bx	lr

08004de4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b083      	sub	sp, #12
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e04:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2200      	movs	r2, #0
 8004e12:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f7ff ffe5 	bl	8004de4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e1a:	bf00      	nop
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b082      	sub	sp, #8
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d923      	bls.n	8004e7e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e40:	b292      	uxth	r2, r2
 8004e42:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e48:	1c9a      	adds	r2, r3, #2
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	3b02      	subs	r3, #2
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d11f      	bne.n	8004eac <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e7a:	605a      	str	r2, [r3, #4]
 8004e7c:	e016      	b.n	8004eac <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f103 020c 	add.w	r2, r3, #12
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	7812      	ldrb	r2, [r2, #0]
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d10f      	bne.n	8004ed8 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ec6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d102      	bne.n	8004ed8 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fb02 	bl	80054dc <SPI_CloseRxTx_ISR>
    }
  }
}
 8004ed8:	bf00      	nop
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d912      	bls.n	8004f18 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef6:	881a      	ldrh	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f02:	1c9a      	adds	r2, r3, #2
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b02      	subs	r3, #2
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f16:	e012      	b.n	8004f3e <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	330c      	adds	r3, #12
 8004f22:	7812      	ldrb	r2, [r2, #0]
 8004f24:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d110      	bne.n	8004f6a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	685a      	ldr	r2, [r3, #4]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f56:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d102      	bne.n	8004f6a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 fab9 	bl	80054dc <SPI_CloseRxTx_ISR>
    }
  }
}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004f72:	b580      	push	{r7, lr}
 8004f74:	b082      	sub	sp, #8
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f84:	b292      	uxth	r2, r2
 8004f86:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8c:	1c9a      	adds	r2, r3, #2
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f98:	b29b      	uxth	r3, r3
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10f      	bne.n	8004fd0 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fbe:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d102      	bne.n	8004fd0 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fa86 	bl	80054dc <SPI_CloseRxTx_ISR>
    }
  }
}
 8004fd0:	bf00      	nop
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	881a      	ldrh	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff0:	1c9a      	adds	r2, r3, #2
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ffa:	b29b      	uxth	r3, r3
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d110      	bne.n	8005030 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800501c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005024:	b29b      	uxth	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d102      	bne.n	8005030 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 fa56 	bl	80054dc <SPI_CloseRxTx_ISR>
    }
  }
}
 8005030:	bf00      	nop
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f103 020c 	add.w	r2, r3, #12
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504c:	7812      	ldrb	r2, [r2, #0]
 800504e:	b2d2      	uxtb	r2, r2
 8005050:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	1c5a      	adds	r2, r3, #1
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d102      	bne.n	8005080 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 fa70 	bl	8005560 <SPI_CloseRx_ISR>
  }
}
 8005080:	bf00      	nop
 8005082:	3708      	adds	r7, #8
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	b292      	uxth	r2, r2
 800509c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	1c9a      	adds	r2, r3, #2
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050ae:	b29b      	uxth	r3, r3
 80050b0:	3b01      	subs	r3, #1
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d102      	bne.n	80050cc <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fa4a 	bl	8005560 <SPI_CloseRx_ISR>
  }
}
 80050cc:	bf00      	nop
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b088      	sub	sp, #32
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	4613      	mov	r3, r2
 80050e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80050e4:	f7fd f88a 	bl	80021fc <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	4413      	add	r3, r2
 80050f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80050f4:	f7fd f882 	bl	80021fc <HAL_GetTick>
 80050f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80050fa:	4b39      	ldr	r3, [pc, #228]	; (80051e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	015b      	lsls	r3, r3, #5
 8005100:	0d1b      	lsrs	r3, r3, #20
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	fb02 f303 	mul.w	r3, r2, r3
 8005108:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800510a:	e054      	b.n	80051b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005112:	d050      	beq.n	80051b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005114:	f7fd f872 	bl	80021fc <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	69fa      	ldr	r2, [r7, #28]
 8005120:	429a      	cmp	r2, r3
 8005122:	d902      	bls.n	800512a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d13d      	bne.n	80051a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005138:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005142:	d111      	bne.n	8005168 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800514c:	d004      	beq.n	8005158 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005156:	d107      	bne.n	8005168 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005166:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800516c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005170:	d10f      	bne.n	8005192 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005180:	601a      	str	r2, [r3, #0]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005190:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e017      	b.n	80051d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d101      	bne.n	80051b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	4013      	ands	r3, r2
 80051c0:	68ba      	ldr	r2, [r7, #8]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	bf0c      	ite	eq
 80051c6:	2301      	moveq	r3, #1
 80051c8:	2300      	movne	r3, #0
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	461a      	mov	r2, r3
 80051ce:	79fb      	ldrb	r3, [r7, #7]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d19b      	bne.n	800510c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3720      	adds	r7, #32
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20000008 	.word	0x20000008

080051e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08a      	sub	sp, #40	; 0x28
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80051f2:	2300      	movs	r3, #0
 80051f4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80051f6:	f7fd f801 	bl	80021fc <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	1a9b      	subs	r3, r3, r2
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	4413      	add	r3, r2
 8005204:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005206:	f7fc fff9 	bl	80021fc <HAL_GetTick>
 800520a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	330c      	adds	r3, #12
 8005212:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005214:	4b3d      	ldr	r3, [pc, #244]	; (800530c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	4613      	mov	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4413      	add	r3, r2
 800521e:	00da      	lsls	r2, r3, #3
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	0d1b      	lsrs	r3, r3, #20
 8005224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005226:	fb02 f303 	mul.w	r3, r2, r3
 800522a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800522c:	e060      	b.n	80052f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005234:	d107      	bne.n	8005246 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d104      	bne.n	8005246 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	b2db      	uxtb	r3, r3
 8005242:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005244:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524c:	d050      	beq.n	80052f0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800524e:	f7fc ffd5 	bl	80021fc <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800525a:	429a      	cmp	r2, r3
 800525c:	d902      	bls.n	8005264 <SPI_WaitFifoStateUntilTimeout+0x80>
 800525e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005260:	2b00      	cmp	r3, #0
 8005262:	d13d      	bne.n	80052e0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685a      	ldr	r2, [r3, #4]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005272:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800527c:	d111      	bne.n	80052a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005286:	d004      	beq.n	8005292 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005290:	d107      	bne.n	80052a2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052a0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052aa:	d10f      	bne.n	80052cc <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052ca:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e010      	b.n	8005302 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80052e6:	2300      	movs	r3, #0
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689a      	ldr	r2, [r3, #8]
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4013      	ands	r3, r2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d196      	bne.n	800522e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3728      	adds	r7, #40	; 0x28
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	20000008 	.word	0x20000008

08005310 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af02      	add	r7, sp, #8
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005324:	d111      	bne.n	800534a <SPI_EndRxTransaction+0x3a>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800532e:	d004      	beq.n	800533a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005338:	d107      	bne.n	800534a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005348:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005352:	d112      	bne.n	800537a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2200      	movs	r2, #0
 800535c:	2180      	movs	r1, #128	; 0x80
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f7ff feb8 	bl	80050d4 <SPI_WaitFlagStateUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d021      	beq.n	80053ae <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800536e:	f043 0220 	orr.w	r2, r3, #32
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e03d      	b.n	80053f6 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800537a:	4b21      	ldr	r3, [pc, #132]	; (8005400 <SPI_EndRxTransaction+0xf0>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a21      	ldr	r2, [pc, #132]	; (8005404 <SPI_EndRxTransaction+0xf4>)
 8005380:	fba2 2303 	umull	r2, r3, r2, r3
 8005384:	0d5b      	lsrs	r3, r3, #21
 8005386:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800538a:	fb02 f303 	mul.w	r3, r2, r3
 800538e:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	3b01      	subs	r3, #1
 800539a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a6:	2b80      	cmp	r3, #128	; 0x80
 80053a8:	d0f2      	beq.n	8005390 <SPI_EndRxTransaction+0x80>
 80053aa:	e000      	b.n	80053ae <SPI_EndRxTransaction+0x9e>
        break;
 80053ac:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053b6:	d11d      	bne.n	80053f4 <SPI_EndRxTransaction+0xe4>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053c0:	d004      	beq.n	80053cc <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053ca:	d113      	bne.n	80053f4 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	9300      	str	r3, [sp, #0]
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80053d8:	68f8      	ldr	r0, [r7, #12]
 80053da:	f7ff ff03 	bl	80051e4 <SPI_WaitFifoStateUntilTimeout>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d007      	beq.n	80053f4 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e8:	f043 0220 	orr.w	r2, r3, #32
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e000      	b.n	80053f6 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3718      	adds	r7, #24
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20000008 	.word	0x20000008
 8005404:	165e9f81 	.word	0x165e9f81

08005408 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b088      	sub	sp, #32
 800540c:	af02      	add	r7, sp, #8
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	9300      	str	r3, [sp, #0]
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2200      	movs	r2, #0
 800541c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f7ff fedf 	bl	80051e4 <SPI_WaitFifoStateUntilTimeout>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d007      	beq.n	800543c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005430:	f043 0220 	orr.w	r2, r3, #32
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e046      	b.n	80054ca <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800543c:	4b25      	ldr	r3, [pc, #148]	; (80054d4 <SPI_EndRxTxTransaction+0xcc>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a25      	ldr	r2, [pc, #148]	; (80054d8 <SPI_EndRxTxTransaction+0xd0>)
 8005442:	fba2 2303 	umull	r2, r3, r2, r3
 8005446:	0d5b      	lsrs	r3, r3, #21
 8005448:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800544c:	fb02 f303 	mul.w	r3, r2, r3
 8005450:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800545a:	d112      	bne.n	8005482 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2200      	movs	r2, #0
 8005464:	2180      	movs	r1, #128	; 0x80
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f7ff fe34 	bl	80050d4 <SPI_WaitFlagStateUntilTimeout>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d016      	beq.n	80054a0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005476:	f043 0220 	orr.w	r2, r3, #32
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e023      	b.n	80054ca <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00a      	beq.n	800549e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	3b01      	subs	r3, #1
 800548c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005498:	2b80      	cmp	r3, #128	; 0x80
 800549a:	d0f2      	beq.n	8005482 <SPI_EndRxTxTransaction+0x7a>
 800549c:	e000      	b.n	80054a0 <SPI_EndRxTxTransaction+0x98>
        break;
 800549e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f7ff fe99 	bl	80051e4 <SPI_WaitFifoStateUntilTimeout>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d007      	beq.n	80054c8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054bc:	f043 0220 	orr.w	r2, r3, #32
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e000      	b.n	80054ca <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	20000008 	.word	0x20000008
 80054d8:	165e9f81 	.word	0x165e9f81

080054dc <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054e4:	f7fc fe8a 	bl	80021fc <HAL_GetTick>
 80054e8:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0220 	bic.w	r2, r2, #32
 80054f8:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	2164      	movs	r1, #100	; 0x64
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7ff ff82 	bl	8005408 <SPI_EndRxTxTransaction>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d005      	beq.n	8005516 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800550e:	f043 0220 	orr.w	r2, r3, #32
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800551a:	2b00      	cmp	r3, #0
 800551c:	d115      	bne.n	800554a <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b04      	cmp	r3, #4
 8005528:	d107      	bne.n	800553a <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f7fb fa4c 	bl	80009d0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8005538:	e00e      	b.n	8005558 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff fc44 	bl	8004dd0 <HAL_SPI_TxRxCpltCallback>
}
 8005548:	e006      	b.n	8005558 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff fc46 	bl	8004de4 <HAL_SPI_ErrorCallback>
}
 8005558:	bf00      	nop
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005576:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8005578:	f7fc fe40 	bl	80021fc <HAL_GetTick>
 800557c:	4603      	mov	r3, r0
 800557e:	461a      	mov	r2, r3
 8005580:	2164      	movs	r1, #100	; 0x64
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7ff fec4 	bl	8005310 <SPI_EndRxTransaction>
 8005588:	4603      	mov	r3, r0
 800558a:	2b00      	cmp	r3, #0
 800558c:	d005      	beq.n	800559a <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005592:	f043 0220 	orr.w	r2, r3, #32
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d103      	bne.n	80055b2 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fb fa10 	bl	80009d0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80055b0:	e002      	b.n	80055b8 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff fc16 	bl	8004de4 <HAL_SPI_ErrorCallback>
}
 80055b8:	bf00      	nop
 80055ba:	3708      	adds	r7, #8
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e040      	b.n	8005654 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d106      	bne.n	80055e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f7fc fc0e 	bl	8001e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2224      	movs	r2, #36	; 0x24
 80055ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f000 f990 	bl	8005924 <UART_SetConfig>
 8005604:	4603      	mov	r3, r0
 8005606:	2b01      	cmp	r3, #1
 8005608:	d101      	bne.n	800560e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e022      	b.n	8005654 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fbe6 	bl	8005de8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800562a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800563a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fc6d 	bl	8005f2c <UART_CheckIdleState>
 8005652:	4603      	mov	r3, r0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b08a      	sub	sp, #40	; 0x28
 8005660:	af02      	add	r7, sp, #8
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	603b      	str	r3, [r7, #0]
 8005668:	4613      	mov	r3, r2
 800566a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005670:	2b20      	cmp	r3, #32
 8005672:	f040 8081 	bne.w	8005778 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d002      	beq.n	8005682 <HAL_UART_Transmit+0x26>
 800567c:	88fb      	ldrh	r3, [r7, #6]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e079      	b.n	800577a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800568c:	2b01      	cmp	r3, #1
 800568e:	d101      	bne.n	8005694 <HAL_UART_Transmit+0x38>
 8005690:	2302      	movs	r3, #2
 8005692:	e072      	b.n	800577a <HAL_UART_Transmit+0x11e>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	2200      	movs	r2, #0
 80056a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2221      	movs	r2, #33	; 0x21
 80056a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056aa:	f7fc fda7 	bl	80021fc <HAL_GetTick>
 80056ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	88fa      	ldrh	r2, [r7, #6]
 80056b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	88fa      	ldrh	r2, [r7, #6]
 80056bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c8:	d108      	bne.n	80056dc <HAL_UART_Transmit+0x80>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d104      	bne.n	80056dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	e003      	b.n	80056e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056e0:	2300      	movs	r3, #0
 80056e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80056ec:	e02c      	b.n	8005748 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	2200      	movs	r2, #0
 80056f6:	2180      	movs	r1, #128	; 0x80
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 fc60 	bl	8005fbe <UART_WaitOnFlagUntilTimeout>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e038      	b.n	800577a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10b      	bne.n	8005726 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	461a      	mov	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800571c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	3302      	adds	r3, #2
 8005722:	61bb      	str	r3, [r7, #24]
 8005724:	e007      	b.n	8005736 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	781a      	ldrb	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	3301      	adds	r3, #1
 8005734:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800573c:	b29b      	uxth	r3, r3
 800573e:	3b01      	subs	r3, #1
 8005740:	b29a      	uxth	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800574e:	b29b      	uxth	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1cc      	bne.n	80056ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	9300      	str	r3, [sp, #0]
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2200      	movs	r2, #0
 800575c:	2140      	movs	r1, #64	; 0x40
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 fc2d 	bl	8005fbe <UART_WaitOnFlagUntilTimeout>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e005      	b.n	800577a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2220      	movs	r2, #32
 8005772:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005774:	2300      	movs	r3, #0
 8005776:	e000      	b.n	800577a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005778:	2302      	movs	r3, #2
  }
}
 800577a:	4618      	mov	r0, r3
 800577c:	3720      	adds	r7, #32
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b08a      	sub	sp, #40	; 0x28
 8005786:	af02      	add	r7, sp, #8
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	603b      	str	r3, [r7, #0]
 800578e:	4613      	mov	r3, r2
 8005790:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005796:	2b20      	cmp	r3, #32
 8005798:	f040 80be 	bne.w	8005918 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d002      	beq.n	80057a8 <HAL_UART_Receive+0x26>
 80057a2:	88fb      	ldrh	r3, [r7, #6]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	e0b6      	b.n	800591a <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d101      	bne.n	80057ba <HAL_UART_Receive+0x38>
 80057b6:	2302      	movs	r3, #2
 80057b8:	e0af      	b.n	800591a <HAL_UART_Receive+0x198>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2222      	movs	r2, #34	; 0x22
 80057ce:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057d6:	f7fc fd11 	bl	80021fc <HAL_GetTick>
 80057da:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	88fa      	ldrh	r2, [r7, #6]
 80057e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	88fa      	ldrh	r2, [r7, #6]
 80057e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f4:	d10e      	bne.n	8005814 <HAL_UART_Receive+0x92>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d105      	bne.n	800580a <HAL_UART_Receive+0x88>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005804:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005808:	e02d      	b.n	8005866 <HAL_UART_Receive+0xe4>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	22ff      	movs	r2, #255	; 0xff
 800580e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005812:	e028      	b.n	8005866 <HAL_UART_Receive+0xe4>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10d      	bne.n	8005838 <HAL_UART_Receive+0xb6>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d104      	bne.n	800582e <HAL_UART_Receive+0xac>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	22ff      	movs	r2, #255	; 0xff
 8005828:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800582c:	e01b      	b.n	8005866 <HAL_UART_Receive+0xe4>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	227f      	movs	r2, #127	; 0x7f
 8005832:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005836:	e016      	b.n	8005866 <HAL_UART_Receive+0xe4>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005840:	d10d      	bne.n	800585e <HAL_UART_Receive+0xdc>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d104      	bne.n	8005854 <HAL_UART_Receive+0xd2>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	227f      	movs	r2, #127	; 0x7f
 800584e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005852:	e008      	b.n	8005866 <HAL_UART_Receive+0xe4>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	223f      	movs	r2, #63	; 0x3f
 8005858:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800585c:	e003      	b.n	8005866 <HAL_UART_Receive+0xe4>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2200      	movs	r2, #0
 8005862:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800586c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005876:	d108      	bne.n	800588a <HAL_UART_Receive+0x108>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d104      	bne.n	800588a <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005880:	2300      	movs	r3, #0
 8005882:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	61bb      	str	r3, [r7, #24]
 8005888:	e003      	b.n	8005892 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800588e:	2300      	movs	r3, #0
 8005890:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800589a:	e032      	b.n	8005902 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2200      	movs	r2, #0
 80058a4:	2120      	movs	r1, #32
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 fb89 	bl	8005fbe <UART_WaitOnFlagUntilTimeout>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e031      	b.n	800591a <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10c      	bne.n	80058d6 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	8a7b      	ldrh	r3, [r7, #18]
 80058c6:	4013      	ands	r3, r2
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	3302      	adds	r3, #2
 80058d2:	61bb      	str	r3, [r7, #24]
 80058d4:	e00c      	b.n	80058f0 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	8a7b      	ldrh	r3, [r7, #18]
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	4013      	ands	r3, r2
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	3301      	adds	r3, #1
 80058ee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005908:	b29b      	uxth	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1c6      	bne.n	800589c <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2220      	movs	r2, #32
 8005912:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005914:	2300      	movs	r3, #0
 8005916:	e000      	b.n	800591a <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8005918:	2302      	movs	r3, #2
  }
}
 800591a:	4618      	mov	r0, r3
 800591c:	3720      	adds	r7, #32
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800592c:	2300      	movs	r3, #0
 800592e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	431a      	orrs	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	69db      	ldr	r3, [r3, #28]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	4ba7      	ldr	r3, [pc, #668]	; (8005bec <UART_SetConfig+0x2c8>)
 8005950:	4013      	ands	r3, r2
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6812      	ldr	r2, [r2, #0]
 8005956:	6979      	ldr	r1, [r7, #20]
 8005958:	430b      	orrs	r3, r1
 800595a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68da      	ldr	r2, [r3, #12]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	4313      	orrs	r3, r2
 8005980:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	697a      	ldr	r2, [r7, #20]
 8005992:	430a      	orrs	r2, r1
 8005994:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a95      	ldr	r2, [pc, #596]	; (8005bf0 <UART_SetConfig+0x2cc>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d120      	bne.n	80059e2 <UART_SetConfig+0xbe>
 80059a0:	4b94      	ldr	r3, [pc, #592]	; (8005bf4 <UART_SetConfig+0x2d0>)
 80059a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059a6:	f003 0303 	and.w	r3, r3, #3
 80059aa:	2b03      	cmp	r3, #3
 80059ac:	d816      	bhi.n	80059dc <UART_SetConfig+0xb8>
 80059ae:	a201      	add	r2, pc, #4	; (adr r2, 80059b4 <UART_SetConfig+0x90>)
 80059b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b4:	080059c5 	.word	0x080059c5
 80059b8:	080059d1 	.word	0x080059d1
 80059bc:	080059cb 	.word	0x080059cb
 80059c0:	080059d7 	.word	0x080059d7
 80059c4:	2301      	movs	r3, #1
 80059c6:	77fb      	strb	r3, [r7, #31]
 80059c8:	e14f      	b.n	8005c6a <UART_SetConfig+0x346>
 80059ca:	2302      	movs	r3, #2
 80059cc:	77fb      	strb	r3, [r7, #31]
 80059ce:	e14c      	b.n	8005c6a <UART_SetConfig+0x346>
 80059d0:	2304      	movs	r3, #4
 80059d2:	77fb      	strb	r3, [r7, #31]
 80059d4:	e149      	b.n	8005c6a <UART_SetConfig+0x346>
 80059d6:	2308      	movs	r3, #8
 80059d8:	77fb      	strb	r3, [r7, #31]
 80059da:	e146      	b.n	8005c6a <UART_SetConfig+0x346>
 80059dc:	2310      	movs	r3, #16
 80059de:	77fb      	strb	r3, [r7, #31]
 80059e0:	e143      	b.n	8005c6a <UART_SetConfig+0x346>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a84      	ldr	r2, [pc, #528]	; (8005bf8 <UART_SetConfig+0x2d4>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d132      	bne.n	8005a52 <UART_SetConfig+0x12e>
 80059ec:	4b81      	ldr	r3, [pc, #516]	; (8005bf4 <UART_SetConfig+0x2d0>)
 80059ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f2:	f003 030c 	and.w	r3, r3, #12
 80059f6:	2b0c      	cmp	r3, #12
 80059f8:	d828      	bhi.n	8005a4c <UART_SetConfig+0x128>
 80059fa:	a201      	add	r2, pc, #4	; (adr r2, 8005a00 <UART_SetConfig+0xdc>)
 80059fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a00:	08005a35 	.word	0x08005a35
 8005a04:	08005a4d 	.word	0x08005a4d
 8005a08:	08005a4d 	.word	0x08005a4d
 8005a0c:	08005a4d 	.word	0x08005a4d
 8005a10:	08005a41 	.word	0x08005a41
 8005a14:	08005a4d 	.word	0x08005a4d
 8005a18:	08005a4d 	.word	0x08005a4d
 8005a1c:	08005a4d 	.word	0x08005a4d
 8005a20:	08005a3b 	.word	0x08005a3b
 8005a24:	08005a4d 	.word	0x08005a4d
 8005a28:	08005a4d 	.word	0x08005a4d
 8005a2c:	08005a4d 	.word	0x08005a4d
 8005a30:	08005a47 	.word	0x08005a47
 8005a34:	2300      	movs	r3, #0
 8005a36:	77fb      	strb	r3, [r7, #31]
 8005a38:	e117      	b.n	8005c6a <UART_SetConfig+0x346>
 8005a3a:	2302      	movs	r3, #2
 8005a3c:	77fb      	strb	r3, [r7, #31]
 8005a3e:	e114      	b.n	8005c6a <UART_SetConfig+0x346>
 8005a40:	2304      	movs	r3, #4
 8005a42:	77fb      	strb	r3, [r7, #31]
 8005a44:	e111      	b.n	8005c6a <UART_SetConfig+0x346>
 8005a46:	2308      	movs	r3, #8
 8005a48:	77fb      	strb	r3, [r7, #31]
 8005a4a:	e10e      	b.n	8005c6a <UART_SetConfig+0x346>
 8005a4c:	2310      	movs	r3, #16
 8005a4e:	77fb      	strb	r3, [r7, #31]
 8005a50:	e10b      	b.n	8005c6a <UART_SetConfig+0x346>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a69      	ldr	r2, [pc, #420]	; (8005bfc <UART_SetConfig+0x2d8>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d120      	bne.n	8005a9e <UART_SetConfig+0x17a>
 8005a5c:	4b65      	ldr	r3, [pc, #404]	; (8005bf4 <UART_SetConfig+0x2d0>)
 8005a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a62:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a66:	2b30      	cmp	r3, #48	; 0x30
 8005a68:	d013      	beq.n	8005a92 <UART_SetConfig+0x16e>
 8005a6a:	2b30      	cmp	r3, #48	; 0x30
 8005a6c:	d814      	bhi.n	8005a98 <UART_SetConfig+0x174>
 8005a6e:	2b20      	cmp	r3, #32
 8005a70:	d009      	beq.n	8005a86 <UART_SetConfig+0x162>
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d810      	bhi.n	8005a98 <UART_SetConfig+0x174>
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d002      	beq.n	8005a80 <UART_SetConfig+0x15c>
 8005a7a:	2b10      	cmp	r3, #16
 8005a7c:	d006      	beq.n	8005a8c <UART_SetConfig+0x168>
 8005a7e:	e00b      	b.n	8005a98 <UART_SetConfig+0x174>
 8005a80:	2300      	movs	r3, #0
 8005a82:	77fb      	strb	r3, [r7, #31]
 8005a84:	e0f1      	b.n	8005c6a <UART_SetConfig+0x346>
 8005a86:	2302      	movs	r3, #2
 8005a88:	77fb      	strb	r3, [r7, #31]
 8005a8a:	e0ee      	b.n	8005c6a <UART_SetConfig+0x346>
 8005a8c:	2304      	movs	r3, #4
 8005a8e:	77fb      	strb	r3, [r7, #31]
 8005a90:	e0eb      	b.n	8005c6a <UART_SetConfig+0x346>
 8005a92:	2308      	movs	r3, #8
 8005a94:	77fb      	strb	r3, [r7, #31]
 8005a96:	e0e8      	b.n	8005c6a <UART_SetConfig+0x346>
 8005a98:	2310      	movs	r3, #16
 8005a9a:	77fb      	strb	r3, [r7, #31]
 8005a9c:	e0e5      	b.n	8005c6a <UART_SetConfig+0x346>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a57      	ldr	r2, [pc, #348]	; (8005c00 <UART_SetConfig+0x2dc>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d120      	bne.n	8005aea <UART_SetConfig+0x1c6>
 8005aa8:	4b52      	ldr	r3, [pc, #328]	; (8005bf4 <UART_SetConfig+0x2d0>)
 8005aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ab2:	2bc0      	cmp	r3, #192	; 0xc0
 8005ab4:	d013      	beq.n	8005ade <UART_SetConfig+0x1ba>
 8005ab6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ab8:	d814      	bhi.n	8005ae4 <UART_SetConfig+0x1c0>
 8005aba:	2b80      	cmp	r3, #128	; 0x80
 8005abc:	d009      	beq.n	8005ad2 <UART_SetConfig+0x1ae>
 8005abe:	2b80      	cmp	r3, #128	; 0x80
 8005ac0:	d810      	bhi.n	8005ae4 <UART_SetConfig+0x1c0>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <UART_SetConfig+0x1a8>
 8005ac6:	2b40      	cmp	r3, #64	; 0x40
 8005ac8:	d006      	beq.n	8005ad8 <UART_SetConfig+0x1b4>
 8005aca:	e00b      	b.n	8005ae4 <UART_SetConfig+0x1c0>
 8005acc:	2300      	movs	r3, #0
 8005ace:	77fb      	strb	r3, [r7, #31]
 8005ad0:	e0cb      	b.n	8005c6a <UART_SetConfig+0x346>
 8005ad2:	2302      	movs	r3, #2
 8005ad4:	77fb      	strb	r3, [r7, #31]
 8005ad6:	e0c8      	b.n	8005c6a <UART_SetConfig+0x346>
 8005ad8:	2304      	movs	r3, #4
 8005ada:	77fb      	strb	r3, [r7, #31]
 8005adc:	e0c5      	b.n	8005c6a <UART_SetConfig+0x346>
 8005ade:	2308      	movs	r3, #8
 8005ae0:	77fb      	strb	r3, [r7, #31]
 8005ae2:	e0c2      	b.n	8005c6a <UART_SetConfig+0x346>
 8005ae4:	2310      	movs	r3, #16
 8005ae6:	77fb      	strb	r3, [r7, #31]
 8005ae8:	e0bf      	b.n	8005c6a <UART_SetConfig+0x346>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a45      	ldr	r2, [pc, #276]	; (8005c04 <UART_SetConfig+0x2e0>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d125      	bne.n	8005b40 <UART_SetConfig+0x21c>
 8005af4:	4b3f      	ldr	r3, [pc, #252]	; (8005bf4 <UART_SetConfig+0x2d0>)
 8005af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005afa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005afe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b02:	d017      	beq.n	8005b34 <UART_SetConfig+0x210>
 8005b04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b08:	d817      	bhi.n	8005b3a <UART_SetConfig+0x216>
 8005b0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b0e:	d00b      	beq.n	8005b28 <UART_SetConfig+0x204>
 8005b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b14:	d811      	bhi.n	8005b3a <UART_SetConfig+0x216>
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <UART_SetConfig+0x1fe>
 8005b1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b1e:	d006      	beq.n	8005b2e <UART_SetConfig+0x20a>
 8005b20:	e00b      	b.n	8005b3a <UART_SetConfig+0x216>
 8005b22:	2300      	movs	r3, #0
 8005b24:	77fb      	strb	r3, [r7, #31]
 8005b26:	e0a0      	b.n	8005c6a <UART_SetConfig+0x346>
 8005b28:	2302      	movs	r3, #2
 8005b2a:	77fb      	strb	r3, [r7, #31]
 8005b2c:	e09d      	b.n	8005c6a <UART_SetConfig+0x346>
 8005b2e:	2304      	movs	r3, #4
 8005b30:	77fb      	strb	r3, [r7, #31]
 8005b32:	e09a      	b.n	8005c6a <UART_SetConfig+0x346>
 8005b34:	2308      	movs	r3, #8
 8005b36:	77fb      	strb	r3, [r7, #31]
 8005b38:	e097      	b.n	8005c6a <UART_SetConfig+0x346>
 8005b3a:	2310      	movs	r3, #16
 8005b3c:	77fb      	strb	r3, [r7, #31]
 8005b3e:	e094      	b.n	8005c6a <UART_SetConfig+0x346>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a30      	ldr	r2, [pc, #192]	; (8005c08 <UART_SetConfig+0x2e4>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d125      	bne.n	8005b96 <UART_SetConfig+0x272>
 8005b4a:	4b2a      	ldr	r3, [pc, #168]	; (8005bf4 <UART_SetConfig+0x2d0>)
 8005b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b58:	d017      	beq.n	8005b8a <UART_SetConfig+0x266>
 8005b5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b5e:	d817      	bhi.n	8005b90 <UART_SetConfig+0x26c>
 8005b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b64:	d00b      	beq.n	8005b7e <UART_SetConfig+0x25a>
 8005b66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b6a:	d811      	bhi.n	8005b90 <UART_SetConfig+0x26c>
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <UART_SetConfig+0x254>
 8005b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b74:	d006      	beq.n	8005b84 <UART_SetConfig+0x260>
 8005b76:	e00b      	b.n	8005b90 <UART_SetConfig+0x26c>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	77fb      	strb	r3, [r7, #31]
 8005b7c:	e075      	b.n	8005c6a <UART_SetConfig+0x346>
 8005b7e:	2302      	movs	r3, #2
 8005b80:	77fb      	strb	r3, [r7, #31]
 8005b82:	e072      	b.n	8005c6a <UART_SetConfig+0x346>
 8005b84:	2304      	movs	r3, #4
 8005b86:	77fb      	strb	r3, [r7, #31]
 8005b88:	e06f      	b.n	8005c6a <UART_SetConfig+0x346>
 8005b8a:	2308      	movs	r3, #8
 8005b8c:	77fb      	strb	r3, [r7, #31]
 8005b8e:	e06c      	b.n	8005c6a <UART_SetConfig+0x346>
 8005b90:	2310      	movs	r3, #16
 8005b92:	77fb      	strb	r3, [r7, #31]
 8005b94:	e069      	b.n	8005c6a <UART_SetConfig+0x346>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a1c      	ldr	r2, [pc, #112]	; (8005c0c <UART_SetConfig+0x2e8>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d137      	bne.n	8005c10 <UART_SetConfig+0x2ec>
 8005ba0:	4b14      	ldr	r3, [pc, #80]	; (8005bf4 <UART_SetConfig+0x2d0>)
 8005ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ba6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005baa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bae:	d017      	beq.n	8005be0 <UART_SetConfig+0x2bc>
 8005bb0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bb4:	d817      	bhi.n	8005be6 <UART_SetConfig+0x2c2>
 8005bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bba:	d00b      	beq.n	8005bd4 <UART_SetConfig+0x2b0>
 8005bbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bc0:	d811      	bhi.n	8005be6 <UART_SetConfig+0x2c2>
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <UART_SetConfig+0x2aa>
 8005bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bca:	d006      	beq.n	8005bda <UART_SetConfig+0x2b6>
 8005bcc:	e00b      	b.n	8005be6 <UART_SetConfig+0x2c2>
 8005bce:	2300      	movs	r3, #0
 8005bd0:	77fb      	strb	r3, [r7, #31]
 8005bd2:	e04a      	b.n	8005c6a <UART_SetConfig+0x346>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	77fb      	strb	r3, [r7, #31]
 8005bd8:	e047      	b.n	8005c6a <UART_SetConfig+0x346>
 8005bda:	2304      	movs	r3, #4
 8005bdc:	77fb      	strb	r3, [r7, #31]
 8005bde:	e044      	b.n	8005c6a <UART_SetConfig+0x346>
 8005be0:	2308      	movs	r3, #8
 8005be2:	77fb      	strb	r3, [r7, #31]
 8005be4:	e041      	b.n	8005c6a <UART_SetConfig+0x346>
 8005be6:	2310      	movs	r3, #16
 8005be8:	77fb      	strb	r3, [r7, #31]
 8005bea:	e03e      	b.n	8005c6a <UART_SetConfig+0x346>
 8005bec:	efff69f3 	.word	0xefff69f3
 8005bf0:	40011000 	.word	0x40011000
 8005bf4:	40023800 	.word	0x40023800
 8005bf8:	40004400 	.word	0x40004400
 8005bfc:	40004800 	.word	0x40004800
 8005c00:	40004c00 	.word	0x40004c00
 8005c04:	40005000 	.word	0x40005000
 8005c08:	40011400 	.word	0x40011400
 8005c0c:	40007800 	.word	0x40007800
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a71      	ldr	r2, [pc, #452]	; (8005ddc <UART_SetConfig+0x4b8>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d125      	bne.n	8005c66 <UART_SetConfig+0x342>
 8005c1a:	4b71      	ldr	r3, [pc, #452]	; (8005de0 <UART_SetConfig+0x4bc>)
 8005c1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c24:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c28:	d017      	beq.n	8005c5a <UART_SetConfig+0x336>
 8005c2a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c2e:	d817      	bhi.n	8005c60 <UART_SetConfig+0x33c>
 8005c30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c34:	d00b      	beq.n	8005c4e <UART_SetConfig+0x32a>
 8005c36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c3a:	d811      	bhi.n	8005c60 <UART_SetConfig+0x33c>
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d003      	beq.n	8005c48 <UART_SetConfig+0x324>
 8005c40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c44:	d006      	beq.n	8005c54 <UART_SetConfig+0x330>
 8005c46:	e00b      	b.n	8005c60 <UART_SetConfig+0x33c>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	77fb      	strb	r3, [r7, #31]
 8005c4c:	e00d      	b.n	8005c6a <UART_SetConfig+0x346>
 8005c4e:	2302      	movs	r3, #2
 8005c50:	77fb      	strb	r3, [r7, #31]
 8005c52:	e00a      	b.n	8005c6a <UART_SetConfig+0x346>
 8005c54:	2304      	movs	r3, #4
 8005c56:	77fb      	strb	r3, [r7, #31]
 8005c58:	e007      	b.n	8005c6a <UART_SetConfig+0x346>
 8005c5a:	2308      	movs	r3, #8
 8005c5c:	77fb      	strb	r3, [r7, #31]
 8005c5e:	e004      	b.n	8005c6a <UART_SetConfig+0x346>
 8005c60:	2310      	movs	r3, #16
 8005c62:	77fb      	strb	r3, [r7, #31]
 8005c64:	e001      	b.n	8005c6a <UART_SetConfig+0x346>
 8005c66:	2310      	movs	r3, #16
 8005c68:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c72:	d15a      	bne.n	8005d2a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005c74:	7ffb      	ldrb	r3, [r7, #31]
 8005c76:	2b08      	cmp	r3, #8
 8005c78:	d827      	bhi.n	8005cca <UART_SetConfig+0x3a6>
 8005c7a:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <UART_SetConfig+0x35c>)
 8005c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c80:	08005ca5 	.word	0x08005ca5
 8005c84:	08005cad 	.word	0x08005cad
 8005c88:	08005cb5 	.word	0x08005cb5
 8005c8c:	08005ccb 	.word	0x08005ccb
 8005c90:	08005cbb 	.word	0x08005cbb
 8005c94:	08005ccb 	.word	0x08005ccb
 8005c98:	08005ccb 	.word	0x08005ccb
 8005c9c:	08005ccb 	.word	0x08005ccb
 8005ca0:	08005cc3 	.word	0x08005cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ca4:	f7fd ffca 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 8005ca8:	61b8      	str	r0, [r7, #24]
        break;
 8005caa:	e013      	b.n	8005cd4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cac:	f7fd ffda 	bl	8003c64 <HAL_RCC_GetPCLK2Freq>
 8005cb0:	61b8      	str	r0, [r7, #24]
        break;
 8005cb2:	e00f      	b.n	8005cd4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cb4:	4b4b      	ldr	r3, [pc, #300]	; (8005de4 <UART_SetConfig+0x4c0>)
 8005cb6:	61bb      	str	r3, [r7, #24]
        break;
 8005cb8:	e00c      	b.n	8005cd4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cba:	f7fd fefd 	bl	8003ab8 <HAL_RCC_GetSysClockFreq>
 8005cbe:	61b8      	str	r0, [r7, #24]
        break;
 8005cc0:	e008      	b.n	8005cd4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cc6:	61bb      	str	r3, [r7, #24]
        break;
 8005cc8:	e004      	b.n	8005cd4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	77bb      	strb	r3, [r7, #30]
        break;
 8005cd2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d074      	beq.n	8005dc4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	005a      	lsls	r2, r3, #1
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	685b      	ldr	r3, [r3, #4]
 8005ce2:	085b      	lsrs	r3, r3, #1
 8005ce4:	441a      	add	r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	2b0f      	cmp	r3, #15
 8005cf4:	d916      	bls.n	8005d24 <UART_SetConfig+0x400>
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cfc:	d212      	bcs.n	8005d24 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	f023 030f 	bic.w	r3, r3, #15
 8005d06:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	085b      	lsrs	r3, r3, #1
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f003 0307 	and.w	r3, r3, #7
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	89fb      	ldrh	r3, [r7, #14]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	89fa      	ldrh	r2, [r7, #14]
 8005d20:	60da      	str	r2, [r3, #12]
 8005d22:	e04f      	b.n	8005dc4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	77bb      	strb	r3, [r7, #30]
 8005d28:	e04c      	b.n	8005dc4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d2a:	7ffb      	ldrb	r3, [r7, #31]
 8005d2c:	2b08      	cmp	r3, #8
 8005d2e:	d828      	bhi.n	8005d82 <UART_SetConfig+0x45e>
 8005d30:	a201      	add	r2, pc, #4	; (adr r2, 8005d38 <UART_SetConfig+0x414>)
 8005d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d36:	bf00      	nop
 8005d38:	08005d5d 	.word	0x08005d5d
 8005d3c:	08005d65 	.word	0x08005d65
 8005d40:	08005d6d 	.word	0x08005d6d
 8005d44:	08005d83 	.word	0x08005d83
 8005d48:	08005d73 	.word	0x08005d73
 8005d4c:	08005d83 	.word	0x08005d83
 8005d50:	08005d83 	.word	0x08005d83
 8005d54:	08005d83 	.word	0x08005d83
 8005d58:	08005d7b 	.word	0x08005d7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d5c:	f7fd ff6e 	bl	8003c3c <HAL_RCC_GetPCLK1Freq>
 8005d60:	61b8      	str	r0, [r7, #24]
        break;
 8005d62:	e013      	b.n	8005d8c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d64:	f7fd ff7e 	bl	8003c64 <HAL_RCC_GetPCLK2Freq>
 8005d68:	61b8      	str	r0, [r7, #24]
        break;
 8005d6a:	e00f      	b.n	8005d8c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d6c:	4b1d      	ldr	r3, [pc, #116]	; (8005de4 <UART_SetConfig+0x4c0>)
 8005d6e:	61bb      	str	r3, [r7, #24]
        break;
 8005d70:	e00c      	b.n	8005d8c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d72:	f7fd fea1 	bl	8003ab8 <HAL_RCC_GetSysClockFreq>
 8005d76:	61b8      	str	r0, [r7, #24]
        break;
 8005d78:	e008      	b.n	8005d8c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d7e:	61bb      	str	r3, [r7, #24]
        break;
 8005d80:	e004      	b.n	8005d8c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005d82:	2300      	movs	r3, #0
 8005d84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	77bb      	strb	r3, [r7, #30]
        break;
 8005d8a:	bf00      	nop
    }

    if (pclk != 0U)
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d018      	beq.n	8005dc4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	085a      	lsrs	r2, r3, #1
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	441a      	add	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	2b0f      	cmp	r3, #15
 8005daa:	d909      	bls.n	8005dc0 <UART_SetConfig+0x49c>
 8005dac:	693b      	ldr	r3, [r7, #16]
 8005dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005db2:	d205      	bcs.n	8005dc0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	60da      	str	r2, [r3, #12]
 8005dbe:	e001      	b.n	8005dc4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005dd0:	7fbb      	ldrb	r3, [r7, #30]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3720      	adds	r7, #32
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	40007c00 	.word	0x40007c00
 8005de0:	40023800 	.word	0x40023800
 8005de4:	00f42400 	.word	0x00f42400

08005de8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00a      	beq.n	8005e34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00a      	beq.n	8005e56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	f003 0308 	and.w	r3, r3, #8
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00a      	beq.n	8005e78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	f003 0310 	and.w	r3, r3, #16
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00a      	beq.n	8005e9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01a      	beq.n	8005efe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ee6:	d10a      	bne.n	8005efe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00a      	beq.n	8005f20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	430a      	orrs	r2, r1
 8005f1e:	605a      	str	r2, [r3, #4]
  }
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af02      	add	r7, sp, #8
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f3c:	f7fc f95e 	bl	80021fc <HAL_GetTick>
 8005f40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0308 	and.w	r3, r3, #8
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	d10e      	bne.n	8005f6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f82d 	bl	8005fbe <UART_WaitOnFlagUntilTimeout>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e023      	b.n	8005fb6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b04      	cmp	r3, #4
 8005f7a:	d10e      	bne.n	8005f9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f80:	9300      	str	r3, [sp, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f817 	bl	8005fbe <UART_WaitOnFlagUntilTimeout>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e00d      	b.n	8005fb6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2220      	movs	r2, #32
 8005fa4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b09c      	sub	sp, #112	; 0x70
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	60f8      	str	r0, [r7, #12]
 8005fc6:	60b9      	str	r1, [r7, #8]
 8005fc8:	603b      	str	r3, [r7, #0]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fce:	e0a5      	b.n	800611c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd6:	f000 80a1 	beq.w	800611c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fda:	f7fc f90f 	bl	80021fc <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d302      	bcc.n	8005ff0 <UART_WaitOnFlagUntilTimeout+0x32>
 8005fea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d13e      	bne.n	800606e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006000:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006004:	667b      	str	r3, [r7, #100]	; 0x64
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	461a      	mov	r2, r3
 800600c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800600e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006010:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006012:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006014:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006016:	e841 2300 	strex	r3, r2, [r1]
 800601a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800601c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1e6      	bne.n	8005ff0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	3308      	adds	r3, #8
 8006028:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800602c:	e853 3f00 	ldrex	r3, [r3]
 8006030:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006034:	f023 0301 	bic.w	r3, r3, #1
 8006038:	663b      	str	r3, [r7, #96]	; 0x60
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3308      	adds	r3, #8
 8006040:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006042:	64ba      	str	r2, [r7, #72]	; 0x48
 8006044:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006046:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006048:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800604a:	e841 2300 	strex	r3, r2, [r1]
 800604e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006050:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1e5      	bne.n	8006022 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2220      	movs	r2, #32
 800605a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e067      	b.n	800613e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b00      	cmp	r3, #0
 800607a:	d04f      	beq.n	800611c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	69db      	ldr	r3, [r3, #28]
 8006082:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800608a:	d147      	bne.n	800611c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006094:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	e853 3f00 	ldrex	r3, [r3]
 80060a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b4:	637b      	str	r3, [r7, #52]	; 0x34
 80060b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060bc:	e841 2300 	strex	r3, r2, [r1]
 80060c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1e6      	bne.n	8006096 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3308      	adds	r3, #8
 80060ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	613b      	str	r3, [r7, #16]
   return(result);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f023 0301 	bic.w	r3, r3, #1
 80060de:	66bb      	str	r3, [r7, #104]	; 0x68
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	3308      	adds	r3, #8
 80060e6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060e8:	623a      	str	r2, [r7, #32]
 80060ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	69f9      	ldr	r1, [r7, #28]
 80060ee:	6a3a      	ldr	r2, [r7, #32]
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e5      	bne.n	80060c8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2220      	movs	r2, #32
 8006100:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2220      	movs	r2, #32
 8006106:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2220      	movs	r2, #32
 800610c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e010      	b.n	800613e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	69da      	ldr	r2, [r3, #28]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	4013      	ands	r3, r2
 8006126:	68ba      	ldr	r2, [r7, #8]
 8006128:	429a      	cmp	r2, r3
 800612a:	bf0c      	ite	eq
 800612c:	2301      	moveq	r3, #1
 800612e:	2300      	movne	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	461a      	mov	r2, r3
 8006134:	79fb      	ldrb	r3, [r7, #7]
 8006136:	429a      	cmp	r2, r3
 8006138:	f43f af4a 	beq.w	8005fd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3770      	adds	r7, #112	; 0x70
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
	...

08006148 <__errno>:
 8006148:	4b01      	ldr	r3, [pc, #4]	; (8006150 <__errno+0x8>)
 800614a:	6818      	ldr	r0, [r3, #0]
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	20000014 	.word	0x20000014

08006154 <__libc_init_array>:
 8006154:	b570      	push	{r4, r5, r6, lr}
 8006156:	4d0d      	ldr	r5, [pc, #52]	; (800618c <__libc_init_array+0x38>)
 8006158:	4c0d      	ldr	r4, [pc, #52]	; (8006190 <__libc_init_array+0x3c>)
 800615a:	1b64      	subs	r4, r4, r5
 800615c:	10a4      	asrs	r4, r4, #2
 800615e:	2600      	movs	r6, #0
 8006160:	42a6      	cmp	r6, r4
 8006162:	d109      	bne.n	8006178 <__libc_init_array+0x24>
 8006164:	4d0b      	ldr	r5, [pc, #44]	; (8006194 <__libc_init_array+0x40>)
 8006166:	4c0c      	ldr	r4, [pc, #48]	; (8006198 <__libc_init_array+0x44>)
 8006168:	f004 fc60 	bl	800aa2c <_init>
 800616c:	1b64      	subs	r4, r4, r5
 800616e:	10a4      	asrs	r4, r4, #2
 8006170:	2600      	movs	r6, #0
 8006172:	42a6      	cmp	r6, r4
 8006174:	d105      	bne.n	8006182 <__libc_init_array+0x2e>
 8006176:	bd70      	pop	{r4, r5, r6, pc}
 8006178:	f855 3b04 	ldr.w	r3, [r5], #4
 800617c:	4798      	blx	r3
 800617e:	3601      	adds	r6, #1
 8006180:	e7ee      	b.n	8006160 <__libc_init_array+0xc>
 8006182:	f855 3b04 	ldr.w	r3, [r5], #4
 8006186:	4798      	blx	r3
 8006188:	3601      	adds	r6, #1
 800618a:	e7f2      	b.n	8006172 <__libc_init_array+0x1e>
 800618c:	0800b2e4 	.word	0x0800b2e4
 8006190:	0800b2e4 	.word	0x0800b2e4
 8006194:	0800b2e4 	.word	0x0800b2e4
 8006198:	0800b2e8 	.word	0x0800b2e8

0800619c <memset>:
 800619c:	4402      	add	r2, r0
 800619e:	4603      	mov	r3, r0
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d100      	bne.n	80061a6 <memset+0xa>
 80061a4:	4770      	bx	lr
 80061a6:	f803 1b01 	strb.w	r1, [r3], #1
 80061aa:	e7f9      	b.n	80061a0 <memset+0x4>

080061ac <__cvt>:
 80061ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061ae:	ed2d 8b02 	vpush	{d8}
 80061b2:	eeb0 8b40 	vmov.f64	d8, d0
 80061b6:	b085      	sub	sp, #20
 80061b8:	4617      	mov	r7, r2
 80061ba:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80061bc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80061be:	ee18 2a90 	vmov	r2, s17
 80061c2:	f025 0520 	bic.w	r5, r5, #32
 80061c6:	2a00      	cmp	r2, #0
 80061c8:	bfb6      	itet	lt
 80061ca:	222d      	movlt	r2, #45	; 0x2d
 80061cc:	2200      	movge	r2, #0
 80061ce:	eeb1 8b40 	vneglt.f64	d8, d0
 80061d2:	2d46      	cmp	r5, #70	; 0x46
 80061d4:	460c      	mov	r4, r1
 80061d6:	701a      	strb	r2, [r3, #0]
 80061d8:	d004      	beq.n	80061e4 <__cvt+0x38>
 80061da:	2d45      	cmp	r5, #69	; 0x45
 80061dc:	d100      	bne.n	80061e0 <__cvt+0x34>
 80061de:	3401      	adds	r4, #1
 80061e0:	2102      	movs	r1, #2
 80061e2:	e000      	b.n	80061e6 <__cvt+0x3a>
 80061e4:	2103      	movs	r1, #3
 80061e6:	ab03      	add	r3, sp, #12
 80061e8:	9301      	str	r3, [sp, #4]
 80061ea:	ab02      	add	r3, sp, #8
 80061ec:	9300      	str	r3, [sp, #0]
 80061ee:	4622      	mov	r2, r4
 80061f0:	4633      	mov	r3, r6
 80061f2:	eeb0 0b48 	vmov.f64	d0, d8
 80061f6:	f001 feb7 	bl	8007f68 <_dtoa_r>
 80061fa:	2d47      	cmp	r5, #71	; 0x47
 80061fc:	d109      	bne.n	8006212 <__cvt+0x66>
 80061fe:	07fb      	lsls	r3, r7, #31
 8006200:	d407      	bmi.n	8006212 <__cvt+0x66>
 8006202:	9b03      	ldr	r3, [sp, #12]
 8006204:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006206:	1a1b      	subs	r3, r3, r0
 8006208:	6013      	str	r3, [r2, #0]
 800620a:	b005      	add	sp, #20
 800620c:	ecbd 8b02 	vpop	{d8}
 8006210:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006212:	2d46      	cmp	r5, #70	; 0x46
 8006214:	eb00 0204 	add.w	r2, r0, r4
 8006218:	d10c      	bne.n	8006234 <__cvt+0x88>
 800621a:	7803      	ldrb	r3, [r0, #0]
 800621c:	2b30      	cmp	r3, #48	; 0x30
 800621e:	d107      	bne.n	8006230 <__cvt+0x84>
 8006220:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006228:	bf1c      	itt	ne
 800622a:	f1c4 0401 	rsbne	r4, r4, #1
 800622e:	6034      	strne	r4, [r6, #0]
 8006230:	6833      	ldr	r3, [r6, #0]
 8006232:	441a      	add	r2, r3
 8006234:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800623c:	bf08      	it	eq
 800623e:	9203      	streq	r2, [sp, #12]
 8006240:	2130      	movs	r1, #48	; 0x30
 8006242:	9b03      	ldr	r3, [sp, #12]
 8006244:	4293      	cmp	r3, r2
 8006246:	d2dc      	bcs.n	8006202 <__cvt+0x56>
 8006248:	1c5c      	adds	r4, r3, #1
 800624a:	9403      	str	r4, [sp, #12]
 800624c:	7019      	strb	r1, [r3, #0]
 800624e:	e7f8      	b.n	8006242 <__cvt+0x96>

08006250 <__exponent>:
 8006250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006252:	4603      	mov	r3, r0
 8006254:	2900      	cmp	r1, #0
 8006256:	bfb8      	it	lt
 8006258:	4249      	neglt	r1, r1
 800625a:	f803 2b02 	strb.w	r2, [r3], #2
 800625e:	bfb4      	ite	lt
 8006260:	222d      	movlt	r2, #45	; 0x2d
 8006262:	222b      	movge	r2, #43	; 0x2b
 8006264:	2909      	cmp	r1, #9
 8006266:	7042      	strb	r2, [r0, #1]
 8006268:	dd2a      	ble.n	80062c0 <__exponent+0x70>
 800626a:	f10d 0407 	add.w	r4, sp, #7
 800626e:	46a4      	mov	ip, r4
 8006270:	270a      	movs	r7, #10
 8006272:	46a6      	mov	lr, r4
 8006274:	460a      	mov	r2, r1
 8006276:	fb91 f6f7 	sdiv	r6, r1, r7
 800627a:	fb07 1516 	mls	r5, r7, r6, r1
 800627e:	3530      	adds	r5, #48	; 0x30
 8006280:	2a63      	cmp	r2, #99	; 0x63
 8006282:	f104 34ff 	add.w	r4, r4, #4294967295
 8006286:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800628a:	4631      	mov	r1, r6
 800628c:	dcf1      	bgt.n	8006272 <__exponent+0x22>
 800628e:	3130      	adds	r1, #48	; 0x30
 8006290:	f1ae 0502 	sub.w	r5, lr, #2
 8006294:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006298:	1c44      	adds	r4, r0, #1
 800629a:	4629      	mov	r1, r5
 800629c:	4561      	cmp	r1, ip
 800629e:	d30a      	bcc.n	80062b6 <__exponent+0x66>
 80062a0:	f10d 0209 	add.w	r2, sp, #9
 80062a4:	eba2 020e 	sub.w	r2, r2, lr
 80062a8:	4565      	cmp	r5, ip
 80062aa:	bf88      	it	hi
 80062ac:	2200      	movhi	r2, #0
 80062ae:	4413      	add	r3, r2
 80062b0:	1a18      	subs	r0, r3, r0
 80062b2:	b003      	add	sp, #12
 80062b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80062be:	e7ed      	b.n	800629c <__exponent+0x4c>
 80062c0:	2330      	movs	r3, #48	; 0x30
 80062c2:	3130      	adds	r1, #48	; 0x30
 80062c4:	7083      	strb	r3, [r0, #2]
 80062c6:	70c1      	strb	r1, [r0, #3]
 80062c8:	1d03      	adds	r3, r0, #4
 80062ca:	e7f1      	b.n	80062b0 <__exponent+0x60>
 80062cc:	0000      	movs	r0, r0
	...

080062d0 <_printf_float>:
 80062d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d4:	b08b      	sub	sp, #44	; 0x2c
 80062d6:	460c      	mov	r4, r1
 80062d8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80062dc:	4616      	mov	r6, r2
 80062de:	461f      	mov	r7, r3
 80062e0:	4605      	mov	r5, r0
 80062e2:	f003 f8e9 	bl	80094b8 <_localeconv_r>
 80062e6:	f8d0 b000 	ldr.w	fp, [r0]
 80062ea:	4658      	mov	r0, fp
 80062ec:	f7f9 ffa8 	bl	8000240 <strlen>
 80062f0:	2300      	movs	r3, #0
 80062f2:	9308      	str	r3, [sp, #32]
 80062f4:	f8d8 3000 	ldr.w	r3, [r8]
 80062f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80062fc:	6822      	ldr	r2, [r4, #0]
 80062fe:	3307      	adds	r3, #7
 8006300:	f023 0307 	bic.w	r3, r3, #7
 8006304:	f103 0108 	add.w	r1, r3, #8
 8006308:	f8c8 1000 	str.w	r1, [r8]
 800630c:	4682      	mov	sl, r0
 800630e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006312:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006316:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006578 <_printf_float+0x2a8>
 800631a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800631e:	eeb0 6bc0 	vabs.f64	d6, d0
 8006322:	eeb4 6b47 	vcmp.f64	d6, d7
 8006326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800632a:	dd24      	ble.n	8006376 <_printf_float+0xa6>
 800632c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006334:	d502      	bpl.n	800633c <_printf_float+0x6c>
 8006336:	232d      	movs	r3, #45	; 0x2d
 8006338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800633c:	4b90      	ldr	r3, [pc, #576]	; (8006580 <_printf_float+0x2b0>)
 800633e:	4891      	ldr	r0, [pc, #580]	; (8006584 <_printf_float+0x2b4>)
 8006340:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006344:	bf94      	ite	ls
 8006346:	4698      	movls	r8, r3
 8006348:	4680      	movhi	r8, r0
 800634a:	2303      	movs	r3, #3
 800634c:	6123      	str	r3, [r4, #16]
 800634e:	f022 0204 	bic.w	r2, r2, #4
 8006352:	2300      	movs	r3, #0
 8006354:	6022      	str	r2, [r4, #0]
 8006356:	9304      	str	r3, [sp, #16]
 8006358:	9700      	str	r7, [sp, #0]
 800635a:	4633      	mov	r3, r6
 800635c:	aa09      	add	r2, sp, #36	; 0x24
 800635e:	4621      	mov	r1, r4
 8006360:	4628      	mov	r0, r5
 8006362:	f000 f9d3 	bl	800670c <_printf_common>
 8006366:	3001      	adds	r0, #1
 8006368:	f040 808a 	bne.w	8006480 <_printf_float+0x1b0>
 800636c:	f04f 30ff 	mov.w	r0, #4294967295
 8006370:	b00b      	add	sp, #44	; 0x2c
 8006372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006376:	eeb4 0b40 	vcmp.f64	d0, d0
 800637a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800637e:	d709      	bvc.n	8006394 <_printf_float+0xc4>
 8006380:	ee10 3a90 	vmov	r3, s1
 8006384:	2b00      	cmp	r3, #0
 8006386:	bfbc      	itt	lt
 8006388:	232d      	movlt	r3, #45	; 0x2d
 800638a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800638e:	487e      	ldr	r0, [pc, #504]	; (8006588 <_printf_float+0x2b8>)
 8006390:	4b7e      	ldr	r3, [pc, #504]	; (800658c <_printf_float+0x2bc>)
 8006392:	e7d5      	b.n	8006340 <_printf_float+0x70>
 8006394:	6863      	ldr	r3, [r4, #4]
 8006396:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800639a:	9104      	str	r1, [sp, #16]
 800639c:	1c59      	adds	r1, r3, #1
 800639e:	d13c      	bne.n	800641a <_printf_float+0x14a>
 80063a0:	2306      	movs	r3, #6
 80063a2:	6063      	str	r3, [r4, #4]
 80063a4:	2300      	movs	r3, #0
 80063a6:	9303      	str	r3, [sp, #12]
 80063a8:	ab08      	add	r3, sp, #32
 80063aa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80063ae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063b2:	ab07      	add	r3, sp, #28
 80063b4:	6861      	ldr	r1, [r4, #4]
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	6022      	str	r2, [r4, #0]
 80063ba:	f10d 031b 	add.w	r3, sp, #27
 80063be:	4628      	mov	r0, r5
 80063c0:	f7ff fef4 	bl	80061ac <__cvt>
 80063c4:	9b04      	ldr	r3, [sp, #16]
 80063c6:	9907      	ldr	r1, [sp, #28]
 80063c8:	2b47      	cmp	r3, #71	; 0x47
 80063ca:	4680      	mov	r8, r0
 80063cc:	d108      	bne.n	80063e0 <_printf_float+0x110>
 80063ce:	1cc8      	adds	r0, r1, #3
 80063d0:	db02      	blt.n	80063d8 <_printf_float+0x108>
 80063d2:	6863      	ldr	r3, [r4, #4]
 80063d4:	4299      	cmp	r1, r3
 80063d6:	dd41      	ble.n	800645c <_printf_float+0x18c>
 80063d8:	f1a9 0902 	sub.w	r9, r9, #2
 80063dc:	fa5f f989 	uxtb.w	r9, r9
 80063e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80063e4:	d820      	bhi.n	8006428 <_printf_float+0x158>
 80063e6:	3901      	subs	r1, #1
 80063e8:	464a      	mov	r2, r9
 80063ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80063ee:	9107      	str	r1, [sp, #28]
 80063f0:	f7ff ff2e 	bl	8006250 <__exponent>
 80063f4:	9a08      	ldr	r2, [sp, #32]
 80063f6:	9004      	str	r0, [sp, #16]
 80063f8:	1813      	adds	r3, r2, r0
 80063fa:	2a01      	cmp	r2, #1
 80063fc:	6123      	str	r3, [r4, #16]
 80063fe:	dc02      	bgt.n	8006406 <_printf_float+0x136>
 8006400:	6822      	ldr	r2, [r4, #0]
 8006402:	07d2      	lsls	r2, r2, #31
 8006404:	d501      	bpl.n	800640a <_printf_float+0x13a>
 8006406:	3301      	adds	r3, #1
 8006408:	6123      	str	r3, [r4, #16]
 800640a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0a2      	beq.n	8006358 <_printf_float+0x88>
 8006412:	232d      	movs	r3, #45	; 0x2d
 8006414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006418:	e79e      	b.n	8006358 <_printf_float+0x88>
 800641a:	9904      	ldr	r1, [sp, #16]
 800641c:	2947      	cmp	r1, #71	; 0x47
 800641e:	d1c1      	bne.n	80063a4 <_printf_float+0xd4>
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1bf      	bne.n	80063a4 <_printf_float+0xd4>
 8006424:	2301      	movs	r3, #1
 8006426:	e7bc      	b.n	80063a2 <_printf_float+0xd2>
 8006428:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800642c:	d118      	bne.n	8006460 <_printf_float+0x190>
 800642e:	2900      	cmp	r1, #0
 8006430:	6863      	ldr	r3, [r4, #4]
 8006432:	dd0b      	ble.n	800644c <_printf_float+0x17c>
 8006434:	6121      	str	r1, [r4, #16]
 8006436:	b913      	cbnz	r3, 800643e <_printf_float+0x16e>
 8006438:	6822      	ldr	r2, [r4, #0]
 800643a:	07d0      	lsls	r0, r2, #31
 800643c:	d502      	bpl.n	8006444 <_printf_float+0x174>
 800643e:	3301      	adds	r3, #1
 8006440:	440b      	add	r3, r1
 8006442:	6123      	str	r3, [r4, #16]
 8006444:	2300      	movs	r3, #0
 8006446:	65a1      	str	r1, [r4, #88]	; 0x58
 8006448:	9304      	str	r3, [sp, #16]
 800644a:	e7de      	b.n	800640a <_printf_float+0x13a>
 800644c:	b913      	cbnz	r3, 8006454 <_printf_float+0x184>
 800644e:	6822      	ldr	r2, [r4, #0]
 8006450:	07d2      	lsls	r2, r2, #31
 8006452:	d501      	bpl.n	8006458 <_printf_float+0x188>
 8006454:	3302      	adds	r3, #2
 8006456:	e7f4      	b.n	8006442 <_printf_float+0x172>
 8006458:	2301      	movs	r3, #1
 800645a:	e7f2      	b.n	8006442 <_printf_float+0x172>
 800645c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006460:	9b08      	ldr	r3, [sp, #32]
 8006462:	4299      	cmp	r1, r3
 8006464:	db05      	blt.n	8006472 <_printf_float+0x1a2>
 8006466:	6823      	ldr	r3, [r4, #0]
 8006468:	6121      	str	r1, [r4, #16]
 800646a:	07d8      	lsls	r0, r3, #31
 800646c:	d5ea      	bpl.n	8006444 <_printf_float+0x174>
 800646e:	1c4b      	adds	r3, r1, #1
 8006470:	e7e7      	b.n	8006442 <_printf_float+0x172>
 8006472:	2900      	cmp	r1, #0
 8006474:	bfd4      	ite	le
 8006476:	f1c1 0202 	rsble	r2, r1, #2
 800647a:	2201      	movgt	r2, #1
 800647c:	4413      	add	r3, r2
 800647e:	e7e0      	b.n	8006442 <_printf_float+0x172>
 8006480:	6823      	ldr	r3, [r4, #0]
 8006482:	055a      	lsls	r2, r3, #21
 8006484:	d407      	bmi.n	8006496 <_printf_float+0x1c6>
 8006486:	6923      	ldr	r3, [r4, #16]
 8006488:	4642      	mov	r2, r8
 800648a:	4631      	mov	r1, r6
 800648c:	4628      	mov	r0, r5
 800648e:	47b8      	blx	r7
 8006490:	3001      	adds	r0, #1
 8006492:	d12a      	bne.n	80064ea <_printf_float+0x21a>
 8006494:	e76a      	b.n	800636c <_printf_float+0x9c>
 8006496:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800649a:	f240 80e2 	bls.w	8006662 <_printf_float+0x392>
 800649e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80064a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80064a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064aa:	d133      	bne.n	8006514 <_printf_float+0x244>
 80064ac:	4a38      	ldr	r2, [pc, #224]	; (8006590 <_printf_float+0x2c0>)
 80064ae:	2301      	movs	r3, #1
 80064b0:	4631      	mov	r1, r6
 80064b2:	4628      	mov	r0, r5
 80064b4:	47b8      	blx	r7
 80064b6:	3001      	adds	r0, #1
 80064b8:	f43f af58 	beq.w	800636c <_printf_float+0x9c>
 80064bc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	db02      	blt.n	80064ca <_printf_float+0x1fa>
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	07d8      	lsls	r0, r3, #31
 80064c8:	d50f      	bpl.n	80064ea <_printf_float+0x21a>
 80064ca:	4653      	mov	r3, sl
 80064cc:	465a      	mov	r2, fp
 80064ce:	4631      	mov	r1, r6
 80064d0:	4628      	mov	r0, r5
 80064d2:	47b8      	blx	r7
 80064d4:	3001      	adds	r0, #1
 80064d6:	f43f af49 	beq.w	800636c <_printf_float+0x9c>
 80064da:	f04f 0800 	mov.w	r8, #0
 80064de:	f104 091a 	add.w	r9, r4, #26
 80064e2:	9b08      	ldr	r3, [sp, #32]
 80064e4:	3b01      	subs	r3, #1
 80064e6:	4543      	cmp	r3, r8
 80064e8:	dc09      	bgt.n	80064fe <_printf_float+0x22e>
 80064ea:	6823      	ldr	r3, [r4, #0]
 80064ec:	079b      	lsls	r3, r3, #30
 80064ee:	f100 8108 	bmi.w	8006702 <_printf_float+0x432>
 80064f2:	68e0      	ldr	r0, [r4, #12]
 80064f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064f6:	4298      	cmp	r0, r3
 80064f8:	bfb8      	it	lt
 80064fa:	4618      	movlt	r0, r3
 80064fc:	e738      	b.n	8006370 <_printf_float+0xa0>
 80064fe:	2301      	movs	r3, #1
 8006500:	464a      	mov	r2, r9
 8006502:	4631      	mov	r1, r6
 8006504:	4628      	mov	r0, r5
 8006506:	47b8      	blx	r7
 8006508:	3001      	adds	r0, #1
 800650a:	f43f af2f 	beq.w	800636c <_printf_float+0x9c>
 800650e:	f108 0801 	add.w	r8, r8, #1
 8006512:	e7e6      	b.n	80064e2 <_printf_float+0x212>
 8006514:	9b07      	ldr	r3, [sp, #28]
 8006516:	2b00      	cmp	r3, #0
 8006518:	dc3c      	bgt.n	8006594 <_printf_float+0x2c4>
 800651a:	4a1d      	ldr	r2, [pc, #116]	; (8006590 <_printf_float+0x2c0>)
 800651c:	2301      	movs	r3, #1
 800651e:	4631      	mov	r1, r6
 8006520:	4628      	mov	r0, r5
 8006522:	47b8      	blx	r7
 8006524:	3001      	adds	r0, #1
 8006526:	f43f af21 	beq.w	800636c <_printf_float+0x9c>
 800652a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800652e:	4313      	orrs	r3, r2
 8006530:	d102      	bne.n	8006538 <_printf_float+0x268>
 8006532:	6823      	ldr	r3, [r4, #0]
 8006534:	07d9      	lsls	r1, r3, #31
 8006536:	d5d8      	bpl.n	80064ea <_printf_float+0x21a>
 8006538:	4653      	mov	r3, sl
 800653a:	465a      	mov	r2, fp
 800653c:	4631      	mov	r1, r6
 800653e:	4628      	mov	r0, r5
 8006540:	47b8      	blx	r7
 8006542:	3001      	adds	r0, #1
 8006544:	f43f af12 	beq.w	800636c <_printf_float+0x9c>
 8006548:	f04f 0900 	mov.w	r9, #0
 800654c:	f104 0a1a 	add.w	sl, r4, #26
 8006550:	9b07      	ldr	r3, [sp, #28]
 8006552:	425b      	negs	r3, r3
 8006554:	454b      	cmp	r3, r9
 8006556:	dc01      	bgt.n	800655c <_printf_float+0x28c>
 8006558:	9b08      	ldr	r3, [sp, #32]
 800655a:	e795      	b.n	8006488 <_printf_float+0x1b8>
 800655c:	2301      	movs	r3, #1
 800655e:	4652      	mov	r2, sl
 8006560:	4631      	mov	r1, r6
 8006562:	4628      	mov	r0, r5
 8006564:	47b8      	blx	r7
 8006566:	3001      	adds	r0, #1
 8006568:	f43f af00 	beq.w	800636c <_printf_float+0x9c>
 800656c:	f109 0901 	add.w	r9, r9, #1
 8006570:	e7ee      	b.n	8006550 <_printf_float+0x280>
 8006572:	bf00      	nop
 8006574:	f3af 8000 	nop.w
 8006578:	ffffffff 	.word	0xffffffff
 800657c:	7fefffff 	.word	0x7fefffff
 8006580:	0800ae2c 	.word	0x0800ae2c
 8006584:	0800ae30 	.word	0x0800ae30
 8006588:	0800ae38 	.word	0x0800ae38
 800658c:	0800ae34 	.word	0x0800ae34
 8006590:	0800ae3c 	.word	0x0800ae3c
 8006594:	9a08      	ldr	r2, [sp, #32]
 8006596:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006598:	429a      	cmp	r2, r3
 800659a:	bfa8      	it	ge
 800659c:	461a      	movge	r2, r3
 800659e:	2a00      	cmp	r2, #0
 80065a0:	4691      	mov	r9, r2
 80065a2:	dc38      	bgt.n	8006616 <_printf_float+0x346>
 80065a4:	2300      	movs	r3, #0
 80065a6:	9305      	str	r3, [sp, #20]
 80065a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065ac:	f104 021a 	add.w	r2, r4, #26
 80065b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065b2:	9905      	ldr	r1, [sp, #20]
 80065b4:	9304      	str	r3, [sp, #16]
 80065b6:	eba3 0309 	sub.w	r3, r3, r9
 80065ba:	428b      	cmp	r3, r1
 80065bc:	dc33      	bgt.n	8006626 <_printf_float+0x356>
 80065be:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	db3c      	blt.n	8006640 <_printf_float+0x370>
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	07da      	lsls	r2, r3, #31
 80065ca:	d439      	bmi.n	8006640 <_printf_float+0x370>
 80065cc:	9a08      	ldr	r2, [sp, #32]
 80065ce:	9b04      	ldr	r3, [sp, #16]
 80065d0:	9907      	ldr	r1, [sp, #28]
 80065d2:	1ad3      	subs	r3, r2, r3
 80065d4:	eba2 0901 	sub.w	r9, r2, r1
 80065d8:	4599      	cmp	r9, r3
 80065da:	bfa8      	it	ge
 80065dc:	4699      	movge	r9, r3
 80065de:	f1b9 0f00 	cmp.w	r9, #0
 80065e2:	dc35      	bgt.n	8006650 <_printf_float+0x380>
 80065e4:	f04f 0800 	mov.w	r8, #0
 80065e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065ec:	f104 0a1a 	add.w	sl, r4, #26
 80065f0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80065f4:	1a9b      	subs	r3, r3, r2
 80065f6:	eba3 0309 	sub.w	r3, r3, r9
 80065fa:	4543      	cmp	r3, r8
 80065fc:	f77f af75 	ble.w	80064ea <_printf_float+0x21a>
 8006600:	2301      	movs	r3, #1
 8006602:	4652      	mov	r2, sl
 8006604:	4631      	mov	r1, r6
 8006606:	4628      	mov	r0, r5
 8006608:	47b8      	blx	r7
 800660a:	3001      	adds	r0, #1
 800660c:	f43f aeae 	beq.w	800636c <_printf_float+0x9c>
 8006610:	f108 0801 	add.w	r8, r8, #1
 8006614:	e7ec      	b.n	80065f0 <_printf_float+0x320>
 8006616:	4613      	mov	r3, r2
 8006618:	4631      	mov	r1, r6
 800661a:	4642      	mov	r2, r8
 800661c:	4628      	mov	r0, r5
 800661e:	47b8      	blx	r7
 8006620:	3001      	adds	r0, #1
 8006622:	d1bf      	bne.n	80065a4 <_printf_float+0x2d4>
 8006624:	e6a2      	b.n	800636c <_printf_float+0x9c>
 8006626:	2301      	movs	r3, #1
 8006628:	4631      	mov	r1, r6
 800662a:	4628      	mov	r0, r5
 800662c:	9204      	str	r2, [sp, #16]
 800662e:	47b8      	blx	r7
 8006630:	3001      	adds	r0, #1
 8006632:	f43f ae9b 	beq.w	800636c <_printf_float+0x9c>
 8006636:	9b05      	ldr	r3, [sp, #20]
 8006638:	9a04      	ldr	r2, [sp, #16]
 800663a:	3301      	adds	r3, #1
 800663c:	9305      	str	r3, [sp, #20]
 800663e:	e7b7      	b.n	80065b0 <_printf_float+0x2e0>
 8006640:	4653      	mov	r3, sl
 8006642:	465a      	mov	r2, fp
 8006644:	4631      	mov	r1, r6
 8006646:	4628      	mov	r0, r5
 8006648:	47b8      	blx	r7
 800664a:	3001      	adds	r0, #1
 800664c:	d1be      	bne.n	80065cc <_printf_float+0x2fc>
 800664e:	e68d      	b.n	800636c <_printf_float+0x9c>
 8006650:	9a04      	ldr	r2, [sp, #16]
 8006652:	464b      	mov	r3, r9
 8006654:	4442      	add	r2, r8
 8006656:	4631      	mov	r1, r6
 8006658:	4628      	mov	r0, r5
 800665a:	47b8      	blx	r7
 800665c:	3001      	adds	r0, #1
 800665e:	d1c1      	bne.n	80065e4 <_printf_float+0x314>
 8006660:	e684      	b.n	800636c <_printf_float+0x9c>
 8006662:	9a08      	ldr	r2, [sp, #32]
 8006664:	2a01      	cmp	r2, #1
 8006666:	dc01      	bgt.n	800666c <_printf_float+0x39c>
 8006668:	07db      	lsls	r3, r3, #31
 800666a:	d537      	bpl.n	80066dc <_printf_float+0x40c>
 800666c:	2301      	movs	r3, #1
 800666e:	4642      	mov	r2, r8
 8006670:	4631      	mov	r1, r6
 8006672:	4628      	mov	r0, r5
 8006674:	47b8      	blx	r7
 8006676:	3001      	adds	r0, #1
 8006678:	f43f ae78 	beq.w	800636c <_printf_float+0x9c>
 800667c:	4653      	mov	r3, sl
 800667e:	465a      	mov	r2, fp
 8006680:	4631      	mov	r1, r6
 8006682:	4628      	mov	r0, r5
 8006684:	47b8      	blx	r7
 8006686:	3001      	adds	r0, #1
 8006688:	f43f ae70 	beq.w	800636c <_printf_float+0x9c>
 800668c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006690:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006698:	d01b      	beq.n	80066d2 <_printf_float+0x402>
 800669a:	9b08      	ldr	r3, [sp, #32]
 800669c:	f108 0201 	add.w	r2, r8, #1
 80066a0:	3b01      	subs	r3, #1
 80066a2:	4631      	mov	r1, r6
 80066a4:	4628      	mov	r0, r5
 80066a6:	47b8      	blx	r7
 80066a8:	3001      	adds	r0, #1
 80066aa:	d10e      	bne.n	80066ca <_printf_float+0x3fa>
 80066ac:	e65e      	b.n	800636c <_printf_float+0x9c>
 80066ae:	2301      	movs	r3, #1
 80066b0:	464a      	mov	r2, r9
 80066b2:	4631      	mov	r1, r6
 80066b4:	4628      	mov	r0, r5
 80066b6:	47b8      	blx	r7
 80066b8:	3001      	adds	r0, #1
 80066ba:	f43f ae57 	beq.w	800636c <_printf_float+0x9c>
 80066be:	f108 0801 	add.w	r8, r8, #1
 80066c2:	9b08      	ldr	r3, [sp, #32]
 80066c4:	3b01      	subs	r3, #1
 80066c6:	4543      	cmp	r3, r8
 80066c8:	dcf1      	bgt.n	80066ae <_printf_float+0x3de>
 80066ca:	9b04      	ldr	r3, [sp, #16]
 80066cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80066d0:	e6db      	b.n	800648a <_printf_float+0x1ba>
 80066d2:	f04f 0800 	mov.w	r8, #0
 80066d6:	f104 091a 	add.w	r9, r4, #26
 80066da:	e7f2      	b.n	80066c2 <_printf_float+0x3f2>
 80066dc:	2301      	movs	r3, #1
 80066de:	4642      	mov	r2, r8
 80066e0:	e7df      	b.n	80066a2 <_printf_float+0x3d2>
 80066e2:	2301      	movs	r3, #1
 80066e4:	464a      	mov	r2, r9
 80066e6:	4631      	mov	r1, r6
 80066e8:	4628      	mov	r0, r5
 80066ea:	47b8      	blx	r7
 80066ec:	3001      	adds	r0, #1
 80066ee:	f43f ae3d 	beq.w	800636c <_printf_float+0x9c>
 80066f2:	f108 0801 	add.w	r8, r8, #1
 80066f6:	68e3      	ldr	r3, [r4, #12]
 80066f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066fa:	1a5b      	subs	r3, r3, r1
 80066fc:	4543      	cmp	r3, r8
 80066fe:	dcf0      	bgt.n	80066e2 <_printf_float+0x412>
 8006700:	e6f7      	b.n	80064f2 <_printf_float+0x222>
 8006702:	f04f 0800 	mov.w	r8, #0
 8006706:	f104 0919 	add.w	r9, r4, #25
 800670a:	e7f4      	b.n	80066f6 <_printf_float+0x426>

0800670c <_printf_common>:
 800670c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006710:	4616      	mov	r6, r2
 8006712:	4699      	mov	r9, r3
 8006714:	688a      	ldr	r2, [r1, #8]
 8006716:	690b      	ldr	r3, [r1, #16]
 8006718:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800671c:	4293      	cmp	r3, r2
 800671e:	bfb8      	it	lt
 8006720:	4613      	movlt	r3, r2
 8006722:	6033      	str	r3, [r6, #0]
 8006724:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006728:	4607      	mov	r7, r0
 800672a:	460c      	mov	r4, r1
 800672c:	b10a      	cbz	r2, 8006732 <_printf_common+0x26>
 800672e:	3301      	adds	r3, #1
 8006730:	6033      	str	r3, [r6, #0]
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	0699      	lsls	r1, r3, #26
 8006736:	bf42      	ittt	mi
 8006738:	6833      	ldrmi	r3, [r6, #0]
 800673a:	3302      	addmi	r3, #2
 800673c:	6033      	strmi	r3, [r6, #0]
 800673e:	6825      	ldr	r5, [r4, #0]
 8006740:	f015 0506 	ands.w	r5, r5, #6
 8006744:	d106      	bne.n	8006754 <_printf_common+0x48>
 8006746:	f104 0a19 	add.w	sl, r4, #25
 800674a:	68e3      	ldr	r3, [r4, #12]
 800674c:	6832      	ldr	r2, [r6, #0]
 800674e:	1a9b      	subs	r3, r3, r2
 8006750:	42ab      	cmp	r3, r5
 8006752:	dc26      	bgt.n	80067a2 <_printf_common+0x96>
 8006754:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006758:	1e13      	subs	r3, r2, #0
 800675a:	6822      	ldr	r2, [r4, #0]
 800675c:	bf18      	it	ne
 800675e:	2301      	movne	r3, #1
 8006760:	0692      	lsls	r2, r2, #26
 8006762:	d42b      	bmi.n	80067bc <_printf_common+0xb0>
 8006764:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006768:	4649      	mov	r1, r9
 800676a:	4638      	mov	r0, r7
 800676c:	47c0      	blx	r8
 800676e:	3001      	adds	r0, #1
 8006770:	d01e      	beq.n	80067b0 <_printf_common+0xa4>
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	68e5      	ldr	r5, [r4, #12]
 8006776:	6832      	ldr	r2, [r6, #0]
 8006778:	f003 0306 	and.w	r3, r3, #6
 800677c:	2b04      	cmp	r3, #4
 800677e:	bf08      	it	eq
 8006780:	1aad      	subeq	r5, r5, r2
 8006782:	68a3      	ldr	r3, [r4, #8]
 8006784:	6922      	ldr	r2, [r4, #16]
 8006786:	bf0c      	ite	eq
 8006788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800678c:	2500      	movne	r5, #0
 800678e:	4293      	cmp	r3, r2
 8006790:	bfc4      	itt	gt
 8006792:	1a9b      	subgt	r3, r3, r2
 8006794:	18ed      	addgt	r5, r5, r3
 8006796:	2600      	movs	r6, #0
 8006798:	341a      	adds	r4, #26
 800679a:	42b5      	cmp	r5, r6
 800679c:	d11a      	bne.n	80067d4 <_printf_common+0xc8>
 800679e:	2000      	movs	r0, #0
 80067a0:	e008      	b.n	80067b4 <_printf_common+0xa8>
 80067a2:	2301      	movs	r3, #1
 80067a4:	4652      	mov	r2, sl
 80067a6:	4649      	mov	r1, r9
 80067a8:	4638      	mov	r0, r7
 80067aa:	47c0      	blx	r8
 80067ac:	3001      	adds	r0, #1
 80067ae:	d103      	bne.n	80067b8 <_printf_common+0xac>
 80067b0:	f04f 30ff 	mov.w	r0, #4294967295
 80067b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b8:	3501      	adds	r5, #1
 80067ba:	e7c6      	b.n	800674a <_printf_common+0x3e>
 80067bc:	18e1      	adds	r1, r4, r3
 80067be:	1c5a      	adds	r2, r3, #1
 80067c0:	2030      	movs	r0, #48	; 0x30
 80067c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067c6:	4422      	add	r2, r4
 80067c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067d0:	3302      	adds	r3, #2
 80067d2:	e7c7      	b.n	8006764 <_printf_common+0x58>
 80067d4:	2301      	movs	r3, #1
 80067d6:	4622      	mov	r2, r4
 80067d8:	4649      	mov	r1, r9
 80067da:	4638      	mov	r0, r7
 80067dc:	47c0      	blx	r8
 80067de:	3001      	adds	r0, #1
 80067e0:	d0e6      	beq.n	80067b0 <_printf_common+0xa4>
 80067e2:	3601      	adds	r6, #1
 80067e4:	e7d9      	b.n	800679a <_printf_common+0x8e>
	...

080067e8 <_printf_i>:
 80067e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067ec:	460c      	mov	r4, r1
 80067ee:	4691      	mov	r9, r2
 80067f0:	7e27      	ldrb	r7, [r4, #24]
 80067f2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80067f4:	2f78      	cmp	r7, #120	; 0x78
 80067f6:	4680      	mov	r8, r0
 80067f8:	469a      	mov	sl, r3
 80067fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067fe:	d807      	bhi.n	8006810 <_printf_i+0x28>
 8006800:	2f62      	cmp	r7, #98	; 0x62
 8006802:	d80a      	bhi.n	800681a <_printf_i+0x32>
 8006804:	2f00      	cmp	r7, #0
 8006806:	f000 80d8 	beq.w	80069ba <_printf_i+0x1d2>
 800680a:	2f58      	cmp	r7, #88	; 0x58
 800680c:	f000 80a3 	beq.w	8006956 <_printf_i+0x16e>
 8006810:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006814:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006818:	e03a      	b.n	8006890 <_printf_i+0xa8>
 800681a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800681e:	2b15      	cmp	r3, #21
 8006820:	d8f6      	bhi.n	8006810 <_printf_i+0x28>
 8006822:	a001      	add	r0, pc, #4	; (adr r0, 8006828 <_printf_i+0x40>)
 8006824:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006828:	08006881 	.word	0x08006881
 800682c:	08006895 	.word	0x08006895
 8006830:	08006811 	.word	0x08006811
 8006834:	08006811 	.word	0x08006811
 8006838:	08006811 	.word	0x08006811
 800683c:	08006811 	.word	0x08006811
 8006840:	08006895 	.word	0x08006895
 8006844:	08006811 	.word	0x08006811
 8006848:	08006811 	.word	0x08006811
 800684c:	08006811 	.word	0x08006811
 8006850:	08006811 	.word	0x08006811
 8006854:	080069a1 	.word	0x080069a1
 8006858:	080068c5 	.word	0x080068c5
 800685c:	08006983 	.word	0x08006983
 8006860:	08006811 	.word	0x08006811
 8006864:	08006811 	.word	0x08006811
 8006868:	080069c3 	.word	0x080069c3
 800686c:	08006811 	.word	0x08006811
 8006870:	080068c5 	.word	0x080068c5
 8006874:	08006811 	.word	0x08006811
 8006878:	08006811 	.word	0x08006811
 800687c:	0800698b 	.word	0x0800698b
 8006880:	680b      	ldr	r3, [r1, #0]
 8006882:	1d1a      	adds	r2, r3, #4
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	600a      	str	r2, [r1, #0]
 8006888:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800688c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006890:	2301      	movs	r3, #1
 8006892:	e0a3      	b.n	80069dc <_printf_i+0x1f4>
 8006894:	6825      	ldr	r5, [r4, #0]
 8006896:	6808      	ldr	r0, [r1, #0]
 8006898:	062e      	lsls	r6, r5, #24
 800689a:	f100 0304 	add.w	r3, r0, #4
 800689e:	d50a      	bpl.n	80068b6 <_printf_i+0xce>
 80068a0:	6805      	ldr	r5, [r0, #0]
 80068a2:	600b      	str	r3, [r1, #0]
 80068a4:	2d00      	cmp	r5, #0
 80068a6:	da03      	bge.n	80068b0 <_printf_i+0xc8>
 80068a8:	232d      	movs	r3, #45	; 0x2d
 80068aa:	426d      	negs	r5, r5
 80068ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068b0:	485e      	ldr	r0, [pc, #376]	; (8006a2c <_printf_i+0x244>)
 80068b2:	230a      	movs	r3, #10
 80068b4:	e019      	b.n	80068ea <_printf_i+0x102>
 80068b6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80068ba:	6805      	ldr	r5, [r0, #0]
 80068bc:	600b      	str	r3, [r1, #0]
 80068be:	bf18      	it	ne
 80068c0:	b22d      	sxthne	r5, r5
 80068c2:	e7ef      	b.n	80068a4 <_printf_i+0xbc>
 80068c4:	680b      	ldr	r3, [r1, #0]
 80068c6:	6825      	ldr	r5, [r4, #0]
 80068c8:	1d18      	adds	r0, r3, #4
 80068ca:	6008      	str	r0, [r1, #0]
 80068cc:	0628      	lsls	r0, r5, #24
 80068ce:	d501      	bpl.n	80068d4 <_printf_i+0xec>
 80068d0:	681d      	ldr	r5, [r3, #0]
 80068d2:	e002      	b.n	80068da <_printf_i+0xf2>
 80068d4:	0669      	lsls	r1, r5, #25
 80068d6:	d5fb      	bpl.n	80068d0 <_printf_i+0xe8>
 80068d8:	881d      	ldrh	r5, [r3, #0]
 80068da:	4854      	ldr	r0, [pc, #336]	; (8006a2c <_printf_i+0x244>)
 80068dc:	2f6f      	cmp	r7, #111	; 0x6f
 80068de:	bf0c      	ite	eq
 80068e0:	2308      	moveq	r3, #8
 80068e2:	230a      	movne	r3, #10
 80068e4:	2100      	movs	r1, #0
 80068e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068ea:	6866      	ldr	r6, [r4, #4]
 80068ec:	60a6      	str	r6, [r4, #8]
 80068ee:	2e00      	cmp	r6, #0
 80068f0:	bfa2      	ittt	ge
 80068f2:	6821      	ldrge	r1, [r4, #0]
 80068f4:	f021 0104 	bicge.w	r1, r1, #4
 80068f8:	6021      	strge	r1, [r4, #0]
 80068fa:	b90d      	cbnz	r5, 8006900 <_printf_i+0x118>
 80068fc:	2e00      	cmp	r6, #0
 80068fe:	d04d      	beq.n	800699c <_printf_i+0x1b4>
 8006900:	4616      	mov	r6, r2
 8006902:	fbb5 f1f3 	udiv	r1, r5, r3
 8006906:	fb03 5711 	mls	r7, r3, r1, r5
 800690a:	5dc7      	ldrb	r7, [r0, r7]
 800690c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006910:	462f      	mov	r7, r5
 8006912:	42bb      	cmp	r3, r7
 8006914:	460d      	mov	r5, r1
 8006916:	d9f4      	bls.n	8006902 <_printf_i+0x11a>
 8006918:	2b08      	cmp	r3, #8
 800691a:	d10b      	bne.n	8006934 <_printf_i+0x14c>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	07df      	lsls	r7, r3, #31
 8006920:	d508      	bpl.n	8006934 <_printf_i+0x14c>
 8006922:	6923      	ldr	r3, [r4, #16]
 8006924:	6861      	ldr	r1, [r4, #4]
 8006926:	4299      	cmp	r1, r3
 8006928:	bfde      	ittt	le
 800692a:	2330      	movle	r3, #48	; 0x30
 800692c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006930:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006934:	1b92      	subs	r2, r2, r6
 8006936:	6122      	str	r2, [r4, #16]
 8006938:	f8cd a000 	str.w	sl, [sp]
 800693c:	464b      	mov	r3, r9
 800693e:	aa03      	add	r2, sp, #12
 8006940:	4621      	mov	r1, r4
 8006942:	4640      	mov	r0, r8
 8006944:	f7ff fee2 	bl	800670c <_printf_common>
 8006948:	3001      	adds	r0, #1
 800694a:	d14c      	bne.n	80069e6 <_printf_i+0x1fe>
 800694c:	f04f 30ff 	mov.w	r0, #4294967295
 8006950:	b004      	add	sp, #16
 8006952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006956:	4835      	ldr	r0, [pc, #212]	; (8006a2c <_printf_i+0x244>)
 8006958:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	680e      	ldr	r6, [r1, #0]
 8006960:	061f      	lsls	r7, r3, #24
 8006962:	f856 5b04 	ldr.w	r5, [r6], #4
 8006966:	600e      	str	r6, [r1, #0]
 8006968:	d514      	bpl.n	8006994 <_printf_i+0x1ac>
 800696a:	07d9      	lsls	r1, r3, #31
 800696c:	bf44      	itt	mi
 800696e:	f043 0320 	orrmi.w	r3, r3, #32
 8006972:	6023      	strmi	r3, [r4, #0]
 8006974:	b91d      	cbnz	r5, 800697e <_printf_i+0x196>
 8006976:	6823      	ldr	r3, [r4, #0]
 8006978:	f023 0320 	bic.w	r3, r3, #32
 800697c:	6023      	str	r3, [r4, #0]
 800697e:	2310      	movs	r3, #16
 8006980:	e7b0      	b.n	80068e4 <_printf_i+0xfc>
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	f043 0320 	orr.w	r3, r3, #32
 8006988:	6023      	str	r3, [r4, #0]
 800698a:	2378      	movs	r3, #120	; 0x78
 800698c:	4828      	ldr	r0, [pc, #160]	; (8006a30 <_printf_i+0x248>)
 800698e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006992:	e7e3      	b.n	800695c <_printf_i+0x174>
 8006994:	065e      	lsls	r6, r3, #25
 8006996:	bf48      	it	mi
 8006998:	b2ad      	uxthmi	r5, r5
 800699a:	e7e6      	b.n	800696a <_printf_i+0x182>
 800699c:	4616      	mov	r6, r2
 800699e:	e7bb      	b.n	8006918 <_printf_i+0x130>
 80069a0:	680b      	ldr	r3, [r1, #0]
 80069a2:	6826      	ldr	r6, [r4, #0]
 80069a4:	6960      	ldr	r0, [r4, #20]
 80069a6:	1d1d      	adds	r5, r3, #4
 80069a8:	600d      	str	r5, [r1, #0]
 80069aa:	0635      	lsls	r5, r6, #24
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	d501      	bpl.n	80069b4 <_printf_i+0x1cc>
 80069b0:	6018      	str	r0, [r3, #0]
 80069b2:	e002      	b.n	80069ba <_printf_i+0x1d2>
 80069b4:	0671      	lsls	r1, r6, #25
 80069b6:	d5fb      	bpl.n	80069b0 <_printf_i+0x1c8>
 80069b8:	8018      	strh	r0, [r3, #0]
 80069ba:	2300      	movs	r3, #0
 80069bc:	6123      	str	r3, [r4, #16]
 80069be:	4616      	mov	r6, r2
 80069c0:	e7ba      	b.n	8006938 <_printf_i+0x150>
 80069c2:	680b      	ldr	r3, [r1, #0]
 80069c4:	1d1a      	adds	r2, r3, #4
 80069c6:	600a      	str	r2, [r1, #0]
 80069c8:	681e      	ldr	r6, [r3, #0]
 80069ca:	6862      	ldr	r2, [r4, #4]
 80069cc:	2100      	movs	r1, #0
 80069ce:	4630      	mov	r0, r6
 80069d0:	f7f9 fc3e 	bl	8000250 <memchr>
 80069d4:	b108      	cbz	r0, 80069da <_printf_i+0x1f2>
 80069d6:	1b80      	subs	r0, r0, r6
 80069d8:	6060      	str	r0, [r4, #4]
 80069da:	6863      	ldr	r3, [r4, #4]
 80069dc:	6123      	str	r3, [r4, #16]
 80069de:	2300      	movs	r3, #0
 80069e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069e4:	e7a8      	b.n	8006938 <_printf_i+0x150>
 80069e6:	6923      	ldr	r3, [r4, #16]
 80069e8:	4632      	mov	r2, r6
 80069ea:	4649      	mov	r1, r9
 80069ec:	4640      	mov	r0, r8
 80069ee:	47d0      	blx	sl
 80069f0:	3001      	adds	r0, #1
 80069f2:	d0ab      	beq.n	800694c <_printf_i+0x164>
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	079b      	lsls	r3, r3, #30
 80069f8:	d413      	bmi.n	8006a22 <_printf_i+0x23a>
 80069fa:	68e0      	ldr	r0, [r4, #12]
 80069fc:	9b03      	ldr	r3, [sp, #12]
 80069fe:	4298      	cmp	r0, r3
 8006a00:	bfb8      	it	lt
 8006a02:	4618      	movlt	r0, r3
 8006a04:	e7a4      	b.n	8006950 <_printf_i+0x168>
 8006a06:	2301      	movs	r3, #1
 8006a08:	4632      	mov	r2, r6
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	4640      	mov	r0, r8
 8006a0e:	47d0      	blx	sl
 8006a10:	3001      	adds	r0, #1
 8006a12:	d09b      	beq.n	800694c <_printf_i+0x164>
 8006a14:	3501      	adds	r5, #1
 8006a16:	68e3      	ldr	r3, [r4, #12]
 8006a18:	9903      	ldr	r1, [sp, #12]
 8006a1a:	1a5b      	subs	r3, r3, r1
 8006a1c:	42ab      	cmp	r3, r5
 8006a1e:	dcf2      	bgt.n	8006a06 <_printf_i+0x21e>
 8006a20:	e7eb      	b.n	80069fa <_printf_i+0x212>
 8006a22:	2500      	movs	r5, #0
 8006a24:	f104 0619 	add.w	r6, r4, #25
 8006a28:	e7f5      	b.n	8006a16 <_printf_i+0x22e>
 8006a2a:	bf00      	nop
 8006a2c:	0800ae3e 	.word	0x0800ae3e
 8006a30:	0800ae4f 	.word	0x0800ae4f

08006a34 <_scanf_float>:
 8006a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a38:	b087      	sub	sp, #28
 8006a3a:	4617      	mov	r7, r2
 8006a3c:	9303      	str	r3, [sp, #12]
 8006a3e:	688b      	ldr	r3, [r1, #8]
 8006a40:	1e5a      	subs	r2, r3, #1
 8006a42:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006a46:	bf83      	ittte	hi
 8006a48:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006a4c:	195b      	addhi	r3, r3, r5
 8006a4e:	9302      	strhi	r3, [sp, #8]
 8006a50:	2300      	movls	r3, #0
 8006a52:	bf86      	itte	hi
 8006a54:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006a58:	608b      	strhi	r3, [r1, #8]
 8006a5a:	9302      	strls	r3, [sp, #8]
 8006a5c:	680b      	ldr	r3, [r1, #0]
 8006a5e:	468b      	mov	fp, r1
 8006a60:	2500      	movs	r5, #0
 8006a62:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006a66:	f84b 3b1c 	str.w	r3, [fp], #28
 8006a6a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006a6e:	4680      	mov	r8, r0
 8006a70:	460c      	mov	r4, r1
 8006a72:	465e      	mov	r6, fp
 8006a74:	46aa      	mov	sl, r5
 8006a76:	46a9      	mov	r9, r5
 8006a78:	9501      	str	r5, [sp, #4]
 8006a7a:	68a2      	ldr	r2, [r4, #8]
 8006a7c:	b152      	cbz	r2, 8006a94 <_scanf_float+0x60>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	2b4e      	cmp	r3, #78	; 0x4e
 8006a84:	d864      	bhi.n	8006b50 <_scanf_float+0x11c>
 8006a86:	2b40      	cmp	r3, #64	; 0x40
 8006a88:	d83c      	bhi.n	8006b04 <_scanf_float+0xd0>
 8006a8a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006a8e:	b2c8      	uxtb	r0, r1
 8006a90:	280e      	cmp	r0, #14
 8006a92:	d93a      	bls.n	8006b0a <_scanf_float+0xd6>
 8006a94:	f1b9 0f00 	cmp.w	r9, #0
 8006a98:	d003      	beq.n	8006aa2 <_scanf_float+0x6e>
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006aa6:	f1ba 0f01 	cmp.w	sl, #1
 8006aaa:	f200 8113 	bhi.w	8006cd4 <_scanf_float+0x2a0>
 8006aae:	455e      	cmp	r6, fp
 8006ab0:	f200 8105 	bhi.w	8006cbe <_scanf_float+0x28a>
 8006ab4:	2501      	movs	r5, #1
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	b007      	add	sp, #28
 8006aba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006abe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006ac2:	2a0d      	cmp	r2, #13
 8006ac4:	d8e6      	bhi.n	8006a94 <_scanf_float+0x60>
 8006ac6:	a101      	add	r1, pc, #4	; (adr r1, 8006acc <_scanf_float+0x98>)
 8006ac8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006acc:	08006c0b 	.word	0x08006c0b
 8006ad0:	08006a95 	.word	0x08006a95
 8006ad4:	08006a95 	.word	0x08006a95
 8006ad8:	08006a95 	.word	0x08006a95
 8006adc:	08006c6b 	.word	0x08006c6b
 8006ae0:	08006c43 	.word	0x08006c43
 8006ae4:	08006a95 	.word	0x08006a95
 8006ae8:	08006a95 	.word	0x08006a95
 8006aec:	08006c19 	.word	0x08006c19
 8006af0:	08006a95 	.word	0x08006a95
 8006af4:	08006a95 	.word	0x08006a95
 8006af8:	08006a95 	.word	0x08006a95
 8006afc:	08006a95 	.word	0x08006a95
 8006b00:	08006bd1 	.word	0x08006bd1
 8006b04:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006b08:	e7db      	b.n	8006ac2 <_scanf_float+0x8e>
 8006b0a:	290e      	cmp	r1, #14
 8006b0c:	d8c2      	bhi.n	8006a94 <_scanf_float+0x60>
 8006b0e:	a001      	add	r0, pc, #4	; (adr r0, 8006b14 <_scanf_float+0xe0>)
 8006b10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006b14:	08006bc3 	.word	0x08006bc3
 8006b18:	08006a95 	.word	0x08006a95
 8006b1c:	08006bc3 	.word	0x08006bc3
 8006b20:	08006c57 	.word	0x08006c57
 8006b24:	08006a95 	.word	0x08006a95
 8006b28:	08006b71 	.word	0x08006b71
 8006b2c:	08006bad 	.word	0x08006bad
 8006b30:	08006bad 	.word	0x08006bad
 8006b34:	08006bad 	.word	0x08006bad
 8006b38:	08006bad 	.word	0x08006bad
 8006b3c:	08006bad 	.word	0x08006bad
 8006b40:	08006bad 	.word	0x08006bad
 8006b44:	08006bad 	.word	0x08006bad
 8006b48:	08006bad 	.word	0x08006bad
 8006b4c:	08006bad 	.word	0x08006bad
 8006b50:	2b6e      	cmp	r3, #110	; 0x6e
 8006b52:	d809      	bhi.n	8006b68 <_scanf_float+0x134>
 8006b54:	2b60      	cmp	r3, #96	; 0x60
 8006b56:	d8b2      	bhi.n	8006abe <_scanf_float+0x8a>
 8006b58:	2b54      	cmp	r3, #84	; 0x54
 8006b5a:	d077      	beq.n	8006c4c <_scanf_float+0x218>
 8006b5c:	2b59      	cmp	r3, #89	; 0x59
 8006b5e:	d199      	bne.n	8006a94 <_scanf_float+0x60>
 8006b60:	2d07      	cmp	r5, #7
 8006b62:	d197      	bne.n	8006a94 <_scanf_float+0x60>
 8006b64:	2508      	movs	r5, #8
 8006b66:	e029      	b.n	8006bbc <_scanf_float+0x188>
 8006b68:	2b74      	cmp	r3, #116	; 0x74
 8006b6a:	d06f      	beq.n	8006c4c <_scanf_float+0x218>
 8006b6c:	2b79      	cmp	r3, #121	; 0x79
 8006b6e:	e7f6      	b.n	8006b5e <_scanf_float+0x12a>
 8006b70:	6821      	ldr	r1, [r4, #0]
 8006b72:	05c8      	lsls	r0, r1, #23
 8006b74:	d51a      	bpl.n	8006bac <_scanf_float+0x178>
 8006b76:	9b02      	ldr	r3, [sp, #8]
 8006b78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006b7c:	6021      	str	r1, [r4, #0]
 8006b7e:	f109 0901 	add.w	r9, r9, #1
 8006b82:	b11b      	cbz	r3, 8006b8c <_scanf_float+0x158>
 8006b84:	3b01      	subs	r3, #1
 8006b86:	3201      	adds	r2, #1
 8006b88:	9302      	str	r3, [sp, #8]
 8006b8a:	60a2      	str	r2, [r4, #8]
 8006b8c:	68a3      	ldr	r3, [r4, #8]
 8006b8e:	3b01      	subs	r3, #1
 8006b90:	60a3      	str	r3, [r4, #8]
 8006b92:	6923      	ldr	r3, [r4, #16]
 8006b94:	3301      	adds	r3, #1
 8006b96:	6123      	str	r3, [r4, #16]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	607b      	str	r3, [r7, #4]
 8006ba0:	f340 8084 	ble.w	8006cac <_scanf_float+0x278>
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	603b      	str	r3, [r7, #0]
 8006baa:	e766      	b.n	8006a7a <_scanf_float+0x46>
 8006bac:	eb1a 0f05 	cmn.w	sl, r5
 8006bb0:	f47f af70 	bne.w	8006a94 <_scanf_float+0x60>
 8006bb4:	6822      	ldr	r2, [r4, #0]
 8006bb6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006bba:	6022      	str	r2, [r4, #0]
 8006bbc:	f806 3b01 	strb.w	r3, [r6], #1
 8006bc0:	e7e4      	b.n	8006b8c <_scanf_float+0x158>
 8006bc2:	6822      	ldr	r2, [r4, #0]
 8006bc4:	0610      	lsls	r0, r2, #24
 8006bc6:	f57f af65 	bpl.w	8006a94 <_scanf_float+0x60>
 8006bca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bce:	e7f4      	b.n	8006bba <_scanf_float+0x186>
 8006bd0:	f1ba 0f00 	cmp.w	sl, #0
 8006bd4:	d10e      	bne.n	8006bf4 <_scanf_float+0x1c0>
 8006bd6:	f1b9 0f00 	cmp.w	r9, #0
 8006bda:	d10e      	bne.n	8006bfa <_scanf_float+0x1c6>
 8006bdc:	6822      	ldr	r2, [r4, #0]
 8006bde:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006be2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006be6:	d108      	bne.n	8006bfa <_scanf_float+0x1c6>
 8006be8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006bec:	6022      	str	r2, [r4, #0]
 8006bee:	f04f 0a01 	mov.w	sl, #1
 8006bf2:	e7e3      	b.n	8006bbc <_scanf_float+0x188>
 8006bf4:	f1ba 0f02 	cmp.w	sl, #2
 8006bf8:	d055      	beq.n	8006ca6 <_scanf_float+0x272>
 8006bfa:	2d01      	cmp	r5, #1
 8006bfc:	d002      	beq.n	8006c04 <_scanf_float+0x1d0>
 8006bfe:	2d04      	cmp	r5, #4
 8006c00:	f47f af48 	bne.w	8006a94 <_scanf_float+0x60>
 8006c04:	3501      	adds	r5, #1
 8006c06:	b2ed      	uxtb	r5, r5
 8006c08:	e7d8      	b.n	8006bbc <_scanf_float+0x188>
 8006c0a:	f1ba 0f01 	cmp.w	sl, #1
 8006c0e:	f47f af41 	bne.w	8006a94 <_scanf_float+0x60>
 8006c12:	f04f 0a02 	mov.w	sl, #2
 8006c16:	e7d1      	b.n	8006bbc <_scanf_float+0x188>
 8006c18:	b97d      	cbnz	r5, 8006c3a <_scanf_float+0x206>
 8006c1a:	f1b9 0f00 	cmp.w	r9, #0
 8006c1e:	f47f af3c 	bne.w	8006a9a <_scanf_float+0x66>
 8006c22:	6822      	ldr	r2, [r4, #0]
 8006c24:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c28:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c2c:	f47f af39 	bne.w	8006aa2 <_scanf_float+0x6e>
 8006c30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c34:	6022      	str	r2, [r4, #0]
 8006c36:	2501      	movs	r5, #1
 8006c38:	e7c0      	b.n	8006bbc <_scanf_float+0x188>
 8006c3a:	2d03      	cmp	r5, #3
 8006c3c:	d0e2      	beq.n	8006c04 <_scanf_float+0x1d0>
 8006c3e:	2d05      	cmp	r5, #5
 8006c40:	e7de      	b.n	8006c00 <_scanf_float+0x1cc>
 8006c42:	2d02      	cmp	r5, #2
 8006c44:	f47f af26 	bne.w	8006a94 <_scanf_float+0x60>
 8006c48:	2503      	movs	r5, #3
 8006c4a:	e7b7      	b.n	8006bbc <_scanf_float+0x188>
 8006c4c:	2d06      	cmp	r5, #6
 8006c4e:	f47f af21 	bne.w	8006a94 <_scanf_float+0x60>
 8006c52:	2507      	movs	r5, #7
 8006c54:	e7b2      	b.n	8006bbc <_scanf_float+0x188>
 8006c56:	6822      	ldr	r2, [r4, #0]
 8006c58:	0591      	lsls	r1, r2, #22
 8006c5a:	f57f af1b 	bpl.w	8006a94 <_scanf_float+0x60>
 8006c5e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006c62:	6022      	str	r2, [r4, #0]
 8006c64:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c68:	e7a8      	b.n	8006bbc <_scanf_float+0x188>
 8006c6a:	6822      	ldr	r2, [r4, #0]
 8006c6c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006c70:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006c74:	d006      	beq.n	8006c84 <_scanf_float+0x250>
 8006c76:	0550      	lsls	r0, r2, #21
 8006c78:	f57f af0c 	bpl.w	8006a94 <_scanf_float+0x60>
 8006c7c:	f1b9 0f00 	cmp.w	r9, #0
 8006c80:	f43f af0f 	beq.w	8006aa2 <_scanf_float+0x6e>
 8006c84:	0591      	lsls	r1, r2, #22
 8006c86:	bf58      	it	pl
 8006c88:	9901      	ldrpl	r1, [sp, #4]
 8006c8a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c8e:	bf58      	it	pl
 8006c90:	eba9 0101 	subpl.w	r1, r9, r1
 8006c94:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006c98:	bf58      	it	pl
 8006c9a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006c9e:	6022      	str	r2, [r4, #0]
 8006ca0:	f04f 0900 	mov.w	r9, #0
 8006ca4:	e78a      	b.n	8006bbc <_scanf_float+0x188>
 8006ca6:	f04f 0a03 	mov.w	sl, #3
 8006caa:	e787      	b.n	8006bbc <_scanf_float+0x188>
 8006cac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006cb0:	4639      	mov	r1, r7
 8006cb2:	4640      	mov	r0, r8
 8006cb4:	4798      	blx	r3
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	f43f aedf 	beq.w	8006a7a <_scanf_float+0x46>
 8006cbc:	e6ea      	b.n	8006a94 <_scanf_float+0x60>
 8006cbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cc6:	463a      	mov	r2, r7
 8006cc8:	4640      	mov	r0, r8
 8006cca:	4798      	blx	r3
 8006ccc:	6923      	ldr	r3, [r4, #16]
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	6123      	str	r3, [r4, #16]
 8006cd2:	e6ec      	b.n	8006aae <_scanf_float+0x7a>
 8006cd4:	1e6b      	subs	r3, r5, #1
 8006cd6:	2b06      	cmp	r3, #6
 8006cd8:	d825      	bhi.n	8006d26 <_scanf_float+0x2f2>
 8006cda:	2d02      	cmp	r5, #2
 8006cdc:	d836      	bhi.n	8006d4c <_scanf_float+0x318>
 8006cde:	455e      	cmp	r6, fp
 8006ce0:	f67f aee8 	bls.w	8006ab4 <_scanf_float+0x80>
 8006ce4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006ce8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cec:	463a      	mov	r2, r7
 8006cee:	4640      	mov	r0, r8
 8006cf0:	4798      	blx	r3
 8006cf2:	6923      	ldr	r3, [r4, #16]
 8006cf4:	3b01      	subs	r3, #1
 8006cf6:	6123      	str	r3, [r4, #16]
 8006cf8:	e7f1      	b.n	8006cde <_scanf_float+0x2aa>
 8006cfa:	9802      	ldr	r0, [sp, #8]
 8006cfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d00:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006d04:	9002      	str	r0, [sp, #8]
 8006d06:	463a      	mov	r2, r7
 8006d08:	4640      	mov	r0, r8
 8006d0a:	4798      	blx	r3
 8006d0c:	6923      	ldr	r3, [r4, #16]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	6123      	str	r3, [r4, #16]
 8006d12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d16:	fa5f fa8a 	uxtb.w	sl, sl
 8006d1a:	f1ba 0f02 	cmp.w	sl, #2
 8006d1e:	d1ec      	bne.n	8006cfa <_scanf_float+0x2c6>
 8006d20:	3d03      	subs	r5, #3
 8006d22:	b2ed      	uxtb	r5, r5
 8006d24:	1b76      	subs	r6, r6, r5
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	05da      	lsls	r2, r3, #23
 8006d2a:	d52f      	bpl.n	8006d8c <_scanf_float+0x358>
 8006d2c:	055b      	lsls	r3, r3, #21
 8006d2e:	d510      	bpl.n	8006d52 <_scanf_float+0x31e>
 8006d30:	455e      	cmp	r6, fp
 8006d32:	f67f aebf 	bls.w	8006ab4 <_scanf_float+0x80>
 8006d36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d3e:	463a      	mov	r2, r7
 8006d40:	4640      	mov	r0, r8
 8006d42:	4798      	blx	r3
 8006d44:	6923      	ldr	r3, [r4, #16]
 8006d46:	3b01      	subs	r3, #1
 8006d48:	6123      	str	r3, [r4, #16]
 8006d4a:	e7f1      	b.n	8006d30 <_scanf_float+0x2fc>
 8006d4c:	46aa      	mov	sl, r5
 8006d4e:	9602      	str	r6, [sp, #8]
 8006d50:	e7df      	b.n	8006d12 <_scanf_float+0x2de>
 8006d52:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006d56:	6923      	ldr	r3, [r4, #16]
 8006d58:	2965      	cmp	r1, #101	; 0x65
 8006d5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d5e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006d62:	6123      	str	r3, [r4, #16]
 8006d64:	d00c      	beq.n	8006d80 <_scanf_float+0x34c>
 8006d66:	2945      	cmp	r1, #69	; 0x45
 8006d68:	d00a      	beq.n	8006d80 <_scanf_float+0x34c>
 8006d6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d6e:	463a      	mov	r2, r7
 8006d70:	4640      	mov	r0, r8
 8006d72:	4798      	blx	r3
 8006d74:	6923      	ldr	r3, [r4, #16]
 8006d76:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	1eb5      	subs	r5, r6, #2
 8006d7e:	6123      	str	r3, [r4, #16]
 8006d80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d84:	463a      	mov	r2, r7
 8006d86:	4640      	mov	r0, r8
 8006d88:	4798      	blx	r3
 8006d8a:	462e      	mov	r6, r5
 8006d8c:	6825      	ldr	r5, [r4, #0]
 8006d8e:	f015 0510 	ands.w	r5, r5, #16
 8006d92:	d14d      	bne.n	8006e30 <_scanf_float+0x3fc>
 8006d94:	7035      	strb	r5, [r6, #0]
 8006d96:	6823      	ldr	r3, [r4, #0]
 8006d98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006da0:	d11a      	bne.n	8006dd8 <_scanf_float+0x3a4>
 8006da2:	9b01      	ldr	r3, [sp, #4]
 8006da4:	454b      	cmp	r3, r9
 8006da6:	eba3 0209 	sub.w	r2, r3, r9
 8006daa:	d122      	bne.n	8006df2 <_scanf_float+0x3be>
 8006dac:	2200      	movs	r2, #0
 8006dae:	4659      	mov	r1, fp
 8006db0:	4640      	mov	r0, r8
 8006db2:	f000 feff 	bl	8007bb4 <_strtod_r>
 8006db6:	9b03      	ldr	r3, [sp, #12]
 8006db8:	6821      	ldr	r1, [r4, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f011 0f02 	tst.w	r1, #2
 8006dc0:	f103 0204 	add.w	r2, r3, #4
 8006dc4:	d020      	beq.n	8006e08 <_scanf_float+0x3d4>
 8006dc6:	9903      	ldr	r1, [sp, #12]
 8006dc8:	600a      	str	r2, [r1, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	ed83 0b00 	vstr	d0, [r3]
 8006dd0:	68e3      	ldr	r3, [r4, #12]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	60e3      	str	r3, [r4, #12]
 8006dd6:	e66e      	b.n	8006ab6 <_scanf_float+0x82>
 8006dd8:	9b04      	ldr	r3, [sp, #16]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d0e6      	beq.n	8006dac <_scanf_float+0x378>
 8006dde:	9905      	ldr	r1, [sp, #20]
 8006de0:	230a      	movs	r3, #10
 8006de2:	462a      	mov	r2, r5
 8006de4:	3101      	adds	r1, #1
 8006de6:	4640      	mov	r0, r8
 8006de8:	f000 ff6e 	bl	8007cc8 <_strtol_r>
 8006dec:	9b04      	ldr	r3, [sp, #16]
 8006dee:	9e05      	ldr	r6, [sp, #20]
 8006df0:	1ac2      	subs	r2, r0, r3
 8006df2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006df6:	429e      	cmp	r6, r3
 8006df8:	bf28      	it	cs
 8006dfa:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006dfe:	490d      	ldr	r1, [pc, #52]	; (8006e34 <_scanf_float+0x400>)
 8006e00:	4630      	mov	r0, r6
 8006e02:	f000 f8c5 	bl	8006f90 <siprintf>
 8006e06:	e7d1      	b.n	8006dac <_scanf_float+0x378>
 8006e08:	f011 0f04 	tst.w	r1, #4
 8006e0c:	9903      	ldr	r1, [sp, #12]
 8006e0e:	600a      	str	r2, [r1, #0]
 8006e10:	d1db      	bne.n	8006dca <_scanf_float+0x396>
 8006e12:	eeb4 0b40 	vcmp.f64	d0, d0
 8006e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e1a:	681e      	ldr	r6, [r3, #0]
 8006e1c:	d705      	bvc.n	8006e2a <_scanf_float+0x3f6>
 8006e1e:	4806      	ldr	r0, [pc, #24]	; (8006e38 <_scanf_float+0x404>)
 8006e20:	f000 f8b0 	bl	8006f84 <nanf>
 8006e24:	ed86 0a00 	vstr	s0, [r6]
 8006e28:	e7d2      	b.n	8006dd0 <_scanf_float+0x39c>
 8006e2a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006e2e:	e7f9      	b.n	8006e24 <_scanf_float+0x3f0>
 8006e30:	2500      	movs	r5, #0
 8006e32:	e640      	b.n	8006ab6 <_scanf_float+0x82>
 8006e34:	0800ae60 	.word	0x0800ae60
 8006e38:	0800b2d8 	.word	0x0800b2d8

08006e3c <iprintf>:
 8006e3c:	b40f      	push	{r0, r1, r2, r3}
 8006e3e:	4b0a      	ldr	r3, [pc, #40]	; (8006e68 <iprintf+0x2c>)
 8006e40:	b513      	push	{r0, r1, r4, lr}
 8006e42:	681c      	ldr	r4, [r3, #0]
 8006e44:	b124      	cbz	r4, 8006e50 <iprintf+0x14>
 8006e46:	69a3      	ldr	r3, [r4, #24]
 8006e48:	b913      	cbnz	r3, 8006e50 <iprintf+0x14>
 8006e4a:	4620      	mov	r0, r4
 8006e4c:	f001 ff28 	bl	8008ca0 <__sinit>
 8006e50:	ab05      	add	r3, sp, #20
 8006e52:	9a04      	ldr	r2, [sp, #16]
 8006e54:	68a1      	ldr	r1, [r4, #8]
 8006e56:	9301      	str	r3, [sp, #4]
 8006e58:	4620      	mov	r0, r4
 8006e5a:	f003 fabd 	bl	800a3d8 <_vfiprintf_r>
 8006e5e:	b002      	add	sp, #8
 8006e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e64:	b004      	add	sp, #16
 8006e66:	4770      	bx	lr
 8006e68:	20000014 	.word	0x20000014

08006e6c <putchar>:
 8006e6c:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <putchar+0x28>)
 8006e6e:	b513      	push	{r0, r1, r4, lr}
 8006e70:	681c      	ldr	r4, [r3, #0]
 8006e72:	4601      	mov	r1, r0
 8006e74:	b134      	cbz	r4, 8006e84 <putchar+0x18>
 8006e76:	69a3      	ldr	r3, [r4, #24]
 8006e78:	b923      	cbnz	r3, 8006e84 <putchar+0x18>
 8006e7a:	9001      	str	r0, [sp, #4]
 8006e7c:	4620      	mov	r0, r4
 8006e7e:	f001 ff0f 	bl	8008ca0 <__sinit>
 8006e82:	9901      	ldr	r1, [sp, #4]
 8006e84:	68a2      	ldr	r2, [r4, #8]
 8006e86:	4620      	mov	r0, r4
 8006e88:	b002      	add	sp, #8
 8006e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e8e:	f003 bbd3 	b.w	800a638 <_putc_r>
 8006e92:	bf00      	nop
 8006e94:	20000014 	.word	0x20000014

08006e98 <_puts_r>:
 8006e98:	b570      	push	{r4, r5, r6, lr}
 8006e9a:	460e      	mov	r6, r1
 8006e9c:	4605      	mov	r5, r0
 8006e9e:	b118      	cbz	r0, 8006ea8 <_puts_r+0x10>
 8006ea0:	6983      	ldr	r3, [r0, #24]
 8006ea2:	b90b      	cbnz	r3, 8006ea8 <_puts_r+0x10>
 8006ea4:	f001 fefc 	bl	8008ca0 <__sinit>
 8006ea8:	69ab      	ldr	r3, [r5, #24]
 8006eaa:	68ac      	ldr	r4, [r5, #8]
 8006eac:	b913      	cbnz	r3, 8006eb4 <_puts_r+0x1c>
 8006eae:	4628      	mov	r0, r5
 8006eb0:	f001 fef6 	bl	8008ca0 <__sinit>
 8006eb4:	4b2c      	ldr	r3, [pc, #176]	; (8006f68 <_puts_r+0xd0>)
 8006eb6:	429c      	cmp	r4, r3
 8006eb8:	d120      	bne.n	8006efc <_puts_r+0x64>
 8006eba:	686c      	ldr	r4, [r5, #4]
 8006ebc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ebe:	07db      	lsls	r3, r3, #31
 8006ec0:	d405      	bmi.n	8006ece <_puts_r+0x36>
 8006ec2:	89a3      	ldrh	r3, [r4, #12]
 8006ec4:	0598      	lsls	r0, r3, #22
 8006ec6:	d402      	bmi.n	8006ece <_puts_r+0x36>
 8006ec8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eca:	f002 fafa 	bl	80094c2 <__retarget_lock_acquire_recursive>
 8006ece:	89a3      	ldrh	r3, [r4, #12]
 8006ed0:	0719      	lsls	r1, r3, #28
 8006ed2:	d51d      	bpl.n	8006f10 <_puts_r+0x78>
 8006ed4:	6923      	ldr	r3, [r4, #16]
 8006ed6:	b1db      	cbz	r3, 8006f10 <_puts_r+0x78>
 8006ed8:	3e01      	subs	r6, #1
 8006eda:	68a3      	ldr	r3, [r4, #8]
 8006edc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006ee0:	3b01      	subs	r3, #1
 8006ee2:	60a3      	str	r3, [r4, #8]
 8006ee4:	bb39      	cbnz	r1, 8006f36 <_puts_r+0x9e>
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	da38      	bge.n	8006f5c <_puts_r+0xc4>
 8006eea:	4622      	mov	r2, r4
 8006eec:	210a      	movs	r1, #10
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f000 feec 	bl	8007ccc <__swbuf_r>
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d011      	beq.n	8006f1c <_puts_r+0x84>
 8006ef8:	250a      	movs	r5, #10
 8006efa:	e011      	b.n	8006f20 <_puts_r+0x88>
 8006efc:	4b1b      	ldr	r3, [pc, #108]	; (8006f6c <_puts_r+0xd4>)
 8006efe:	429c      	cmp	r4, r3
 8006f00:	d101      	bne.n	8006f06 <_puts_r+0x6e>
 8006f02:	68ac      	ldr	r4, [r5, #8]
 8006f04:	e7da      	b.n	8006ebc <_puts_r+0x24>
 8006f06:	4b1a      	ldr	r3, [pc, #104]	; (8006f70 <_puts_r+0xd8>)
 8006f08:	429c      	cmp	r4, r3
 8006f0a:	bf08      	it	eq
 8006f0c:	68ec      	ldreq	r4, [r5, #12]
 8006f0e:	e7d5      	b.n	8006ebc <_puts_r+0x24>
 8006f10:	4621      	mov	r1, r4
 8006f12:	4628      	mov	r0, r5
 8006f14:	f000 ff2c 	bl	8007d70 <__swsetup_r>
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	d0dd      	beq.n	8006ed8 <_puts_r+0x40>
 8006f1c:	f04f 35ff 	mov.w	r5, #4294967295
 8006f20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f22:	07da      	lsls	r2, r3, #31
 8006f24:	d405      	bmi.n	8006f32 <_puts_r+0x9a>
 8006f26:	89a3      	ldrh	r3, [r4, #12]
 8006f28:	059b      	lsls	r3, r3, #22
 8006f2a:	d402      	bmi.n	8006f32 <_puts_r+0x9a>
 8006f2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f2e:	f002 fac9 	bl	80094c4 <__retarget_lock_release_recursive>
 8006f32:	4628      	mov	r0, r5
 8006f34:	bd70      	pop	{r4, r5, r6, pc}
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	da04      	bge.n	8006f44 <_puts_r+0xac>
 8006f3a:	69a2      	ldr	r2, [r4, #24]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	dc06      	bgt.n	8006f4e <_puts_r+0xb6>
 8006f40:	290a      	cmp	r1, #10
 8006f42:	d004      	beq.n	8006f4e <_puts_r+0xb6>
 8006f44:	6823      	ldr	r3, [r4, #0]
 8006f46:	1c5a      	adds	r2, r3, #1
 8006f48:	6022      	str	r2, [r4, #0]
 8006f4a:	7019      	strb	r1, [r3, #0]
 8006f4c:	e7c5      	b.n	8006eda <_puts_r+0x42>
 8006f4e:	4622      	mov	r2, r4
 8006f50:	4628      	mov	r0, r5
 8006f52:	f000 febb 	bl	8007ccc <__swbuf_r>
 8006f56:	3001      	adds	r0, #1
 8006f58:	d1bf      	bne.n	8006eda <_puts_r+0x42>
 8006f5a:	e7df      	b.n	8006f1c <_puts_r+0x84>
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	250a      	movs	r5, #10
 8006f60:	1c5a      	adds	r2, r3, #1
 8006f62:	6022      	str	r2, [r4, #0]
 8006f64:	701d      	strb	r5, [r3, #0]
 8006f66:	e7db      	b.n	8006f20 <_puts_r+0x88>
 8006f68:	0800b070 	.word	0x0800b070
 8006f6c:	0800b090 	.word	0x0800b090
 8006f70:	0800b050 	.word	0x0800b050

08006f74 <puts>:
 8006f74:	4b02      	ldr	r3, [pc, #8]	; (8006f80 <puts+0xc>)
 8006f76:	4601      	mov	r1, r0
 8006f78:	6818      	ldr	r0, [r3, #0]
 8006f7a:	f7ff bf8d 	b.w	8006e98 <_puts_r>
 8006f7e:	bf00      	nop
 8006f80:	20000014 	.word	0x20000014

08006f84 <nanf>:
 8006f84:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006f8c <nanf+0x8>
 8006f88:	4770      	bx	lr
 8006f8a:	bf00      	nop
 8006f8c:	7fc00000 	.word	0x7fc00000

08006f90 <siprintf>:
 8006f90:	b40e      	push	{r1, r2, r3}
 8006f92:	b500      	push	{lr}
 8006f94:	b09c      	sub	sp, #112	; 0x70
 8006f96:	ab1d      	add	r3, sp, #116	; 0x74
 8006f98:	9002      	str	r0, [sp, #8]
 8006f9a:	9006      	str	r0, [sp, #24]
 8006f9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fa0:	4809      	ldr	r0, [pc, #36]	; (8006fc8 <siprintf+0x38>)
 8006fa2:	9107      	str	r1, [sp, #28]
 8006fa4:	9104      	str	r1, [sp, #16]
 8006fa6:	4909      	ldr	r1, [pc, #36]	; (8006fcc <siprintf+0x3c>)
 8006fa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fac:	9105      	str	r1, [sp, #20]
 8006fae:	6800      	ldr	r0, [r0, #0]
 8006fb0:	9301      	str	r3, [sp, #4]
 8006fb2:	a902      	add	r1, sp, #8
 8006fb4:	f003 f8e6 	bl	800a184 <_svfiprintf_r>
 8006fb8:	9b02      	ldr	r3, [sp, #8]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	b01c      	add	sp, #112	; 0x70
 8006fc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006fc4:	b003      	add	sp, #12
 8006fc6:	4770      	bx	lr
 8006fc8:	20000014 	.word	0x20000014
 8006fcc:	ffff0208 	.word	0xffff0208

08006fd0 <sulp>:
 8006fd0:	b570      	push	{r4, r5, r6, lr}
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	460d      	mov	r5, r1
 8006fd6:	4616      	mov	r6, r2
 8006fd8:	ec45 4b10 	vmov	d0, r4, r5
 8006fdc:	f002 fe6c 	bl	8009cb8 <__ulp>
 8006fe0:	b17e      	cbz	r6, 8007002 <sulp+0x32>
 8006fe2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006fe6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	dd09      	ble.n	8007002 <sulp+0x32>
 8006fee:	051b      	lsls	r3, r3, #20
 8006ff0:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8006ff4:	2000      	movs	r0, #0
 8006ff6:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8006ffa:	ec41 0b17 	vmov	d7, r0, r1
 8006ffe:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007002:	bd70      	pop	{r4, r5, r6, pc}
 8007004:	0000      	movs	r0, r0
	...

08007008 <_strtod_l>:
 8007008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800700c:	ed2d 8b0c 	vpush	{d8-d13}
 8007010:	b09d      	sub	sp, #116	; 0x74
 8007012:	461f      	mov	r7, r3
 8007014:	2300      	movs	r3, #0
 8007016:	9318      	str	r3, [sp, #96]	; 0x60
 8007018:	4ba6      	ldr	r3, [pc, #664]	; (80072b4 <_strtod_l+0x2ac>)
 800701a:	9213      	str	r2, [sp, #76]	; 0x4c
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	9308      	str	r3, [sp, #32]
 8007020:	4604      	mov	r4, r0
 8007022:	4618      	mov	r0, r3
 8007024:	468a      	mov	sl, r1
 8007026:	f7f9 f90b 	bl	8000240 <strlen>
 800702a:	f04f 0800 	mov.w	r8, #0
 800702e:	4605      	mov	r5, r0
 8007030:	f04f 0900 	mov.w	r9, #0
 8007034:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8007038:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800703a:	781a      	ldrb	r2, [r3, #0]
 800703c:	2a2b      	cmp	r2, #43	; 0x2b
 800703e:	d04d      	beq.n	80070dc <_strtod_l+0xd4>
 8007040:	d83a      	bhi.n	80070b8 <_strtod_l+0xb0>
 8007042:	2a0d      	cmp	r2, #13
 8007044:	d833      	bhi.n	80070ae <_strtod_l+0xa6>
 8007046:	2a08      	cmp	r2, #8
 8007048:	d833      	bhi.n	80070b2 <_strtod_l+0xaa>
 800704a:	2a00      	cmp	r2, #0
 800704c:	d03d      	beq.n	80070ca <_strtod_l+0xc2>
 800704e:	2300      	movs	r3, #0
 8007050:	930b      	str	r3, [sp, #44]	; 0x2c
 8007052:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007054:	7833      	ldrb	r3, [r6, #0]
 8007056:	2b30      	cmp	r3, #48	; 0x30
 8007058:	f040 80b6 	bne.w	80071c8 <_strtod_l+0x1c0>
 800705c:	7873      	ldrb	r3, [r6, #1]
 800705e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007062:	2b58      	cmp	r3, #88	; 0x58
 8007064:	d16d      	bne.n	8007142 <_strtod_l+0x13a>
 8007066:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007068:	9301      	str	r3, [sp, #4]
 800706a:	ab18      	add	r3, sp, #96	; 0x60
 800706c:	9702      	str	r7, [sp, #8]
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	4a91      	ldr	r2, [pc, #580]	; (80072b8 <_strtod_l+0x2b0>)
 8007072:	ab19      	add	r3, sp, #100	; 0x64
 8007074:	a917      	add	r1, sp, #92	; 0x5c
 8007076:	4620      	mov	r0, r4
 8007078:	f001 ff16 	bl	8008ea8 <__gethex>
 800707c:	f010 0507 	ands.w	r5, r0, #7
 8007080:	4607      	mov	r7, r0
 8007082:	d005      	beq.n	8007090 <_strtod_l+0x88>
 8007084:	2d06      	cmp	r5, #6
 8007086:	d12b      	bne.n	80070e0 <_strtod_l+0xd8>
 8007088:	3601      	adds	r6, #1
 800708a:	2300      	movs	r3, #0
 800708c:	9617      	str	r6, [sp, #92]	; 0x5c
 800708e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007090:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007092:	2b00      	cmp	r3, #0
 8007094:	f040 856e 	bne.w	8007b74 <_strtod_l+0xb6c>
 8007098:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800709a:	b1e3      	cbz	r3, 80070d6 <_strtod_l+0xce>
 800709c:	ec49 8b17 	vmov	d7, r8, r9
 80070a0:	eeb1 0b47 	vneg.f64	d0, d7
 80070a4:	b01d      	add	sp, #116	; 0x74
 80070a6:	ecbd 8b0c 	vpop	{d8-d13}
 80070aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ae:	2a20      	cmp	r2, #32
 80070b0:	d1cd      	bne.n	800704e <_strtod_l+0x46>
 80070b2:	3301      	adds	r3, #1
 80070b4:	9317      	str	r3, [sp, #92]	; 0x5c
 80070b6:	e7bf      	b.n	8007038 <_strtod_l+0x30>
 80070b8:	2a2d      	cmp	r2, #45	; 0x2d
 80070ba:	d1c8      	bne.n	800704e <_strtod_l+0x46>
 80070bc:	2201      	movs	r2, #1
 80070be:	920b      	str	r2, [sp, #44]	; 0x2c
 80070c0:	1c5a      	adds	r2, r3, #1
 80070c2:	9217      	str	r2, [sp, #92]	; 0x5c
 80070c4:	785b      	ldrb	r3, [r3, #1]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d1c3      	bne.n	8007052 <_strtod_l+0x4a>
 80070ca:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070cc:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f040 854d 	bne.w	8007b70 <_strtod_l+0xb68>
 80070d6:	ec49 8b10 	vmov	d0, r8, r9
 80070da:	e7e3      	b.n	80070a4 <_strtod_l+0x9c>
 80070dc:	2200      	movs	r2, #0
 80070de:	e7ee      	b.n	80070be <_strtod_l+0xb6>
 80070e0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80070e2:	b13a      	cbz	r2, 80070f4 <_strtod_l+0xec>
 80070e4:	2135      	movs	r1, #53	; 0x35
 80070e6:	a81a      	add	r0, sp, #104	; 0x68
 80070e8:	f002 fef2 	bl	8009ed0 <__copybits>
 80070ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 80070ee:	4620      	mov	r0, r4
 80070f0:	f002 fab6 	bl	8009660 <_Bfree>
 80070f4:	3d01      	subs	r5, #1
 80070f6:	2d05      	cmp	r5, #5
 80070f8:	d807      	bhi.n	800710a <_strtod_l+0x102>
 80070fa:	e8df f005 	tbb	[pc, r5]
 80070fe:	0b0e      	.short	0x0b0e
 8007100:	030e1d18 	.word	0x030e1d18
 8007104:	f04f 0900 	mov.w	r9, #0
 8007108:	46c8      	mov	r8, r9
 800710a:	073b      	lsls	r3, r7, #28
 800710c:	d5c0      	bpl.n	8007090 <_strtod_l+0x88>
 800710e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007112:	e7bd      	b.n	8007090 <_strtod_l+0x88>
 8007114:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8007118:	e7f7      	b.n	800710a <_strtod_l+0x102>
 800711a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 800711e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007120:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007124:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007128:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800712c:	e7ed      	b.n	800710a <_strtod_l+0x102>
 800712e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80072bc <_strtod_l+0x2b4>
 8007132:	f04f 0800 	mov.w	r8, #0
 8007136:	e7e8      	b.n	800710a <_strtod_l+0x102>
 8007138:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800713c:	f04f 38ff 	mov.w	r8, #4294967295
 8007140:	e7e3      	b.n	800710a <_strtod_l+0x102>
 8007142:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007144:	1c5a      	adds	r2, r3, #1
 8007146:	9217      	str	r2, [sp, #92]	; 0x5c
 8007148:	785b      	ldrb	r3, [r3, #1]
 800714a:	2b30      	cmp	r3, #48	; 0x30
 800714c:	d0f9      	beq.n	8007142 <_strtod_l+0x13a>
 800714e:	2b00      	cmp	r3, #0
 8007150:	d09e      	beq.n	8007090 <_strtod_l+0x88>
 8007152:	2301      	movs	r3, #1
 8007154:	9306      	str	r3, [sp, #24]
 8007156:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007158:	930c      	str	r3, [sp, #48]	; 0x30
 800715a:	2300      	movs	r3, #0
 800715c:	9304      	str	r3, [sp, #16]
 800715e:	930a      	str	r3, [sp, #40]	; 0x28
 8007160:	461e      	mov	r6, r3
 8007162:	220a      	movs	r2, #10
 8007164:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007166:	f890 b000 	ldrb.w	fp, [r0]
 800716a:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 800716e:	b2d9      	uxtb	r1, r3
 8007170:	2909      	cmp	r1, #9
 8007172:	d92b      	bls.n	80071cc <_strtod_l+0x1c4>
 8007174:	9908      	ldr	r1, [sp, #32]
 8007176:	462a      	mov	r2, r5
 8007178:	f003 fb01 	bl	800a77e <strncmp>
 800717c:	2800      	cmp	r0, #0
 800717e:	d035      	beq.n	80071ec <_strtod_l+0x1e4>
 8007180:	2000      	movs	r0, #0
 8007182:	465a      	mov	r2, fp
 8007184:	4633      	mov	r3, r6
 8007186:	4683      	mov	fp, r0
 8007188:	4601      	mov	r1, r0
 800718a:	2a65      	cmp	r2, #101	; 0x65
 800718c:	d001      	beq.n	8007192 <_strtod_l+0x18a>
 800718e:	2a45      	cmp	r2, #69	; 0x45
 8007190:	d118      	bne.n	80071c4 <_strtod_l+0x1bc>
 8007192:	b91b      	cbnz	r3, 800719c <_strtod_l+0x194>
 8007194:	9b06      	ldr	r3, [sp, #24]
 8007196:	4303      	orrs	r3, r0
 8007198:	d097      	beq.n	80070ca <_strtod_l+0xc2>
 800719a:	2300      	movs	r3, #0
 800719c:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 80071a0:	f10a 0201 	add.w	r2, sl, #1
 80071a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80071a6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80071aa:	2a2b      	cmp	r2, #43	; 0x2b
 80071ac:	d077      	beq.n	800729e <_strtod_l+0x296>
 80071ae:	2a2d      	cmp	r2, #45	; 0x2d
 80071b0:	d07d      	beq.n	80072ae <_strtod_l+0x2a6>
 80071b2:	f04f 0e00 	mov.w	lr, #0
 80071b6:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80071ba:	2d09      	cmp	r5, #9
 80071bc:	f240 8084 	bls.w	80072c8 <_strtod_l+0x2c0>
 80071c0:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80071c4:	2500      	movs	r5, #0
 80071c6:	e09f      	b.n	8007308 <_strtod_l+0x300>
 80071c8:	2300      	movs	r3, #0
 80071ca:	e7c3      	b.n	8007154 <_strtod_l+0x14c>
 80071cc:	2e08      	cmp	r6, #8
 80071ce:	bfd5      	itete	le
 80071d0:	990a      	ldrle	r1, [sp, #40]	; 0x28
 80071d2:	9904      	ldrgt	r1, [sp, #16]
 80071d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80071d8:	fb02 3301 	mlagt	r3, r2, r1, r3
 80071dc:	f100 0001 	add.w	r0, r0, #1
 80071e0:	bfd4      	ite	le
 80071e2:	930a      	strle	r3, [sp, #40]	; 0x28
 80071e4:	9304      	strgt	r3, [sp, #16]
 80071e6:	3601      	adds	r6, #1
 80071e8:	9017      	str	r0, [sp, #92]	; 0x5c
 80071ea:	e7bb      	b.n	8007164 <_strtod_l+0x15c>
 80071ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071ee:	195a      	adds	r2, r3, r5
 80071f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80071f2:	5d5a      	ldrb	r2, [r3, r5]
 80071f4:	b3ae      	cbz	r6, 8007262 <_strtod_l+0x25a>
 80071f6:	4683      	mov	fp, r0
 80071f8:	4633      	mov	r3, r6
 80071fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80071fe:	2909      	cmp	r1, #9
 8007200:	d912      	bls.n	8007228 <_strtod_l+0x220>
 8007202:	2101      	movs	r1, #1
 8007204:	e7c1      	b.n	800718a <_strtod_l+0x182>
 8007206:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007208:	1c5a      	adds	r2, r3, #1
 800720a:	9217      	str	r2, [sp, #92]	; 0x5c
 800720c:	785a      	ldrb	r2, [r3, #1]
 800720e:	3001      	adds	r0, #1
 8007210:	2a30      	cmp	r2, #48	; 0x30
 8007212:	d0f8      	beq.n	8007206 <_strtod_l+0x1fe>
 8007214:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007218:	2b08      	cmp	r3, #8
 800721a:	f200 84b0 	bhi.w	8007b7e <_strtod_l+0xb76>
 800721e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007220:	930c      	str	r3, [sp, #48]	; 0x30
 8007222:	4683      	mov	fp, r0
 8007224:	2000      	movs	r0, #0
 8007226:	4603      	mov	r3, r0
 8007228:	3a30      	subs	r2, #48	; 0x30
 800722a:	f100 0101 	add.w	r1, r0, #1
 800722e:	d012      	beq.n	8007256 <_strtod_l+0x24e>
 8007230:	448b      	add	fp, r1
 8007232:	eb00 0c03 	add.w	ip, r0, r3
 8007236:	4619      	mov	r1, r3
 8007238:	250a      	movs	r5, #10
 800723a:	4561      	cmp	r1, ip
 800723c:	d113      	bne.n	8007266 <_strtod_l+0x25e>
 800723e:	1819      	adds	r1, r3, r0
 8007240:	2908      	cmp	r1, #8
 8007242:	f103 0301 	add.w	r3, r3, #1
 8007246:	4403      	add	r3, r0
 8007248:	dc1d      	bgt.n	8007286 <_strtod_l+0x27e>
 800724a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800724c:	210a      	movs	r1, #10
 800724e:	fb01 2200 	mla	r2, r1, r0, r2
 8007252:	920a      	str	r2, [sp, #40]	; 0x28
 8007254:	2100      	movs	r1, #0
 8007256:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007258:	1c50      	adds	r0, r2, #1
 800725a:	9017      	str	r0, [sp, #92]	; 0x5c
 800725c:	7852      	ldrb	r2, [r2, #1]
 800725e:	4608      	mov	r0, r1
 8007260:	e7cb      	b.n	80071fa <_strtod_l+0x1f2>
 8007262:	4630      	mov	r0, r6
 8007264:	e7d4      	b.n	8007210 <_strtod_l+0x208>
 8007266:	2908      	cmp	r1, #8
 8007268:	dc04      	bgt.n	8007274 <_strtod_l+0x26c>
 800726a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800726c:	436f      	muls	r7, r5
 800726e:	970a      	str	r7, [sp, #40]	; 0x28
 8007270:	3101      	adds	r1, #1
 8007272:	e7e2      	b.n	800723a <_strtod_l+0x232>
 8007274:	f101 0e01 	add.w	lr, r1, #1
 8007278:	f1be 0f10 	cmp.w	lr, #16
 800727c:	bfde      	ittt	le
 800727e:	9f04      	ldrle	r7, [sp, #16]
 8007280:	436f      	mulle	r7, r5
 8007282:	9704      	strle	r7, [sp, #16]
 8007284:	e7f4      	b.n	8007270 <_strtod_l+0x268>
 8007286:	2b10      	cmp	r3, #16
 8007288:	bfdf      	itttt	le
 800728a:	9804      	ldrle	r0, [sp, #16]
 800728c:	210a      	movle	r1, #10
 800728e:	fb01 2200 	mlale	r2, r1, r0, r2
 8007292:	9204      	strle	r2, [sp, #16]
 8007294:	e7de      	b.n	8007254 <_strtod_l+0x24c>
 8007296:	f04f 0b00 	mov.w	fp, #0
 800729a:	2101      	movs	r1, #1
 800729c:	e77a      	b.n	8007194 <_strtod_l+0x18c>
 800729e:	f04f 0e00 	mov.w	lr, #0
 80072a2:	f10a 0202 	add.w	r2, sl, #2
 80072a6:	9217      	str	r2, [sp, #92]	; 0x5c
 80072a8:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80072ac:	e783      	b.n	80071b6 <_strtod_l+0x1ae>
 80072ae:	f04f 0e01 	mov.w	lr, #1
 80072b2:	e7f6      	b.n	80072a2 <_strtod_l+0x29a>
 80072b4:	0800b11c 	.word	0x0800b11c
 80072b8:	0800ae68 	.word	0x0800ae68
 80072bc:	7ff00000 	.word	0x7ff00000
 80072c0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80072c2:	1c55      	adds	r5, r2, #1
 80072c4:	9517      	str	r5, [sp, #92]	; 0x5c
 80072c6:	7852      	ldrb	r2, [r2, #1]
 80072c8:	2a30      	cmp	r2, #48	; 0x30
 80072ca:	d0f9      	beq.n	80072c0 <_strtod_l+0x2b8>
 80072cc:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80072d0:	2d08      	cmp	r5, #8
 80072d2:	f63f af77 	bhi.w	80071c4 <_strtod_l+0x1bc>
 80072d6:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80072da:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80072dc:	9208      	str	r2, [sp, #32]
 80072de:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80072e0:	1c55      	adds	r5, r2, #1
 80072e2:	9517      	str	r5, [sp, #92]	; 0x5c
 80072e4:	7852      	ldrb	r2, [r2, #1]
 80072e6:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 80072ea:	2f09      	cmp	r7, #9
 80072ec:	d937      	bls.n	800735e <_strtod_l+0x356>
 80072ee:	9f08      	ldr	r7, [sp, #32]
 80072f0:	1bed      	subs	r5, r5, r7
 80072f2:	2d08      	cmp	r5, #8
 80072f4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80072f8:	dc02      	bgt.n	8007300 <_strtod_l+0x2f8>
 80072fa:	4565      	cmp	r5, ip
 80072fc:	bfa8      	it	ge
 80072fe:	4665      	movge	r5, ip
 8007300:	f1be 0f00 	cmp.w	lr, #0
 8007304:	d000      	beq.n	8007308 <_strtod_l+0x300>
 8007306:	426d      	negs	r5, r5
 8007308:	2b00      	cmp	r3, #0
 800730a:	d14f      	bne.n	80073ac <_strtod_l+0x3a4>
 800730c:	9b06      	ldr	r3, [sp, #24]
 800730e:	4303      	orrs	r3, r0
 8007310:	f47f aebe 	bne.w	8007090 <_strtod_l+0x88>
 8007314:	2900      	cmp	r1, #0
 8007316:	f47f aed8 	bne.w	80070ca <_strtod_l+0xc2>
 800731a:	2a69      	cmp	r2, #105	; 0x69
 800731c:	d027      	beq.n	800736e <_strtod_l+0x366>
 800731e:	dc24      	bgt.n	800736a <_strtod_l+0x362>
 8007320:	2a49      	cmp	r2, #73	; 0x49
 8007322:	d024      	beq.n	800736e <_strtod_l+0x366>
 8007324:	2a4e      	cmp	r2, #78	; 0x4e
 8007326:	f47f aed0 	bne.w	80070ca <_strtod_l+0xc2>
 800732a:	499b      	ldr	r1, [pc, #620]	; (8007598 <_strtod_l+0x590>)
 800732c:	a817      	add	r0, sp, #92	; 0x5c
 800732e:	f002 f813 	bl	8009358 <__match>
 8007332:	2800      	cmp	r0, #0
 8007334:	f43f aec9 	beq.w	80070ca <_strtod_l+0xc2>
 8007338:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	2b28      	cmp	r3, #40	; 0x28
 800733e:	d12d      	bne.n	800739c <_strtod_l+0x394>
 8007340:	4996      	ldr	r1, [pc, #600]	; (800759c <_strtod_l+0x594>)
 8007342:	aa1a      	add	r2, sp, #104	; 0x68
 8007344:	a817      	add	r0, sp, #92	; 0x5c
 8007346:	f002 f81b 	bl	8009380 <__hexnan>
 800734a:	2805      	cmp	r0, #5
 800734c:	d126      	bne.n	800739c <_strtod_l+0x394>
 800734e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007350:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007354:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007358:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800735c:	e698      	b.n	8007090 <_strtod_l+0x88>
 800735e:	250a      	movs	r5, #10
 8007360:	fb05 250c 	mla	r5, r5, ip, r2
 8007364:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8007368:	e7b9      	b.n	80072de <_strtod_l+0x2d6>
 800736a:	2a6e      	cmp	r2, #110	; 0x6e
 800736c:	e7db      	b.n	8007326 <_strtod_l+0x31e>
 800736e:	498c      	ldr	r1, [pc, #560]	; (80075a0 <_strtod_l+0x598>)
 8007370:	a817      	add	r0, sp, #92	; 0x5c
 8007372:	f001 fff1 	bl	8009358 <__match>
 8007376:	2800      	cmp	r0, #0
 8007378:	f43f aea7 	beq.w	80070ca <_strtod_l+0xc2>
 800737c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800737e:	4989      	ldr	r1, [pc, #548]	; (80075a4 <_strtod_l+0x59c>)
 8007380:	3b01      	subs	r3, #1
 8007382:	a817      	add	r0, sp, #92	; 0x5c
 8007384:	9317      	str	r3, [sp, #92]	; 0x5c
 8007386:	f001 ffe7 	bl	8009358 <__match>
 800738a:	b910      	cbnz	r0, 8007392 <_strtod_l+0x38a>
 800738c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800738e:	3301      	adds	r3, #1
 8007390:	9317      	str	r3, [sp, #92]	; 0x5c
 8007392:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80075b8 <_strtod_l+0x5b0>
 8007396:	f04f 0800 	mov.w	r8, #0
 800739a:	e679      	b.n	8007090 <_strtod_l+0x88>
 800739c:	4882      	ldr	r0, [pc, #520]	; (80075a8 <_strtod_l+0x5a0>)
 800739e:	f003 f993 	bl	800a6c8 <nan>
 80073a2:	ed8d 0b04 	vstr	d0, [sp, #16]
 80073a6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80073aa:	e671      	b.n	8007090 <_strtod_l+0x88>
 80073ac:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80073b0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80073b4:	eba5 020b 	sub.w	r2, r5, fp
 80073b8:	2e00      	cmp	r6, #0
 80073ba:	bf08      	it	eq
 80073bc:	461e      	moveq	r6, r3
 80073be:	2b10      	cmp	r3, #16
 80073c0:	ed8d 7b08 	vstr	d7, [sp, #32]
 80073c4:	9206      	str	r2, [sp, #24]
 80073c6:	461a      	mov	r2, r3
 80073c8:	bfa8      	it	ge
 80073ca:	2210      	movge	r2, #16
 80073cc:	2b09      	cmp	r3, #9
 80073ce:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80073d2:	dd0e      	ble.n	80073f2 <_strtod_l+0x3ea>
 80073d4:	4975      	ldr	r1, [pc, #468]	; (80075ac <_strtod_l+0x5a4>)
 80073d6:	eddd 7a04 	vldr	s15, [sp, #16]
 80073da:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80073de:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 80073e2:	ed9d 5b08 	vldr	d5, [sp, #32]
 80073e6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80073ea:	eea5 7b06 	vfma.f64	d7, d5, d6
 80073ee:	ec59 8b17 	vmov	r8, r9, d7
 80073f2:	2b0f      	cmp	r3, #15
 80073f4:	dc37      	bgt.n	8007466 <_strtod_l+0x45e>
 80073f6:	9906      	ldr	r1, [sp, #24]
 80073f8:	2900      	cmp	r1, #0
 80073fa:	f43f ae49 	beq.w	8007090 <_strtod_l+0x88>
 80073fe:	dd23      	ble.n	8007448 <_strtod_l+0x440>
 8007400:	2916      	cmp	r1, #22
 8007402:	dc0b      	bgt.n	800741c <_strtod_l+0x414>
 8007404:	4b69      	ldr	r3, [pc, #420]	; (80075ac <_strtod_l+0x5a4>)
 8007406:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800740a:	ed93 7b00 	vldr	d7, [r3]
 800740e:	ec49 8b16 	vmov	d6, r8, r9
 8007412:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007416:	ec59 8b17 	vmov	r8, r9, d7
 800741a:	e639      	b.n	8007090 <_strtod_l+0x88>
 800741c:	9806      	ldr	r0, [sp, #24]
 800741e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8007422:	4281      	cmp	r1, r0
 8007424:	db1f      	blt.n	8007466 <_strtod_l+0x45e>
 8007426:	4a61      	ldr	r2, [pc, #388]	; (80075ac <_strtod_l+0x5a4>)
 8007428:	f1c3 030f 	rsb	r3, r3, #15
 800742c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007430:	ed91 7b00 	vldr	d7, [r1]
 8007434:	ec49 8b16 	vmov	d6, r8, r9
 8007438:	1ac3      	subs	r3, r0, r3
 800743a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800743e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007442:	ed92 6b00 	vldr	d6, [r2]
 8007446:	e7e4      	b.n	8007412 <_strtod_l+0x40a>
 8007448:	9906      	ldr	r1, [sp, #24]
 800744a:	3116      	adds	r1, #22
 800744c:	db0b      	blt.n	8007466 <_strtod_l+0x45e>
 800744e:	4b57      	ldr	r3, [pc, #348]	; (80075ac <_strtod_l+0x5a4>)
 8007450:	ebab 0505 	sub.w	r5, fp, r5
 8007454:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007458:	ed95 7b00 	vldr	d7, [r5]
 800745c:	ec49 8b16 	vmov	d6, r8, r9
 8007460:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007464:	e7d7      	b.n	8007416 <_strtod_l+0x40e>
 8007466:	9906      	ldr	r1, [sp, #24]
 8007468:	1a9a      	subs	r2, r3, r2
 800746a:	440a      	add	r2, r1
 800746c:	2a00      	cmp	r2, #0
 800746e:	dd74      	ble.n	800755a <_strtod_l+0x552>
 8007470:	f012 000f 	ands.w	r0, r2, #15
 8007474:	d00a      	beq.n	800748c <_strtod_l+0x484>
 8007476:	494d      	ldr	r1, [pc, #308]	; (80075ac <_strtod_l+0x5a4>)
 8007478:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800747c:	ed91 7b00 	vldr	d7, [r1]
 8007480:	ec49 8b16 	vmov	d6, r8, r9
 8007484:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007488:	ec59 8b17 	vmov	r8, r9, d7
 800748c:	f032 020f 	bics.w	r2, r2, #15
 8007490:	d04f      	beq.n	8007532 <_strtod_l+0x52a>
 8007492:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8007496:	dd22      	ble.n	80074de <_strtod_l+0x4d6>
 8007498:	2500      	movs	r5, #0
 800749a:	462e      	mov	r6, r5
 800749c:	950a      	str	r5, [sp, #40]	; 0x28
 800749e:	462f      	mov	r7, r5
 80074a0:	2322      	movs	r3, #34	; 0x22
 80074a2:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80075b8 <_strtod_l+0x5b0>
 80074a6:	6023      	str	r3, [r4, #0]
 80074a8:	f04f 0800 	mov.w	r8, #0
 80074ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	f43f adee 	beq.w	8007090 <_strtod_l+0x88>
 80074b4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80074b6:	4620      	mov	r0, r4
 80074b8:	f002 f8d2 	bl	8009660 <_Bfree>
 80074bc:	4639      	mov	r1, r7
 80074be:	4620      	mov	r0, r4
 80074c0:	f002 f8ce 	bl	8009660 <_Bfree>
 80074c4:	4631      	mov	r1, r6
 80074c6:	4620      	mov	r0, r4
 80074c8:	f002 f8ca 	bl	8009660 <_Bfree>
 80074cc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80074ce:	4620      	mov	r0, r4
 80074d0:	f002 f8c6 	bl	8009660 <_Bfree>
 80074d4:	4629      	mov	r1, r5
 80074d6:	4620      	mov	r0, r4
 80074d8:	f002 f8c2 	bl	8009660 <_Bfree>
 80074dc:	e5d8      	b.n	8007090 <_strtod_l+0x88>
 80074de:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80074e2:	2000      	movs	r0, #0
 80074e4:	4f32      	ldr	r7, [pc, #200]	; (80075b0 <_strtod_l+0x5a8>)
 80074e6:	1112      	asrs	r2, r2, #4
 80074e8:	4601      	mov	r1, r0
 80074ea:	2a01      	cmp	r2, #1
 80074ec:	dc24      	bgt.n	8007538 <_strtod_l+0x530>
 80074ee:	b108      	cbz	r0, 80074f4 <_strtod_l+0x4ec>
 80074f0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80074f4:	4a2e      	ldr	r2, [pc, #184]	; (80075b0 <_strtod_l+0x5a8>)
 80074f6:	482f      	ldr	r0, [pc, #188]	; (80075b4 <_strtod_l+0x5ac>)
 80074f8:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80074fc:	ed91 7b00 	vldr	d7, [r1]
 8007500:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007504:	ec49 8b16 	vmov	d6, r8, r9
 8007508:	ee27 7b06 	vmul.f64	d7, d7, d6
 800750c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007510:	9905      	ldr	r1, [sp, #20]
 8007512:	4a29      	ldr	r2, [pc, #164]	; (80075b8 <_strtod_l+0x5b0>)
 8007514:	400a      	ands	r2, r1
 8007516:	4282      	cmp	r2, r0
 8007518:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800751c:	d8bc      	bhi.n	8007498 <_strtod_l+0x490>
 800751e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8007522:	4282      	cmp	r2, r0
 8007524:	bf86      	itte	hi
 8007526:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80075bc <_strtod_l+0x5b4>
 800752a:	f04f 38ff 	movhi.w	r8, #4294967295
 800752e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8007532:	2200      	movs	r2, #0
 8007534:	9204      	str	r2, [sp, #16]
 8007536:	e07f      	b.n	8007638 <_strtod_l+0x630>
 8007538:	f012 0f01 	tst.w	r2, #1
 800753c:	d00a      	beq.n	8007554 <_strtod_l+0x54c>
 800753e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8007542:	ed90 7b00 	vldr	d7, [r0]
 8007546:	ed9d 6b04 	vldr	d6, [sp, #16]
 800754a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800754e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007552:	2001      	movs	r0, #1
 8007554:	3101      	adds	r1, #1
 8007556:	1052      	asrs	r2, r2, #1
 8007558:	e7c7      	b.n	80074ea <_strtod_l+0x4e2>
 800755a:	d0ea      	beq.n	8007532 <_strtod_l+0x52a>
 800755c:	4252      	negs	r2, r2
 800755e:	f012 000f 	ands.w	r0, r2, #15
 8007562:	d00a      	beq.n	800757a <_strtod_l+0x572>
 8007564:	4911      	ldr	r1, [pc, #68]	; (80075ac <_strtod_l+0x5a4>)
 8007566:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800756a:	ed91 7b00 	vldr	d7, [r1]
 800756e:	ec49 8b16 	vmov	d6, r8, r9
 8007572:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007576:	ec59 8b17 	vmov	r8, r9, d7
 800757a:	1112      	asrs	r2, r2, #4
 800757c:	d0d9      	beq.n	8007532 <_strtod_l+0x52a>
 800757e:	2a1f      	cmp	r2, #31
 8007580:	dd1e      	ble.n	80075c0 <_strtod_l+0x5b8>
 8007582:	2500      	movs	r5, #0
 8007584:	462e      	mov	r6, r5
 8007586:	950a      	str	r5, [sp, #40]	; 0x28
 8007588:	462f      	mov	r7, r5
 800758a:	2322      	movs	r3, #34	; 0x22
 800758c:	f04f 0800 	mov.w	r8, #0
 8007590:	f04f 0900 	mov.w	r9, #0
 8007594:	6023      	str	r3, [r4, #0]
 8007596:	e789      	b.n	80074ac <_strtod_l+0x4a4>
 8007598:	0800ae39 	.word	0x0800ae39
 800759c:	0800ae7c 	.word	0x0800ae7c
 80075a0:	0800ae31 	.word	0x0800ae31
 80075a4:	0800afbc 	.word	0x0800afbc
 80075a8:	0800b2d8 	.word	0x0800b2d8
 80075ac:	0800b1b8 	.word	0x0800b1b8
 80075b0:	0800b190 	.word	0x0800b190
 80075b4:	7ca00000 	.word	0x7ca00000
 80075b8:	7ff00000 	.word	0x7ff00000
 80075bc:	7fefffff 	.word	0x7fefffff
 80075c0:	f012 0110 	ands.w	r1, r2, #16
 80075c4:	bf18      	it	ne
 80075c6:	216a      	movne	r1, #106	; 0x6a
 80075c8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80075cc:	9104      	str	r1, [sp, #16]
 80075ce:	49c0      	ldr	r1, [pc, #768]	; (80078d0 <_strtod_l+0x8c8>)
 80075d0:	2000      	movs	r0, #0
 80075d2:	07d7      	lsls	r7, r2, #31
 80075d4:	d508      	bpl.n	80075e8 <_strtod_l+0x5e0>
 80075d6:	ed9d 6b08 	vldr	d6, [sp, #32]
 80075da:	ed91 7b00 	vldr	d7, [r1]
 80075de:	ee26 7b07 	vmul.f64	d7, d6, d7
 80075e2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80075e6:	2001      	movs	r0, #1
 80075e8:	1052      	asrs	r2, r2, #1
 80075ea:	f101 0108 	add.w	r1, r1, #8
 80075ee:	d1f0      	bne.n	80075d2 <_strtod_l+0x5ca>
 80075f0:	b108      	cbz	r0, 80075f6 <_strtod_l+0x5ee>
 80075f2:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 80075f6:	9a04      	ldr	r2, [sp, #16]
 80075f8:	b1ba      	cbz	r2, 800762a <_strtod_l+0x622>
 80075fa:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80075fe:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8007602:	2a00      	cmp	r2, #0
 8007604:	4649      	mov	r1, r9
 8007606:	dd10      	ble.n	800762a <_strtod_l+0x622>
 8007608:	2a1f      	cmp	r2, #31
 800760a:	f340 8132 	ble.w	8007872 <_strtod_l+0x86a>
 800760e:	2a34      	cmp	r2, #52	; 0x34
 8007610:	bfde      	ittt	le
 8007612:	3a20      	suble	r2, #32
 8007614:	f04f 30ff 	movle.w	r0, #4294967295
 8007618:	fa00 f202 	lslle.w	r2, r0, r2
 800761c:	f04f 0800 	mov.w	r8, #0
 8007620:	bfcc      	ite	gt
 8007622:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007626:	ea02 0901 	andle.w	r9, r2, r1
 800762a:	ec49 8b17 	vmov	d7, r8, r9
 800762e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007636:	d0a4      	beq.n	8007582 <_strtod_l+0x57a>
 8007638:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800763a:	9200      	str	r2, [sp, #0]
 800763c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800763e:	4632      	mov	r2, r6
 8007640:	4620      	mov	r0, r4
 8007642:	f002 f879 	bl	8009738 <__s2b>
 8007646:	900a      	str	r0, [sp, #40]	; 0x28
 8007648:	2800      	cmp	r0, #0
 800764a:	f43f af25 	beq.w	8007498 <_strtod_l+0x490>
 800764e:	9b06      	ldr	r3, [sp, #24]
 8007650:	ebab 0505 	sub.w	r5, fp, r5
 8007654:	2b00      	cmp	r3, #0
 8007656:	bfb4      	ite	lt
 8007658:	462b      	movlt	r3, r5
 800765a:	2300      	movge	r3, #0
 800765c:	930c      	str	r3, [sp, #48]	; 0x30
 800765e:	9b06      	ldr	r3, [sp, #24]
 8007660:	ed9f 9b95 	vldr	d9, [pc, #596]	; 80078b8 <_strtod_l+0x8b0>
 8007664:	ed9f ab96 	vldr	d10, [pc, #600]	; 80078c0 <_strtod_l+0x8b8>
 8007668:	ed9f bb97 	vldr	d11, [pc, #604]	; 80078c8 <_strtod_l+0x8c0>
 800766c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007670:	2500      	movs	r5, #0
 8007672:	9312      	str	r3, [sp, #72]	; 0x48
 8007674:	462e      	mov	r6, r5
 8007676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007678:	4620      	mov	r0, r4
 800767a:	6859      	ldr	r1, [r3, #4]
 800767c:	f001 ffb0 	bl	80095e0 <_Balloc>
 8007680:	4607      	mov	r7, r0
 8007682:	2800      	cmp	r0, #0
 8007684:	f43f af0c 	beq.w	80074a0 <_strtod_l+0x498>
 8007688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800768a:	691a      	ldr	r2, [r3, #16]
 800768c:	3202      	adds	r2, #2
 800768e:	f103 010c 	add.w	r1, r3, #12
 8007692:	0092      	lsls	r2, r2, #2
 8007694:	300c      	adds	r0, #12
 8007696:	f001 ff95 	bl	80095c4 <memcpy>
 800769a:	ec49 8b10 	vmov	d0, r8, r9
 800769e:	aa1a      	add	r2, sp, #104	; 0x68
 80076a0:	a919      	add	r1, sp, #100	; 0x64
 80076a2:	4620      	mov	r0, r4
 80076a4:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80076a8:	f002 fb82 	bl	8009db0 <__d2b>
 80076ac:	9018      	str	r0, [sp, #96]	; 0x60
 80076ae:	2800      	cmp	r0, #0
 80076b0:	f43f aef6 	beq.w	80074a0 <_strtod_l+0x498>
 80076b4:	2101      	movs	r1, #1
 80076b6:	4620      	mov	r0, r4
 80076b8:	f002 f8d8 	bl	800986c <__i2b>
 80076bc:	4606      	mov	r6, r0
 80076be:	2800      	cmp	r0, #0
 80076c0:	f43f aeee 	beq.w	80074a0 <_strtod_l+0x498>
 80076c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80076c6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	bfab      	itete	ge
 80076cc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80076ce:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80076d0:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 80076d4:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 80076d8:	bfac      	ite	ge
 80076da:	eb03 0b02 	addge.w	fp, r3, r2
 80076de:	eba2 0a03 	sublt.w	sl, r2, r3
 80076e2:	9a04      	ldr	r2, [sp, #16]
 80076e4:	1a9b      	subs	r3, r3, r2
 80076e6:	440b      	add	r3, r1
 80076e8:	4a7a      	ldr	r2, [pc, #488]	; (80078d4 <_strtod_l+0x8cc>)
 80076ea:	3b01      	subs	r3, #1
 80076ec:	4293      	cmp	r3, r2
 80076ee:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80076f2:	f280 80d1 	bge.w	8007898 <_strtod_l+0x890>
 80076f6:	1ad2      	subs	r2, r2, r3
 80076f8:	2a1f      	cmp	r2, #31
 80076fa:	eba1 0102 	sub.w	r1, r1, r2
 80076fe:	f04f 0001 	mov.w	r0, #1
 8007702:	f300 80bd 	bgt.w	8007880 <_strtod_l+0x878>
 8007706:	fa00 f302 	lsl.w	r3, r0, r2
 800770a:	930e      	str	r3, [sp, #56]	; 0x38
 800770c:	2300      	movs	r3, #0
 800770e:	930d      	str	r3, [sp, #52]	; 0x34
 8007710:	eb0b 0301 	add.w	r3, fp, r1
 8007714:	9a04      	ldr	r2, [sp, #16]
 8007716:	459b      	cmp	fp, r3
 8007718:	448a      	add	sl, r1
 800771a:	4492      	add	sl, r2
 800771c:	465a      	mov	r2, fp
 800771e:	bfa8      	it	ge
 8007720:	461a      	movge	r2, r3
 8007722:	4552      	cmp	r2, sl
 8007724:	bfa8      	it	ge
 8007726:	4652      	movge	r2, sl
 8007728:	2a00      	cmp	r2, #0
 800772a:	bfc2      	ittt	gt
 800772c:	1a9b      	subgt	r3, r3, r2
 800772e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8007732:	ebab 0b02 	subgt.w	fp, fp, r2
 8007736:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007738:	2a00      	cmp	r2, #0
 800773a:	dd18      	ble.n	800776e <_strtod_l+0x766>
 800773c:	4631      	mov	r1, r6
 800773e:	4620      	mov	r0, r4
 8007740:	9315      	str	r3, [sp, #84]	; 0x54
 8007742:	f002 f94f 	bl	80099e4 <__pow5mult>
 8007746:	4606      	mov	r6, r0
 8007748:	2800      	cmp	r0, #0
 800774a:	f43f aea9 	beq.w	80074a0 <_strtod_l+0x498>
 800774e:	4601      	mov	r1, r0
 8007750:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007752:	4620      	mov	r0, r4
 8007754:	f002 f8a0 	bl	8009898 <__multiply>
 8007758:	9014      	str	r0, [sp, #80]	; 0x50
 800775a:	2800      	cmp	r0, #0
 800775c:	f43f aea0 	beq.w	80074a0 <_strtod_l+0x498>
 8007760:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007762:	4620      	mov	r0, r4
 8007764:	f001 ff7c 	bl	8009660 <_Bfree>
 8007768:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800776a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800776c:	9218      	str	r2, [sp, #96]	; 0x60
 800776e:	2b00      	cmp	r3, #0
 8007770:	f300 8097 	bgt.w	80078a2 <_strtod_l+0x89a>
 8007774:	9b06      	ldr	r3, [sp, #24]
 8007776:	2b00      	cmp	r3, #0
 8007778:	dd08      	ble.n	800778c <_strtod_l+0x784>
 800777a:	4639      	mov	r1, r7
 800777c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800777e:	4620      	mov	r0, r4
 8007780:	f002 f930 	bl	80099e4 <__pow5mult>
 8007784:	4607      	mov	r7, r0
 8007786:	2800      	cmp	r0, #0
 8007788:	f43f ae8a 	beq.w	80074a0 <_strtod_l+0x498>
 800778c:	f1ba 0f00 	cmp.w	sl, #0
 8007790:	dd08      	ble.n	80077a4 <_strtod_l+0x79c>
 8007792:	4639      	mov	r1, r7
 8007794:	4652      	mov	r2, sl
 8007796:	4620      	mov	r0, r4
 8007798:	f002 f97e 	bl	8009a98 <__lshift>
 800779c:	4607      	mov	r7, r0
 800779e:	2800      	cmp	r0, #0
 80077a0:	f43f ae7e 	beq.w	80074a0 <_strtod_l+0x498>
 80077a4:	f1bb 0f00 	cmp.w	fp, #0
 80077a8:	dd08      	ble.n	80077bc <_strtod_l+0x7b4>
 80077aa:	4631      	mov	r1, r6
 80077ac:	465a      	mov	r2, fp
 80077ae:	4620      	mov	r0, r4
 80077b0:	f002 f972 	bl	8009a98 <__lshift>
 80077b4:	4606      	mov	r6, r0
 80077b6:	2800      	cmp	r0, #0
 80077b8:	f43f ae72 	beq.w	80074a0 <_strtod_l+0x498>
 80077bc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80077be:	463a      	mov	r2, r7
 80077c0:	4620      	mov	r0, r4
 80077c2:	f002 f9f1 	bl	8009ba8 <__mdiff>
 80077c6:	4605      	mov	r5, r0
 80077c8:	2800      	cmp	r0, #0
 80077ca:	f43f ae69 	beq.w	80074a0 <_strtod_l+0x498>
 80077ce:	2300      	movs	r3, #0
 80077d0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80077d4:	60c3      	str	r3, [r0, #12]
 80077d6:	4631      	mov	r1, r6
 80077d8:	f002 f9ca 	bl	8009b70 <__mcmp>
 80077dc:	2800      	cmp	r0, #0
 80077de:	da7f      	bge.n	80078e0 <_strtod_l+0x8d8>
 80077e0:	ea5a 0308 	orrs.w	r3, sl, r8
 80077e4:	f040 80a5 	bne.w	8007932 <_strtod_l+0x92a>
 80077e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f040 80a0 	bne.w	8007932 <_strtod_l+0x92a>
 80077f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077f6:	0d1b      	lsrs	r3, r3, #20
 80077f8:	051b      	lsls	r3, r3, #20
 80077fa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80077fe:	f240 8098 	bls.w	8007932 <_strtod_l+0x92a>
 8007802:	696b      	ldr	r3, [r5, #20]
 8007804:	b91b      	cbnz	r3, 800780e <_strtod_l+0x806>
 8007806:	692b      	ldr	r3, [r5, #16]
 8007808:	2b01      	cmp	r3, #1
 800780a:	f340 8092 	ble.w	8007932 <_strtod_l+0x92a>
 800780e:	4629      	mov	r1, r5
 8007810:	2201      	movs	r2, #1
 8007812:	4620      	mov	r0, r4
 8007814:	f002 f940 	bl	8009a98 <__lshift>
 8007818:	4631      	mov	r1, r6
 800781a:	4605      	mov	r5, r0
 800781c:	f002 f9a8 	bl	8009b70 <__mcmp>
 8007820:	2800      	cmp	r0, #0
 8007822:	f340 8086 	ble.w	8007932 <_strtod_l+0x92a>
 8007826:	9904      	ldr	r1, [sp, #16]
 8007828:	4a2b      	ldr	r2, [pc, #172]	; (80078d8 <_strtod_l+0x8d0>)
 800782a:	464b      	mov	r3, r9
 800782c:	2900      	cmp	r1, #0
 800782e:	f000 80a1 	beq.w	8007974 <_strtod_l+0x96c>
 8007832:	ea02 0109 	and.w	r1, r2, r9
 8007836:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800783a:	f300 809b 	bgt.w	8007974 <_strtod_l+0x96c>
 800783e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007842:	f77f aea2 	ble.w	800758a <_strtod_l+0x582>
 8007846:	4a25      	ldr	r2, [pc, #148]	; (80078dc <_strtod_l+0x8d4>)
 8007848:	2300      	movs	r3, #0
 800784a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800784e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8007852:	ec49 8b17 	vmov	d7, r8, r9
 8007856:	ee27 7b06 	vmul.f64	d7, d7, d6
 800785a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800785e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8007862:	4313      	orrs	r3, r2
 8007864:	bf08      	it	eq
 8007866:	2322      	moveq	r3, #34	; 0x22
 8007868:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800786c:	bf08      	it	eq
 800786e:	6023      	streq	r3, [r4, #0]
 8007870:	e620      	b.n	80074b4 <_strtod_l+0x4ac>
 8007872:	f04f 31ff 	mov.w	r1, #4294967295
 8007876:	fa01 f202 	lsl.w	r2, r1, r2
 800787a:	ea02 0808 	and.w	r8, r2, r8
 800787e:	e6d4      	b.n	800762a <_strtod_l+0x622>
 8007880:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8007884:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8007888:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800788c:	33e2      	adds	r3, #226	; 0xe2
 800788e:	fa00 f303 	lsl.w	r3, r0, r3
 8007892:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8007896:	e73b      	b.n	8007710 <_strtod_l+0x708>
 8007898:	2000      	movs	r0, #0
 800789a:	2301      	movs	r3, #1
 800789c:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 80078a0:	e736      	b.n	8007710 <_strtod_l+0x708>
 80078a2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80078a4:	461a      	mov	r2, r3
 80078a6:	4620      	mov	r0, r4
 80078a8:	f002 f8f6 	bl	8009a98 <__lshift>
 80078ac:	9018      	str	r0, [sp, #96]	; 0x60
 80078ae:	2800      	cmp	r0, #0
 80078b0:	f47f af60 	bne.w	8007774 <_strtod_l+0x76c>
 80078b4:	e5f4      	b.n	80074a0 <_strtod_l+0x498>
 80078b6:	bf00      	nop
 80078b8:	94a03595 	.word	0x94a03595
 80078bc:	3fcfffff 	.word	0x3fcfffff
 80078c0:	94a03595 	.word	0x94a03595
 80078c4:	3fdfffff 	.word	0x3fdfffff
 80078c8:	35afe535 	.word	0x35afe535
 80078cc:	3fe00000 	.word	0x3fe00000
 80078d0:	0800ae90 	.word	0x0800ae90
 80078d4:	fffffc02 	.word	0xfffffc02
 80078d8:	7ff00000 	.word	0x7ff00000
 80078dc:	39500000 	.word	0x39500000
 80078e0:	46cb      	mov	fp, r9
 80078e2:	d165      	bne.n	80079b0 <_strtod_l+0x9a8>
 80078e4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80078e8:	f1ba 0f00 	cmp.w	sl, #0
 80078ec:	d02a      	beq.n	8007944 <_strtod_l+0x93c>
 80078ee:	4aaa      	ldr	r2, [pc, #680]	; (8007b98 <_strtod_l+0xb90>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d12b      	bne.n	800794c <_strtod_l+0x944>
 80078f4:	9b04      	ldr	r3, [sp, #16]
 80078f6:	4641      	mov	r1, r8
 80078f8:	b1fb      	cbz	r3, 800793a <_strtod_l+0x932>
 80078fa:	4aa8      	ldr	r2, [pc, #672]	; (8007b9c <_strtod_l+0xb94>)
 80078fc:	ea09 0202 	and.w	r2, r9, r2
 8007900:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007904:	f04f 30ff 	mov.w	r0, #4294967295
 8007908:	d81a      	bhi.n	8007940 <_strtod_l+0x938>
 800790a:	0d12      	lsrs	r2, r2, #20
 800790c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007910:	fa00 f303 	lsl.w	r3, r0, r3
 8007914:	4299      	cmp	r1, r3
 8007916:	d119      	bne.n	800794c <_strtod_l+0x944>
 8007918:	4ba1      	ldr	r3, [pc, #644]	; (8007ba0 <_strtod_l+0xb98>)
 800791a:	459b      	cmp	fp, r3
 800791c:	d102      	bne.n	8007924 <_strtod_l+0x91c>
 800791e:	3101      	adds	r1, #1
 8007920:	f43f adbe 	beq.w	80074a0 <_strtod_l+0x498>
 8007924:	4b9d      	ldr	r3, [pc, #628]	; (8007b9c <_strtod_l+0xb94>)
 8007926:	ea0b 0303 	and.w	r3, fp, r3
 800792a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800792e:	f04f 0800 	mov.w	r8, #0
 8007932:	9b04      	ldr	r3, [sp, #16]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d186      	bne.n	8007846 <_strtod_l+0x83e>
 8007938:	e5bc      	b.n	80074b4 <_strtod_l+0x4ac>
 800793a:	f04f 33ff 	mov.w	r3, #4294967295
 800793e:	e7e9      	b.n	8007914 <_strtod_l+0x90c>
 8007940:	4603      	mov	r3, r0
 8007942:	e7e7      	b.n	8007914 <_strtod_l+0x90c>
 8007944:	ea53 0308 	orrs.w	r3, r3, r8
 8007948:	f43f af6d 	beq.w	8007826 <_strtod_l+0x81e>
 800794c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800794e:	b1db      	cbz	r3, 8007988 <_strtod_l+0x980>
 8007950:	ea13 0f0b 	tst.w	r3, fp
 8007954:	d0ed      	beq.n	8007932 <_strtod_l+0x92a>
 8007956:	9a04      	ldr	r2, [sp, #16]
 8007958:	4640      	mov	r0, r8
 800795a:	4649      	mov	r1, r9
 800795c:	f1ba 0f00 	cmp.w	sl, #0
 8007960:	d016      	beq.n	8007990 <_strtod_l+0x988>
 8007962:	f7ff fb35 	bl	8006fd0 <sulp>
 8007966:	ed9d 7b08 	vldr	d7, [sp, #32]
 800796a:	ee37 7b00 	vadd.f64	d7, d7, d0
 800796e:	ec59 8b17 	vmov	r8, r9, d7
 8007972:	e7de      	b.n	8007932 <_strtod_l+0x92a>
 8007974:	4013      	ands	r3, r2
 8007976:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800797a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800797e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007982:	f04f 38ff 	mov.w	r8, #4294967295
 8007986:	e7d4      	b.n	8007932 <_strtod_l+0x92a>
 8007988:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800798a:	ea13 0f08 	tst.w	r3, r8
 800798e:	e7e1      	b.n	8007954 <_strtod_l+0x94c>
 8007990:	f7ff fb1e 	bl	8006fd0 <sulp>
 8007994:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007998:	ee37 7b40 	vsub.f64	d7, d7, d0
 800799c:	ed8d 7b06 	vstr	d7, [sp, #24]
 80079a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80079a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079a8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80079ac:	d1c1      	bne.n	8007932 <_strtod_l+0x92a>
 80079ae:	e5ec      	b.n	800758a <_strtod_l+0x582>
 80079b0:	4631      	mov	r1, r6
 80079b2:	4628      	mov	r0, r5
 80079b4:	f002 fa58 	bl	8009e68 <__ratio>
 80079b8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80079bc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80079c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079c4:	d867      	bhi.n	8007a96 <_strtod_l+0xa8e>
 80079c6:	f1ba 0f00 	cmp.w	sl, #0
 80079ca:	d044      	beq.n	8007a56 <_strtod_l+0xa4e>
 80079cc:	4b75      	ldr	r3, [pc, #468]	; (8007ba4 <_strtod_l+0xb9c>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 80079d4:	4971      	ldr	r1, [pc, #452]	; (8007b9c <_strtod_l+0xb94>)
 80079d6:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8007bb0 <_strtod_l+0xba8>
 80079da:	ea0b 0001 	and.w	r0, fp, r1
 80079de:	4560      	cmp	r0, ip
 80079e0:	900d      	str	r0, [sp, #52]	; 0x34
 80079e2:	f040 808b 	bne.w	8007afc <_strtod_l+0xaf4>
 80079e6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079ea:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80079ee:	ec49 8b10 	vmov	d0, r8, r9
 80079f2:	ec43 2b1c 	vmov	d12, r2, r3
 80079f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80079fa:	f002 f95d 	bl	8009cb8 <__ulp>
 80079fe:	ec49 8b1d 	vmov	d13, r8, r9
 8007a02:	eeac db00 	vfma.f64	d13, d12, d0
 8007a06:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8007a0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a0c:	4963      	ldr	r1, [pc, #396]	; (8007b9c <_strtod_l+0xb94>)
 8007a0e:	4a66      	ldr	r2, [pc, #408]	; (8007ba8 <_strtod_l+0xba0>)
 8007a10:	4019      	ands	r1, r3
 8007a12:	4291      	cmp	r1, r2
 8007a14:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8007a18:	d947      	bls.n	8007aaa <_strtod_l+0xaa2>
 8007a1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a1c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d103      	bne.n	8007a2c <_strtod_l+0xa24>
 8007a24:	9b08      	ldr	r3, [sp, #32]
 8007a26:	3301      	adds	r3, #1
 8007a28:	f43f ad3a 	beq.w	80074a0 <_strtod_l+0x498>
 8007a2c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8007ba0 <_strtod_l+0xb98>
 8007a30:	f04f 38ff 	mov.w	r8, #4294967295
 8007a34:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a36:	4620      	mov	r0, r4
 8007a38:	f001 fe12 	bl	8009660 <_Bfree>
 8007a3c:	4639      	mov	r1, r7
 8007a3e:	4620      	mov	r0, r4
 8007a40:	f001 fe0e 	bl	8009660 <_Bfree>
 8007a44:	4631      	mov	r1, r6
 8007a46:	4620      	mov	r0, r4
 8007a48:	f001 fe0a 	bl	8009660 <_Bfree>
 8007a4c:	4629      	mov	r1, r5
 8007a4e:	4620      	mov	r0, r4
 8007a50:	f001 fe06 	bl	8009660 <_Bfree>
 8007a54:	e60f      	b.n	8007676 <_strtod_l+0x66e>
 8007a56:	f1b8 0f00 	cmp.w	r8, #0
 8007a5a:	d112      	bne.n	8007a82 <_strtod_l+0xa7a>
 8007a5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a60:	b9b3      	cbnz	r3, 8007a90 <_strtod_l+0xa88>
 8007a62:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007a66:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a6e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8007a72:	d401      	bmi.n	8007a78 <_strtod_l+0xa70>
 8007a74:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007a78:	eeb1 7b48 	vneg.f64	d7, d8
 8007a7c:	ec53 2b17 	vmov	r2, r3, d7
 8007a80:	e7a8      	b.n	80079d4 <_strtod_l+0x9cc>
 8007a82:	f1b8 0f01 	cmp.w	r8, #1
 8007a86:	d103      	bne.n	8007a90 <_strtod_l+0xa88>
 8007a88:	f1b9 0f00 	cmp.w	r9, #0
 8007a8c:	f43f ad7d 	beq.w	800758a <_strtod_l+0x582>
 8007a90:	4b46      	ldr	r3, [pc, #280]	; (8007bac <_strtod_l+0xba4>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	e79c      	b.n	80079d0 <_strtod_l+0x9c8>
 8007a96:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8007a9a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007a9e:	f1ba 0f00 	cmp.w	sl, #0
 8007aa2:	d0e9      	beq.n	8007a78 <_strtod_l+0xa70>
 8007aa4:	ec53 2b18 	vmov	r2, r3, d8
 8007aa8:	e794      	b.n	80079d4 <_strtod_l+0x9cc>
 8007aaa:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007aae:	9b04      	ldr	r3, [sp, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d1bf      	bne.n	8007a34 <_strtod_l+0xa2c>
 8007ab4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007ab8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007aba:	0d1b      	lsrs	r3, r3, #20
 8007abc:	051b      	lsls	r3, r3, #20
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d1b8      	bne.n	8007a34 <_strtod_l+0xa2c>
 8007ac2:	ec51 0b18 	vmov	r0, r1, d8
 8007ac6:	f7f8 fde7 	bl	8000698 <__aeabi_d2lz>
 8007aca:	f7f8 fd9f 	bl	800060c <__aeabi_l2d>
 8007ace:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ad2:	ec41 0b17 	vmov	d7, r0, r1
 8007ad6:	ea43 0308 	orr.w	r3, r3, r8
 8007ada:	ea53 030a 	orrs.w	r3, r3, sl
 8007ade:	ee38 8b47 	vsub.f64	d8, d8, d7
 8007ae2:	d03e      	beq.n	8007b62 <_strtod_l+0xb5a>
 8007ae4:	eeb4 8bca 	vcmpe.f64	d8, d10
 8007ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aec:	f53f ace2 	bmi.w	80074b4 <_strtod_l+0x4ac>
 8007af0:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8007af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007af8:	dd9c      	ble.n	8007a34 <_strtod_l+0xa2c>
 8007afa:	e4db      	b.n	80074b4 <_strtod_l+0x4ac>
 8007afc:	9904      	ldr	r1, [sp, #16]
 8007afe:	b301      	cbz	r1, 8007b42 <_strtod_l+0xb3a>
 8007b00:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007b02:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8007b06:	d81c      	bhi.n	8007b42 <_strtod_l+0xb3a>
 8007b08:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8007b90 <_strtod_l+0xb88>
 8007b0c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b14:	d811      	bhi.n	8007b3a <_strtod_l+0xb32>
 8007b16:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8007b1a:	ee18 3a10 	vmov	r3, s16
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	bf38      	it	cc
 8007b22:	2301      	movcc	r3, #1
 8007b24:	ee08 3a10 	vmov	s16, r3
 8007b28:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8007b2c:	f1ba 0f00 	cmp.w	sl, #0
 8007b30:	d114      	bne.n	8007b5c <_strtod_l+0xb54>
 8007b32:	eeb1 7b48 	vneg.f64	d7, d8
 8007b36:	ec53 2b17 	vmov	r2, r3, d7
 8007b3a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007b3c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8007b40:	1a0b      	subs	r3, r1, r0
 8007b42:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007b46:	ec43 2b1c 	vmov	d12, r2, r3
 8007b4a:	f002 f8b5 	bl	8009cb8 <__ulp>
 8007b4e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007b52:	eeac 7b00 	vfma.f64	d7, d12, d0
 8007b56:	ec59 8b17 	vmov	r8, r9, d7
 8007b5a:	e7a8      	b.n	8007aae <_strtod_l+0xaa6>
 8007b5c:	ec53 2b18 	vmov	r2, r3, d8
 8007b60:	e7eb      	b.n	8007b3a <_strtod_l+0xb32>
 8007b62:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8007b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b6a:	f57f af63 	bpl.w	8007a34 <_strtod_l+0xa2c>
 8007b6e:	e4a1      	b.n	80074b4 <_strtod_l+0x4ac>
 8007b70:	2300      	movs	r3, #0
 8007b72:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007b76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007b78:	6013      	str	r3, [r2, #0]
 8007b7a:	f7ff ba8d 	b.w	8007098 <_strtod_l+0x90>
 8007b7e:	2a65      	cmp	r2, #101	; 0x65
 8007b80:	f43f ab89 	beq.w	8007296 <_strtod_l+0x28e>
 8007b84:	2a45      	cmp	r2, #69	; 0x45
 8007b86:	f43f ab86 	beq.w	8007296 <_strtod_l+0x28e>
 8007b8a:	2101      	movs	r1, #1
 8007b8c:	f7ff bbbe 	b.w	800730c <_strtod_l+0x304>
 8007b90:	ffc00000 	.word	0xffc00000
 8007b94:	41dfffff 	.word	0x41dfffff
 8007b98:	000fffff 	.word	0x000fffff
 8007b9c:	7ff00000 	.word	0x7ff00000
 8007ba0:	7fefffff 	.word	0x7fefffff
 8007ba4:	3ff00000 	.word	0x3ff00000
 8007ba8:	7c9fffff 	.word	0x7c9fffff
 8007bac:	bff00000 	.word	0xbff00000
 8007bb0:	7fe00000 	.word	0x7fe00000

08007bb4 <_strtod_r>:
 8007bb4:	4b01      	ldr	r3, [pc, #4]	; (8007bbc <_strtod_r+0x8>)
 8007bb6:	f7ff ba27 	b.w	8007008 <_strtod_l>
 8007bba:	bf00      	nop
 8007bbc:	2000007c 	.word	0x2000007c

08007bc0 <_strtol_l.isra.0>:
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc6:	d001      	beq.n	8007bcc <_strtol_l.isra.0+0xc>
 8007bc8:	2b24      	cmp	r3, #36	; 0x24
 8007bca:	d906      	bls.n	8007bda <_strtol_l.isra.0+0x1a>
 8007bcc:	f7fe fabc 	bl	8006148 <__errno>
 8007bd0:	2316      	movs	r3, #22
 8007bd2:	6003      	str	r3, [r0, #0]
 8007bd4:	2000      	movs	r0, #0
 8007bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bda:	4f3a      	ldr	r7, [pc, #232]	; (8007cc4 <_strtol_l.isra.0+0x104>)
 8007bdc:	468e      	mov	lr, r1
 8007bde:	4676      	mov	r6, lr
 8007be0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007be4:	5de5      	ldrb	r5, [r4, r7]
 8007be6:	f015 0508 	ands.w	r5, r5, #8
 8007bea:	d1f8      	bne.n	8007bde <_strtol_l.isra.0+0x1e>
 8007bec:	2c2d      	cmp	r4, #45	; 0x2d
 8007bee:	d134      	bne.n	8007c5a <_strtol_l.isra.0+0x9a>
 8007bf0:	f89e 4000 	ldrb.w	r4, [lr]
 8007bf4:	f04f 0801 	mov.w	r8, #1
 8007bf8:	f106 0e02 	add.w	lr, r6, #2
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d05c      	beq.n	8007cba <_strtol_l.isra.0+0xfa>
 8007c00:	2b10      	cmp	r3, #16
 8007c02:	d10c      	bne.n	8007c1e <_strtol_l.isra.0+0x5e>
 8007c04:	2c30      	cmp	r4, #48	; 0x30
 8007c06:	d10a      	bne.n	8007c1e <_strtol_l.isra.0+0x5e>
 8007c08:	f89e 4000 	ldrb.w	r4, [lr]
 8007c0c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007c10:	2c58      	cmp	r4, #88	; 0x58
 8007c12:	d14d      	bne.n	8007cb0 <_strtol_l.isra.0+0xf0>
 8007c14:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007c18:	2310      	movs	r3, #16
 8007c1a:	f10e 0e02 	add.w	lr, lr, #2
 8007c1e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007c22:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007c26:	2600      	movs	r6, #0
 8007c28:	fbbc f9f3 	udiv	r9, ip, r3
 8007c2c:	4635      	mov	r5, r6
 8007c2e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007c32:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007c36:	2f09      	cmp	r7, #9
 8007c38:	d818      	bhi.n	8007c6c <_strtol_l.isra.0+0xac>
 8007c3a:	463c      	mov	r4, r7
 8007c3c:	42a3      	cmp	r3, r4
 8007c3e:	dd24      	ble.n	8007c8a <_strtol_l.isra.0+0xca>
 8007c40:	2e00      	cmp	r6, #0
 8007c42:	db1f      	blt.n	8007c84 <_strtol_l.isra.0+0xc4>
 8007c44:	45a9      	cmp	r9, r5
 8007c46:	d31d      	bcc.n	8007c84 <_strtol_l.isra.0+0xc4>
 8007c48:	d101      	bne.n	8007c4e <_strtol_l.isra.0+0x8e>
 8007c4a:	45a2      	cmp	sl, r4
 8007c4c:	db1a      	blt.n	8007c84 <_strtol_l.isra.0+0xc4>
 8007c4e:	fb05 4503 	mla	r5, r5, r3, r4
 8007c52:	2601      	movs	r6, #1
 8007c54:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007c58:	e7eb      	b.n	8007c32 <_strtol_l.isra.0+0x72>
 8007c5a:	2c2b      	cmp	r4, #43	; 0x2b
 8007c5c:	bf08      	it	eq
 8007c5e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007c62:	46a8      	mov	r8, r5
 8007c64:	bf08      	it	eq
 8007c66:	f106 0e02 	addeq.w	lr, r6, #2
 8007c6a:	e7c7      	b.n	8007bfc <_strtol_l.isra.0+0x3c>
 8007c6c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007c70:	2f19      	cmp	r7, #25
 8007c72:	d801      	bhi.n	8007c78 <_strtol_l.isra.0+0xb8>
 8007c74:	3c37      	subs	r4, #55	; 0x37
 8007c76:	e7e1      	b.n	8007c3c <_strtol_l.isra.0+0x7c>
 8007c78:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007c7c:	2f19      	cmp	r7, #25
 8007c7e:	d804      	bhi.n	8007c8a <_strtol_l.isra.0+0xca>
 8007c80:	3c57      	subs	r4, #87	; 0x57
 8007c82:	e7db      	b.n	8007c3c <_strtol_l.isra.0+0x7c>
 8007c84:	f04f 36ff 	mov.w	r6, #4294967295
 8007c88:	e7e4      	b.n	8007c54 <_strtol_l.isra.0+0x94>
 8007c8a:	2e00      	cmp	r6, #0
 8007c8c:	da05      	bge.n	8007c9a <_strtol_l.isra.0+0xda>
 8007c8e:	2322      	movs	r3, #34	; 0x22
 8007c90:	6003      	str	r3, [r0, #0]
 8007c92:	4665      	mov	r5, ip
 8007c94:	b942      	cbnz	r2, 8007ca8 <_strtol_l.isra.0+0xe8>
 8007c96:	4628      	mov	r0, r5
 8007c98:	e79d      	b.n	8007bd6 <_strtol_l.isra.0+0x16>
 8007c9a:	f1b8 0f00 	cmp.w	r8, #0
 8007c9e:	d000      	beq.n	8007ca2 <_strtol_l.isra.0+0xe2>
 8007ca0:	426d      	negs	r5, r5
 8007ca2:	2a00      	cmp	r2, #0
 8007ca4:	d0f7      	beq.n	8007c96 <_strtol_l.isra.0+0xd6>
 8007ca6:	b10e      	cbz	r6, 8007cac <_strtol_l.isra.0+0xec>
 8007ca8:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007cac:	6011      	str	r1, [r2, #0]
 8007cae:	e7f2      	b.n	8007c96 <_strtol_l.isra.0+0xd6>
 8007cb0:	2430      	movs	r4, #48	; 0x30
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1b3      	bne.n	8007c1e <_strtol_l.isra.0+0x5e>
 8007cb6:	2308      	movs	r3, #8
 8007cb8:	e7b1      	b.n	8007c1e <_strtol_l.isra.0+0x5e>
 8007cba:	2c30      	cmp	r4, #48	; 0x30
 8007cbc:	d0a4      	beq.n	8007c08 <_strtol_l.isra.0+0x48>
 8007cbe:	230a      	movs	r3, #10
 8007cc0:	e7ad      	b.n	8007c1e <_strtol_l.isra.0+0x5e>
 8007cc2:	bf00      	nop
 8007cc4:	0800aeb9 	.word	0x0800aeb9

08007cc8 <_strtol_r>:
 8007cc8:	f7ff bf7a 	b.w	8007bc0 <_strtol_l.isra.0>

08007ccc <__swbuf_r>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	460e      	mov	r6, r1
 8007cd0:	4614      	mov	r4, r2
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	b118      	cbz	r0, 8007cde <__swbuf_r+0x12>
 8007cd6:	6983      	ldr	r3, [r0, #24]
 8007cd8:	b90b      	cbnz	r3, 8007cde <__swbuf_r+0x12>
 8007cda:	f000 ffe1 	bl	8008ca0 <__sinit>
 8007cde:	4b21      	ldr	r3, [pc, #132]	; (8007d64 <__swbuf_r+0x98>)
 8007ce0:	429c      	cmp	r4, r3
 8007ce2:	d12b      	bne.n	8007d3c <__swbuf_r+0x70>
 8007ce4:	686c      	ldr	r4, [r5, #4]
 8007ce6:	69a3      	ldr	r3, [r4, #24]
 8007ce8:	60a3      	str	r3, [r4, #8]
 8007cea:	89a3      	ldrh	r3, [r4, #12]
 8007cec:	071a      	lsls	r2, r3, #28
 8007cee:	d52f      	bpl.n	8007d50 <__swbuf_r+0x84>
 8007cf0:	6923      	ldr	r3, [r4, #16]
 8007cf2:	b36b      	cbz	r3, 8007d50 <__swbuf_r+0x84>
 8007cf4:	6923      	ldr	r3, [r4, #16]
 8007cf6:	6820      	ldr	r0, [r4, #0]
 8007cf8:	1ac0      	subs	r0, r0, r3
 8007cfa:	6963      	ldr	r3, [r4, #20]
 8007cfc:	b2f6      	uxtb	r6, r6
 8007cfe:	4283      	cmp	r3, r0
 8007d00:	4637      	mov	r7, r6
 8007d02:	dc04      	bgt.n	8007d0e <__swbuf_r+0x42>
 8007d04:	4621      	mov	r1, r4
 8007d06:	4628      	mov	r0, r5
 8007d08:	f000 ff36 	bl	8008b78 <_fflush_r>
 8007d0c:	bb30      	cbnz	r0, 8007d5c <__swbuf_r+0x90>
 8007d0e:	68a3      	ldr	r3, [r4, #8]
 8007d10:	3b01      	subs	r3, #1
 8007d12:	60a3      	str	r3, [r4, #8]
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	1c5a      	adds	r2, r3, #1
 8007d18:	6022      	str	r2, [r4, #0]
 8007d1a:	701e      	strb	r6, [r3, #0]
 8007d1c:	6963      	ldr	r3, [r4, #20]
 8007d1e:	3001      	adds	r0, #1
 8007d20:	4283      	cmp	r3, r0
 8007d22:	d004      	beq.n	8007d2e <__swbuf_r+0x62>
 8007d24:	89a3      	ldrh	r3, [r4, #12]
 8007d26:	07db      	lsls	r3, r3, #31
 8007d28:	d506      	bpl.n	8007d38 <__swbuf_r+0x6c>
 8007d2a:	2e0a      	cmp	r6, #10
 8007d2c:	d104      	bne.n	8007d38 <__swbuf_r+0x6c>
 8007d2e:	4621      	mov	r1, r4
 8007d30:	4628      	mov	r0, r5
 8007d32:	f000 ff21 	bl	8008b78 <_fflush_r>
 8007d36:	b988      	cbnz	r0, 8007d5c <__swbuf_r+0x90>
 8007d38:	4638      	mov	r0, r7
 8007d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d3c:	4b0a      	ldr	r3, [pc, #40]	; (8007d68 <__swbuf_r+0x9c>)
 8007d3e:	429c      	cmp	r4, r3
 8007d40:	d101      	bne.n	8007d46 <__swbuf_r+0x7a>
 8007d42:	68ac      	ldr	r4, [r5, #8]
 8007d44:	e7cf      	b.n	8007ce6 <__swbuf_r+0x1a>
 8007d46:	4b09      	ldr	r3, [pc, #36]	; (8007d6c <__swbuf_r+0xa0>)
 8007d48:	429c      	cmp	r4, r3
 8007d4a:	bf08      	it	eq
 8007d4c:	68ec      	ldreq	r4, [r5, #12]
 8007d4e:	e7ca      	b.n	8007ce6 <__swbuf_r+0x1a>
 8007d50:	4621      	mov	r1, r4
 8007d52:	4628      	mov	r0, r5
 8007d54:	f000 f80c 	bl	8007d70 <__swsetup_r>
 8007d58:	2800      	cmp	r0, #0
 8007d5a:	d0cb      	beq.n	8007cf4 <__swbuf_r+0x28>
 8007d5c:	f04f 37ff 	mov.w	r7, #4294967295
 8007d60:	e7ea      	b.n	8007d38 <__swbuf_r+0x6c>
 8007d62:	bf00      	nop
 8007d64:	0800b070 	.word	0x0800b070
 8007d68:	0800b090 	.word	0x0800b090
 8007d6c:	0800b050 	.word	0x0800b050

08007d70 <__swsetup_r>:
 8007d70:	4b32      	ldr	r3, [pc, #200]	; (8007e3c <__swsetup_r+0xcc>)
 8007d72:	b570      	push	{r4, r5, r6, lr}
 8007d74:	681d      	ldr	r5, [r3, #0]
 8007d76:	4606      	mov	r6, r0
 8007d78:	460c      	mov	r4, r1
 8007d7a:	b125      	cbz	r5, 8007d86 <__swsetup_r+0x16>
 8007d7c:	69ab      	ldr	r3, [r5, #24]
 8007d7e:	b913      	cbnz	r3, 8007d86 <__swsetup_r+0x16>
 8007d80:	4628      	mov	r0, r5
 8007d82:	f000 ff8d 	bl	8008ca0 <__sinit>
 8007d86:	4b2e      	ldr	r3, [pc, #184]	; (8007e40 <__swsetup_r+0xd0>)
 8007d88:	429c      	cmp	r4, r3
 8007d8a:	d10f      	bne.n	8007dac <__swsetup_r+0x3c>
 8007d8c:	686c      	ldr	r4, [r5, #4]
 8007d8e:	89a3      	ldrh	r3, [r4, #12]
 8007d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d94:	0719      	lsls	r1, r3, #28
 8007d96:	d42c      	bmi.n	8007df2 <__swsetup_r+0x82>
 8007d98:	06dd      	lsls	r5, r3, #27
 8007d9a:	d411      	bmi.n	8007dc0 <__swsetup_r+0x50>
 8007d9c:	2309      	movs	r3, #9
 8007d9e:	6033      	str	r3, [r6, #0]
 8007da0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007da4:	81a3      	strh	r3, [r4, #12]
 8007da6:	f04f 30ff 	mov.w	r0, #4294967295
 8007daa:	e03e      	b.n	8007e2a <__swsetup_r+0xba>
 8007dac:	4b25      	ldr	r3, [pc, #148]	; (8007e44 <__swsetup_r+0xd4>)
 8007dae:	429c      	cmp	r4, r3
 8007db0:	d101      	bne.n	8007db6 <__swsetup_r+0x46>
 8007db2:	68ac      	ldr	r4, [r5, #8]
 8007db4:	e7eb      	b.n	8007d8e <__swsetup_r+0x1e>
 8007db6:	4b24      	ldr	r3, [pc, #144]	; (8007e48 <__swsetup_r+0xd8>)
 8007db8:	429c      	cmp	r4, r3
 8007dba:	bf08      	it	eq
 8007dbc:	68ec      	ldreq	r4, [r5, #12]
 8007dbe:	e7e6      	b.n	8007d8e <__swsetup_r+0x1e>
 8007dc0:	0758      	lsls	r0, r3, #29
 8007dc2:	d512      	bpl.n	8007dea <__swsetup_r+0x7a>
 8007dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dc6:	b141      	cbz	r1, 8007dda <__swsetup_r+0x6a>
 8007dc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dcc:	4299      	cmp	r1, r3
 8007dce:	d002      	beq.n	8007dd6 <__swsetup_r+0x66>
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f002 f8d1 	bl	8009f78 <_free_r>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	6363      	str	r3, [r4, #52]	; 0x34
 8007dda:	89a3      	ldrh	r3, [r4, #12]
 8007ddc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007de0:	81a3      	strh	r3, [r4, #12]
 8007de2:	2300      	movs	r3, #0
 8007de4:	6063      	str	r3, [r4, #4]
 8007de6:	6923      	ldr	r3, [r4, #16]
 8007de8:	6023      	str	r3, [r4, #0]
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	f043 0308 	orr.w	r3, r3, #8
 8007df0:	81a3      	strh	r3, [r4, #12]
 8007df2:	6923      	ldr	r3, [r4, #16]
 8007df4:	b94b      	cbnz	r3, 8007e0a <__swsetup_r+0x9a>
 8007df6:	89a3      	ldrh	r3, [r4, #12]
 8007df8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e00:	d003      	beq.n	8007e0a <__swsetup_r+0x9a>
 8007e02:	4621      	mov	r1, r4
 8007e04:	4630      	mov	r0, r6
 8007e06:	f001 fb83 	bl	8009510 <__smakebuf_r>
 8007e0a:	89a0      	ldrh	r0, [r4, #12]
 8007e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e10:	f010 0301 	ands.w	r3, r0, #1
 8007e14:	d00a      	beq.n	8007e2c <__swsetup_r+0xbc>
 8007e16:	2300      	movs	r3, #0
 8007e18:	60a3      	str	r3, [r4, #8]
 8007e1a:	6963      	ldr	r3, [r4, #20]
 8007e1c:	425b      	negs	r3, r3
 8007e1e:	61a3      	str	r3, [r4, #24]
 8007e20:	6923      	ldr	r3, [r4, #16]
 8007e22:	b943      	cbnz	r3, 8007e36 <__swsetup_r+0xc6>
 8007e24:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e28:	d1ba      	bne.n	8007da0 <__swsetup_r+0x30>
 8007e2a:	bd70      	pop	{r4, r5, r6, pc}
 8007e2c:	0781      	lsls	r1, r0, #30
 8007e2e:	bf58      	it	pl
 8007e30:	6963      	ldrpl	r3, [r4, #20]
 8007e32:	60a3      	str	r3, [r4, #8]
 8007e34:	e7f4      	b.n	8007e20 <__swsetup_r+0xb0>
 8007e36:	2000      	movs	r0, #0
 8007e38:	e7f7      	b.n	8007e2a <__swsetup_r+0xba>
 8007e3a:	bf00      	nop
 8007e3c:	20000014 	.word	0x20000014
 8007e40:	0800b070 	.word	0x0800b070
 8007e44:	0800b090 	.word	0x0800b090
 8007e48:	0800b050 	.word	0x0800b050

08007e4c <quorem>:
 8007e4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e50:	6903      	ldr	r3, [r0, #16]
 8007e52:	690c      	ldr	r4, [r1, #16]
 8007e54:	42a3      	cmp	r3, r4
 8007e56:	4607      	mov	r7, r0
 8007e58:	f2c0 8081 	blt.w	8007f5e <quorem+0x112>
 8007e5c:	3c01      	subs	r4, #1
 8007e5e:	f101 0814 	add.w	r8, r1, #20
 8007e62:	f100 0514 	add.w	r5, r0, #20
 8007e66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e6a:	9301      	str	r3, [sp, #4]
 8007e6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e74:	3301      	adds	r3, #1
 8007e76:	429a      	cmp	r2, r3
 8007e78:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e7c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e80:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e84:	d331      	bcc.n	8007eea <quorem+0x9e>
 8007e86:	f04f 0e00 	mov.w	lr, #0
 8007e8a:	4640      	mov	r0, r8
 8007e8c:	46ac      	mov	ip, r5
 8007e8e:	46f2      	mov	sl, lr
 8007e90:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e94:	b293      	uxth	r3, r2
 8007e96:	fb06 e303 	mla	r3, r6, r3, lr
 8007e9a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007e9e:	b29b      	uxth	r3, r3
 8007ea0:	ebaa 0303 	sub.w	r3, sl, r3
 8007ea4:	0c12      	lsrs	r2, r2, #16
 8007ea6:	f8dc a000 	ldr.w	sl, [ip]
 8007eaa:	fb06 e202 	mla	r2, r6, r2, lr
 8007eae:	fa13 f38a 	uxtah	r3, r3, sl
 8007eb2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007eb6:	fa1f fa82 	uxth.w	sl, r2
 8007eba:	f8dc 2000 	ldr.w	r2, [ip]
 8007ebe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007ec2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007ec6:	b29b      	uxth	r3, r3
 8007ec8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ecc:	4581      	cmp	r9, r0
 8007ece:	f84c 3b04 	str.w	r3, [ip], #4
 8007ed2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ed6:	d2db      	bcs.n	8007e90 <quorem+0x44>
 8007ed8:	f855 300b 	ldr.w	r3, [r5, fp]
 8007edc:	b92b      	cbnz	r3, 8007eea <quorem+0x9e>
 8007ede:	9b01      	ldr	r3, [sp, #4]
 8007ee0:	3b04      	subs	r3, #4
 8007ee2:	429d      	cmp	r5, r3
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	d32e      	bcc.n	8007f46 <quorem+0xfa>
 8007ee8:	613c      	str	r4, [r7, #16]
 8007eea:	4638      	mov	r0, r7
 8007eec:	f001 fe40 	bl	8009b70 <__mcmp>
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	db24      	blt.n	8007f3e <quorem+0xf2>
 8007ef4:	3601      	adds	r6, #1
 8007ef6:	4628      	mov	r0, r5
 8007ef8:	f04f 0c00 	mov.w	ip, #0
 8007efc:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f00:	f8d0 e000 	ldr.w	lr, [r0]
 8007f04:	b293      	uxth	r3, r2
 8007f06:	ebac 0303 	sub.w	r3, ip, r3
 8007f0a:	0c12      	lsrs	r2, r2, #16
 8007f0c:	fa13 f38e 	uxtah	r3, r3, lr
 8007f10:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f14:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f18:	b29b      	uxth	r3, r3
 8007f1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f1e:	45c1      	cmp	r9, r8
 8007f20:	f840 3b04 	str.w	r3, [r0], #4
 8007f24:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f28:	d2e8      	bcs.n	8007efc <quorem+0xb0>
 8007f2a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f32:	b922      	cbnz	r2, 8007f3e <quorem+0xf2>
 8007f34:	3b04      	subs	r3, #4
 8007f36:	429d      	cmp	r5, r3
 8007f38:	461a      	mov	r2, r3
 8007f3a:	d30a      	bcc.n	8007f52 <quorem+0x106>
 8007f3c:	613c      	str	r4, [r7, #16]
 8007f3e:	4630      	mov	r0, r6
 8007f40:	b003      	add	sp, #12
 8007f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f46:	6812      	ldr	r2, [r2, #0]
 8007f48:	3b04      	subs	r3, #4
 8007f4a:	2a00      	cmp	r2, #0
 8007f4c:	d1cc      	bne.n	8007ee8 <quorem+0x9c>
 8007f4e:	3c01      	subs	r4, #1
 8007f50:	e7c7      	b.n	8007ee2 <quorem+0x96>
 8007f52:	6812      	ldr	r2, [r2, #0]
 8007f54:	3b04      	subs	r3, #4
 8007f56:	2a00      	cmp	r2, #0
 8007f58:	d1f0      	bne.n	8007f3c <quorem+0xf0>
 8007f5a:	3c01      	subs	r4, #1
 8007f5c:	e7eb      	b.n	8007f36 <quorem+0xea>
 8007f5e:	2000      	movs	r0, #0
 8007f60:	e7ee      	b.n	8007f40 <quorem+0xf4>
 8007f62:	0000      	movs	r0, r0
 8007f64:	0000      	movs	r0, r0
	...

08007f68 <_dtoa_r>:
 8007f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6c:	ec59 8b10 	vmov	r8, r9, d0
 8007f70:	b095      	sub	sp, #84	; 0x54
 8007f72:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007f74:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8007f76:	9107      	str	r1, [sp, #28]
 8007f78:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007f7c:	4606      	mov	r6, r0
 8007f7e:	9209      	str	r2, [sp, #36]	; 0x24
 8007f80:	9310      	str	r3, [sp, #64]	; 0x40
 8007f82:	b975      	cbnz	r5, 8007fa2 <_dtoa_r+0x3a>
 8007f84:	2010      	movs	r0, #16
 8007f86:	f001 fb03 	bl	8009590 <malloc>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	6270      	str	r0, [r6, #36]	; 0x24
 8007f8e:	b920      	cbnz	r0, 8007f9a <_dtoa_r+0x32>
 8007f90:	4bab      	ldr	r3, [pc, #684]	; (8008240 <_dtoa_r+0x2d8>)
 8007f92:	21ea      	movs	r1, #234	; 0xea
 8007f94:	48ab      	ldr	r0, [pc, #684]	; (8008244 <_dtoa_r+0x2dc>)
 8007f96:	f002 fc23 	bl	800a7e0 <__assert_func>
 8007f9a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f9e:	6005      	str	r5, [r0, #0]
 8007fa0:	60c5      	str	r5, [r0, #12]
 8007fa2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007fa4:	6819      	ldr	r1, [r3, #0]
 8007fa6:	b151      	cbz	r1, 8007fbe <_dtoa_r+0x56>
 8007fa8:	685a      	ldr	r2, [r3, #4]
 8007faa:	604a      	str	r2, [r1, #4]
 8007fac:	2301      	movs	r3, #1
 8007fae:	4093      	lsls	r3, r2
 8007fb0:	608b      	str	r3, [r1, #8]
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	f001 fb54 	bl	8009660 <_Bfree>
 8007fb8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007fba:	2200      	movs	r2, #0
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	f1b9 0300 	subs.w	r3, r9, #0
 8007fc2:	bfbb      	ittet	lt
 8007fc4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007fc8:	9303      	strlt	r3, [sp, #12]
 8007fca:	2300      	movge	r3, #0
 8007fcc:	2201      	movlt	r2, #1
 8007fce:	bfac      	ite	ge
 8007fd0:	6023      	strge	r3, [r4, #0]
 8007fd2:	6022      	strlt	r2, [r4, #0]
 8007fd4:	4b9c      	ldr	r3, [pc, #624]	; (8008248 <_dtoa_r+0x2e0>)
 8007fd6:	9c03      	ldr	r4, [sp, #12]
 8007fd8:	43a3      	bics	r3, r4
 8007fda:	d11a      	bne.n	8008012 <_dtoa_r+0xaa>
 8007fdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007fde:	f242 730f 	movw	r3, #9999	; 0x270f
 8007fe2:	6013      	str	r3, [r2, #0]
 8007fe4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007fe8:	ea53 0308 	orrs.w	r3, r3, r8
 8007fec:	f000 8512 	beq.w	8008a14 <_dtoa_r+0xaac>
 8007ff0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007ff2:	b953      	cbnz	r3, 800800a <_dtoa_r+0xa2>
 8007ff4:	4b95      	ldr	r3, [pc, #596]	; (800824c <_dtoa_r+0x2e4>)
 8007ff6:	e01f      	b.n	8008038 <_dtoa_r+0xd0>
 8007ff8:	4b95      	ldr	r3, [pc, #596]	; (8008250 <_dtoa_r+0x2e8>)
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	3308      	adds	r3, #8
 8007ffe:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008000:	6013      	str	r3, [r2, #0]
 8008002:	9800      	ldr	r0, [sp, #0]
 8008004:	b015      	add	sp, #84	; 0x54
 8008006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800a:	4b90      	ldr	r3, [pc, #576]	; (800824c <_dtoa_r+0x2e4>)
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	3303      	adds	r3, #3
 8008010:	e7f5      	b.n	8007ffe <_dtoa_r+0x96>
 8008012:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008016:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800801a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800801e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008022:	d10b      	bne.n	800803c <_dtoa_r+0xd4>
 8008024:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008026:	2301      	movs	r3, #1
 8008028:	6013      	str	r3, [r2, #0]
 800802a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 84ee 	beq.w	8008a0e <_dtoa_r+0xaa6>
 8008032:	4888      	ldr	r0, [pc, #544]	; (8008254 <_dtoa_r+0x2ec>)
 8008034:	6018      	str	r0, [r3, #0]
 8008036:	1e43      	subs	r3, r0, #1
 8008038:	9300      	str	r3, [sp, #0]
 800803a:	e7e2      	b.n	8008002 <_dtoa_r+0x9a>
 800803c:	a913      	add	r1, sp, #76	; 0x4c
 800803e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008042:	aa12      	add	r2, sp, #72	; 0x48
 8008044:	4630      	mov	r0, r6
 8008046:	f001 feb3 	bl	8009db0 <__d2b>
 800804a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800804e:	4605      	mov	r5, r0
 8008050:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008052:	2900      	cmp	r1, #0
 8008054:	d047      	beq.n	80080e6 <_dtoa_r+0x17e>
 8008056:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008058:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800805c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008060:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8008064:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008068:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800806c:	2400      	movs	r4, #0
 800806e:	ec43 2b16 	vmov	d6, r2, r3
 8008072:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008076:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8008228 <_dtoa_r+0x2c0>
 800807a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800807e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8008230 <_dtoa_r+0x2c8>
 8008082:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008086:	eeb0 7b46 	vmov.f64	d7, d6
 800808a:	ee06 1a90 	vmov	s13, r1
 800808e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8008092:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008238 <_dtoa_r+0x2d0>
 8008096:	eea5 7b06 	vfma.f64	d7, d5, d6
 800809a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800809e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80080a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a6:	ee16 ba90 	vmov	fp, s13
 80080aa:	9411      	str	r4, [sp, #68]	; 0x44
 80080ac:	d508      	bpl.n	80080c0 <_dtoa_r+0x158>
 80080ae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80080b2:	eeb4 6b47 	vcmp.f64	d6, d7
 80080b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080ba:	bf18      	it	ne
 80080bc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80080c0:	f1bb 0f16 	cmp.w	fp, #22
 80080c4:	d832      	bhi.n	800812c <_dtoa_r+0x1c4>
 80080c6:	4b64      	ldr	r3, [pc, #400]	; (8008258 <_dtoa_r+0x2f0>)
 80080c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80080cc:	ed93 7b00 	vldr	d7, [r3]
 80080d0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80080d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80080d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080dc:	d501      	bpl.n	80080e2 <_dtoa_r+0x17a>
 80080de:	f10b 3bff 	add.w	fp, fp, #4294967295
 80080e2:	2300      	movs	r3, #0
 80080e4:	e023      	b.n	800812e <_dtoa_r+0x1c6>
 80080e6:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80080e8:	4401      	add	r1, r0
 80080ea:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80080ee:	2b20      	cmp	r3, #32
 80080f0:	bfc3      	ittte	gt
 80080f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80080f6:	fa04 f303 	lslgt.w	r3, r4, r3
 80080fa:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80080fe:	f1c3 0320 	rsble	r3, r3, #32
 8008102:	bfc6      	itte	gt
 8008104:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008108:	ea43 0308 	orrgt.w	r3, r3, r8
 800810c:	fa08 f303 	lslle.w	r3, r8, r3
 8008110:	ee07 3a90 	vmov	s15, r3
 8008114:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008118:	3901      	subs	r1, #1
 800811a:	ed8d 7b00 	vstr	d7, [sp]
 800811e:	9c01      	ldr	r4, [sp, #4]
 8008120:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008124:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008128:	2401      	movs	r4, #1
 800812a:	e7a0      	b.n	800806e <_dtoa_r+0x106>
 800812c:	2301      	movs	r3, #1
 800812e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008130:	1a43      	subs	r3, r0, r1
 8008132:	1e5a      	subs	r2, r3, #1
 8008134:	bf45      	ittet	mi
 8008136:	f1c3 0301 	rsbmi	r3, r3, #1
 800813a:	9305      	strmi	r3, [sp, #20]
 800813c:	2300      	movpl	r3, #0
 800813e:	2300      	movmi	r3, #0
 8008140:	9206      	str	r2, [sp, #24]
 8008142:	bf54      	ite	pl
 8008144:	9305      	strpl	r3, [sp, #20]
 8008146:	9306      	strmi	r3, [sp, #24]
 8008148:	f1bb 0f00 	cmp.w	fp, #0
 800814c:	db18      	blt.n	8008180 <_dtoa_r+0x218>
 800814e:	9b06      	ldr	r3, [sp, #24]
 8008150:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008154:	445b      	add	r3, fp
 8008156:	9306      	str	r3, [sp, #24]
 8008158:	2300      	movs	r3, #0
 800815a:	9a07      	ldr	r2, [sp, #28]
 800815c:	2a09      	cmp	r2, #9
 800815e:	d849      	bhi.n	80081f4 <_dtoa_r+0x28c>
 8008160:	2a05      	cmp	r2, #5
 8008162:	bfc4      	itt	gt
 8008164:	3a04      	subgt	r2, #4
 8008166:	9207      	strgt	r2, [sp, #28]
 8008168:	9a07      	ldr	r2, [sp, #28]
 800816a:	f1a2 0202 	sub.w	r2, r2, #2
 800816e:	bfcc      	ite	gt
 8008170:	2400      	movgt	r4, #0
 8008172:	2401      	movle	r4, #1
 8008174:	2a03      	cmp	r2, #3
 8008176:	d848      	bhi.n	800820a <_dtoa_r+0x2a2>
 8008178:	e8df f002 	tbb	[pc, r2]
 800817c:	3a2c2e0b 	.word	0x3a2c2e0b
 8008180:	9b05      	ldr	r3, [sp, #20]
 8008182:	2200      	movs	r2, #0
 8008184:	eba3 030b 	sub.w	r3, r3, fp
 8008188:	9305      	str	r3, [sp, #20]
 800818a:	920e      	str	r2, [sp, #56]	; 0x38
 800818c:	f1cb 0300 	rsb	r3, fp, #0
 8008190:	e7e3      	b.n	800815a <_dtoa_r+0x1f2>
 8008192:	2200      	movs	r2, #0
 8008194:	9208      	str	r2, [sp, #32]
 8008196:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008198:	2a00      	cmp	r2, #0
 800819a:	dc39      	bgt.n	8008210 <_dtoa_r+0x2a8>
 800819c:	f04f 0a01 	mov.w	sl, #1
 80081a0:	46d1      	mov	r9, sl
 80081a2:	4652      	mov	r2, sl
 80081a4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80081a8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80081aa:	2100      	movs	r1, #0
 80081ac:	6079      	str	r1, [r7, #4]
 80081ae:	2004      	movs	r0, #4
 80081b0:	f100 0c14 	add.w	ip, r0, #20
 80081b4:	4594      	cmp	ip, r2
 80081b6:	6879      	ldr	r1, [r7, #4]
 80081b8:	d92f      	bls.n	800821a <_dtoa_r+0x2b2>
 80081ba:	4630      	mov	r0, r6
 80081bc:	930c      	str	r3, [sp, #48]	; 0x30
 80081be:	f001 fa0f 	bl	80095e0 <_Balloc>
 80081c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081c4:	9000      	str	r0, [sp, #0]
 80081c6:	4602      	mov	r2, r0
 80081c8:	2800      	cmp	r0, #0
 80081ca:	d149      	bne.n	8008260 <_dtoa_r+0x2f8>
 80081cc:	4b23      	ldr	r3, [pc, #140]	; (800825c <_dtoa_r+0x2f4>)
 80081ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80081d2:	e6df      	b.n	8007f94 <_dtoa_r+0x2c>
 80081d4:	2201      	movs	r2, #1
 80081d6:	e7dd      	b.n	8008194 <_dtoa_r+0x22c>
 80081d8:	2200      	movs	r2, #0
 80081da:	9208      	str	r2, [sp, #32]
 80081dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081de:	eb0b 0a02 	add.w	sl, fp, r2
 80081e2:	f10a 0901 	add.w	r9, sl, #1
 80081e6:	464a      	mov	r2, r9
 80081e8:	2a01      	cmp	r2, #1
 80081ea:	bfb8      	it	lt
 80081ec:	2201      	movlt	r2, #1
 80081ee:	e7db      	b.n	80081a8 <_dtoa_r+0x240>
 80081f0:	2201      	movs	r2, #1
 80081f2:	e7f2      	b.n	80081da <_dtoa_r+0x272>
 80081f4:	2401      	movs	r4, #1
 80081f6:	2200      	movs	r2, #0
 80081f8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80081fc:	f04f 3aff 	mov.w	sl, #4294967295
 8008200:	2100      	movs	r1, #0
 8008202:	46d1      	mov	r9, sl
 8008204:	2212      	movs	r2, #18
 8008206:	9109      	str	r1, [sp, #36]	; 0x24
 8008208:	e7ce      	b.n	80081a8 <_dtoa_r+0x240>
 800820a:	2201      	movs	r2, #1
 800820c:	9208      	str	r2, [sp, #32]
 800820e:	e7f5      	b.n	80081fc <_dtoa_r+0x294>
 8008210:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8008214:	46d1      	mov	r9, sl
 8008216:	4652      	mov	r2, sl
 8008218:	e7c6      	b.n	80081a8 <_dtoa_r+0x240>
 800821a:	3101      	adds	r1, #1
 800821c:	6079      	str	r1, [r7, #4]
 800821e:	0040      	lsls	r0, r0, #1
 8008220:	e7c6      	b.n	80081b0 <_dtoa_r+0x248>
 8008222:	bf00      	nop
 8008224:	f3af 8000 	nop.w
 8008228:	636f4361 	.word	0x636f4361
 800822c:	3fd287a7 	.word	0x3fd287a7
 8008230:	8b60c8b3 	.word	0x8b60c8b3
 8008234:	3fc68a28 	.word	0x3fc68a28
 8008238:	509f79fb 	.word	0x509f79fb
 800823c:	3fd34413 	.word	0x3fd34413
 8008240:	0800afc6 	.word	0x0800afc6
 8008244:	0800afdd 	.word	0x0800afdd
 8008248:	7ff00000 	.word	0x7ff00000
 800824c:	0800afc2 	.word	0x0800afc2
 8008250:	0800afb9 	.word	0x0800afb9
 8008254:	0800ae3d 	.word	0x0800ae3d
 8008258:	0800b1b8 	.word	0x0800b1b8
 800825c:	0800b03c 	.word	0x0800b03c
 8008260:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008262:	9900      	ldr	r1, [sp, #0]
 8008264:	6011      	str	r1, [r2, #0]
 8008266:	f1b9 0f0e 	cmp.w	r9, #14
 800826a:	d872      	bhi.n	8008352 <_dtoa_r+0x3ea>
 800826c:	2c00      	cmp	r4, #0
 800826e:	d070      	beq.n	8008352 <_dtoa_r+0x3ea>
 8008270:	f1bb 0f00 	cmp.w	fp, #0
 8008274:	f340 80a6 	ble.w	80083c4 <_dtoa_r+0x45c>
 8008278:	49ca      	ldr	r1, [pc, #808]	; (80085a4 <_dtoa_r+0x63c>)
 800827a:	f00b 020f 	and.w	r2, fp, #15
 800827e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008282:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008286:	ed92 7b00 	vldr	d7, [r2]
 800828a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800828e:	f000 808d 	beq.w	80083ac <_dtoa_r+0x444>
 8008292:	4ac5      	ldr	r2, [pc, #788]	; (80085a8 <_dtoa_r+0x640>)
 8008294:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8008298:	ed92 6b08 	vldr	d6, [r2, #32]
 800829c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80082a0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80082a4:	f001 010f 	and.w	r1, r1, #15
 80082a8:	2203      	movs	r2, #3
 80082aa:	48bf      	ldr	r0, [pc, #764]	; (80085a8 <_dtoa_r+0x640>)
 80082ac:	2900      	cmp	r1, #0
 80082ae:	d17f      	bne.n	80083b0 <_dtoa_r+0x448>
 80082b0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80082b4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80082b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80082bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80082be:	2900      	cmp	r1, #0
 80082c0:	f000 80b2 	beq.w	8008428 <_dtoa_r+0x4c0>
 80082c4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80082c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80082d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082d4:	f140 80a8 	bpl.w	8008428 <_dtoa_r+0x4c0>
 80082d8:	f1b9 0f00 	cmp.w	r9, #0
 80082dc:	f000 80a4 	beq.w	8008428 <_dtoa_r+0x4c0>
 80082e0:	f1ba 0f00 	cmp.w	sl, #0
 80082e4:	dd31      	ble.n	800834a <_dtoa_r+0x3e2>
 80082e6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80082ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80082ee:	ed8d 7b02 	vstr	d7, [sp, #8]
 80082f2:	f10b 37ff 	add.w	r7, fp, #4294967295
 80082f6:	3201      	adds	r2, #1
 80082f8:	4650      	mov	r0, sl
 80082fa:	ed9d 6b02 	vldr	d6, [sp, #8]
 80082fe:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008302:	ee07 2a90 	vmov	s15, r2
 8008306:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800830a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800830e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008312:	9c03      	ldr	r4, [sp, #12]
 8008314:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008318:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800831c:	2800      	cmp	r0, #0
 800831e:	f040 8086 	bne.w	800842e <_dtoa_r+0x4c6>
 8008322:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008326:	ee36 6b47 	vsub.f64	d6, d6, d7
 800832a:	ec42 1b17 	vmov	d7, r1, r2
 800832e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008336:	f300 8272 	bgt.w	800881e <_dtoa_r+0x8b6>
 800833a:	eeb1 7b47 	vneg.f64	d7, d7
 800833e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008346:	f100 8267 	bmi.w	8008818 <_dtoa_r+0x8b0>
 800834a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800834e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008352:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008354:	2a00      	cmp	r2, #0
 8008356:	f2c0 8129 	blt.w	80085ac <_dtoa_r+0x644>
 800835a:	f1bb 0f0e 	cmp.w	fp, #14
 800835e:	f300 8125 	bgt.w	80085ac <_dtoa_r+0x644>
 8008362:	4b90      	ldr	r3, [pc, #576]	; (80085a4 <_dtoa_r+0x63c>)
 8008364:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008368:	ed93 6b00 	vldr	d6, [r3]
 800836c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800836e:	2b00      	cmp	r3, #0
 8008370:	f280 80c3 	bge.w	80084fa <_dtoa_r+0x592>
 8008374:	f1b9 0f00 	cmp.w	r9, #0
 8008378:	f300 80bf 	bgt.w	80084fa <_dtoa_r+0x592>
 800837c:	f040 824c 	bne.w	8008818 <_dtoa_r+0x8b0>
 8008380:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008384:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008388:	ed9d 7b02 	vldr	d7, [sp, #8]
 800838c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008394:	464c      	mov	r4, r9
 8008396:	464f      	mov	r7, r9
 8008398:	f280 8222 	bge.w	80087e0 <_dtoa_r+0x878>
 800839c:	f8dd 8000 	ldr.w	r8, [sp]
 80083a0:	2331      	movs	r3, #49	; 0x31
 80083a2:	f808 3b01 	strb.w	r3, [r8], #1
 80083a6:	f10b 0b01 	add.w	fp, fp, #1
 80083aa:	e21e      	b.n	80087ea <_dtoa_r+0x882>
 80083ac:	2202      	movs	r2, #2
 80083ae:	e77c      	b.n	80082aa <_dtoa_r+0x342>
 80083b0:	07cc      	lsls	r4, r1, #31
 80083b2:	d504      	bpl.n	80083be <_dtoa_r+0x456>
 80083b4:	ed90 6b00 	vldr	d6, [r0]
 80083b8:	3201      	adds	r2, #1
 80083ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80083be:	1049      	asrs	r1, r1, #1
 80083c0:	3008      	adds	r0, #8
 80083c2:	e773      	b.n	80082ac <_dtoa_r+0x344>
 80083c4:	d02e      	beq.n	8008424 <_dtoa_r+0x4bc>
 80083c6:	f1cb 0100 	rsb	r1, fp, #0
 80083ca:	4a76      	ldr	r2, [pc, #472]	; (80085a4 <_dtoa_r+0x63c>)
 80083cc:	f001 000f 	and.w	r0, r1, #15
 80083d0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80083d4:	ed92 7b00 	vldr	d7, [r2]
 80083d8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 80083dc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80083e0:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80083e4:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 80083e8:	e9cd 7802 	strd	r7, r8, [sp, #8]
 80083ec:	486e      	ldr	r0, [pc, #440]	; (80085a8 <_dtoa_r+0x640>)
 80083ee:	1109      	asrs	r1, r1, #4
 80083f0:	2400      	movs	r4, #0
 80083f2:	2202      	movs	r2, #2
 80083f4:	b939      	cbnz	r1, 8008406 <_dtoa_r+0x49e>
 80083f6:	2c00      	cmp	r4, #0
 80083f8:	f43f af60 	beq.w	80082bc <_dtoa_r+0x354>
 80083fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008400:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008404:	e75a      	b.n	80082bc <_dtoa_r+0x354>
 8008406:	07cf      	lsls	r7, r1, #31
 8008408:	d509      	bpl.n	800841e <_dtoa_r+0x4b6>
 800840a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800840e:	ed90 7b00 	vldr	d7, [r0]
 8008412:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008416:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800841a:	3201      	adds	r2, #1
 800841c:	2401      	movs	r4, #1
 800841e:	1049      	asrs	r1, r1, #1
 8008420:	3008      	adds	r0, #8
 8008422:	e7e7      	b.n	80083f4 <_dtoa_r+0x48c>
 8008424:	2202      	movs	r2, #2
 8008426:	e749      	b.n	80082bc <_dtoa_r+0x354>
 8008428:	465f      	mov	r7, fp
 800842a:	4648      	mov	r0, r9
 800842c:	e765      	b.n	80082fa <_dtoa_r+0x392>
 800842e:	ec42 1b17 	vmov	d7, r1, r2
 8008432:	4a5c      	ldr	r2, [pc, #368]	; (80085a4 <_dtoa_r+0x63c>)
 8008434:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008438:	ed12 4b02 	vldr	d4, [r2, #-8]
 800843c:	9a00      	ldr	r2, [sp, #0]
 800843e:	1814      	adds	r4, r2, r0
 8008440:	9a08      	ldr	r2, [sp, #32]
 8008442:	b352      	cbz	r2, 800849a <_dtoa_r+0x532>
 8008444:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008448:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800844c:	f8dd 8000 	ldr.w	r8, [sp]
 8008450:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008454:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008458:	ee35 7b47 	vsub.f64	d7, d5, d7
 800845c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008460:	ee14 2a90 	vmov	r2, s9
 8008464:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008468:	3230      	adds	r2, #48	; 0x30
 800846a:	ee36 6b45 	vsub.f64	d6, d6, d5
 800846e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008476:	f808 2b01 	strb.w	r2, [r8], #1
 800847a:	d439      	bmi.n	80084f0 <_dtoa_r+0x588>
 800847c:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008480:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008488:	d472      	bmi.n	8008570 <_dtoa_r+0x608>
 800848a:	45a0      	cmp	r8, r4
 800848c:	f43f af5d 	beq.w	800834a <_dtoa_r+0x3e2>
 8008490:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008494:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008498:	e7e0      	b.n	800845c <_dtoa_r+0x4f4>
 800849a:	f8dd 8000 	ldr.w	r8, [sp]
 800849e:	ee27 7b04 	vmul.f64	d7, d7, d4
 80084a2:	4621      	mov	r1, r4
 80084a4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80084a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80084ac:	ee14 2a90 	vmov	r2, s9
 80084b0:	3230      	adds	r2, #48	; 0x30
 80084b2:	f808 2b01 	strb.w	r2, [r8], #1
 80084b6:	45a0      	cmp	r8, r4
 80084b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80084bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80084c0:	d118      	bne.n	80084f4 <_dtoa_r+0x58c>
 80084c2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80084c6:	ee37 4b05 	vadd.f64	d4, d7, d5
 80084ca:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80084ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084d2:	dc4d      	bgt.n	8008570 <_dtoa_r+0x608>
 80084d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80084d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80084dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084e0:	f57f af33 	bpl.w	800834a <_dtoa_r+0x3e2>
 80084e4:	4688      	mov	r8, r1
 80084e6:	3901      	subs	r1, #1
 80084e8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 80084ec:	2b30      	cmp	r3, #48	; 0x30
 80084ee:	d0f9      	beq.n	80084e4 <_dtoa_r+0x57c>
 80084f0:	46bb      	mov	fp, r7
 80084f2:	e02a      	b.n	800854a <_dtoa_r+0x5e2>
 80084f4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80084f8:	e7d6      	b.n	80084a8 <_dtoa_r+0x540>
 80084fa:	ed9d 7b02 	vldr	d7, [sp, #8]
 80084fe:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008502:	f8dd 8000 	ldr.w	r8, [sp]
 8008506:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800850a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800850e:	ee15 3a10 	vmov	r3, s10
 8008512:	3330      	adds	r3, #48	; 0x30
 8008514:	f808 3b01 	strb.w	r3, [r8], #1
 8008518:	9b00      	ldr	r3, [sp, #0]
 800851a:	eba8 0303 	sub.w	r3, r8, r3
 800851e:	4599      	cmp	r9, r3
 8008520:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008524:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008528:	d133      	bne.n	8008592 <_dtoa_r+0x62a>
 800852a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800852e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008536:	dc1a      	bgt.n	800856e <_dtoa_r+0x606>
 8008538:	eeb4 7b46 	vcmp.f64	d7, d6
 800853c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008540:	d103      	bne.n	800854a <_dtoa_r+0x5e2>
 8008542:	ee15 3a10 	vmov	r3, s10
 8008546:	07d9      	lsls	r1, r3, #31
 8008548:	d411      	bmi.n	800856e <_dtoa_r+0x606>
 800854a:	4629      	mov	r1, r5
 800854c:	4630      	mov	r0, r6
 800854e:	f001 f887 	bl	8009660 <_Bfree>
 8008552:	2300      	movs	r3, #0
 8008554:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008556:	f888 3000 	strb.w	r3, [r8]
 800855a:	f10b 0301 	add.w	r3, fp, #1
 800855e:	6013      	str	r3, [r2, #0]
 8008560:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008562:	2b00      	cmp	r3, #0
 8008564:	f43f ad4d 	beq.w	8008002 <_dtoa_r+0x9a>
 8008568:	f8c3 8000 	str.w	r8, [r3]
 800856c:	e549      	b.n	8008002 <_dtoa_r+0x9a>
 800856e:	465f      	mov	r7, fp
 8008570:	4643      	mov	r3, r8
 8008572:	4698      	mov	r8, r3
 8008574:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008578:	2a39      	cmp	r2, #57	; 0x39
 800857a:	d106      	bne.n	800858a <_dtoa_r+0x622>
 800857c:	9a00      	ldr	r2, [sp, #0]
 800857e:	429a      	cmp	r2, r3
 8008580:	d1f7      	bne.n	8008572 <_dtoa_r+0x60a>
 8008582:	9900      	ldr	r1, [sp, #0]
 8008584:	2230      	movs	r2, #48	; 0x30
 8008586:	3701      	adds	r7, #1
 8008588:	700a      	strb	r2, [r1, #0]
 800858a:	781a      	ldrb	r2, [r3, #0]
 800858c:	3201      	adds	r2, #1
 800858e:	701a      	strb	r2, [r3, #0]
 8008590:	e7ae      	b.n	80084f0 <_dtoa_r+0x588>
 8008592:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008596:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800859a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800859e:	d1b2      	bne.n	8008506 <_dtoa_r+0x59e>
 80085a0:	e7d3      	b.n	800854a <_dtoa_r+0x5e2>
 80085a2:	bf00      	nop
 80085a4:	0800b1b8 	.word	0x0800b1b8
 80085a8:	0800b190 	.word	0x0800b190
 80085ac:	9908      	ldr	r1, [sp, #32]
 80085ae:	2900      	cmp	r1, #0
 80085b0:	f000 80d1 	beq.w	8008756 <_dtoa_r+0x7ee>
 80085b4:	9907      	ldr	r1, [sp, #28]
 80085b6:	2901      	cmp	r1, #1
 80085b8:	f300 80b4 	bgt.w	8008724 <_dtoa_r+0x7bc>
 80085bc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80085be:	2900      	cmp	r1, #0
 80085c0:	f000 80ac 	beq.w	800871c <_dtoa_r+0x7b4>
 80085c4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80085c8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80085cc:	461c      	mov	r4, r3
 80085ce:	930a      	str	r3, [sp, #40]	; 0x28
 80085d0:	9b05      	ldr	r3, [sp, #20]
 80085d2:	4413      	add	r3, r2
 80085d4:	9305      	str	r3, [sp, #20]
 80085d6:	9b06      	ldr	r3, [sp, #24]
 80085d8:	2101      	movs	r1, #1
 80085da:	4413      	add	r3, r2
 80085dc:	4630      	mov	r0, r6
 80085de:	9306      	str	r3, [sp, #24]
 80085e0:	f001 f944 	bl	800986c <__i2b>
 80085e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085e6:	4607      	mov	r7, r0
 80085e8:	f1b8 0f00 	cmp.w	r8, #0
 80085ec:	dd0d      	ble.n	800860a <_dtoa_r+0x6a2>
 80085ee:	9a06      	ldr	r2, [sp, #24]
 80085f0:	2a00      	cmp	r2, #0
 80085f2:	dd0a      	ble.n	800860a <_dtoa_r+0x6a2>
 80085f4:	4542      	cmp	r2, r8
 80085f6:	9905      	ldr	r1, [sp, #20]
 80085f8:	bfa8      	it	ge
 80085fa:	4642      	movge	r2, r8
 80085fc:	1a89      	subs	r1, r1, r2
 80085fe:	9105      	str	r1, [sp, #20]
 8008600:	9906      	ldr	r1, [sp, #24]
 8008602:	eba8 0802 	sub.w	r8, r8, r2
 8008606:	1a8a      	subs	r2, r1, r2
 8008608:	9206      	str	r2, [sp, #24]
 800860a:	b303      	cbz	r3, 800864e <_dtoa_r+0x6e6>
 800860c:	9a08      	ldr	r2, [sp, #32]
 800860e:	2a00      	cmp	r2, #0
 8008610:	f000 80a6 	beq.w	8008760 <_dtoa_r+0x7f8>
 8008614:	2c00      	cmp	r4, #0
 8008616:	dd13      	ble.n	8008640 <_dtoa_r+0x6d8>
 8008618:	4639      	mov	r1, r7
 800861a:	4622      	mov	r2, r4
 800861c:	4630      	mov	r0, r6
 800861e:	930c      	str	r3, [sp, #48]	; 0x30
 8008620:	f001 f9e0 	bl	80099e4 <__pow5mult>
 8008624:	462a      	mov	r2, r5
 8008626:	4601      	mov	r1, r0
 8008628:	4607      	mov	r7, r0
 800862a:	4630      	mov	r0, r6
 800862c:	f001 f934 	bl	8009898 <__multiply>
 8008630:	4629      	mov	r1, r5
 8008632:	900a      	str	r0, [sp, #40]	; 0x28
 8008634:	4630      	mov	r0, r6
 8008636:	f001 f813 	bl	8009660 <_Bfree>
 800863a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800863c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800863e:	4615      	mov	r5, r2
 8008640:	1b1a      	subs	r2, r3, r4
 8008642:	d004      	beq.n	800864e <_dtoa_r+0x6e6>
 8008644:	4629      	mov	r1, r5
 8008646:	4630      	mov	r0, r6
 8008648:	f001 f9cc 	bl	80099e4 <__pow5mult>
 800864c:	4605      	mov	r5, r0
 800864e:	2101      	movs	r1, #1
 8008650:	4630      	mov	r0, r6
 8008652:	f001 f90b 	bl	800986c <__i2b>
 8008656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008658:	2b00      	cmp	r3, #0
 800865a:	4604      	mov	r4, r0
 800865c:	f340 8082 	ble.w	8008764 <_dtoa_r+0x7fc>
 8008660:	461a      	mov	r2, r3
 8008662:	4601      	mov	r1, r0
 8008664:	4630      	mov	r0, r6
 8008666:	f001 f9bd 	bl	80099e4 <__pow5mult>
 800866a:	9b07      	ldr	r3, [sp, #28]
 800866c:	2b01      	cmp	r3, #1
 800866e:	4604      	mov	r4, r0
 8008670:	dd7b      	ble.n	800876a <_dtoa_r+0x802>
 8008672:	2300      	movs	r3, #0
 8008674:	930a      	str	r3, [sp, #40]	; 0x28
 8008676:	6922      	ldr	r2, [r4, #16]
 8008678:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800867c:	6910      	ldr	r0, [r2, #16]
 800867e:	f001 f8a5 	bl	80097cc <__hi0bits>
 8008682:	f1c0 0020 	rsb	r0, r0, #32
 8008686:	9b06      	ldr	r3, [sp, #24]
 8008688:	4418      	add	r0, r3
 800868a:	f010 001f 	ands.w	r0, r0, #31
 800868e:	f000 808d 	beq.w	80087ac <_dtoa_r+0x844>
 8008692:	f1c0 0220 	rsb	r2, r0, #32
 8008696:	2a04      	cmp	r2, #4
 8008698:	f340 8086 	ble.w	80087a8 <_dtoa_r+0x840>
 800869c:	f1c0 001c 	rsb	r0, r0, #28
 80086a0:	9b05      	ldr	r3, [sp, #20]
 80086a2:	4403      	add	r3, r0
 80086a4:	9305      	str	r3, [sp, #20]
 80086a6:	9b06      	ldr	r3, [sp, #24]
 80086a8:	4403      	add	r3, r0
 80086aa:	4480      	add	r8, r0
 80086ac:	9306      	str	r3, [sp, #24]
 80086ae:	9b05      	ldr	r3, [sp, #20]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	dd05      	ble.n	80086c0 <_dtoa_r+0x758>
 80086b4:	4629      	mov	r1, r5
 80086b6:	461a      	mov	r2, r3
 80086b8:	4630      	mov	r0, r6
 80086ba:	f001 f9ed 	bl	8009a98 <__lshift>
 80086be:	4605      	mov	r5, r0
 80086c0:	9b06      	ldr	r3, [sp, #24]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	dd05      	ble.n	80086d2 <_dtoa_r+0x76a>
 80086c6:	4621      	mov	r1, r4
 80086c8:	461a      	mov	r2, r3
 80086ca:	4630      	mov	r0, r6
 80086cc:	f001 f9e4 	bl	8009a98 <__lshift>
 80086d0:	4604      	mov	r4, r0
 80086d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d06b      	beq.n	80087b0 <_dtoa_r+0x848>
 80086d8:	4621      	mov	r1, r4
 80086da:	4628      	mov	r0, r5
 80086dc:	f001 fa48 	bl	8009b70 <__mcmp>
 80086e0:	2800      	cmp	r0, #0
 80086e2:	da65      	bge.n	80087b0 <_dtoa_r+0x848>
 80086e4:	2300      	movs	r3, #0
 80086e6:	4629      	mov	r1, r5
 80086e8:	220a      	movs	r2, #10
 80086ea:	4630      	mov	r0, r6
 80086ec:	f000 ffda 	bl	80096a4 <__multadd>
 80086f0:	9b08      	ldr	r3, [sp, #32]
 80086f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80086f6:	4605      	mov	r5, r0
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 8192 	beq.w	8008a22 <_dtoa_r+0xaba>
 80086fe:	4639      	mov	r1, r7
 8008700:	2300      	movs	r3, #0
 8008702:	220a      	movs	r2, #10
 8008704:	4630      	mov	r0, r6
 8008706:	f000 ffcd 	bl	80096a4 <__multadd>
 800870a:	f1ba 0f00 	cmp.w	sl, #0
 800870e:	4607      	mov	r7, r0
 8008710:	f300 808e 	bgt.w	8008830 <_dtoa_r+0x8c8>
 8008714:	9b07      	ldr	r3, [sp, #28]
 8008716:	2b02      	cmp	r3, #2
 8008718:	dc51      	bgt.n	80087be <_dtoa_r+0x856>
 800871a:	e089      	b.n	8008830 <_dtoa_r+0x8c8>
 800871c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800871e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008722:	e751      	b.n	80085c8 <_dtoa_r+0x660>
 8008724:	f109 34ff 	add.w	r4, r9, #4294967295
 8008728:	42a3      	cmp	r3, r4
 800872a:	bfbf      	itttt	lt
 800872c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800872e:	1ae3      	sublt	r3, r4, r3
 8008730:	18d2      	addlt	r2, r2, r3
 8008732:	4613      	movlt	r3, r2
 8008734:	bfb7      	itett	lt
 8008736:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008738:	1b1c      	subge	r4, r3, r4
 800873a:	4623      	movlt	r3, r4
 800873c:	2400      	movlt	r4, #0
 800873e:	f1b9 0f00 	cmp.w	r9, #0
 8008742:	bfb5      	itete	lt
 8008744:	9a05      	ldrlt	r2, [sp, #20]
 8008746:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800874a:	eba2 0809 	sublt.w	r8, r2, r9
 800874e:	464a      	movge	r2, r9
 8008750:	bfb8      	it	lt
 8008752:	2200      	movlt	r2, #0
 8008754:	e73b      	b.n	80085ce <_dtoa_r+0x666>
 8008756:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800875a:	9f08      	ldr	r7, [sp, #32]
 800875c:	461c      	mov	r4, r3
 800875e:	e743      	b.n	80085e8 <_dtoa_r+0x680>
 8008760:	461a      	mov	r2, r3
 8008762:	e76f      	b.n	8008644 <_dtoa_r+0x6dc>
 8008764:	9b07      	ldr	r3, [sp, #28]
 8008766:	2b01      	cmp	r3, #1
 8008768:	dc18      	bgt.n	800879c <_dtoa_r+0x834>
 800876a:	9b02      	ldr	r3, [sp, #8]
 800876c:	b9b3      	cbnz	r3, 800879c <_dtoa_r+0x834>
 800876e:	9b03      	ldr	r3, [sp, #12]
 8008770:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8008774:	b9a2      	cbnz	r2, 80087a0 <_dtoa_r+0x838>
 8008776:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800877a:	0d12      	lsrs	r2, r2, #20
 800877c:	0512      	lsls	r2, r2, #20
 800877e:	b18a      	cbz	r2, 80087a4 <_dtoa_r+0x83c>
 8008780:	9b05      	ldr	r3, [sp, #20]
 8008782:	3301      	adds	r3, #1
 8008784:	9305      	str	r3, [sp, #20]
 8008786:	9b06      	ldr	r3, [sp, #24]
 8008788:	3301      	adds	r3, #1
 800878a:	9306      	str	r3, [sp, #24]
 800878c:	2301      	movs	r3, #1
 800878e:	930a      	str	r3, [sp, #40]	; 0x28
 8008790:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008792:	2b00      	cmp	r3, #0
 8008794:	f47f af6f 	bne.w	8008676 <_dtoa_r+0x70e>
 8008798:	2001      	movs	r0, #1
 800879a:	e774      	b.n	8008686 <_dtoa_r+0x71e>
 800879c:	2300      	movs	r3, #0
 800879e:	e7f6      	b.n	800878e <_dtoa_r+0x826>
 80087a0:	9b02      	ldr	r3, [sp, #8]
 80087a2:	e7f4      	b.n	800878e <_dtoa_r+0x826>
 80087a4:	920a      	str	r2, [sp, #40]	; 0x28
 80087a6:	e7f3      	b.n	8008790 <_dtoa_r+0x828>
 80087a8:	d081      	beq.n	80086ae <_dtoa_r+0x746>
 80087aa:	4610      	mov	r0, r2
 80087ac:	301c      	adds	r0, #28
 80087ae:	e777      	b.n	80086a0 <_dtoa_r+0x738>
 80087b0:	f1b9 0f00 	cmp.w	r9, #0
 80087b4:	dc37      	bgt.n	8008826 <_dtoa_r+0x8be>
 80087b6:	9b07      	ldr	r3, [sp, #28]
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	dd34      	ble.n	8008826 <_dtoa_r+0x8be>
 80087bc:	46ca      	mov	sl, r9
 80087be:	f1ba 0f00 	cmp.w	sl, #0
 80087c2:	d10d      	bne.n	80087e0 <_dtoa_r+0x878>
 80087c4:	4621      	mov	r1, r4
 80087c6:	4653      	mov	r3, sl
 80087c8:	2205      	movs	r2, #5
 80087ca:	4630      	mov	r0, r6
 80087cc:	f000 ff6a 	bl	80096a4 <__multadd>
 80087d0:	4601      	mov	r1, r0
 80087d2:	4604      	mov	r4, r0
 80087d4:	4628      	mov	r0, r5
 80087d6:	f001 f9cb 	bl	8009b70 <__mcmp>
 80087da:	2800      	cmp	r0, #0
 80087dc:	f73f adde 	bgt.w	800839c <_dtoa_r+0x434>
 80087e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087e2:	f8dd 8000 	ldr.w	r8, [sp]
 80087e6:	ea6f 0b03 	mvn.w	fp, r3
 80087ea:	f04f 0900 	mov.w	r9, #0
 80087ee:	4621      	mov	r1, r4
 80087f0:	4630      	mov	r0, r6
 80087f2:	f000 ff35 	bl	8009660 <_Bfree>
 80087f6:	2f00      	cmp	r7, #0
 80087f8:	f43f aea7 	beq.w	800854a <_dtoa_r+0x5e2>
 80087fc:	f1b9 0f00 	cmp.w	r9, #0
 8008800:	d005      	beq.n	800880e <_dtoa_r+0x8a6>
 8008802:	45b9      	cmp	r9, r7
 8008804:	d003      	beq.n	800880e <_dtoa_r+0x8a6>
 8008806:	4649      	mov	r1, r9
 8008808:	4630      	mov	r0, r6
 800880a:	f000 ff29 	bl	8009660 <_Bfree>
 800880e:	4639      	mov	r1, r7
 8008810:	4630      	mov	r0, r6
 8008812:	f000 ff25 	bl	8009660 <_Bfree>
 8008816:	e698      	b.n	800854a <_dtoa_r+0x5e2>
 8008818:	2400      	movs	r4, #0
 800881a:	4627      	mov	r7, r4
 800881c:	e7e0      	b.n	80087e0 <_dtoa_r+0x878>
 800881e:	46bb      	mov	fp, r7
 8008820:	4604      	mov	r4, r0
 8008822:	4607      	mov	r7, r0
 8008824:	e5ba      	b.n	800839c <_dtoa_r+0x434>
 8008826:	9b08      	ldr	r3, [sp, #32]
 8008828:	46ca      	mov	sl, r9
 800882a:	2b00      	cmp	r3, #0
 800882c:	f000 8100 	beq.w	8008a30 <_dtoa_r+0xac8>
 8008830:	f1b8 0f00 	cmp.w	r8, #0
 8008834:	dd05      	ble.n	8008842 <_dtoa_r+0x8da>
 8008836:	4639      	mov	r1, r7
 8008838:	4642      	mov	r2, r8
 800883a:	4630      	mov	r0, r6
 800883c:	f001 f92c 	bl	8009a98 <__lshift>
 8008840:	4607      	mov	r7, r0
 8008842:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008844:	2b00      	cmp	r3, #0
 8008846:	d05d      	beq.n	8008904 <_dtoa_r+0x99c>
 8008848:	6879      	ldr	r1, [r7, #4]
 800884a:	4630      	mov	r0, r6
 800884c:	f000 fec8 	bl	80095e0 <_Balloc>
 8008850:	4680      	mov	r8, r0
 8008852:	b928      	cbnz	r0, 8008860 <_dtoa_r+0x8f8>
 8008854:	4b82      	ldr	r3, [pc, #520]	; (8008a60 <_dtoa_r+0xaf8>)
 8008856:	4602      	mov	r2, r0
 8008858:	f240 21ea 	movw	r1, #746	; 0x2ea
 800885c:	f7ff bb9a 	b.w	8007f94 <_dtoa_r+0x2c>
 8008860:	693a      	ldr	r2, [r7, #16]
 8008862:	3202      	adds	r2, #2
 8008864:	0092      	lsls	r2, r2, #2
 8008866:	f107 010c 	add.w	r1, r7, #12
 800886a:	300c      	adds	r0, #12
 800886c:	f000 feaa 	bl	80095c4 <memcpy>
 8008870:	2201      	movs	r2, #1
 8008872:	4641      	mov	r1, r8
 8008874:	4630      	mov	r0, r6
 8008876:	f001 f90f 	bl	8009a98 <__lshift>
 800887a:	9b00      	ldr	r3, [sp, #0]
 800887c:	3301      	adds	r3, #1
 800887e:	9305      	str	r3, [sp, #20]
 8008880:	9b00      	ldr	r3, [sp, #0]
 8008882:	4453      	add	r3, sl
 8008884:	9309      	str	r3, [sp, #36]	; 0x24
 8008886:	9b02      	ldr	r3, [sp, #8]
 8008888:	f003 0301 	and.w	r3, r3, #1
 800888c:	46b9      	mov	r9, r7
 800888e:	9308      	str	r3, [sp, #32]
 8008890:	4607      	mov	r7, r0
 8008892:	9b05      	ldr	r3, [sp, #20]
 8008894:	4621      	mov	r1, r4
 8008896:	3b01      	subs	r3, #1
 8008898:	4628      	mov	r0, r5
 800889a:	9302      	str	r3, [sp, #8]
 800889c:	f7ff fad6 	bl	8007e4c <quorem>
 80088a0:	4603      	mov	r3, r0
 80088a2:	3330      	adds	r3, #48	; 0x30
 80088a4:	9006      	str	r0, [sp, #24]
 80088a6:	4649      	mov	r1, r9
 80088a8:	4628      	mov	r0, r5
 80088aa:	930a      	str	r3, [sp, #40]	; 0x28
 80088ac:	f001 f960 	bl	8009b70 <__mcmp>
 80088b0:	463a      	mov	r2, r7
 80088b2:	4682      	mov	sl, r0
 80088b4:	4621      	mov	r1, r4
 80088b6:	4630      	mov	r0, r6
 80088b8:	f001 f976 	bl	8009ba8 <__mdiff>
 80088bc:	68c2      	ldr	r2, [r0, #12]
 80088be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088c0:	4680      	mov	r8, r0
 80088c2:	bb0a      	cbnz	r2, 8008908 <_dtoa_r+0x9a0>
 80088c4:	4601      	mov	r1, r0
 80088c6:	4628      	mov	r0, r5
 80088c8:	f001 f952 	bl	8009b70 <__mcmp>
 80088cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ce:	4602      	mov	r2, r0
 80088d0:	4641      	mov	r1, r8
 80088d2:	4630      	mov	r0, r6
 80088d4:	920e      	str	r2, [sp, #56]	; 0x38
 80088d6:	930a      	str	r3, [sp, #40]	; 0x28
 80088d8:	f000 fec2 	bl	8009660 <_Bfree>
 80088dc:	9b07      	ldr	r3, [sp, #28]
 80088de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80088e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80088e4:	ea43 0102 	orr.w	r1, r3, r2
 80088e8:	9b08      	ldr	r3, [sp, #32]
 80088ea:	430b      	orrs	r3, r1
 80088ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ee:	d10d      	bne.n	800890c <_dtoa_r+0x9a4>
 80088f0:	2b39      	cmp	r3, #57	; 0x39
 80088f2:	d029      	beq.n	8008948 <_dtoa_r+0x9e0>
 80088f4:	f1ba 0f00 	cmp.w	sl, #0
 80088f8:	dd01      	ble.n	80088fe <_dtoa_r+0x996>
 80088fa:	9b06      	ldr	r3, [sp, #24]
 80088fc:	3331      	adds	r3, #49	; 0x31
 80088fe:	9a02      	ldr	r2, [sp, #8]
 8008900:	7013      	strb	r3, [r2, #0]
 8008902:	e774      	b.n	80087ee <_dtoa_r+0x886>
 8008904:	4638      	mov	r0, r7
 8008906:	e7b8      	b.n	800887a <_dtoa_r+0x912>
 8008908:	2201      	movs	r2, #1
 800890a:	e7e1      	b.n	80088d0 <_dtoa_r+0x968>
 800890c:	f1ba 0f00 	cmp.w	sl, #0
 8008910:	db06      	blt.n	8008920 <_dtoa_r+0x9b8>
 8008912:	9907      	ldr	r1, [sp, #28]
 8008914:	ea41 0a0a 	orr.w	sl, r1, sl
 8008918:	9908      	ldr	r1, [sp, #32]
 800891a:	ea5a 0101 	orrs.w	r1, sl, r1
 800891e:	d120      	bne.n	8008962 <_dtoa_r+0x9fa>
 8008920:	2a00      	cmp	r2, #0
 8008922:	ddec      	ble.n	80088fe <_dtoa_r+0x996>
 8008924:	4629      	mov	r1, r5
 8008926:	2201      	movs	r2, #1
 8008928:	4630      	mov	r0, r6
 800892a:	9305      	str	r3, [sp, #20]
 800892c:	f001 f8b4 	bl	8009a98 <__lshift>
 8008930:	4621      	mov	r1, r4
 8008932:	4605      	mov	r5, r0
 8008934:	f001 f91c 	bl	8009b70 <__mcmp>
 8008938:	2800      	cmp	r0, #0
 800893a:	9b05      	ldr	r3, [sp, #20]
 800893c:	dc02      	bgt.n	8008944 <_dtoa_r+0x9dc>
 800893e:	d1de      	bne.n	80088fe <_dtoa_r+0x996>
 8008940:	07da      	lsls	r2, r3, #31
 8008942:	d5dc      	bpl.n	80088fe <_dtoa_r+0x996>
 8008944:	2b39      	cmp	r3, #57	; 0x39
 8008946:	d1d8      	bne.n	80088fa <_dtoa_r+0x992>
 8008948:	9a02      	ldr	r2, [sp, #8]
 800894a:	2339      	movs	r3, #57	; 0x39
 800894c:	7013      	strb	r3, [r2, #0]
 800894e:	4643      	mov	r3, r8
 8008950:	4698      	mov	r8, r3
 8008952:	3b01      	subs	r3, #1
 8008954:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008958:	2a39      	cmp	r2, #57	; 0x39
 800895a:	d051      	beq.n	8008a00 <_dtoa_r+0xa98>
 800895c:	3201      	adds	r2, #1
 800895e:	701a      	strb	r2, [r3, #0]
 8008960:	e745      	b.n	80087ee <_dtoa_r+0x886>
 8008962:	2a00      	cmp	r2, #0
 8008964:	dd03      	ble.n	800896e <_dtoa_r+0xa06>
 8008966:	2b39      	cmp	r3, #57	; 0x39
 8008968:	d0ee      	beq.n	8008948 <_dtoa_r+0x9e0>
 800896a:	3301      	adds	r3, #1
 800896c:	e7c7      	b.n	80088fe <_dtoa_r+0x996>
 800896e:	9a05      	ldr	r2, [sp, #20]
 8008970:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008972:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008976:	428a      	cmp	r2, r1
 8008978:	d02b      	beq.n	80089d2 <_dtoa_r+0xa6a>
 800897a:	4629      	mov	r1, r5
 800897c:	2300      	movs	r3, #0
 800897e:	220a      	movs	r2, #10
 8008980:	4630      	mov	r0, r6
 8008982:	f000 fe8f 	bl	80096a4 <__multadd>
 8008986:	45b9      	cmp	r9, r7
 8008988:	4605      	mov	r5, r0
 800898a:	f04f 0300 	mov.w	r3, #0
 800898e:	f04f 020a 	mov.w	r2, #10
 8008992:	4649      	mov	r1, r9
 8008994:	4630      	mov	r0, r6
 8008996:	d107      	bne.n	80089a8 <_dtoa_r+0xa40>
 8008998:	f000 fe84 	bl	80096a4 <__multadd>
 800899c:	4681      	mov	r9, r0
 800899e:	4607      	mov	r7, r0
 80089a0:	9b05      	ldr	r3, [sp, #20]
 80089a2:	3301      	adds	r3, #1
 80089a4:	9305      	str	r3, [sp, #20]
 80089a6:	e774      	b.n	8008892 <_dtoa_r+0x92a>
 80089a8:	f000 fe7c 	bl	80096a4 <__multadd>
 80089ac:	4639      	mov	r1, r7
 80089ae:	4681      	mov	r9, r0
 80089b0:	2300      	movs	r3, #0
 80089b2:	220a      	movs	r2, #10
 80089b4:	4630      	mov	r0, r6
 80089b6:	f000 fe75 	bl	80096a4 <__multadd>
 80089ba:	4607      	mov	r7, r0
 80089bc:	e7f0      	b.n	80089a0 <_dtoa_r+0xa38>
 80089be:	f1ba 0f00 	cmp.w	sl, #0
 80089c2:	9a00      	ldr	r2, [sp, #0]
 80089c4:	bfcc      	ite	gt
 80089c6:	46d0      	movgt	r8, sl
 80089c8:	f04f 0801 	movle.w	r8, #1
 80089cc:	4490      	add	r8, r2
 80089ce:	f04f 0900 	mov.w	r9, #0
 80089d2:	4629      	mov	r1, r5
 80089d4:	2201      	movs	r2, #1
 80089d6:	4630      	mov	r0, r6
 80089d8:	9302      	str	r3, [sp, #8]
 80089da:	f001 f85d 	bl	8009a98 <__lshift>
 80089de:	4621      	mov	r1, r4
 80089e0:	4605      	mov	r5, r0
 80089e2:	f001 f8c5 	bl	8009b70 <__mcmp>
 80089e6:	2800      	cmp	r0, #0
 80089e8:	dcb1      	bgt.n	800894e <_dtoa_r+0x9e6>
 80089ea:	d102      	bne.n	80089f2 <_dtoa_r+0xa8a>
 80089ec:	9b02      	ldr	r3, [sp, #8]
 80089ee:	07db      	lsls	r3, r3, #31
 80089f0:	d4ad      	bmi.n	800894e <_dtoa_r+0x9e6>
 80089f2:	4643      	mov	r3, r8
 80089f4:	4698      	mov	r8, r3
 80089f6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089fa:	2a30      	cmp	r2, #48	; 0x30
 80089fc:	d0fa      	beq.n	80089f4 <_dtoa_r+0xa8c>
 80089fe:	e6f6      	b.n	80087ee <_dtoa_r+0x886>
 8008a00:	9a00      	ldr	r2, [sp, #0]
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d1a4      	bne.n	8008950 <_dtoa_r+0x9e8>
 8008a06:	f10b 0b01 	add.w	fp, fp, #1
 8008a0a:	2331      	movs	r3, #49	; 0x31
 8008a0c:	e778      	b.n	8008900 <_dtoa_r+0x998>
 8008a0e:	4b15      	ldr	r3, [pc, #84]	; (8008a64 <_dtoa_r+0xafc>)
 8008a10:	f7ff bb12 	b.w	8008038 <_dtoa_r+0xd0>
 8008a14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f47f aaee 	bne.w	8007ff8 <_dtoa_r+0x90>
 8008a1c:	4b12      	ldr	r3, [pc, #72]	; (8008a68 <_dtoa_r+0xb00>)
 8008a1e:	f7ff bb0b 	b.w	8008038 <_dtoa_r+0xd0>
 8008a22:	f1ba 0f00 	cmp.w	sl, #0
 8008a26:	dc03      	bgt.n	8008a30 <_dtoa_r+0xac8>
 8008a28:	9b07      	ldr	r3, [sp, #28]
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	f73f aec7 	bgt.w	80087be <_dtoa_r+0x856>
 8008a30:	f8dd 8000 	ldr.w	r8, [sp]
 8008a34:	4621      	mov	r1, r4
 8008a36:	4628      	mov	r0, r5
 8008a38:	f7ff fa08 	bl	8007e4c <quorem>
 8008a3c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008a40:	f808 3b01 	strb.w	r3, [r8], #1
 8008a44:	9a00      	ldr	r2, [sp, #0]
 8008a46:	eba8 0202 	sub.w	r2, r8, r2
 8008a4a:	4592      	cmp	sl, r2
 8008a4c:	ddb7      	ble.n	80089be <_dtoa_r+0xa56>
 8008a4e:	4629      	mov	r1, r5
 8008a50:	2300      	movs	r3, #0
 8008a52:	220a      	movs	r2, #10
 8008a54:	4630      	mov	r0, r6
 8008a56:	f000 fe25 	bl	80096a4 <__multadd>
 8008a5a:	4605      	mov	r5, r0
 8008a5c:	e7ea      	b.n	8008a34 <_dtoa_r+0xacc>
 8008a5e:	bf00      	nop
 8008a60:	0800b03c 	.word	0x0800b03c
 8008a64:	0800ae3c 	.word	0x0800ae3c
 8008a68:	0800afb9 	.word	0x0800afb9

08008a6c <__sflush_r>:
 8008a6c:	898a      	ldrh	r2, [r1, #12]
 8008a6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a72:	4605      	mov	r5, r0
 8008a74:	0710      	lsls	r0, r2, #28
 8008a76:	460c      	mov	r4, r1
 8008a78:	d458      	bmi.n	8008b2c <__sflush_r+0xc0>
 8008a7a:	684b      	ldr	r3, [r1, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	dc05      	bgt.n	8008a8c <__sflush_r+0x20>
 8008a80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	dc02      	bgt.n	8008a8c <__sflush_r+0x20>
 8008a86:	2000      	movs	r0, #0
 8008a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a8e:	2e00      	cmp	r6, #0
 8008a90:	d0f9      	beq.n	8008a86 <__sflush_r+0x1a>
 8008a92:	2300      	movs	r3, #0
 8008a94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a98:	682f      	ldr	r7, [r5, #0]
 8008a9a:	602b      	str	r3, [r5, #0]
 8008a9c:	d032      	beq.n	8008b04 <__sflush_r+0x98>
 8008a9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008aa0:	89a3      	ldrh	r3, [r4, #12]
 8008aa2:	075a      	lsls	r2, r3, #29
 8008aa4:	d505      	bpl.n	8008ab2 <__sflush_r+0x46>
 8008aa6:	6863      	ldr	r3, [r4, #4]
 8008aa8:	1ac0      	subs	r0, r0, r3
 8008aaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008aac:	b10b      	cbz	r3, 8008ab2 <__sflush_r+0x46>
 8008aae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ab0:	1ac0      	subs	r0, r0, r3
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ab8:	6a21      	ldr	r1, [r4, #32]
 8008aba:	4628      	mov	r0, r5
 8008abc:	47b0      	blx	r6
 8008abe:	1c43      	adds	r3, r0, #1
 8008ac0:	89a3      	ldrh	r3, [r4, #12]
 8008ac2:	d106      	bne.n	8008ad2 <__sflush_r+0x66>
 8008ac4:	6829      	ldr	r1, [r5, #0]
 8008ac6:	291d      	cmp	r1, #29
 8008ac8:	d82c      	bhi.n	8008b24 <__sflush_r+0xb8>
 8008aca:	4a2a      	ldr	r2, [pc, #168]	; (8008b74 <__sflush_r+0x108>)
 8008acc:	40ca      	lsrs	r2, r1
 8008ace:	07d6      	lsls	r6, r2, #31
 8008ad0:	d528      	bpl.n	8008b24 <__sflush_r+0xb8>
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	6062      	str	r2, [r4, #4]
 8008ad6:	04d9      	lsls	r1, r3, #19
 8008ad8:	6922      	ldr	r2, [r4, #16]
 8008ada:	6022      	str	r2, [r4, #0]
 8008adc:	d504      	bpl.n	8008ae8 <__sflush_r+0x7c>
 8008ade:	1c42      	adds	r2, r0, #1
 8008ae0:	d101      	bne.n	8008ae6 <__sflush_r+0x7a>
 8008ae2:	682b      	ldr	r3, [r5, #0]
 8008ae4:	b903      	cbnz	r3, 8008ae8 <__sflush_r+0x7c>
 8008ae6:	6560      	str	r0, [r4, #84]	; 0x54
 8008ae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008aea:	602f      	str	r7, [r5, #0]
 8008aec:	2900      	cmp	r1, #0
 8008aee:	d0ca      	beq.n	8008a86 <__sflush_r+0x1a>
 8008af0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008af4:	4299      	cmp	r1, r3
 8008af6:	d002      	beq.n	8008afe <__sflush_r+0x92>
 8008af8:	4628      	mov	r0, r5
 8008afa:	f001 fa3d 	bl	8009f78 <_free_r>
 8008afe:	2000      	movs	r0, #0
 8008b00:	6360      	str	r0, [r4, #52]	; 0x34
 8008b02:	e7c1      	b.n	8008a88 <__sflush_r+0x1c>
 8008b04:	6a21      	ldr	r1, [r4, #32]
 8008b06:	2301      	movs	r3, #1
 8008b08:	4628      	mov	r0, r5
 8008b0a:	47b0      	blx	r6
 8008b0c:	1c41      	adds	r1, r0, #1
 8008b0e:	d1c7      	bne.n	8008aa0 <__sflush_r+0x34>
 8008b10:	682b      	ldr	r3, [r5, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d0c4      	beq.n	8008aa0 <__sflush_r+0x34>
 8008b16:	2b1d      	cmp	r3, #29
 8008b18:	d001      	beq.n	8008b1e <__sflush_r+0xb2>
 8008b1a:	2b16      	cmp	r3, #22
 8008b1c:	d101      	bne.n	8008b22 <__sflush_r+0xb6>
 8008b1e:	602f      	str	r7, [r5, #0]
 8008b20:	e7b1      	b.n	8008a86 <__sflush_r+0x1a>
 8008b22:	89a3      	ldrh	r3, [r4, #12]
 8008b24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b28:	81a3      	strh	r3, [r4, #12]
 8008b2a:	e7ad      	b.n	8008a88 <__sflush_r+0x1c>
 8008b2c:	690f      	ldr	r7, [r1, #16]
 8008b2e:	2f00      	cmp	r7, #0
 8008b30:	d0a9      	beq.n	8008a86 <__sflush_r+0x1a>
 8008b32:	0793      	lsls	r3, r2, #30
 8008b34:	680e      	ldr	r6, [r1, #0]
 8008b36:	bf08      	it	eq
 8008b38:	694b      	ldreq	r3, [r1, #20]
 8008b3a:	600f      	str	r7, [r1, #0]
 8008b3c:	bf18      	it	ne
 8008b3e:	2300      	movne	r3, #0
 8008b40:	eba6 0807 	sub.w	r8, r6, r7
 8008b44:	608b      	str	r3, [r1, #8]
 8008b46:	f1b8 0f00 	cmp.w	r8, #0
 8008b4a:	dd9c      	ble.n	8008a86 <__sflush_r+0x1a>
 8008b4c:	6a21      	ldr	r1, [r4, #32]
 8008b4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b50:	4643      	mov	r3, r8
 8008b52:	463a      	mov	r2, r7
 8008b54:	4628      	mov	r0, r5
 8008b56:	47b0      	blx	r6
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	dc06      	bgt.n	8008b6a <__sflush_r+0xfe>
 8008b5c:	89a3      	ldrh	r3, [r4, #12]
 8008b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b62:	81a3      	strh	r3, [r4, #12]
 8008b64:	f04f 30ff 	mov.w	r0, #4294967295
 8008b68:	e78e      	b.n	8008a88 <__sflush_r+0x1c>
 8008b6a:	4407      	add	r7, r0
 8008b6c:	eba8 0800 	sub.w	r8, r8, r0
 8008b70:	e7e9      	b.n	8008b46 <__sflush_r+0xda>
 8008b72:	bf00      	nop
 8008b74:	20400001 	.word	0x20400001

08008b78 <_fflush_r>:
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	690b      	ldr	r3, [r1, #16]
 8008b7c:	4605      	mov	r5, r0
 8008b7e:	460c      	mov	r4, r1
 8008b80:	b913      	cbnz	r3, 8008b88 <_fflush_r+0x10>
 8008b82:	2500      	movs	r5, #0
 8008b84:	4628      	mov	r0, r5
 8008b86:	bd38      	pop	{r3, r4, r5, pc}
 8008b88:	b118      	cbz	r0, 8008b92 <_fflush_r+0x1a>
 8008b8a:	6983      	ldr	r3, [r0, #24]
 8008b8c:	b90b      	cbnz	r3, 8008b92 <_fflush_r+0x1a>
 8008b8e:	f000 f887 	bl	8008ca0 <__sinit>
 8008b92:	4b14      	ldr	r3, [pc, #80]	; (8008be4 <_fflush_r+0x6c>)
 8008b94:	429c      	cmp	r4, r3
 8008b96:	d11b      	bne.n	8008bd0 <_fflush_r+0x58>
 8008b98:	686c      	ldr	r4, [r5, #4]
 8008b9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d0ef      	beq.n	8008b82 <_fflush_r+0xa>
 8008ba2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ba4:	07d0      	lsls	r0, r2, #31
 8008ba6:	d404      	bmi.n	8008bb2 <_fflush_r+0x3a>
 8008ba8:	0599      	lsls	r1, r3, #22
 8008baa:	d402      	bmi.n	8008bb2 <_fflush_r+0x3a>
 8008bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bae:	f000 fc88 	bl	80094c2 <__retarget_lock_acquire_recursive>
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	4621      	mov	r1, r4
 8008bb6:	f7ff ff59 	bl	8008a6c <__sflush_r>
 8008bba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bbc:	07da      	lsls	r2, r3, #31
 8008bbe:	4605      	mov	r5, r0
 8008bc0:	d4e0      	bmi.n	8008b84 <_fflush_r+0xc>
 8008bc2:	89a3      	ldrh	r3, [r4, #12]
 8008bc4:	059b      	lsls	r3, r3, #22
 8008bc6:	d4dd      	bmi.n	8008b84 <_fflush_r+0xc>
 8008bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bca:	f000 fc7b 	bl	80094c4 <__retarget_lock_release_recursive>
 8008bce:	e7d9      	b.n	8008b84 <_fflush_r+0xc>
 8008bd0:	4b05      	ldr	r3, [pc, #20]	; (8008be8 <_fflush_r+0x70>)
 8008bd2:	429c      	cmp	r4, r3
 8008bd4:	d101      	bne.n	8008bda <_fflush_r+0x62>
 8008bd6:	68ac      	ldr	r4, [r5, #8]
 8008bd8:	e7df      	b.n	8008b9a <_fflush_r+0x22>
 8008bda:	4b04      	ldr	r3, [pc, #16]	; (8008bec <_fflush_r+0x74>)
 8008bdc:	429c      	cmp	r4, r3
 8008bde:	bf08      	it	eq
 8008be0:	68ec      	ldreq	r4, [r5, #12]
 8008be2:	e7da      	b.n	8008b9a <_fflush_r+0x22>
 8008be4:	0800b070 	.word	0x0800b070
 8008be8:	0800b090 	.word	0x0800b090
 8008bec:	0800b050 	.word	0x0800b050

08008bf0 <std>:
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	b510      	push	{r4, lr}
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	e9c0 3300 	strd	r3, r3, [r0]
 8008bfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008bfe:	6083      	str	r3, [r0, #8]
 8008c00:	8181      	strh	r1, [r0, #12]
 8008c02:	6643      	str	r3, [r0, #100]	; 0x64
 8008c04:	81c2      	strh	r2, [r0, #14]
 8008c06:	6183      	str	r3, [r0, #24]
 8008c08:	4619      	mov	r1, r3
 8008c0a:	2208      	movs	r2, #8
 8008c0c:	305c      	adds	r0, #92	; 0x5c
 8008c0e:	f7fd fac5 	bl	800619c <memset>
 8008c12:	4b05      	ldr	r3, [pc, #20]	; (8008c28 <std+0x38>)
 8008c14:	6263      	str	r3, [r4, #36]	; 0x24
 8008c16:	4b05      	ldr	r3, [pc, #20]	; (8008c2c <std+0x3c>)
 8008c18:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c1a:	4b05      	ldr	r3, [pc, #20]	; (8008c30 <std+0x40>)
 8008c1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c1e:	4b05      	ldr	r3, [pc, #20]	; (8008c34 <std+0x44>)
 8008c20:	6224      	str	r4, [r4, #32]
 8008c22:	6323      	str	r3, [r4, #48]	; 0x30
 8008c24:	bd10      	pop	{r4, pc}
 8008c26:	bf00      	nop
 8008c28:	0800a6f9 	.word	0x0800a6f9
 8008c2c:	0800a71b 	.word	0x0800a71b
 8008c30:	0800a753 	.word	0x0800a753
 8008c34:	0800a777 	.word	0x0800a777

08008c38 <_cleanup_r>:
 8008c38:	4901      	ldr	r1, [pc, #4]	; (8008c40 <_cleanup_r+0x8>)
 8008c3a:	f000 b8af 	b.w	8008d9c <_fwalk_reent>
 8008c3e:	bf00      	nop
 8008c40:	08008b79 	.word	0x08008b79

08008c44 <__sfmoreglue>:
 8008c44:	b570      	push	{r4, r5, r6, lr}
 8008c46:	1e4a      	subs	r2, r1, #1
 8008c48:	2568      	movs	r5, #104	; 0x68
 8008c4a:	4355      	muls	r5, r2
 8008c4c:	460e      	mov	r6, r1
 8008c4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c52:	f001 f9e1 	bl	800a018 <_malloc_r>
 8008c56:	4604      	mov	r4, r0
 8008c58:	b140      	cbz	r0, 8008c6c <__sfmoreglue+0x28>
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	e9c0 1600 	strd	r1, r6, [r0]
 8008c60:	300c      	adds	r0, #12
 8008c62:	60a0      	str	r0, [r4, #8]
 8008c64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c68:	f7fd fa98 	bl	800619c <memset>
 8008c6c:	4620      	mov	r0, r4
 8008c6e:	bd70      	pop	{r4, r5, r6, pc}

08008c70 <__sfp_lock_acquire>:
 8008c70:	4801      	ldr	r0, [pc, #4]	; (8008c78 <__sfp_lock_acquire+0x8>)
 8008c72:	f000 bc26 	b.w	80094c2 <__retarget_lock_acquire_recursive>
 8008c76:	bf00      	nop
 8008c78:	20000518 	.word	0x20000518

08008c7c <__sfp_lock_release>:
 8008c7c:	4801      	ldr	r0, [pc, #4]	; (8008c84 <__sfp_lock_release+0x8>)
 8008c7e:	f000 bc21 	b.w	80094c4 <__retarget_lock_release_recursive>
 8008c82:	bf00      	nop
 8008c84:	20000518 	.word	0x20000518

08008c88 <__sinit_lock_acquire>:
 8008c88:	4801      	ldr	r0, [pc, #4]	; (8008c90 <__sinit_lock_acquire+0x8>)
 8008c8a:	f000 bc1a 	b.w	80094c2 <__retarget_lock_acquire_recursive>
 8008c8e:	bf00      	nop
 8008c90:	20000513 	.word	0x20000513

08008c94 <__sinit_lock_release>:
 8008c94:	4801      	ldr	r0, [pc, #4]	; (8008c9c <__sinit_lock_release+0x8>)
 8008c96:	f000 bc15 	b.w	80094c4 <__retarget_lock_release_recursive>
 8008c9a:	bf00      	nop
 8008c9c:	20000513 	.word	0x20000513

08008ca0 <__sinit>:
 8008ca0:	b510      	push	{r4, lr}
 8008ca2:	4604      	mov	r4, r0
 8008ca4:	f7ff fff0 	bl	8008c88 <__sinit_lock_acquire>
 8008ca8:	69a3      	ldr	r3, [r4, #24]
 8008caa:	b11b      	cbz	r3, 8008cb4 <__sinit+0x14>
 8008cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cb0:	f7ff bff0 	b.w	8008c94 <__sinit_lock_release>
 8008cb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008cb8:	6523      	str	r3, [r4, #80]	; 0x50
 8008cba:	4b13      	ldr	r3, [pc, #76]	; (8008d08 <__sinit+0x68>)
 8008cbc:	4a13      	ldr	r2, [pc, #76]	; (8008d0c <__sinit+0x6c>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8008cc2:	42a3      	cmp	r3, r4
 8008cc4:	bf04      	itt	eq
 8008cc6:	2301      	moveq	r3, #1
 8008cc8:	61a3      	streq	r3, [r4, #24]
 8008cca:	4620      	mov	r0, r4
 8008ccc:	f000 f820 	bl	8008d10 <__sfp>
 8008cd0:	6060      	str	r0, [r4, #4]
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	f000 f81c 	bl	8008d10 <__sfp>
 8008cd8:	60a0      	str	r0, [r4, #8]
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f000 f818 	bl	8008d10 <__sfp>
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	60e0      	str	r0, [r4, #12]
 8008ce4:	2104      	movs	r1, #4
 8008ce6:	6860      	ldr	r0, [r4, #4]
 8008ce8:	f7ff ff82 	bl	8008bf0 <std>
 8008cec:	68a0      	ldr	r0, [r4, #8]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	2109      	movs	r1, #9
 8008cf2:	f7ff ff7d 	bl	8008bf0 <std>
 8008cf6:	68e0      	ldr	r0, [r4, #12]
 8008cf8:	2202      	movs	r2, #2
 8008cfa:	2112      	movs	r1, #18
 8008cfc:	f7ff ff78 	bl	8008bf0 <std>
 8008d00:	2301      	movs	r3, #1
 8008d02:	61a3      	str	r3, [r4, #24]
 8008d04:	e7d2      	b.n	8008cac <__sinit+0xc>
 8008d06:	bf00      	nop
 8008d08:	0800ae28 	.word	0x0800ae28
 8008d0c:	08008c39 	.word	0x08008c39

08008d10 <__sfp>:
 8008d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d12:	4607      	mov	r7, r0
 8008d14:	f7ff ffac 	bl	8008c70 <__sfp_lock_acquire>
 8008d18:	4b1e      	ldr	r3, [pc, #120]	; (8008d94 <__sfp+0x84>)
 8008d1a:	681e      	ldr	r6, [r3, #0]
 8008d1c:	69b3      	ldr	r3, [r6, #24]
 8008d1e:	b913      	cbnz	r3, 8008d26 <__sfp+0x16>
 8008d20:	4630      	mov	r0, r6
 8008d22:	f7ff ffbd 	bl	8008ca0 <__sinit>
 8008d26:	3648      	adds	r6, #72	; 0x48
 8008d28:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d2c:	3b01      	subs	r3, #1
 8008d2e:	d503      	bpl.n	8008d38 <__sfp+0x28>
 8008d30:	6833      	ldr	r3, [r6, #0]
 8008d32:	b30b      	cbz	r3, 8008d78 <__sfp+0x68>
 8008d34:	6836      	ldr	r6, [r6, #0]
 8008d36:	e7f7      	b.n	8008d28 <__sfp+0x18>
 8008d38:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d3c:	b9d5      	cbnz	r5, 8008d74 <__sfp+0x64>
 8008d3e:	4b16      	ldr	r3, [pc, #88]	; (8008d98 <__sfp+0x88>)
 8008d40:	60e3      	str	r3, [r4, #12]
 8008d42:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d46:	6665      	str	r5, [r4, #100]	; 0x64
 8008d48:	f000 fbba 	bl	80094c0 <__retarget_lock_init_recursive>
 8008d4c:	f7ff ff96 	bl	8008c7c <__sfp_lock_release>
 8008d50:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d54:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d58:	6025      	str	r5, [r4, #0]
 8008d5a:	61a5      	str	r5, [r4, #24]
 8008d5c:	2208      	movs	r2, #8
 8008d5e:	4629      	mov	r1, r5
 8008d60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d64:	f7fd fa1a 	bl	800619c <memset>
 8008d68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008d6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008d70:	4620      	mov	r0, r4
 8008d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d74:	3468      	adds	r4, #104	; 0x68
 8008d76:	e7d9      	b.n	8008d2c <__sfp+0x1c>
 8008d78:	2104      	movs	r1, #4
 8008d7a:	4638      	mov	r0, r7
 8008d7c:	f7ff ff62 	bl	8008c44 <__sfmoreglue>
 8008d80:	4604      	mov	r4, r0
 8008d82:	6030      	str	r0, [r6, #0]
 8008d84:	2800      	cmp	r0, #0
 8008d86:	d1d5      	bne.n	8008d34 <__sfp+0x24>
 8008d88:	f7ff ff78 	bl	8008c7c <__sfp_lock_release>
 8008d8c:	230c      	movs	r3, #12
 8008d8e:	603b      	str	r3, [r7, #0]
 8008d90:	e7ee      	b.n	8008d70 <__sfp+0x60>
 8008d92:	bf00      	nop
 8008d94:	0800ae28 	.word	0x0800ae28
 8008d98:	ffff0001 	.word	0xffff0001

08008d9c <_fwalk_reent>:
 8008d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008da0:	4606      	mov	r6, r0
 8008da2:	4688      	mov	r8, r1
 8008da4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008da8:	2700      	movs	r7, #0
 8008daa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008dae:	f1b9 0901 	subs.w	r9, r9, #1
 8008db2:	d505      	bpl.n	8008dc0 <_fwalk_reent+0x24>
 8008db4:	6824      	ldr	r4, [r4, #0]
 8008db6:	2c00      	cmp	r4, #0
 8008db8:	d1f7      	bne.n	8008daa <_fwalk_reent+0xe>
 8008dba:	4638      	mov	r0, r7
 8008dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dc0:	89ab      	ldrh	r3, [r5, #12]
 8008dc2:	2b01      	cmp	r3, #1
 8008dc4:	d907      	bls.n	8008dd6 <_fwalk_reent+0x3a>
 8008dc6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	d003      	beq.n	8008dd6 <_fwalk_reent+0x3a>
 8008dce:	4629      	mov	r1, r5
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	47c0      	blx	r8
 8008dd4:	4307      	orrs	r7, r0
 8008dd6:	3568      	adds	r5, #104	; 0x68
 8008dd8:	e7e9      	b.n	8008dae <_fwalk_reent+0x12>

08008dda <rshift>:
 8008dda:	6903      	ldr	r3, [r0, #16]
 8008ddc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008de0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008de4:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008de8:	f100 0414 	add.w	r4, r0, #20
 8008dec:	dd45      	ble.n	8008e7a <rshift+0xa0>
 8008dee:	f011 011f 	ands.w	r1, r1, #31
 8008df2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008df6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008dfa:	d10c      	bne.n	8008e16 <rshift+0x3c>
 8008dfc:	f100 0710 	add.w	r7, r0, #16
 8008e00:	4629      	mov	r1, r5
 8008e02:	42b1      	cmp	r1, r6
 8008e04:	d334      	bcc.n	8008e70 <rshift+0x96>
 8008e06:	1a9b      	subs	r3, r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	1eea      	subs	r2, r5, #3
 8008e0c:	4296      	cmp	r6, r2
 8008e0e:	bf38      	it	cc
 8008e10:	2300      	movcc	r3, #0
 8008e12:	4423      	add	r3, r4
 8008e14:	e015      	b.n	8008e42 <rshift+0x68>
 8008e16:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008e1a:	f1c1 0820 	rsb	r8, r1, #32
 8008e1e:	40cf      	lsrs	r7, r1
 8008e20:	f105 0e04 	add.w	lr, r5, #4
 8008e24:	46a1      	mov	r9, r4
 8008e26:	4576      	cmp	r6, lr
 8008e28:	46f4      	mov	ip, lr
 8008e2a:	d815      	bhi.n	8008e58 <rshift+0x7e>
 8008e2c:	1a9b      	subs	r3, r3, r2
 8008e2e:	009a      	lsls	r2, r3, #2
 8008e30:	3a04      	subs	r2, #4
 8008e32:	3501      	adds	r5, #1
 8008e34:	42ae      	cmp	r6, r5
 8008e36:	bf38      	it	cc
 8008e38:	2200      	movcc	r2, #0
 8008e3a:	18a3      	adds	r3, r4, r2
 8008e3c:	50a7      	str	r7, [r4, r2]
 8008e3e:	b107      	cbz	r7, 8008e42 <rshift+0x68>
 8008e40:	3304      	adds	r3, #4
 8008e42:	1b1a      	subs	r2, r3, r4
 8008e44:	42a3      	cmp	r3, r4
 8008e46:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e4a:	bf08      	it	eq
 8008e4c:	2300      	moveq	r3, #0
 8008e4e:	6102      	str	r2, [r0, #16]
 8008e50:	bf08      	it	eq
 8008e52:	6143      	streq	r3, [r0, #20]
 8008e54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e58:	f8dc c000 	ldr.w	ip, [ip]
 8008e5c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e60:	ea4c 0707 	orr.w	r7, ip, r7
 8008e64:	f849 7b04 	str.w	r7, [r9], #4
 8008e68:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e6c:	40cf      	lsrs	r7, r1
 8008e6e:	e7da      	b.n	8008e26 <rshift+0x4c>
 8008e70:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e74:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e78:	e7c3      	b.n	8008e02 <rshift+0x28>
 8008e7a:	4623      	mov	r3, r4
 8008e7c:	e7e1      	b.n	8008e42 <rshift+0x68>

08008e7e <__hexdig_fun>:
 8008e7e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008e82:	2b09      	cmp	r3, #9
 8008e84:	d802      	bhi.n	8008e8c <__hexdig_fun+0xe>
 8008e86:	3820      	subs	r0, #32
 8008e88:	b2c0      	uxtb	r0, r0
 8008e8a:	4770      	bx	lr
 8008e8c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008e90:	2b05      	cmp	r3, #5
 8008e92:	d801      	bhi.n	8008e98 <__hexdig_fun+0x1a>
 8008e94:	3847      	subs	r0, #71	; 0x47
 8008e96:	e7f7      	b.n	8008e88 <__hexdig_fun+0xa>
 8008e98:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008e9c:	2b05      	cmp	r3, #5
 8008e9e:	d801      	bhi.n	8008ea4 <__hexdig_fun+0x26>
 8008ea0:	3827      	subs	r0, #39	; 0x27
 8008ea2:	e7f1      	b.n	8008e88 <__hexdig_fun+0xa>
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	4770      	bx	lr

08008ea8 <__gethex>:
 8008ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eac:	ed2d 8b02 	vpush	{d8}
 8008eb0:	b089      	sub	sp, #36	; 0x24
 8008eb2:	ee08 0a10 	vmov	s16, r0
 8008eb6:	9304      	str	r3, [sp, #16]
 8008eb8:	4bbc      	ldr	r3, [pc, #752]	; (80091ac <__gethex+0x304>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	9301      	str	r3, [sp, #4]
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	468b      	mov	fp, r1
 8008ec2:	4690      	mov	r8, r2
 8008ec4:	f7f7 f9bc 	bl	8000240 <strlen>
 8008ec8:	9b01      	ldr	r3, [sp, #4]
 8008eca:	f8db 2000 	ldr.w	r2, [fp]
 8008ece:	4403      	add	r3, r0
 8008ed0:	4682      	mov	sl, r0
 8008ed2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008ed6:	9305      	str	r3, [sp, #20]
 8008ed8:	1c93      	adds	r3, r2, #2
 8008eda:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008ede:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008ee2:	32fe      	adds	r2, #254	; 0xfe
 8008ee4:	18d1      	adds	r1, r2, r3
 8008ee6:	461f      	mov	r7, r3
 8008ee8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008eec:	9100      	str	r1, [sp, #0]
 8008eee:	2830      	cmp	r0, #48	; 0x30
 8008ef0:	d0f8      	beq.n	8008ee4 <__gethex+0x3c>
 8008ef2:	f7ff ffc4 	bl	8008e7e <__hexdig_fun>
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	d13a      	bne.n	8008f72 <__gethex+0xca>
 8008efc:	9901      	ldr	r1, [sp, #4]
 8008efe:	4652      	mov	r2, sl
 8008f00:	4638      	mov	r0, r7
 8008f02:	f001 fc3c 	bl	800a77e <strncmp>
 8008f06:	4605      	mov	r5, r0
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	d168      	bne.n	8008fde <__gethex+0x136>
 8008f0c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008f10:	eb07 060a 	add.w	r6, r7, sl
 8008f14:	f7ff ffb3 	bl	8008e7e <__hexdig_fun>
 8008f18:	2800      	cmp	r0, #0
 8008f1a:	d062      	beq.n	8008fe2 <__gethex+0x13a>
 8008f1c:	4633      	mov	r3, r6
 8008f1e:	7818      	ldrb	r0, [r3, #0]
 8008f20:	2830      	cmp	r0, #48	; 0x30
 8008f22:	461f      	mov	r7, r3
 8008f24:	f103 0301 	add.w	r3, r3, #1
 8008f28:	d0f9      	beq.n	8008f1e <__gethex+0x76>
 8008f2a:	f7ff ffa8 	bl	8008e7e <__hexdig_fun>
 8008f2e:	2301      	movs	r3, #1
 8008f30:	fab0 f480 	clz	r4, r0
 8008f34:	0964      	lsrs	r4, r4, #5
 8008f36:	4635      	mov	r5, r6
 8008f38:	9300      	str	r3, [sp, #0]
 8008f3a:	463a      	mov	r2, r7
 8008f3c:	4616      	mov	r6, r2
 8008f3e:	3201      	adds	r2, #1
 8008f40:	7830      	ldrb	r0, [r6, #0]
 8008f42:	f7ff ff9c 	bl	8008e7e <__hexdig_fun>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d1f8      	bne.n	8008f3c <__gethex+0x94>
 8008f4a:	9901      	ldr	r1, [sp, #4]
 8008f4c:	4652      	mov	r2, sl
 8008f4e:	4630      	mov	r0, r6
 8008f50:	f001 fc15 	bl	800a77e <strncmp>
 8008f54:	b980      	cbnz	r0, 8008f78 <__gethex+0xd0>
 8008f56:	b94d      	cbnz	r5, 8008f6c <__gethex+0xc4>
 8008f58:	eb06 050a 	add.w	r5, r6, sl
 8008f5c:	462a      	mov	r2, r5
 8008f5e:	4616      	mov	r6, r2
 8008f60:	3201      	adds	r2, #1
 8008f62:	7830      	ldrb	r0, [r6, #0]
 8008f64:	f7ff ff8b 	bl	8008e7e <__hexdig_fun>
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	d1f8      	bne.n	8008f5e <__gethex+0xb6>
 8008f6c:	1bad      	subs	r5, r5, r6
 8008f6e:	00ad      	lsls	r5, r5, #2
 8008f70:	e004      	b.n	8008f7c <__gethex+0xd4>
 8008f72:	2400      	movs	r4, #0
 8008f74:	4625      	mov	r5, r4
 8008f76:	e7e0      	b.n	8008f3a <__gethex+0x92>
 8008f78:	2d00      	cmp	r5, #0
 8008f7a:	d1f7      	bne.n	8008f6c <__gethex+0xc4>
 8008f7c:	7833      	ldrb	r3, [r6, #0]
 8008f7e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008f82:	2b50      	cmp	r3, #80	; 0x50
 8008f84:	d13b      	bne.n	8008ffe <__gethex+0x156>
 8008f86:	7873      	ldrb	r3, [r6, #1]
 8008f88:	2b2b      	cmp	r3, #43	; 0x2b
 8008f8a:	d02c      	beq.n	8008fe6 <__gethex+0x13e>
 8008f8c:	2b2d      	cmp	r3, #45	; 0x2d
 8008f8e:	d02e      	beq.n	8008fee <__gethex+0x146>
 8008f90:	1c71      	adds	r1, r6, #1
 8008f92:	f04f 0900 	mov.w	r9, #0
 8008f96:	7808      	ldrb	r0, [r1, #0]
 8008f98:	f7ff ff71 	bl	8008e7e <__hexdig_fun>
 8008f9c:	1e43      	subs	r3, r0, #1
 8008f9e:	b2db      	uxtb	r3, r3
 8008fa0:	2b18      	cmp	r3, #24
 8008fa2:	d82c      	bhi.n	8008ffe <__gethex+0x156>
 8008fa4:	f1a0 0210 	sub.w	r2, r0, #16
 8008fa8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008fac:	f7ff ff67 	bl	8008e7e <__hexdig_fun>
 8008fb0:	1e43      	subs	r3, r0, #1
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	2b18      	cmp	r3, #24
 8008fb6:	d91d      	bls.n	8008ff4 <__gethex+0x14c>
 8008fb8:	f1b9 0f00 	cmp.w	r9, #0
 8008fbc:	d000      	beq.n	8008fc0 <__gethex+0x118>
 8008fbe:	4252      	negs	r2, r2
 8008fc0:	4415      	add	r5, r2
 8008fc2:	f8cb 1000 	str.w	r1, [fp]
 8008fc6:	b1e4      	cbz	r4, 8009002 <__gethex+0x15a>
 8008fc8:	9b00      	ldr	r3, [sp, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	bf14      	ite	ne
 8008fce:	2700      	movne	r7, #0
 8008fd0:	2706      	moveq	r7, #6
 8008fd2:	4638      	mov	r0, r7
 8008fd4:	b009      	add	sp, #36	; 0x24
 8008fd6:	ecbd 8b02 	vpop	{d8}
 8008fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fde:	463e      	mov	r6, r7
 8008fe0:	4625      	mov	r5, r4
 8008fe2:	2401      	movs	r4, #1
 8008fe4:	e7ca      	b.n	8008f7c <__gethex+0xd4>
 8008fe6:	f04f 0900 	mov.w	r9, #0
 8008fea:	1cb1      	adds	r1, r6, #2
 8008fec:	e7d3      	b.n	8008f96 <__gethex+0xee>
 8008fee:	f04f 0901 	mov.w	r9, #1
 8008ff2:	e7fa      	b.n	8008fea <__gethex+0x142>
 8008ff4:	230a      	movs	r3, #10
 8008ff6:	fb03 0202 	mla	r2, r3, r2, r0
 8008ffa:	3a10      	subs	r2, #16
 8008ffc:	e7d4      	b.n	8008fa8 <__gethex+0x100>
 8008ffe:	4631      	mov	r1, r6
 8009000:	e7df      	b.n	8008fc2 <__gethex+0x11a>
 8009002:	1bf3      	subs	r3, r6, r7
 8009004:	3b01      	subs	r3, #1
 8009006:	4621      	mov	r1, r4
 8009008:	2b07      	cmp	r3, #7
 800900a:	dc0b      	bgt.n	8009024 <__gethex+0x17c>
 800900c:	ee18 0a10 	vmov	r0, s16
 8009010:	f000 fae6 	bl	80095e0 <_Balloc>
 8009014:	4604      	mov	r4, r0
 8009016:	b940      	cbnz	r0, 800902a <__gethex+0x182>
 8009018:	4b65      	ldr	r3, [pc, #404]	; (80091b0 <__gethex+0x308>)
 800901a:	4602      	mov	r2, r0
 800901c:	21de      	movs	r1, #222	; 0xde
 800901e:	4865      	ldr	r0, [pc, #404]	; (80091b4 <__gethex+0x30c>)
 8009020:	f001 fbde 	bl	800a7e0 <__assert_func>
 8009024:	3101      	adds	r1, #1
 8009026:	105b      	asrs	r3, r3, #1
 8009028:	e7ee      	b.n	8009008 <__gethex+0x160>
 800902a:	f100 0914 	add.w	r9, r0, #20
 800902e:	f04f 0b00 	mov.w	fp, #0
 8009032:	f1ca 0301 	rsb	r3, sl, #1
 8009036:	f8cd 9008 	str.w	r9, [sp, #8]
 800903a:	f8cd b000 	str.w	fp, [sp]
 800903e:	9306      	str	r3, [sp, #24]
 8009040:	42b7      	cmp	r7, r6
 8009042:	d340      	bcc.n	80090c6 <__gethex+0x21e>
 8009044:	9802      	ldr	r0, [sp, #8]
 8009046:	9b00      	ldr	r3, [sp, #0]
 8009048:	f840 3b04 	str.w	r3, [r0], #4
 800904c:	eba0 0009 	sub.w	r0, r0, r9
 8009050:	1080      	asrs	r0, r0, #2
 8009052:	0146      	lsls	r6, r0, #5
 8009054:	6120      	str	r0, [r4, #16]
 8009056:	4618      	mov	r0, r3
 8009058:	f000 fbb8 	bl	80097cc <__hi0bits>
 800905c:	1a30      	subs	r0, r6, r0
 800905e:	f8d8 6000 	ldr.w	r6, [r8]
 8009062:	42b0      	cmp	r0, r6
 8009064:	dd63      	ble.n	800912e <__gethex+0x286>
 8009066:	1b87      	subs	r7, r0, r6
 8009068:	4639      	mov	r1, r7
 800906a:	4620      	mov	r0, r4
 800906c:	f000 ff53 	bl	8009f16 <__any_on>
 8009070:	4682      	mov	sl, r0
 8009072:	b1a8      	cbz	r0, 80090a0 <__gethex+0x1f8>
 8009074:	1e7b      	subs	r3, r7, #1
 8009076:	1159      	asrs	r1, r3, #5
 8009078:	f003 021f 	and.w	r2, r3, #31
 800907c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009080:	f04f 0a01 	mov.w	sl, #1
 8009084:	fa0a f202 	lsl.w	r2, sl, r2
 8009088:	420a      	tst	r2, r1
 800908a:	d009      	beq.n	80090a0 <__gethex+0x1f8>
 800908c:	4553      	cmp	r3, sl
 800908e:	dd05      	ble.n	800909c <__gethex+0x1f4>
 8009090:	1eb9      	subs	r1, r7, #2
 8009092:	4620      	mov	r0, r4
 8009094:	f000 ff3f 	bl	8009f16 <__any_on>
 8009098:	2800      	cmp	r0, #0
 800909a:	d145      	bne.n	8009128 <__gethex+0x280>
 800909c:	f04f 0a02 	mov.w	sl, #2
 80090a0:	4639      	mov	r1, r7
 80090a2:	4620      	mov	r0, r4
 80090a4:	f7ff fe99 	bl	8008dda <rshift>
 80090a8:	443d      	add	r5, r7
 80090aa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090ae:	42ab      	cmp	r3, r5
 80090b0:	da4c      	bge.n	800914c <__gethex+0x2a4>
 80090b2:	ee18 0a10 	vmov	r0, s16
 80090b6:	4621      	mov	r1, r4
 80090b8:	f000 fad2 	bl	8009660 <_Bfree>
 80090bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090be:	2300      	movs	r3, #0
 80090c0:	6013      	str	r3, [r2, #0]
 80090c2:	27a3      	movs	r7, #163	; 0xa3
 80090c4:	e785      	b.n	8008fd2 <__gethex+0x12a>
 80090c6:	1e73      	subs	r3, r6, #1
 80090c8:	9a05      	ldr	r2, [sp, #20]
 80090ca:	9303      	str	r3, [sp, #12]
 80090cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d019      	beq.n	8009108 <__gethex+0x260>
 80090d4:	f1bb 0f20 	cmp.w	fp, #32
 80090d8:	d107      	bne.n	80090ea <__gethex+0x242>
 80090da:	9b02      	ldr	r3, [sp, #8]
 80090dc:	9a00      	ldr	r2, [sp, #0]
 80090de:	f843 2b04 	str.w	r2, [r3], #4
 80090e2:	9302      	str	r3, [sp, #8]
 80090e4:	2300      	movs	r3, #0
 80090e6:	9300      	str	r3, [sp, #0]
 80090e8:	469b      	mov	fp, r3
 80090ea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80090ee:	f7ff fec6 	bl	8008e7e <__hexdig_fun>
 80090f2:	9b00      	ldr	r3, [sp, #0]
 80090f4:	f000 000f 	and.w	r0, r0, #15
 80090f8:	fa00 f00b 	lsl.w	r0, r0, fp
 80090fc:	4303      	orrs	r3, r0
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	f10b 0b04 	add.w	fp, fp, #4
 8009104:	9b03      	ldr	r3, [sp, #12]
 8009106:	e00d      	b.n	8009124 <__gethex+0x27c>
 8009108:	9b03      	ldr	r3, [sp, #12]
 800910a:	9a06      	ldr	r2, [sp, #24]
 800910c:	4413      	add	r3, r2
 800910e:	42bb      	cmp	r3, r7
 8009110:	d3e0      	bcc.n	80090d4 <__gethex+0x22c>
 8009112:	4618      	mov	r0, r3
 8009114:	9901      	ldr	r1, [sp, #4]
 8009116:	9307      	str	r3, [sp, #28]
 8009118:	4652      	mov	r2, sl
 800911a:	f001 fb30 	bl	800a77e <strncmp>
 800911e:	9b07      	ldr	r3, [sp, #28]
 8009120:	2800      	cmp	r0, #0
 8009122:	d1d7      	bne.n	80090d4 <__gethex+0x22c>
 8009124:	461e      	mov	r6, r3
 8009126:	e78b      	b.n	8009040 <__gethex+0x198>
 8009128:	f04f 0a03 	mov.w	sl, #3
 800912c:	e7b8      	b.n	80090a0 <__gethex+0x1f8>
 800912e:	da0a      	bge.n	8009146 <__gethex+0x29e>
 8009130:	1a37      	subs	r7, r6, r0
 8009132:	4621      	mov	r1, r4
 8009134:	ee18 0a10 	vmov	r0, s16
 8009138:	463a      	mov	r2, r7
 800913a:	f000 fcad 	bl	8009a98 <__lshift>
 800913e:	1bed      	subs	r5, r5, r7
 8009140:	4604      	mov	r4, r0
 8009142:	f100 0914 	add.w	r9, r0, #20
 8009146:	f04f 0a00 	mov.w	sl, #0
 800914a:	e7ae      	b.n	80090aa <__gethex+0x202>
 800914c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009150:	42a8      	cmp	r0, r5
 8009152:	dd72      	ble.n	800923a <__gethex+0x392>
 8009154:	1b45      	subs	r5, r0, r5
 8009156:	42ae      	cmp	r6, r5
 8009158:	dc36      	bgt.n	80091c8 <__gethex+0x320>
 800915a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800915e:	2b02      	cmp	r3, #2
 8009160:	d02a      	beq.n	80091b8 <__gethex+0x310>
 8009162:	2b03      	cmp	r3, #3
 8009164:	d02c      	beq.n	80091c0 <__gethex+0x318>
 8009166:	2b01      	cmp	r3, #1
 8009168:	d115      	bne.n	8009196 <__gethex+0x2ee>
 800916a:	42ae      	cmp	r6, r5
 800916c:	d113      	bne.n	8009196 <__gethex+0x2ee>
 800916e:	2e01      	cmp	r6, #1
 8009170:	d10b      	bne.n	800918a <__gethex+0x2e2>
 8009172:	9a04      	ldr	r2, [sp, #16]
 8009174:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009178:	6013      	str	r3, [r2, #0]
 800917a:	2301      	movs	r3, #1
 800917c:	6123      	str	r3, [r4, #16]
 800917e:	f8c9 3000 	str.w	r3, [r9]
 8009182:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009184:	2762      	movs	r7, #98	; 0x62
 8009186:	601c      	str	r4, [r3, #0]
 8009188:	e723      	b.n	8008fd2 <__gethex+0x12a>
 800918a:	1e71      	subs	r1, r6, #1
 800918c:	4620      	mov	r0, r4
 800918e:	f000 fec2 	bl	8009f16 <__any_on>
 8009192:	2800      	cmp	r0, #0
 8009194:	d1ed      	bne.n	8009172 <__gethex+0x2ca>
 8009196:	ee18 0a10 	vmov	r0, s16
 800919a:	4621      	mov	r1, r4
 800919c:	f000 fa60 	bl	8009660 <_Bfree>
 80091a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80091a2:	2300      	movs	r3, #0
 80091a4:	6013      	str	r3, [r2, #0]
 80091a6:	2750      	movs	r7, #80	; 0x50
 80091a8:	e713      	b.n	8008fd2 <__gethex+0x12a>
 80091aa:	bf00      	nop
 80091ac:	0800b11c 	.word	0x0800b11c
 80091b0:	0800b03c 	.word	0x0800b03c
 80091b4:	0800b0b0 	.word	0x0800b0b0
 80091b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1eb      	bne.n	8009196 <__gethex+0x2ee>
 80091be:	e7d8      	b.n	8009172 <__gethex+0x2ca>
 80091c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1d5      	bne.n	8009172 <__gethex+0x2ca>
 80091c6:	e7e6      	b.n	8009196 <__gethex+0x2ee>
 80091c8:	1e6f      	subs	r7, r5, #1
 80091ca:	f1ba 0f00 	cmp.w	sl, #0
 80091ce:	d131      	bne.n	8009234 <__gethex+0x38c>
 80091d0:	b127      	cbz	r7, 80091dc <__gethex+0x334>
 80091d2:	4639      	mov	r1, r7
 80091d4:	4620      	mov	r0, r4
 80091d6:	f000 fe9e 	bl	8009f16 <__any_on>
 80091da:	4682      	mov	sl, r0
 80091dc:	117b      	asrs	r3, r7, #5
 80091de:	2101      	movs	r1, #1
 80091e0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80091e4:	f007 071f 	and.w	r7, r7, #31
 80091e8:	fa01 f707 	lsl.w	r7, r1, r7
 80091ec:	421f      	tst	r7, r3
 80091ee:	4629      	mov	r1, r5
 80091f0:	4620      	mov	r0, r4
 80091f2:	bf18      	it	ne
 80091f4:	f04a 0a02 	orrne.w	sl, sl, #2
 80091f8:	1b76      	subs	r6, r6, r5
 80091fa:	f7ff fdee 	bl	8008dda <rshift>
 80091fe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009202:	2702      	movs	r7, #2
 8009204:	f1ba 0f00 	cmp.w	sl, #0
 8009208:	d048      	beq.n	800929c <__gethex+0x3f4>
 800920a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800920e:	2b02      	cmp	r3, #2
 8009210:	d015      	beq.n	800923e <__gethex+0x396>
 8009212:	2b03      	cmp	r3, #3
 8009214:	d017      	beq.n	8009246 <__gethex+0x39e>
 8009216:	2b01      	cmp	r3, #1
 8009218:	d109      	bne.n	800922e <__gethex+0x386>
 800921a:	f01a 0f02 	tst.w	sl, #2
 800921e:	d006      	beq.n	800922e <__gethex+0x386>
 8009220:	f8d9 0000 	ldr.w	r0, [r9]
 8009224:	ea4a 0a00 	orr.w	sl, sl, r0
 8009228:	f01a 0f01 	tst.w	sl, #1
 800922c:	d10e      	bne.n	800924c <__gethex+0x3a4>
 800922e:	f047 0710 	orr.w	r7, r7, #16
 8009232:	e033      	b.n	800929c <__gethex+0x3f4>
 8009234:	f04f 0a01 	mov.w	sl, #1
 8009238:	e7d0      	b.n	80091dc <__gethex+0x334>
 800923a:	2701      	movs	r7, #1
 800923c:	e7e2      	b.n	8009204 <__gethex+0x35c>
 800923e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009240:	f1c3 0301 	rsb	r3, r3, #1
 8009244:	9315      	str	r3, [sp, #84]	; 0x54
 8009246:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009248:	2b00      	cmp	r3, #0
 800924a:	d0f0      	beq.n	800922e <__gethex+0x386>
 800924c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009250:	f104 0314 	add.w	r3, r4, #20
 8009254:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009258:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800925c:	f04f 0c00 	mov.w	ip, #0
 8009260:	4618      	mov	r0, r3
 8009262:	f853 2b04 	ldr.w	r2, [r3], #4
 8009266:	f1b2 3fff 	cmp.w	r2, #4294967295
 800926a:	d01c      	beq.n	80092a6 <__gethex+0x3fe>
 800926c:	3201      	adds	r2, #1
 800926e:	6002      	str	r2, [r0, #0]
 8009270:	2f02      	cmp	r7, #2
 8009272:	f104 0314 	add.w	r3, r4, #20
 8009276:	d13f      	bne.n	80092f8 <__gethex+0x450>
 8009278:	f8d8 2000 	ldr.w	r2, [r8]
 800927c:	3a01      	subs	r2, #1
 800927e:	42b2      	cmp	r2, r6
 8009280:	d10a      	bne.n	8009298 <__gethex+0x3f0>
 8009282:	1171      	asrs	r1, r6, #5
 8009284:	2201      	movs	r2, #1
 8009286:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800928a:	f006 061f 	and.w	r6, r6, #31
 800928e:	fa02 f606 	lsl.w	r6, r2, r6
 8009292:	421e      	tst	r6, r3
 8009294:	bf18      	it	ne
 8009296:	4617      	movne	r7, r2
 8009298:	f047 0720 	orr.w	r7, r7, #32
 800929c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800929e:	601c      	str	r4, [r3, #0]
 80092a0:	9b04      	ldr	r3, [sp, #16]
 80092a2:	601d      	str	r5, [r3, #0]
 80092a4:	e695      	b.n	8008fd2 <__gethex+0x12a>
 80092a6:	4299      	cmp	r1, r3
 80092a8:	f843 cc04 	str.w	ip, [r3, #-4]
 80092ac:	d8d8      	bhi.n	8009260 <__gethex+0x3b8>
 80092ae:	68a3      	ldr	r3, [r4, #8]
 80092b0:	459b      	cmp	fp, r3
 80092b2:	db19      	blt.n	80092e8 <__gethex+0x440>
 80092b4:	6861      	ldr	r1, [r4, #4]
 80092b6:	ee18 0a10 	vmov	r0, s16
 80092ba:	3101      	adds	r1, #1
 80092bc:	f000 f990 	bl	80095e0 <_Balloc>
 80092c0:	4681      	mov	r9, r0
 80092c2:	b918      	cbnz	r0, 80092cc <__gethex+0x424>
 80092c4:	4b1a      	ldr	r3, [pc, #104]	; (8009330 <__gethex+0x488>)
 80092c6:	4602      	mov	r2, r0
 80092c8:	2184      	movs	r1, #132	; 0x84
 80092ca:	e6a8      	b.n	800901e <__gethex+0x176>
 80092cc:	6922      	ldr	r2, [r4, #16]
 80092ce:	3202      	adds	r2, #2
 80092d0:	f104 010c 	add.w	r1, r4, #12
 80092d4:	0092      	lsls	r2, r2, #2
 80092d6:	300c      	adds	r0, #12
 80092d8:	f000 f974 	bl	80095c4 <memcpy>
 80092dc:	4621      	mov	r1, r4
 80092de:	ee18 0a10 	vmov	r0, s16
 80092e2:	f000 f9bd 	bl	8009660 <_Bfree>
 80092e6:	464c      	mov	r4, r9
 80092e8:	6923      	ldr	r3, [r4, #16]
 80092ea:	1c5a      	adds	r2, r3, #1
 80092ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80092f0:	6122      	str	r2, [r4, #16]
 80092f2:	2201      	movs	r2, #1
 80092f4:	615a      	str	r2, [r3, #20]
 80092f6:	e7bb      	b.n	8009270 <__gethex+0x3c8>
 80092f8:	6922      	ldr	r2, [r4, #16]
 80092fa:	455a      	cmp	r2, fp
 80092fc:	dd0b      	ble.n	8009316 <__gethex+0x46e>
 80092fe:	2101      	movs	r1, #1
 8009300:	4620      	mov	r0, r4
 8009302:	f7ff fd6a 	bl	8008dda <rshift>
 8009306:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800930a:	3501      	adds	r5, #1
 800930c:	42ab      	cmp	r3, r5
 800930e:	f6ff aed0 	blt.w	80090b2 <__gethex+0x20a>
 8009312:	2701      	movs	r7, #1
 8009314:	e7c0      	b.n	8009298 <__gethex+0x3f0>
 8009316:	f016 061f 	ands.w	r6, r6, #31
 800931a:	d0fa      	beq.n	8009312 <__gethex+0x46a>
 800931c:	449a      	add	sl, r3
 800931e:	f1c6 0620 	rsb	r6, r6, #32
 8009322:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009326:	f000 fa51 	bl	80097cc <__hi0bits>
 800932a:	42b0      	cmp	r0, r6
 800932c:	dbe7      	blt.n	80092fe <__gethex+0x456>
 800932e:	e7f0      	b.n	8009312 <__gethex+0x46a>
 8009330:	0800b03c 	.word	0x0800b03c

08009334 <L_shift>:
 8009334:	f1c2 0208 	rsb	r2, r2, #8
 8009338:	0092      	lsls	r2, r2, #2
 800933a:	b570      	push	{r4, r5, r6, lr}
 800933c:	f1c2 0620 	rsb	r6, r2, #32
 8009340:	6843      	ldr	r3, [r0, #4]
 8009342:	6804      	ldr	r4, [r0, #0]
 8009344:	fa03 f506 	lsl.w	r5, r3, r6
 8009348:	432c      	orrs	r4, r5
 800934a:	40d3      	lsrs	r3, r2
 800934c:	6004      	str	r4, [r0, #0]
 800934e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009352:	4288      	cmp	r0, r1
 8009354:	d3f4      	bcc.n	8009340 <L_shift+0xc>
 8009356:	bd70      	pop	{r4, r5, r6, pc}

08009358 <__match>:
 8009358:	b530      	push	{r4, r5, lr}
 800935a:	6803      	ldr	r3, [r0, #0]
 800935c:	3301      	adds	r3, #1
 800935e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009362:	b914      	cbnz	r4, 800936a <__match+0x12>
 8009364:	6003      	str	r3, [r0, #0]
 8009366:	2001      	movs	r0, #1
 8009368:	bd30      	pop	{r4, r5, pc}
 800936a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800936e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009372:	2d19      	cmp	r5, #25
 8009374:	bf98      	it	ls
 8009376:	3220      	addls	r2, #32
 8009378:	42a2      	cmp	r2, r4
 800937a:	d0f0      	beq.n	800935e <__match+0x6>
 800937c:	2000      	movs	r0, #0
 800937e:	e7f3      	b.n	8009368 <__match+0x10>

08009380 <__hexnan>:
 8009380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009384:	680b      	ldr	r3, [r1, #0]
 8009386:	6801      	ldr	r1, [r0, #0]
 8009388:	115e      	asrs	r6, r3, #5
 800938a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800938e:	f013 031f 	ands.w	r3, r3, #31
 8009392:	b087      	sub	sp, #28
 8009394:	bf18      	it	ne
 8009396:	3604      	addne	r6, #4
 8009398:	2500      	movs	r5, #0
 800939a:	1f37      	subs	r7, r6, #4
 800939c:	4682      	mov	sl, r0
 800939e:	4690      	mov	r8, r2
 80093a0:	9301      	str	r3, [sp, #4]
 80093a2:	f846 5c04 	str.w	r5, [r6, #-4]
 80093a6:	46b9      	mov	r9, r7
 80093a8:	463c      	mov	r4, r7
 80093aa:	9502      	str	r5, [sp, #8]
 80093ac:	46ab      	mov	fp, r5
 80093ae:	784a      	ldrb	r2, [r1, #1]
 80093b0:	1c4b      	adds	r3, r1, #1
 80093b2:	9303      	str	r3, [sp, #12]
 80093b4:	b342      	cbz	r2, 8009408 <__hexnan+0x88>
 80093b6:	4610      	mov	r0, r2
 80093b8:	9105      	str	r1, [sp, #20]
 80093ba:	9204      	str	r2, [sp, #16]
 80093bc:	f7ff fd5f 	bl	8008e7e <__hexdig_fun>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	d14f      	bne.n	8009464 <__hexnan+0xe4>
 80093c4:	9a04      	ldr	r2, [sp, #16]
 80093c6:	9905      	ldr	r1, [sp, #20]
 80093c8:	2a20      	cmp	r2, #32
 80093ca:	d818      	bhi.n	80093fe <__hexnan+0x7e>
 80093cc:	9b02      	ldr	r3, [sp, #8]
 80093ce:	459b      	cmp	fp, r3
 80093d0:	dd13      	ble.n	80093fa <__hexnan+0x7a>
 80093d2:	454c      	cmp	r4, r9
 80093d4:	d206      	bcs.n	80093e4 <__hexnan+0x64>
 80093d6:	2d07      	cmp	r5, #7
 80093d8:	dc04      	bgt.n	80093e4 <__hexnan+0x64>
 80093da:	462a      	mov	r2, r5
 80093dc:	4649      	mov	r1, r9
 80093de:	4620      	mov	r0, r4
 80093e0:	f7ff ffa8 	bl	8009334 <L_shift>
 80093e4:	4544      	cmp	r4, r8
 80093e6:	d950      	bls.n	800948a <__hexnan+0x10a>
 80093e8:	2300      	movs	r3, #0
 80093ea:	f1a4 0904 	sub.w	r9, r4, #4
 80093ee:	f844 3c04 	str.w	r3, [r4, #-4]
 80093f2:	f8cd b008 	str.w	fp, [sp, #8]
 80093f6:	464c      	mov	r4, r9
 80093f8:	461d      	mov	r5, r3
 80093fa:	9903      	ldr	r1, [sp, #12]
 80093fc:	e7d7      	b.n	80093ae <__hexnan+0x2e>
 80093fe:	2a29      	cmp	r2, #41	; 0x29
 8009400:	d156      	bne.n	80094b0 <__hexnan+0x130>
 8009402:	3102      	adds	r1, #2
 8009404:	f8ca 1000 	str.w	r1, [sl]
 8009408:	f1bb 0f00 	cmp.w	fp, #0
 800940c:	d050      	beq.n	80094b0 <__hexnan+0x130>
 800940e:	454c      	cmp	r4, r9
 8009410:	d206      	bcs.n	8009420 <__hexnan+0xa0>
 8009412:	2d07      	cmp	r5, #7
 8009414:	dc04      	bgt.n	8009420 <__hexnan+0xa0>
 8009416:	462a      	mov	r2, r5
 8009418:	4649      	mov	r1, r9
 800941a:	4620      	mov	r0, r4
 800941c:	f7ff ff8a 	bl	8009334 <L_shift>
 8009420:	4544      	cmp	r4, r8
 8009422:	d934      	bls.n	800948e <__hexnan+0x10e>
 8009424:	f1a8 0204 	sub.w	r2, r8, #4
 8009428:	4623      	mov	r3, r4
 800942a:	f853 1b04 	ldr.w	r1, [r3], #4
 800942e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009432:	429f      	cmp	r7, r3
 8009434:	d2f9      	bcs.n	800942a <__hexnan+0xaa>
 8009436:	1b3b      	subs	r3, r7, r4
 8009438:	f023 0303 	bic.w	r3, r3, #3
 800943c:	3304      	adds	r3, #4
 800943e:	3401      	adds	r4, #1
 8009440:	3e03      	subs	r6, #3
 8009442:	42b4      	cmp	r4, r6
 8009444:	bf88      	it	hi
 8009446:	2304      	movhi	r3, #4
 8009448:	4443      	add	r3, r8
 800944a:	2200      	movs	r2, #0
 800944c:	f843 2b04 	str.w	r2, [r3], #4
 8009450:	429f      	cmp	r7, r3
 8009452:	d2fb      	bcs.n	800944c <__hexnan+0xcc>
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	b91b      	cbnz	r3, 8009460 <__hexnan+0xe0>
 8009458:	4547      	cmp	r7, r8
 800945a:	d127      	bne.n	80094ac <__hexnan+0x12c>
 800945c:	2301      	movs	r3, #1
 800945e:	603b      	str	r3, [r7, #0]
 8009460:	2005      	movs	r0, #5
 8009462:	e026      	b.n	80094b2 <__hexnan+0x132>
 8009464:	3501      	adds	r5, #1
 8009466:	2d08      	cmp	r5, #8
 8009468:	f10b 0b01 	add.w	fp, fp, #1
 800946c:	dd06      	ble.n	800947c <__hexnan+0xfc>
 800946e:	4544      	cmp	r4, r8
 8009470:	d9c3      	bls.n	80093fa <__hexnan+0x7a>
 8009472:	2300      	movs	r3, #0
 8009474:	f844 3c04 	str.w	r3, [r4, #-4]
 8009478:	2501      	movs	r5, #1
 800947a:	3c04      	subs	r4, #4
 800947c:	6822      	ldr	r2, [r4, #0]
 800947e:	f000 000f 	and.w	r0, r0, #15
 8009482:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009486:	6022      	str	r2, [r4, #0]
 8009488:	e7b7      	b.n	80093fa <__hexnan+0x7a>
 800948a:	2508      	movs	r5, #8
 800948c:	e7b5      	b.n	80093fa <__hexnan+0x7a>
 800948e:	9b01      	ldr	r3, [sp, #4]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d0df      	beq.n	8009454 <__hexnan+0xd4>
 8009494:	f04f 32ff 	mov.w	r2, #4294967295
 8009498:	f1c3 0320 	rsb	r3, r3, #32
 800949c:	fa22 f303 	lsr.w	r3, r2, r3
 80094a0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80094a4:	401a      	ands	r2, r3
 80094a6:	f846 2c04 	str.w	r2, [r6, #-4]
 80094aa:	e7d3      	b.n	8009454 <__hexnan+0xd4>
 80094ac:	3f04      	subs	r7, #4
 80094ae:	e7d1      	b.n	8009454 <__hexnan+0xd4>
 80094b0:	2004      	movs	r0, #4
 80094b2:	b007      	add	sp, #28
 80094b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080094b8 <_localeconv_r>:
 80094b8:	4800      	ldr	r0, [pc, #0]	; (80094bc <_localeconv_r+0x4>)
 80094ba:	4770      	bx	lr
 80094bc:	2000016c 	.word	0x2000016c

080094c0 <__retarget_lock_init_recursive>:
 80094c0:	4770      	bx	lr

080094c2 <__retarget_lock_acquire_recursive>:
 80094c2:	4770      	bx	lr

080094c4 <__retarget_lock_release_recursive>:
 80094c4:	4770      	bx	lr

080094c6 <__swhatbuf_r>:
 80094c6:	b570      	push	{r4, r5, r6, lr}
 80094c8:	460e      	mov	r6, r1
 80094ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ce:	2900      	cmp	r1, #0
 80094d0:	b096      	sub	sp, #88	; 0x58
 80094d2:	4614      	mov	r4, r2
 80094d4:	461d      	mov	r5, r3
 80094d6:	da07      	bge.n	80094e8 <__swhatbuf_r+0x22>
 80094d8:	2300      	movs	r3, #0
 80094da:	602b      	str	r3, [r5, #0]
 80094dc:	89b3      	ldrh	r3, [r6, #12]
 80094de:	061a      	lsls	r2, r3, #24
 80094e0:	d410      	bmi.n	8009504 <__swhatbuf_r+0x3e>
 80094e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094e6:	e00e      	b.n	8009506 <__swhatbuf_r+0x40>
 80094e8:	466a      	mov	r2, sp
 80094ea:	f001 f9b9 	bl	800a860 <_fstat_r>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	dbf2      	blt.n	80094d8 <__swhatbuf_r+0x12>
 80094f2:	9a01      	ldr	r2, [sp, #4]
 80094f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094fc:	425a      	negs	r2, r3
 80094fe:	415a      	adcs	r2, r3
 8009500:	602a      	str	r2, [r5, #0]
 8009502:	e7ee      	b.n	80094e2 <__swhatbuf_r+0x1c>
 8009504:	2340      	movs	r3, #64	; 0x40
 8009506:	2000      	movs	r0, #0
 8009508:	6023      	str	r3, [r4, #0]
 800950a:	b016      	add	sp, #88	; 0x58
 800950c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009510 <__smakebuf_r>:
 8009510:	898b      	ldrh	r3, [r1, #12]
 8009512:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009514:	079d      	lsls	r5, r3, #30
 8009516:	4606      	mov	r6, r0
 8009518:	460c      	mov	r4, r1
 800951a:	d507      	bpl.n	800952c <__smakebuf_r+0x1c>
 800951c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009520:	6023      	str	r3, [r4, #0]
 8009522:	6123      	str	r3, [r4, #16]
 8009524:	2301      	movs	r3, #1
 8009526:	6163      	str	r3, [r4, #20]
 8009528:	b002      	add	sp, #8
 800952a:	bd70      	pop	{r4, r5, r6, pc}
 800952c:	ab01      	add	r3, sp, #4
 800952e:	466a      	mov	r2, sp
 8009530:	f7ff ffc9 	bl	80094c6 <__swhatbuf_r>
 8009534:	9900      	ldr	r1, [sp, #0]
 8009536:	4605      	mov	r5, r0
 8009538:	4630      	mov	r0, r6
 800953a:	f000 fd6d 	bl	800a018 <_malloc_r>
 800953e:	b948      	cbnz	r0, 8009554 <__smakebuf_r+0x44>
 8009540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009544:	059a      	lsls	r2, r3, #22
 8009546:	d4ef      	bmi.n	8009528 <__smakebuf_r+0x18>
 8009548:	f023 0303 	bic.w	r3, r3, #3
 800954c:	f043 0302 	orr.w	r3, r3, #2
 8009550:	81a3      	strh	r3, [r4, #12]
 8009552:	e7e3      	b.n	800951c <__smakebuf_r+0xc>
 8009554:	4b0d      	ldr	r3, [pc, #52]	; (800958c <__smakebuf_r+0x7c>)
 8009556:	62b3      	str	r3, [r6, #40]	; 0x28
 8009558:	89a3      	ldrh	r3, [r4, #12]
 800955a:	6020      	str	r0, [r4, #0]
 800955c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009560:	81a3      	strh	r3, [r4, #12]
 8009562:	9b00      	ldr	r3, [sp, #0]
 8009564:	6163      	str	r3, [r4, #20]
 8009566:	9b01      	ldr	r3, [sp, #4]
 8009568:	6120      	str	r0, [r4, #16]
 800956a:	b15b      	cbz	r3, 8009584 <__smakebuf_r+0x74>
 800956c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009570:	4630      	mov	r0, r6
 8009572:	f001 f987 	bl	800a884 <_isatty_r>
 8009576:	b128      	cbz	r0, 8009584 <__smakebuf_r+0x74>
 8009578:	89a3      	ldrh	r3, [r4, #12]
 800957a:	f023 0303 	bic.w	r3, r3, #3
 800957e:	f043 0301 	orr.w	r3, r3, #1
 8009582:	81a3      	strh	r3, [r4, #12]
 8009584:	89a0      	ldrh	r0, [r4, #12]
 8009586:	4305      	orrs	r5, r0
 8009588:	81a5      	strh	r5, [r4, #12]
 800958a:	e7cd      	b.n	8009528 <__smakebuf_r+0x18>
 800958c:	08008c39 	.word	0x08008c39

08009590 <malloc>:
 8009590:	4b02      	ldr	r3, [pc, #8]	; (800959c <malloc+0xc>)
 8009592:	4601      	mov	r1, r0
 8009594:	6818      	ldr	r0, [r3, #0]
 8009596:	f000 bd3f 	b.w	800a018 <_malloc_r>
 800959a:	bf00      	nop
 800959c:	20000014 	.word	0x20000014

080095a0 <__ascii_mbtowc>:
 80095a0:	b082      	sub	sp, #8
 80095a2:	b901      	cbnz	r1, 80095a6 <__ascii_mbtowc+0x6>
 80095a4:	a901      	add	r1, sp, #4
 80095a6:	b142      	cbz	r2, 80095ba <__ascii_mbtowc+0x1a>
 80095a8:	b14b      	cbz	r3, 80095be <__ascii_mbtowc+0x1e>
 80095aa:	7813      	ldrb	r3, [r2, #0]
 80095ac:	600b      	str	r3, [r1, #0]
 80095ae:	7812      	ldrb	r2, [r2, #0]
 80095b0:	1e10      	subs	r0, r2, #0
 80095b2:	bf18      	it	ne
 80095b4:	2001      	movne	r0, #1
 80095b6:	b002      	add	sp, #8
 80095b8:	4770      	bx	lr
 80095ba:	4610      	mov	r0, r2
 80095bc:	e7fb      	b.n	80095b6 <__ascii_mbtowc+0x16>
 80095be:	f06f 0001 	mvn.w	r0, #1
 80095c2:	e7f8      	b.n	80095b6 <__ascii_mbtowc+0x16>

080095c4 <memcpy>:
 80095c4:	440a      	add	r2, r1
 80095c6:	4291      	cmp	r1, r2
 80095c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80095cc:	d100      	bne.n	80095d0 <memcpy+0xc>
 80095ce:	4770      	bx	lr
 80095d0:	b510      	push	{r4, lr}
 80095d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095da:	4291      	cmp	r1, r2
 80095dc:	d1f9      	bne.n	80095d2 <memcpy+0xe>
 80095de:	bd10      	pop	{r4, pc}

080095e0 <_Balloc>:
 80095e0:	b570      	push	{r4, r5, r6, lr}
 80095e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80095e4:	4604      	mov	r4, r0
 80095e6:	460d      	mov	r5, r1
 80095e8:	b976      	cbnz	r6, 8009608 <_Balloc+0x28>
 80095ea:	2010      	movs	r0, #16
 80095ec:	f7ff ffd0 	bl	8009590 <malloc>
 80095f0:	4602      	mov	r2, r0
 80095f2:	6260      	str	r0, [r4, #36]	; 0x24
 80095f4:	b920      	cbnz	r0, 8009600 <_Balloc+0x20>
 80095f6:	4b18      	ldr	r3, [pc, #96]	; (8009658 <_Balloc+0x78>)
 80095f8:	4818      	ldr	r0, [pc, #96]	; (800965c <_Balloc+0x7c>)
 80095fa:	2166      	movs	r1, #102	; 0x66
 80095fc:	f001 f8f0 	bl	800a7e0 <__assert_func>
 8009600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009604:	6006      	str	r6, [r0, #0]
 8009606:	60c6      	str	r6, [r0, #12]
 8009608:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800960a:	68f3      	ldr	r3, [r6, #12]
 800960c:	b183      	cbz	r3, 8009630 <_Balloc+0x50>
 800960e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009610:	68db      	ldr	r3, [r3, #12]
 8009612:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009616:	b9b8      	cbnz	r0, 8009648 <_Balloc+0x68>
 8009618:	2101      	movs	r1, #1
 800961a:	fa01 f605 	lsl.w	r6, r1, r5
 800961e:	1d72      	adds	r2, r6, #5
 8009620:	0092      	lsls	r2, r2, #2
 8009622:	4620      	mov	r0, r4
 8009624:	f000 fc98 	bl	8009f58 <_calloc_r>
 8009628:	b160      	cbz	r0, 8009644 <_Balloc+0x64>
 800962a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800962e:	e00e      	b.n	800964e <_Balloc+0x6e>
 8009630:	2221      	movs	r2, #33	; 0x21
 8009632:	2104      	movs	r1, #4
 8009634:	4620      	mov	r0, r4
 8009636:	f000 fc8f 	bl	8009f58 <_calloc_r>
 800963a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800963c:	60f0      	str	r0, [r6, #12]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1e4      	bne.n	800960e <_Balloc+0x2e>
 8009644:	2000      	movs	r0, #0
 8009646:	bd70      	pop	{r4, r5, r6, pc}
 8009648:	6802      	ldr	r2, [r0, #0]
 800964a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800964e:	2300      	movs	r3, #0
 8009650:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009654:	e7f7      	b.n	8009646 <_Balloc+0x66>
 8009656:	bf00      	nop
 8009658:	0800afc6 	.word	0x0800afc6
 800965c:	0800b130 	.word	0x0800b130

08009660 <_Bfree>:
 8009660:	b570      	push	{r4, r5, r6, lr}
 8009662:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009664:	4605      	mov	r5, r0
 8009666:	460c      	mov	r4, r1
 8009668:	b976      	cbnz	r6, 8009688 <_Bfree+0x28>
 800966a:	2010      	movs	r0, #16
 800966c:	f7ff ff90 	bl	8009590 <malloc>
 8009670:	4602      	mov	r2, r0
 8009672:	6268      	str	r0, [r5, #36]	; 0x24
 8009674:	b920      	cbnz	r0, 8009680 <_Bfree+0x20>
 8009676:	4b09      	ldr	r3, [pc, #36]	; (800969c <_Bfree+0x3c>)
 8009678:	4809      	ldr	r0, [pc, #36]	; (80096a0 <_Bfree+0x40>)
 800967a:	218a      	movs	r1, #138	; 0x8a
 800967c:	f001 f8b0 	bl	800a7e0 <__assert_func>
 8009680:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009684:	6006      	str	r6, [r0, #0]
 8009686:	60c6      	str	r6, [r0, #12]
 8009688:	b13c      	cbz	r4, 800969a <_Bfree+0x3a>
 800968a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800968c:	6862      	ldr	r2, [r4, #4]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009694:	6021      	str	r1, [r4, #0]
 8009696:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800969a:	bd70      	pop	{r4, r5, r6, pc}
 800969c:	0800afc6 	.word	0x0800afc6
 80096a0:	0800b130 	.word	0x0800b130

080096a4 <__multadd>:
 80096a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a8:	690e      	ldr	r6, [r1, #16]
 80096aa:	4607      	mov	r7, r0
 80096ac:	4698      	mov	r8, r3
 80096ae:	460c      	mov	r4, r1
 80096b0:	f101 0014 	add.w	r0, r1, #20
 80096b4:	2300      	movs	r3, #0
 80096b6:	6805      	ldr	r5, [r0, #0]
 80096b8:	b2a9      	uxth	r1, r5
 80096ba:	fb02 8101 	mla	r1, r2, r1, r8
 80096be:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80096c2:	0c2d      	lsrs	r5, r5, #16
 80096c4:	fb02 c505 	mla	r5, r2, r5, ip
 80096c8:	b289      	uxth	r1, r1
 80096ca:	3301      	adds	r3, #1
 80096cc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80096d0:	429e      	cmp	r6, r3
 80096d2:	f840 1b04 	str.w	r1, [r0], #4
 80096d6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80096da:	dcec      	bgt.n	80096b6 <__multadd+0x12>
 80096dc:	f1b8 0f00 	cmp.w	r8, #0
 80096e0:	d022      	beq.n	8009728 <__multadd+0x84>
 80096e2:	68a3      	ldr	r3, [r4, #8]
 80096e4:	42b3      	cmp	r3, r6
 80096e6:	dc19      	bgt.n	800971c <__multadd+0x78>
 80096e8:	6861      	ldr	r1, [r4, #4]
 80096ea:	4638      	mov	r0, r7
 80096ec:	3101      	adds	r1, #1
 80096ee:	f7ff ff77 	bl	80095e0 <_Balloc>
 80096f2:	4605      	mov	r5, r0
 80096f4:	b928      	cbnz	r0, 8009702 <__multadd+0x5e>
 80096f6:	4602      	mov	r2, r0
 80096f8:	4b0d      	ldr	r3, [pc, #52]	; (8009730 <__multadd+0x8c>)
 80096fa:	480e      	ldr	r0, [pc, #56]	; (8009734 <__multadd+0x90>)
 80096fc:	21b5      	movs	r1, #181	; 0xb5
 80096fe:	f001 f86f 	bl	800a7e0 <__assert_func>
 8009702:	6922      	ldr	r2, [r4, #16]
 8009704:	3202      	adds	r2, #2
 8009706:	f104 010c 	add.w	r1, r4, #12
 800970a:	0092      	lsls	r2, r2, #2
 800970c:	300c      	adds	r0, #12
 800970e:	f7ff ff59 	bl	80095c4 <memcpy>
 8009712:	4621      	mov	r1, r4
 8009714:	4638      	mov	r0, r7
 8009716:	f7ff ffa3 	bl	8009660 <_Bfree>
 800971a:	462c      	mov	r4, r5
 800971c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009720:	3601      	adds	r6, #1
 8009722:	f8c3 8014 	str.w	r8, [r3, #20]
 8009726:	6126      	str	r6, [r4, #16]
 8009728:	4620      	mov	r0, r4
 800972a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800972e:	bf00      	nop
 8009730:	0800b03c 	.word	0x0800b03c
 8009734:	0800b130 	.word	0x0800b130

08009738 <__s2b>:
 8009738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800973c:	460c      	mov	r4, r1
 800973e:	4615      	mov	r5, r2
 8009740:	461f      	mov	r7, r3
 8009742:	2209      	movs	r2, #9
 8009744:	3308      	adds	r3, #8
 8009746:	4606      	mov	r6, r0
 8009748:	fb93 f3f2 	sdiv	r3, r3, r2
 800974c:	2100      	movs	r1, #0
 800974e:	2201      	movs	r2, #1
 8009750:	429a      	cmp	r2, r3
 8009752:	db09      	blt.n	8009768 <__s2b+0x30>
 8009754:	4630      	mov	r0, r6
 8009756:	f7ff ff43 	bl	80095e0 <_Balloc>
 800975a:	b940      	cbnz	r0, 800976e <__s2b+0x36>
 800975c:	4602      	mov	r2, r0
 800975e:	4b19      	ldr	r3, [pc, #100]	; (80097c4 <__s2b+0x8c>)
 8009760:	4819      	ldr	r0, [pc, #100]	; (80097c8 <__s2b+0x90>)
 8009762:	21ce      	movs	r1, #206	; 0xce
 8009764:	f001 f83c 	bl	800a7e0 <__assert_func>
 8009768:	0052      	lsls	r2, r2, #1
 800976a:	3101      	adds	r1, #1
 800976c:	e7f0      	b.n	8009750 <__s2b+0x18>
 800976e:	9b08      	ldr	r3, [sp, #32]
 8009770:	6143      	str	r3, [r0, #20]
 8009772:	2d09      	cmp	r5, #9
 8009774:	f04f 0301 	mov.w	r3, #1
 8009778:	6103      	str	r3, [r0, #16]
 800977a:	dd16      	ble.n	80097aa <__s2b+0x72>
 800977c:	f104 0909 	add.w	r9, r4, #9
 8009780:	46c8      	mov	r8, r9
 8009782:	442c      	add	r4, r5
 8009784:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009788:	4601      	mov	r1, r0
 800978a:	3b30      	subs	r3, #48	; 0x30
 800978c:	220a      	movs	r2, #10
 800978e:	4630      	mov	r0, r6
 8009790:	f7ff ff88 	bl	80096a4 <__multadd>
 8009794:	45a0      	cmp	r8, r4
 8009796:	d1f5      	bne.n	8009784 <__s2b+0x4c>
 8009798:	f1a5 0408 	sub.w	r4, r5, #8
 800979c:	444c      	add	r4, r9
 800979e:	1b2d      	subs	r5, r5, r4
 80097a0:	1963      	adds	r3, r4, r5
 80097a2:	42bb      	cmp	r3, r7
 80097a4:	db04      	blt.n	80097b0 <__s2b+0x78>
 80097a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097aa:	340a      	adds	r4, #10
 80097ac:	2509      	movs	r5, #9
 80097ae:	e7f6      	b.n	800979e <__s2b+0x66>
 80097b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80097b4:	4601      	mov	r1, r0
 80097b6:	3b30      	subs	r3, #48	; 0x30
 80097b8:	220a      	movs	r2, #10
 80097ba:	4630      	mov	r0, r6
 80097bc:	f7ff ff72 	bl	80096a4 <__multadd>
 80097c0:	e7ee      	b.n	80097a0 <__s2b+0x68>
 80097c2:	bf00      	nop
 80097c4:	0800b03c 	.word	0x0800b03c
 80097c8:	0800b130 	.word	0x0800b130

080097cc <__hi0bits>:
 80097cc:	0c03      	lsrs	r3, r0, #16
 80097ce:	041b      	lsls	r3, r3, #16
 80097d0:	b9d3      	cbnz	r3, 8009808 <__hi0bits+0x3c>
 80097d2:	0400      	lsls	r0, r0, #16
 80097d4:	2310      	movs	r3, #16
 80097d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80097da:	bf04      	itt	eq
 80097dc:	0200      	lsleq	r0, r0, #8
 80097de:	3308      	addeq	r3, #8
 80097e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80097e4:	bf04      	itt	eq
 80097e6:	0100      	lsleq	r0, r0, #4
 80097e8:	3304      	addeq	r3, #4
 80097ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80097ee:	bf04      	itt	eq
 80097f0:	0080      	lsleq	r0, r0, #2
 80097f2:	3302      	addeq	r3, #2
 80097f4:	2800      	cmp	r0, #0
 80097f6:	db05      	blt.n	8009804 <__hi0bits+0x38>
 80097f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80097fc:	f103 0301 	add.w	r3, r3, #1
 8009800:	bf08      	it	eq
 8009802:	2320      	moveq	r3, #32
 8009804:	4618      	mov	r0, r3
 8009806:	4770      	bx	lr
 8009808:	2300      	movs	r3, #0
 800980a:	e7e4      	b.n	80097d6 <__hi0bits+0xa>

0800980c <__lo0bits>:
 800980c:	6803      	ldr	r3, [r0, #0]
 800980e:	f013 0207 	ands.w	r2, r3, #7
 8009812:	4601      	mov	r1, r0
 8009814:	d00b      	beq.n	800982e <__lo0bits+0x22>
 8009816:	07da      	lsls	r2, r3, #31
 8009818:	d424      	bmi.n	8009864 <__lo0bits+0x58>
 800981a:	0798      	lsls	r0, r3, #30
 800981c:	bf49      	itett	mi
 800981e:	085b      	lsrmi	r3, r3, #1
 8009820:	089b      	lsrpl	r3, r3, #2
 8009822:	2001      	movmi	r0, #1
 8009824:	600b      	strmi	r3, [r1, #0]
 8009826:	bf5c      	itt	pl
 8009828:	600b      	strpl	r3, [r1, #0]
 800982a:	2002      	movpl	r0, #2
 800982c:	4770      	bx	lr
 800982e:	b298      	uxth	r0, r3
 8009830:	b9b0      	cbnz	r0, 8009860 <__lo0bits+0x54>
 8009832:	0c1b      	lsrs	r3, r3, #16
 8009834:	2010      	movs	r0, #16
 8009836:	f013 0fff 	tst.w	r3, #255	; 0xff
 800983a:	bf04      	itt	eq
 800983c:	0a1b      	lsreq	r3, r3, #8
 800983e:	3008      	addeq	r0, #8
 8009840:	071a      	lsls	r2, r3, #28
 8009842:	bf04      	itt	eq
 8009844:	091b      	lsreq	r3, r3, #4
 8009846:	3004      	addeq	r0, #4
 8009848:	079a      	lsls	r2, r3, #30
 800984a:	bf04      	itt	eq
 800984c:	089b      	lsreq	r3, r3, #2
 800984e:	3002      	addeq	r0, #2
 8009850:	07da      	lsls	r2, r3, #31
 8009852:	d403      	bmi.n	800985c <__lo0bits+0x50>
 8009854:	085b      	lsrs	r3, r3, #1
 8009856:	f100 0001 	add.w	r0, r0, #1
 800985a:	d005      	beq.n	8009868 <__lo0bits+0x5c>
 800985c:	600b      	str	r3, [r1, #0]
 800985e:	4770      	bx	lr
 8009860:	4610      	mov	r0, r2
 8009862:	e7e8      	b.n	8009836 <__lo0bits+0x2a>
 8009864:	2000      	movs	r0, #0
 8009866:	4770      	bx	lr
 8009868:	2020      	movs	r0, #32
 800986a:	4770      	bx	lr

0800986c <__i2b>:
 800986c:	b510      	push	{r4, lr}
 800986e:	460c      	mov	r4, r1
 8009870:	2101      	movs	r1, #1
 8009872:	f7ff feb5 	bl	80095e0 <_Balloc>
 8009876:	4602      	mov	r2, r0
 8009878:	b928      	cbnz	r0, 8009886 <__i2b+0x1a>
 800987a:	4b05      	ldr	r3, [pc, #20]	; (8009890 <__i2b+0x24>)
 800987c:	4805      	ldr	r0, [pc, #20]	; (8009894 <__i2b+0x28>)
 800987e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009882:	f000 ffad 	bl	800a7e0 <__assert_func>
 8009886:	2301      	movs	r3, #1
 8009888:	6144      	str	r4, [r0, #20]
 800988a:	6103      	str	r3, [r0, #16]
 800988c:	bd10      	pop	{r4, pc}
 800988e:	bf00      	nop
 8009890:	0800b03c 	.word	0x0800b03c
 8009894:	0800b130 	.word	0x0800b130

08009898 <__multiply>:
 8009898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989c:	4614      	mov	r4, r2
 800989e:	690a      	ldr	r2, [r1, #16]
 80098a0:	6923      	ldr	r3, [r4, #16]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	bfb8      	it	lt
 80098a6:	460b      	movlt	r3, r1
 80098a8:	460d      	mov	r5, r1
 80098aa:	bfbc      	itt	lt
 80098ac:	4625      	movlt	r5, r4
 80098ae:	461c      	movlt	r4, r3
 80098b0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80098b4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80098b8:	68ab      	ldr	r3, [r5, #8]
 80098ba:	6869      	ldr	r1, [r5, #4]
 80098bc:	eb0a 0709 	add.w	r7, sl, r9
 80098c0:	42bb      	cmp	r3, r7
 80098c2:	b085      	sub	sp, #20
 80098c4:	bfb8      	it	lt
 80098c6:	3101      	addlt	r1, #1
 80098c8:	f7ff fe8a 	bl	80095e0 <_Balloc>
 80098cc:	b930      	cbnz	r0, 80098dc <__multiply+0x44>
 80098ce:	4602      	mov	r2, r0
 80098d0:	4b42      	ldr	r3, [pc, #264]	; (80099dc <__multiply+0x144>)
 80098d2:	4843      	ldr	r0, [pc, #268]	; (80099e0 <__multiply+0x148>)
 80098d4:	f240 115d 	movw	r1, #349	; 0x15d
 80098d8:	f000 ff82 	bl	800a7e0 <__assert_func>
 80098dc:	f100 0614 	add.w	r6, r0, #20
 80098e0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80098e4:	4633      	mov	r3, r6
 80098e6:	2200      	movs	r2, #0
 80098e8:	4543      	cmp	r3, r8
 80098ea:	d31e      	bcc.n	800992a <__multiply+0x92>
 80098ec:	f105 0c14 	add.w	ip, r5, #20
 80098f0:	f104 0314 	add.w	r3, r4, #20
 80098f4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80098f8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80098fc:	9202      	str	r2, [sp, #8]
 80098fe:	ebac 0205 	sub.w	r2, ip, r5
 8009902:	3a15      	subs	r2, #21
 8009904:	f022 0203 	bic.w	r2, r2, #3
 8009908:	3204      	adds	r2, #4
 800990a:	f105 0115 	add.w	r1, r5, #21
 800990e:	458c      	cmp	ip, r1
 8009910:	bf38      	it	cc
 8009912:	2204      	movcc	r2, #4
 8009914:	9201      	str	r2, [sp, #4]
 8009916:	9a02      	ldr	r2, [sp, #8]
 8009918:	9303      	str	r3, [sp, #12]
 800991a:	429a      	cmp	r2, r3
 800991c:	d808      	bhi.n	8009930 <__multiply+0x98>
 800991e:	2f00      	cmp	r7, #0
 8009920:	dc55      	bgt.n	80099ce <__multiply+0x136>
 8009922:	6107      	str	r7, [r0, #16]
 8009924:	b005      	add	sp, #20
 8009926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800992a:	f843 2b04 	str.w	r2, [r3], #4
 800992e:	e7db      	b.n	80098e8 <__multiply+0x50>
 8009930:	f8b3 a000 	ldrh.w	sl, [r3]
 8009934:	f1ba 0f00 	cmp.w	sl, #0
 8009938:	d020      	beq.n	800997c <__multiply+0xe4>
 800993a:	f105 0e14 	add.w	lr, r5, #20
 800993e:	46b1      	mov	r9, r6
 8009940:	2200      	movs	r2, #0
 8009942:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009946:	f8d9 b000 	ldr.w	fp, [r9]
 800994a:	b2a1      	uxth	r1, r4
 800994c:	fa1f fb8b 	uxth.w	fp, fp
 8009950:	fb0a b101 	mla	r1, sl, r1, fp
 8009954:	4411      	add	r1, r2
 8009956:	f8d9 2000 	ldr.w	r2, [r9]
 800995a:	0c24      	lsrs	r4, r4, #16
 800995c:	0c12      	lsrs	r2, r2, #16
 800995e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009962:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009966:	b289      	uxth	r1, r1
 8009968:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800996c:	45f4      	cmp	ip, lr
 800996e:	f849 1b04 	str.w	r1, [r9], #4
 8009972:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8009976:	d8e4      	bhi.n	8009942 <__multiply+0xaa>
 8009978:	9901      	ldr	r1, [sp, #4]
 800997a:	5072      	str	r2, [r6, r1]
 800997c:	9a03      	ldr	r2, [sp, #12]
 800997e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009982:	3304      	adds	r3, #4
 8009984:	f1b9 0f00 	cmp.w	r9, #0
 8009988:	d01f      	beq.n	80099ca <__multiply+0x132>
 800998a:	6834      	ldr	r4, [r6, #0]
 800998c:	f105 0114 	add.w	r1, r5, #20
 8009990:	46b6      	mov	lr, r6
 8009992:	f04f 0a00 	mov.w	sl, #0
 8009996:	880a      	ldrh	r2, [r1, #0]
 8009998:	f8be b002 	ldrh.w	fp, [lr, #2]
 800999c:	fb09 b202 	mla	r2, r9, r2, fp
 80099a0:	4492      	add	sl, r2
 80099a2:	b2a4      	uxth	r4, r4
 80099a4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80099a8:	f84e 4b04 	str.w	r4, [lr], #4
 80099ac:	f851 4b04 	ldr.w	r4, [r1], #4
 80099b0:	f8be 2000 	ldrh.w	r2, [lr]
 80099b4:	0c24      	lsrs	r4, r4, #16
 80099b6:	fb09 2404 	mla	r4, r9, r4, r2
 80099ba:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80099be:	458c      	cmp	ip, r1
 80099c0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80099c4:	d8e7      	bhi.n	8009996 <__multiply+0xfe>
 80099c6:	9a01      	ldr	r2, [sp, #4]
 80099c8:	50b4      	str	r4, [r6, r2]
 80099ca:	3604      	adds	r6, #4
 80099cc:	e7a3      	b.n	8009916 <__multiply+0x7e>
 80099ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1a5      	bne.n	8009922 <__multiply+0x8a>
 80099d6:	3f01      	subs	r7, #1
 80099d8:	e7a1      	b.n	800991e <__multiply+0x86>
 80099da:	bf00      	nop
 80099dc:	0800b03c 	.word	0x0800b03c
 80099e0:	0800b130 	.word	0x0800b130

080099e4 <__pow5mult>:
 80099e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099e8:	4615      	mov	r5, r2
 80099ea:	f012 0203 	ands.w	r2, r2, #3
 80099ee:	4606      	mov	r6, r0
 80099f0:	460f      	mov	r7, r1
 80099f2:	d007      	beq.n	8009a04 <__pow5mult+0x20>
 80099f4:	4c25      	ldr	r4, [pc, #148]	; (8009a8c <__pow5mult+0xa8>)
 80099f6:	3a01      	subs	r2, #1
 80099f8:	2300      	movs	r3, #0
 80099fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80099fe:	f7ff fe51 	bl	80096a4 <__multadd>
 8009a02:	4607      	mov	r7, r0
 8009a04:	10ad      	asrs	r5, r5, #2
 8009a06:	d03d      	beq.n	8009a84 <__pow5mult+0xa0>
 8009a08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a0a:	b97c      	cbnz	r4, 8009a2c <__pow5mult+0x48>
 8009a0c:	2010      	movs	r0, #16
 8009a0e:	f7ff fdbf 	bl	8009590 <malloc>
 8009a12:	4602      	mov	r2, r0
 8009a14:	6270      	str	r0, [r6, #36]	; 0x24
 8009a16:	b928      	cbnz	r0, 8009a24 <__pow5mult+0x40>
 8009a18:	4b1d      	ldr	r3, [pc, #116]	; (8009a90 <__pow5mult+0xac>)
 8009a1a:	481e      	ldr	r0, [pc, #120]	; (8009a94 <__pow5mult+0xb0>)
 8009a1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a20:	f000 fede 	bl	800a7e0 <__assert_func>
 8009a24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a28:	6004      	str	r4, [r0, #0]
 8009a2a:	60c4      	str	r4, [r0, #12]
 8009a2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a34:	b94c      	cbnz	r4, 8009a4a <__pow5mult+0x66>
 8009a36:	f240 2171 	movw	r1, #625	; 0x271
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	f7ff ff16 	bl	800986c <__i2b>
 8009a40:	2300      	movs	r3, #0
 8009a42:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a46:	4604      	mov	r4, r0
 8009a48:	6003      	str	r3, [r0, #0]
 8009a4a:	f04f 0900 	mov.w	r9, #0
 8009a4e:	07eb      	lsls	r3, r5, #31
 8009a50:	d50a      	bpl.n	8009a68 <__pow5mult+0x84>
 8009a52:	4639      	mov	r1, r7
 8009a54:	4622      	mov	r2, r4
 8009a56:	4630      	mov	r0, r6
 8009a58:	f7ff ff1e 	bl	8009898 <__multiply>
 8009a5c:	4639      	mov	r1, r7
 8009a5e:	4680      	mov	r8, r0
 8009a60:	4630      	mov	r0, r6
 8009a62:	f7ff fdfd 	bl	8009660 <_Bfree>
 8009a66:	4647      	mov	r7, r8
 8009a68:	106d      	asrs	r5, r5, #1
 8009a6a:	d00b      	beq.n	8009a84 <__pow5mult+0xa0>
 8009a6c:	6820      	ldr	r0, [r4, #0]
 8009a6e:	b938      	cbnz	r0, 8009a80 <__pow5mult+0x9c>
 8009a70:	4622      	mov	r2, r4
 8009a72:	4621      	mov	r1, r4
 8009a74:	4630      	mov	r0, r6
 8009a76:	f7ff ff0f 	bl	8009898 <__multiply>
 8009a7a:	6020      	str	r0, [r4, #0]
 8009a7c:	f8c0 9000 	str.w	r9, [r0]
 8009a80:	4604      	mov	r4, r0
 8009a82:	e7e4      	b.n	8009a4e <__pow5mult+0x6a>
 8009a84:	4638      	mov	r0, r7
 8009a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a8a:	bf00      	nop
 8009a8c:	0800b280 	.word	0x0800b280
 8009a90:	0800afc6 	.word	0x0800afc6
 8009a94:	0800b130 	.word	0x0800b130

08009a98 <__lshift>:
 8009a98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009a9c:	460c      	mov	r4, r1
 8009a9e:	6849      	ldr	r1, [r1, #4]
 8009aa0:	6923      	ldr	r3, [r4, #16]
 8009aa2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009aa6:	68a3      	ldr	r3, [r4, #8]
 8009aa8:	4607      	mov	r7, r0
 8009aaa:	4691      	mov	r9, r2
 8009aac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ab0:	f108 0601 	add.w	r6, r8, #1
 8009ab4:	42b3      	cmp	r3, r6
 8009ab6:	db0b      	blt.n	8009ad0 <__lshift+0x38>
 8009ab8:	4638      	mov	r0, r7
 8009aba:	f7ff fd91 	bl	80095e0 <_Balloc>
 8009abe:	4605      	mov	r5, r0
 8009ac0:	b948      	cbnz	r0, 8009ad6 <__lshift+0x3e>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	4b28      	ldr	r3, [pc, #160]	; (8009b68 <__lshift+0xd0>)
 8009ac6:	4829      	ldr	r0, [pc, #164]	; (8009b6c <__lshift+0xd4>)
 8009ac8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009acc:	f000 fe88 	bl	800a7e0 <__assert_func>
 8009ad0:	3101      	adds	r1, #1
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	e7ee      	b.n	8009ab4 <__lshift+0x1c>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	f100 0114 	add.w	r1, r0, #20
 8009adc:	f100 0210 	add.w	r2, r0, #16
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	4553      	cmp	r3, sl
 8009ae4:	db33      	blt.n	8009b4e <__lshift+0xb6>
 8009ae6:	6920      	ldr	r0, [r4, #16]
 8009ae8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009aec:	f104 0314 	add.w	r3, r4, #20
 8009af0:	f019 091f 	ands.w	r9, r9, #31
 8009af4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009af8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009afc:	d02b      	beq.n	8009b56 <__lshift+0xbe>
 8009afe:	f1c9 0e20 	rsb	lr, r9, #32
 8009b02:	468a      	mov	sl, r1
 8009b04:	2200      	movs	r2, #0
 8009b06:	6818      	ldr	r0, [r3, #0]
 8009b08:	fa00 f009 	lsl.w	r0, r0, r9
 8009b0c:	4302      	orrs	r2, r0
 8009b0e:	f84a 2b04 	str.w	r2, [sl], #4
 8009b12:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b16:	459c      	cmp	ip, r3
 8009b18:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b1c:	d8f3      	bhi.n	8009b06 <__lshift+0x6e>
 8009b1e:	ebac 0304 	sub.w	r3, ip, r4
 8009b22:	3b15      	subs	r3, #21
 8009b24:	f023 0303 	bic.w	r3, r3, #3
 8009b28:	3304      	adds	r3, #4
 8009b2a:	f104 0015 	add.w	r0, r4, #21
 8009b2e:	4584      	cmp	ip, r0
 8009b30:	bf38      	it	cc
 8009b32:	2304      	movcc	r3, #4
 8009b34:	50ca      	str	r2, [r1, r3]
 8009b36:	b10a      	cbz	r2, 8009b3c <__lshift+0xa4>
 8009b38:	f108 0602 	add.w	r6, r8, #2
 8009b3c:	3e01      	subs	r6, #1
 8009b3e:	4638      	mov	r0, r7
 8009b40:	612e      	str	r6, [r5, #16]
 8009b42:	4621      	mov	r1, r4
 8009b44:	f7ff fd8c 	bl	8009660 <_Bfree>
 8009b48:	4628      	mov	r0, r5
 8009b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b4e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b52:	3301      	adds	r3, #1
 8009b54:	e7c5      	b.n	8009ae2 <__lshift+0x4a>
 8009b56:	3904      	subs	r1, #4
 8009b58:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b5c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b60:	459c      	cmp	ip, r3
 8009b62:	d8f9      	bhi.n	8009b58 <__lshift+0xc0>
 8009b64:	e7ea      	b.n	8009b3c <__lshift+0xa4>
 8009b66:	bf00      	nop
 8009b68:	0800b03c 	.word	0x0800b03c
 8009b6c:	0800b130 	.word	0x0800b130

08009b70 <__mcmp>:
 8009b70:	b530      	push	{r4, r5, lr}
 8009b72:	6902      	ldr	r2, [r0, #16]
 8009b74:	690c      	ldr	r4, [r1, #16]
 8009b76:	1b12      	subs	r2, r2, r4
 8009b78:	d10e      	bne.n	8009b98 <__mcmp+0x28>
 8009b7a:	f100 0314 	add.w	r3, r0, #20
 8009b7e:	3114      	adds	r1, #20
 8009b80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009b84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009b88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009b8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009b90:	42a5      	cmp	r5, r4
 8009b92:	d003      	beq.n	8009b9c <__mcmp+0x2c>
 8009b94:	d305      	bcc.n	8009ba2 <__mcmp+0x32>
 8009b96:	2201      	movs	r2, #1
 8009b98:	4610      	mov	r0, r2
 8009b9a:	bd30      	pop	{r4, r5, pc}
 8009b9c:	4283      	cmp	r3, r0
 8009b9e:	d3f3      	bcc.n	8009b88 <__mcmp+0x18>
 8009ba0:	e7fa      	b.n	8009b98 <__mcmp+0x28>
 8009ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ba6:	e7f7      	b.n	8009b98 <__mcmp+0x28>

08009ba8 <__mdiff>:
 8009ba8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bac:	460c      	mov	r4, r1
 8009bae:	4606      	mov	r6, r0
 8009bb0:	4611      	mov	r1, r2
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	4617      	mov	r7, r2
 8009bb6:	f7ff ffdb 	bl	8009b70 <__mcmp>
 8009bba:	1e05      	subs	r5, r0, #0
 8009bbc:	d110      	bne.n	8009be0 <__mdiff+0x38>
 8009bbe:	4629      	mov	r1, r5
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	f7ff fd0d 	bl	80095e0 <_Balloc>
 8009bc6:	b930      	cbnz	r0, 8009bd6 <__mdiff+0x2e>
 8009bc8:	4b39      	ldr	r3, [pc, #228]	; (8009cb0 <__mdiff+0x108>)
 8009bca:	4602      	mov	r2, r0
 8009bcc:	f240 2132 	movw	r1, #562	; 0x232
 8009bd0:	4838      	ldr	r0, [pc, #224]	; (8009cb4 <__mdiff+0x10c>)
 8009bd2:	f000 fe05 	bl	800a7e0 <__assert_func>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009bdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009be0:	bfa4      	itt	ge
 8009be2:	463b      	movge	r3, r7
 8009be4:	4627      	movge	r7, r4
 8009be6:	4630      	mov	r0, r6
 8009be8:	6879      	ldr	r1, [r7, #4]
 8009bea:	bfa6      	itte	ge
 8009bec:	461c      	movge	r4, r3
 8009bee:	2500      	movge	r5, #0
 8009bf0:	2501      	movlt	r5, #1
 8009bf2:	f7ff fcf5 	bl	80095e0 <_Balloc>
 8009bf6:	b920      	cbnz	r0, 8009c02 <__mdiff+0x5a>
 8009bf8:	4b2d      	ldr	r3, [pc, #180]	; (8009cb0 <__mdiff+0x108>)
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c00:	e7e6      	b.n	8009bd0 <__mdiff+0x28>
 8009c02:	693e      	ldr	r6, [r7, #16]
 8009c04:	60c5      	str	r5, [r0, #12]
 8009c06:	6925      	ldr	r5, [r4, #16]
 8009c08:	f107 0114 	add.w	r1, r7, #20
 8009c0c:	f104 0914 	add.w	r9, r4, #20
 8009c10:	f100 0e14 	add.w	lr, r0, #20
 8009c14:	f107 0210 	add.w	r2, r7, #16
 8009c18:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009c1c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009c20:	46f2      	mov	sl, lr
 8009c22:	2700      	movs	r7, #0
 8009c24:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c2c:	fa1f f883 	uxth.w	r8, r3
 8009c30:	fa17 f78b 	uxtah	r7, r7, fp
 8009c34:	0c1b      	lsrs	r3, r3, #16
 8009c36:	eba7 0808 	sub.w	r8, r7, r8
 8009c3a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c3e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c42:	fa1f f888 	uxth.w	r8, r8
 8009c46:	141f      	asrs	r7, r3, #16
 8009c48:	454d      	cmp	r5, r9
 8009c4a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c4e:	f84a 3b04 	str.w	r3, [sl], #4
 8009c52:	d8e7      	bhi.n	8009c24 <__mdiff+0x7c>
 8009c54:	1b2b      	subs	r3, r5, r4
 8009c56:	3b15      	subs	r3, #21
 8009c58:	f023 0303 	bic.w	r3, r3, #3
 8009c5c:	3304      	adds	r3, #4
 8009c5e:	3415      	adds	r4, #21
 8009c60:	42a5      	cmp	r5, r4
 8009c62:	bf38      	it	cc
 8009c64:	2304      	movcc	r3, #4
 8009c66:	4419      	add	r1, r3
 8009c68:	4473      	add	r3, lr
 8009c6a:	469e      	mov	lr, r3
 8009c6c:	460d      	mov	r5, r1
 8009c6e:	4565      	cmp	r5, ip
 8009c70:	d30e      	bcc.n	8009c90 <__mdiff+0xe8>
 8009c72:	f10c 0203 	add.w	r2, ip, #3
 8009c76:	1a52      	subs	r2, r2, r1
 8009c78:	f022 0203 	bic.w	r2, r2, #3
 8009c7c:	3903      	subs	r1, #3
 8009c7e:	458c      	cmp	ip, r1
 8009c80:	bf38      	it	cc
 8009c82:	2200      	movcc	r2, #0
 8009c84:	441a      	add	r2, r3
 8009c86:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009c8a:	b17b      	cbz	r3, 8009cac <__mdiff+0x104>
 8009c8c:	6106      	str	r6, [r0, #16]
 8009c8e:	e7a5      	b.n	8009bdc <__mdiff+0x34>
 8009c90:	f855 8b04 	ldr.w	r8, [r5], #4
 8009c94:	fa17 f488 	uxtah	r4, r7, r8
 8009c98:	1422      	asrs	r2, r4, #16
 8009c9a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009c9e:	b2a4      	uxth	r4, r4
 8009ca0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009ca4:	f84e 4b04 	str.w	r4, [lr], #4
 8009ca8:	1417      	asrs	r7, r2, #16
 8009caa:	e7e0      	b.n	8009c6e <__mdiff+0xc6>
 8009cac:	3e01      	subs	r6, #1
 8009cae:	e7ea      	b.n	8009c86 <__mdiff+0xde>
 8009cb0:	0800b03c 	.word	0x0800b03c
 8009cb4:	0800b130 	.word	0x0800b130

08009cb8 <__ulp>:
 8009cb8:	b082      	sub	sp, #8
 8009cba:	ed8d 0b00 	vstr	d0, [sp]
 8009cbe:	9b01      	ldr	r3, [sp, #4]
 8009cc0:	4912      	ldr	r1, [pc, #72]	; (8009d0c <__ulp+0x54>)
 8009cc2:	4019      	ands	r1, r3
 8009cc4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009cc8:	2900      	cmp	r1, #0
 8009cca:	dd05      	ble.n	8009cd8 <__ulp+0x20>
 8009ccc:	2200      	movs	r2, #0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	ec43 2b10 	vmov	d0, r2, r3
 8009cd4:	b002      	add	sp, #8
 8009cd6:	4770      	bx	lr
 8009cd8:	4249      	negs	r1, r1
 8009cda:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009cde:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009ce2:	f04f 0200 	mov.w	r2, #0
 8009ce6:	f04f 0300 	mov.w	r3, #0
 8009cea:	da04      	bge.n	8009cf6 <__ulp+0x3e>
 8009cec:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009cf0:	fa41 f300 	asr.w	r3, r1, r0
 8009cf4:	e7ec      	b.n	8009cd0 <__ulp+0x18>
 8009cf6:	f1a0 0114 	sub.w	r1, r0, #20
 8009cfa:	291e      	cmp	r1, #30
 8009cfc:	bfda      	itte	le
 8009cfe:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009d02:	fa20 f101 	lsrle.w	r1, r0, r1
 8009d06:	2101      	movgt	r1, #1
 8009d08:	460a      	mov	r2, r1
 8009d0a:	e7e1      	b.n	8009cd0 <__ulp+0x18>
 8009d0c:	7ff00000 	.word	0x7ff00000

08009d10 <__b2d>:
 8009d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d12:	6905      	ldr	r5, [r0, #16]
 8009d14:	f100 0714 	add.w	r7, r0, #20
 8009d18:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009d1c:	1f2e      	subs	r6, r5, #4
 8009d1e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009d22:	4620      	mov	r0, r4
 8009d24:	f7ff fd52 	bl	80097cc <__hi0bits>
 8009d28:	f1c0 0320 	rsb	r3, r0, #32
 8009d2c:	280a      	cmp	r0, #10
 8009d2e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009dac <__b2d+0x9c>
 8009d32:	600b      	str	r3, [r1, #0]
 8009d34:	dc14      	bgt.n	8009d60 <__b2d+0x50>
 8009d36:	f1c0 0e0b 	rsb	lr, r0, #11
 8009d3a:	fa24 f10e 	lsr.w	r1, r4, lr
 8009d3e:	42b7      	cmp	r7, r6
 8009d40:	ea41 030c 	orr.w	r3, r1, ip
 8009d44:	bf34      	ite	cc
 8009d46:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d4a:	2100      	movcs	r1, #0
 8009d4c:	3015      	adds	r0, #21
 8009d4e:	fa04 f000 	lsl.w	r0, r4, r0
 8009d52:	fa21 f10e 	lsr.w	r1, r1, lr
 8009d56:	ea40 0201 	orr.w	r2, r0, r1
 8009d5a:	ec43 2b10 	vmov	d0, r2, r3
 8009d5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d60:	42b7      	cmp	r7, r6
 8009d62:	bf3a      	itte	cc
 8009d64:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d68:	f1a5 0608 	subcc.w	r6, r5, #8
 8009d6c:	2100      	movcs	r1, #0
 8009d6e:	380b      	subs	r0, #11
 8009d70:	d017      	beq.n	8009da2 <__b2d+0x92>
 8009d72:	f1c0 0c20 	rsb	ip, r0, #32
 8009d76:	fa04 f500 	lsl.w	r5, r4, r0
 8009d7a:	42be      	cmp	r6, r7
 8009d7c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009d80:	ea45 0504 	orr.w	r5, r5, r4
 8009d84:	bf8c      	ite	hi
 8009d86:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009d8a:	2400      	movls	r4, #0
 8009d8c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009d90:	fa01 f000 	lsl.w	r0, r1, r0
 8009d94:	fa24 f40c 	lsr.w	r4, r4, ip
 8009d98:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009d9c:	ea40 0204 	orr.w	r2, r0, r4
 8009da0:	e7db      	b.n	8009d5a <__b2d+0x4a>
 8009da2:	ea44 030c 	orr.w	r3, r4, ip
 8009da6:	460a      	mov	r2, r1
 8009da8:	e7d7      	b.n	8009d5a <__b2d+0x4a>
 8009daa:	bf00      	nop
 8009dac:	3ff00000 	.word	0x3ff00000

08009db0 <__d2b>:
 8009db0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009db4:	4689      	mov	r9, r1
 8009db6:	2101      	movs	r1, #1
 8009db8:	ec57 6b10 	vmov	r6, r7, d0
 8009dbc:	4690      	mov	r8, r2
 8009dbe:	f7ff fc0f 	bl	80095e0 <_Balloc>
 8009dc2:	4604      	mov	r4, r0
 8009dc4:	b930      	cbnz	r0, 8009dd4 <__d2b+0x24>
 8009dc6:	4602      	mov	r2, r0
 8009dc8:	4b25      	ldr	r3, [pc, #148]	; (8009e60 <__d2b+0xb0>)
 8009dca:	4826      	ldr	r0, [pc, #152]	; (8009e64 <__d2b+0xb4>)
 8009dcc:	f240 310a 	movw	r1, #778	; 0x30a
 8009dd0:	f000 fd06 	bl	800a7e0 <__assert_func>
 8009dd4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009dd8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ddc:	bb35      	cbnz	r5, 8009e2c <__d2b+0x7c>
 8009dde:	2e00      	cmp	r6, #0
 8009de0:	9301      	str	r3, [sp, #4]
 8009de2:	d028      	beq.n	8009e36 <__d2b+0x86>
 8009de4:	4668      	mov	r0, sp
 8009de6:	9600      	str	r6, [sp, #0]
 8009de8:	f7ff fd10 	bl	800980c <__lo0bits>
 8009dec:	9900      	ldr	r1, [sp, #0]
 8009dee:	b300      	cbz	r0, 8009e32 <__d2b+0x82>
 8009df0:	9a01      	ldr	r2, [sp, #4]
 8009df2:	f1c0 0320 	rsb	r3, r0, #32
 8009df6:	fa02 f303 	lsl.w	r3, r2, r3
 8009dfa:	430b      	orrs	r3, r1
 8009dfc:	40c2      	lsrs	r2, r0
 8009dfe:	6163      	str	r3, [r4, #20]
 8009e00:	9201      	str	r2, [sp, #4]
 8009e02:	9b01      	ldr	r3, [sp, #4]
 8009e04:	61a3      	str	r3, [r4, #24]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	bf14      	ite	ne
 8009e0a:	2202      	movne	r2, #2
 8009e0c:	2201      	moveq	r2, #1
 8009e0e:	6122      	str	r2, [r4, #16]
 8009e10:	b1d5      	cbz	r5, 8009e48 <__d2b+0x98>
 8009e12:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e16:	4405      	add	r5, r0
 8009e18:	f8c9 5000 	str.w	r5, [r9]
 8009e1c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e20:	f8c8 0000 	str.w	r0, [r8]
 8009e24:	4620      	mov	r0, r4
 8009e26:	b003      	add	sp, #12
 8009e28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e30:	e7d5      	b.n	8009dde <__d2b+0x2e>
 8009e32:	6161      	str	r1, [r4, #20]
 8009e34:	e7e5      	b.n	8009e02 <__d2b+0x52>
 8009e36:	a801      	add	r0, sp, #4
 8009e38:	f7ff fce8 	bl	800980c <__lo0bits>
 8009e3c:	9b01      	ldr	r3, [sp, #4]
 8009e3e:	6163      	str	r3, [r4, #20]
 8009e40:	2201      	movs	r2, #1
 8009e42:	6122      	str	r2, [r4, #16]
 8009e44:	3020      	adds	r0, #32
 8009e46:	e7e3      	b.n	8009e10 <__d2b+0x60>
 8009e48:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e4c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e50:	f8c9 0000 	str.w	r0, [r9]
 8009e54:	6918      	ldr	r0, [r3, #16]
 8009e56:	f7ff fcb9 	bl	80097cc <__hi0bits>
 8009e5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e5e:	e7df      	b.n	8009e20 <__d2b+0x70>
 8009e60:	0800b03c 	.word	0x0800b03c
 8009e64:	0800b130 	.word	0x0800b130

08009e68 <__ratio>:
 8009e68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e6c:	468a      	mov	sl, r1
 8009e6e:	4669      	mov	r1, sp
 8009e70:	4683      	mov	fp, r0
 8009e72:	f7ff ff4d 	bl	8009d10 <__b2d>
 8009e76:	a901      	add	r1, sp, #4
 8009e78:	4650      	mov	r0, sl
 8009e7a:	ec59 8b10 	vmov	r8, r9, d0
 8009e7e:	ee10 6a10 	vmov	r6, s0
 8009e82:	f7ff ff45 	bl	8009d10 <__b2d>
 8009e86:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009e8a:	f8da 2010 	ldr.w	r2, [sl, #16]
 8009e8e:	eba3 0c02 	sub.w	ip, r3, r2
 8009e92:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e96:	1a9b      	subs	r3, r3, r2
 8009e98:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009e9c:	ec55 4b10 	vmov	r4, r5, d0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	ee10 0a10 	vmov	r0, s0
 8009ea6:	bfce      	itee	gt
 8009ea8:	464a      	movgt	r2, r9
 8009eaa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009eae:	462a      	movle	r2, r5
 8009eb0:	464f      	mov	r7, r9
 8009eb2:	4629      	mov	r1, r5
 8009eb4:	bfcc      	ite	gt
 8009eb6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009eba:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009ebe:	ec47 6b17 	vmov	d7, r6, r7
 8009ec2:	ec41 0b16 	vmov	d6, r0, r1
 8009ec6:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8009eca:	b003      	add	sp, #12
 8009ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ed0 <__copybits>:
 8009ed0:	3901      	subs	r1, #1
 8009ed2:	b570      	push	{r4, r5, r6, lr}
 8009ed4:	1149      	asrs	r1, r1, #5
 8009ed6:	6914      	ldr	r4, [r2, #16]
 8009ed8:	3101      	adds	r1, #1
 8009eda:	f102 0314 	add.w	r3, r2, #20
 8009ede:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ee2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ee6:	1f05      	subs	r5, r0, #4
 8009ee8:	42a3      	cmp	r3, r4
 8009eea:	d30c      	bcc.n	8009f06 <__copybits+0x36>
 8009eec:	1aa3      	subs	r3, r4, r2
 8009eee:	3b11      	subs	r3, #17
 8009ef0:	f023 0303 	bic.w	r3, r3, #3
 8009ef4:	3211      	adds	r2, #17
 8009ef6:	42a2      	cmp	r2, r4
 8009ef8:	bf88      	it	hi
 8009efa:	2300      	movhi	r3, #0
 8009efc:	4418      	add	r0, r3
 8009efe:	2300      	movs	r3, #0
 8009f00:	4288      	cmp	r0, r1
 8009f02:	d305      	bcc.n	8009f10 <__copybits+0x40>
 8009f04:	bd70      	pop	{r4, r5, r6, pc}
 8009f06:	f853 6b04 	ldr.w	r6, [r3], #4
 8009f0a:	f845 6f04 	str.w	r6, [r5, #4]!
 8009f0e:	e7eb      	b.n	8009ee8 <__copybits+0x18>
 8009f10:	f840 3b04 	str.w	r3, [r0], #4
 8009f14:	e7f4      	b.n	8009f00 <__copybits+0x30>

08009f16 <__any_on>:
 8009f16:	f100 0214 	add.w	r2, r0, #20
 8009f1a:	6900      	ldr	r0, [r0, #16]
 8009f1c:	114b      	asrs	r3, r1, #5
 8009f1e:	4298      	cmp	r0, r3
 8009f20:	b510      	push	{r4, lr}
 8009f22:	db11      	blt.n	8009f48 <__any_on+0x32>
 8009f24:	dd0a      	ble.n	8009f3c <__any_on+0x26>
 8009f26:	f011 011f 	ands.w	r1, r1, #31
 8009f2a:	d007      	beq.n	8009f3c <__any_on+0x26>
 8009f2c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f30:	fa24 f001 	lsr.w	r0, r4, r1
 8009f34:	fa00 f101 	lsl.w	r1, r0, r1
 8009f38:	428c      	cmp	r4, r1
 8009f3a:	d10b      	bne.n	8009f54 <__any_on+0x3e>
 8009f3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d803      	bhi.n	8009f4c <__any_on+0x36>
 8009f44:	2000      	movs	r0, #0
 8009f46:	bd10      	pop	{r4, pc}
 8009f48:	4603      	mov	r3, r0
 8009f4a:	e7f7      	b.n	8009f3c <__any_on+0x26>
 8009f4c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f50:	2900      	cmp	r1, #0
 8009f52:	d0f5      	beq.n	8009f40 <__any_on+0x2a>
 8009f54:	2001      	movs	r0, #1
 8009f56:	e7f6      	b.n	8009f46 <__any_on+0x30>

08009f58 <_calloc_r>:
 8009f58:	b513      	push	{r0, r1, r4, lr}
 8009f5a:	434a      	muls	r2, r1
 8009f5c:	4611      	mov	r1, r2
 8009f5e:	9201      	str	r2, [sp, #4]
 8009f60:	f000 f85a 	bl	800a018 <_malloc_r>
 8009f64:	4604      	mov	r4, r0
 8009f66:	b118      	cbz	r0, 8009f70 <_calloc_r+0x18>
 8009f68:	9a01      	ldr	r2, [sp, #4]
 8009f6a:	2100      	movs	r1, #0
 8009f6c:	f7fc f916 	bl	800619c <memset>
 8009f70:	4620      	mov	r0, r4
 8009f72:	b002      	add	sp, #8
 8009f74:	bd10      	pop	{r4, pc}
	...

08009f78 <_free_r>:
 8009f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f7a:	2900      	cmp	r1, #0
 8009f7c:	d048      	beq.n	800a010 <_free_r+0x98>
 8009f7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f82:	9001      	str	r0, [sp, #4]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f1a1 0404 	sub.w	r4, r1, #4
 8009f8a:	bfb8      	it	lt
 8009f8c:	18e4      	addlt	r4, r4, r3
 8009f8e:	f000 fcb5 	bl	800a8fc <__malloc_lock>
 8009f92:	4a20      	ldr	r2, [pc, #128]	; (800a014 <_free_r+0x9c>)
 8009f94:	9801      	ldr	r0, [sp, #4]
 8009f96:	6813      	ldr	r3, [r2, #0]
 8009f98:	4615      	mov	r5, r2
 8009f9a:	b933      	cbnz	r3, 8009faa <_free_r+0x32>
 8009f9c:	6063      	str	r3, [r4, #4]
 8009f9e:	6014      	str	r4, [r2, #0]
 8009fa0:	b003      	add	sp, #12
 8009fa2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fa6:	f000 bcaf 	b.w	800a908 <__malloc_unlock>
 8009faa:	42a3      	cmp	r3, r4
 8009fac:	d90b      	bls.n	8009fc6 <_free_r+0x4e>
 8009fae:	6821      	ldr	r1, [r4, #0]
 8009fb0:	1862      	adds	r2, r4, r1
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	bf04      	itt	eq
 8009fb6:	681a      	ldreq	r2, [r3, #0]
 8009fb8:	685b      	ldreq	r3, [r3, #4]
 8009fba:	6063      	str	r3, [r4, #4]
 8009fbc:	bf04      	itt	eq
 8009fbe:	1852      	addeq	r2, r2, r1
 8009fc0:	6022      	streq	r2, [r4, #0]
 8009fc2:	602c      	str	r4, [r5, #0]
 8009fc4:	e7ec      	b.n	8009fa0 <_free_r+0x28>
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	b10b      	cbz	r3, 8009fd0 <_free_r+0x58>
 8009fcc:	42a3      	cmp	r3, r4
 8009fce:	d9fa      	bls.n	8009fc6 <_free_r+0x4e>
 8009fd0:	6811      	ldr	r1, [r2, #0]
 8009fd2:	1855      	adds	r5, r2, r1
 8009fd4:	42a5      	cmp	r5, r4
 8009fd6:	d10b      	bne.n	8009ff0 <_free_r+0x78>
 8009fd8:	6824      	ldr	r4, [r4, #0]
 8009fda:	4421      	add	r1, r4
 8009fdc:	1854      	adds	r4, r2, r1
 8009fde:	42a3      	cmp	r3, r4
 8009fe0:	6011      	str	r1, [r2, #0]
 8009fe2:	d1dd      	bne.n	8009fa0 <_free_r+0x28>
 8009fe4:	681c      	ldr	r4, [r3, #0]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	6053      	str	r3, [r2, #4]
 8009fea:	4421      	add	r1, r4
 8009fec:	6011      	str	r1, [r2, #0]
 8009fee:	e7d7      	b.n	8009fa0 <_free_r+0x28>
 8009ff0:	d902      	bls.n	8009ff8 <_free_r+0x80>
 8009ff2:	230c      	movs	r3, #12
 8009ff4:	6003      	str	r3, [r0, #0]
 8009ff6:	e7d3      	b.n	8009fa0 <_free_r+0x28>
 8009ff8:	6825      	ldr	r5, [r4, #0]
 8009ffa:	1961      	adds	r1, r4, r5
 8009ffc:	428b      	cmp	r3, r1
 8009ffe:	bf04      	itt	eq
 800a000:	6819      	ldreq	r1, [r3, #0]
 800a002:	685b      	ldreq	r3, [r3, #4]
 800a004:	6063      	str	r3, [r4, #4]
 800a006:	bf04      	itt	eq
 800a008:	1949      	addeq	r1, r1, r5
 800a00a:	6021      	streq	r1, [r4, #0]
 800a00c:	6054      	str	r4, [r2, #4]
 800a00e:	e7c7      	b.n	8009fa0 <_free_r+0x28>
 800a010:	b003      	add	sp, #12
 800a012:	bd30      	pop	{r4, r5, pc}
 800a014:	200002a4 	.word	0x200002a4

0800a018 <_malloc_r>:
 800a018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a01a:	1ccd      	adds	r5, r1, #3
 800a01c:	f025 0503 	bic.w	r5, r5, #3
 800a020:	3508      	adds	r5, #8
 800a022:	2d0c      	cmp	r5, #12
 800a024:	bf38      	it	cc
 800a026:	250c      	movcc	r5, #12
 800a028:	2d00      	cmp	r5, #0
 800a02a:	4606      	mov	r6, r0
 800a02c:	db01      	blt.n	800a032 <_malloc_r+0x1a>
 800a02e:	42a9      	cmp	r1, r5
 800a030:	d903      	bls.n	800a03a <_malloc_r+0x22>
 800a032:	230c      	movs	r3, #12
 800a034:	6033      	str	r3, [r6, #0]
 800a036:	2000      	movs	r0, #0
 800a038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a03a:	f000 fc5f 	bl	800a8fc <__malloc_lock>
 800a03e:	4921      	ldr	r1, [pc, #132]	; (800a0c4 <_malloc_r+0xac>)
 800a040:	680a      	ldr	r2, [r1, #0]
 800a042:	4614      	mov	r4, r2
 800a044:	b99c      	cbnz	r4, 800a06e <_malloc_r+0x56>
 800a046:	4f20      	ldr	r7, [pc, #128]	; (800a0c8 <_malloc_r+0xb0>)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	b923      	cbnz	r3, 800a056 <_malloc_r+0x3e>
 800a04c:	4621      	mov	r1, r4
 800a04e:	4630      	mov	r0, r6
 800a050:	f000 fb42 	bl	800a6d8 <_sbrk_r>
 800a054:	6038      	str	r0, [r7, #0]
 800a056:	4629      	mov	r1, r5
 800a058:	4630      	mov	r0, r6
 800a05a:	f000 fb3d 	bl	800a6d8 <_sbrk_r>
 800a05e:	1c43      	adds	r3, r0, #1
 800a060:	d123      	bne.n	800a0aa <_malloc_r+0x92>
 800a062:	230c      	movs	r3, #12
 800a064:	6033      	str	r3, [r6, #0]
 800a066:	4630      	mov	r0, r6
 800a068:	f000 fc4e 	bl	800a908 <__malloc_unlock>
 800a06c:	e7e3      	b.n	800a036 <_malloc_r+0x1e>
 800a06e:	6823      	ldr	r3, [r4, #0]
 800a070:	1b5b      	subs	r3, r3, r5
 800a072:	d417      	bmi.n	800a0a4 <_malloc_r+0x8c>
 800a074:	2b0b      	cmp	r3, #11
 800a076:	d903      	bls.n	800a080 <_malloc_r+0x68>
 800a078:	6023      	str	r3, [r4, #0]
 800a07a:	441c      	add	r4, r3
 800a07c:	6025      	str	r5, [r4, #0]
 800a07e:	e004      	b.n	800a08a <_malloc_r+0x72>
 800a080:	6863      	ldr	r3, [r4, #4]
 800a082:	42a2      	cmp	r2, r4
 800a084:	bf0c      	ite	eq
 800a086:	600b      	streq	r3, [r1, #0]
 800a088:	6053      	strne	r3, [r2, #4]
 800a08a:	4630      	mov	r0, r6
 800a08c:	f000 fc3c 	bl	800a908 <__malloc_unlock>
 800a090:	f104 000b 	add.w	r0, r4, #11
 800a094:	1d23      	adds	r3, r4, #4
 800a096:	f020 0007 	bic.w	r0, r0, #7
 800a09a:	1ac2      	subs	r2, r0, r3
 800a09c:	d0cc      	beq.n	800a038 <_malloc_r+0x20>
 800a09e:	1a1b      	subs	r3, r3, r0
 800a0a0:	50a3      	str	r3, [r4, r2]
 800a0a2:	e7c9      	b.n	800a038 <_malloc_r+0x20>
 800a0a4:	4622      	mov	r2, r4
 800a0a6:	6864      	ldr	r4, [r4, #4]
 800a0a8:	e7cc      	b.n	800a044 <_malloc_r+0x2c>
 800a0aa:	1cc4      	adds	r4, r0, #3
 800a0ac:	f024 0403 	bic.w	r4, r4, #3
 800a0b0:	42a0      	cmp	r0, r4
 800a0b2:	d0e3      	beq.n	800a07c <_malloc_r+0x64>
 800a0b4:	1a21      	subs	r1, r4, r0
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	f000 fb0e 	bl	800a6d8 <_sbrk_r>
 800a0bc:	3001      	adds	r0, #1
 800a0be:	d1dd      	bne.n	800a07c <_malloc_r+0x64>
 800a0c0:	e7cf      	b.n	800a062 <_malloc_r+0x4a>
 800a0c2:	bf00      	nop
 800a0c4:	200002a4 	.word	0x200002a4
 800a0c8:	200002a8 	.word	0x200002a8

0800a0cc <__ssputs_r>:
 800a0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0d0:	688e      	ldr	r6, [r1, #8]
 800a0d2:	429e      	cmp	r6, r3
 800a0d4:	4682      	mov	sl, r0
 800a0d6:	460c      	mov	r4, r1
 800a0d8:	4690      	mov	r8, r2
 800a0da:	461f      	mov	r7, r3
 800a0dc:	d838      	bhi.n	800a150 <__ssputs_r+0x84>
 800a0de:	898a      	ldrh	r2, [r1, #12]
 800a0e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a0e4:	d032      	beq.n	800a14c <__ssputs_r+0x80>
 800a0e6:	6825      	ldr	r5, [r4, #0]
 800a0e8:	6909      	ldr	r1, [r1, #16]
 800a0ea:	eba5 0901 	sub.w	r9, r5, r1
 800a0ee:	6965      	ldr	r5, [r4, #20]
 800a0f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a0f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	444b      	add	r3, r9
 800a0fc:	106d      	asrs	r5, r5, #1
 800a0fe:	429d      	cmp	r5, r3
 800a100:	bf38      	it	cc
 800a102:	461d      	movcc	r5, r3
 800a104:	0553      	lsls	r3, r2, #21
 800a106:	d531      	bpl.n	800a16c <__ssputs_r+0xa0>
 800a108:	4629      	mov	r1, r5
 800a10a:	f7ff ff85 	bl	800a018 <_malloc_r>
 800a10e:	4606      	mov	r6, r0
 800a110:	b950      	cbnz	r0, 800a128 <__ssputs_r+0x5c>
 800a112:	230c      	movs	r3, #12
 800a114:	f8ca 3000 	str.w	r3, [sl]
 800a118:	89a3      	ldrh	r3, [r4, #12]
 800a11a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a11e:	81a3      	strh	r3, [r4, #12]
 800a120:	f04f 30ff 	mov.w	r0, #4294967295
 800a124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a128:	6921      	ldr	r1, [r4, #16]
 800a12a:	464a      	mov	r2, r9
 800a12c:	f7ff fa4a 	bl	80095c4 <memcpy>
 800a130:	89a3      	ldrh	r3, [r4, #12]
 800a132:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a136:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a13a:	81a3      	strh	r3, [r4, #12]
 800a13c:	6126      	str	r6, [r4, #16]
 800a13e:	6165      	str	r5, [r4, #20]
 800a140:	444e      	add	r6, r9
 800a142:	eba5 0509 	sub.w	r5, r5, r9
 800a146:	6026      	str	r6, [r4, #0]
 800a148:	60a5      	str	r5, [r4, #8]
 800a14a:	463e      	mov	r6, r7
 800a14c:	42be      	cmp	r6, r7
 800a14e:	d900      	bls.n	800a152 <__ssputs_r+0x86>
 800a150:	463e      	mov	r6, r7
 800a152:	4632      	mov	r2, r6
 800a154:	6820      	ldr	r0, [r4, #0]
 800a156:	4641      	mov	r1, r8
 800a158:	f000 fbb6 	bl	800a8c8 <memmove>
 800a15c:	68a3      	ldr	r3, [r4, #8]
 800a15e:	6822      	ldr	r2, [r4, #0]
 800a160:	1b9b      	subs	r3, r3, r6
 800a162:	4432      	add	r2, r6
 800a164:	60a3      	str	r3, [r4, #8]
 800a166:	6022      	str	r2, [r4, #0]
 800a168:	2000      	movs	r0, #0
 800a16a:	e7db      	b.n	800a124 <__ssputs_r+0x58>
 800a16c:	462a      	mov	r2, r5
 800a16e:	f000 fbd1 	bl	800a914 <_realloc_r>
 800a172:	4606      	mov	r6, r0
 800a174:	2800      	cmp	r0, #0
 800a176:	d1e1      	bne.n	800a13c <__ssputs_r+0x70>
 800a178:	6921      	ldr	r1, [r4, #16]
 800a17a:	4650      	mov	r0, sl
 800a17c:	f7ff fefc 	bl	8009f78 <_free_r>
 800a180:	e7c7      	b.n	800a112 <__ssputs_r+0x46>
	...

0800a184 <_svfiprintf_r>:
 800a184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a188:	4698      	mov	r8, r3
 800a18a:	898b      	ldrh	r3, [r1, #12]
 800a18c:	061b      	lsls	r3, r3, #24
 800a18e:	b09d      	sub	sp, #116	; 0x74
 800a190:	4607      	mov	r7, r0
 800a192:	460d      	mov	r5, r1
 800a194:	4614      	mov	r4, r2
 800a196:	d50e      	bpl.n	800a1b6 <_svfiprintf_r+0x32>
 800a198:	690b      	ldr	r3, [r1, #16]
 800a19a:	b963      	cbnz	r3, 800a1b6 <_svfiprintf_r+0x32>
 800a19c:	2140      	movs	r1, #64	; 0x40
 800a19e:	f7ff ff3b 	bl	800a018 <_malloc_r>
 800a1a2:	6028      	str	r0, [r5, #0]
 800a1a4:	6128      	str	r0, [r5, #16]
 800a1a6:	b920      	cbnz	r0, 800a1b2 <_svfiprintf_r+0x2e>
 800a1a8:	230c      	movs	r3, #12
 800a1aa:	603b      	str	r3, [r7, #0]
 800a1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b0:	e0d1      	b.n	800a356 <_svfiprintf_r+0x1d2>
 800a1b2:	2340      	movs	r3, #64	; 0x40
 800a1b4:	616b      	str	r3, [r5, #20]
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ba:	2320      	movs	r3, #32
 800a1bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a1c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1c4:	2330      	movs	r3, #48	; 0x30
 800a1c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a370 <_svfiprintf_r+0x1ec>
 800a1ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a1ce:	f04f 0901 	mov.w	r9, #1
 800a1d2:	4623      	mov	r3, r4
 800a1d4:	469a      	mov	sl, r3
 800a1d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1da:	b10a      	cbz	r2, 800a1e0 <_svfiprintf_r+0x5c>
 800a1dc:	2a25      	cmp	r2, #37	; 0x25
 800a1de:	d1f9      	bne.n	800a1d4 <_svfiprintf_r+0x50>
 800a1e0:	ebba 0b04 	subs.w	fp, sl, r4
 800a1e4:	d00b      	beq.n	800a1fe <_svfiprintf_r+0x7a>
 800a1e6:	465b      	mov	r3, fp
 800a1e8:	4622      	mov	r2, r4
 800a1ea:	4629      	mov	r1, r5
 800a1ec:	4638      	mov	r0, r7
 800a1ee:	f7ff ff6d 	bl	800a0cc <__ssputs_r>
 800a1f2:	3001      	adds	r0, #1
 800a1f4:	f000 80aa 	beq.w	800a34c <_svfiprintf_r+0x1c8>
 800a1f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a1fa:	445a      	add	r2, fp
 800a1fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a1fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a202:	2b00      	cmp	r3, #0
 800a204:	f000 80a2 	beq.w	800a34c <_svfiprintf_r+0x1c8>
 800a208:	2300      	movs	r3, #0
 800a20a:	f04f 32ff 	mov.w	r2, #4294967295
 800a20e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a212:	f10a 0a01 	add.w	sl, sl, #1
 800a216:	9304      	str	r3, [sp, #16]
 800a218:	9307      	str	r3, [sp, #28]
 800a21a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a21e:	931a      	str	r3, [sp, #104]	; 0x68
 800a220:	4654      	mov	r4, sl
 800a222:	2205      	movs	r2, #5
 800a224:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a228:	4851      	ldr	r0, [pc, #324]	; (800a370 <_svfiprintf_r+0x1ec>)
 800a22a:	f7f6 f811 	bl	8000250 <memchr>
 800a22e:	9a04      	ldr	r2, [sp, #16]
 800a230:	b9d8      	cbnz	r0, 800a26a <_svfiprintf_r+0xe6>
 800a232:	06d0      	lsls	r0, r2, #27
 800a234:	bf44      	itt	mi
 800a236:	2320      	movmi	r3, #32
 800a238:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a23c:	0711      	lsls	r1, r2, #28
 800a23e:	bf44      	itt	mi
 800a240:	232b      	movmi	r3, #43	; 0x2b
 800a242:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a246:	f89a 3000 	ldrb.w	r3, [sl]
 800a24a:	2b2a      	cmp	r3, #42	; 0x2a
 800a24c:	d015      	beq.n	800a27a <_svfiprintf_r+0xf6>
 800a24e:	9a07      	ldr	r2, [sp, #28]
 800a250:	4654      	mov	r4, sl
 800a252:	2000      	movs	r0, #0
 800a254:	f04f 0c0a 	mov.w	ip, #10
 800a258:	4621      	mov	r1, r4
 800a25a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a25e:	3b30      	subs	r3, #48	; 0x30
 800a260:	2b09      	cmp	r3, #9
 800a262:	d94e      	bls.n	800a302 <_svfiprintf_r+0x17e>
 800a264:	b1b0      	cbz	r0, 800a294 <_svfiprintf_r+0x110>
 800a266:	9207      	str	r2, [sp, #28]
 800a268:	e014      	b.n	800a294 <_svfiprintf_r+0x110>
 800a26a:	eba0 0308 	sub.w	r3, r0, r8
 800a26e:	fa09 f303 	lsl.w	r3, r9, r3
 800a272:	4313      	orrs	r3, r2
 800a274:	9304      	str	r3, [sp, #16]
 800a276:	46a2      	mov	sl, r4
 800a278:	e7d2      	b.n	800a220 <_svfiprintf_r+0x9c>
 800a27a:	9b03      	ldr	r3, [sp, #12]
 800a27c:	1d19      	adds	r1, r3, #4
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	9103      	str	r1, [sp, #12]
 800a282:	2b00      	cmp	r3, #0
 800a284:	bfbb      	ittet	lt
 800a286:	425b      	neglt	r3, r3
 800a288:	f042 0202 	orrlt.w	r2, r2, #2
 800a28c:	9307      	strge	r3, [sp, #28]
 800a28e:	9307      	strlt	r3, [sp, #28]
 800a290:	bfb8      	it	lt
 800a292:	9204      	strlt	r2, [sp, #16]
 800a294:	7823      	ldrb	r3, [r4, #0]
 800a296:	2b2e      	cmp	r3, #46	; 0x2e
 800a298:	d10c      	bne.n	800a2b4 <_svfiprintf_r+0x130>
 800a29a:	7863      	ldrb	r3, [r4, #1]
 800a29c:	2b2a      	cmp	r3, #42	; 0x2a
 800a29e:	d135      	bne.n	800a30c <_svfiprintf_r+0x188>
 800a2a0:	9b03      	ldr	r3, [sp, #12]
 800a2a2:	1d1a      	adds	r2, r3, #4
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	9203      	str	r2, [sp, #12]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	bfb8      	it	lt
 800a2ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2b0:	3402      	adds	r4, #2
 800a2b2:	9305      	str	r3, [sp, #20]
 800a2b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a380 <_svfiprintf_r+0x1fc>
 800a2b8:	7821      	ldrb	r1, [r4, #0]
 800a2ba:	2203      	movs	r2, #3
 800a2bc:	4650      	mov	r0, sl
 800a2be:	f7f5 ffc7 	bl	8000250 <memchr>
 800a2c2:	b140      	cbz	r0, 800a2d6 <_svfiprintf_r+0x152>
 800a2c4:	2340      	movs	r3, #64	; 0x40
 800a2c6:	eba0 000a 	sub.w	r0, r0, sl
 800a2ca:	fa03 f000 	lsl.w	r0, r3, r0
 800a2ce:	9b04      	ldr	r3, [sp, #16]
 800a2d0:	4303      	orrs	r3, r0
 800a2d2:	3401      	adds	r4, #1
 800a2d4:	9304      	str	r3, [sp, #16]
 800a2d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2da:	4826      	ldr	r0, [pc, #152]	; (800a374 <_svfiprintf_r+0x1f0>)
 800a2dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a2e0:	2206      	movs	r2, #6
 800a2e2:	f7f5 ffb5 	bl	8000250 <memchr>
 800a2e6:	2800      	cmp	r0, #0
 800a2e8:	d038      	beq.n	800a35c <_svfiprintf_r+0x1d8>
 800a2ea:	4b23      	ldr	r3, [pc, #140]	; (800a378 <_svfiprintf_r+0x1f4>)
 800a2ec:	bb1b      	cbnz	r3, 800a336 <_svfiprintf_r+0x1b2>
 800a2ee:	9b03      	ldr	r3, [sp, #12]
 800a2f0:	3307      	adds	r3, #7
 800a2f2:	f023 0307 	bic.w	r3, r3, #7
 800a2f6:	3308      	adds	r3, #8
 800a2f8:	9303      	str	r3, [sp, #12]
 800a2fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2fc:	4433      	add	r3, r6
 800a2fe:	9309      	str	r3, [sp, #36]	; 0x24
 800a300:	e767      	b.n	800a1d2 <_svfiprintf_r+0x4e>
 800a302:	fb0c 3202 	mla	r2, ip, r2, r3
 800a306:	460c      	mov	r4, r1
 800a308:	2001      	movs	r0, #1
 800a30a:	e7a5      	b.n	800a258 <_svfiprintf_r+0xd4>
 800a30c:	2300      	movs	r3, #0
 800a30e:	3401      	adds	r4, #1
 800a310:	9305      	str	r3, [sp, #20]
 800a312:	4619      	mov	r1, r3
 800a314:	f04f 0c0a 	mov.w	ip, #10
 800a318:	4620      	mov	r0, r4
 800a31a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a31e:	3a30      	subs	r2, #48	; 0x30
 800a320:	2a09      	cmp	r2, #9
 800a322:	d903      	bls.n	800a32c <_svfiprintf_r+0x1a8>
 800a324:	2b00      	cmp	r3, #0
 800a326:	d0c5      	beq.n	800a2b4 <_svfiprintf_r+0x130>
 800a328:	9105      	str	r1, [sp, #20]
 800a32a:	e7c3      	b.n	800a2b4 <_svfiprintf_r+0x130>
 800a32c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a330:	4604      	mov	r4, r0
 800a332:	2301      	movs	r3, #1
 800a334:	e7f0      	b.n	800a318 <_svfiprintf_r+0x194>
 800a336:	ab03      	add	r3, sp, #12
 800a338:	9300      	str	r3, [sp, #0]
 800a33a:	462a      	mov	r2, r5
 800a33c:	4b0f      	ldr	r3, [pc, #60]	; (800a37c <_svfiprintf_r+0x1f8>)
 800a33e:	a904      	add	r1, sp, #16
 800a340:	4638      	mov	r0, r7
 800a342:	f7fb ffc5 	bl	80062d0 <_printf_float>
 800a346:	1c42      	adds	r2, r0, #1
 800a348:	4606      	mov	r6, r0
 800a34a:	d1d6      	bne.n	800a2fa <_svfiprintf_r+0x176>
 800a34c:	89ab      	ldrh	r3, [r5, #12]
 800a34e:	065b      	lsls	r3, r3, #25
 800a350:	f53f af2c 	bmi.w	800a1ac <_svfiprintf_r+0x28>
 800a354:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a356:	b01d      	add	sp, #116	; 0x74
 800a358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a35c:	ab03      	add	r3, sp, #12
 800a35e:	9300      	str	r3, [sp, #0]
 800a360:	462a      	mov	r2, r5
 800a362:	4b06      	ldr	r3, [pc, #24]	; (800a37c <_svfiprintf_r+0x1f8>)
 800a364:	a904      	add	r1, sp, #16
 800a366:	4638      	mov	r0, r7
 800a368:	f7fc fa3e 	bl	80067e8 <_printf_i>
 800a36c:	e7eb      	b.n	800a346 <_svfiprintf_r+0x1c2>
 800a36e:	bf00      	nop
 800a370:	0800b28c 	.word	0x0800b28c
 800a374:	0800b296 	.word	0x0800b296
 800a378:	080062d1 	.word	0x080062d1
 800a37c:	0800a0cd 	.word	0x0800a0cd
 800a380:	0800b292 	.word	0x0800b292

0800a384 <__sfputc_r>:
 800a384:	6893      	ldr	r3, [r2, #8]
 800a386:	3b01      	subs	r3, #1
 800a388:	2b00      	cmp	r3, #0
 800a38a:	b410      	push	{r4}
 800a38c:	6093      	str	r3, [r2, #8]
 800a38e:	da08      	bge.n	800a3a2 <__sfputc_r+0x1e>
 800a390:	6994      	ldr	r4, [r2, #24]
 800a392:	42a3      	cmp	r3, r4
 800a394:	db01      	blt.n	800a39a <__sfputc_r+0x16>
 800a396:	290a      	cmp	r1, #10
 800a398:	d103      	bne.n	800a3a2 <__sfputc_r+0x1e>
 800a39a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a39e:	f7fd bc95 	b.w	8007ccc <__swbuf_r>
 800a3a2:	6813      	ldr	r3, [r2, #0]
 800a3a4:	1c58      	adds	r0, r3, #1
 800a3a6:	6010      	str	r0, [r2, #0]
 800a3a8:	7019      	strb	r1, [r3, #0]
 800a3aa:	4608      	mov	r0, r1
 800a3ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <__sfputs_r>:
 800a3b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b4:	4606      	mov	r6, r0
 800a3b6:	460f      	mov	r7, r1
 800a3b8:	4614      	mov	r4, r2
 800a3ba:	18d5      	adds	r5, r2, r3
 800a3bc:	42ac      	cmp	r4, r5
 800a3be:	d101      	bne.n	800a3c4 <__sfputs_r+0x12>
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	e007      	b.n	800a3d4 <__sfputs_r+0x22>
 800a3c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3c8:	463a      	mov	r2, r7
 800a3ca:	4630      	mov	r0, r6
 800a3cc:	f7ff ffda 	bl	800a384 <__sfputc_r>
 800a3d0:	1c43      	adds	r3, r0, #1
 800a3d2:	d1f3      	bne.n	800a3bc <__sfputs_r+0xa>
 800a3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a3d8 <_vfiprintf_r>:
 800a3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3dc:	460d      	mov	r5, r1
 800a3de:	b09d      	sub	sp, #116	; 0x74
 800a3e0:	4614      	mov	r4, r2
 800a3e2:	4698      	mov	r8, r3
 800a3e4:	4606      	mov	r6, r0
 800a3e6:	b118      	cbz	r0, 800a3f0 <_vfiprintf_r+0x18>
 800a3e8:	6983      	ldr	r3, [r0, #24]
 800a3ea:	b90b      	cbnz	r3, 800a3f0 <_vfiprintf_r+0x18>
 800a3ec:	f7fe fc58 	bl	8008ca0 <__sinit>
 800a3f0:	4b89      	ldr	r3, [pc, #548]	; (800a618 <_vfiprintf_r+0x240>)
 800a3f2:	429d      	cmp	r5, r3
 800a3f4:	d11b      	bne.n	800a42e <_vfiprintf_r+0x56>
 800a3f6:	6875      	ldr	r5, [r6, #4]
 800a3f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3fa:	07d9      	lsls	r1, r3, #31
 800a3fc:	d405      	bmi.n	800a40a <_vfiprintf_r+0x32>
 800a3fe:	89ab      	ldrh	r3, [r5, #12]
 800a400:	059a      	lsls	r2, r3, #22
 800a402:	d402      	bmi.n	800a40a <_vfiprintf_r+0x32>
 800a404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a406:	f7ff f85c 	bl	80094c2 <__retarget_lock_acquire_recursive>
 800a40a:	89ab      	ldrh	r3, [r5, #12]
 800a40c:	071b      	lsls	r3, r3, #28
 800a40e:	d501      	bpl.n	800a414 <_vfiprintf_r+0x3c>
 800a410:	692b      	ldr	r3, [r5, #16]
 800a412:	b9eb      	cbnz	r3, 800a450 <_vfiprintf_r+0x78>
 800a414:	4629      	mov	r1, r5
 800a416:	4630      	mov	r0, r6
 800a418:	f7fd fcaa 	bl	8007d70 <__swsetup_r>
 800a41c:	b1c0      	cbz	r0, 800a450 <_vfiprintf_r+0x78>
 800a41e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a420:	07dc      	lsls	r4, r3, #31
 800a422:	d50e      	bpl.n	800a442 <_vfiprintf_r+0x6a>
 800a424:	f04f 30ff 	mov.w	r0, #4294967295
 800a428:	b01d      	add	sp, #116	; 0x74
 800a42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a42e:	4b7b      	ldr	r3, [pc, #492]	; (800a61c <_vfiprintf_r+0x244>)
 800a430:	429d      	cmp	r5, r3
 800a432:	d101      	bne.n	800a438 <_vfiprintf_r+0x60>
 800a434:	68b5      	ldr	r5, [r6, #8]
 800a436:	e7df      	b.n	800a3f8 <_vfiprintf_r+0x20>
 800a438:	4b79      	ldr	r3, [pc, #484]	; (800a620 <_vfiprintf_r+0x248>)
 800a43a:	429d      	cmp	r5, r3
 800a43c:	bf08      	it	eq
 800a43e:	68f5      	ldreq	r5, [r6, #12]
 800a440:	e7da      	b.n	800a3f8 <_vfiprintf_r+0x20>
 800a442:	89ab      	ldrh	r3, [r5, #12]
 800a444:	0598      	lsls	r0, r3, #22
 800a446:	d4ed      	bmi.n	800a424 <_vfiprintf_r+0x4c>
 800a448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a44a:	f7ff f83b 	bl	80094c4 <__retarget_lock_release_recursive>
 800a44e:	e7e9      	b.n	800a424 <_vfiprintf_r+0x4c>
 800a450:	2300      	movs	r3, #0
 800a452:	9309      	str	r3, [sp, #36]	; 0x24
 800a454:	2320      	movs	r3, #32
 800a456:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a45a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a45e:	2330      	movs	r3, #48	; 0x30
 800a460:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a624 <_vfiprintf_r+0x24c>
 800a464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a468:	f04f 0901 	mov.w	r9, #1
 800a46c:	4623      	mov	r3, r4
 800a46e:	469a      	mov	sl, r3
 800a470:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a474:	b10a      	cbz	r2, 800a47a <_vfiprintf_r+0xa2>
 800a476:	2a25      	cmp	r2, #37	; 0x25
 800a478:	d1f9      	bne.n	800a46e <_vfiprintf_r+0x96>
 800a47a:	ebba 0b04 	subs.w	fp, sl, r4
 800a47e:	d00b      	beq.n	800a498 <_vfiprintf_r+0xc0>
 800a480:	465b      	mov	r3, fp
 800a482:	4622      	mov	r2, r4
 800a484:	4629      	mov	r1, r5
 800a486:	4630      	mov	r0, r6
 800a488:	f7ff ff93 	bl	800a3b2 <__sfputs_r>
 800a48c:	3001      	adds	r0, #1
 800a48e:	f000 80aa 	beq.w	800a5e6 <_vfiprintf_r+0x20e>
 800a492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a494:	445a      	add	r2, fp
 800a496:	9209      	str	r2, [sp, #36]	; 0x24
 800a498:	f89a 3000 	ldrb.w	r3, [sl]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	f000 80a2 	beq.w	800a5e6 <_vfiprintf_r+0x20e>
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4ac:	f10a 0a01 	add.w	sl, sl, #1
 800a4b0:	9304      	str	r3, [sp, #16]
 800a4b2:	9307      	str	r3, [sp, #28]
 800a4b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4b8:	931a      	str	r3, [sp, #104]	; 0x68
 800a4ba:	4654      	mov	r4, sl
 800a4bc:	2205      	movs	r2, #5
 800a4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4c2:	4858      	ldr	r0, [pc, #352]	; (800a624 <_vfiprintf_r+0x24c>)
 800a4c4:	f7f5 fec4 	bl	8000250 <memchr>
 800a4c8:	9a04      	ldr	r2, [sp, #16]
 800a4ca:	b9d8      	cbnz	r0, 800a504 <_vfiprintf_r+0x12c>
 800a4cc:	06d1      	lsls	r1, r2, #27
 800a4ce:	bf44      	itt	mi
 800a4d0:	2320      	movmi	r3, #32
 800a4d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4d6:	0713      	lsls	r3, r2, #28
 800a4d8:	bf44      	itt	mi
 800a4da:	232b      	movmi	r3, #43	; 0x2b
 800a4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a4e0:	f89a 3000 	ldrb.w	r3, [sl]
 800a4e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a4e6:	d015      	beq.n	800a514 <_vfiprintf_r+0x13c>
 800a4e8:	9a07      	ldr	r2, [sp, #28]
 800a4ea:	4654      	mov	r4, sl
 800a4ec:	2000      	movs	r0, #0
 800a4ee:	f04f 0c0a 	mov.w	ip, #10
 800a4f2:	4621      	mov	r1, r4
 800a4f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4f8:	3b30      	subs	r3, #48	; 0x30
 800a4fa:	2b09      	cmp	r3, #9
 800a4fc:	d94e      	bls.n	800a59c <_vfiprintf_r+0x1c4>
 800a4fe:	b1b0      	cbz	r0, 800a52e <_vfiprintf_r+0x156>
 800a500:	9207      	str	r2, [sp, #28]
 800a502:	e014      	b.n	800a52e <_vfiprintf_r+0x156>
 800a504:	eba0 0308 	sub.w	r3, r0, r8
 800a508:	fa09 f303 	lsl.w	r3, r9, r3
 800a50c:	4313      	orrs	r3, r2
 800a50e:	9304      	str	r3, [sp, #16]
 800a510:	46a2      	mov	sl, r4
 800a512:	e7d2      	b.n	800a4ba <_vfiprintf_r+0xe2>
 800a514:	9b03      	ldr	r3, [sp, #12]
 800a516:	1d19      	adds	r1, r3, #4
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	9103      	str	r1, [sp, #12]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	bfbb      	ittet	lt
 800a520:	425b      	neglt	r3, r3
 800a522:	f042 0202 	orrlt.w	r2, r2, #2
 800a526:	9307      	strge	r3, [sp, #28]
 800a528:	9307      	strlt	r3, [sp, #28]
 800a52a:	bfb8      	it	lt
 800a52c:	9204      	strlt	r2, [sp, #16]
 800a52e:	7823      	ldrb	r3, [r4, #0]
 800a530:	2b2e      	cmp	r3, #46	; 0x2e
 800a532:	d10c      	bne.n	800a54e <_vfiprintf_r+0x176>
 800a534:	7863      	ldrb	r3, [r4, #1]
 800a536:	2b2a      	cmp	r3, #42	; 0x2a
 800a538:	d135      	bne.n	800a5a6 <_vfiprintf_r+0x1ce>
 800a53a:	9b03      	ldr	r3, [sp, #12]
 800a53c:	1d1a      	adds	r2, r3, #4
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	9203      	str	r2, [sp, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	bfb8      	it	lt
 800a546:	f04f 33ff 	movlt.w	r3, #4294967295
 800a54a:	3402      	adds	r4, #2
 800a54c:	9305      	str	r3, [sp, #20]
 800a54e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a634 <_vfiprintf_r+0x25c>
 800a552:	7821      	ldrb	r1, [r4, #0]
 800a554:	2203      	movs	r2, #3
 800a556:	4650      	mov	r0, sl
 800a558:	f7f5 fe7a 	bl	8000250 <memchr>
 800a55c:	b140      	cbz	r0, 800a570 <_vfiprintf_r+0x198>
 800a55e:	2340      	movs	r3, #64	; 0x40
 800a560:	eba0 000a 	sub.w	r0, r0, sl
 800a564:	fa03 f000 	lsl.w	r0, r3, r0
 800a568:	9b04      	ldr	r3, [sp, #16]
 800a56a:	4303      	orrs	r3, r0
 800a56c:	3401      	adds	r4, #1
 800a56e:	9304      	str	r3, [sp, #16]
 800a570:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a574:	482c      	ldr	r0, [pc, #176]	; (800a628 <_vfiprintf_r+0x250>)
 800a576:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a57a:	2206      	movs	r2, #6
 800a57c:	f7f5 fe68 	bl	8000250 <memchr>
 800a580:	2800      	cmp	r0, #0
 800a582:	d03f      	beq.n	800a604 <_vfiprintf_r+0x22c>
 800a584:	4b29      	ldr	r3, [pc, #164]	; (800a62c <_vfiprintf_r+0x254>)
 800a586:	bb1b      	cbnz	r3, 800a5d0 <_vfiprintf_r+0x1f8>
 800a588:	9b03      	ldr	r3, [sp, #12]
 800a58a:	3307      	adds	r3, #7
 800a58c:	f023 0307 	bic.w	r3, r3, #7
 800a590:	3308      	adds	r3, #8
 800a592:	9303      	str	r3, [sp, #12]
 800a594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a596:	443b      	add	r3, r7
 800a598:	9309      	str	r3, [sp, #36]	; 0x24
 800a59a:	e767      	b.n	800a46c <_vfiprintf_r+0x94>
 800a59c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5a0:	460c      	mov	r4, r1
 800a5a2:	2001      	movs	r0, #1
 800a5a4:	e7a5      	b.n	800a4f2 <_vfiprintf_r+0x11a>
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	3401      	adds	r4, #1
 800a5aa:	9305      	str	r3, [sp, #20]
 800a5ac:	4619      	mov	r1, r3
 800a5ae:	f04f 0c0a 	mov.w	ip, #10
 800a5b2:	4620      	mov	r0, r4
 800a5b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5b8:	3a30      	subs	r2, #48	; 0x30
 800a5ba:	2a09      	cmp	r2, #9
 800a5bc:	d903      	bls.n	800a5c6 <_vfiprintf_r+0x1ee>
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d0c5      	beq.n	800a54e <_vfiprintf_r+0x176>
 800a5c2:	9105      	str	r1, [sp, #20]
 800a5c4:	e7c3      	b.n	800a54e <_vfiprintf_r+0x176>
 800a5c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e7f0      	b.n	800a5b2 <_vfiprintf_r+0x1da>
 800a5d0:	ab03      	add	r3, sp, #12
 800a5d2:	9300      	str	r3, [sp, #0]
 800a5d4:	462a      	mov	r2, r5
 800a5d6:	4b16      	ldr	r3, [pc, #88]	; (800a630 <_vfiprintf_r+0x258>)
 800a5d8:	a904      	add	r1, sp, #16
 800a5da:	4630      	mov	r0, r6
 800a5dc:	f7fb fe78 	bl	80062d0 <_printf_float>
 800a5e0:	4607      	mov	r7, r0
 800a5e2:	1c78      	adds	r0, r7, #1
 800a5e4:	d1d6      	bne.n	800a594 <_vfiprintf_r+0x1bc>
 800a5e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a5e8:	07d9      	lsls	r1, r3, #31
 800a5ea:	d405      	bmi.n	800a5f8 <_vfiprintf_r+0x220>
 800a5ec:	89ab      	ldrh	r3, [r5, #12]
 800a5ee:	059a      	lsls	r2, r3, #22
 800a5f0:	d402      	bmi.n	800a5f8 <_vfiprintf_r+0x220>
 800a5f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a5f4:	f7fe ff66 	bl	80094c4 <__retarget_lock_release_recursive>
 800a5f8:	89ab      	ldrh	r3, [r5, #12]
 800a5fa:	065b      	lsls	r3, r3, #25
 800a5fc:	f53f af12 	bmi.w	800a424 <_vfiprintf_r+0x4c>
 800a600:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a602:	e711      	b.n	800a428 <_vfiprintf_r+0x50>
 800a604:	ab03      	add	r3, sp, #12
 800a606:	9300      	str	r3, [sp, #0]
 800a608:	462a      	mov	r2, r5
 800a60a:	4b09      	ldr	r3, [pc, #36]	; (800a630 <_vfiprintf_r+0x258>)
 800a60c:	a904      	add	r1, sp, #16
 800a60e:	4630      	mov	r0, r6
 800a610:	f7fc f8ea 	bl	80067e8 <_printf_i>
 800a614:	e7e4      	b.n	800a5e0 <_vfiprintf_r+0x208>
 800a616:	bf00      	nop
 800a618:	0800b070 	.word	0x0800b070
 800a61c:	0800b090 	.word	0x0800b090
 800a620:	0800b050 	.word	0x0800b050
 800a624:	0800b28c 	.word	0x0800b28c
 800a628:	0800b296 	.word	0x0800b296
 800a62c:	080062d1 	.word	0x080062d1
 800a630:	0800a3b3 	.word	0x0800a3b3
 800a634:	0800b292 	.word	0x0800b292

0800a638 <_putc_r>:
 800a638:	b570      	push	{r4, r5, r6, lr}
 800a63a:	460d      	mov	r5, r1
 800a63c:	4614      	mov	r4, r2
 800a63e:	4606      	mov	r6, r0
 800a640:	b118      	cbz	r0, 800a64a <_putc_r+0x12>
 800a642:	6983      	ldr	r3, [r0, #24]
 800a644:	b90b      	cbnz	r3, 800a64a <_putc_r+0x12>
 800a646:	f7fe fb2b 	bl	8008ca0 <__sinit>
 800a64a:	4b1c      	ldr	r3, [pc, #112]	; (800a6bc <_putc_r+0x84>)
 800a64c:	429c      	cmp	r4, r3
 800a64e:	d124      	bne.n	800a69a <_putc_r+0x62>
 800a650:	6874      	ldr	r4, [r6, #4]
 800a652:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a654:	07d8      	lsls	r0, r3, #31
 800a656:	d405      	bmi.n	800a664 <_putc_r+0x2c>
 800a658:	89a3      	ldrh	r3, [r4, #12]
 800a65a:	0599      	lsls	r1, r3, #22
 800a65c:	d402      	bmi.n	800a664 <_putc_r+0x2c>
 800a65e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a660:	f7fe ff2f 	bl	80094c2 <__retarget_lock_acquire_recursive>
 800a664:	68a3      	ldr	r3, [r4, #8]
 800a666:	3b01      	subs	r3, #1
 800a668:	2b00      	cmp	r3, #0
 800a66a:	60a3      	str	r3, [r4, #8]
 800a66c:	da05      	bge.n	800a67a <_putc_r+0x42>
 800a66e:	69a2      	ldr	r2, [r4, #24]
 800a670:	4293      	cmp	r3, r2
 800a672:	db1c      	blt.n	800a6ae <_putc_r+0x76>
 800a674:	b2eb      	uxtb	r3, r5
 800a676:	2b0a      	cmp	r3, #10
 800a678:	d019      	beq.n	800a6ae <_putc_r+0x76>
 800a67a:	6823      	ldr	r3, [r4, #0]
 800a67c:	1c5a      	adds	r2, r3, #1
 800a67e:	6022      	str	r2, [r4, #0]
 800a680:	701d      	strb	r5, [r3, #0]
 800a682:	b2ed      	uxtb	r5, r5
 800a684:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a686:	07da      	lsls	r2, r3, #31
 800a688:	d405      	bmi.n	800a696 <_putc_r+0x5e>
 800a68a:	89a3      	ldrh	r3, [r4, #12]
 800a68c:	059b      	lsls	r3, r3, #22
 800a68e:	d402      	bmi.n	800a696 <_putc_r+0x5e>
 800a690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a692:	f7fe ff17 	bl	80094c4 <__retarget_lock_release_recursive>
 800a696:	4628      	mov	r0, r5
 800a698:	bd70      	pop	{r4, r5, r6, pc}
 800a69a:	4b09      	ldr	r3, [pc, #36]	; (800a6c0 <_putc_r+0x88>)
 800a69c:	429c      	cmp	r4, r3
 800a69e:	d101      	bne.n	800a6a4 <_putc_r+0x6c>
 800a6a0:	68b4      	ldr	r4, [r6, #8]
 800a6a2:	e7d6      	b.n	800a652 <_putc_r+0x1a>
 800a6a4:	4b07      	ldr	r3, [pc, #28]	; (800a6c4 <_putc_r+0x8c>)
 800a6a6:	429c      	cmp	r4, r3
 800a6a8:	bf08      	it	eq
 800a6aa:	68f4      	ldreq	r4, [r6, #12]
 800a6ac:	e7d1      	b.n	800a652 <_putc_r+0x1a>
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	4622      	mov	r2, r4
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	f7fd fb0a 	bl	8007ccc <__swbuf_r>
 800a6b8:	4605      	mov	r5, r0
 800a6ba:	e7e3      	b.n	800a684 <_putc_r+0x4c>
 800a6bc:	0800b070 	.word	0x0800b070
 800a6c0:	0800b090 	.word	0x0800b090
 800a6c4:	0800b050 	.word	0x0800b050

0800a6c8 <nan>:
 800a6c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a6d0 <nan+0x8>
 800a6cc:	4770      	bx	lr
 800a6ce:	bf00      	nop
 800a6d0:	00000000 	.word	0x00000000
 800a6d4:	7ff80000 	.word	0x7ff80000

0800a6d8 <_sbrk_r>:
 800a6d8:	b538      	push	{r3, r4, r5, lr}
 800a6da:	4d06      	ldr	r5, [pc, #24]	; (800a6f4 <_sbrk_r+0x1c>)
 800a6dc:	2300      	movs	r3, #0
 800a6de:	4604      	mov	r4, r0
 800a6e0:	4608      	mov	r0, r1
 800a6e2:	602b      	str	r3, [r5, #0]
 800a6e4:	f7f7 fcc8 	bl	8002078 <_sbrk>
 800a6e8:	1c43      	adds	r3, r0, #1
 800a6ea:	d102      	bne.n	800a6f2 <_sbrk_r+0x1a>
 800a6ec:	682b      	ldr	r3, [r5, #0]
 800a6ee:	b103      	cbz	r3, 800a6f2 <_sbrk_r+0x1a>
 800a6f0:	6023      	str	r3, [r4, #0]
 800a6f2:	bd38      	pop	{r3, r4, r5, pc}
 800a6f4:	2000051c 	.word	0x2000051c

0800a6f8 <__sread>:
 800a6f8:	b510      	push	{r4, lr}
 800a6fa:	460c      	mov	r4, r1
 800a6fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a700:	f000 f92e 	bl	800a960 <_read_r>
 800a704:	2800      	cmp	r0, #0
 800a706:	bfab      	itete	ge
 800a708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a70a:	89a3      	ldrhlt	r3, [r4, #12]
 800a70c:	181b      	addge	r3, r3, r0
 800a70e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a712:	bfac      	ite	ge
 800a714:	6563      	strge	r3, [r4, #84]	; 0x54
 800a716:	81a3      	strhlt	r3, [r4, #12]
 800a718:	bd10      	pop	{r4, pc}

0800a71a <__swrite>:
 800a71a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a71e:	461f      	mov	r7, r3
 800a720:	898b      	ldrh	r3, [r1, #12]
 800a722:	05db      	lsls	r3, r3, #23
 800a724:	4605      	mov	r5, r0
 800a726:	460c      	mov	r4, r1
 800a728:	4616      	mov	r6, r2
 800a72a:	d505      	bpl.n	800a738 <__swrite+0x1e>
 800a72c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a730:	2302      	movs	r3, #2
 800a732:	2200      	movs	r2, #0
 800a734:	f000 f8b6 	bl	800a8a4 <_lseek_r>
 800a738:	89a3      	ldrh	r3, [r4, #12]
 800a73a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a73e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a742:	81a3      	strh	r3, [r4, #12]
 800a744:	4632      	mov	r2, r6
 800a746:	463b      	mov	r3, r7
 800a748:	4628      	mov	r0, r5
 800a74a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a74e:	f000 b835 	b.w	800a7bc <_write_r>

0800a752 <__sseek>:
 800a752:	b510      	push	{r4, lr}
 800a754:	460c      	mov	r4, r1
 800a756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a75a:	f000 f8a3 	bl	800a8a4 <_lseek_r>
 800a75e:	1c43      	adds	r3, r0, #1
 800a760:	89a3      	ldrh	r3, [r4, #12]
 800a762:	bf15      	itete	ne
 800a764:	6560      	strne	r0, [r4, #84]	; 0x54
 800a766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a76a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a76e:	81a3      	strheq	r3, [r4, #12]
 800a770:	bf18      	it	ne
 800a772:	81a3      	strhne	r3, [r4, #12]
 800a774:	bd10      	pop	{r4, pc}

0800a776 <__sclose>:
 800a776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a77a:	f000 b84f 	b.w	800a81c <_close_r>

0800a77e <strncmp>:
 800a77e:	b510      	push	{r4, lr}
 800a780:	b16a      	cbz	r2, 800a79e <strncmp+0x20>
 800a782:	3901      	subs	r1, #1
 800a784:	1884      	adds	r4, r0, r2
 800a786:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a78a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a78e:	4293      	cmp	r3, r2
 800a790:	d103      	bne.n	800a79a <strncmp+0x1c>
 800a792:	42a0      	cmp	r0, r4
 800a794:	d001      	beq.n	800a79a <strncmp+0x1c>
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1f5      	bne.n	800a786 <strncmp+0x8>
 800a79a:	1a98      	subs	r0, r3, r2
 800a79c:	bd10      	pop	{r4, pc}
 800a79e:	4610      	mov	r0, r2
 800a7a0:	e7fc      	b.n	800a79c <strncmp+0x1e>

0800a7a2 <__ascii_wctomb>:
 800a7a2:	b149      	cbz	r1, 800a7b8 <__ascii_wctomb+0x16>
 800a7a4:	2aff      	cmp	r2, #255	; 0xff
 800a7a6:	bf85      	ittet	hi
 800a7a8:	238a      	movhi	r3, #138	; 0x8a
 800a7aa:	6003      	strhi	r3, [r0, #0]
 800a7ac:	700a      	strbls	r2, [r1, #0]
 800a7ae:	f04f 30ff 	movhi.w	r0, #4294967295
 800a7b2:	bf98      	it	ls
 800a7b4:	2001      	movls	r0, #1
 800a7b6:	4770      	bx	lr
 800a7b8:	4608      	mov	r0, r1
 800a7ba:	4770      	bx	lr

0800a7bc <_write_r>:
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	4d07      	ldr	r5, [pc, #28]	; (800a7dc <_write_r+0x20>)
 800a7c0:	4604      	mov	r4, r0
 800a7c2:	4608      	mov	r0, r1
 800a7c4:	4611      	mov	r1, r2
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	602a      	str	r2, [r5, #0]
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	f7f7 fc03 	bl	8001fd6 <_write>
 800a7d0:	1c43      	adds	r3, r0, #1
 800a7d2:	d102      	bne.n	800a7da <_write_r+0x1e>
 800a7d4:	682b      	ldr	r3, [r5, #0]
 800a7d6:	b103      	cbz	r3, 800a7da <_write_r+0x1e>
 800a7d8:	6023      	str	r3, [r4, #0]
 800a7da:	bd38      	pop	{r3, r4, r5, pc}
 800a7dc:	2000051c 	.word	0x2000051c

0800a7e0 <__assert_func>:
 800a7e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7e2:	4614      	mov	r4, r2
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	4b09      	ldr	r3, [pc, #36]	; (800a80c <__assert_func+0x2c>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4605      	mov	r5, r0
 800a7ec:	68d8      	ldr	r0, [r3, #12]
 800a7ee:	b14c      	cbz	r4, 800a804 <__assert_func+0x24>
 800a7f0:	4b07      	ldr	r3, [pc, #28]	; (800a810 <__assert_func+0x30>)
 800a7f2:	9100      	str	r1, [sp, #0]
 800a7f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7f8:	4906      	ldr	r1, [pc, #24]	; (800a814 <__assert_func+0x34>)
 800a7fa:	462b      	mov	r3, r5
 800a7fc:	f000 f81e 	bl	800a83c <fiprintf>
 800a800:	f000 f8c0 	bl	800a984 <abort>
 800a804:	4b04      	ldr	r3, [pc, #16]	; (800a818 <__assert_func+0x38>)
 800a806:	461c      	mov	r4, r3
 800a808:	e7f3      	b.n	800a7f2 <__assert_func+0x12>
 800a80a:	bf00      	nop
 800a80c:	20000014 	.word	0x20000014
 800a810:	0800b29d 	.word	0x0800b29d
 800a814:	0800b2aa 	.word	0x0800b2aa
 800a818:	0800b2d8 	.word	0x0800b2d8

0800a81c <_close_r>:
 800a81c:	b538      	push	{r3, r4, r5, lr}
 800a81e:	4d06      	ldr	r5, [pc, #24]	; (800a838 <_close_r+0x1c>)
 800a820:	2300      	movs	r3, #0
 800a822:	4604      	mov	r4, r0
 800a824:	4608      	mov	r0, r1
 800a826:	602b      	str	r3, [r5, #0]
 800a828:	f7f7 fbf1 	bl	800200e <_close>
 800a82c:	1c43      	adds	r3, r0, #1
 800a82e:	d102      	bne.n	800a836 <_close_r+0x1a>
 800a830:	682b      	ldr	r3, [r5, #0]
 800a832:	b103      	cbz	r3, 800a836 <_close_r+0x1a>
 800a834:	6023      	str	r3, [r4, #0]
 800a836:	bd38      	pop	{r3, r4, r5, pc}
 800a838:	2000051c 	.word	0x2000051c

0800a83c <fiprintf>:
 800a83c:	b40e      	push	{r1, r2, r3}
 800a83e:	b503      	push	{r0, r1, lr}
 800a840:	4601      	mov	r1, r0
 800a842:	ab03      	add	r3, sp, #12
 800a844:	4805      	ldr	r0, [pc, #20]	; (800a85c <fiprintf+0x20>)
 800a846:	f853 2b04 	ldr.w	r2, [r3], #4
 800a84a:	6800      	ldr	r0, [r0, #0]
 800a84c:	9301      	str	r3, [sp, #4]
 800a84e:	f7ff fdc3 	bl	800a3d8 <_vfiprintf_r>
 800a852:	b002      	add	sp, #8
 800a854:	f85d eb04 	ldr.w	lr, [sp], #4
 800a858:	b003      	add	sp, #12
 800a85a:	4770      	bx	lr
 800a85c:	20000014 	.word	0x20000014

0800a860 <_fstat_r>:
 800a860:	b538      	push	{r3, r4, r5, lr}
 800a862:	4d07      	ldr	r5, [pc, #28]	; (800a880 <_fstat_r+0x20>)
 800a864:	2300      	movs	r3, #0
 800a866:	4604      	mov	r4, r0
 800a868:	4608      	mov	r0, r1
 800a86a:	4611      	mov	r1, r2
 800a86c:	602b      	str	r3, [r5, #0]
 800a86e:	f7f7 fbda 	bl	8002026 <_fstat>
 800a872:	1c43      	adds	r3, r0, #1
 800a874:	d102      	bne.n	800a87c <_fstat_r+0x1c>
 800a876:	682b      	ldr	r3, [r5, #0]
 800a878:	b103      	cbz	r3, 800a87c <_fstat_r+0x1c>
 800a87a:	6023      	str	r3, [r4, #0]
 800a87c:	bd38      	pop	{r3, r4, r5, pc}
 800a87e:	bf00      	nop
 800a880:	2000051c 	.word	0x2000051c

0800a884 <_isatty_r>:
 800a884:	b538      	push	{r3, r4, r5, lr}
 800a886:	4d06      	ldr	r5, [pc, #24]	; (800a8a0 <_isatty_r+0x1c>)
 800a888:	2300      	movs	r3, #0
 800a88a:	4604      	mov	r4, r0
 800a88c:	4608      	mov	r0, r1
 800a88e:	602b      	str	r3, [r5, #0]
 800a890:	f7f7 fbd9 	bl	8002046 <_isatty>
 800a894:	1c43      	adds	r3, r0, #1
 800a896:	d102      	bne.n	800a89e <_isatty_r+0x1a>
 800a898:	682b      	ldr	r3, [r5, #0]
 800a89a:	b103      	cbz	r3, 800a89e <_isatty_r+0x1a>
 800a89c:	6023      	str	r3, [r4, #0]
 800a89e:	bd38      	pop	{r3, r4, r5, pc}
 800a8a0:	2000051c 	.word	0x2000051c

0800a8a4 <_lseek_r>:
 800a8a4:	b538      	push	{r3, r4, r5, lr}
 800a8a6:	4d07      	ldr	r5, [pc, #28]	; (800a8c4 <_lseek_r+0x20>)
 800a8a8:	4604      	mov	r4, r0
 800a8aa:	4608      	mov	r0, r1
 800a8ac:	4611      	mov	r1, r2
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	602a      	str	r2, [r5, #0]
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	f7f7 fbd2 	bl	800205c <_lseek>
 800a8b8:	1c43      	adds	r3, r0, #1
 800a8ba:	d102      	bne.n	800a8c2 <_lseek_r+0x1e>
 800a8bc:	682b      	ldr	r3, [r5, #0]
 800a8be:	b103      	cbz	r3, 800a8c2 <_lseek_r+0x1e>
 800a8c0:	6023      	str	r3, [r4, #0]
 800a8c2:	bd38      	pop	{r3, r4, r5, pc}
 800a8c4:	2000051c 	.word	0x2000051c

0800a8c8 <memmove>:
 800a8c8:	4288      	cmp	r0, r1
 800a8ca:	b510      	push	{r4, lr}
 800a8cc:	eb01 0402 	add.w	r4, r1, r2
 800a8d0:	d902      	bls.n	800a8d8 <memmove+0x10>
 800a8d2:	4284      	cmp	r4, r0
 800a8d4:	4623      	mov	r3, r4
 800a8d6:	d807      	bhi.n	800a8e8 <memmove+0x20>
 800a8d8:	1e43      	subs	r3, r0, #1
 800a8da:	42a1      	cmp	r1, r4
 800a8dc:	d008      	beq.n	800a8f0 <memmove+0x28>
 800a8de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a8e6:	e7f8      	b.n	800a8da <memmove+0x12>
 800a8e8:	4402      	add	r2, r0
 800a8ea:	4601      	mov	r1, r0
 800a8ec:	428a      	cmp	r2, r1
 800a8ee:	d100      	bne.n	800a8f2 <memmove+0x2a>
 800a8f0:	bd10      	pop	{r4, pc}
 800a8f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a8f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a8fa:	e7f7      	b.n	800a8ec <memmove+0x24>

0800a8fc <__malloc_lock>:
 800a8fc:	4801      	ldr	r0, [pc, #4]	; (800a904 <__malloc_lock+0x8>)
 800a8fe:	f7fe bde0 	b.w	80094c2 <__retarget_lock_acquire_recursive>
 800a902:	bf00      	nop
 800a904:	20000514 	.word	0x20000514

0800a908 <__malloc_unlock>:
 800a908:	4801      	ldr	r0, [pc, #4]	; (800a910 <__malloc_unlock+0x8>)
 800a90a:	f7fe bddb 	b.w	80094c4 <__retarget_lock_release_recursive>
 800a90e:	bf00      	nop
 800a910:	20000514 	.word	0x20000514

0800a914 <_realloc_r>:
 800a914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a916:	4607      	mov	r7, r0
 800a918:	4614      	mov	r4, r2
 800a91a:	460e      	mov	r6, r1
 800a91c:	b921      	cbnz	r1, 800a928 <_realloc_r+0x14>
 800a91e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a922:	4611      	mov	r1, r2
 800a924:	f7ff bb78 	b.w	800a018 <_malloc_r>
 800a928:	b922      	cbnz	r2, 800a934 <_realloc_r+0x20>
 800a92a:	f7ff fb25 	bl	8009f78 <_free_r>
 800a92e:	4625      	mov	r5, r4
 800a930:	4628      	mov	r0, r5
 800a932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a934:	f000 f82d 	bl	800a992 <_malloc_usable_size_r>
 800a938:	42a0      	cmp	r0, r4
 800a93a:	d20f      	bcs.n	800a95c <_realloc_r+0x48>
 800a93c:	4621      	mov	r1, r4
 800a93e:	4638      	mov	r0, r7
 800a940:	f7ff fb6a 	bl	800a018 <_malloc_r>
 800a944:	4605      	mov	r5, r0
 800a946:	2800      	cmp	r0, #0
 800a948:	d0f2      	beq.n	800a930 <_realloc_r+0x1c>
 800a94a:	4631      	mov	r1, r6
 800a94c:	4622      	mov	r2, r4
 800a94e:	f7fe fe39 	bl	80095c4 <memcpy>
 800a952:	4631      	mov	r1, r6
 800a954:	4638      	mov	r0, r7
 800a956:	f7ff fb0f 	bl	8009f78 <_free_r>
 800a95a:	e7e9      	b.n	800a930 <_realloc_r+0x1c>
 800a95c:	4635      	mov	r5, r6
 800a95e:	e7e7      	b.n	800a930 <_realloc_r+0x1c>

0800a960 <_read_r>:
 800a960:	b538      	push	{r3, r4, r5, lr}
 800a962:	4d07      	ldr	r5, [pc, #28]	; (800a980 <_read_r+0x20>)
 800a964:	4604      	mov	r4, r0
 800a966:	4608      	mov	r0, r1
 800a968:	4611      	mov	r1, r2
 800a96a:	2200      	movs	r2, #0
 800a96c:	602a      	str	r2, [r5, #0]
 800a96e:	461a      	mov	r2, r3
 800a970:	f7f7 fb14 	bl	8001f9c <_read>
 800a974:	1c43      	adds	r3, r0, #1
 800a976:	d102      	bne.n	800a97e <_read_r+0x1e>
 800a978:	682b      	ldr	r3, [r5, #0]
 800a97a:	b103      	cbz	r3, 800a97e <_read_r+0x1e>
 800a97c:	6023      	str	r3, [r4, #0]
 800a97e:	bd38      	pop	{r3, r4, r5, pc}
 800a980:	2000051c 	.word	0x2000051c

0800a984 <abort>:
 800a984:	b508      	push	{r3, lr}
 800a986:	2006      	movs	r0, #6
 800a988:	f000 f834 	bl	800a9f4 <raise>
 800a98c:	2001      	movs	r0, #1
 800a98e:	f7f7 fafb 	bl	8001f88 <_exit>

0800a992 <_malloc_usable_size_r>:
 800a992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a996:	1f18      	subs	r0, r3, #4
 800a998:	2b00      	cmp	r3, #0
 800a99a:	bfbc      	itt	lt
 800a99c:	580b      	ldrlt	r3, [r1, r0]
 800a99e:	18c0      	addlt	r0, r0, r3
 800a9a0:	4770      	bx	lr

0800a9a2 <_raise_r>:
 800a9a2:	291f      	cmp	r1, #31
 800a9a4:	b538      	push	{r3, r4, r5, lr}
 800a9a6:	4604      	mov	r4, r0
 800a9a8:	460d      	mov	r5, r1
 800a9aa:	d904      	bls.n	800a9b6 <_raise_r+0x14>
 800a9ac:	2316      	movs	r3, #22
 800a9ae:	6003      	str	r3, [r0, #0]
 800a9b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b4:	bd38      	pop	{r3, r4, r5, pc}
 800a9b6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9b8:	b112      	cbz	r2, 800a9c0 <_raise_r+0x1e>
 800a9ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9be:	b94b      	cbnz	r3, 800a9d4 <_raise_r+0x32>
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f000 f831 	bl	800aa28 <_getpid_r>
 800a9c6:	462a      	mov	r2, r5
 800a9c8:	4601      	mov	r1, r0
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9d0:	f000 b818 	b.w	800aa04 <_kill_r>
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d00a      	beq.n	800a9ee <_raise_r+0x4c>
 800a9d8:	1c59      	adds	r1, r3, #1
 800a9da:	d103      	bne.n	800a9e4 <_raise_r+0x42>
 800a9dc:	2316      	movs	r3, #22
 800a9de:	6003      	str	r3, [r0, #0]
 800a9e0:	2001      	movs	r0, #1
 800a9e2:	e7e7      	b.n	800a9b4 <_raise_r+0x12>
 800a9e4:	2400      	movs	r4, #0
 800a9e6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	4798      	blx	r3
 800a9ee:	2000      	movs	r0, #0
 800a9f0:	e7e0      	b.n	800a9b4 <_raise_r+0x12>
	...

0800a9f4 <raise>:
 800a9f4:	4b02      	ldr	r3, [pc, #8]	; (800aa00 <raise+0xc>)
 800a9f6:	4601      	mov	r1, r0
 800a9f8:	6818      	ldr	r0, [r3, #0]
 800a9fa:	f7ff bfd2 	b.w	800a9a2 <_raise_r>
 800a9fe:	bf00      	nop
 800aa00:	20000014 	.word	0x20000014

0800aa04 <_kill_r>:
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	4d07      	ldr	r5, [pc, #28]	; (800aa24 <_kill_r+0x20>)
 800aa08:	2300      	movs	r3, #0
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	4608      	mov	r0, r1
 800aa0e:	4611      	mov	r1, r2
 800aa10:	602b      	str	r3, [r5, #0]
 800aa12:	f7f7 faa9 	bl	8001f68 <_kill>
 800aa16:	1c43      	adds	r3, r0, #1
 800aa18:	d102      	bne.n	800aa20 <_kill_r+0x1c>
 800aa1a:	682b      	ldr	r3, [r5, #0]
 800aa1c:	b103      	cbz	r3, 800aa20 <_kill_r+0x1c>
 800aa1e:	6023      	str	r3, [r4, #0]
 800aa20:	bd38      	pop	{r3, r4, r5, pc}
 800aa22:	bf00      	nop
 800aa24:	2000051c 	.word	0x2000051c

0800aa28 <_getpid_r>:
 800aa28:	f7f7 ba96 	b.w	8001f58 <_getpid>

0800aa2c <_init>:
 800aa2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa2e:	bf00      	nop
 800aa30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa32:	bc08      	pop	{r3}
 800aa34:	469e      	mov	lr, r3
 800aa36:	4770      	bx	lr

0800aa38 <_fini>:
 800aa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa3a:	bf00      	nop
 800aa3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa3e:	bc08      	pop	{r3}
 800aa40:	469e      	mov	lr, r3
 800aa42:	4770      	bx	lr
