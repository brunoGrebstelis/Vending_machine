
Vending_machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000baec  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000079c  0800bcf0  0800bcf0  0001bcf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c48c  0800c48c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c48c  0800c48c  0001c48c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c494  0800c494  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c494  0800c494  0001c494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c498  0800c498  0001c498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c49c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  200001e8  0800c680  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006ac  0800c680  000206ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e3ea  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003592  00000000  00000000  0003e5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00041b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  00042b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004f06  00000000  00000000  00043928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015f50  00000000  00000000  0004882e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7054  00000000  00000000  0005e77e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001557d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052ac  00000000  00000000  00155828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e8 	.word	0x200001e8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800bcd4 	.word	0x0800bcd4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ec 	.word	0x200001ec
 800023c:	0800bcd4 	.word	0x0800bcd4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <init_application>:

//static uint64_t lastTime1 = 0;
//static uint64_t lastTime2 = 0;
//static int sensorIndex = 0;

void init_application(){
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
	printf("STM32 SPI Slave Ready\r\n"); // Print ready message
 80009d6:	4815      	ldr	r0, [pc, #84]	; (8000a2c <init_application+0x5c>)
 80009d8:	f007 fc20 	bl	800821c <puts>
	//HAL_SPI_Receive_IT(&hspi1, spi_rx_buffer, SPI_BUFFER_SIZE);
	HAL_SPI_TransmitReceive_IT(&hspi1, spi_tx_buffer, spi_rx_buffer, SPI_BUFFER_SIZE);
 80009dc:	2306      	movs	r3, #6
 80009de:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <init_application+0x60>)
 80009e0:	4914      	ldr	r1, [pc, #80]	; (8000a34 <init_application+0x64>)
 80009e2:	4815      	ldr	r0, [pc, #84]	; (8000a38 <init_application+0x68>)
 80009e4:	f005 fa94 	bl	8005f10 <HAL_SPI_TransmitReceive_IT>
	//setFanMode();

	uint8_t red = 255;
 80009e8:	23ff      	movs	r3, #255	; 0xff
 80009ea:	70fb      	strb	r3, [r7, #3]
	uint8_t green = 255;
 80009ec:	23ff      	movs	r3, #255	; 0xff
 80009ee:	70bb      	strb	r3, [r7, #2]
	uint8_t blue = 255;
 80009f0:	23ff      	movs	r3, #255	; 0xff
 80009f2:	707b      	strb	r3, [r7, #1]
	uint8_t mode = 0xFF;
 80009f4:	23ff      	movs	r3, #255	; 0xff
 80009f6:	703b      	strb	r3, [r7, #0]

	//CheckTemperature(SENSOR_AHT20_6);



    for(int i = 1; i <= 14; i++) {
 80009f8:	2301      	movs	r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	e00e      	b.n	8000a1c <init_application+0x4c>
    	Send_Price(i, 0x00, 0x0A);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	220a      	movs	r2, #10
 8000a04:	2100      	movs	r1, #0
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fb92 	bl	8001130 <Send_Price>

        //Send_RGB(i + 100, red, green, blue, mode);
        open_cabinet(i);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	4618      	mov	r0, r3
 8000a12:	f000 fbd1 	bl	80011b8 <open_cabinet>
    for(int i = 1; i <= 14; i++) {
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b0e      	cmp	r3, #14
 8000a20:	dded      	ble.n	80009fe <init_application+0x2e>

    }


}
 8000a22:	bf00      	nop
 8000a24:	bf00      	nop
 8000a26:	3708      	adds	r7, #8
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	0800bcf0 	.word	0x0800bcf0
 8000a30:	20000680 	.word	0x20000680
 8000a34:	20000688 	.word	0x20000688
 8000a38:	200004d8 	.word	0x200004d8

08000a3c <loop_application>:

void loop_application(){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0


	if(getSPIFlag()){
 8000a40:	f000 ffea 	bl	8001a18 <getSPIFlag>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d004      	beq.n	8000a54 <loop_application+0x18>
		Process_SPI_Command(rpi_msg, SPI_BUFFER_SIZE);
 8000a4a:	2106      	movs	r1, #6
 8000a4c:	4812      	ldr	r0, [pc, #72]	; (8000a98 <loop_application+0x5c>)
 8000a4e:	f001 f82d 	bl	8001aac <Process_SPI_Command>
		    sensorIndex = (sensorIndex + 1) % 4;
		}
		*/
	}

}
 8000a52:	e01e      	b.n	8000a92 <loop_application+0x56>
		if(getSendSPIFlag() && get_error_flag()) HandleState();
 8000a54:	f000 ffec 	bl	8001a30 <getSendSPIFlag>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d006      	beq.n	8000a6c <loop_application+0x30>
 8000a5e:	f000 f9df 	bl	8000e20 <get_error_flag>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <loop_application+0x30>
 8000a68:	f000 f9f2 	bl	8000e50 <HandleState>
		if(getSendSPIFlag() && get_locker_flag()) CheckAllLockersAfterDelay();
 8000a6c:	f000 ffe0 	bl	8001a30 <getSendSPIFlag>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d006      	beq.n	8000a84 <loop_application+0x48>
 8000a76:	f000 f9df 	bl	8000e38 <get_locker_flag>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <loop_application+0x48>
 8000a80:	f000 fab4 	bl	8000fec <CheckAllLockersAfterDelay>
		if(getClimateFlag()) setFanMode();
 8000a84:	f000 f81a 	bl	8000abc <getClimateFlag>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <loop_application+0x56>
 8000a8e:	f000 f821 	bl	8000ad4 <setFanMode>
}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000690 	.word	0x20000690

08000a9c <setClimateFlag>:
bool climate_flag = false;
bool auto_flag = false;



void setClimateFlag(bool flag){
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
	climate_flag = flag;
 8000aa6:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <setClimateFlag+0x1c>)
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	7013      	strb	r3, [r2, #0]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	20000204 	.word	0x20000204

08000abc <getClimateFlag>:
bool getClimateFlag(){
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
	return climate_flag;
 8000ac0:	4b03      	ldr	r3, [pc, #12]	; (8000ad0 <getClimateFlag+0x14>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	20000204 	.word	0x20000204

08000ad4 <setFanMode>:
}
bool getAutoFlag(){
	return auto_flag;
}

void setFanMode(){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
    switch (fanMode){
 8000ad8:	4bcc      	ldr	r3, [pc, #816]	; (8000e0c <setFanMode+0x338>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b07      	cmp	r3, #7
 8000ade:	dc19      	bgt.n	8000b14 <setFanMode+0x40>
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	f2c0 816b 	blt.w	8000dbc <setFanMode+0x2e8>
 8000ae6:	2b07      	cmp	r3, #7
 8000ae8:	f200 8168 	bhi.w	8000dbc <setFanMode+0x2e8>
 8000aec:	a201      	add	r2, pc, #4	; (adr r2, 8000af4 <setFanMode+0x20>)
 8000aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af2:	bf00      	nop
 8000af4:	08000b1d 	.word	0x08000b1d
 8000af8:	08000b67 	.word	0x08000b67
 8000afc:	08000bb1 	.word	0x08000bb1
 8000b00:	08000bfb 	.word	0x08000bfb
 8000b04:	08000c45 	.word	0x08000c45
 8000b08:	08000c8f 	.word	0x08000c8f
 8000b0c:	08000cd9 	.word	0x08000cd9
 8000b10:	08000d23 	.word	0x08000d23
 8000b14:	2bff      	cmp	r3, #255	; 0xff
 8000b16:	f000 8129 	beq.w	8000d6c <setFanMode+0x298>
 8000b1a:	e14f      	b.n	8000dbc <setFanMode+0x2e8>
        case 0:
            // All OFF
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, RESET);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2104      	movs	r1, #4
 8000b20:	48bb      	ldr	r0, [pc, #748]	; (8000e10 <setFanMode+0x33c>)
 8000b22:	f002 fb4f 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2108      	movs	r1, #8
 8000b2a:	48b9      	ldr	r0, [pc, #740]	; (8000e10 <setFanMode+0x33c>)
 8000b2c:	f002 fb4a 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, RESET);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2110      	movs	r1, #16
 8000b34:	48b6      	ldr	r0, [pc, #728]	; (8000e10 <setFanMode+0x33c>)
 8000b36:	f002 fb45 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, RESET);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2120      	movs	r1, #32
 8000b3e:	48b4      	ldr	r0, [pc, #720]	; (8000e10 <setFanMode+0x33c>)
 8000b40:	f002 fb40 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, RESET);
 8000b44:	2200      	movs	r2, #0
 8000b46:	2140      	movs	r1, #64	; 0x40
 8000b48:	48b1      	ldr	r0, [pc, #708]	; (8000e10 <setFanMode+0x33c>)
 8000b4a:	f002 fb3b 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, RESET);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2180      	movs	r1, #128	; 0x80
 8000b52:	48af      	ldr	r0, [pc, #700]	; (8000e10 <setFanMode+0x33c>)
 8000b54:	f002 fb36 	bl	80031c4 <HAL_GPIO_WritePin>
            climate_flag = false;
 8000b58:	4bae      	ldr	r3, [pc, #696]	; (8000e14 <setFanMode+0x340>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	701a      	strb	r2, [r3, #0]
            auto_flag = false;
 8000b5e:	4bae      	ldr	r3, [pc, #696]	; (8000e18 <setFanMode+0x344>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
            break;
 8000b64:	e14f      	b.n	8000e06 <setFanMode+0x332>

        case 1:
            // Fan1 ON, others OFF
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, SET);
 8000b66:	2201      	movs	r2, #1
 8000b68:	2104      	movs	r1, #4
 8000b6a:	48a9      	ldr	r0, [pc, #676]	; (8000e10 <setFanMode+0x33c>)
 8000b6c:	f002 fb2a 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2108      	movs	r1, #8
 8000b74:	48a6      	ldr	r0, [pc, #664]	; (8000e10 <setFanMode+0x33c>)
 8000b76:	f002 fb25 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, RESET);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2110      	movs	r1, #16
 8000b7e:	48a4      	ldr	r0, [pc, #656]	; (8000e10 <setFanMode+0x33c>)
 8000b80:	f002 fb20 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	2120      	movs	r1, #32
 8000b88:	48a1      	ldr	r0, [pc, #644]	; (8000e10 <setFanMode+0x33c>)
 8000b8a:	f002 fb1b 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, RESET);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2140      	movs	r1, #64	; 0x40
 8000b92:	489f      	ldr	r0, [pc, #636]	; (8000e10 <setFanMode+0x33c>)
 8000b94:	f002 fb16 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2180      	movs	r1, #128	; 0x80
 8000b9c:	489c      	ldr	r0, [pc, #624]	; (8000e10 <setFanMode+0x33c>)
 8000b9e:	f002 fb11 	bl	80031c4 <HAL_GPIO_WritePin>
            climate_flag = false;
 8000ba2:	4b9c      	ldr	r3, [pc, #624]	; (8000e14 <setFanMode+0x340>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	701a      	strb	r2, [r3, #0]
            auto_flag = false;
 8000ba8:	4b9b      	ldr	r3, [pc, #620]	; (8000e18 <setFanMode+0x344>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
            break;
 8000bae:	e12a      	b.n	8000e06 <setFanMode+0x332>

        case 2:
            // Fan2 ON, others OFF
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, RESET);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	2104      	movs	r1, #4
 8000bb4:	4896      	ldr	r0, [pc, #600]	; (8000e10 <setFanMode+0x33c>)
 8000bb6:	f002 fb05 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, SET);
 8000bba:	2201      	movs	r2, #1
 8000bbc:	2108      	movs	r1, #8
 8000bbe:	4894      	ldr	r0, [pc, #592]	; (8000e10 <setFanMode+0x33c>)
 8000bc0:	f002 fb00 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	2110      	movs	r1, #16
 8000bc8:	4891      	ldr	r0, [pc, #580]	; (8000e10 <setFanMode+0x33c>)
 8000bca:	f002 fafb 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2120      	movs	r1, #32
 8000bd2:	488f      	ldr	r0, [pc, #572]	; (8000e10 <setFanMode+0x33c>)
 8000bd4:	f002 faf6 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2140      	movs	r1, #64	; 0x40
 8000bdc:	488c      	ldr	r0, [pc, #560]	; (8000e10 <setFanMode+0x33c>)
 8000bde:	f002 faf1 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2180      	movs	r1, #128	; 0x80
 8000be6:	488a      	ldr	r0, [pc, #552]	; (8000e10 <setFanMode+0x33c>)
 8000be8:	f002 faec 	bl	80031c4 <HAL_GPIO_WritePin>
            climate_flag = false;
 8000bec:	4b89      	ldr	r3, [pc, #548]	; (8000e14 <setFanMode+0x340>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	701a      	strb	r2, [r3, #0]
            auto_flag = false;
 8000bf2:	4b89      	ldr	r3, [pc, #548]	; (8000e18 <setFanMode+0x344>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
            break;
 8000bf8:	e105      	b.n	8000e06 <setFanMode+0x332>

        case 3:
            // Fan3 ON, others OFF
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, RESET);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2104      	movs	r1, #4
 8000bfe:	4884      	ldr	r0, [pc, #528]	; (8000e10 <setFanMode+0x33c>)
 8000c00:	f002 fae0 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, RESET);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2108      	movs	r1, #8
 8000c08:	4881      	ldr	r0, [pc, #516]	; (8000e10 <setFanMode+0x33c>)
 8000c0a:	f002 fadb 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, SET);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2110      	movs	r1, #16
 8000c12:	487f      	ldr	r0, [pc, #508]	; (8000e10 <setFanMode+0x33c>)
 8000c14:	f002 fad6 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, RESET);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2120      	movs	r1, #32
 8000c1c:	487c      	ldr	r0, [pc, #496]	; (8000e10 <setFanMode+0x33c>)
 8000c1e:	f002 fad1 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2140      	movs	r1, #64	; 0x40
 8000c26:	487a      	ldr	r0, [pc, #488]	; (8000e10 <setFanMode+0x33c>)
 8000c28:	f002 facc 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, RESET);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2180      	movs	r1, #128	; 0x80
 8000c30:	4877      	ldr	r0, [pc, #476]	; (8000e10 <setFanMode+0x33c>)
 8000c32:	f002 fac7 	bl	80031c4 <HAL_GPIO_WritePin>
            climate_flag = false;
 8000c36:	4b77      	ldr	r3, [pc, #476]	; (8000e14 <setFanMode+0x340>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
            auto_flag = false;
 8000c3c:	4b76      	ldr	r3, [pc, #472]	; (8000e18 <setFanMode+0x344>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	701a      	strb	r2, [r3, #0]
            break;
 8000c42:	e0e0      	b.n	8000e06 <setFanMode+0x332>

        case 4:
            // Fan1 & Fan2 ON, Fan3 OFF
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, SET);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2104      	movs	r1, #4
 8000c48:	4871      	ldr	r0, [pc, #452]	; (8000e10 <setFanMode+0x33c>)
 8000c4a:	f002 fabb 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, SET);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2108      	movs	r1, #8
 8000c52:	486f      	ldr	r0, [pc, #444]	; (8000e10 <setFanMode+0x33c>)
 8000c54:	f002 fab6 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	486c      	ldr	r0, [pc, #432]	; (8000e10 <setFanMode+0x33c>)
 8000c5e:	f002 fab1 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, RESET);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2120      	movs	r1, #32
 8000c66:	486a      	ldr	r0, [pc, #424]	; (8000e10 <setFanMode+0x33c>)
 8000c68:	f002 faac 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, RESET);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	2140      	movs	r1, #64	; 0x40
 8000c70:	4867      	ldr	r0, [pc, #412]	; (8000e10 <setFanMode+0x33c>)
 8000c72:	f002 faa7 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2180      	movs	r1, #128	; 0x80
 8000c7a:	4865      	ldr	r0, [pc, #404]	; (8000e10 <setFanMode+0x33c>)
 8000c7c:	f002 faa2 	bl	80031c4 <HAL_GPIO_WritePin>
            climate_flag = false;
 8000c80:	4b64      	ldr	r3, [pc, #400]	; (8000e14 <setFanMode+0x340>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	701a      	strb	r2, [r3, #0]
            auto_flag = false;
 8000c86:	4b64      	ldr	r3, [pc, #400]	; (8000e18 <setFanMode+0x344>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	701a      	strb	r2, [r3, #0]
            break;
 8000c8c:	e0bb      	b.n	8000e06 <setFanMode+0x332>

        case 5:
            // Fan1 & Fan3 ON, Fan2 OFF
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, SET);
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2104      	movs	r1, #4
 8000c92:	485f      	ldr	r0, [pc, #380]	; (8000e10 <setFanMode+0x33c>)
 8000c94:	f002 fa96 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, RESET);
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2108      	movs	r1, #8
 8000c9c:	485c      	ldr	r0, [pc, #368]	; (8000e10 <setFanMode+0x33c>)
 8000c9e:	f002 fa91 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, SET);
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2110      	movs	r1, #16
 8000ca6:	485a      	ldr	r0, [pc, #360]	; (8000e10 <setFanMode+0x33c>)
 8000ca8:	f002 fa8c 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, RESET);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2120      	movs	r1, #32
 8000cb0:	4857      	ldr	r0, [pc, #348]	; (8000e10 <setFanMode+0x33c>)
 8000cb2:	f002 fa87 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2140      	movs	r1, #64	; 0x40
 8000cba:	4855      	ldr	r0, [pc, #340]	; (8000e10 <setFanMode+0x33c>)
 8000cbc:	f002 fa82 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, RESET);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2180      	movs	r1, #128	; 0x80
 8000cc4:	4852      	ldr	r0, [pc, #328]	; (8000e10 <setFanMode+0x33c>)
 8000cc6:	f002 fa7d 	bl	80031c4 <HAL_GPIO_WritePin>
            climate_flag = false;
 8000cca:	4b52      	ldr	r3, [pc, #328]	; (8000e14 <setFanMode+0x340>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
            auto_flag = false;
 8000cd0:	4b51      	ldr	r3, [pc, #324]	; (8000e18 <setFanMode+0x344>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
            break;
 8000cd6:	e096      	b.n	8000e06 <setFanMode+0x332>

        case 6:
            // Fan2 & Fan3 ON, Fan1 OFF
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, RESET);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	2104      	movs	r1, #4
 8000cdc:	484c      	ldr	r0, [pc, #304]	; (8000e10 <setFanMode+0x33c>)
 8000cde:	f002 fa71 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2108      	movs	r1, #8
 8000ce6:	484a      	ldr	r0, [pc, #296]	; (8000e10 <setFanMode+0x33c>)
 8000ce8:	f002 fa6c 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	2110      	movs	r1, #16
 8000cf0:	4847      	ldr	r0, [pc, #284]	; (8000e10 <setFanMode+0x33c>)
 8000cf2:	f002 fa67 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	2120      	movs	r1, #32
 8000cfa:	4845      	ldr	r0, [pc, #276]	; (8000e10 <setFanMode+0x33c>)
 8000cfc:	f002 fa62 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, RESET);
 8000d00:	2200      	movs	r2, #0
 8000d02:	2140      	movs	r1, #64	; 0x40
 8000d04:	4842      	ldr	r0, [pc, #264]	; (8000e10 <setFanMode+0x33c>)
 8000d06:	f002 fa5d 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2180      	movs	r1, #128	; 0x80
 8000d0e:	4840      	ldr	r0, [pc, #256]	; (8000e10 <setFanMode+0x33c>)
 8000d10:	f002 fa58 	bl	80031c4 <HAL_GPIO_WritePin>
            climate_flag = false;
 8000d14:	4b3f      	ldr	r3, [pc, #252]	; (8000e14 <setFanMode+0x340>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
            auto_flag = false;
 8000d1a:	4b3f      	ldr	r3, [pc, #252]	; (8000e18 <setFanMode+0x344>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	701a      	strb	r2, [r3, #0]
            break;
 8000d20:	e071      	b.n	8000e06 <setFanMode+0x332>

        case 7:
            // Fan1, Fan2, Fan3 all ON
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	2104      	movs	r1, #4
 8000d26:	483a      	ldr	r0, [pc, #232]	; (8000e10 <setFanMode+0x33c>)
 8000d28:	f002 fa4c 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, SET);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2108      	movs	r1, #8
 8000d30:	4837      	ldr	r0, [pc, #220]	; (8000e10 <setFanMode+0x33c>)
 8000d32:	f002 fa47 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	2110      	movs	r1, #16
 8000d3a:	4835      	ldr	r0, [pc, #212]	; (8000e10 <setFanMode+0x33c>)
 8000d3c:	f002 fa42 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	2120      	movs	r1, #32
 8000d44:	4832      	ldr	r0, [pc, #200]	; (8000e10 <setFanMode+0x33c>)
 8000d46:	f002 fa3d 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, RESET);
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	2140      	movs	r1, #64	; 0x40
 8000d4e:	4830      	ldr	r0, [pc, #192]	; (8000e10 <setFanMode+0x33c>)
 8000d50:	f002 fa38 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	2180      	movs	r1, #128	; 0x80
 8000d58:	482d      	ldr	r0, [pc, #180]	; (8000e10 <setFanMode+0x33c>)
 8000d5a:	f002 fa33 	bl	80031c4 <HAL_GPIO_WritePin>
            climate_flag = false;
 8000d5e:	4b2d      	ldr	r3, [pc, #180]	; (8000e14 <setFanMode+0x340>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	701a      	strb	r2, [r3, #0]
            auto_flag = false;
 8000d64:	4b2c      	ldr	r3, [pc, #176]	; (8000e18 <setFanMode+0x344>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
            break;
 8000d6a:	e04c      	b.n	8000e06 <setFanMode+0x332>

        case 255:
            // 'Auto' mode => your choice; here we do all OFF
        	printf("AUTO ON\r\n");
 8000d6c:	482b      	ldr	r0, [pc, #172]	; (8000e1c <setFanMode+0x348>)
 8000d6e:	f007 fa55 	bl	800821c <puts>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2104      	movs	r1, #4
 8000d76:	4826      	ldr	r0, [pc, #152]	; (8000e10 <setFanMode+0x33c>)
 8000d78:	f002 fa24 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2108      	movs	r1, #8
 8000d80:	4823      	ldr	r0, [pc, #140]	; (8000e10 <setFanMode+0x33c>)
 8000d82:	f002 fa1f 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2110      	movs	r1, #16
 8000d8a:	4821      	ldr	r0, [pc, #132]	; (8000e10 <setFanMode+0x33c>)
 8000d8c:	f002 fa1a 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, RESET);
 8000d90:	2200      	movs	r2, #0
 8000d92:	2120      	movs	r1, #32
 8000d94:	481e      	ldr	r0, [pc, #120]	; (8000e10 <setFanMode+0x33c>)
 8000d96:	f002 fa15 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2140      	movs	r1, #64	; 0x40
 8000d9e:	481c      	ldr	r0, [pc, #112]	; (8000e10 <setFanMode+0x33c>)
 8000da0:	f002 fa10 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2180      	movs	r1, #128	; 0x80
 8000da8:	4819      	ldr	r0, [pc, #100]	; (8000e10 <setFanMode+0x33c>)
 8000daa:	f002 fa0b 	bl	80031c4 <HAL_GPIO_WritePin>
        	climate_flag = false;
 8000dae:	4b19      	ldr	r3, [pc, #100]	; (8000e14 <setFanMode+0x340>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	701a      	strb	r2, [r3, #0]
        	auto_flag = true;
 8000db4:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <setFanMode+0x344>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	701a      	strb	r2, [r3, #0]
            break;
 8000dba:	e024      	b.n	8000e06 <setFanMode+0x332>

        default:
            // Unknown fanMode => default to all OFF
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, RESET);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2104      	movs	r1, #4
 8000dc0:	4813      	ldr	r0, [pc, #76]	; (8000e10 <setFanMode+0x33c>)
 8000dc2:	f002 f9ff 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, RESET);
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	2108      	movs	r1, #8
 8000dca:	4811      	ldr	r0, [pc, #68]	; (8000e10 <setFanMode+0x33c>)
 8000dcc:	f002 f9fa 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, RESET);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	2110      	movs	r1, #16
 8000dd4:	480e      	ldr	r0, [pc, #56]	; (8000e10 <setFanMode+0x33c>)
 8000dd6:	f002 f9f5 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, RESET);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2120      	movs	r1, #32
 8000dde:	480c      	ldr	r0, [pc, #48]	; (8000e10 <setFanMode+0x33c>)
 8000de0:	f002 f9f0 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2140      	movs	r1, #64	; 0x40
 8000de8:	4809      	ldr	r0, [pc, #36]	; (8000e10 <setFanMode+0x33c>)
 8000dea:	f002 f9eb 	bl	80031c4 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2180      	movs	r1, #128	; 0x80
 8000df2:	4807      	ldr	r0, [pc, #28]	; (8000e10 <setFanMode+0x33c>)
 8000df4:	f002 f9e6 	bl	80031c4 <HAL_GPIO_WritePin>
            climate_flag = false;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <setFanMode+0x340>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
            auto_flag = false;
 8000dfe:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <setFanMode+0x344>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	701a      	strb	r2, [r3, #0]
            break;
 8000e04:	bf00      	nop
    }
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	40021800 	.word	0x40021800
 8000e14:	20000204 	.word	0x20000204
 8000e18:	20000205 	.word	0x20000205
 8000e1c:	0800bd08 	.word	0x0800bd08

08000e20 <get_error_flag>:
bool checkPending[24] = { false };
uint64_t openTimestamp[24] = { 0 };



bool get_error_flag(){
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
	return error_flag;
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <get_error_flag+0x14>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000207 	.word	0x20000207

08000e38 <get_locker_flag>:
bool get_locker_flag(){
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
	return lockerFlag;
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <get_locker_flag+0x14>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	20000208 	.word	0x20000208

08000e50 <HandleState>:
void setErrorState(SystemErrorState state) {
	errorState = state;
}

// Handle error states
void HandleState() {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af02      	add	r7, sp, #8
	SystemErrorState state = errorState;
 8000e56:	4b5a      	ldr	r3, [pc, #360]	; (8000fc0 <HandleState+0x170>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	2b06      	cmp	r3, #6
 8000e62:	f200 80a5 	bhi.w	8000fb0 <HandleState+0x160>
 8000e66:	a201      	add	r2, pc, #4	; (adr r2, 8000e6c <HandleState+0x1c>)
 8000e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6c:	08000e89 	.word	0x08000e89
 8000e70:	08000eb9 	.word	0x08000eb9
 8000e74:	08000ee9 	.word	0x08000ee9
 8000e78:	08000ef1 	.word	0x08000ef1
 8000e7c:	08000f21 	.word	0x08000f21
 8000e80:	08000f51 	.word	0x08000f51
 8000e84:	08000f81 	.word	0x08000f81
        case STATE_JAMMED:
            printf("Case 1: JAMMED\n");
 8000e88:	484e      	ldr	r0, [pc, #312]	; (8000fc4 <HandleState+0x174>)
 8000e8a:	f007 f9c7 	bl	800821c <puts>
            SPI_SendMessage(0xF1, error_locker, 150, 0xFF, 0xFF, 0xFF);
 8000e8e:	4b4e      	ldr	r3, [pc, #312]	; (8000fc8 <HandleState+0x178>)
 8000e90:	7819      	ldrb	r1, [r3, #0]
 8000e92:	23ff      	movs	r3, #255	; 0xff
 8000e94:	9301      	str	r3, [sp, #4]
 8000e96:	23ff      	movs	r3, #255	; 0xff
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	23ff      	movs	r3, #255	; 0xff
 8000e9c:	2296      	movs	r2, #150	; 0x96
 8000e9e:	20f1      	movs	r0, #241	; 0xf1
 8000ea0:	f000 fea2 	bl	8001be8 <SPI_SendMessage>
            errorState = NO_ERROR;
 8000ea4:	4b46      	ldr	r3, [pc, #280]	; (8000fc0 <HandleState+0x170>)
 8000ea6:	2208      	movs	r2, #8
 8000ea8:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8000eaa:	4b47      	ldr	r3, [pc, #284]	; (8000fc8 <HandleState+0x178>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 8000eb0:	4b46      	ldr	r3, [pc, #280]	; (8000fcc <HandleState+0x17c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
            break;
 8000eb6:	e07f      	b.n	8000fb8 <HandleState+0x168>
        case STATE_OPENED:
            printf("Case 2: OPENED\n");
 8000eb8:	4845      	ldr	r0, [pc, #276]	; (8000fd0 <HandleState+0x180>)
 8000eba:	f007 f9af 	bl	800821c <puts>
            SPI_SendMessage(0xF1, error_locker, 50, 0xFF, 0xFF, 0xFF);
 8000ebe:	4b42      	ldr	r3, [pc, #264]	; (8000fc8 <HandleState+0x178>)
 8000ec0:	7819      	ldrb	r1, [r3, #0]
 8000ec2:	23ff      	movs	r3, #255	; 0xff
 8000ec4:	9301      	str	r3, [sp, #4]
 8000ec6:	23ff      	movs	r3, #255	; 0xff
 8000ec8:	9300      	str	r3, [sp, #0]
 8000eca:	23ff      	movs	r3, #255	; 0xff
 8000ecc:	2232      	movs	r2, #50	; 0x32
 8000ece:	20f1      	movs	r0, #241	; 0xf1
 8000ed0:	f000 fe8a 	bl	8001be8 <SPI_SendMessage>
            errorState = NO_ERROR;
 8000ed4:	4b3a      	ldr	r3, [pc, #232]	; (8000fc0 <HandleState+0x170>)
 8000ed6:	2208      	movs	r2, #8
 8000ed8:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8000eda:	4b3b      	ldr	r3, [pc, #236]	; (8000fc8 <HandleState+0x178>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 8000ee0:	4b3a      	ldr	r3, [pc, #232]	; (8000fcc <HandleState+0x17c>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
            break;
 8000ee6:	e067      	b.n	8000fb8 <HandleState+0x168>
        case STATE_CLOSED:
            printf("Case 3: CLOSED\n");
 8000ee8:	483a      	ldr	r0, [pc, #232]	; (8000fd4 <HandleState+0x184>)
 8000eea:	f007 f997 	bl	800821c <puts>
            break;
 8000eee:	e063      	b.n	8000fb8 <HandleState+0x168>
        case STATE_PRICE_TAG:
            printf("Case 4: PRICE_TAG\n");
 8000ef0:	4839      	ldr	r0, [pc, #228]	; (8000fd8 <HandleState+0x188>)
 8000ef2:	f007 f993 	bl	800821c <puts>
            SPI_SendMessage(0xF2, error_locker, 50, 0xFF, 0xFF, 0xFF);
 8000ef6:	4b34      	ldr	r3, [pc, #208]	; (8000fc8 <HandleState+0x178>)
 8000ef8:	7819      	ldrb	r1, [r3, #0]
 8000efa:	23ff      	movs	r3, #255	; 0xff
 8000efc:	9301      	str	r3, [sp, #4]
 8000efe:	23ff      	movs	r3, #255	; 0xff
 8000f00:	9300      	str	r3, [sp, #0]
 8000f02:	23ff      	movs	r3, #255	; 0xff
 8000f04:	2232      	movs	r2, #50	; 0x32
 8000f06:	20f2      	movs	r0, #242	; 0xf2
 8000f08:	f000 fe6e 	bl	8001be8 <SPI_SendMessage>
            errorState = NO_ERROR;
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <HandleState+0x170>)
 8000f0e:	2208      	movs	r2, #8
 8000f10:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8000f12:	4b2d      	ldr	r3, [pc, #180]	; (8000fc8 <HandleState+0x178>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 8000f18:	4b2c      	ldr	r3, [pc, #176]	; (8000fcc <HandleState+0x17c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
            break;
 8000f1e:	e04b      	b.n	8000fb8 <HandleState+0x168>
        case STATE_LED_DRIVER:
            printf("Case 5: LED_DRIVER\n");
 8000f20:	482e      	ldr	r0, [pc, #184]	; (8000fdc <HandleState+0x18c>)
 8000f22:	f007 f97b 	bl	800821c <puts>
            SPI_SendMessage(0xF2, error_locker, 100, 0xFF, 0xFF, 0xFF);
 8000f26:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <HandleState+0x178>)
 8000f28:	7819      	ldrb	r1, [r3, #0]
 8000f2a:	23ff      	movs	r3, #255	; 0xff
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	23ff      	movs	r3, #255	; 0xff
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	23ff      	movs	r3, #255	; 0xff
 8000f34:	2264      	movs	r2, #100	; 0x64
 8000f36:	20f2      	movs	r0, #242	; 0xf2
 8000f38:	f000 fe56 	bl	8001be8 <SPI_SendMessage>
            errorState = NO_ERROR;
 8000f3c:	4b20      	ldr	r3, [pc, #128]	; (8000fc0 <HandleState+0x170>)
 8000f3e:	2208      	movs	r2, #8
 8000f40:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8000f42:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <HandleState+0x178>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 8000f48:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <HandleState+0x17c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	701a      	strb	r2, [r3, #0]
            break;
 8000f4e:	e033      	b.n	8000fb8 <HandleState+0x168>
        case STATE_TEMPERATURE:
            printf("Case 6: TEMPERATURE\n");
 8000f50:	4823      	ldr	r0, [pc, #140]	; (8000fe0 <HandleState+0x190>)
 8000f52:	f007 f963 	bl	800821c <puts>
            SPI_SendMessage(0xF3, error_locker, 50, 0xFF, 0xFF, 0xFF);
 8000f56:	4b1c      	ldr	r3, [pc, #112]	; (8000fc8 <HandleState+0x178>)
 8000f58:	7819      	ldrb	r1, [r3, #0]
 8000f5a:	23ff      	movs	r3, #255	; 0xff
 8000f5c:	9301      	str	r3, [sp, #4]
 8000f5e:	23ff      	movs	r3, #255	; 0xff
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	23ff      	movs	r3, #255	; 0xff
 8000f64:	2232      	movs	r2, #50	; 0x32
 8000f66:	20f3      	movs	r0, #243	; 0xf3
 8000f68:	f000 fe3e 	bl	8001be8 <SPI_SendMessage>
            errorState = NO_ERROR;
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <HandleState+0x170>)
 8000f6e:	2208      	movs	r2, #8
 8000f70:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8000f72:	4b15      	ldr	r3, [pc, #84]	; (8000fc8 <HandleState+0x178>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <HandleState+0x17c>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	701a      	strb	r2, [r3, #0]
            break;
 8000f7e:	e01b      	b.n	8000fb8 <HandleState+0x168>
        case STATE_SENSOR:
            printf("Case 7: SENSOR\n");
 8000f80:	4818      	ldr	r0, [pc, #96]	; (8000fe4 <HandleState+0x194>)
 8000f82:	f007 f94b 	bl	800821c <puts>
            SPI_SendMessage(0xF3, error_locker, 100, 0xFF, 0xFF, 0xFF);
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <HandleState+0x178>)
 8000f88:	7819      	ldrb	r1, [r3, #0]
 8000f8a:	23ff      	movs	r3, #255	; 0xff
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	23ff      	movs	r3, #255	; 0xff
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	23ff      	movs	r3, #255	; 0xff
 8000f94:	2264      	movs	r2, #100	; 0x64
 8000f96:	20f3      	movs	r0, #243	; 0xf3
 8000f98:	f000 fe26 	bl	8001be8 <SPI_SendMessage>
            errorState = NO_ERROR;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <HandleState+0x170>)
 8000f9e:	2208      	movs	r2, #8
 8000fa0:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8000fa2:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <HandleState+0x178>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <HandleState+0x17c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	701a      	strb	r2, [r3, #0]
            break;
 8000fae:	e003      	b.n	8000fb8 <HandleState+0x168>
        default:
            printf("Invalid state\n");
 8000fb0:	480d      	ldr	r0, [pc, #52]	; (8000fe8 <HandleState+0x198>)
 8000fb2:	f007 f933 	bl	800821c <puts>
            break;
 8000fb6:	bf00      	nop
    }
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000001 	.word	0x20000001
 8000fc4:	0800bd14 	.word	0x0800bd14
 8000fc8:	20000206 	.word	0x20000206
 8000fcc:	20000207 	.word	0x20000207
 8000fd0:	0800bd24 	.word	0x0800bd24
 8000fd4:	0800bd34 	.word	0x0800bd34
 8000fd8:	0800bd44 	.word	0x0800bd44
 8000fdc:	0800bd58 	.word	0x0800bd58
 8000fe0:	0800bd6c 	.word	0x0800bd6c
 8000fe4:	0800bd80 	.word	0x0800bd80
 8000fe8:	0800bd90 	.word	0x0800bd90

08000fec <CheckAllLockersAfterDelay>:

// Check all lockers after delay (5 minutes) to see if they remain open
void CheckAllLockersAfterDelay(void) {
 8000fec:	b5b0      	push	{r4, r5, r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
    bool anyOpenedOrPending = false;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	73fb      	strb	r3, [r7, #15]
    uint32_t currentTime = HAL_GetTick();
 8000ff6:	f001 fa43 	bl	8002480 <HAL_GetTick>
 8000ffa:	6078      	str	r0, [r7, #4]

    for (int i = 0; i < 24; i++) {
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	e053      	b.n	80010aa <CheckAllLockersAfterDelay+0xbe>
        // If we had marked a locker for a re-check
        if (checkPending[i]) {
 8001002:	4a2f      	ldr	r2, [pc, #188]	; (80010c0 <CheckAllLockersAfterDelay+0xd4>)
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	4413      	add	r3, r2
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d042      	beq.n	8001094 <CheckAllLockersAfterDelay+0xa8>
            anyOpenedOrPending = true;
 800100e:	2301      	movs	r3, #1
 8001010:	73fb      	strb	r3, [r7, #15]
            // Has 5 minutes passed since we opened it?
            if ((currentTime - openTimestamp[i]) >= LOCKER_CHECK_DELAY) {
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4618      	mov	r0, r3
 8001016:	f04f 0100 	mov.w	r1, #0
 800101a:	4a2a      	ldr	r2, [pc, #168]	; (80010c4 <CheckAllLockersAfterDelay+0xd8>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	4413      	add	r3, r2
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	1a84      	subs	r4, r0, r2
 8001028:	eb61 0503 	sbc.w	r5, r1, r3
 800102c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001030:	f04f 0300 	mov.w	r3, #0
 8001034:	42ab      	cmp	r3, r5
 8001036:	bf08      	it	eq
 8001038:	42a2      	cmpeq	r2, r4
 800103a:	d233      	bcs.n	80010a4 <CheckAllLockersAfterDelay+0xb8>
                int status = read_cabinet_status(i + 1);
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	3301      	adds	r3, #1
 8001042:	b2db      	uxtb	r3, r3
 8001044:	4618      	mov	r0, r3
 8001046:	f000 f937 	bl	80012b8 <read_cabinet_status>
 800104a:	6038      	str	r0, [r7, #0]
                if (status == 1) {
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d112      	bne.n	8001078 <CheckAllLockersAfterDelay+0x8c>
                    errorState = STATE_OPENED;
 8001052:	4b1d      	ldr	r3, [pc, #116]	; (80010c8 <CheckAllLockersAfterDelay+0xdc>)
 8001054:	2202      	movs	r2, #2
 8001056:	701a      	strb	r2, [r3, #0]
                    error_locker = i + 1;
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	3301      	adds	r3, #1
 800105e:	b2da      	uxtb	r2, r3
 8001060:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <CheckAllLockersAfterDelay+0xe0>)
 8001062:	701a      	strb	r2, [r3, #0]
                    error_flag = true;
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <CheckAllLockersAfterDelay+0xe4>)
 8001066:	2201      	movs	r2, #1
 8001068:	701a      	strb	r2, [r3, #0]
                    printf("Locker %d is still open after 5 minutes!\n", i + 1);
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	3301      	adds	r3, #1
 800106e:	4619      	mov	r1, r3
 8001070:	4818      	ldr	r0, [pc, #96]	; (80010d4 <CheckAllLockersAfterDelay+0xe8>)
 8001072:	f007 f837 	bl	80080e4 <iprintf>
 8001076:	e007      	b.n	8001088 <CheckAllLockersAfterDelay+0x9c>
                } else if (status == 0) {
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d104      	bne.n	8001088 <CheckAllLockersAfterDelay+0x9c>
                    // It's now closed
                    lockerOpened[i] = false;
 800107e:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <CheckAllLockersAfterDelay+0xec>)
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4413      	add	r3, r2
 8001084:	2200      	movs	r2, #0
 8001086:	701a      	strb	r2, [r3, #0]
                }
                checkPending[i] = false;
 8001088:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <CheckAllLockersAfterDelay+0xd4>)
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	4413      	add	r3, r2
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	e007      	b.n	80010a4 <CheckAllLockersAfterDelay+0xb8>
            }
        } else {
            if (lockerOpened[i]) {
 8001094:	4a10      	ldr	r2, [pc, #64]	; (80010d8 <CheckAllLockersAfterDelay+0xec>)
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	4413      	add	r3, r2
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <CheckAllLockersAfterDelay+0xb8>
                anyOpenedOrPending = true;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 24; i++) {
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	3301      	adds	r3, #1
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	2b17      	cmp	r3, #23
 80010ae:	dda8      	ble.n	8001002 <CheckAllLockersAfterDelay+0x16>
            }
        }
    }
    lockerFlag = anyOpenedOrPending;
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <CheckAllLockersAfterDelay+0xf0>)
 80010b2:	7bfb      	ldrb	r3, [r7, #15]
 80010b4:	7013      	strb	r3, [r2, #0]
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bdb0      	pop	{r4, r5, r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000224 	.word	0x20000224
 80010c4:	20000240 	.word	0x20000240
 80010c8:	20000001 	.word	0x20000001
 80010cc:	20000206 	.word	0x20000206
 80010d0:	20000207 	.word	0x20000207
 80010d4:	0800bda0 	.word	0x0800bda0
 80010d8:	2000020c 	.word	0x2000020c
 80010dc:	20000208 	.word	0x20000208

080010e0 <Send_RGB>:
        // Could handle error here
    }
}

// Send RGB data over I2C
void Send_RGB(uint16_t address, uint8_t red, uint8_t green, uint8_t blue, uint8_t mode) {
 80010e0:	b590      	push	{r4, r7, lr}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4604      	mov	r4, r0
 80010e8:	4608      	mov	r0, r1
 80010ea:	4611      	mov	r1, r2
 80010ec:	461a      	mov	r2, r3
 80010ee:	4623      	mov	r3, r4
 80010f0:	80fb      	strh	r3, [r7, #6]
 80010f2:	4603      	mov	r3, r0
 80010f4:	717b      	strb	r3, [r7, #5]
 80010f6:	460b      	mov	r3, r1
 80010f8:	713b      	strb	r3, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	70fb      	strb	r3, [r7, #3]
    uint8_t RGB_Buffer[4];
    RGB_Buffer[0] = red;
 80010fe:	797b      	ldrb	r3, [r7, #5]
 8001100:	733b      	strb	r3, [r7, #12]
    RGB_Buffer[1] = green;
 8001102:	793b      	ldrb	r3, [r7, #4]
 8001104:	737b      	strb	r3, [r7, #13]
    RGB_Buffer[2] = blue;
 8001106:	78fb      	ldrb	r3, [r7, #3]
 8001108:	73bb      	strb	r3, [r7, #14]
    RGB_Buffer[3] = mode;
 800110a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800110e:	73fb      	strb	r3, [r7, #15]

    // Transmit RGB values to the slave
    //if (HAL_I2C_Master_Transmit(&hi2c1, (address << 1), RGB_Buffer, 4, HAL_MAX_DELAY) != HAL_OK) {
    if (HAL_I2C_Master_Transmit_DMA(&hi2c1, (address << 1), RGB_Buffer, 4) != HAL_OK) {
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	b299      	uxth	r1, r3
 8001116:	f107 020c 	add.w	r2, r7, #12
 800111a:	2304      	movs	r3, #4
 800111c:	4803      	ldr	r0, [pc, #12]	; (800112c <Send_RGB+0x4c>)
 800111e:	f002 f915 	bl	800334c <HAL_I2C_Master_Transmit_DMA>
        //setErrorState(STATE_LED_DRIVER);
        //error_locker = address - 100;
        //error_flag = true;
    }
    //HAL_Delay(1);
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	bd90      	pop	{r4, r7, pc}
 800112a:	bf00      	nop
 800112c:	20000440 	.word	0x20000440

08001130 <Send_Price>:

// Send price values to the slave
void Send_Price(uint16_t address, uint8_t byte1, uint8_t byte2) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	80fb      	strh	r3, [r7, #6]
 800113a:	460b      	mov	r3, r1
 800113c:	717b      	strb	r3, [r7, #5]
 800113e:	4613      	mov	r3, r2
 8001140:	713b      	strb	r3, [r7, #4]
    uint8_t Price_Buffer[2];
    Price_Buffer[0] = byte1;
 8001142:	797b      	ldrb	r3, [r7, #5]
 8001144:	733b      	strb	r3, [r7, #12]
    Price_Buffer[1] = byte2;
 8001146:	793b      	ldrb	r3, [r7, #4]
 8001148:	737b      	strb	r3, [r7, #13]

    // Transmit price values to the slave
    //if (HAL_I2C_Master_Transmit(&hi2c1, (address << 1), Price_Buffer, 2, HAL_MAX_DELAY) != HAL_OK) {
    if (HAL_I2C_Master_Transmit_DMA(&hi2c1, address << 1, Price_Buffer, 2) != HAL_OK) {
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	b299      	uxth	r1, r3
 8001150:	f107 020c 	add.w	r2, r7, #12
 8001154:	2302      	movs	r3, #2
 8001156:	4803      	ldr	r0, [pc, #12]	; (8001164 <Send_Price+0x34>)
 8001158:	f002 f8f8 	bl	800334c <HAL_I2C_Master_Transmit_DMA>
        //error_locker = address;
        //error_flag = true;
    }
    //HAL_Delay(1);

}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000440 	.word	0x20000440

08001168 <HAL_I2C_MasterTxCpltCallback>:

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
	if(hi2c->Instance == I2C1){
    	//printf("SUCCESS\r\n");
    }
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <calculate_checksum>:
#include "locker.h"

extern UART_HandleTypeDef huart2;

// Function to calculate XOR checksum
uint8_t calculate_checksum(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3) {
 800117c:	b490      	push	{r4, r7}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	4604      	mov	r4, r0
 8001184:	4608      	mov	r0, r1
 8001186:	4611      	mov	r1, r2
 8001188:	461a      	mov	r2, r3
 800118a:	4623      	mov	r3, r4
 800118c:	71fb      	strb	r3, [r7, #7]
 800118e:	4603      	mov	r3, r0
 8001190:	71bb      	strb	r3, [r7, #6]
 8001192:	460b      	mov	r3, r1
 8001194:	717b      	strb	r3, [r7, #5]
 8001196:	4613      	mov	r3, r2
 8001198:	713b      	strb	r3, [r7, #4]
    return byte0 ^ byte1 ^ byte2 ^ byte3;
 800119a:	79fa      	ldrb	r2, [r7, #7]
 800119c:	79bb      	ldrb	r3, [r7, #6]
 800119e:	4053      	eors	r3, r2
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	797b      	ldrb	r3, [r7, #5]
 80011a4:	4053      	eors	r3, r2
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	793b      	ldrb	r3, [r7, #4]
 80011aa:	4053      	eors	r3, r2
 80011ac:	b2db      	uxtb	r3, r3
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc90      	pop	{r4, r7}
 80011b6:	4770      	bx	lr

080011b8 <open_cabinet>:

// Function to open a cabinet
void open_cabinet(uint8_t locker_id) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	71fb      	strb	r3, [r7, #7]
    if (locker_id < 1 || locker_id > 24) {
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d002      	beq.n	80011ce <open_cabinet+0x16>
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	2b18      	cmp	r3, #24
 80011cc:	d903      	bls.n	80011d6 <open_cabinet+0x1e>
        printf("Invalid locker ID. Must be between 1 and 24.\n");
 80011ce:	4832      	ldr	r0, [pc, #200]	; (8001298 <open_cabinet+0xe0>)
 80011d0:	f007 f824 	bl	800821c <puts>
        return;
 80011d4:	e05d      	b.n	8001292 <open_cabinet+0xda>
    }

    // Check if the locker is already open
    int status = read_cabinet_status(locker_id);
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 f86d 	bl	80012b8 <read_cabinet_status>
 80011de:	61f8      	str	r0, [r7, #28]
    if (status == 1) {
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d105      	bne.n	80011f2 <open_cabinet+0x3a>
        printf("Locker %d is already open. No action required.\n", locker_id);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	4619      	mov	r1, r3
 80011ea:	482c      	ldr	r0, [pc, #176]	; (800129c <open_cabinet+0xe4>)
 80011ec:	f006 ff7a 	bl	80080e4 <iprintf>
        return;
 80011f0:	e04f      	b.n	8001292 <open_cabinet+0xda>
    } else if (status == 0) {
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d147      	bne.n	8001288 <open_cabinet+0xd0>
        uint8_t command[5];
        uint8_t response[5];

        // Build the command to open the cabinet
        command[0] = 0x8A;  // Command header for opening
 80011f8:	238a      	movs	r3, #138	; 0x8a
 80011fa:	753b      	strb	r3, [r7, #20]
        command[1] = 0x01;  // Addressing mode
 80011fc:	2301      	movs	r3, #1
 80011fe:	757b      	strb	r3, [r7, #21]
        command[2] = locker_id;  // Locker ID
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	75bb      	strb	r3, [r7, #22]
        command[3] = 0x11;  // Open command
 8001204:	2311      	movs	r3, #17
 8001206:	75fb      	strb	r3, [r7, #23]
        command[4] = calculate_checksum(command[0], command[1], command[2], command[3]);
 8001208:	7d38      	ldrb	r0, [r7, #20]
 800120a:	7d79      	ldrb	r1, [r7, #21]
 800120c:	7dba      	ldrb	r2, [r7, #22]
 800120e:	7dfb      	ldrb	r3, [r7, #23]
 8001210:	f7ff ffb4 	bl	800117c <calculate_checksum>
 8001214:	4603      	mov	r3, r0
 8001216:	763b      	strb	r3, [r7, #24]

        // Transmit the open command
        RS485_Transmit(command, sizeof(command));
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2105      	movs	r1, #5
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f902 	bl	8001428 <RS485_Transmit>
        HAL_Delay(2000);
 8001224:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001228:	f001 f936 	bl	8002498 <HAL_Delay>

        // Wait for the response
        if (HAL_UART_Receive(&huart2, response, sizeof(response), 1000) == HAL_OK) {
 800122c:	f107 010c 	add.w	r1, r7, #12
 8001230:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001234:	2205      	movs	r2, #5
 8001236:	481a      	ldr	r0, [pc, #104]	; (80012a0 <open_cabinet+0xe8>)
 8001238:	f005 fbf9 	bl	8006a2e <HAL_UART_Receive>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d11e      	bne.n	8001280 <open_cabinet+0xc8>
            uint8_t expected_checksum = calculate_checksum(response[0], response[1], response[2], response[3]);
 8001242:	7b38      	ldrb	r0, [r7, #12]
 8001244:	7b79      	ldrb	r1, [r7, #13]
 8001246:	7bba      	ldrb	r2, [r7, #14]
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	f7ff ff97 	bl	800117c <calculate_checksum>
 800124e:	4603      	mov	r3, r0
 8001250:	76fb      	strb	r3, [r7, #27]
            if (response[4] != expected_checksum) {
 8001252:	7c3b      	ldrb	r3, [r7, #16]
 8001254:	7efa      	ldrb	r2, [r7, #27]
 8001256:	429a      	cmp	r2, r3
 8001258:	d003      	beq.n	8001262 <open_cabinet+0xaa>
                printf("Response checksum error.\n");
 800125a:	4812      	ldr	r0, [pc, #72]	; (80012a4 <open_cabinet+0xec>)
 800125c:	f006 ffde 	bl	800821c <puts>
 8001260:	e017      	b.n	8001292 <open_cabinet+0xda>
                return;
            }

            if (response[3] == 0x11) {
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	2b11      	cmp	r3, #17
 8001266:	d105      	bne.n	8001274 <open_cabinet+0xbc>
                printf("Locker %d opened successfully.\n", locker_id);
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	4619      	mov	r1, r3
 800126c:	480e      	ldr	r0, [pc, #56]	; (80012a8 <open_cabinet+0xf0>)
 800126e:	f006 ff39 	bl	80080e4 <iprintf>
 8001272:	e00e      	b.n	8001292 <open_cabinet+0xda>

            } else {
                printf("Unexpected response when opening locker %d.\n", locker_id);
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	4619      	mov	r1, r3
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <open_cabinet+0xf4>)
 800127a:	f006 ff33 	bl	80080e4 <iprintf>
 800127e:	e008      	b.n	8001292 <open_cabinet+0xda>
            }
        } else {
            printf("No response received when opening the cabinet.\n");
 8001280:	480b      	ldr	r0, [pc, #44]	; (80012b0 <open_cabinet+0xf8>)
 8001282:	f006 ffcb 	bl	800821c <puts>
 8001286:	e004      	b.n	8001292 <open_cabinet+0xda>
        }
    } else {
        printf("Failed to determine the status of locker %d. Aborting open operation.\n", locker_id);
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	4619      	mov	r1, r3
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <open_cabinet+0xfc>)
 800128e:	f006 ff29 	bl	80080e4 <iprintf>
    }
}
 8001292:	3720      	adds	r7, #32
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	0800bdcc 	.word	0x0800bdcc
 800129c:	0800bdfc 	.word	0x0800bdfc
 80012a0:	2000053c 	.word	0x2000053c
 80012a4:	0800be2c 	.word	0x0800be2c
 80012a8:	0800be48 	.word	0x0800be48
 80012ac:	0800be68 	.word	0x0800be68
 80012b0:	0800be98 	.word	0x0800be98
 80012b4:	0800bec8 	.word	0x0800bec8

080012b8 <read_cabinet_status>:




// Function to read the cabinet status
int read_cabinet_status(uint8_t locker_id) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	71fb      	strb	r3, [r7, #7]
    if (locker_id < 1 || locker_id > 24) {
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d002      	beq.n	80012ce <read_cabinet_status+0x16>
 80012c8:	79fb      	ldrb	r3, [r7, #7]
 80012ca:	2b18      	cmp	r3, #24
 80012cc:	d905      	bls.n	80012da <read_cabinet_status+0x22>
        printf("Invalid locker ID. Must be between 1 and 24.\n");
 80012ce:	483b      	ldr	r0, [pc, #236]	; (80013bc <read_cabinet_status+0x104>)
 80012d0:	f006 ffa4 	bl	800821c <puts>
        return -1;
 80012d4:	f04f 33ff 	mov.w	r3, #4294967295
 80012d8:	e06b      	b.n	80013b2 <read_cabinet_status+0xfa>

    uint8_t command[5];
    uint8_t response[5];

    // Build the command to read the cabinet status
    command[0] = 0x80;
 80012da:	2380      	movs	r3, #128	; 0x80
 80012dc:	753b      	strb	r3, [r7, #20]
    command[1] = 0x01;
 80012de:	2301      	movs	r3, #1
 80012e0:	757b      	strb	r3, [r7, #21]
    command[2] = locker_id;
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	75bb      	strb	r3, [r7, #22]
    command[3] = 0x33;
 80012e6:	2333      	movs	r3, #51	; 0x33
 80012e8:	75fb      	strb	r3, [r7, #23]
    command[4] = calculate_checksum(command[0], command[1], command[2], command[3]);
 80012ea:	7d38      	ldrb	r0, [r7, #20]
 80012ec:	7d79      	ldrb	r1, [r7, #21]
 80012ee:	7dba      	ldrb	r2, [r7, #22]
 80012f0:	7dfb      	ldrb	r3, [r7, #23]
 80012f2:	f7ff ff43 	bl	800117c <calculate_checksum>
 80012f6:	4603      	mov	r3, r0
 80012f8:	763b      	strb	r3, [r7, #24]

    // Transmit the command
    RS485_Transmit(command, sizeof(command));
 80012fa:	f107 0314 	add.w	r3, r7, #20
 80012fe:	2105      	movs	r1, #5
 8001300:	4618      	mov	r0, r3
 8001302:	f000 f891 	bl	8001428 <RS485_Transmit>

    // Wait for the response
    if (HAL_UART_Receive(&huart2, response, sizeof(response), 1000) == HAL_OK) {
 8001306:	f107 010c 	add.w	r1, r7, #12
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	2205      	movs	r2, #5
 8001310:	482b      	ldr	r0, [pc, #172]	; (80013c0 <read_cabinet_status+0x108>)
 8001312:	f005 fb8c 	bl	8006a2e <HAL_UART_Receive>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d145      	bne.n	80013a8 <read_cabinet_status+0xf0>
        // Print the raw response
        printf("Response received: ");
 800131c:	4829      	ldr	r0, [pc, #164]	; (80013c4 <read_cabinet_status+0x10c>)
 800131e:	f006 fee1 	bl	80080e4 <iprintf>
        for (int i = 0; i < sizeof(response); i++) {
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
 8001326:	e00b      	b.n	8001340 <read_cabinet_status+0x88>
            printf("0x%02X ", response[i]);
 8001328:	f107 020c 	add.w	r2, r7, #12
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	4413      	add	r3, r2
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	4619      	mov	r1, r3
 8001334:	4824      	ldr	r0, [pc, #144]	; (80013c8 <read_cabinet_status+0x110>)
 8001336:	f006 fed5 	bl	80080e4 <iprintf>
        for (int i = 0; i < sizeof(response); i++) {
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3301      	adds	r3, #1
 800133e:	61fb      	str	r3, [r7, #28]
 8001340:	69fb      	ldr	r3, [r7, #28]
 8001342:	2b04      	cmp	r3, #4
 8001344:	d9f0      	bls.n	8001328 <read_cabinet_status+0x70>
        }
        printf("\n");
 8001346:	200a      	movs	r0, #10
 8001348:	f006 fee4 	bl	8008114 <putchar>

        // Validate the response
        uint8_t expected_checksum = calculate_checksum(response[0], response[1], response[2], response[3]);
 800134c:	7b38      	ldrb	r0, [r7, #12]
 800134e:	7b79      	ldrb	r1, [r7, #13]
 8001350:	7bba      	ldrb	r2, [r7, #14]
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	f7ff ff12 	bl	800117c <calculate_checksum>
 8001358:	4603      	mov	r3, r0
 800135a:	76fb      	strb	r3, [r7, #27]
        if (response[4] != expected_checksum) {
 800135c:	7c3b      	ldrb	r3, [r7, #16]
 800135e:	7efa      	ldrb	r2, [r7, #27]
 8001360:	429a      	cmp	r2, r3
 8001362:	d005      	beq.n	8001370 <read_cabinet_status+0xb8>
            printf("Response checksum error.\n");
 8001364:	4819      	ldr	r0, [pc, #100]	; (80013cc <read_cabinet_status+0x114>)
 8001366:	f006 ff59 	bl	800821c <puts>
            return -1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	e020      	b.n	80013b2 <read_cabinet_status+0xfa>
        }

        // Interpret the response
        if (response[3] == 0x11) {
 8001370:	7bfb      	ldrb	r3, [r7, #15]
 8001372:	2b11      	cmp	r3, #17
 8001374:	d106      	bne.n	8001384 <read_cabinet_status+0xcc>
            printf("Locker %d is open.\n", locker_id);
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	4619      	mov	r1, r3
 800137a:	4815      	ldr	r0, [pc, #84]	; (80013d0 <read_cabinet_status+0x118>)
 800137c:	f006 feb2 	bl	80080e4 <iprintf>
            return 1; // Locker is open
 8001380:	2301      	movs	r3, #1
 8001382:	e016      	b.n	80013b2 <read_cabinet_status+0xfa>
        } else if (response[3] == 0x00) {
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d106      	bne.n	8001398 <read_cabinet_status+0xe0>
            printf("Locker %d is closed.\n", locker_id);
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	4619      	mov	r1, r3
 800138e:	4811      	ldr	r0, [pc, #68]	; (80013d4 <read_cabinet_status+0x11c>)
 8001390:	f006 fea8 	bl	80080e4 <iprintf>
            return 0; // Locker is closed
 8001394:	2300      	movs	r3, #0
 8001396:	e00c      	b.n	80013b2 <read_cabinet_status+0xfa>
        } else {
            printf("Unexpected response for locker %d.\n", locker_id);
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	4619      	mov	r1, r3
 800139c:	480e      	ldr	r0, [pc, #56]	; (80013d8 <read_cabinet_status+0x120>)
 800139e:	f006 fea1 	bl	80080e4 <iprintf>
            return -1; // Error or unexpected
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	e004      	b.n	80013b2 <read_cabinet_status+0xfa>
        }
    } else {
        printf("No response received when reading the cabinet status.\n");
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <read_cabinet_status+0x124>)
 80013aa:	f006 ff37 	bl	800821c <puts>
        //setErrorState(STATE_JAMMED);
        //error_locker = locker_id;
        //error_flag = true;
        return -1;
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3720      	adds	r7, #32
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	0800bdcc 	.word	0x0800bdcc
 80013c0:	2000053c 	.word	0x2000053c
 80013c4:	0800bf10 	.word	0x0800bf10
 80013c8:	0800bf24 	.word	0x0800bf24
 80013cc:	0800be2c 	.word	0x0800be2c
 80013d0:	0800bf2c 	.word	0x0800bf2c
 80013d4:	0800bf40 	.word	0x0800bf40
 80013d8:	0800bf58 	.word	0x0800bf58
 80013dc:	0800bf7c 	.word	0x0800bf7c

080013e0 <RS485_SetTransmitMode>:

// Set RS485 to transmit mode
void RS485_SetTransmitMode(void) {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_SET);
 80013e4:	2201      	movs	r2, #1
 80013e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <RS485_SetTransmitMode+0x20>)
 80013ec:	f001 feea 	bl	80031c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 80013f0:	2201      	movs	r2, #1
 80013f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f6:	4802      	ldr	r0, [pc, #8]	; (8001400 <RS485_SetTransmitMode+0x20>)
 80013f8:	f001 fee4 	bl	80031c4 <HAL_GPIO_WritePin>
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021800 	.word	0x40021800

08001404 <RS485_SetReceiveMode>:

// Set RS485 to receive mode
void RS485_SetReceiveMode(void) {
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800140e:	4805      	ldr	r0, [pc, #20]	; (8001424 <RS485_SetReceiveMode+0x20>)
 8001410:	f001 fed8 	bl	80031c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800141a:	4802      	ldr	r0, [pc, #8]	; (8001424 <RS485_SetReceiveMode+0x20>)
 800141c:	f001 fed2 	bl	80031c4 <HAL_GPIO_WritePin>
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40021800 	.word	0x40021800

08001428 <RS485_Transmit>:

// Transmit data via RS485
void RS485_Transmit(uint8_t *data, uint16_t size) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	460b      	mov	r3, r1
 8001432:	807b      	strh	r3, [r7, #2]
    RS485_SetTransmitMode();
 8001434:	f7ff ffd4 	bl	80013e0 <RS485_SetTransmitMode>
    HAL_UART_Transmit(&huart2, data, size, HAL_MAX_DELAY);
 8001438:	887a      	ldrh	r2, [r7, #2]
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <RS485_Transmit+0x2c>)
 8001442:	f005 fa61 	bl	8006908 <HAL_UART_Transmit>
    RS485_SetReceiveMode();
 8001446:	f7ff ffdd 	bl	8001404 <RS485_SetReceiveMode>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000053c 	.word	0x2000053c

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145c:	f000 ffbf 	bl	80023de <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001460:	f000 f816 	bl	8001490 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001464:	f000 fa2c 	bl	80018c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001468:	f000 f9f0 	bl	800184c <MX_DMA_Init>
  MX_SPI1_Init();
 800146c:	f000 f956 	bl	800171c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001470:	f000 f9bc 	bl	80017ec <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001474:	f000 f892 	bl	800159c <MX_I2C1_Init>
  MX_I2C4_Init();
 8001478:	f000 f910 	bl	800169c <MX_I2C4_Init>
  MX_I2C2_Init();
 800147c:	f000 f8ce 	bl	800161c <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001480:	f000 f984 	bl	800178c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  init_application();
 8001484:	f7ff faa4 	bl	80009d0 <init_application>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop_application();
 8001488:	f7ff fad8 	bl	8000a3c <loop_application>
 800148c:	e7fc      	b.n	8001488 <main+0x30>
	...

08001490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b0b8      	sub	sp, #224	; 0xe0
 8001494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001496:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800149a:	2234      	movs	r2, #52	; 0x34
 800149c:	2100      	movs	r1, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	f005 ffd2 	bl	8007448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b4:	f107 0308 	add.w	r3, r7, #8
 80014b8:	2290      	movs	r2, #144	; 0x90
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f005 ffc3 	bl	8007448 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014c2:	f003 fbbd 	bl	8004c40 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c6:	4b32      	ldr	r3, [pc, #200]	; (8001590 <SystemClock_Config+0x100>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a31      	ldr	r2, [pc, #196]	; (8001590 <SystemClock_Config+0x100>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b2f      	ldr	r3, [pc, #188]	; (8001590 <SystemClock_Config+0x100>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80014de:	4b2d      	ldr	r3, [pc, #180]	; (8001594 <SystemClock_Config+0x104>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80014e6:	4a2b      	ldr	r2, [pc, #172]	; (8001594 <SystemClock_Config+0x104>)
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b29      	ldr	r3, [pc, #164]	; (8001594 <SystemClock_Config+0x104>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014fa:	2302      	movs	r3, #2
 80014fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001500:	2301      	movs	r3, #1
 8001502:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001506:	2310      	movs	r3, #16
 8001508:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001512:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001516:	4618      	mov	r0, r3
 8001518:	f003 fba2 	bl	8004c60 <HAL_RCC_OscConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001522:	f000 fa61 	bl	80019e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001526:	230f      	movs	r3, #15
 8001528:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800152c:	2300      	movs	r3, #0
 800152e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153e:	2300      	movs	r3, #0
 8001540:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001544:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001548:	2100      	movs	r1, #0
 800154a:	4618      	mov	r0, r3
 800154c:	f003 fe36 	bl	80051bc <HAL_RCC_ClockConfig>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001556:	f000 fa47 	bl	80019e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 800155a:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <SystemClock_Config+0x108>)
 800155c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800155e:	2300      	movs	r3, #0
 8001560:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001562:	2300      	movs	r3, #0
 8001564:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001566:	2300      	movs	r3, #0
 8001568:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800156a:	2300      	movs	r3, #0
 800156c:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800156e:	2300      	movs	r3, #0
 8001570:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	4618      	mov	r0, r3
 8001578:	f003 fff6 	bl	8005568 <HAL_RCCEx_PeriphCLKConfig>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8001582:	f000 fa31 	bl	80019e8 <Error_Handler>
  }
}
 8001586:	bf00      	nop
 8001588:	37e0      	adds	r7, #224	; 0xe0
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800
 8001594:	40007000 	.word	0x40007000
 8001598:	0002c180 	.word	0x0002c180

0800159c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <MX_I2C1_Init+0x74>)
 80015a2:	4a1c      	ldr	r2, [pc, #112]	; (8001614 <MX_I2C1_Init+0x78>)
 80015a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <MX_I2C1_Init+0x74>)
 80015a8:	4a1b      	ldr	r2, [pc, #108]	; (8001618 <MX_I2C1_Init+0x7c>)
 80015aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <MX_I2C1_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015b2:	4b17      	ldr	r3, [pc, #92]	; (8001610 <MX_I2C1_Init+0x74>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015b8:	4b15      	ldr	r3, [pc, #84]	; (8001610 <MX_I2C1_Init+0x74>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <MX_I2C1_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <MX_I2C1_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <MX_I2C1_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <MX_I2C1_Init+0x74>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015d6:	480e      	ldr	r0, [pc, #56]	; (8001610 <MX_I2C1_Init+0x74>)
 80015d8:	f001 fe28 	bl	800322c <HAL_I2C_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80015e2:	f000 fa01 	bl	80019e8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015e6:	2100      	movs	r1, #0
 80015e8:	4809      	ldr	r0, [pc, #36]	; (8001610 <MX_I2C1_Init+0x74>)
 80015ea:	f003 fa71 	bl	8004ad0 <HAL_I2CEx_ConfigAnalogFilter>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80015f4:	f000 f9f8 	bl	80019e8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80015f8:	2100      	movs	r1, #0
 80015fa:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_I2C1_Init+0x74>)
 80015fc:	f003 fab3 	bl	8004b66 <HAL_I2CEx_ConfigDigitalFilter>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001606:	f000 f9ef 	bl	80019e8 <Error_Handler>
  /* USER CODE BEGIN I2C1_Init 2 */
  //__HAL_LINKDMA(&hi2c1, hdmatx, hdma_i2c1_tx);

  /* USER CODE END I2C1_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000440 	.word	0x20000440
 8001614:	40005400 	.word	0x40005400
 8001618:	00303d5b 	.word	0x00303d5b

0800161c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <MX_I2C2_Init+0x74>)
 8001622:	4a1c      	ldr	r2, [pc, #112]	; (8001694 <MX_I2C2_Init+0x78>)
 8001624:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <MX_I2C2_Init+0x74>)
 8001628:	4a1b      	ldr	r2, [pc, #108]	; (8001698 <MX_I2C2_Init+0x7c>)
 800162a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800162c:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_I2C2_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001632:	4b17      	ldr	r3, [pc, #92]	; (8001690 <MX_I2C2_Init+0x74>)
 8001634:	2201      	movs	r2, #1
 8001636:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001638:	4b15      	ldr	r3, [pc, #84]	; (8001690 <MX_I2C2_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800163e:	4b14      	ldr	r3, [pc, #80]	; (8001690 <MX_I2C2_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001644:	4b12      	ldr	r3, [pc, #72]	; (8001690 <MX_I2C2_Init+0x74>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800164a:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_I2C2_Init+0x74>)
 800164c:	2200      	movs	r2, #0
 800164e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <MX_I2C2_Init+0x74>)
 8001652:	2200      	movs	r2, #0
 8001654:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001656:	480e      	ldr	r0, [pc, #56]	; (8001690 <MX_I2C2_Init+0x74>)
 8001658:	f001 fde8 	bl	800322c <HAL_I2C_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001662:	f000 f9c1 	bl	80019e8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001666:	2100      	movs	r1, #0
 8001668:	4809      	ldr	r0, [pc, #36]	; (8001690 <MX_I2C2_Init+0x74>)
 800166a:	f003 fa31 	bl	8004ad0 <HAL_I2CEx_ConfigAnalogFilter>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001674:	f000 f9b8 	bl	80019e8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001678:	2100      	movs	r1, #0
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_I2C2_Init+0x74>)
 800167c:	f003 fa73 	bl	8004b66 <HAL_I2CEx_ConfigDigitalFilter>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001686:	f000 f9af 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	2000048c 	.word	0x2000048c
 8001694:	40005800 	.word	0x40005800
 8001698:	00303d5b 	.word	0x00303d5b

0800169c <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80016a0:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <MX_I2C4_Init+0x74>)
 80016a2:	4a1c      	ldr	r2, [pc, #112]	; (8001714 <MX_I2C4_Init+0x78>)
 80016a4:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00303D5B;
 80016a6:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <MX_I2C4_Init+0x74>)
 80016a8:	4a1b      	ldr	r2, [pc, #108]	; (8001718 <MX_I2C4_Init+0x7c>)
 80016aa:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80016ac:	4b18      	ldr	r3, [pc, #96]	; (8001710 <MX_I2C4_Init+0x74>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <MX_I2C4_Init+0x74>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b8:	4b15      	ldr	r3, [pc, #84]	; (8001710 <MX_I2C4_Init+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80016be:	4b14      	ldr	r3, [pc, #80]	; (8001710 <MX_I2C4_Init+0x74>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016c4:	4b12      	ldr	r3, [pc, #72]	; (8001710 <MX_I2C4_Init+0x74>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ca:	4b11      	ldr	r3, [pc, #68]	; (8001710 <MX_I2C4_Init+0x74>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016d0:	4b0f      	ldr	r3, [pc, #60]	; (8001710 <MX_I2C4_Init+0x74>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80016d6:	480e      	ldr	r0, [pc, #56]	; (8001710 <MX_I2C4_Init+0x74>)
 80016d8:	f001 fda8 	bl	800322c <HAL_I2C_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80016e2:	f000 f981 	bl	80019e8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016e6:	2100      	movs	r1, #0
 80016e8:	4809      	ldr	r0, [pc, #36]	; (8001710 <MX_I2C4_Init+0x74>)
 80016ea:	f003 f9f1 	bl	8004ad0 <HAL_I2CEx_ConfigAnalogFilter>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80016f4:	f000 f978 	bl	80019e8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80016f8:	2100      	movs	r1, #0
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_I2C4_Init+0x74>)
 80016fc:	f003 fa33 	bl	8004b66 <HAL_I2CEx_ConfigDigitalFilter>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8001706:	f000 f96f 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000310 	.word	0x20000310
 8001714:	40006000 	.word	0x40006000
 8001718:	00303d5b 	.word	0x00303d5b

0800171c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001720:	4b18      	ldr	r3, [pc, #96]	; (8001784 <MX_SPI1_Init+0x68>)
 8001722:	4a19      	ldr	r2, [pc, #100]	; (8001788 <MX_SPI1_Init+0x6c>)
 8001724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <MX_SPI1_Init+0x68>)
 8001728:	2200      	movs	r2, #0
 800172a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800172c:	4b15      	ldr	r3, [pc, #84]	; (8001784 <MX_SPI1_Init+0x68>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_SPI1_Init+0x68>)
 8001734:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001738:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800173a:	4b12      	ldr	r3, [pc, #72]	; (8001784 <MX_SPI1_Init+0x68>)
 800173c:	2200      	movs	r2, #0
 800173e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001740:	4b10      	ldr	r3, [pc, #64]	; (8001784 <MX_SPI1_Init+0x68>)
 8001742:	2200      	movs	r2, #0
 8001744:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_SPI1_Init+0x68>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800174c:	4b0d      	ldr	r3, [pc, #52]	; (8001784 <MX_SPI1_Init+0x68>)
 800174e:	2200      	movs	r2, #0
 8001750:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001752:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_SPI1_Init+0x68>)
 8001754:	2200      	movs	r2, #0
 8001756:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001758:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <MX_SPI1_Init+0x68>)
 800175a:	2200      	movs	r2, #0
 800175c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800175e:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_SPI1_Init+0x68>)
 8001760:	2207      	movs	r2, #7
 8001762:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <MX_SPI1_Init+0x68>)
 8001766:	2200      	movs	r2, #0
 8001768:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_SPI1_Init+0x68>)
 800176c:	2200      	movs	r2, #0
 800176e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <MX_SPI1_Init+0x68>)
 8001772:	f004 fb21 	bl	8005db8 <HAL_SPI_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 800177c:	f000 f934 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200004d8 	.word	0x200004d8
 8001788:	40013000 	.word	0x40013000

0800178c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001790:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 8001792:	4a15      	ldr	r2, [pc, #84]	; (80017e8 <MX_USART2_UART_Init+0x5c>)
 8001794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001796:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 8001798:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800179c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b0e      	ldr	r3, [pc, #56]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b0b      	ldr	r3, [pc, #44]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017c2:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ce:	4805      	ldr	r0, [pc, #20]	; (80017e4 <MX_USART2_UART_Init+0x58>)
 80017d0:	f005 f84c 	bl	800686c <HAL_UART_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80017da:	f000 f905 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	2000053c 	.word	0x2000053c
 80017e8:	40004400 	.word	0x40004400

080017ec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017f0:	4b14      	ldr	r3, [pc, #80]	; (8001844 <MX_USART3_UART_Init+0x58>)
 80017f2:	4a15      	ldr	r2, [pc, #84]	; (8001848 <MX_USART3_UART_Init+0x5c>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017f6:	4b13      	ldr	r3, [pc, #76]	; (8001844 <MX_USART3_UART_Init+0x58>)
 80017f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017fc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <MX_USART3_UART_Init+0x58>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <MX_USART3_UART_Init+0x58>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800180a:	4b0e      	ldr	r3, [pc, #56]	; (8001844 <MX_USART3_UART_Init+0x58>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <MX_USART3_UART_Init+0x58>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <MX_USART3_UART_Init+0x58>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b09      	ldr	r3, [pc, #36]	; (8001844 <MX_USART3_UART_Init+0x58>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001822:	4b08      	ldr	r3, [pc, #32]	; (8001844 <MX_USART3_UART_Init+0x58>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <MX_USART3_UART_Init+0x58>)
 800182a:	2200      	movs	r2, #0
 800182c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_USART3_UART_Init+0x58>)
 8001830:	f005 f81c 	bl	800686c <HAL_UART_Init>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800183a:	f000 f8d5 	bl	80019e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2000035c 	.word	0x2000035c
 8001848:	40004800 	.word	0x40004800

0800184c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001852:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <MX_DMA_Init+0x70>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	4a19      	ldr	r2, [pc, #100]	; (80018bc <MX_DMA_Init+0x70>)
 8001858:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800185c:	6313      	str	r3, [r2, #48]	; 0x30
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <MX_DMA_Init+0x70>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MX_DMA_Init+0x70>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	4a13      	ldr	r2, [pc, #76]	; (80018bc <MX_DMA_Init+0x70>)
 8001870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001874:	6313      	str	r3, [r2, #48]	; 0x30
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MX_DMA_Init+0x70>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800187e:	603b      	str	r3, [r7, #0]
 8001880:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	2011      	movs	r0, #17
 8001888:	f000 ff05 	bl	8002696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800188c:	2011      	movs	r0, #17
 800188e:	f000 ff1e 	bl	80026ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001892:	2200      	movs	r2, #0
 8001894:	2100      	movs	r1, #0
 8001896:	2038      	movs	r0, #56	; 0x38
 8001898:	f000 fefd 	bl	8002696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800189c:	2038      	movs	r0, #56	; 0x38
 800189e:	f000 ff16 	bl	80026ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	203b      	movs	r0, #59	; 0x3b
 80018a8:	f000 fef5 	bl	8002696 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80018ac:	203b      	movs	r0, #59	; 0x3b
 80018ae:	f000 ff0e 	bl	80026ce <HAL_NVIC_EnableIRQ>

}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800

080018c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08c      	sub	sp, #48	; 0x30
 80018c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c6:	f107 031c 	add.w	r3, r7, #28
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	609a      	str	r2, [r3, #8]
 80018d2:	60da      	str	r2, [r3, #12]
 80018d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d6:	4b41      	ldr	r3, [pc, #260]	; (80019dc <MX_GPIO_Init+0x11c>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a40      	ldr	r2, [pc, #256]	; (80019dc <MX_GPIO_Init+0x11c>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b3e      	ldr	r3, [pc, #248]	; (80019dc <MX_GPIO_Init+0x11c>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018ee:	4b3b      	ldr	r3, [pc, #236]	; (80019dc <MX_GPIO_Init+0x11c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a3a      	ldr	r2, [pc, #232]	; (80019dc <MX_GPIO_Init+0x11c>)
 80018f4:	f043 0320 	orr.w	r3, r3, #32
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b38      	ldr	r3, [pc, #224]	; (80019dc <MX_GPIO_Init+0x11c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0320 	and.w	r3, r3, #32
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001906:	4b35      	ldr	r3, [pc, #212]	; (80019dc <MX_GPIO_Init+0x11c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a34      	ldr	r2, [pc, #208]	; (80019dc <MX_GPIO_Init+0x11c>)
 800190c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b32      	ldr	r3, [pc, #200]	; (80019dc <MX_GPIO_Init+0x11c>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	4b2f      	ldr	r3, [pc, #188]	; (80019dc <MX_GPIO_Init+0x11c>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a2e      	ldr	r2, [pc, #184]	; (80019dc <MX_GPIO_Init+0x11c>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b2c      	ldr	r3, [pc, #176]	; (80019dc <MX_GPIO_Init+0x11c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	4b29      	ldr	r3, [pc, #164]	; (80019dc <MX_GPIO_Init+0x11c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4a28      	ldr	r2, [pc, #160]	; (80019dc <MX_GPIO_Init+0x11c>)
 800193c:	f043 0302 	orr.w	r3, r3, #2
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4b26      	ldr	r3, [pc, #152]	; (80019dc <MX_GPIO_Init+0x11c>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800194e:	4b23      	ldr	r3, [pc, #140]	; (80019dc <MX_GPIO_Init+0x11c>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a22      	ldr	r2, [pc, #136]	; (80019dc <MX_GPIO_Init+0x11c>)
 8001954:	f043 0308 	orr.w	r3, r3, #8
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b20      	ldr	r3, [pc, #128]	; (80019dc <MX_GPIO_Init+0x11c>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001966:	4b1d      	ldr	r3, [pc, #116]	; (80019dc <MX_GPIO_Init+0x11c>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a1c      	ldr	r2, [pc, #112]	; (80019dc <MX_GPIO_Init+0x11c>)
 800196c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <MX_GPIO_Init+0x11c>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800197a:	603b      	str	r3, [r7, #0]
 800197c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800197e:	2200      	movs	r2, #0
 8001980:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001984:	4816      	ldr	r0, [pc, #88]	; (80019e0 <MX_GPIO_Init+0x120>)
 8001986:	f001 fc1d 	bl	80031c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800198a:	2200      	movs	r2, #0
 800198c:	f642 41fc 	movw	r1, #11516	; 0x2cfc
 8001990:	4814      	ldr	r0, [pc, #80]	; (80019e4 <MX_GPIO_Init+0x124>)
 8001992:	f001 fc17 	bl	80031c4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001996:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800199a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199c:	2301      	movs	r3, #1
 800199e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a8:	f107 031c 	add.w	r3, r7, #28
 80019ac:	4619      	mov	r1, r3
 80019ae:	480c      	ldr	r0, [pc, #48]	; (80019e0 <MX_GPIO_Init+0x120>)
 80019b0:	f001 fa5c 	bl	8002e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 PG4 PG5
                           PG6 PG7 PG10 PG11
                           PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80019b4:	f642 43fc 	movw	r3, #11516	; 0x2cfc
 80019b8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ba:	2301      	movs	r3, #1
 80019bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_GPIO_Init+0x124>)
 80019ce:	f001 fa4d 	bl	8002e6c <HAL_GPIO_Init>

}
 80019d2:	bf00      	nop
 80019d4:	3730      	adds	r7, #48	; 0x30
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40020400 	.word	0x40020400
 80019e4:	40021800 	.word	0x40021800

080019e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019ec:	b672      	cpsid	i
}
 80019ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1) {
 80019f0:	e7fe      	b.n	80019f0 <Error_Handler+0x8>
	...

080019f4 <__io_putchar>:

extern UART_HandleTypeDef huart3;


#ifdef __GNUC__
int __io_putchar(int ch) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80019fc:	1d39      	adds	r1, r7, #4
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001a02:	2201      	movs	r2, #1
 8001a04:	4803      	ldr	r0, [pc, #12]	; (8001a14 <__io_putchar+0x20>)
 8001a06:	f004 ff7f 	bl	8006908 <HAL_UART_Transmit>
    return ch;
 8001a0a:	687b      	ldr	r3, [r7, #4]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	2000035c 	.word	0x2000035c

08001a18 <getSPIFlag>:
static bool send_spi_flag = true;

extern SPI_HandleTypeDef hspi1;


bool getSPIFlag(){
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
	return spi_flag;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <getSPIFlag+0x14>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000300 	.word	0x20000300

08001a30 <getSendSPIFlag>:
bool getSendSPIFlag(){
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
	return send_spi_flag;
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <getSendSPIFlag+0x14>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000002 	.word	0x20000002

08001a48 <HAL_SPI_TxRxCpltCallback>:


// SPI receive complete callback
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1) {
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <HAL_SPI_TxRxCpltCallback+0x48>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d115      	bne.n	8001a86 <HAL_SPI_TxRxCpltCallback+0x3e>

    	send_spi_flag = false;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <HAL_SPI_TxRxCpltCallback+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
    	if(spi_rx_buffer[0] != 0xFF){
 8001a60:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <HAL_SPI_TxRxCpltCallback+0x50>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2bff      	cmp	r3, #255	; 0xff
 8001a66:	d008      	beq.n	8001a7a <HAL_SPI_TxRxCpltCallback+0x32>
    		spi_flag = true;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <HAL_SPI_TxRxCpltCallback+0x54>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	701a      	strb	r2, [r3, #0]
    		memcpy(rpi_msg, spi_rx_buffer, SPI_BUFFER_SIZE);
 8001a6e:	4b0c      	ldr	r3, [pc, #48]	; (8001aa0 <HAL_SPI_TxRxCpltCallback+0x58>)
 8001a70:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <HAL_SPI_TxRxCpltCallback+0x50>)
 8001a72:	6811      	ldr	r1, [r2, #0]
 8001a74:	6019      	str	r1, [r3, #0]
 8001a76:	8892      	ldrh	r2, [r2, #4]
 8001a78:	809a      	strh	r2, [r3, #4]
    	}
        HAL_SPI_TransmitReceive_IT(&hspi1, spi_tx_buffer, spi_rx_buffer, SPI_BUFFER_SIZE);
 8001a7a:	2306      	movs	r3, #6
 8001a7c:	4a06      	ldr	r2, [pc, #24]	; (8001a98 <HAL_SPI_TxRxCpltCallback+0x50>)
 8001a7e:	4909      	ldr	r1, [pc, #36]	; (8001aa4 <HAL_SPI_TxRxCpltCallback+0x5c>)
 8001a80:	4809      	ldr	r0, [pc, #36]	; (8001aa8 <HAL_SPI_TxRxCpltCallback+0x60>)
 8001a82:	f004 fa45 	bl	8005f10 <HAL_SPI_TransmitReceive_IT>


    }
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40013000 	.word	0x40013000
 8001a94:	20000002 	.word	0x20000002
 8001a98:	20000680 	.word	0x20000680
 8001a9c:	20000300 	.word	0x20000300
 8001aa0:	20000690 	.word	0x20000690
 8001aa4:	20000688 	.word	0x20000688
 8001aa8:	200004d8 	.word	0x200004d8

08001aac <Process_SPI_Command>:




// Function to handle received SPI data
void Process_SPI_Command(uint8_t *data, uint16_t size) {
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b089      	sub	sp, #36	; 0x24
 8001ab0:	af02      	add	r7, sp, #8
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	807b      	strh	r3, [r7, #2]
	uint8_t red = 255;
 8001ab8:	23ff      	movs	r3, #255	; 0xff
 8001aba:	73fb      	strb	r3, [r7, #15]
	uint8_t green = 255;
 8001abc:	23ff      	movs	r3, #255	; 0xff
 8001abe:	73bb      	strb	r3, [r7, #14]
	uint8_t blue = 255;
 8001ac0:	23ff      	movs	r3, #255	; 0xff
 8001ac2:	737b      	strb	r3, [r7, #13]
	uint8_t mode = 0xFF;
 8001ac4:	23ff      	movs	r3, #255	; 0xff
 8001ac6:	733b      	strb	r3, [r7, #12]
        //printf("0x%02X ", data[i]);
    //}
    //printf("\r\n");

    // Example: Handle LED color command (0x01)
    if (data[0] == 0x01) {
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d133      	bne.n	8001b38 <Process_SPI_Command+0x8c>
        uint8_t locker_id = data[1];
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	785b      	ldrb	r3, [r3, #1]
 8001ad4:	72fb      	strb	r3, [r7, #11]
        red = data[2];
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	789b      	ldrb	r3, [r3, #2]
 8001ada:	73fb      	strb	r3, [r7, #15]
        green = data[3];
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	78db      	ldrb	r3, [r3, #3]
 8001ae0:	73bb      	strb	r3, [r7, #14]
        blue = data[4];
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	791b      	ldrb	r3, [r3, #4]
 8001ae6:	737b      	strb	r3, [r7, #13]
        mode = data[5];
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	795b      	ldrb	r3, [r3, #5]
 8001aec:	733b      	strb	r3, [r7, #12]

        if(locker_id == 255) {
 8001aee:	7afb      	ldrb	r3, [r7, #11]
 8001af0:	2bff      	cmp	r3, #255	; 0xff
 8001af2:	d115      	bne.n	8001b20 <Process_SPI_Command+0x74>
        	//HAL_Delay(1);
            //printf("Set all LED to Color: R=%d, G=%d, B=%d\r\n", red, green, blue);
            for(int i = 1; i <= 14; i++) {
 8001af4:	2301      	movs	r3, #1
 8001af6:	617b      	str	r3, [r7, #20]
 8001af8:	e00e      	b.n	8001b18 <Process_SPI_Command+0x6c>
                Send_RGB(i + 100, red, green, blue, mode);
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	3364      	adds	r3, #100	; 0x64
 8001b00:	b298      	uxth	r0, r3
 8001b02:	7b7c      	ldrb	r4, [r7, #13]
 8001b04:	7bba      	ldrb	r2, [r7, #14]
 8001b06:	7bf9      	ldrb	r1, [r7, #15]
 8001b08:	7b3b      	ldrb	r3, [r7, #12]
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	4623      	mov	r3, r4
 8001b0e:	f7ff fae7 	bl	80010e0 <Send_RGB>
            for(int i = 1; i <= 14; i++) {
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	3301      	adds	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	2b0e      	cmp	r3, #14
 8001b1c:	dded      	ble.n	8001afa <Process_SPI_Command+0x4e>
 8001b1e:	e00b      	b.n	8001b38 <Process_SPI_Command+0x8c>
                //HAL_Delay(1);
            }
        } else {
            Send_RGB(locker_id + 100, red, green, blue, mode);
 8001b20:	7afb      	ldrb	r3, [r7, #11]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	3364      	adds	r3, #100	; 0x64
 8001b26:	b298      	uxth	r0, r3
 8001b28:	7b7c      	ldrb	r4, [r7, #13]
 8001b2a:	7bba      	ldrb	r2, [r7, #14]
 8001b2c:	7bf9      	ldrb	r1, [r7, #15]
 8001b2e:	7b3b      	ldrb	r3, [r7, #12]
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	4623      	mov	r3, r4
 8001b34:	f7ff fad4 	bl	80010e0 <Send_RGB>
            //printf("Set LED Color: Locker %d, R=%d, G=%d, B=%d\r\n", locker_id, red, green, blue);
        }
    }

    // Example: Handle price command (0x02)
    if (data[0] == 0x02) {
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b02      	cmp	r3, #2
 8001b3e:	d10d      	bne.n	8001b5c <Process_SPI_Command+0xb0>
        uint8_t locker_id = data[1];
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	785b      	ldrb	r3, [r3, #1]
 8001b44:	72bb      	strb	r3, [r7, #10]
        //uint16_t price = (data[2] << 8) | data[3];
        //printf("Set Price: Locker %d, Price=%d euro\r\n", locker_id, price);
        Send_Price(locker_id, data[2], data[3]);
 8001b46:	7abb      	ldrb	r3, [r7, #10]
 8001b48:	b298      	uxth	r0, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	3302      	adds	r3, #2
 8001b4e:	7819      	ldrb	r1, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3303      	adds	r3, #3
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	f7ff faea 	bl	8001130 <Send_Price>
    }

    // Example: Handle unlock command (0x03)
    if (data[0] == 0x03) {
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d111      	bne.n	8001b88 <Process_SPI_Command+0xdc>
        uint8_t locker_id = data[1];
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	785b      	ldrb	r3, [r3, #1]
 8001b68:	727b      	strb	r3, [r7, #9]
        //printf("Unlock: Locker %d\r\n", locker_id);
        open_cabinet(locker_id);
 8001b6a:	7a7b      	ldrb	r3, [r7, #9]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fb23 	bl	80011b8 <open_cabinet>
        Send_RGB(locker_id + 100, 0, 0, 0, 0);
 8001b72:	7a7b      	ldrb	r3, [r7, #9]
 8001b74:	b29b      	uxth	r3, r3
 8001b76:	3364      	adds	r3, #100	; 0x64
 8001b78:	b298      	uxth	r0, r3
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	9300      	str	r3, [sp, #0]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	2200      	movs	r2, #0
 8001b82:	2100      	movs	r1, #0
 8001b84:	f7ff faac 	bl	80010e0 <Send_RGB>
    }

    if (data[0] == 0x04) {
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	2b04      	cmp	r3, #4
 8001b8e:	d106      	bne.n	8001b9e <Process_SPI_Command+0xf2>
        //uint8_t mode = data[1];
        //printf("Mode: %d\r\n", mode);
        setClimateFlag(true);
 8001b90:	2001      	movs	r0, #1
 8001b92:	f7fe ff83 	bl	8000a9c <setClimateFlag>
        fanMode = data[1];
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	785a      	ldrb	r2, [r3, #1]
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <Process_SPI_Command+0x12c>)
 8001b9c:	701a      	strb	r2, [r3, #0]

    }

    if (data[0] == 0x00) {
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10e      	bne.n	8001bc4 <Process_SPI_Command+0x118>
        for (int i = 0; i < size; i++) {
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	e007      	b.n	8001bbc <Process_SPI_Command+0x110>
            spi_tx_buffer[i] = 0x00;
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <Process_SPI_Command+0x130>)
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < size; i++) {
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	887b      	ldrh	r3, [r7, #2]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	dbf3      	blt.n	8001bac <Process_SPI_Command+0x100>
        }
    }
    send_spi_flag = true;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <Process_SPI_Command+0x134>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	701a      	strb	r2, [r3, #0]
    spi_flag = false;
 8001bca:	4b06      	ldr	r3, [pc, #24]	; (8001be4 <Process_SPI_Command+0x138>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]


}
 8001bd0:	bf00      	nop
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd90      	pop	{r4, r7, pc}
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000688 	.word	0x20000688
 8001be0:	20000002 	.word	0x20000002
 8001be4:	20000300 	.word	0x20000300

08001be8 <SPI_SendMessage>:

// Send a message over SPI to the master
void SPI_SendMessage(uint8_t command, uint8_t locker_id, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4) {
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4604      	mov	r4, r0
 8001bf0:	4608      	mov	r0, r1
 8001bf2:	4611      	mov	r1, r2
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4623      	mov	r3, r4
 8001bf8:	71fb      	strb	r3, [r7, #7]
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71bb      	strb	r3, [r7, #6]
 8001bfe:	460b      	mov	r3, r1
 8001c00:	717b      	strb	r3, [r7, #5]
 8001c02:	4613      	mov	r3, r2
 8001c04:	713b      	strb	r3, [r7, #4]
	//printf("1\r\n");
	send_spi_flag = false;
 8001c06:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <SPI_SendMessage+0x5c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	701a      	strb	r2, [r3, #0]
    spi_tx_buffer[0] = command;
 8001c0c:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <SPI_SendMessage+0x60>)
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	7013      	strb	r3, [r2, #0]
    spi_tx_buffer[1] = locker_id;
 8001c12:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <SPI_SendMessage+0x60>)
 8001c14:	79bb      	ldrb	r3, [r7, #6]
 8001c16:	7053      	strb	r3, [r2, #1]
    spi_tx_buffer[2] = data1;
 8001c18:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <SPI_SendMessage+0x60>)
 8001c1a:	797b      	ldrb	r3, [r7, #5]
 8001c1c:	7093      	strb	r3, [r2, #2]
    spi_tx_buffer[3] = data2;
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <SPI_SendMessage+0x60>)
 8001c20:	793b      	ldrb	r3, [r7, #4]
 8001c22:	70d3      	strb	r3, [r2, #3]
    spi_tx_buffer[4] = data3;
 8001c24:	4a08      	ldr	r2, [pc, #32]	; (8001c48 <SPI_SendMessage+0x60>)
 8001c26:	7e3b      	ldrb	r3, [r7, #24]
 8001c28:	7113      	strb	r3, [r2, #4]
    spi_tx_buffer[5] = data4;
 8001c2a:	4a07      	ldr	r2, [pc, #28]	; (8001c48 <SPI_SendMessage+0x60>)
 8001c2c:	7f3b      	ldrb	r3, [r7, #28]
 8001c2e:	7153      	strb	r3, [r2, #5]

    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_10);
 8001c30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c34:	4805      	ldr	r0, [pc, #20]	; (8001c4c <SPI_SendMessage+0x64>)
 8001c36:	f001 fade 	bl	80031f6 <HAL_GPIO_TogglePin>

}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd90      	pop	{r4, r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000002 	.word	0x20000002
 8001c48:	20000688 	.word	0x20000688
 8001c4c:	40021800 	.word	0x40021800

08001c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <HAL_MspInit+0x44>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	4a0e      	ldr	r2, [pc, #56]	; (8001c94 <HAL_MspInit+0x44>)
 8001c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c60:	6413      	str	r3, [r2, #64]	; 0x40
 8001c62:	4b0c      	ldr	r3, [pc, #48]	; (8001c94 <HAL_MspInit+0x44>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c6a:	607b      	str	r3, [r7, #4]
 8001c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <HAL_MspInit+0x44>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a08      	ldr	r2, [pc, #32]	; (8001c94 <HAL_MspInit+0x44>)
 8001c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_MspInit+0x44>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c82:	603b      	str	r3, [r7, #0]
 8001c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40023800 	.word	0x40023800

08001c98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08e      	sub	sp, #56	; 0x38
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a70      	ldr	r2, [pc, #448]	; (8001e78 <HAL_I2C_MspInit+0x1e0>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d16d      	bne.n	8001d96 <HAL_I2C_MspInit+0xfe>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cba:	4b70      	ldr	r3, [pc, #448]	; (8001e7c <HAL_I2C_MspInit+0x1e4>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	4a6f      	ldr	r2, [pc, #444]	; (8001e7c <HAL_I2C_MspInit+0x1e4>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc6:	4b6d      	ldr	r3, [pc, #436]	; (8001e7c <HAL_I2C_MspInit+0x1e4>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	623b      	str	r3, [r7, #32]
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cd2:	23c0      	movs	r3, #192	; 0xc0
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cd6:	2312      	movs	r3, #18
 8001cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cea:	4619      	mov	r1, r3
 8001cec:	4864      	ldr	r0, [pc, #400]	; (8001e80 <HAL_I2C_MspInit+0x1e8>)
 8001cee:	f001 f8bd 	bl	8002e6c <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMC_I2C_PB6_FMP);
 8001cf2:	2010      	movs	r0, #16
 8001cf4:	f002 ff84 	bl	8004c00 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMC_I2C_PB7_FMP);
 8001cf8:	2020      	movs	r0, #32
 8001cfa:	f002 ff81 	bl	8004c00 <HAL_I2CEx_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cfe:	4b5f      	ldr	r3, [pc, #380]	; (8001e7c <HAL_I2C_MspInit+0x1e4>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a5e      	ldr	r2, [pc, #376]	; (8001e7c <HAL_I2C_MspInit+0x1e4>)
 8001d04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0a:	4b5c      	ldr	r3, [pc, #368]	; (8001e7c <HAL_I2C_MspInit+0x1e4>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d12:	61fb      	str	r3, [r7, #28]
 8001d14:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001d16:	4b5b      	ldr	r3, [pc, #364]	; (8001e84 <HAL_I2C_MspInit+0x1ec>)
 8001d18:	4a5b      	ldr	r2, [pc, #364]	; (8001e88 <HAL_I2C_MspInit+0x1f0>)
 8001d1a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001d1c:	4b59      	ldr	r3, [pc, #356]	; (8001e84 <HAL_I2C_MspInit+0x1ec>)
 8001d1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d22:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d24:	4b57      	ldr	r3, [pc, #348]	; (8001e84 <HAL_I2C_MspInit+0x1ec>)
 8001d26:	2240      	movs	r2, #64	; 0x40
 8001d28:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d2a:	4b56      	ldr	r3, [pc, #344]	; (8001e84 <HAL_I2C_MspInit+0x1ec>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d30:	4b54      	ldr	r3, [pc, #336]	; (8001e84 <HAL_I2C_MspInit+0x1ec>)
 8001d32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d36:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d38:	4b52      	ldr	r3, [pc, #328]	; (8001e84 <HAL_I2C_MspInit+0x1ec>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d3e:	4b51      	ldr	r3, [pc, #324]	; (8001e84 <HAL_I2C_MspInit+0x1ec>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001d44:	4b4f      	ldr	r3, [pc, #316]	; (8001e84 <HAL_I2C_MspInit+0x1ec>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001d4a:	4b4e      	ldr	r3, [pc, #312]	; (8001e84 <HAL_I2C_MspInit+0x1ec>)
 8001d4c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d50:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d52:	4b4c      	ldr	r3, [pc, #304]	; (8001e84 <HAL_I2C_MspInit+0x1ec>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001d58:	484a      	ldr	r0, [pc, #296]	; (8001e84 <HAL_I2C_MspInit+0x1ec>)
 8001d5a:	f000 fcd3 	bl	8002704 <HAL_DMA_Init>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_I2C_MspInit+0xd0>
    {
      Error_Handler();
 8001d64:	f7ff fe40 	bl	80019e8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a46      	ldr	r2, [pc, #280]	; (8001e84 <HAL_I2C_MspInit+0x1ec>)
 8001d6c:	639a      	str	r2, [r3, #56]	; 0x38
 8001d6e:	4a45      	ldr	r2, [pc, #276]	; (8001e84 <HAL_I2C_MspInit+0x1ec>)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001d74:	2200      	movs	r2, #0
 8001d76:	2100      	movs	r1, #0
 8001d78:	201f      	movs	r0, #31
 8001d7a:	f000 fc8c 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001d7e:	201f      	movs	r0, #31
 8001d80:	f000 fca5 	bl	80026ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001d84:	2200      	movs	r2, #0
 8001d86:	2100      	movs	r1, #0
 8001d88:	2020      	movs	r0, #32
 8001d8a:	f000 fc84 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001d8e:	2020      	movs	r0, #32
 8001d90:	f000 fc9d 	bl	80026ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001d94:	e06b      	b.n	8001e6e <HAL_I2C_MspInit+0x1d6>
  else if(hi2c->Instance==I2C2)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a3c      	ldr	r2, [pc, #240]	; (8001e8c <HAL_I2C_MspInit+0x1f4>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d138      	bne.n	8001e12 <HAL_I2C_MspInit+0x17a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001da0:	4b36      	ldr	r3, [pc, #216]	; (8001e7c <HAL_I2C_MspInit+0x1e4>)
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da4:	4a35      	ldr	r2, [pc, #212]	; (8001e7c <HAL_I2C_MspInit+0x1e4>)
 8001da6:	f043 0320 	orr.w	r3, r3, #32
 8001daa:	6313      	str	r3, [r2, #48]	; 0x30
 8001dac:	4b33      	ldr	r3, [pc, #204]	; (8001e7c <HAL_I2C_MspInit+0x1e4>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001db8:	2303      	movs	r3, #3
 8001dba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dbc:	2312      	movs	r3, #18
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001dc8:	2304      	movs	r3, #4
 8001dca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	482f      	ldr	r0, [pc, #188]	; (8001e90 <HAL_I2C_MspInit+0x1f8>)
 8001dd4:	f001 f84a 	bl	8002e6c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001dd8:	4b28      	ldr	r3, [pc, #160]	; (8001e7c <HAL_I2C_MspInit+0x1e4>)
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	4a27      	ldr	r2, [pc, #156]	; (8001e7c <HAL_I2C_MspInit+0x1e4>)
 8001dde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001de2:	6413      	str	r3, [r2, #64]	; 0x40
 8001de4:	4b25      	ldr	r3, [pc, #148]	; (8001e7c <HAL_I2C_MspInit+0x1e4>)
 8001de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2100      	movs	r1, #0
 8001df4:	2021      	movs	r0, #33	; 0x21
 8001df6:	f000 fc4e 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001dfa:	2021      	movs	r0, #33	; 0x21
 8001dfc:	f000 fc67 	bl	80026ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 8001e00:	2200      	movs	r2, #0
 8001e02:	2100      	movs	r1, #0
 8001e04:	2022      	movs	r0, #34	; 0x22
 8001e06:	f000 fc46 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001e0a:	2022      	movs	r0, #34	; 0x22
 8001e0c:	f000 fc5f 	bl	80026ce <HAL_NVIC_EnableIRQ>
}
 8001e10:	e02d      	b.n	8001e6e <HAL_I2C_MspInit+0x1d6>
  else if(hi2c->Instance==I2C4)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a1f      	ldr	r2, [pc, #124]	; (8001e94 <HAL_I2C_MspInit+0x1fc>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d128      	bne.n	8001e6e <HAL_I2C_MspInit+0x1d6>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e1c:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <HAL_I2C_MspInit+0x1e4>)
 8001e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e20:	4a16      	ldr	r2, [pc, #88]	; (8001e7c <HAL_I2C_MspInit+0x1e4>)
 8001e22:	f043 0320 	orr.w	r3, r3, #32
 8001e26:	6313      	str	r3, [r2, #48]	; 0x30
 8001e28:	4b14      	ldr	r3, [pc, #80]	; (8001e7c <HAL_I2C_MspInit+0x1e4>)
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	f003 0320 	and.w	r3, r3, #32
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001e34:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e3a:	2312      	movs	r3, #18
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e42:	2303      	movs	r3, #3
 8001e44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001e46:	2304      	movs	r3, #4
 8001e48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480f      	ldr	r0, [pc, #60]	; (8001e90 <HAL_I2C_MspInit+0x1f8>)
 8001e52:	f001 f80b 	bl	8002e6c <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_I2C_MspInit+0x1e4>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <HAL_I2C_MspInit+0x1e4>)
 8001e5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_I2C_MspInit+0x1e4>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
}
 8001e6e:	bf00      	nop
 8001e70:	3738      	adds	r7, #56	; 0x38
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40005400 	.word	0x40005400
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40020400 	.word	0x40020400
 8001e84:	200003e0 	.word	0x200003e0
 8001e88:	400260a0 	.word	0x400260a0
 8001e8c:	40005800 	.word	0x40005800
 8001e90:	40021400 	.word	0x40021400
 8001e94:	40006000 	.word	0x40006000

08001e98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	; 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a4a      	ldr	r2, [pc, #296]	; (8001fe0 <HAL_SPI_MspInit+0x148>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	f040 808e 	bne.w	8001fd8 <HAL_SPI_MspInit+0x140>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ebc:	4b49      	ldr	r3, [pc, #292]	; (8001fe4 <HAL_SPI_MspInit+0x14c>)
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec0:	4a48      	ldr	r2, [pc, #288]	; (8001fe4 <HAL_SPI_MspInit+0x14c>)
 8001ec2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ec6:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec8:	4b46      	ldr	r3, [pc, #280]	; (8001fe4 <HAL_SPI_MspInit+0x14c>)
 8001eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ecc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed4:	4b43      	ldr	r3, [pc, #268]	; (8001fe4 <HAL_SPI_MspInit+0x14c>)
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	4a42      	ldr	r2, [pc, #264]	; (8001fe4 <HAL_SPI_MspInit+0x14c>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee0:	4b40      	ldr	r3, [pc, #256]	; (8001fe4 <HAL_SPI_MspInit+0x14c>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001eec:	23f0      	movs	r3, #240	; 0xf0
 8001eee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001efc:	2305      	movs	r3, #5
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	4619      	mov	r1, r3
 8001f06:	4838      	ldr	r0, [pc, #224]	; (8001fe8 <HAL_SPI_MspInit+0x150>)
 8001f08:	f000 ffb0 	bl	8002e6c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001f0c:	4b37      	ldr	r3, [pc, #220]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f0e:	4a38      	ldr	r2, [pc, #224]	; (8001ff0 <HAL_SPI_MspInit+0x158>)
 8001f10:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001f12:	4b36      	ldr	r3, [pc, #216]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f14:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001f18:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f1a:	4b34      	ldr	r3, [pc, #208]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f1c:	2240      	movs	r2, #64	; 0x40
 8001f1e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f20:	4b32      	ldr	r3, [pc, #200]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f26:	4b31      	ldr	r3, [pc, #196]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f2c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f2e:	4b2f      	ldr	r3, [pc, #188]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f34:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001f3a:	4b2c      	ldr	r3, [pc, #176]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f40:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f42:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f48:	4b28      	ldr	r3, [pc, #160]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001f4e:	4827      	ldr	r0, [pc, #156]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f50:	f000 fbd8 	bl	8002704 <HAL_DMA_Init>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 8001f5a:	f7ff fd45 	bl	80019e8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a22      	ldr	r2, [pc, #136]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f62:	655a      	str	r2, [r3, #84]	; 0x54
 8001f64:	4a21      	ldr	r2, [pc, #132]	; (8001fec <HAL_SPI_MspInit+0x154>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8001f6a:	4b22      	ldr	r3, [pc, #136]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001f6c:	4a22      	ldr	r2, [pc, #136]	; (8001ff8 <HAL_SPI_MspInit+0x160>)
 8001f6e:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8001f70:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001f72:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001f76:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f78:	4b1e      	ldr	r3, [pc, #120]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001f84:	4b1b      	ldr	r3, [pc, #108]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f8a:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f8c:	4b19      	ldr	r3, [pc, #100]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f92:	4b18      	ldr	r3, [pc, #96]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001f98:	4b16      	ldr	r3, [pc, #88]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f9e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fa0:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001fac:	4811      	ldr	r0, [pc, #68]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001fae:	f000 fba9 	bl	8002704 <HAL_DMA_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <HAL_SPI_MspInit+0x124>
    {
      Error_Handler();
 8001fb8:	f7ff fd16 	bl	80019e8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a0d      	ldr	r2, [pc, #52]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001fc0:	659a      	str	r2, [r3, #88]	; 0x58
 8001fc2:	4a0c      	ldr	r2, [pc, #48]	; (8001ff4 <HAL_SPI_MspInit+0x15c>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2100      	movs	r1, #0
 8001fcc:	2023      	movs	r0, #35	; 0x23
 8001fce:	f000 fb62 	bl	8002696 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001fd2:	2023      	movs	r0, #35	; 0x23
 8001fd4:	f000 fb7b 	bl	80026ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fd8:	bf00      	nop
 8001fda:	3728      	adds	r7, #40	; 0x28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40013000 	.word	0x40013000
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020000 	.word	0x40020000
 8001fec:	20000620 	.word	0x20000620
 8001ff0:	40026458 	.word	0x40026458
 8001ff4:	200005c0 	.word	0x200005c0
 8001ff8:	40026410 	.word	0x40026410

08001ffc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08c      	sub	sp, #48	; 0x30
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 031c 	add.w	r3, r7, #28
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a2e      	ldr	r2, [pc, #184]	; (80020d4 <HAL_UART_MspInit+0xd8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d128      	bne.n	8002070 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800201e:	4b2e      	ldr	r3, [pc, #184]	; (80020d8 <HAL_UART_MspInit+0xdc>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	4a2d      	ldr	r2, [pc, #180]	; (80020d8 <HAL_UART_MspInit+0xdc>)
 8002024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002028:	6413      	str	r3, [r2, #64]	; 0x40
 800202a:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <HAL_UART_MspInit+0xdc>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002032:	61bb      	str	r3, [r7, #24]
 8002034:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002036:	4b28      	ldr	r3, [pc, #160]	; (80020d8 <HAL_UART_MspInit+0xdc>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a27      	ldr	r2, [pc, #156]	; (80020d8 <HAL_UART_MspInit+0xdc>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b25      	ldr	r3, [pc, #148]	; (80020d8 <HAL_UART_MspInit+0xdc>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0301 	and.w	r3, r3, #1
 800204a:	617b      	str	r3, [r7, #20]
 800204c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800204e:	230c      	movs	r3, #12
 8002050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002052:	2302      	movs	r3, #2
 8002054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002056:	2300      	movs	r3, #0
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800205a:	2303      	movs	r3, #3
 800205c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800205e:	2307      	movs	r3, #7
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002062:	f107 031c 	add.w	r3, r7, #28
 8002066:	4619      	mov	r1, r3
 8002068:	481c      	ldr	r0, [pc, #112]	; (80020dc <HAL_UART_MspInit+0xe0>)
 800206a:	f000 feff 	bl	8002e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800206e:	e02d      	b.n	80020cc <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a1a      	ldr	r2, [pc, #104]	; (80020e0 <HAL_UART_MspInit+0xe4>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d128      	bne.n	80020cc <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800207a:	4b17      	ldr	r3, [pc, #92]	; (80020d8 <HAL_UART_MspInit+0xdc>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <HAL_UART_MspInit+0xdc>)
 8002080:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b14      	ldr	r3, [pc, #80]	; (80020d8 <HAL_UART_MspInit+0xdc>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002092:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <HAL_UART_MspInit+0xdc>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	4a10      	ldr	r2, [pc, #64]	; (80020d8 <HAL_UART_MspInit+0xdc>)
 8002098:	f043 0308 	orr.w	r3, r3, #8
 800209c:	6313      	str	r3, [r2, #48]	; 0x30
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_UART_MspInit+0xdc>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	f003 0308 	and.w	r3, r3, #8
 80020a6:	60fb      	str	r3, [r7, #12]
 80020a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b8:	2303      	movs	r3, #3
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020bc:	2307      	movs	r3, #7
 80020be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	4619      	mov	r1, r3
 80020c6:	4807      	ldr	r0, [pc, #28]	; (80020e4 <HAL_UART_MspInit+0xe8>)
 80020c8:	f000 fed0 	bl	8002e6c <HAL_GPIO_Init>
}
 80020cc:	bf00      	nop
 80020ce:	3730      	adds	r7, #48	; 0x30
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40004400 	.word	0x40004400
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40004800 	.word	0x40004800
 80020e4:	40020c00 	.word	0x40020c00

080020e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <NMI_Handler+0x4>

080020ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020f2:	e7fe      	b.n	80020f2 <HardFault_Handler+0x4>

080020f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020f8:	e7fe      	b.n	80020f8 <MemManage_Handler+0x4>

080020fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020fa:	b480      	push	{r7}
 80020fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020fe:	e7fe      	b.n	80020fe <BusFault_Handler+0x4>

08002100 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002104:	e7fe      	b.n	8002104 <UsageFault_Handler+0x4>

08002106 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002106:	b480      	push	{r7}
 8002108:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr

08002122 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002122:	b480      	push	{r7}
 8002124:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002134:	f000 f990 	bl	8002458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}

0800213c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002140:	4802      	ldr	r0, [pc, #8]	; (800214c <DMA1_Stream6_IRQHandler+0x10>)
 8002142:	f000 fc0f 	bl	8002964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200003e0 	.word	0x200003e0

08002150 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002154:	4802      	ldr	r0, [pc, #8]	; (8002160 <I2C1_EV_IRQHandler+0x10>)
 8002156:	f001 f9e9 	bl	800352c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000440 	.word	0x20000440

08002164 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002168:	4802      	ldr	r0, [pc, #8]	; (8002174 <I2C1_ER_IRQHandler+0x10>)
 800216a:	f001 f9f9 	bl	8003560 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000440 	.word	0x20000440

08002178 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 800217c:	4802      	ldr	r0, [pc, #8]	; (8002188 <I2C2_EV_IRQHandler+0x10>)
 800217e:	f001 f9d5 	bl	800352c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	2000048c 	.word	0x2000048c

0800218c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <I2C2_ER_IRQHandler+0x10>)
 8002192:	f001 f9e5 	bl	8003560 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	2000048c 	.word	0x2000048c

080021a0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80021a4:	4802      	ldr	r0, [pc, #8]	; (80021b0 <SPI1_IRQHandler+0x10>)
 80021a6:	f003 ff63 	bl	8006070 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	200004d8 	.word	0x200004d8

080021b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80021b8:	4802      	ldr	r0, [pc, #8]	; (80021c4 <DMA2_Stream0_IRQHandler+0x10>)
 80021ba:	f000 fbd3 	bl	8002964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200005c0 	.word	0x200005c0

080021c8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80021cc:	4802      	ldr	r0, [pc, #8]	; (80021d8 <DMA2_Stream3_IRQHandler+0x10>)
 80021ce:	f000 fbc9 	bl	8002964 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000620 	.word	0x20000620

080021dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
	return 1;
 80021e0:	2301      	movs	r3, #1
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <_kill>:

int _kill(int pid, int sig)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021f6:	f005 f8fd 	bl	80073f4 <__errno>
 80021fa:	4603      	mov	r3, r0
 80021fc:	2216      	movs	r2, #22
 80021fe:	601a      	str	r2, [r3, #0]
	return -1;
 8002200:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <_exit>:

void _exit (int status)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002214:	f04f 31ff 	mov.w	r1, #4294967295
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f7ff ffe7 	bl	80021ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800221e:	e7fe      	b.n	800221e <_exit+0x12>

08002220 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	e00a      	b.n	8002248 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002232:	f3af 8000 	nop.w
 8002236:	4601      	mov	r1, r0
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	60ba      	str	r2, [r7, #8]
 800223e:	b2ca      	uxtb	r2, r1
 8002240:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3301      	adds	r3, #1
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	dbf0      	blt.n	8002232 <_read+0x12>
	}

return len;
 8002250:	687b      	ldr	r3, [r7, #4]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	e009      	b.n	8002280 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	60ba      	str	r2, [r7, #8]
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fbbd 	bl	80019f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	3301      	adds	r3, #1
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	429a      	cmp	r2, r3
 8002286:	dbf1      	blt.n	800226c <_write+0x12>
	}
	return len;
 8002288:	687b      	ldr	r3, [r7, #4]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <_close>:

int _close(int file)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
	return -1;
 800229a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800229e:	4618      	mov	r0, r3
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022ba:	605a      	str	r2, [r3, #4]
	return 0;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <_isatty>:

int _isatty(int file)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
	return 1;
 80022d2:	2301      	movs	r3, #1
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
	return 0;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002304:	4a14      	ldr	r2, [pc, #80]	; (8002358 <_sbrk+0x5c>)
 8002306:	4b15      	ldr	r3, [pc, #84]	; (800235c <_sbrk+0x60>)
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002310:	4b13      	ldr	r3, [pc, #76]	; (8002360 <_sbrk+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d102      	bne.n	800231e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <_sbrk+0x64>)
 800231a:	4a12      	ldr	r2, [pc, #72]	; (8002364 <_sbrk+0x68>)
 800231c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800231e:	4b10      	ldr	r3, [pc, #64]	; (8002360 <_sbrk+0x64>)
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	429a      	cmp	r2, r3
 800232a:	d207      	bcs.n	800233c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800232c:	f005 f862 	bl	80073f4 <__errno>
 8002330:	4603      	mov	r3, r0
 8002332:	220c      	movs	r2, #12
 8002334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002336:	f04f 33ff 	mov.w	r3, #4294967295
 800233a:	e009      	b.n	8002350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <_sbrk+0x64>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002342:	4b07      	ldr	r3, [pc, #28]	; (8002360 <_sbrk+0x64>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	4a05      	ldr	r2, [pc, #20]	; (8002360 <_sbrk+0x64>)
 800234c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800234e:	68fb      	ldr	r3, [r7, #12]
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	20080000 	.word	0x20080000
 800235c:	00000400 	.word	0x00000400
 8002360:	20000304 	.word	0x20000304
 8002364:	200006b0 	.word	0x200006b0

08002368 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <SystemInit+0x20>)
 800236e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002372:	4a05      	ldr	r2, [pc, #20]	; (8002388 <SystemInit+0x20>)
 8002374:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002378:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000ed00 	.word	0xe000ed00

0800238c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800238c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002390:	480d      	ldr	r0, [pc, #52]	; (80023c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002392:	490e      	ldr	r1, [pc, #56]	; (80023cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002394:	4a0e      	ldr	r2, [pc, #56]	; (80023d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002398:	e002      	b.n	80023a0 <LoopCopyDataInit>

0800239a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800239a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800239c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800239e:	3304      	adds	r3, #4

080023a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a4:	d3f9      	bcc.n	800239a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023a6:	4a0b      	ldr	r2, [pc, #44]	; (80023d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023a8:	4c0b      	ldr	r4, [pc, #44]	; (80023d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ac:	e001      	b.n	80023b2 <LoopFillZerobss>

080023ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023b0:	3204      	adds	r2, #4

080023b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b4:	d3fb      	bcc.n	80023ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023b6:	f7ff ffd7 	bl	8002368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ba:	f005 f821 	bl	8007400 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023be:	f7ff f84b 	bl	8001458 <main>
  bx  lr    
 80023c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023c4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80023c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023cc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80023d0:	0800c49c 	.word	0x0800c49c
  ldr r2, =_sbss
 80023d4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80023d8:	200006ac 	.word	0x200006ac

080023dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023dc:	e7fe      	b.n	80023dc <ADC_IRQHandler>

080023de <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023e2:	2003      	movs	r0, #3
 80023e4:	f000 f94c 	bl	8002680 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023e8:	2000      	movs	r0, #0
 80023ea:	f000 f805 	bl	80023f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023ee:	f7ff fc2f 	bl	8001c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_InitTick+0x54>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_InitTick+0x58>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	4619      	mov	r1, r3
 800240a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002412:	fbb2 f3f3 	udiv	r3, r2, r3
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f967 	bl	80026ea <HAL_SYSTICK_Config>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e00e      	b.n	8002444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b0f      	cmp	r3, #15
 800242a:	d80a      	bhi.n	8002442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800242c:	2200      	movs	r2, #0
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	f04f 30ff 	mov.w	r0, #4294967295
 8002434:	f000 f92f 	bl	8002696 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002438:	4a06      	ldr	r2, [pc, #24]	; (8002454 <HAL_InitTick+0x5c>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	e000      	b.n	8002444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000004 	.word	0x20000004
 8002450:	2000000c 	.word	0x2000000c
 8002454:	20000008 	.word	0x20000008

08002458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_IncTick+0x20>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_IncTick+0x24>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4413      	add	r3, r2
 8002468:	4a04      	ldr	r2, [pc, #16]	; (800247c <HAL_IncTick+0x24>)
 800246a:	6013      	str	r3, [r2, #0]
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	2000000c 	.word	0x2000000c
 800247c:	20000698 	.word	0x20000698

08002480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return uwTick;
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <HAL_GetTick+0x14>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000698 	.word	0x20000698

08002498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a0:	f7ff ffee 	bl	8002480 <HAL_GetTick>
 80024a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b0:	d005      	beq.n	80024be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_Delay+0x44>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024be:	bf00      	nop
 80024c0:	f7ff ffde 	bl	8002480 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d8f7      	bhi.n	80024c0 <HAL_Delay+0x28>
  {
  }
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	2000000c 	.word	0x2000000c

080024e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <__NVIC_SetPriorityGrouping+0x40>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024fc:	4013      	ands	r3, r2
 80024fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <__NVIC_SetPriorityGrouping+0x44>)
 800250a:	4313      	orrs	r3, r2
 800250c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800250e:	4a04      	ldr	r2, [pc, #16]	; (8002520 <__NVIC_SetPriorityGrouping+0x40>)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	60d3      	str	r3, [r2, #12]
}
 8002514:	bf00      	nop
 8002516:	3714      	adds	r7, #20
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	e000ed00 	.word	0xe000ed00
 8002524:	05fa0000 	.word	0x05fa0000

08002528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <__NVIC_GetPriorityGrouping+0x18>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	0a1b      	lsrs	r3, r3, #8
 8002532:	f003 0307 	and.w	r3, r3, #7
}
 8002536:	4618      	mov	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	2b00      	cmp	r3, #0
 8002554:	db0b      	blt.n	800256e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002556:	79fb      	ldrb	r3, [r7, #7]
 8002558:	f003 021f 	and.w	r2, r3, #31
 800255c:	4907      	ldr	r1, [pc, #28]	; (800257c <__NVIC_EnableIRQ+0x38>)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	095b      	lsrs	r3, r3, #5
 8002564:	2001      	movs	r0, #1
 8002566:	fa00 f202 	lsl.w	r2, r0, r2
 800256a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	e000e100 	.word	0xe000e100

08002580 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	6039      	str	r1, [r7, #0]
 800258a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002590:	2b00      	cmp	r3, #0
 8002592:	db0a      	blt.n	80025aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	b2da      	uxtb	r2, r3
 8002598:	490c      	ldr	r1, [pc, #48]	; (80025cc <__NVIC_SetPriority+0x4c>)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	0112      	lsls	r2, r2, #4
 80025a0:	b2d2      	uxtb	r2, r2
 80025a2:	440b      	add	r3, r1
 80025a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025a8:	e00a      	b.n	80025c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	4908      	ldr	r1, [pc, #32]	; (80025d0 <__NVIC_SetPriority+0x50>)
 80025b0:	79fb      	ldrb	r3, [r7, #7]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	3b04      	subs	r3, #4
 80025b8:	0112      	lsls	r2, r2, #4
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	440b      	add	r3, r1
 80025be:	761a      	strb	r2, [r3, #24]
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	e000e100 	.word	0xe000e100
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b089      	sub	sp, #36	; 0x24
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f1c3 0307 	rsb	r3, r3, #7
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	bf28      	it	cs
 80025f2:	2304      	movcs	r3, #4
 80025f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	3304      	adds	r3, #4
 80025fa:	2b06      	cmp	r3, #6
 80025fc:	d902      	bls.n	8002604 <NVIC_EncodePriority+0x30>
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3b03      	subs	r3, #3
 8002602:	e000      	b.n	8002606 <NVIC_EncodePriority+0x32>
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002608:	f04f 32ff 	mov.w	r2, #4294967295
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43da      	mvns	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	401a      	ands	r2, r3
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800261c:	f04f 31ff 	mov.w	r1, #4294967295
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	fa01 f303 	lsl.w	r3, r1, r3
 8002626:	43d9      	mvns	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800262c:	4313      	orrs	r3, r2
         );
}
 800262e:	4618      	mov	r0, r3
 8002630:	3724      	adds	r7, #36	; 0x24
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800264c:	d301      	bcc.n	8002652 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800264e:	2301      	movs	r3, #1
 8002650:	e00f      	b.n	8002672 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002652:	4a0a      	ldr	r2, [pc, #40]	; (800267c <SysTick_Config+0x40>)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800265a:	210f      	movs	r1, #15
 800265c:	f04f 30ff 	mov.w	r0, #4294967295
 8002660:	f7ff ff8e 	bl	8002580 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002664:	4b05      	ldr	r3, [pc, #20]	; (800267c <SysTick_Config+0x40>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800266a:	4b04      	ldr	r3, [pc, #16]	; (800267c <SysTick_Config+0x40>)
 800266c:	2207      	movs	r2, #7
 800266e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	e000e010 	.word	0xe000e010

08002680 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f7ff ff29 	bl	80024e0 <__NVIC_SetPriorityGrouping>
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002696:	b580      	push	{r7, lr}
 8002698:	b086      	sub	sp, #24
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026a8:	f7ff ff3e 	bl	8002528 <__NVIC_GetPriorityGrouping>
 80026ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	6978      	ldr	r0, [r7, #20]
 80026b4:	f7ff ff8e 	bl	80025d4 <NVIC_EncodePriority>
 80026b8:	4602      	mov	r2, r0
 80026ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026be:	4611      	mov	r1, r2
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff ff5d 	bl	8002580 <__NVIC_SetPriority>
}
 80026c6:	bf00      	nop
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff31 	bl	8002544 <__NVIC_EnableIRQ>
}
 80026e2:	bf00      	nop
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7ff ffa2 	bl	800263c <SysTick_Config>
 80026f8:	4603      	mov	r3, r0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002710:	f7ff feb6 	bl	8002480 <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e099      	b.n	8002854 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0201 	bic.w	r2, r2, #1
 800273e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002740:	e00f      	b.n	8002762 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002742:	f7ff fe9d 	bl	8002480 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b05      	cmp	r3, #5
 800274e:	d908      	bls.n	8002762 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2220      	movs	r2, #32
 8002754:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2203      	movs	r2, #3
 800275a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e078      	b.n	8002854 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1e8      	bne.n	8002742 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	4b38      	ldr	r3, [pc, #224]	; (800285c <HAL_DMA_Init+0x158>)
 800277c:	4013      	ands	r3, r2
 800277e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800278e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800279a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d107      	bne.n	80027cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c4:	4313      	orrs	r3, r2
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f023 0307 	bic.w	r3, r3, #7
 80027e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d117      	bne.n	8002826 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00e      	beq.n	8002826 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 fab3 	bl	8002d74 <DMA_CheckFifoParam>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d008      	beq.n	8002826 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2240      	movs	r2, #64	; 0x40
 8002818:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002822:	2301      	movs	r3, #1
 8002824:	e016      	b.n	8002854 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 fa6a 	bl	8002d08 <DMA_CalcBaseAndBitshift>
 8002834:	4603      	mov	r3, r0
 8002836:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283c:	223f      	movs	r2, #63	; 0x3f
 800283e:	409a      	lsls	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2201      	movs	r2, #1
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002852:	2300      	movs	r3, #0
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	e010803f 	.word	0xe010803f

08002860 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
 800286c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002876:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800287e:	2b01      	cmp	r3, #1
 8002880:	d101      	bne.n	8002886 <HAL_DMA_Start_IT+0x26>
 8002882:	2302      	movs	r3, #2
 8002884:	e048      	b.n	8002918 <HAL_DMA_Start_IT+0xb8>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d137      	bne.n	800290a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2202      	movs	r2, #2
 800289e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f9fc 	bl	8002cac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b8:	223f      	movs	r2, #63	; 0x3f
 80028ba:	409a      	lsls	r2, r3
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0216 	orr.w	r2, r2, #22
 80028ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695a      	ldr	r2, [r3, #20]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028de:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d007      	beq.n	80028f8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0208 	orr.w	r2, r2, #8
 80028f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f042 0201 	orr.w	r2, r2, #1
 8002906:	601a      	str	r2, [r3, #0]
 8002908:	e005      	b.n	8002916 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002912:	2302      	movs	r3, #2
 8002914:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002916:	7dfb      	ldrb	r3, [r7, #23]
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d004      	beq.n	800293e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2280      	movs	r2, #128	; 0x80
 8002938:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e00c      	b.n	8002958 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2205      	movs	r2, #5
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 0201 	bic.w	r2, r2, #1
 8002954:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	370c      	adds	r7, #12
 800295c:	46bd      	mov	sp, r7
 800295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002962:	4770      	bx	lr

08002964 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002970:	4b92      	ldr	r3, [pc, #584]	; (8002bbc <HAL_DMA_IRQHandler+0x258>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a92      	ldr	r2, [pc, #584]	; (8002bc0 <HAL_DMA_IRQHandler+0x25c>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	0a9b      	lsrs	r3, r3, #10
 800297c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002982:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800298e:	2208      	movs	r2, #8
 8002990:	409a      	lsls	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4013      	ands	r3, r2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d01a      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d013      	beq.n	80029d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f022 0204 	bic.w	r2, r2, #4
 80029b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029bc:	2208      	movs	r2, #8
 80029be:	409a      	lsls	r2, r3
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c8:	f043 0201 	orr.w	r2, r3, #1
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d4:	2201      	movs	r2, #1
 80029d6:	409a      	lsls	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4013      	ands	r3, r2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d012      	beq.n	8002a06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00b      	beq.n	8002a06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f2:	2201      	movs	r2, #1
 80029f4:	409a      	lsls	r2, r3
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fe:	f043 0202 	orr.w	r2, r3, #2
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0a:	2204      	movs	r2, #4
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d012      	beq.n	8002a3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00b      	beq.n	8002a3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a28:	2204      	movs	r2, #4
 8002a2a:	409a      	lsls	r2, r3
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a34:	f043 0204 	orr.w	r2, r3, #4
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a40:	2210      	movs	r2, #16
 8002a42:	409a      	lsls	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d043      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d03c      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5e:	2210      	movs	r2, #16
 8002a60:	409a      	lsls	r2, r3
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d018      	beq.n	8002aa6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d108      	bne.n	8002a94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d024      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	4798      	blx	r3
 8002a92:	e01f      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d01b      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	4798      	blx	r3
 8002aa4:	e016      	b.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d107      	bne.n	8002ac4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0208 	bic.w	r2, r2, #8
 8002ac2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d003      	beq.n	8002ad4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad8:	2220      	movs	r2, #32
 8002ada:	409a      	lsls	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 808e 	beq.w	8002c02 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0310 	and.w	r3, r3, #16
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 8086 	beq.w	8002c02 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afa:	2220      	movs	r2, #32
 8002afc:	409a      	lsls	r2, r3
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b05      	cmp	r3, #5
 8002b0c:	d136      	bne.n	8002b7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f022 0216 	bic.w	r2, r2, #22
 8002b1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695a      	ldr	r2, [r3, #20]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d103      	bne.n	8002b3e <HAL_DMA_IRQHandler+0x1da>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d007      	beq.n	8002b4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0208 	bic.w	r2, r2, #8
 8002b4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b52:	223f      	movs	r2, #63	; 0x3f
 8002b54:	409a      	lsls	r2, r3
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d07d      	beq.n	8002c6e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	4798      	blx	r3
        }
        return;
 8002b7a:	e078      	b.n	8002c6e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01c      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d108      	bne.n	8002baa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d030      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	4798      	blx	r3
 8002ba8:	e02b      	b.n	8002c02 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d027      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	4798      	blx	r3
 8002bba:	e022      	b.n	8002c02 <HAL_DMA_IRQHandler+0x29e>
 8002bbc:	20000004 	.word	0x20000004
 8002bc0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10f      	bne.n	8002bf2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0210 	bic.w	r2, r2, #16
 8002be0:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d032      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d022      	beq.n	8002c5c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2205      	movs	r2, #5
 8002c1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0201 	bic.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	3301      	adds	r3, #1
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d307      	bcc.n	8002c4a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1f2      	bne.n	8002c2e <HAL_DMA_IRQHandler+0x2ca>
 8002c48:	e000      	b.n	8002c4c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c4a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d005      	beq.n	8002c70 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	4798      	blx	r3
 8002c6c:	e000      	b.n	8002c70 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002c6e:	bf00      	nop
    }
  }
}
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop

08002c78 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c86:	b2db      	uxtb	r3, r3
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002cc8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	683a      	ldr	r2, [r7, #0]
 8002cd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	2b40      	cmp	r3, #64	; 0x40
 8002cd8:	d108      	bne.n	8002cec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002cea:	e007      	b.n	8002cfc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68ba      	ldr	r2, [r7, #8]
 8002cf2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	60da      	str	r2, [r3, #12]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	3b10      	subs	r3, #16
 8002d18:	4a13      	ldr	r2, [pc, #76]	; (8002d68 <DMA_CalcBaseAndBitshift+0x60>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	091b      	lsrs	r3, r3, #4
 8002d20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d22:	4a12      	ldr	r2, [pc, #72]	; (8002d6c <DMA_CalcBaseAndBitshift+0x64>)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4413      	add	r3, r2
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d908      	bls.n	8002d48 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <DMA_CalcBaseAndBitshift+0x68>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	1d1a      	adds	r2, r3, #4
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	659a      	str	r2, [r3, #88]	; 0x58
 8002d46:	e006      	b.n	8002d56 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	4b08      	ldr	r3, [pc, #32]	; (8002d70 <DMA_CalcBaseAndBitshift+0x68>)
 8002d50:	4013      	ands	r3, r2
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3714      	adds	r7, #20
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	aaaaaaab 	.word	0xaaaaaaab
 8002d6c:	0800bfcc 	.word	0x0800bfcc
 8002d70:	fffffc00 	.word	0xfffffc00

08002d74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d11f      	bne.n	8002dce <DMA_CheckFifoParam+0x5a>
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d856      	bhi.n	8002e42 <DMA_CheckFifoParam+0xce>
 8002d94:	a201      	add	r2, pc, #4	; (adr r2, 8002d9c <DMA_CheckFifoParam+0x28>)
 8002d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9a:	bf00      	nop
 8002d9c:	08002dad 	.word	0x08002dad
 8002da0:	08002dbf 	.word	0x08002dbf
 8002da4:	08002dad 	.word	0x08002dad
 8002da8:	08002e43 	.word	0x08002e43
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d046      	beq.n	8002e46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dbc:	e043      	b.n	8002e46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002dc6:	d140      	bne.n	8002e4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dcc:	e03d      	b.n	8002e4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dd6:	d121      	bne.n	8002e1c <DMA_CheckFifoParam+0xa8>
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	2b03      	cmp	r3, #3
 8002ddc:	d837      	bhi.n	8002e4e <DMA_CheckFifoParam+0xda>
 8002dde:	a201      	add	r2, pc, #4	; (adr r2, 8002de4 <DMA_CheckFifoParam+0x70>)
 8002de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002de4:	08002df5 	.word	0x08002df5
 8002de8:	08002dfb 	.word	0x08002dfb
 8002dec:	08002df5 	.word	0x08002df5
 8002df0:	08002e0d 	.word	0x08002e0d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	73fb      	strb	r3, [r7, #15]
      break;
 8002df8:	e030      	b.n	8002e5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d025      	beq.n	8002e52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e0a:	e022      	b.n	8002e52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e14:	d11f      	bne.n	8002e56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e1a:	e01c      	b.n	8002e56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d903      	bls.n	8002e2a <DMA_CheckFifoParam+0xb6>
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d003      	beq.n	8002e30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e28:	e018      	b.n	8002e5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	73fb      	strb	r3, [r7, #15]
      break;
 8002e2e:	e015      	b.n	8002e5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00e      	beq.n	8002e5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e40:	e00b      	b.n	8002e5a <DMA_CheckFifoParam+0xe6>
      break;
 8002e42:	bf00      	nop
 8002e44:	e00a      	b.n	8002e5c <DMA_CheckFifoParam+0xe8>
      break;
 8002e46:	bf00      	nop
 8002e48:	e008      	b.n	8002e5c <DMA_CheckFifoParam+0xe8>
      break;
 8002e4a:	bf00      	nop
 8002e4c:	e006      	b.n	8002e5c <DMA_CheckFifoParam+0xe8>
      break;
 8002e4e:	bf00      	nop
 8002e50:	e004      	b.n	8002e5c <DMA_CheckFifoParam+0xe8>
      break;
 8002e52:	bf00      	nop
 8002e54:	e002      	b.n	8002e5c <DMA_CheckFifoParam+0xe8>
      break;   
 8002e56:	bf00      	nop
 8002e58:	e000      	b.n	8002e5c <DMA_CheckFifoParam+0xe8>
      break;
 8002e5a:	bf00      	nop
    }
  } 
  
  return status; 
 8002e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop

08002e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b089      	sub	sp, #36	; 0x24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
 8002e8a:	e175      	b.n	8003178 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	f040 8164 	bne.w	8003172 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d005      	beq.n	8002ec2 <HAL_GPIO_Init+0x56>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d130      	bne.n	8002f24 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	2203      	movs	r2, #3
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ef8:	2201      	movs	r2, #1
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	f003 0201 	and.w	r2, r3, #1
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d017      	beq.n	8002f60 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d123      	bne.n	8002fb4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	08da      	lsrs	r2, r3, #3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3208      	adds	r2, #8
 8002f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	220f      	movs	r2, #15
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	08da      	lsrs	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3208      	adds	r2, #8
 8002fae:	69b9      	ldr	r1, [r7, #24]
 8002fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0203 	and.w	r2, r3, #3
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 80be 	beq.w	8003172 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff6:	4b66      	ldr	r3, [pc, #408]	; (8003190 <HAL_GPIO_Init+0x324>)
 8002ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffa:	4a65      	ldr	r2, [pc, #404]	; (8003190 <HAL_GPIO_Init+0x324>)
 8002ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003000:	6453      	str	r3, [r2, #68]	; 0x44
 8003002:	4b63      	ldr	r3, [pc, #396]	; (8003190 <HAL_GPIO_Init+0x324>)
 8003004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800300a:	60fb      	str	r3, [r7, #12]
 800300c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800300e:	4a61      	ldr	r2, [pc, #388]	; (8003194 <HAL_GPIO_Init+0x328>)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	089b      	lsrs	r3, r3, #2
 8003014:	3302      	adds	r3, #2
 8003016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	f003 0303 	and.w	r3, r3, #3
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	220f      	movs	r2, #15
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a58      	ldr	r2, [pc, #352]	; (8003198 <HAL_GPIO_Init+0x32c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d037      	beq.n	80030aa <HAL_GPIO_Init+0x23e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a57      	ldr	r2, [pc, #348]	; (800319c <HAL_GPIO_Init+0x330>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d031      	beq.n	80030a6 <HAL_GPIO_Init+0x23a>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a56      	ldr	r2, [pc, #344]	; (80031a0 <HAL_GPIO_Init+0x334>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d02b      	beq.n	80030a2 <HAL_GPIO_Init+0x236>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a55      	ldr	r2, [pc, #340]	; (80031a4 <HAL_GPIO_Init+0x338>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d025      	beq.n	800309e <HAL_GPIO_Init+0x232>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a54      	ldr	r2, [pc, #336]	; (80031a8 <HAL_GPIO_Init+0x33c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d01f      	beq.n	800309a <HAL_GPIO_Init+0x22e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a53      	ldr	r2, [pc, #332]	; (80031ac <HAL_GPIO_Init+0x340>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d019      	beq.n	8003096 <HAL_GPIO_Init+0x22a>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a52      	ldr	r2, [pc, #328]	; (80031b0 <HAL_GPIO_Init+0x344>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d013      	beq.n	8003092 <HAL_GPIO_Init+0x226>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a51      	ldr	r2, [pc, #324]	; (80031b4 <HAL_GPIO_Init+0x348>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00d      	beq.n	800308e <HAL_GPIO_Init+0x222>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a50      	ldr	r2, [pc, #320]	; (80031b8 <HAL_GPIO_Init+0x34c>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d007      	beq.n	800308a <HAL_GPIO_Init+0x21e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a4f      	ldr	r2, [pc, #316]	; (80031bc <HAL_GPIO_Init+0x350>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d101      	bne.n	8003086 <HAL_GPIO_Init+0x21a>
 8003082:	2309      	movs	r3, #9
 8003084:	e012      	b.n	80030ac <HAL_GPIO_Init+0x240>
 8003086:	230a      	movs	r3, #10
 8003088:	e010      	b.n	80030ac <HAL_GPIO_Init+0x240>
 800308a:	2308      	movs	r3, #8
 800308c:	e00e      	b.n	80030ac <HAL_GPIO_Init+0x240>
 800308e:	2307      	movs	r3, #7
 8003090:	e00c      	b.n	80030ac <HAL_GPIO_Init+0x240>
 8003092:	2306      	movs	r3, #6
 8003094:	e00a      	b.n	80030ac <HAL_GPIO_Init+0x240>
 8003096:	2305      	movs	r3, #5
 8003098:	e008      	b.n	80030ac <HAL_GPIO_Init+0x240>
 800309a:	2304      	movs	r3, #4
 800309c:	e006      	b.n	80030ac <HAL_GPIO_Init+0x240>
 800309e:	2303      	movs	r3, #3
 80030a0:	e004      	b.n	80030ac <HAL_GPIO_Init+0x240>
 80030a2:	2302      	movs	r3, #2
 80030a4:	e002      	b.n	80030ac <HAL_GPIO_Init+0x240>
 80030a6:	2301      	movs	r3, #1
 80030a8:	e000      	b.n	80030ac <HAL_GPIO_Init+0x240>
 80030aa:	2300      	movs	r3, #0
 80030ac:	69fa      	ldr	r2, [r7, #28]
 80030ae:	f002 0203 	and.w	r2, r2, #3
 80030b2:	0092      	lsls	r2, r2, #2
 80030b4:	4093      	lsls	r3, r2
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80030bc:	4935      	ldr	r1, [pc, #212]	; (8003194 <HAL_GPIO_Init+0x328>)
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	089b      	lsrs	r3, r3, #2
 80030c2:	3302      	adds	r3, #2
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030ca:	4b3d      	ldr	r3, [pc, #244]	; (80031c0 <HAL_GPIO_Init+0x354>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	43db      	mvns	r3, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4013      	ands	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030ee:	4a34      	ldr	r2, [pc, #208]	; (80031c0 <HAL_GPIO_Init+0x354>)
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030f4:	4b32      	ldr	r3, [pc, #200]	; (80031c0 <HAL_GPIO_Init+0x354>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003118:	4a29      	ldr	r2, [pc, #164]	; (80031c0 <HAL_GPIO_Init+0x354>)
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800311e:	4b28      	ldr	r3, [pc, #160]	; (80031c0 <HAL_GPIO_Init+0x354>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	43db      	mvns	r3, r3
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	4013      	ands	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	4313      	orrs	r3, r2
 8003140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003142:	4a1f      	ldr	r2, [pc, #124]	; (80031c0 <HAL_GPIO_Init+0x354>)
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003148:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_GPIO_Init+0x354>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800316c:	4a14      	ldr	r2, [pc, #80]	; (80031c0 <HAL_GPIO_Init+0x354>)
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	3301      	adds	r3, #1
 8003176:	61fb      	str	r3, [r7, #28]
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	2b0f      	cmp	r3, #15
 800317c:	f67f ae86 	bls.w	8002e8c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003180:	bf00      	nop
 8003182:	bf00      	nop
 8003184:	3724      	adds	r7, #36	; 0x24
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40023800 	.word	0x40023800
 8003194:	40013800 	.word	0x40013800
 8003198:	40020000 	.word	0x40020000
 800319c:	40020400 	.word	0x40020400
 80031a0:	40020800 	.word	0x40020800
 80031a4:	40020c00 	.word	0x40020c00
 80031a8:	40021000 	.word	0x40021000
 80031ac:	40021400 	.word	0x40021400
 80031b0:	40021800 	.word	0x40021800
 80031b4:	40021c00 	.word	0x40021c00
 80031b8:	40022000 	.word	0x40022000
 80031bc:	40022400 	.word	0x40022400
 80031c0:	40013c00 	.word	0x40013c00

080031c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	807b      	strh	r3, [r7, #2]
 80031d0:	4613      	mov	r3, r2
 80031d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031d4:	787b      	ldrb	r3, [r7, #1]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031da:	887a      	ldrh	r2, [r7, #2]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80031e0:	e003      	b.n	80031ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80031e2:	887b      	ldrh	r3, [r7, #2]
 80031e4:	041a      	lsls	r2, r3, #16
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	619a      	str	r2, [r3, #24]
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b085      	sub	sp, #20
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	460b      	mov	r3, r1
 8003200:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003208:	887a      	ldrh	r2, [r7, #2]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4013      	ands	r3, r2
 800320e:	041a      	lsls	r2, r3, #16
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	43d9      	mvns	r1, r3
 8003214:	887b      	ldrh	r3, [r7, #2]
 8003216:	400b      	ands	r3, r1
 8003218:	431a      	orrs	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	619a      	str	r2, [r3, #24]
}
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
	...

0800322c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d101      	bne.n	800323e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e07f      	b.n	800333e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d106      	bne.n	8003258 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7fe fd20 	bl	8001c98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2224      	movs	r2, #36	; 0x24
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0201 	bic.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800327c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800328c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d107      	bne.n	80032a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032a2:	609a      	str	r2, [r3, #8]
 80032a4:	e006      	b.n	80032b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689a      	ldr	r2, [r3, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80032b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d104      	bne.n	80032c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6859      	ldr	r1, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4b1d      	ldr	r3, [pc, #116]	; (8003348 <HAL_I2C_Init+0x11c>)
 80032d2:	430b      	orrs	r3, r1
 80032d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69d9      	ldr	r1, [r3, #28]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a1a      	ldr	r2, [r3, #32]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2220      	movs	r2, #32
 800332a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2200      	movs	r2, #0
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	02008000 	.word	0x02008000

0800334c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af02      	add	r7, sp, #8
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	607a      	str	r2, [r7, #4]
 8003356:	461a      	mov	r2, r3
 8003358:	460b      	mov	r3, r1
 800335a:	817b      	strh	r3, [r7, #10]
 800335c:	4613      	mov	r3, r2
 800335e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b20      	cmp	r3, #32
 800336a:	f040 80cd 	bne.w	8003508 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800337c:	d101      	bne.n	8003382 <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 800337e:	2302      	movs	r3, #2
 8003380:	e0c3      	b.n	800350a <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_I2C_Master_Transmit_DMA+0x44>
 800338c:	2302      	movs	r3, #2
 800338e:	e0bc      	b.n	800350a <HAL_I2C_Master_Transmit_DMA+0x1be>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2221      	movs	r2, #33	; 0x21
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2210      	movs	r2, #16
 80033a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	893a      	ldrh	r2, [r7, #8]
 80033b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4a55      	ldr	r2, [pc, #340]	; (8003514 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 80033be:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	4a55      	ldr	r2, [pc, #340]	; (8003518 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 80033c4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	2bff      	cmp	r3, #255	; 0xff
 80033ce:	d906      	bls.n	80033de <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	22ff      	movs	r2, #255	; 0xff
 80033d4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80033d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033da:	617b      	str	r3, [r7, #20]
 80033dc:	e007      	b.n	80033ee <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80033e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033ec:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d070      	beq.n	80034d8 <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d020      	beq.n	8003440 <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	4a46      	ldr	r2, [pc, #280]	; (800351c <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 8003404:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340a:	4a45      	ldr	r2, [pc, #276]	; (8003520 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 800340c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003412:	2200      	movs	r2, #0
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341a:	2200      	movs	r2, #0
 800341c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	3328      	adds	r3, #40	; 0x28
 800342a:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8003430:	f7ff fa16 	bl	8002860 <HAL_DMA_Start_IT>
 8003434:	4603      	mov	r3, r0
 8003436:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003438:	7cfb      	ldrb	r3, [r7, #19]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d138      	bne.n	80034b0 <HAL_I2C_Master_Transmit_DMA+0x164>
 800343e:	e013      	b.n	8003468 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003454:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e050      	b.n	800350a <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	b2da      	uxtb	r2, r3
 800346e:	8979      	ldrh	r1, [r7, #10]
 8003470:	4b2c      	ldr	r3, [pc, #176]	; (8003524 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f001 fa36 	bl	80048e8 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003496:	2110      	movs	r1, #16
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f001 fa57 	bl	800494c <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ac:	601a      	str	r2, [r3, #0]
 80034ae:	e029      	b.n	8003504 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c4:	f043 0210 	orr.w	r2, r3, #16
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e018      	b.n	800350a <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	4a13      	ldr	r2, [pc, #76]	; (8003528 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 80034dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e2:	b2da      	uxtb	r2, r3
 80034e4:	8979      	ldrh	r1, [r7, #10]
 80034e6:	4b0f      	ldr	r3, [pc, #60]	; (8003524 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f001 f9fa 	bl	80048e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80034fc:	2101      	movs	r1, #1
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f001 fa24 	bl	800494c <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	e000      	b.n	800350a <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8003508:	2302      	movs	r3, #2
  }
}
 800350a:	4618      	mov	r0, r3
 800350c:	3718      	adds	r7, #24
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	ffff0000 	.word	0xffff0000
 8003518:	08003b35 	.word	0x08003b35
 800351c:	080047a3 	.word	0x080047a3
 8003520:	08004839 	.word	0x08004839
 8003524:	80002000 	.word	0x80002000
 8003528:	080036df 	.word	0x080036df

0800352c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	68f9      	ldr	r1, [r7, #12]
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	4798      	blx	r3
  }
}
 8003558:	bf00      	nop
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	699b      	ldr	r3, [r3, #24]
 800356e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	0a1b      	lsrs	r3, r3, #8
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	d010      	beq.n	80035a6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	09db      	lsrs	r3, r3, #7
 8003588:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003594:	f043 0201 	orr.w	r2, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035a4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	0a9b      	lsrs	r3, r3, #10
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d010      	beq.n	80035d4 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	09db      	lsrs	r3, r3, #7
 80035b6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c2:	f043 0208 	orr.w	r2, r3, #8
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035d2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	0a5b      	lsrs	r3, r3, #9
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d010      	beq.n	8003602 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	09db      	lsrs	r3, r3, #7
 80035e4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00a      	beq.n	8003602 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f0:	f043 0202 	orr.w	r2, r3, #2
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003600:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 030b 	and.w	r3, r3, #11
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003612:	68f9      	ldr	r1, [r7, #12]
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 ffa9 	bl	800456c <I2C_ITError>
  }
}
 800361a:	bf00      	nop
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003622:	b480      	push	{r7}
 8003624:	b083      	sub	sp, #12
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr

08003636 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003636:	b480      	push	{r7}
 8003638:	b083      	sub	sp, #12
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800363e:	bf00      	nop
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr

0800364a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	460b      	mov	r3, r1
 8003668:	70fb      	strb	r3, [r7, #3]
 800366a:	4613      	mov	r3, r2
 800366c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr

0800367a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr

0800368e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036a2:	b480      	push	{r7}
 80036a4:	b083      	sub	sp, #12
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80036aa:	bf00      	nop
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b083      	sub	sp, #12
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b088      	sub	sp, #32
 80036e2:	af02      	add	r7, sp, #8
 80036e4:	60f8      	str	r0, [r7, #12]
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d101      	bne.n	80036fc <I2C_Master_ISR_IT+0x1e>
 80036f8:	2302      	movs	r3, #2
 80036fa:	e114      	b.n	8003926 <I2C_Master_ISR_IT+0x248>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	091b      	lsrs	r3, r3, #4
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d013      	beq.n	8003738 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	091b      	lsrs	r3, r3, #4
 8003714:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00d      	beq.n	8003738 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2210      	movs	r2, #16
 8003722:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003728:	f043 0204 	orr.w	r2, r3, #4
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f001 f812 	bl	800475a <I2C_Flush_TXDR>
 8003736:	e0e1      	b.n	80038fc <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	089b      	lsrs	r3, r3, #2
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b00      	cmp	r3, #0
 8003742:	d023      	beq.n	800378c <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	089b      	lsrs	r3, r3, #2
 8003748:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800374c:	2b00      	cmp	r3, #0
 800374e:	d01d      	beq.n	800378c <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	f023 0304 	bic.w	r3, r3, #4
 8003756:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376a:	1c5a      	adds	r2, r3, #1
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003774:	3b01      	subs	r3, #1
 8003776:	b29a      	uxth	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003780:	b29b      	uxth	r3, r3
 8003782:	3b01      	subs	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	855a      	strh	r2, [r3, #42]	; 0x2a
 800378a:	e0b7      	b.n	80038fc <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	085b      	lsrs	r3, r3, #1
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01e      	beq.n	80037d6 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	085b      	lsrs	r3, r3, #1
 800379c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d018      	beq.n	80037d6 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a8:	781a      	ldrb	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037d4:	e092      	b.n	80038fc <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	09db      	lsrs	r3, r3, #7
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d05d      	beq.n	800389e <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	099b      	lsrs	r3, r3, #6
 80037e6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d057      	beq.n	800389e <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d040      	beq.n	800387a <I2C_Master_ISR_IT+0x19c>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d13c      	bne.n	800387a <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	b29b      	uxth	r3, r3
 8003808:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800380c:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003812:	b29b      	uxth	r3, r3
 8003814:	2bff      	cmp	r3, #255	; 0xff
 8003816:	d90e      	bls.n	8003836 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	22ff      	movs	r2, #255	; 0xff
 800381c:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003822:	b2da      	uxtb	r2, r3
 8003824:	8a79      	ldrh	r1, [r7, #18]
 8003826:	2300      	movs	r3, #0
 8003828:	9300      	str	r3, [sp, #0]
 800382a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f001 f85a 	bl	80048e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003834:	e032      	b.n	800389c <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003848:	d00b      	beq.n	8003862 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384e:	b2da      	uxtb	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003854:	8a79      	ldrh	r1, [r7, #18]
 8003856:	2000      	movs	r0, #0
 8003858:	9000      	str	r0, [sp, #0]
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f001 f844 	bl	80048e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003860:	e01c      	b.n	800389c <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003866:	b2da      	uxtb	r2, r3
 8003868:	8a79      	ldrh	r1, [r7, #18]
 800386a:	2300      	movs	r3, #0
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f001 f838 	bl	80048e8 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003878:	e010      	b.n	800389c <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003884:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003888:	d003      	beq.n	8003892 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 fba9 	bl	8003fe2 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003890:	e034      	b.n	80038fc <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003892:	2140      	movs	r1, #64	; 0x40
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 fe69 	bl	800456c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800389a:	e02f      	b.n	80038fc <I2C_Master_ISR_IT+0x21e>
 800389c:	e02e      	b.n	80038fc <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	099b      	lsrs	r3, r3, #6
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d028      	beq.n	80038fc <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	099b      	lsrs	r3, r3, #6
 80038ae:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d022      	beq.n	80038fc <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d119      	bne.n	80038f4 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038ce:	d015      	beq.n	80038fc <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038d8:	d108      	bne.n	80038ec <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	e007      	b.n	80038fc <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 fb78 	bl	8003fe2 <I2C_ITMasterSeqCplt>
 80038f2:	e003      	b.n	80038fc <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80038f4:	2140      	movs	r1, #64	; 0x40
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 fe38 	bl	800456c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d009      	beq.n	800391c <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003914:	6979      	ldr	r1, [r7, #20]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 fbfe 	bl	8004118 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3718      	adds	r7, #24
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b086      	sub	sp, #24
 8003932:	af00      	add	r7, sp, #0
 8003934:	60f8      	str	r0, [r7, #12]
 8003936:	60b9      	str	r1, [r7, #8]
 8003938:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800393e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <I2C_Slave_ISR_IT+0x24>
 800394e:	2302      	movs	r3, #2
 8003950:	e0ec      	b.n	8003b2c <I2C_Slave_ISR_IT+0x1fe>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	095b      	lsrs	r3, r3, #5
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	095b      	lsrs	r3, r3, #5
 800396a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003972:	6939      	ldr	r1, [r7, #16]
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fc99 	bl	80042ac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	091b      	lsrs	r3, r3, #4
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d04d      	beq.n	8003a22 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800398e:	2b00      	cmp	r3, #0
 8003990:	d047      	beq.n	8003a22 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003996:	b29b      	uxth	r3, r3
 8003998:	2b00      	cmp	r3, #0
 800399a:	d128      	bne.n	80039ee <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b28      	cmp	r3, #40	; 0x28
 80039a6:	d108      	bne.n	80039ba <I2C_Slave_ISR_IT+0x8c>
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039ae:	d104      	bne.n	80039ba <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80039b0:	6939      	ldr	r1, [r7, #16]
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 fd84 	bl	80044c0 <I2C_ITListenCplt>
 80039b8:	e032      	b.n	8003a20 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b29      	cmp	r3, #41	; 0x29
 80039c4:	d10e      	bne.n	80039e4 <I2C_Slave_ISR_IT+0xb6>
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039cc:	d00a      	beq.n	80039e4 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	2210      	movs	r2, #16
 80039d4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 febf 	bl	800475a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80039dc:	68f8      	ldr	r0, [r7, #12]
 80039de:	f000 fb3d 	bl	800405c <I2C_ITSlaveSeqCplt>
 80039e2:	e01d      	b.n	8003a20 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2210      	movs	r2, #16
 80039ea:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80039ec:	e096      	b.n	8003b1c <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2210      	movs	r2, #16
 80039f4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fa:	f043 0204 	orr.w	r2, r3, #4
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d004      	beq.n	8003a12 <I2C_Slave_ISR_IT+0xe4>
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a0e:	f040 8085 	bne.w	8003b1c <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a16:	4619      	mov	r1, r3
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fda7 	bl	800456c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003a1e:	e07d      	b.n	8003b1c <I2C_Slave_ISR_IT+0x1ee>
 8003a20:	e07c      	b.n	8003b1c <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	089b      	lsrs	r3, r3, #2
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d030      	beq.n	8003a90 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	089b      	lsrs	r3, r3, #2
 8003a32:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d02a      	beq.n	8003a90 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d018      	beq.n	8003a76 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	b29a      	uxth	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d14f      	bne.n	8003b20 <I2C_Slave_ISR_IT+0x1f2>
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a86:	d04b      	beq.n	8003b20 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fae7 	bl	800405c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003a8e:	e047      	b.n	8003b20 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	08db      	lsrs	r3, r3, #3
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	08db      	lsrs	r3, r3, #3
 8003aa0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d004      	beq.n	8003ab2 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003aa8:	6939      	ldr	r1, [r7, #16]
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 fa15 	bl	8003eda <I2C_ITAddrCplt>
 8003ab0:	e037      	b.n	8003b22 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d031      	beq.n	8003b22 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	085b      	lsrs	r3, r3, #1
 8003ac2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d02b      	beq.n	8003b22 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d018      	beq.n	8003b06 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	781a      	ldrb	r2, [r3, #0]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	851a      	strh	r2, [r3, #40]	; 0x28
 8003b04:	e00d      	b.n	8003b22 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b0c:	d002      	beq.n	8003b14 <I2C_Slave_ISR_IT+0x1e6>
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d106      	bne.n	8003b22 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 faa1 	bl	800405c <I2C_ITSlaveSeqCplt>
 8003b1a:	e002      	b.n	8003b22 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003b1c:	bf00      	nop
 8003b1e:	e000      	b.n	8003b22 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003b20:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3718      	adds	r7, #24
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af02      	add	r7, sp, #8
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d101      	bne.n	8003b4e <I2C_Master_ISR_DMA+0x1a>
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	e0e1      	b.n	8003d12 <I2C_Master_ISR_DMA+0x1de>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2201      	movs	r2, #1
 8003b52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	f003 0301 	and.w	r3, r3, #1
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d017      	beq.n	8003b92 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d011      	beq.n	8003b92 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2210      	movs	r2, #16
 8003b74:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7a:	f043 0204 	orr.w	r2, r3, #4
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003b82:	2120      	movs	r1, #32
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 fee1 	bl	800494c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fde5 	bl	800475a <I2C_Flush_TXDR>
 8003b90:	e0ba      	b.n	8003d08 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	09db      	lsrs	r3, r3, #7
 8003b96:	f003 0301 	and.w	r3, r3, #1
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d072      	beq.n	8003c84 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	099b      	lsrs	r3, r3, #6
 8003ba2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d06c      	beq.n	8003c84 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bb8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d04e      	beq.n	8003c62 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bd0:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	2bff      	cmp	r3, #255	; 0xff
 8003bda:	d906      	bls.n	8003bea <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	22ff      	movs	r2, #255	; 0xff
 8003be0:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003be2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	e010      	b.n	8003c0c <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bfc:	d003      	beq.n	8003c06 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	e002      	b.n	8003c0c <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003c06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c0a:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	8a79      	ldrh	r1, [r7, #18]
 8003c14:	2300      	movs	r3, #0
 8003c16:	9300      	str	r3, [sp, #0]
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 fe64 	bl	80048e8 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	b29a      	uxth	r2, r3
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b22      	cmp	r3, #34	; 0x22
 8003c3c:	d108      	bne.n	8003c50 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c4c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003c4e:	e05b      	b.n	8003d08 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c5e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003c60:	e052      	b.n	8003d08 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c70:	d003      	beq.n	8003c7a <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f000 f9b5 	bl	8003fe2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003c78:	e046      	b.n	8003d08 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003c7a:	2140      	movs	r1, #64	; 0x40
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 fc75 	bl	800456c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003c82:	e041      	b.n	8003d08 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	099b      	lsrs	r3, r3, #6
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d029      	beq.n	8003ce4 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	099b      	lsrs	r3, r3, #6
 8003c94:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d023      	beq.n	8003ce4 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d119      	bne.n	8003cda <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003cb4:	d027      	beq.n	8003d06 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cbe:	d108      	bne.n	8003cd2 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003cce:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003cd0:	e019      	b.n	8003d06 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f985 	bl	8003fe2 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003cd8:	e015      	b.n	8003d06 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003cda:	2140      	movs	r1, #64	; 0x40
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 fc45 	bl	800456c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003ce2:	e010      	b.n	8003d06 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00b      	beq.n	8003d08 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	095b      	lsrs	r3, r3, #5
 8003cf4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003cfc:	68b9      	ldr	r1, [r7, #8]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fa0a 	bl	8004118 <I2C_ITMasterCplt>
 8003d04:	e000      	b.n	8003d08 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003d06:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3718      	adds	r7, #24
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003d1a:	b580      	push	{r7, lr}
 8003d1c:	b088      	sub	sp, #32
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	60b9      	str	r1, [r7, #8]
 8003d24:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <I2C_Slave_ISR_DMA+0x24>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e0c9      	b.n	8003ed2 <I2C_Slave_ISR_DMA+0x1b8>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	095b      	lsrs	r3, r3, #5
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d009      	beq.n	8003d66 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	095b      	lsrs	r3, r3, #5
 8003d56:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003d5e:	68b9      	ldr	r1, [r7, #8]
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 faa3 	bl	80042ac <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 809a 	beq.w	8003ea8 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	091b      	lsrs	r3, r3, #4
 8003d78:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 8093 	beq.w	8003ea8 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	0b9b      	lsrs	r3, r3, #14
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d105      	bne.n	8003d9a <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	0bdb      	lsrs	r3, r3, #15
 8003d92:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d07f      	beq.n	8003e9a <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00d      	beq.n	8003dbe <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	0bdb      	lsrs	r3, r3, #15
 8003da6:	f003 0301 	and.w	r3, r3, #1
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d007      	beq.n	8003dbe <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d00d      	beq.n	8003de2 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	0b9b      	lsrs	r3, r3, #14
 8003dca:	f003 0301 	and.w	r3, r3, #1
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8003dde:	2301      	movs	r3, #1
 8003de0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d128      	bne.n	8003e3a <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b28      	cmp	r3, #40	; 0x28
 8003df2:	d108      	bne.n	8003e06 <I2C_Slave_ISR_DMA+0xec>
 8003df4:	69bb      	ldr	r3, [r7, #24]
 8003df6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003dfa:	d104      	bne.n	8003e06 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003dfc:	68b9      	ldr	r1, [r7, #8]
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 fb5e 	bl	80044c0 <I2C_ITListenCplt>
 8003e04:	e048      	b.n	8003e98 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b29      	cmp	r3, #41	; 0x29
 8003e10:	d10e      	bne.n	8003e30 <I2C_Slave_ISR_DMA+0x116>
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e18:	d00a      	beq.n	8003e30 <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	2210      	movs	r2, #16
 8003e20:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 fc99 	bl	800475a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f917 	bl	800405c <I2C_ITSlaveSeqCplt>
 8003e2e:	e033      	b.n	8003e98 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2210      	movs	r2, #16
 8003e36:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003e38:	e034      	b.n	8003ea4 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2210      	movs	r2, #16
 8003e40:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e46:	f043 0204 	orr.w	r2, r3, #4
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e54:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <I2C_Slave_ISR_DMA+0x14a>
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e62:	d11f      	bne.n	8003ea4 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e64:	7dfb      	ldrb	r3, [r7, #23]
 8003e66:	2b21      	cmp	r3, #33	; 0x21
 8003e68:	d002      	beq.n	8003e70 <I2C_Slave_ISR_DMA+0x156>
 8003e6a:	7dfb      	ldrb	r3, [r7, #23]
 8003e6c:	2b29      	cmp	r3, #41	; 0x29
 8003e6e:	d103      	bne.n	8003e78 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2221      	movs	r2, #33	; 0x21
 8003e74:	631a      	str	r2, [r3, #48]	; 0x30
 8003e76:	e008      	b.n	8003e8a <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003e78:	7dfb      	ldrb	r3, [r7, #23]
 8003e7a:	2b22      	cmp	r3, #34	; 0x22
 8003e7c:	d002      	beq.n	8003e84 <I2C_Slave_ISR_DMA+0x16a>
 8003e7e:	7dfb      	ldrb	r3, [r7, #23]
 8003e80:	2b2a      	cmp	r3, #42	; 0x2a
 8003e82:	d102      	bne.n	8003e8a <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2222      	movs	r2, #34	; 0x22
 8003e88:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8e:	4619      	mov	r1, r3
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 fb6b 	bl	800456c <I2C_ITError>
      if (treatdmanack == 1U)
 8003e96:	e005      	b.n	8003ea4 <I2C_Slave_ISR_DMA+0x18a>
 8003e98:	e004      	b.n	8003ea4 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2210      	movs	r2, #16
 8003ea0:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003ea2:	e011      	b.n	8003ec8 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8003ea4:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003ea6:	e00f      	b.n	8003ec8 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	08db      	lsrs	r3, r3, #3
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d009      	beq.n	8003ec8 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	08db      	lsrs	r3, r3, #3
 8003eb8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003ec0:	68b9      	ldr	r1, [r7, #8]
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f000 f809 	bl	8003eda <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3720      	adds	r7, #32
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}

08003eda <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b084      	sub	sp, #16
 8003ede:	af00      	add	r7, sp, #0
 8003ee0:	6078      	str	r0, [r7, #4]
 8003ee2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ef0:	2b28      	cmp	r3, #40	; 0x28
 8003ef2:	d16a      	bne.n	8003fca <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	0c1b      	lsrs	r3, r3, #16
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	0c1b      	lsrs	r3, r3, #16
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003f12:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f20:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003f2e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d138      	bne.n	8003faa <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003f38:	897b      	ldrh	r3, [r7, #10]
 8003f3a:	09db      	lsrs	r3, r3, #7
 8003f3c:	b29a      	uxth	r2, r3
 8003f3e:	89bb      	ldrh	r3, [r7, #12]
 8003f40:	4053      	eors	r3, r2
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	f003 0306 	and.w	r3, r3, #6
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d11c      	bne.n	8003f86 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003f4c:	897b      	ldrh	r3, [r7, #10]
 8003f4e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d13b      	bne.n	8003fda <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2208      	movs	r2, #8
 8003f6e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003f78:	89ba      	ldrh	r2, [r7, #12]
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff fb6d 	bl	800365e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003f84:	e029      	b.n	8003fda <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003f86:	893b      	ldrh	r3, [r7, #8]
 8003f88:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003f8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fd40 	bl	8004a14 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003f9c:	89ba      	ldrh	r2, [r7, #12]
 8003f9e:	7bfb      	ldrb	r3, [r7, #15]
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f7ff fb5b 	bl	800365e <HAL_I2C_AddrCallback>
}
 8003fa8:	e017      	b.n	8003fda <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003faa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fd30 	bl	8004a14 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003fbc:	89ba      	ldrh	r2, [r7, #12]
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f7ff fb4b 	bl	800365e <HAL_I2C_AddrCallback>
}
 8003fc8:	e007      	b.n	8003fda <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2208      	movs	r2, #8
 8003fd0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003fda:	bf00      	nop
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b082      	sub	sp, #8
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b21      	cmp	r3, #33	; 0x21
 8003ffc:	d115      	bne.n	800402a <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2220      	movs	r2, #32
 8004002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2211      	movs	r2, #17
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004012:	2101      	movs	r1, #1
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 fcfd 	bl	8004a14 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7fd f8a0 	bl	8001168 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004028:	e014      	b.n	8004054 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2220      	movs	r2, #32
 800402e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2212      	movs	r2, #18
 8004036:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800403e:	2102      	movs	r1, #2
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fce7 	bl	8004a14 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff fae7 	bl	8003622 <HAL_I2C_MasterRxCpltCallback>
}
 8004054:	bf00      	nop
 8004056:	3708      	adds	r7, #8
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	0b9b      	lsrs	r3, r3, #14
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	2b00      	cmp	r3, #0
 800407e:	d008      	beq.n	8004092 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	e00d      	b.n	80040ae <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	0bdb      	lsrs	r3, r3, #15
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d007      	beq.n	80040ae <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040ac:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b29      	cmp	r3, #41	; 0x29
 80040b8:	d112      	bne.n	80040e0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2228      	movs	r2, #40	; 0x28
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2221      	movs	r2, #33	; 0x21
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80040c8:	2101      	movs	r1, #1
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fca2 	bl	8004a14 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff faac 	bl	8003636 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80040de:	e017      	b.n	8004110 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b2a      	cmp	r3, #42	; 0x2a
 80040ea:	d111      	bne.n	8004110 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2228      	movs	r2, #40	; 0x28
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2222      	movs	r2, #34	; 0x22
 80040f8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80040fa:	2102      	movs	r1, #2
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f000 fc89 	bl	8004a14 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff fa9d 	bl	800364a <HAL_I2C_SlaveRxCpltCallback>
}
 8004110:	bf00      	nop
 8004112:	3710      	adds	r7, #16
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}

08004118 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2220      	movs	r2, #32
 800412c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b21      	cmp	r3, #33	; 0x21
 8004138:	d107      	bne.n	800414a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800413a:	2101      	movs	r1, #1
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 fc69 	bl	8004a14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2211      	movs	r2, #17
 8004146:	631a      	str	r2, [r3, #48]	; 0x30
 8004148:	e00c      	b.n	8004164 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b22      	cmp	r3, #34	; 0x22
 8004154:	d106      	bne.n	8004164 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004156:	2102      	movs	r1, #2
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 fc5b 	bl	8004a14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2212      	movs	r2, #18
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6859      	ldr	r1, [r3, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	4b4d      	ldr	r3, [pc, #308]	; (80042a4 <I2C_ITMasterCplt+0x18c>)
 8004170:	400b      	ands	r3, r1
 8004172:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a4a      	ldr	r2, [pc, #296]	; (80042a8 <I2C_ITMasterCplt+0x190>)
 800417e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	091b      	lsrs	r3, r3, #4
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d009      	beq.n	80041a0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2210      	movs	r2, #16
 8004192:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004198:	f043 0204 	orr.w	r2, r3, #4
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b60      	cmp	r3, #96	; 0x60
 80041aa:	d10b      	bne.n	80041c4 <I2C_ITMasterCplt+0xac>
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	089b      	lsrs	r3, r3, #2
 80041b0:	f003 0301 	and.w	r3, r3, #1
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d005      	beq.n	80041c4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80041c2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 fac8 	bl	800475a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ce:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b60      	cmp	r3, #96	; 0x60
 80041da:	d002      	beq.n	80041e2 <I2C_ITMasterCplt+0xca>
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d006      	beq.n	80041f0 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e6:	4619      	mov	r1, r3
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f9bf 	bl	800456c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80041ee:	e054      	b.n	800429a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b21      	cmp	r3, #33	; 0x21
 80041fa:	d124      	bne.n	8004246 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b40      	cmp	r3, #64	; 0x40
 8004214:	d10b      	bne.n	800422e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff fa31 	bl	800368e <HAL_I2C_MemTxCpltCallback>
}
 800422c:	e035      	b.n	800429a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f7fc ff92 	bl	8001168 <HAL_I2C_MasterTxCpltCallback>
}
 8004244:	e029      	b.n	800429a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b22      	cmp	r3, #34	; 0x22
 8004250:	d123      	bne.n	800429a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2220      	movs	r2, #32
 8004256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b40      	cmp	r3, #64	; 0x40
 800426a:	d10b      	bne.n	8004284 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f7ff fa10 	bl	80036a2 <HAL_I2C_MemRxCpltCallback>
}
 8004282:	e00a      	b.n	800429a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f7ff f9c4 	bl	8003622 <HAL_I2C_MasterRxCpltCallback>
}
 800429a:	bf00      	nop
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	fe00e800 	.word	0xfe00e800
 80042a8:	ffff0000 	.word	0xffff0000

080042ac <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042c8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2220      	movs	r2, #32
 80042d0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80042d2:	7bfb      	ldrb	r3, [r7, #15]
 80042d4:	2b21      	cmp	r3, #33	; 0x21
 80042d6:	d002      	beq.n	80042de <I2C_ITSlaveCplt+0x32>
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	2b29      	cmp	r3, #41	; 0x29
 80042dc:	d108      	bne.n	80042f0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80042de:	f248 0101 	movw	r1, #32769	; 0x8001
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fb96 	bl	8004a14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2221      	movs	r2, #33	; 0x21
 80042ec:	631a      	str	r2, [r3, #48]	; 0x30
 80042ee:	e00d      	b.n	800430c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	2b22      	cmp	r3, #34	; 0x22
 80042f4:	d002      	beq.n	80042fc <I2C_ITSlaveCplt+0x50>
 80042f6:	7bfb      	ldrb	r3, [r7, #15]
 80042f8:	2b2a      	cmp	r3, #42	; 0x2a
 80042fa:	d107      	bne.n	800430c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80042fc:	f248 0102 	movw	r1, #32770	; 0x8002
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fb87 	bl	8004a14 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2222      	movs	r2, #34	; 0x22
 800430a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800431a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	6859      	ldr	r1, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	4b64      	ldr	r3, [pc, #400]	; (80044b8 <I2C_ITSlaveCplt+0x20c>)
 8004328:	400b      	ands	r3, r1
 800432a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 fa14 	bl	800475a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	0b9b      	lsrs	r3, r3, #14
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d013      	beq.n	8004366 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800434c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004352:	2b00      	cmp	r3, #0
 8004354:	d020      	beq.n	8004398 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	b29a      	uxth	r2, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004364:	e018      	b.n	8004398 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	0bdb      	lsrs	r3, r3, #15
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d012      	beq.n	8004398 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004380:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004386:	2b00      	cmp	r3, #0
 8004388:	d006      	beq.n	8004398 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	b29a      	uxth	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	089b      	lsrs	r3, r3, #2
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d020      	beq.n	80043e6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	f023 0304 	bic.w	r3, r3, #4
 80043aa:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00c      	beq.n	80043e6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043f4:	f043 0204 	orr.w	r2, r3, #4
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	2b00      	cmp	r3, #0
 8004410:	d010      	beq.n	8004434 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004416:	4619      	mov	r1, r3
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f000 f8a7 	bl	800456c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b28      	cmp	r3, #40	; 0x28
 8004428:	d141      	bne.n	80044ae <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800442a:	6979      	ldr	r1, [r7, #20]
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 f847 	bl	80044c0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004432:	e03c      	b.n	80044ae <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800443c:	d014      	beq.n	8004468 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7ff fe0c 	bl	800405c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a1d      	ldr	r2, [pc, #116]	; (80044bc <I2C_ITSlaveCplt+0x210>)
 8004448:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2220      	movs	r2, #32
 800444e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff f90a 	bl	800367a <HAL_I2C_ListenCpltCallback>
}
 8004466:	e022      	b.n	80044ae <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b22      	cmp	r3, #34	; 0x22
 8004472:	d10e      	bne.n	8004492 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2220      	movs	r2, #32
 8004478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7ff f8dd 	bl	800364a <HAL_I2C_SlaveRxCpltCallback>
}
 8004490:	e00d      	b.n	80044ae <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff f8c4 	bl	8003636 <HAL_I2C_SlaveTxCpltCallback>
}
 80044ae:	bf00      	nop
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	fe00e800 	.word	0xfe00e800
 80044bc:	ffff0000 	.word	0xffff0000

080044c0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a26      	ldr	r2, [pc, #152]	; (8004568 <I2C_ITListenCplt+0xa8>)
 80044ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	089b      	lsrs	r3, r3, #2
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d022      	beq.n	800453e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004514:	2b00      	cmp	r3, #0
 8004516:	d012      	beq.n	800453e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800451c:	3b01      	subs	r3, #1
 800451e:	b29a      	uxth	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004528:	b29b      	uxth	r3, r3
 800452a:	3b01      	subs	r3, #1
 800452c:	b29a      	uxth	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004536:	f043 0204 	orr.w	r2, r3, #4
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800453e:	f248 0103 	movw	r1, #32771	; 0x8003
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 fa66 	bl	8004a14 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2210      	movs	r2, #16
 800454e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff f88e 	bl	800367a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	ffff0000 	.word	0xffff0000

0800456c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800457c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a5d      	ldr	r2, [pc, #372]	; (8004700 <I2C_ITError+0x194>)
 800458a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	2b28      	cmp	r3, #40	; 0x28
 80045a2:	d005      	beq.n	80045b0 <I2C_ITError+0x44>
 80045a4:	7bfb      	ldrb	r3, [r7, #15]
 80045a6:	2b29      	cmp	r3, #41	; 0x29
 80045a8:	d002      	beq.n	80045b0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	2b2a      	cmp	r3, #42	; 0x2a
 80045ae:	d10b      	bne.n	80045c8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045b0:	2103      	movs	r1, #3
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fa2e 	bl	8004a14 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2228      	movs	r2, #40	; 0x28
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a50      	ldr	r2, [pc, #320]	; (8004704 <I2C_ITError+0x198>)
 80045c4:	635a      	str	r2, [r3, #52]	; 0x34
 80045c6:	e011      	b.n	80045ec <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045c8:	f248 0103 	movw	r1, #32771	; 0x8003
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fa21 	bl	8004a14 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b60      	cmp	r3, #96	; 0x60
 80045dc:	d003      	beq.n	80045e6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2220      	movs	r2, #32
 80045e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d039      	beq.n	800466e <I2C_ITError+0x102>
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b11      	cmp	r3, #17
 80045fe:	d002      	beq.n	8004606 <I2C_ITError+0x9a>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b21      	cmp	r3, #33	; 0x21
 8004604:	d133      	bne.n	800466e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004614:	d107      	bne.n	8004626 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681a      	ldr	r2, [r3, #0]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004624:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462a:	4618      	mov	r0, r3
 800462c:	f7fe fb24 	bl	8002c78 <HAL_DMA_GetState>
 8004630:	4603      	mov	r3, r0
 8004632:	2b01      	cmp	r3, #1
 8004634:	d017      	beq.n	8004666 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463a:	4a33      	ldr	r2, [pc, #204]	; (8004708 <I2C_ITError+0x19c>)
 800463c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	4618      	mov	r0, r3
 800464c:	f7fe f968 	bl	8002920 <HAL_DMA_Abort_IT>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d04d      	beq.n	80046f2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004660:	4610      	mov	r0, r2
 8004662:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004664:	e045      	b.n	80046f2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f850 	bl	800470c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800466c:	e041      	b.n	80046f2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d039      	beq.n	80046ea <I2C_ITError+0x17e>
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b12      	cmp	r3, #18
 800467a:	d002      	beq.n	8004682 <I2C_ITError+0x116>
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b22      	cmp	r3, #34	; 0x22
 8004680:	d133      	bne.n	80046ea <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800468c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004690:	d107      	bne.n	80046a2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046a0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fe fae6 	bl	8002c78 <HAL_DMA_GetState>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d017      	beq.n	80046e2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b6:	4a14      	ldr	r2, [pc, #80]	; (8004708 <I2C_ITError+0x19c>)
 80046b8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fe f92a 	bl	8002920 <HAL_DMA_Abort_IT>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d011      	beq.n	80046f6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046dc:	4610      	mov	r0, r2
 80046de:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046e0:	e009      	b.n	80046f6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f812 	bl	800470c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046e8:	e005      	b.n	80046f6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f000 f80e 	bl	800470c <I2C_TreatErrorCallback>
  }
}
 80046f0:	e002      	b.n	80046f8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046f2:	bf00      	nop
 80046f4:	e000      	b.n	80046f8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80046f6:	bf00      	nop
}
 80046f8:	bf00      	nop
 80046fa:	3710      	adds	r7, #16
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	ffff0000 	.word	0xffff0000
 8004704:	0800392f 	.word	0x0800392f
 8004708:	080048ad 	.word	0x080048ad

0800470c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b60      	cmp	r3, #96	; 0x60
 800471e:	d10e      	bne.n	800473e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7fe ffc7 	bl	80036ca <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800473c:	e009      	b.n	8004752 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7fe ffb2 	bl	80036b6 <HAL_I2C_ErrorCallback>
}
 8004752:	bf00      	nop
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}

0800475a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b02      	cmp	r3, #2
 800476e:	d103      	bne.n	8004778 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2200      	movs	r2, #0
 8004776:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	699b      	ldr	r3, [r3, #24]
 800477e:	f003 0301 	and.w	r3, r3, #1
 8004782:	2b01      	cmp	r3, #1
 8004784:	d007      	beq.n	8004796 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	699a      	ldr	r2, [r3, #24]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0201 	orr.w	r2, r2, #1
 8004794:	619a      	str	r2, [r3, #24]
  }
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a0:	4770      	bx	lr

080047a2 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80047a2:	b580      	push	{r7, lr}
 80047a4:	b084      	sub	sp, #16
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ae:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80047be:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d104      	bne.n	80047d4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80047ca:	2120      	movs	r1, #32
 80047cc:	68f8      	ldr	r0, [r7, #12]
 80047ce:	f000 f8bd 	bl	800494c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80047d2:	e02d      	b.n	8004830 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80047dc:	441a      	add	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	2bff      	cmp	r3, #255	; 0xff
 80047ea:	d903      	bls.n	80047f4 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	22ff      	movs	r2, #255	; 0xff
 80047f0:	851a      	strh	r2, [r3, #40]	; 0x28
 80047f2:	e004      	b.n	80047fe <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f8:	b29a      	uxth	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	4619      	mov	r1, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3328      	adds	r3, #40	; 0x28
 800480e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004814:	f7fe f824 	bl	8002860 <HAL_DMA_Start_IT>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d004      	beq.n	8004828 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800481e:	2110      	movs	r1, #16
 8004820:	68f8      	ldr	r0, [r7, #12]
 8004822:	f7ff fea3 	bl	800456c <I2C_ITError>
}
 8004826:	e003      	b.n	8004830 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004828:	2140      	movs	r1, #64	; 0x40
 800482a:	68f8      	ldr	r0, [r7, #12]
 800482c:	f000 f88e 	bl	800494c <I2C_Enable_IRQ>
}
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484e:	2b00      	cmp	r3, #0
 8004850:	d007      	beq.n	8004862 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 800485e:	2301      	movs	r3, #1
 8004860:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d007      	beq.n	800487a <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d101      	bne.n	800487a <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8004876:	2301      	movs	r3, #1
 8004878:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7fe fa0a 	bl	8002c94 <HAL_DMA_GetError>
 8004880:	4603      	mov	r3, r0
 8004882:	2b02      	cmp	r3, #2
 8004884:	d00e      	beq.n	80048a4 <I2C_DMAError+0x6c>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00b      	beq.n	80048a4 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	685a      	ldr	r2, [r3, #4]
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800489a:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800489c:	2110      	movs	r1, #16
 800489e:	68b8      	ldr	r0, [r7, #8]
 80048a0:	f7ff fe64 	bl	800456c <I2C_ITError>
  }
}
 80048a4:	bf00      	nop
 80048a6:	3710      	adds	r7, #16
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d003      	beq.n	80048ca <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c6:	2200      	movs	r2, #0
 80048c8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d6:	2200      	movs	r2, #0
 80048d8:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80048da:	68f8      	ldr	r0, [r7, #12]
 80048dc:	f7ff ff16 	bl	800470c <I2C_TreatErrorCallback>
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	607b      	str	r3, [r7, #4]
 80048f2:	460b      	mov	r3, r1
 80048f4:	817b      	strh	r3, [r7, #10]
 80048f6:	4613      	mov	r3, r2
 80048f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80048fa:	897b      	ldrh	r3, [r7, #10]
 80048fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004900:	7a7b      	ldrb	r3, [r7, #9]
 8004902:	041b      	lsls	r3, r3, #16
 8004904:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004908:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800490e:	6a3b      	ldr	r3, [r7, #32]
 8004910:	4313      	orrs	r3, r2
 8004912:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004916:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	0d5b      	lsrs	r3, r3, #21
 8004922:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004926:	4b08      	ldr	r3, [pc, #32]	; (8004948 <I2C_TransferConfig+0x60>)
 8004928:	430b      	orrs	r3, r1
 800492a:	43db      	mvns	r3, r3
 800492c:	ea02 0103 	and.w	r1, r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	430a      	orrs	r2, r1
 8004938:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800493a:	bf00      	nop
 800493c:	371c      	adds	r7, #28
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	03ff63ff 	.word	0x03ff63ff

0800494c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004960:	4a2a      	ldr	r2, [pc, #168]	; (8004a0c <I2C_Enable_IRQ+0xc0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d004      	beq.n	8004970 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800496a:	4a29      	ldr	r2, [pc, #164]	; (8004a10 <I2C_Enable_IRQ+0xc4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d11d      	bne.n	80049ac <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004970:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004974:	2b00      	cmp	r3, #0
 8004976:	da03      	bge.n	8004980 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800497e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004980:	887b      	ldrh	r3, [r7, #2]
 8004982:	2b10      	cmp	r3, #16
 8004984:	d103      	bne.n	800498e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800498c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800498e:	887b      	ldrh	r3, [r7, #2]
 8004990:	2b20      	cmp	r3, #32
 8004992:	d103      	bne.n	800499c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800499a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800499c:	887b      	ldrh	r3, [r7, #2]
 800499e:	2b40      	cmp	r3, #64	; 0x40
 80049a0:	d125      	bne.n	80049ee <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049a8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80049aa:	e020      	b.n	80049ee <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80049ac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	da03      	bge.n	80049bc <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80049ba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80049bc:	887b      	ldrh	r3, [r7, #2]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d003      	beq.n	80049ce <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80049cc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80049ce:	887b      	ldrh	r3, [r7, #2]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80049de:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80049e0:	887b      	ldrh	r3, [r7, #2]
 80049e2:	2b20      	cmp	r3, #32
 80049e4:	d103      	bne.n	80049ee <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f043 0320 	orr.w	r3, r3, #32
 80049ec:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	6819      	ldr	r1, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68fa      	ldr	r2, [r7, #12]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	601a      	str	r2, [r3, #0]
}
 80049fe:	bf00      	nop
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	08003b35 	.word	0x08003b35
 8004a10:	08003d1b 	.word	0x08003d1b

08004a14 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004a24:	887b      	ldrh	r3, [r7, #2]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00f      	beq.n	8004a4e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004a34:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a42:	2b28      	cmp	r3, #40	; 0x28
 8004a44:	d003      	beq.n	8004a4e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004a4c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004a4e:	887b      	ldrh	r3, [r7, #2]
 8004a50:	f003 0302 	and.w	r3, r3, #2
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d00f      	beq.n	8004a78 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004a5e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a6c:	2b28      	cmp	r3, #40	; 0x28
 8004a6e:	d003      	beq.n	8004a78 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004a76:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004a78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	da03      	bge.n	8004a88 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004a86:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004a88:	887b      	ldrh	r3, [r7, #2]
 8004a8a:	2b10      	cmp	r3, #16
 8004a8c:	d103      	bne.n	8004a96 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004a94:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004a96:	887b      	ldrh	r3, [r7, #2]
 8004a98:	2b20      	cmp	r3, #32
 8004a9a:	d103      	bne.n	8004aa4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f043 0320 	orr.w	r3, r3, #32
 8004aa2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004aa4:	887b      	ldrh	r3, [r7, #2]
 8004aa6:	2b40      	cmp	r3, #64	; 0x40
 8004aa8:	d103      	bne.n	8004ab2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ab0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6819      	ldr	r1, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	43da      	mvns	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	400a      	ands	r2, r1
 8004ac2:	601a      	str	r2, [r3, #0]
}
 8004ac4:	bf00      	nop
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d138      	bne.n	8004b58 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d101      	bne.n	8004af4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004af0:	2302      	movs	r3, #2
 8004af2:	e032      	b.n	8004b5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2224      	movs	r2, #36	; 0x24
 8004b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0201 	bic.w	r2, r2, #1
 8004b12:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b22:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6819      	ldr	r1, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f042 0201 	orr.w	r2, r2, #1
 8004b42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b54:	2300      	movs	r3, #0
 8004b56:	e000      	b.n	8004b5a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b58:	2302      	movs	r3, #2
  }
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b085      	sub	sp, #20
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d139      	bne.n	8004bf0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d101      	bne.n	8004b8a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b86:	2302      	movs	r3, #2
 8004b88:	e033      	b.n	8004bf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2224      	movs	r2, #36	; 0x24
 8004b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f022 0201 	bic.w	r2, r2, #1
 8004ba8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004bb8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	021b      	lsls	r3, r3, #8
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f042 0201 	orr.w	r2, r2, #1
 8004bda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2220      	movs	r2, #32
 8004be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	e000      	b.n	8004bf2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004bf0:	2302      	movs	r3, #2
  }
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
	...

08004c00 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c08:	4b0b      	ldr	r3, [pc, #44]	; (8004c38 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c0c:	4a0a      	ldr	r2, [pc, #40]	; (8004c38 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004c0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c12:	6453      	str	r3, [r2, #68]	; 0x44
 8004c14:	4b08      	ldr	r3, [pc, #32]	; (8004c38 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8004c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c1c:	60fb      	str	r3, [r7, #12]
 8004c1e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMC, (uint32_t)ConfigFastModePlus);
 8004c20:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004c22:	685a      	ldr	r2, [r3, #4]
 8004c24:	4905      	ldr	r1, [pc, #20]	; (8004c3c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	604b      	str	r3, [r1, #4]
}
 8004c2c:	bf00      	nop
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	40023800 	.word	0x40023800
 8004c3c:	40013800 	.word	0x40013800

08004c40 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c44:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a04      	ldr	r2, [pc, #16]	; (8004c5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4e:	6013      	str	r3, [r2, #0]
}
 8004c50:	bf00      	nop
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40007000 	.word	0x40007000

08004c60 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e29b      	b.n	80051ae <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	f000 8087 	beq.w	8004d92 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c84:	4b96      	ldr	r3, [pc, #600]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 030c 	and.w	r3, r3, #12
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d00c      	beq.n	8004caa <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c90:	4b93      	ldr	r3, [pc, #588]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 030c 	and.w	r3, r3, #12
 8004c98:	2b08      	cmp	r3, #8
 8004c9a:	d112      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x62>
 8004c9c:	4b90      	ldr	r3, [pc, #576]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ca8:	d10b      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004caa:	4b8d      	ldr	r3, [pc, #564]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d06c      	beq.n	8004d90 <HAL_RCC_OscConfig+0x130>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d168      	bne.n	8004d90 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e275      	b.n	80051ae <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cca:	d106      	bne.n	8004cda <HAL_RCC_OscConfig+0x7a>
 8004ccc:	4b84      	ldr	r3, [pc, #528]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a83      	ldr	r2, [pc, #524]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004cd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd6:	6013      	str	r3, [r2, #0]
 8004cd8:	e02e      	b.n	8004d38 <HAL_RCC_OscConfig+0xd8>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10c      	bne.n	8004cfc <HAL_RCC_OscConfig+0x9c>
 8004ce2:	4b7f      	ldr	r3, [pc, #508]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a7e      	ldr	r2, [pc, #504]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cec:	6013      	str	r3, [r2, #0]
 8004cee:	4b7c      	ldr	r3, [pc, #496]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a7b      	ldr	r2, [pc, #492]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004cf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cf8:	6013      	str	r3, [r2, #0]
 8004cfa:	e01d      	b.n	8004d38 <HAL_RCC_OscConfig+0xd8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0xc0>
 8004d06:	4b76      	ldr	r3, [pc, #472]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a75      	ldr	r2, [pc, #468]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	4b73      	ldr	r3, [pc, #460]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a72      	ldr	r2, [pc, #456]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCC_OscConfig+0xd8>
 8004d20:	4b6f      	ldr	r3, [pc, #444]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a6e      	ldr	r2, [pc, #440]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	4b6c      	ldr	r3, [pc, #432]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a6b      	ldr	r2, [pc, #428]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d013      	beq.n	8004d68 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fd fb9e 	bl	8002480 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d48:	f7fd fb9a 	bl	8002480 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b64      	cmp	r3, #100	; 0x64
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e229      	b.n	80051ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d5a:	4b61      	ldr	r3, [pc, #388]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d0f0      	beq.n	8004d48 <HAL_RCC_OscConfig+0xe8>
 8004d66:	e014      	b.n	8004d92 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d68:	f7fd fb8a 	bl	8002480 <HAL_GetTick>
 8004d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d6e:	e008      	b.n	8004d82 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d70:	f7fd fb86 	bl	8002480 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b64      	cmp	r3, #100	; 0x64
 8004d7c:	d901      	bls.n	8004d82 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	e215      	b.n	80051ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d82:	4b57      	ldr	r3, [pc, #348]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f0      	bne.n	8004d70 <HAL_RCC_OscConfig+0x110>
 8004d8e:	e000      	b.n	8004d92 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d069      	beq.n	8004e72 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d9e:	4b50      	ldr	r3, [pc, #320]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	f003 030c 	and.w	r3, r3, #12
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004daa:	4b4d      	ldr	r3, [pc, #308]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	f003 030c 	and.w	r3, r3, #12
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d11c      	bne.n	8004df0 <HAL_RCC_OscConfig+0x190>
 8004db6:	4b4a      	ldr	r3, [pc, #296]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d116      	bne.n	8004df0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dc2:	4b47      	ldr	r3, [pc, #284]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d005      	beq.n	8004dda <HAL_RCC_OscConfig+0x17a>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d001      	beq.n	8004dda <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e1e9      	b.n	80051ae <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dda:	4b41      	ldr	r3, [pc, #260]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	00db      	lsls	r3, r3, #3
 8004de8:	493d      	ldr	r1, [pc, #244]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004dee:	e040      	b.n	8004e72 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d023      	beq.n	8004e40 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004df8:	4b39      	ldr	r3, [pc, #228]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a38      	ldr	r2, [pc, #224]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004dfe:	f043 0301 	orr.w	r3, r3, #1
 8004e02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e04:	f7fd fb3c 	bl	8002480 <HAL_GetTick>
 8004e08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e0a:	e008      	b.n	8004e1e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e0c:	f7fd fb38 	bl	8002480 <HAL_GetTick>
 8004e10:	4602      	mov	r2, r0
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d901      	bls.n	8004e1e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004e1a:	2303      	movs	r3, #3
 8004e1c:	e1c7      	b.n	80051ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1e:	4b30      	ldr	r3, [pc, #192]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d0f0      	beq.n	8004e0c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e2a:	4b2d      	ldr	r3, [pc, #180]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	00db      	lsls	r3, r3, #3
 8004e38:	4929      	ldr	r1, [pc, #164]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	600b      	str	r3, [r1, #0]
 8004e3e:	e018      	b.n	8004e72 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e40:	4b27      	ldr	r3, [pc, #156]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a26      	ldr	r2, [pc, #152]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e46:	f023 0301 	bic.w	r3, r3, #1
 8004e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e4c:	f7fd fb18 	bl	8002480 <HAL_GetTick>
 8004e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e52:	e008      	b.n	8004e66 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e54:	f7fd fb14 	bl	8002480 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d901      	bls.n	8004e66 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	e1a3      	b.n	80051ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e66:	4b1e      	ldr	r3, [pc, #120]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1f0      	bne.n	8004e54 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d038      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d019      	beq.n	8004eba <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e86:	4b16      	ldr	r3, [pc, #88]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e8a:	4a15      	ldr	r2, [pc, #84]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e92:	f7fd faf5 	bl	8002480 <HAL_GetTick>
 8004e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e98:	e008      	b.n	8004eac <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e9a:	f7fd faf1 	bl	8002480 <HAL_GetTick>
 8004e9e:	4602      	mov	r2, r0
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	1ad3      	subs	r3, r2, r3
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e180      	b.n	80051ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004eac:	4b0c      	ldr	r3, [pc, #48]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0f0      	beq.n	8004e9a <HAL_RCC_OscConfig+0x23a>
 8004eb8:	e01a      	b.n	8004ef0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004eba:	4b09      	ldr	r3, [pc, #36]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ebe:	4a08      	ldr	r2, [pc, #32]	; (8004ee0 <HAL_RCC_OscConfig+0x280>)
 8004ec0:	f023 0301 	bic.w	r3, r3, #1
 8004ec4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec6:	f7fd fadb 	bl	8002480 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ecc:	e00a      	b.n	8004ee4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ece:	f7fd fad7 	bl	8002480 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d903      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e166      	b.n	80051ae <HAL_RCC_OscConfig+0x54e>
 8004ee0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ee4:	4b92      	ldr	r3, [pc, #584]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1ee      	bne.n	8004ece <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0304 	and.w	r3, r3, #4
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 80a4 	beq.w	8005046 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004efe:	4b8c      	ldr	r3, [pc, #560]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10d      	bne.n	8004f26 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f0a:	4b89      	ldr	r3, [pc, #548]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	4a88      	ldr	r2, [pc, #544]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f14:	6413      	str	r3, [r2, #64]	; 0x40
 8004f16:	4b86      	ldr	r3, [pc, #536]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f1e:	60bb      	str	r3, [r7, #8]
 8004f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f22:	2301      	movs	r3, #1
 8004f24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f26:	4b83      	ldr	r3, [pc, #524]	; (8005134 <HAL_RCC_OscConfig+0x4d4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d118      	bne.n	8004f64 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004f32:	4b80      	ldr	r3, [pc, #512]	; (8005134 <HAL_RCC_OscConfig+0x4d4>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a7f      	ldr	r2, [pc, #508]	; (8005134 <HAL_RCC_OscConfig+0x4d4>)
 8004f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f3e:	f7fd fa9f 	bl	8002480 <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f46:	f7fd fa9b 	bl	8002480 <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b64      	cmp	r3, #100	; 0x64
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e12a      	b.n	80051ae <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f58:	4b76      	ldr	r3, [pc, #472]	; (8005134 <HAL_RCC_OscConfig+0x4d4>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0f0      	beq.n	8004f46 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d106      	bne.n	8004f7a <HAL_RCC_OscConfig+0x31a>
 8004f6c:	4b70      	ldr	r3, [pc, #448]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f70:	4a6f      	ldr	r2, [pc, #444]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004f72:	f043 0301 	orr.w	r3, r3, #1
 8004f76:	6713      	str	r3, [r2, #112]	; 0x70
 8004f78:	e02d      	b.n	8004fd6 <HAL_RCC_OscConfig+0x376>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d10c      	bne.n	8004f9c <HAL_RCC_OscConfig+0x33c>
 8004f82:	4b6b      	ldr	r3, [pc, #428]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f86:	4a6a      	ldr	r2, [pc, #424]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004f88:	f023 0301 	bic.w	r3, r3, #1
 8004f8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f8e:	4b68      	ldr	r3, [pc, #416]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f92:	4a67      	ldr	r2, [pc, #412]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004f94:	f023 0304 	bic.w	r3, r3, #4
 8004f98:	6713      	str	r3, [r2, #112]	; 0x70
 8004f9a:	e01c      	b.n	8004fd6 <HAL_RCC_OscConfig+0x376>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	2b05      	cmp	r3, #5
 8004fa2:	d10c      	bne.n	8004fbe <HAL_RCC_OscConfig+0x35e>
 8004fa4:	4b62      	ldr	r3, [pc, #392]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa8:	4a61      	ldr	r2, [pc, #388]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004faa:	f043 0304 	orr.w	r3, r3, #4
 8004fae:	6713      	str	r3, [r2, #112]	; 0x70
 8004fb0:	4b5f      	ldr	r3, [pc, #380]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb4:	4a5e      	ldr	r2, [pc, #376]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004fb6:	f043 0301 	orr.w	r3, r3, #1
 8004fba:	6713      	str	r3, [r2, #112]	; 0x70
 8004fbc:	e00b      	b.n	8004fd6 <HAL_RCC_OscConfig+0x376>
 8004fbe:	4b5c      	ldr	r3, [pc, #368]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc2:	4a5b      	ldr	r2, [pc, #364]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004fc4:	f023 0301 	bic.w	r3, r3, #1
 8004fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004fca:	4b59      	ldr	r3, [pc, #356]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fce:	4a58      	ldr	r2, [pc, #352]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004fd0:	f023 0304 	bic.w	r3, r3, #4
 8004fd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d015      	beq.n	800500a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fde:	f7fd fa4f 	bl	8002480 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe4:	e00a      	b.n	8004ffc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fe6:	f7fd fa4b 	bl	8002480 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e0d8      	b.n	80051ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ffc:	4b4c      	ldr	r3, [pc, #304]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8004ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005000:	f003 0302 	and.w	r3, r3, #2
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0ee      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x386>
 8005008:	e014      	b.n	8005034 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500a:	f7fd fa39 	bl	8002480 <HAL_GetTick>
 800500e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005010:	e00a      	b.n	8005028 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005012:	f7fd fa35 	bl	8002480 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005020:	4293      	cmp	r3, r2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e0c2      	b.n	80051ae <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005028:	4b41      	ldr	r3, [pc, #260]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d1ee      	bne.n	8005012 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005034:	7dfb      	ldrb	r3, [r7, #23]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d105      	bne.n	8005046 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800503a:	4b3d      	ldr	r3, [pc, #244]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	4a3c      	ldr	r2, [pc, #240]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8005040:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005044:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 80ae 	beq.w	80051ac <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005050:	4b37      	ldr	r3, [pc, #220]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 030c 	and.w	r3, r3, #12
 8005058:	2b08      	cmp	r3, #8
 800505a:	d06d      	beq.n	8005138 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	2b02      	cmp	r3, #2
 8005062:	d14b      	bne.n	80050fc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005064:	4b32      	ldr	r3, [pc, #200]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a31      	ldr	r2, [pc, #196]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 800506a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800506e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7fd fa06 	bl	8002480 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005078:	f7fd fa02 	bl	8002480 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e091      	b.n	80051ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800508a:	4b29      	ldr	r3, [pc, #164]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f0      	bne.n	8005078 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69da      	ldr	r2, [r3, #28]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	019b      	lsls	r3, r3, #6
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ac:	085b      	lsrs	r3, r3, #1
 80050ae:	3b01      	subs	r3, #1
 80050b0:	041b      	lsls	r3, r3, #16
 80050b2:	431a      	orrs	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	061b      	lsls	r3, r3, #24
 80050ba:	431a      	orrs	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c0:	071b      	lsls	r3, r3, #28
 80050c2:	491b      	ldr	r1, [pc, #108]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050c8:	4b19      	ldr	r3, [pc, #100]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a18      	ldr	r2, [pc, #96]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 80050ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d4:	f7fd f9d4 	bl	8002480 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050dc:	f7fd f9d0 	bl	8002480 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e05f      	b.n	80051ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050ee:	4b10      	ldr	r3, [pc, #64]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0f0      	beq.n	80050dc <HAL_RCC_OscConfig+0x47c>
 80050fa:	e057      	b.n	80051ac <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050fc:	4b0c      	ldr	r3, [pc, #48]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a0b      	ldr	r2, [pc, #44]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8005102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005108:	f7fd f9ba 	bl	8002480 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005110:	f7fd f9b6 	bl	8002480 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b02      	cmp	r3, #2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e045      	b.n	80051ae <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005122:	4b03      	ldr	r3, [pc, #12]	; (8005130 <HAL_RCC_OscConfig+0x4d0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1f0      	bne.n	8005110 <HAL_RCC_OscConfig+0x4b0>
 800512e:	e03d      	b.n	80051ac <HAL_RCC_OscConfig+0x54c>
 8005130:	40023800 	.word	0x40023800
 8005134:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005138:	4b1f      	ldr	r3, [pc, #124]	; (80051b8 <HAL_RCC_OscConfig+0x558>)
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d030      	beq.n	80051a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005150:	429a      	cmp	r2, r3
 8005152:	d129      	bne.n	80051a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800515e:	429a      	cmp	r2, r3
 8005160:	d122      	bne.n	80051a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005168:	4013      	ands	r3, r2
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800516e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005170:	4293      	cmp	r3, r2
 8005172:	d119      	bne.n	80051a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517e:	085b      	lsrs	r3, r3, #1
 8005180:	3b01      	subs	r3, #1
 8005182:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005184:	429a      	cmp	r2, r3
 8005186:	d10f      	bne.n	80051a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005192:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005194:	429a      	cmp	r2, r3
 8005196:	d107      	bne.n	80051a8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d001      	beq.n	80051ac <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e000      	b.n	80051ae <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3718      	adds	r7, #24
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}
 80051b6:	bf00      	nop
 80051b8:	40023800 	.word	0x40023800

080051bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
 80051c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d101      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e0d0      	b.n	8005376 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051d4:	4b6a      	ldr	r3, [pc, #424]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 030f 	and.w	r3, r3, #15
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d910      	bls.n	8005204 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e2:	4b67      	ldr	r3, [pc, #412]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f023 020f 	bic.w	r2, r3, #15
 80051ea:	4965      	ldr	r1, [pc, #404]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f2:	4b63      	ldr	r3, [pc, #396]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 030f 	and.w	r3, r3, #15
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d001      	beq.n	8005204 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e0b8      	b.n	8005376 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d020      	beq.n	8005252 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d005      	beq.n	8005228 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800521c:	4b59      	ldr	r3, [pc, #356]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	4a58      	ldr	r2, [pc, #352]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 8005222:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005226:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005234:	4b53      	ldr	r3, [pc, #332]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	4a52      	ldr	r2, [pc, #328]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 800523a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800523e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005240:	4b50      	ldr	r3, [pc, #320]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	494d      	ldr	r1, [pc, #308]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 800524e:	4313      	orrs	r3, r2
 8005250:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d040      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d107      	bne.n	8005276 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005266:	4b47      	ldr	r3, [pc, #284]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d115      	bne.n	800529e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e07f      	b.n	8005376 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b02      	cmp	r3, #2
 800527c:	d107      	bne.n	800528e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800527e:	4b41      	ldr	r3, [pc, #260]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d109      	bne.n	800529e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e073      	b.n	8005376 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800528e:	4b3d      	ldr	r3, [pc, #244]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d101      	bne.n	800529e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e06b      	b.n	8005376 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800529e:	4b39      	ldr	r3, [pc, #228]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f023 0203 	bic.w	r2, r3, #3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	4936      	ldr	r1, [pc, #216]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b0:	f7fd f8e6 	bl	8002480 <HAL_GetTick>
 80052b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b6:	e00a      	b.n	80052ce <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052b8:	f7fd f8e2 	bl	8002480 <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e053      	b.n	8005376 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052ce:	4b2d      	ldr	r3, [pc, #180]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f003 020c 	and.w	r2, r3, #12
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	429a      	cmp	r2, r3
 80052de:	d1eb      	bne.n	80052b8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052e0:	4b27      	ldr	r3, [pc, #156]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d210      	bcs.n	8005310 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ee:	4b24      	ldr	r3, [pc, #144]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f023 020f 	bic.w	r2, r3, #15
 80052f6:	4922      	ldr	r1, [pc, #136]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052fe:	4b20      	ldr	r3, [pc, #128]	; (8005380 <HAL_RCC_ClockConfig+0x1c4>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	683a      	ldr	r2, [r7, #0]
 8005308:	429a      	cmp	r2, r3
 800530a:	d001      	beq.n	8005310 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e032      	b.n	8005376 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0304 	and.w	r3, r3, #4
 8005318:	2b00      	cmp	r3, #0
 800531a:	d008      	beq.n	800532e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800531c:	4b19      	ldr	r3, [pc, #100]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	4916      	ldr	r1, [pc, #88]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 800532a:	4313      	orrs	r3, r2
 800532c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0308 	and.w	r3, r3, #8
 8005336:	2b00      	cmp	r3, #0
 8005338:	d009      	beq.n	800534e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800533a:	4b12      	ldr	r3, [pc, #72]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	00db      	lsls	r3, r3, #3
 8005348:	490e      	ldr	r1, [pc, #56]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 800534a:	4313      	orrs	r3, r2
 800534c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800534e:	f000 f821 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8005352:	4602      	mov	r2, r0
 8005354:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <HAL_RCC_ClockConfig+0x1c8>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	490a      	ldr	r1, [pc, #40]	; (8005388 <HAL_RCC_ClockConfig+0x1cc>)
 8005360:	5ccb      	ldrb	r3, [r1, r3]
 8005362:	fa22 f303 	lsr.w	r3, r2, r3
 8005366:	4a09      	ldr	r2, [pc, #36]	; (800538c <HAL_RCC_ClockConfig+0x1d0>)
 8005368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800536a:	4b09      	ldr	r3, [pc, #36]	; (8005390 <HAL_RCC_ClockConfig+0x1d4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4618      	mov	r0, r3
 8005370:	f7fd f842 	bl	80023f8 <HAL_InitTick>

  return HAL_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	40023c00 	.word	0x40023c00
 8005384:	40023800 	.word	0x40023800
 8005388:	0800bfb4 	.word	0x0800bfb4
 800538c:	20000004 	.word	0x20000004
 8005390:	20000008 	.word	0x20000008

08005394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005394:	b5b0      	push	{r4, r5, r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800539a:	2100      	movs	r1, #0
 800539c:	6079      	str	r1, [r7, #4]
 800539e:	2100      	movs	r1, #0
 80053a0:	60f9      	str	r1, [r7, #12]
 80053a2:	2100      	movs	r1, #0
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80053a6:	2100      	movs	r1, #0
 80053a8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053aa:	4952      	ldr	r1, [pc, #328]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80053ac:	6889      	ldr	r1, [r1, #8]
 80053ae:	f001 010c 	and.w	r1, r1, #12
 80053b2:	2908      	cmp	r1, #8
 80053b4:	d00d      	beq.n	80053d2 <HAL_RCC_GetSysClockFreq+0x3e>
 80053b6:	2908      	cmp	r1, #8
 80053b8:	f200 8094 	bhi.w	80054e4 <HAL_RCC_GetSysClockFreq+0x150>
 80053bc:	2900      	cmp	r1, #0
 80053be:	d002      	beq.n	80053c6 <HAL_RCC_GetSysClockFreq+0x32>
 80053c0:	2904      	cmp	r1, #4
 80053c2:	d003      	beq.n	80053cc <HAL_RCC_GetSysClockFreq+0x38>
 80053c4:	e08e      	b.n	80054e4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053c6:	4b4c      	ldr	r3, [pc, #304]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80053c8:	60bb      	str	r3, [r7, #8]
      break;
 80053ca:	e08e      	b.n	80054ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053cc:	4b4b      	ldr	r3, [pc, #300]	; (80054fc <HAL_RCC_GetSysClockFreq+0x168>)
 80053ce:	60bb      	str	r3, [r7, #8]
      break;
 80053d0:	e08b      	b.n	80054ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053d2:	4948      	ldr	r1, [pc, #288]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80053d4:	6849      	ldr	r1, [r1, #4]
 80053d6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80053da:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80053dc:	4945      	ldr	r1, [pc, #276]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80053de:	6849      	ldr	r1, [r1, #4]
 80053e0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80053e4:	2900      	cmp	r1, #0
 80053e6:	d024      	beq.n	8005432 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053e8:	4942      	ldr	r1, [pc, #264]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80053ea:	6849      	ldr	r1, [r1, #4]
 80053ec:	0989      	lsrs	r1, r1, #6
 80053ee:	4608      	mov	r0, r1
 80053f0:	f04f 0100 	mov.w	r1, #0
 80053f4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80053f8:	f04f 0500 	mov.w	r5, #0
 80053fc:	ea00 0204 	and.w	r2, r0, r4
 8005400:	ea01 0305 	and.w	r3, r1, r5
 8005404:	493d      	ldr	r1, [pc, #244]	; (80054fc <HAL_RCC_GetSysClockFreq+0x168>)
 8005406:	fb01 f003 	mul.w	r0, r1, r3
 800540a:	2100      	movs	r1, #0
 800540c:	fb01 f102 	mul.w	r1, r1, r2
 8005410:	1844      	adds	r4, r0, r1
 8005412:	493a      	ldr	r1, [pc, #232]	; (80054fc <HAL_RCC_GetSysClockFreq+0x168>)
 8005414:	fba2 0101 	umull	r0, r1, r2, r1
 8005418:	1863      	adds	r3, r4, r1
 800541a:	4619      	mov	r1, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	461a      	mov	r2, r3
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	f7fb f920 	bl	8000668 <__aeabi_uldivmod>
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	4613      	mov	r3, r2
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	e04a      	b.n	80054c8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005432:	4b30      	ldr	r3, [pc, #192]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	099b      	lsrs	r3, r3, #6
 8005438:	461a      	mov	r2, r3
 800543a:	f04f 0300 	mov.w	r3, #0
 800543e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005442:	f04f 0100 	mov.w	r1, #0
 8005446:	ea02 0400 	and.w	r4, r2, r0
 800544a:	ea03 0501 	and.w	r5, r3, r1
 800544e:	4620      	mov	r0, r4
 8005450:	4629      	mov	r1, r5
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	014b      	lsls	r3, r1, #5
 800545c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005460:	0142      	lsls	r2, r0, #5
 8005462:	4610      	mov	r0, r2
 8005464:	4619      	mov	r1, r3
 8005466:	1b00      	subs	r0, r0, r4
 8005468:	eb61 0105 	sbc.w	r1, r1, r5
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	018b      	lsls	r3, r1, #6
 8005476:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800547a:	0182      	lsls	r2, r0, #6
 800547c:	1a12      	subs	r2, r2, r0
 800547e:	eb63 0301 	sbc.w	r3, r3, r1
 8005482:	f04f 0000 	mov.w	r0, #0
 8005486:	f04f 0100 	mov.w	r1, #0
 800548a:	00d9      	lsls	r1, r3, #3
 800548c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005490:	00d0      	lsls	r0, r2, #3
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	1912      	adds	r2, r2, r4
 8005498:	eb45 0303 	adc.w	r3, r5, r3
 800549c:	f04f 0000 	mov.w	r0, #0
 80054a0:	f04f 0100 	mov.w	r1, #0
 80054a4:	0299      	lsls	r1, r3, #10
 80054a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80054aa:	0290      	lsls	r0, r2, #10
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4610      	mov	r0, r2
 80054b2:	4619      	mov	r1, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	461a      	mov	r2, r3
 80054b8:	f04f 0300 	mov.w	r3, #0
 80054bc:	f7fb f8d4 	bl	8000668 <__aeabi_uldivmod>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	4613      	mov	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80054c8:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <HAL_RCC_GetSysClockFreq+0x160>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	0c1b      	lsrs	r3, r3, #16
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	3301      	adds	r3, #1
 80054d4:	005b      	lsls	r3, r3, #1
 80054d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e0:	60bb      	str	r3, [r7, #8]
      break;
 80054e2:	e002      	b.n	80054ea <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80054e4:	4b04      	ldr	r3, [pc, #16]	; (80054f8 <HAL_RCC_GetSysClockFreq+0x164>)
 80054e6:	60bb      	str	r3, [r7, #8]
      break;
 80054e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80054ea:	68bb      	ldr	r3, [r7, #8]
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bdb0      	pop	{r4, r5, r7, pc}
 80054f4:	40023800 	.word	0x40023800
 80054f8:	00f42400 	.word	0x00f42400
 80054fc:	017d7840 	.word	0x017d7840

08005500 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005500:	b480      	push	{r7}
 8005502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005504:	4b03      	ldr	r3, [pc, #12]	; (8005514 <HAL_RCC_GetHCLKFreq+0x14>)
 8005506:	681b      	ldr	r3, [r3, #0]
}
 8005508:	4618      	mov	r0, r3
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	20000004 	.word	0x20000004

08005518 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800551c:	f7ff fff0 	bl	8005500 <HAL_RCC_GetHCLKFreq>
 8005520:	4602      	mov	r2, r0
 8005522:	4b05      	ldr	r3, [pc, #20]	; (8005538 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	0a9b      	lsrs	r3, r3, #10
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	4903      	ldr	r1, [pc, #12]	; (800553c <HAL_RCC_GetPCLK1Freq+0x24>)
 800552e:	5ccb      	ldrb	r3, [r1, r3]
 8005530:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005534:	4618      	mov	r0, r3
 8005536:	bd80      	pop	{r7, pc}
 8005538:	40023800 	.word	0x40023800
 800553c:	0800bfc4 	.word	0x0800bfc4

08005540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005544:	f7ff ffdc 	bl	8005500 <HAL_RCC_GetHCLKFreq>
 8005548:	4602      	mov	r2, r0
 800554a:	4b05      	ldr	r3, [pc, #20]	; (8005560 <HAL_RCC_GetPCLK2Freq+0x20>)
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	0b5b      	lsrs	r3, r3, #13
 8005550:	f003 0307 	and.w	r3, r3, #7
 8005554:	4903      	ldr	r1, [pc, #12]	; (8005564 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005556:	5ccb      	ldrb	r3, [r1, r3]
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800555c:	4618      	mov	r0, r3
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40023800 	.word	0x40023800
 8005564:	0800bfc4 	.word	0x0800bfc4

08005568 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005580:	2300      	movs	r3, #0
 8005582:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	d012      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005590:	4b69      	ldr	r3, [pc, #420]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	4a68      	ldr	r2, [pc, #416]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005596:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800559a:	6093      	str	r3, [r2, #8]
 800559c:	4b66      	ldr	r3, [pc, #408]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055a4:	4964      	ldr	r1, [pc, #400]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d101      	bne.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80055b2:	2301      	movs	r3, #1
 80055b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d017      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80055c2:	4b5d      	ldr	r3, [pc, #372]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d0:	4959      	ldr	r1, [pc, #356]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055e0:	d101      	bne.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80055e2:	2301      	movs	r3, #1
 80055e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80055ee:	2301      	movs	r3, #1
 80055f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d017      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80055fe:	4b4e      	ldr	r3, [pc, #312]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005604:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	494a      	ldr	r1, [pc, #296]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800561c:	d101      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800561e:	2301      	movs	r3, #1
 8005620:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800562a:	2301      	movs	r3, #1
 800562c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800563a:	2301      	movs	r3, #1
 800563c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 808b 	beq.w	8005762 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800564c:	4b3a      	ldr	r3, [pc, #232]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800564e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005650:	4a39      	ldr	r2, [pc, #228]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005652:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005656:	6413      	str	r3, [r2, #64]	; 0x40
 8005658:	4b37      	ldr	r3, [pc, #220]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005660:	60bb      	str	r3, [r7, #8]
 8005662:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005664:	4b35      	ldr	r3, [pc, #212]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a34      	ldr	r2, [pc, #208]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800566a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800566e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005670:	f7fc ff06 	bl	8002480 <HAL_GetTick>
 8005674:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005676:	e008      	b.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005678:	f7fc ff02 	bl	8002480 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b64      	cmp	r3, #100	; 0x64
 8005684:	d901      	bls.n	800568a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e38f      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800568a:	4b2c      	ldr	r3, [pc, #176]	; (800573c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f0      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005696:	4b28      	ldr	r3, [pc, #160]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800569e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d035      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d02e      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056b4:	4b20      	ldr	r3, [pc, #128]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056be:	4b1e      	ldr	r3, [pc, #120]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c2:	4a1d      	ldr	r2, [pc, #116]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056c8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056ca:	4b1b      	ldr	r3, [pc, #108]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ce:	4a1a      	ldr	r2, [pc, #104]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80056d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80056d6:	4a18      	ldr	r2, [pc, #96]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056dc:	4b16      	ldr	r3, [pc, #88]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d114      	bne.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e8:	f7fc feca 	bl	8002480 <HAL_GetTick>
 80056ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ee:	e00a      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056f0:	f7fc fec6 	bl	8002480 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fe:	4293      	cmp	r3, r2
 8005700:	d901      	bls.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e351      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005706:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b00      	cmp	r3, #0
 8005710:	d0ee      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005716:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800571a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800571e:	d111      	bne.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005720:	4b05      	ldr	r3, [pc, #20]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800572c:	4b04      	ldr	r3, [pc, #16]	; (8005740 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800572e:	400b      	ands	r3, r1
 8005730:	4901      	ldr	r1, [pc, #4]	; (8005738 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005732:	4313      	orrs	r3, r2
 8005734:	608b      	str	r3, [r1, #8]
 8005736:	e00b      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005738:	40023800 	.word	0x40023800
 800573c:	40007000 	.word	0x40007000
 8005740:	0ffffcff 	.word	0x0ffffcff
 8005744:	4bb3      	ldr	r3, [pc, #716]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	4ab2      	ldr	r2, [pc, #712]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800574a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800574e:	6093      	str	r3, [r2, #8]
 8005750:	4bb0      	ldr	r3, [pc, #704]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005752:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800575c:	49ad      	ldr	r1, [pc, #692]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800575e:	4313      	orrs	r3, r2
 8005760:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 0310 	and.w	r3, r3, #16
 800576a:	2b00      	cmp	r3, #0
 800576c:	d010      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800576e:	4ba9      	ldr	r3, [pc, #676]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005770:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005774:	4aa7      	ldr	r2, [pc, #668]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800577a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800577e:	4ba5      	ldr	r3, [pc, #660]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005780:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	49a2      	ldr	r1, [pc, #648]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800578a:	4313      	orrs	r3, r2
 800578c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00a      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800579c:	4b9d      	ldr	r3, [pc, #628]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800579e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057aa:	499a      	ldr	r1, [pc, #616]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00a      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057be:	4b95      	ldr	r3, [pc, #596]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057cc:	4991      	ldr	r1, [pc, #580]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057ce:	4313      	orrs	r3, r2
 80057d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00a      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057e0:	4b8c      	ldr	r3, [pc, #560]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057ee:	4989      	ldr	r1, [pc, #548]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d00a      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005802:	4b84      	ldr	r3, [pc, #528]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005808:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005810:	4980      	ldr	r1, [pc, #512]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00a      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005824:	4b7b      	ldr	r3, [pc, #492]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582a:	f023 0203 	bic.w	r2, r3, #3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005832:	4978      	ldr	r1, [pc, #480]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005834:	4313      	orrs	r3, r2
 8005836:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00a      	beq.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005846:	4b73      	ldr	r3, [pc, #460]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005848:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800584c:	f023 020c 	bic.w	r2, r3, #12
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005854:	496f      	ldr	r1, [pc, #444]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005856:	4313      	orrs	r3, r2
 8005858:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00a      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005868:	4b6a      	ldr	r3, [pc, #424]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800586a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005876:	4967      	ldr	r1, [pc, #412]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005878:	4313      	orrs	r3, r2
 800587a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800588a:	4b62      	ldr	r3, [pc, #392]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800588c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005890:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005898:	495e      	ldr	r1, [pc, #376]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800589a:	4313      	orrs	r3, r2
 800589c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00a      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058ac:	4b59      	ldr	r3, [pc, #356]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ba:	4956      	ldr	r1, [pc, #344]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058bc:	4313      	orrs	r3, r2
 80058be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80058ce:	4b51      	ldr	r3, [pc, #324]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058dc:	494d      	ldr	r1, [pc, #308]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00a      	beq.n	8005906 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80058f0:	4b48      	ldr	r3, [pc, #288]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80058f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058fe:	4945      	ldr	r1, [pc, #276]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005900:	4313      	orrs	r3, r2
 8005902:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00a      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005912:	4b40      	ldr	r3, [pc, #256]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005918:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005920:	493c      	ldr	r1, [pc, #240]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005922:	4313      	orrs	r3, r2
 8005924:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00a      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005934:	4b37      	ldr	r3, [pc, #220]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800593a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005942:	4934      	ldr	r1, [pc, #208]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d011      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005956:	4b2f      	ldr	r3, [pc, #188]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005964:	492b      	ldr	r1, [pc, #172]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005966:	4313      	orrs	r3, r2
 8005968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005970:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005974:	d101      	bne.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005976:	2301      	movs	r3, #1
 8005978:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005986:	2301      	movs	r3, #1
 8005988:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005996:	4b1f      	ldr	r3, [pc, #124]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059a4:	491b      	ldr	r1, [pc, #108]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d00b      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80059b8:	4b16      	ldr	r3, [pc, #88]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059c8:	4912      	ldr	r1, [pc, #72]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00b      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80059dc:	4b0d      	ldr	r3, [pc, #52]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059e2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ec:	4909      	ldr	r1, [pc, #36]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00f      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005a00:	4b04      	ldr	r3, [pc, #16]	; (8005a14 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a06:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a10:	e002      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005a12:	bf00      	nop
 8005a14:	40023800 	.word	0x40023800
 8005a18:	4986      	ldr	r1, [pc, #536]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00b      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005a2c:	4b81      	ldr	r3, [pc, #516]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a32:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a3c:	497d      	ldr	r1, [pc, #500]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	d006      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f000 80d6 	beq.w	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005a58:	4b76      	ldr	r3, [pc, #472]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a75      	ldr	r2, [pc, #468]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005a62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a64:	f7fc fd0c 	bl	8002480 <HAL_GetTick>
 8005a68:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a6a:	e008      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a6c:	f7fc fd08 	bl	8002480 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b64      	cmp	r3, #100	; 0x64
 8005a78:	d901      	bls.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e195      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a7e:	4b6d      	ldr	r3, [pc, #436]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1f0      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d021      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d11d      	bne.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005a9e:	4b65      	ldr	r3, [pc, #404]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aa4:	0c1b      	lsrs	r3, r3, #16
 8005aa6:	f003 0303 	and.w	r3, r3, #3
 8005aaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005aac:	4b61      	ldr	r3, [pc, #388]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005aae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ab2:	0e1b      	lsrs	r3, r3, #24
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	019a      	lsls	r2, r3, #6
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	041b      	lsls	r3, r3, #16
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	061b      	lsls	r3, r3, #24
 8005aca:	431a      	orrs	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	071b      	lsls	r3, r3, #28
 8005ad2:	4958      	ldr	r1, [pc, #352]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d004      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aee:	d00a      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d02e      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b04:	d129      	bne.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b06:	4b4b      	ldr	r3, [pc, #300]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b0c:	0c1b      	lsrs	r3, r3, #16
 8005b0e:	f003 0303 	and.w	r3, r3, #3
 8005b12:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b14:	4b47      	ldr	r3, [pc, #284]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b1a:	0f1b      	lsrs	r3, r3, #28
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	019a      	lsls	r2, r3, #6
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	041b      	lsls	r3, r3, #16
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	061b      	lsls	r3, r3, #24
 8005b34:	431a      	orrs	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	071b      	lsls	r3, r3, #28
 8005b3a:	493e      	ldr	r1, [pc, #248]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005b42:	4b3c      	ldr	r3, [pc, #240]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b48:	f023 021f 	bic.w	r2, r3, #31
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b50:	3b01      	subs	r3, #1
 8005b52:	4938      	ldr	r1, [pc, #224]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d01d      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b66:	4b33      	ldr	r3, [pc, #204]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b6c:	0e1b      	lsrs	r3, r3, #24
 8005b6e:	f003 030f 	and.w	r3, r3, #15
 8005b72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005b74:	4b2f      	ldr	r3, [pc, #188]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b7a:	0f1b      	lsrs	r3, r3, #28
 8005b7c:	f003 0307 	and.w	r3, r3, #7
 8005b80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	019a      	lsls	r2, r3, #6
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	041b      	lsls	r3, r3, #16
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	061b      	lsls	r3, r3, #24
 8005b94:	431a      	orrs	r2, r3
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	071b      	lsls	r3, r3, #28
 8005b9a:	4926      	ldr	r1, [pc, #152]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d011      	beq.n	8005bd2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	019a      	lsls	r2, r3, #6
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	041b      	lsls	r3, r3, #16
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	061b      	lsls	r3, r3, #24
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	071b      	lsls	r3, r3, #28
 8005bca:	491a      	ldr	r1, [pc, #104]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005bd2:	4b18      	ldr	r3, [pc, #96]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a17      	ldr	r2, [pc, #92]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bd8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005bdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bde:	f7fc fc4f 	bl	8002480 <HAL_GetTick>
 8005be2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005be4:	e008      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005be6:	f7fc fc4b 	bl	8002480 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b64      	cmp	r3, #100	; 0x64
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e0d8      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005bf8:	4b0e      	ldr	r3, [pc, #56]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0f0      	beq.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	f040 80ce 	bne.w	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005c0c:	4b09      	ldr	r3, [pc, #36]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a08      	ldr	r2, [pc, #32]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c18:	f7fc fc32 	bl	8002480 <HAL_GetTick>
 8005c1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c1e:	e00b      	b.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005c20:	f7fc fc2e 	bl	8002480 <HAL_GetTick>
 8005c24:	4602      	mov	r2, r0
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	1ad3      	subs	r3, r2, r3
 8005c2a:	2b64      	cmp	r3, #100	; 0x64
 8005c2c:	d904      	bls.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005c2e:	2303      	movs	r3, #3
 8005c30:	e0bb      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005c32:	bf00      	nop
 8005c34:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005c38:	4b5e      	ldr	r3, [pc, #376]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c44:	d0ec      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d003      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d009      	beq.n	8005c6e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d02e      	beq.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d12a      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005c6e:	4b51      	ldr	r3, [pc, #324]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c74:	0c1b      	lsrs	r3, r3, #16
 8005c76:	f003 0303 	and.w	r3, r3, #3
 8005c7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005c7c:	4b4d      	ldr	r3, [pc, #308]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c82:	0f1b      	lsrs	r3, r3, #28
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	695b      	ldr	r3, [r3, #20]
 8005c8e:	019a      	lsls	r2, r3, #6
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	041b      	lsls	r3, r3, #16
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	061b      	lsls	r3, r3, #24
 8005c9c:	431a      	orrs	r2, r3
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	071b      	lsls	r3, r3, #28
 8005ca2:	4944      	ldr	r1, [pc, #272]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005caa:	4b42      	ldr	r3, [pc, #264]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cb0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	021b      	lsls	r3, r3, #8
 8005cbc:	493d      	ldr	r1, [pc, #244]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d022      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005cd8:	d11d      	bne.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005cda:	4b36      	ldr	r3, [pc, #216]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce0:	0e1b      	lsrs	r3, r3, #24
 8005ce2:	f003 030f 	and.w	r3, r3, #15
 8005ce6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ce8:	4b32      	ldr	r3, [pc, #200]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cee:	0f1b      	lsrs	r3, r3, #28
 8005cf0:	f003 0307 	and.w	r3, r3, #7
 8005cf4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	019a      	lsls	r2, r3, #6
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a1b      	ldr	r3, [r3, #32]
 8005d00:	041b      	lsls	r3, r3, #16
 8005d02:	431a      	orrs	r2, r3
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	061b      	lsls	r3, r3, #24
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	071b      	lsls	r3, r3, #28
 8005d0e:	4929      	ldr	r1, [pc, #164]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d10:	4313      	orrs	r3, r2
 8005d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f003 0308 	and.w	r3, r3, #8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d028      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d22:	4b24      	ldr	r3, [pc, #144]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d28:	0e1b      	lsrs	r3, r3, #24
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d30:	4b20      	ldr	r3, [pc, #128]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d36:	0c1b      	lsrs	r3, r3, #16
 8005d38:	f003 0303 	and.w	r3, r3, #3
 8005d3c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	019a      	lsls	r2, r3, #6
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	041b      	lsls	r3, r3, #16
 8005d48:	431a      	orrs	r2, r3
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	061b      	lsls	r3, r3, #24
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	69db      	ldr	r3, [r3, #28]
 8005d54:	071b      	lsls	r3, r3, #28
 8005d56:	4917      	ldr	r1, [pc, #92]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005d5e:	4b15      	ldr	r3, [pc, #84]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d6c:	4911      	ldr	r1, [pc, #68]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005d74:	4b0f      	ldr	r3, [pc, #60]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a0e      	ldr	r2, [pc, #56]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d80:	f7fc fb7e 	bl	8002480 <HAL_GetTick>
 8005d84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d86:	e008      	b.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005d88:	f7fc fb7a 	bl	8002480 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b64      	cmp	r3, #100	; 0x64
 8005d94:	d901      	bls.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e007      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005d9a:	4b06      	ldr	r3, [pc, #24]	; (8005db4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005da2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005da6:	d1ef      	bne.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3720      	adds	r7, #32
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	40023800 	.word	0x40023800

08005db8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e09d      	b.n	8005f06 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d108      	bne.n	8005de4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dda:	d009      	beq.n	8005df0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	61da      	str	r2, [r3, #28]
 8005de2:	e005      	b.n	8005df0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7fc f844 	bl	8001e98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e26:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e30:	d902      	bls.n	8005e38 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e32:	2300      	movs	r3, #0
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	e002      	b.n	8005e3e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e3c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005e46:	d007      	beq.n	8005e58 <HAL_SPI_Init+0xa0>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e50:	d002      	beq.n	8005e58 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	689b      	ldr	r3, [r3, #8]
 8005e64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e68:	431a      	orrs	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	431a      	orrs	r2, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	695b      	ldr	r3, [r3, #20]
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	699b      	ldr	r3, [r3, #24]
 8005e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e86:	431a      	orrs	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e90:	431a      	orrs	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e9a:	ea42 0103 	orr.w	r1, r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	0c1b      	lsrs	r3, r3, #16
 8005eb4:	f003 0204 	and.w	r2, r3, #4
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ebc:	f003 0310 	and.w	r3, r3, #16
 8005ec0:	431a      	orrs	r2, r3
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec6:	f003 0308 	and.w	r3, r3, #8
 8005eca:	431a      	orrs	r2, r3
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005ed4:	ea42 0103 	orr.w	r1, r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	69da      	ldr	r2, [r3, #28]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ef4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
	...

08005f10 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
 8005f1c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d101      	bne.n	8005f30 <HAL_SPI_TransmitReceive_IT+0x20>
 8005f2c:	2302      	movs	r3, #2
 8005f2e:	e091      	b.n	8006054 <HAL_SPI_TransmitReceive_IT+0x144>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f3e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005f46:	7dbb      	ldrb	r3, [r7, #22]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d00d      	beq.n	8005f68 <HAL_SPI_TransmitReceive_IT+0x58>
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f52:	d106      	bne.n	8005f62 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d102      	bne.n	8005f62 <HAL_SPI_TransmitReceive_IT+0x52>
 8005f5c:	7dbb      	ldrb	r3, [r7, #22]
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d002      	beq.n	8005f68 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8005f62:	2302      	movs	r3, #2
 8005f64:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f66:	e070      	b.n	800604a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d005      	beq.n	8005f7a <HAL_SPI_TransmitReceive_IT+0x6a>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d002      	beq.n	8005f7a <HAL_SPI_TransmitReceive_IT+0x6a>
 8005f74:	887b      	ldrh	r3, [r7, #2]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d102      	bne.n	8005f80 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f7e:	e064      	b.n	800604a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	2b04      	cmp	r3, #4
 8005f8a:	d003      	beq.n	8005f94 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2205      	movs	r2, #5
 8005f90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2200      	movs	r2, #0
 8005f98:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	68ba      	ldr	r2, [r7, #8]
 8005f9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	887a      	ldrh	r2, [r7, #2]
 8005fa4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	887a      	ldrh	r2, [r7, #2]
 8005faa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	887a      	ldrh	r2, [r7, #2]
 8005fb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	887a      	ldrh	r2, [r7, #2]
 8005fbe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fca:	d906      	bls.n	8005fda <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4a24      	ldr	r2, [pc, #144]	; (8006060 <HAL_SPI_TransmitReceive_IT+0x150>)
 8005fd0:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4a23      	ldr	r2, [pc, #140]	; (8006064 <HAL_SPI_TransmitReceive_IT+0x154>)
 8005fd6:	651a      	str	r2, [r3, #80]	; 0x50
 8005fd8:	e005      	b.n	8005fe6 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	4a22      	ldr	r2, [pc, #136]	; (8006068 <HAL_SPI_TransmitReceive_IT+0x158>)
 8005fde:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4a22      	ldr	r2, [pc, #136]	; (800606c <HAL_SPI_TransmitReceive_IT+0x15c>)
 8005fe4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fee:	d802      	bhi.n	8005ff6 <HAL_SPI_TransmitReceive_IT+0xe6>
 8005ff0:	887b      	ldrh	r3, [r7, #2]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d908      	bls.n	8006008 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006004:	605a      	str	r2, [r3, #4]
 8006006:	e007      	b.n	8006018 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006016:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006026:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006032:	2b40      	cmp	r3, #64	; 0x40
 8006034:	d008      	beq.n	8006048 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	e000      	b.n	800604a <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8006048:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006052:	7dfb      	ldrb	r3, [r7, #23]
}
 8006054:	4618      	mov	r0, r3
 8006056:	371c      	adds	r7, #28
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	08006413 	.word	0x08006413
 8006064:	08006479 	.word	0x08006479
 8006068:	080062c3 	.word	0x080062c3
 800606c:	08006381 	.word	0x08006381

08006070 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b088      	sub	sp, #32
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006088:	69bb      	ldr	r3, [r7, #24]
 800608a:	099b      	lsrs	r3, r3, #6
 800608c:	f003 0301 	and.w	r3, r3, #1
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10f      	bne.n	80060b4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006094:	69bb      	ldr	r3, [r7, #24]
 8006096:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00a      	beq.n	80060b4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	099b      	lsrs	r3, r3, #6
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d004      	beq.n	80060b4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	4798      	blx	r3
    return;
 80060b2:	e0d7      	b.n	8006264 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	085b      	lsrs	r3, r3, #1
 80060b8:	f003 0301 	and.w	r3, r3, #1
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d00a      	beq.n	80060d6 <HAL_SPI_IRQHandler+0x66>
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	09db      	lsrs	r3, r3, #7
 80060c4:	f003 0301 	and.w	r3, r3, #1
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d004      	beq.n	80060d6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	4798      	blx	r3
    return;
 80060d4:	e0c6      	b.n	8006264 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	095b      	lsrs	r3, r3, #5
 80060da:	f003 0301 	and.w	r3, r3, #1
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10c      	bne.n	80060fc <HAL_SPI_IRQHandler+0x8c>
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	099b      	lsrs	r3, r3, #6
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d106      	bne.n	80060fc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	0a1b      	lsrs	r3, r3, #8
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 80b4 	beq.w	8006264 <HAL_SPI_IRQHandler+0x1f4>
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	095b      	lsrs	r3, r3, #5
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 80ad 	beq.w	8006264 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	099b      	lsrs	r3, r3, #6
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b00      	cmp	r3, #0
 8006114:	d023      	beq.n	800615e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b03      	cmp	r3, #3
 8006120:	d011      	beq.n	8006146 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006126:	f043 0204 	orr.w	r2, r3, #4
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800612e:	2300      	movs	r3, #0
 8006130:	617b      	str	r3, [r7, #20]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	617b      	str	r3, [r7, #20]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	617b      	str	r3, [r7, #20]
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	e00b      	b.n	800615e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006146:	2300      	movs	r3, #0
 8006148:	613b      	str	r3, [r7, #16]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	613b      	str	r3, [r7, #16]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	613b      	str	r3, [r7, #16]
 800615a:	693b      	ldr	r3, [r7, #16]
        return;
 800615c:	e082      	b.n	8006264 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	095b      	lsrs	r3, r3, #5
 8006162:	f003 0301 	and.w	r3, r3, #1
 8006166:	2b00      	cmp	r3, #0
 8006168:	d014      	beq.n	8006194 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800616e:	f043 0201 	orr.w	r2, r3, #1
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006176:	2300      	movs	r3, #0
 8006178:	60fb      	str	r3, [r7, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	689b      	ldr	r3, [r3, #8]
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006190:	601a      	str	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006194:	69bb      	ldr	r3, [r7, #24]
 8006196:	0a1b      	lsrs	r3, r3, #8
 8006198:	f003 0301 	and.w	r3, r3, #1
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00c      	beq.n	80061ba <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a4:	f043 0208 	orr.w	r2, r3, #8
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80061ac:	2300      	movs	r3, #0
 80061ae:	60bb      	str	r3, [r7, #8]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	60bb      	str	r3, [r7, #8]
 80061b8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d04f      	beq.n	8006262 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685a      	ldr	r2, [r3, #4]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061d0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d104      	bne.n	80061ee <HAL_SPI_IRQHandler+0x17e>
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d034      	beq.n	8006258 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	685a      	ldr	r2, [r3, #4]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0203 	bic.w	r2, r2, #3
 80061fc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006202:	2b00      	cmp	r3, #0
 8006204:	d011      	beq.n	800622a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620a:	4a18      	ldr	r2, [pc, #96]	; (800626c <HAL_SPI_IRQHandler+0x1fc>)
 800620c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006212:	4618      	mov	r0, r3
 8006214:	f7fc fb84 	bl	8002920 <HAL_DMA_Abort_IT>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d005      	beq.n	800622a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006222:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800622e:	2b00      	cmp	r3, #0
 8006230:	d016      	beq.n	8006260 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006236:	4a0d      	ldr	r2, [pc, #52]	; (800626c <HAL_SPI_IRQHandler+0x1fc>)
 8006238:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623e:	4618      	mov	r0, r3
 8006240:	f7fc fb6e 	bl	8002920 <HAL_DMA_Abort_IT>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800624e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006256:	e003      	b.n	8006260 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	f000 f813 	bl	8006284 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800625e:	e000      	b.n	8006262 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006260:	bf00      	nop
    return;
 8006262:	bf00      	nop
  }
}
 8006264:	3720      	adds	r7, #32
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	08006299 	.word	0x08006299

08006270 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006270:	b480      	push	{r7}
 8006272:	b083      	sub	sp, #12
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006278:	bf00      	nop
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f7ff ffe5 	bl	8006284 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80062ba:	bf00      	nop
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b082      	sub	sp, #8
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d923      	bls.n	800631e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e0:	b292      	uxth	r2, r2
 80062e2:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e8:	1c9a      	adds	r2, r3, #2
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	3b02      	subs	r3, #2
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006306:	b29b      	uxth	r3, r3
 8006308:	2b01      	cmp	r3, #1
 800630a:	d11f      	bne.n	800634c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800631a:	605a      	str	r2, [r3, #4]
 800631c:	e016      	b.n	800634c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f103 020c 	add.w	r2, r3, #12
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632a:	7812      	ldrb	r2, [r2, #0]
 800632c:	b2d2      	uxtb	r2, r2
 800632e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006340:	b29b      	uxth	r3, r3
 8006342:	3b01      	subs	r3, #1
 8006344:	b29a      	uxth	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006352:	b29b      	uxth	r3, r3
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10f      	bne.n	8006378 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006366:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	d102      	bne.n	8006378 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fa38 	bl	80067e8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006378:	bf00      	nop
 800637a:	3708      	adds	r7, #8
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b082      	sub	sp, #8
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800638c:	b29b      	uxth	r3, r3
 800638e:	2b01      	cmp	r3, #1
 8006390:	d912      	bls.n	80063b8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006396:	881a      	ldrh	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a2:	1c9a      	adds	r2, r3, #2
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	3b02      	subs	r3, #2
 80063b0:	b29a      	uxth	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063b6:	e012      	b.n	80063de <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	330c      	adds	r3, #12
 80063c2:	7812      	ldrb	r2, [r2, #0]
 80063c4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	3b01      	subs	r3, #1
 80063d8:	b29a      	uxth	r2, r3
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d110      	bne.n	800640a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063f6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063fe:	b29b      	uxth	r3, r3
 8006400:	2b00      	cmp	r3, #0
 8006402:	d102      	bne.n	800640a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f9ef 	bl	80067e8 <SPI_CloseRxTx_ISR>
    }
  }
}
 800640a:	bf00      	nop
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b082      	sub	sp, #8
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68da      	ldr	r2, [r3, #12]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006424:	b292      	uxth	r2, r2
 8006426:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	1c9a      	adds	r2, r3, #2
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006438:	b29b      	uxth	r3, r3
 800643a:	3b01      	subs	r3, #1
 800643c:	b29a      	uxth	r2, r3
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800644a:	b29b      	uxth	r3, r3
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10f      	bne.n	8006470 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800645e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006464:	b29b      	uxth	r3, r3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d102      	bne.n	8006470 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 f9bc 	bl	80067e8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006470:	bf00      	nop
 8006472:	3708      	adds	r7, #8
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006484:	881a      	ldrh	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006490:	1c9a      	adds	r2, r3, #2
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800649a:	b29b      	uxth	r3, r3
 800649c:	3b01      	subs	r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d110      	bne.n	80064d0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	685a      	ldr	r2, [r3, #4]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064bc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d102      	bne.n	80064d0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f98c 	bl	80067e8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80064d0:	bf00      	nop
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b088      	sub	sp, #32
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	603b      	str	r3, [r7, #0]
 80064e4:	4613      	mov	r3, r2
 80064e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80064e8:	f7fb ffca 	bl	8002480 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f0:	1a9b      	subs	r3, r3, r2
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	4413      	add	r3, r2
 80064f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80064f8:	f7fb ffc2 	bl	8002480 <HAL_GetTick>
 80064fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80064fe:	4b39      	ldr	r3, [pc, #228]	; (80065e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	015b      	lsls	r3, r3, #5
 8006504:	0d1b      	lsrs	r3, r3, #20
 8006506:	69fa      	ldr	r2, [r7, #28]
 8006508:	fb02 f303 	mul.w	r3, r2, r3
 800650c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800650e:	e054      	b.n	80065ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006516:	d050      	beq.n	80065ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006518:	f7fb ffb2 	bl	8002480 <HAL_GetTick>
 800651c:	4602      	mov	r2, r0
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	69fa      	ldr	r2, [r7, #28]
 8006524:	429a      	cmp	r2, r3
 8006526:	d902      	bls.n	800652e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d13d      	bne.n	80065aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800653c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006546:	d111      	bne.n	800656c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006550:	d004      	beq.n	800655c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800655a:	d107      	bne.n	800656c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800656a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006574:	d10f      	bne.n	8006596 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006594:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2201      	movs	r2, #1
 800659a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e017      	b.n	80065da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80065b0:	2300      	movs	r3, #0
 80065b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	4013      	ands	r3, r2
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	bf0c      	ite	eq
 80065ca:	2301      	moveq	r3, #1
 80065cc:	2300      	movne	r3, #0
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	461a      	mov	r2, r3
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d19b      	bne.n	8006510 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3720      	adds	r7, #32
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	20000004 	.word	0x20000004

080065e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b08a      	sub	sp, #40	; 0x28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80065f6:	2300      	movs	r3, #0
 80065f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80065fa:	f7fb ff41 	bl	8002480 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006602:	1a9b      	subs	r3, r3, r2
 8006604:	683a      	ldr	r2, [r7, #0]
 8006606:	4413      	add	r3, r2
 8006608:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800660a:	f7fb ff39 	bl	8002480 <HAL_GetTick>
 800660e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	330c      	adds	r3, #12
 8006616:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006618:	4b3d      	ldr	r3, [pc, #244]	; (8006710 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	4613      	mov	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	00da      	lsls	r2, r3, #3
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	0d1b      	lsrs	r3, r3, #20
 8006628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800662a:	fb02 f303 	mul.w	r3, r2, r3
 800662e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006630:	e060      	b.n	80066f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006638:	d107      	bne.n	800664a <SPI_WaitFifoStateUntilTimeout+0x62>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d104      	bne.n	800664a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	b2db      	uxtb	r3, r3
 8006646:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006648:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006650:	d050      	beq.n	80066f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006652:	f7fb ff15 	bl	8002480 <HAL_GetTick>
 8006656:	4602      	mov	r2, r0
 8006658:	6a3b      	ldr	r3, [r7, #32]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800665e:	429a      	cmp	r2, r3
 8006660:	d902      	bls.n	8006668 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	2b00      	cmp	r3, #0
 8006666:	d13d      	bne.n	80066e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	685a      	ldr	r2, [r3, #4]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006676:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006680:	d111      	bne.n	80066a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800668a:	d004      	beq.n	8006696 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006694:	d107      	bne.n	80066a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ae:	d10f      	bne.n	80066d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066be:	601a      	str	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	2200      	movs	r2, #0
 80066dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e010      	b.n	8006706 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80066ea:	2300      	movs	r3, #0
 80066ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	3b01      	subs	r3, #1
 80066f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689a      	ldr	r2, [r3, #8]
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	4013      	ands	r3, r2
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	429a      	cmp	r2, r3
 8006702:	d196      	bne.n	8006632 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3728      	adds	r7, #40	; 0x28
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	20000004 	.word	0x20000004

08006714 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b088      	sub	sp, #32
 8006718:	af02      	add	r7, sp, #8
 800671a:	60f8      	str	r0, [r7, #12]
 800671c:	60b9      	str	r1, [r7, #8]
 800671e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	9300      	str	r3, [sp, #0]
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	2200      	movs	r2, #0
 8006728:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f7ff ff5b 	bl	80065e8 <SPI_WaitFifoStateUntilTimeout>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d007      	beq.n	8006748 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800673c:	f043 0220 	orr.w	r2, r3, #32
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e046      	b.n	80067d6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006748:	4b25      	ldr	r3, [pc, #148]	; (80067e0 <SPI_EndRxTxTransaction+0xcc>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a25      	ldr	r2, [pc, #148]	; (80067e4 <SPI_EndRxTxTransaction+0xd0>)
 800674e:	fba2 2303 	umull	r2, r3, r2, r3
 8006752:	0d5b      	lsrs	r3, r3, #21
 8006754:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006758:	fb02 f303 	mul.w	r3, r2, r3
 800675c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006766:	d112      	bne.n	800678e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	9300      	str	r3, [sp, #0]
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2200      	movs	r2, #0
 8006770:	2180      	movs	r1, #128	; 0x80
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f7ff feb0 	bl	80064d8 <SPI_WaitFlagStateUntilTimeout>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d016      	beq.n	80067ac <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006782:	f043 0220 	orr.w	r2, r3, #32
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e023      	b.n	80067d6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d00a      	beq.n	80067aa <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	3b01      	subs	r3, #1
 8006798:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a4:	2b80      	cmp	r3, #128	; 0x80
 80067a6:	d0f2      	beq.n	800678e <SPI_EndRxTxTransaction+0x7a>
 80067a8:	e000      	b.n	80067ac <SPI_EndRxTxTransaction+0x98>
        break;
 80067aa:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	9300      	str	r3, [sp, #0]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2200      	movs	r2, #0
 80067b4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f7ff ff15 	bl	80065e8 <SPI_WaitFifoStateUntilTimeout>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d007      	beq.n	80067d4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c8:	f043 0220 	orr.w	r2, r3, #32
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e000      	b.n	80067d6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	20000004 	.word	0x20000004
 80067e4:	165e9f81 	.word	0x165e9f81

080067e8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067f0:	f7fb fe46 	bl	8002480 <HAL_GetTick>
 80067f4:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	685a      	ldr	r2, [r3, #4]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 0220 	bic.w	r2, r2, #32
 8006804:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	2164      	movs	r1, #100	; 0x64
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f7ff ff82 	bl	8006714 <SPI_EndRxTxTransaction>
 8006810:	4603      	mov	r3, r0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d005      	beq.n	8006822 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800681a:	f043 0220 	orr.w	r2, r3, #32
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006826:	2b00      	cmp	r3, #0
 8006828:	d115      	bne.n	8006856 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b04      	cmp	r3, #4
 8006834:	d107      	bne.n	8006846 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7ff fd16 	bl	8006270 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8006844:	e00e      	b.n	8006864 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7fb f8fa 	bl	8001a48 <HAL_SPI_TxRxCpltCallback>
}
 8006854:	e006      	b.n	8006864 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f7ff fd10 	bl	8006284 <HAL_SPI_ErrorCallback>
}
 8006864:	bf00      	nop
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b082      	sub	sp, #8
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d101      	bne.n	800687e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e040      	b.n	8006900 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006882:	2b00      	cmp	r3, #0
 8006884:	d106      	bne.n	8006894 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f7fb fbb4 	bl	8001ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2224      	movs	r2, #36	; 0x24
 8006898:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0201 	bic.w	r2, r2, #1
 80068a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f990 	bl	8006bd0 <UART_SetConfig>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d101      	bne.n	80068ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e022      	b.n	8006900 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 fbe6 	bl	8007094 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685a      	ldr	r2, [r3, #4]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689a      	ldr	r2, [r3, #8]
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0201 	orr.w	r2, r2, #1
 80068f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f000 fc6d 	bl	80071d8 <UART_CheckIdleState>
 80068fe:	4603      	mov	r3, r0
}
 8006900:	4618      	mov	r0, r3
 8006902:	3708      	adds	r7, #8
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08a      	sub	sp, #40	; 0x28
 800690c:	af02      	add	r7, sp, #8
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	603b      	str	r3, [r7, #0]
 8006914:	4613      	mov	r3, r2
 8006916:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800691c:	2b20      	cmp	r3, #32
 800691e:	f040 8081 	bne.w	8006a24 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <HAL_UART_Transmit+0x26>
 8006928:	88fb      	ldrh	r3, [r7, #6]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d101      	bne.n	8006932 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e079      	b.n	8006a26 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006938:	2b01      	cmp	r3, #1
 800693a:	d101      	bne.n	8006940 <HAL_UART_Transmit+0x38>
 800693c:	2302      	movs	r3, #2
 800693e:	e072      	b.n	8006a26 <HAL_UART_Transmit+0x11e>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2221      	movs	r2, #33	; 0x21
 8006954:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006956:	f7fb fd93 	bl	8002480 <HAL_GetTick>
 800695a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	88fa      	ldrh	r2, [r7, #6]
 8006960:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	88fa      	ldrh	r2, [r7, #6]
 8006968:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006974:	d108      	bne.n	8006988 <HAL_UART_Transmit+0x80>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d104      	bne.n	8006988 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800697e:	2300      	movs	r3, #0
 8006980:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	61bb      	str	r3, [r7, #24]
 8006986:	e003      	b.n	8006990 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800698c:	2300      	movs	r3, #0
 800698e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006998:	e02c      	b.n	80069f4 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2200      	movs	r2, #0
 80069a2:	2180      	movs	r1, #128	; 0x80
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 fc60 	bl	800726a <UART_WaitOnFlagUntilTimeout>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e038      	b.n	8006a26 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d10b      	bne.n	80069d2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	881b      	ldrh	r3, [r3, #0]
 80069be:	461a      	mov	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	3302      	adds	r3, #2
 80069ce:	61bb      	str	r3, [r7, #24]
 80069d0:	e007      	b.n	80069e2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	781a      	ldrb	r2, [r3, #0]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	3301      	adds	r3, #1
 80069e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b29a      	uxth	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1cc      	bne.n	800699a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	2200      	movs	r2, #0
 8006a08:	2140      	movs	r1, #64	; 0x40
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 fc2d 	bl	800726a <UART_WaitOnFlagUntilTimeout>
 8006a10:	4603      	mov	r3, r0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e005      	b.n	8006a26 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006a20:	2300      	movs	r3, #0
 8006a22:	e000      	b.n	8006a26 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006a24:	2302      	movs	r3, #2
  }
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3720      	adds	r7, #32
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b08a      	sub	sp, #40	; 0x28
 8006a32:	af02      	add	r7, sp, #8
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	603b      	str	r3, [r7, #0]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a42:	2b20      	cmp	r3, #32
 8006a44:	f040 80be 	bne.w	8006bc4 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d002      	beq.n	8006a54 <HAL_UART_Receive+0x26>
 8006a4e:	88fb      	ldrh	r3, [r7, #6]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e0b6      	b.n	8006bc6 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d101      	bne.n	8006a66 <HAL_UART_Receive+0x38>
 8006a62:	2302      	movs	r3, #2
 8006a64:	e0af      	b.n	8006bc6 <HAL_UART_Receive+0x198>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2222      	movs	r2, #34	; 0x22
 8006a7a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a82:	f7fb fcfd 	bl	8002480 <HAL_GetTick>
 8006a86:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	88fa      	ldrh	r2, [r7, #6]
 8006a8c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	88fa      	ldrh	r2, [r7, #6]
 8006a94:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa0:	d10e      	bne.n	8006ac0 <HAL_UART_Receive+0x92>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d105      	bne.n	8006ab6 <HAL_UART_Receive+0x88>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006ab0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ab4:	e02d      	b.n	8006b12 <HAL_UART_Receive+0xe4>
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	22ff      	movs	r2, #255	; 0xff
 8006aba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006abe:	e028      	b.n	8006b12 <HAL_UART_Receive+0xe4>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d10d      	bne.n	8006ae4 <HAL_UART_Receive+0xb6>
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	691b      	ldr	r3, [r3, #16]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d104      	bne.n	8006ada <HAL_UART_Receive+0xac>
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	22ff      	movs	r2, #255	; 0xff
 8006ad4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ad8:	e01b      	b.n	8006b12 <HAL_UART_Receive+0xe4>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	227f      	movs	r2, #127	; 0x7f
 8006ade:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ae2:	e016      	b.n	8006b12 <HAL_UART_Receive+0xe4>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aec:	d10d      	bne.n	8006b0a <HAL_UART_Receive+0xdc>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d104      	bne.n	8006b00 <HAL_UART_Receive+0xd2>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	227f      	movs	r2, #127	; 0x7f
 8006afa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006afe:	e008      	b.n	8006b12 <HAL_UART_Receive+0xe4>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	223f      	movs	r2, #63	; 0x3f
 8006b04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006b08:	e003      	b.n	8006b12 <HAL_UART_Receive+0xe4>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b18:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b22:	d108      	bne.n	8006b36 <HAL_UART_Receive+0x108>
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d104      	bne.n	8006b36 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	61bb      	str	r3, [r7, #24]
 8006b34:	e003      	b.n	8006b3e <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006b46:	e032      	b.n	8006bae <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	9300      	str	r3, [sp, #0]
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2120      	movs	r1, #32
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 fb89 	bl	800726a <UART_WaitOnFlagUntilTimeout>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8006b5e:	2303      	movs	r3, #3
 8006b60:	e031      	b.n	8006bc6 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10c      	bne.n	8006b82 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6e:	b29a      	uxth	r2, r3
 8006b70:	8a7b      	ldrh	r3, [r7, #18]
 8006b72:	4013      	ands	r3, r2
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	3302      	adds	r3, #2
 8006b7e:	61bb      	str	r3, [r7, #24]
 8006b80:	e00c      	b.n	8006b9c <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	8a7b      	ldrh	r3, [r7, #18]
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	4013      	ands	r3, r2
 8006b90:	b2da      	uxtb	r2, r3
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006b96:	69fb      	ldr	r3, [r7, #28]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1c6      	bne.n	8006b48 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e000      	b.n	8006bc6 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8006bc4:	2302      	movs	r3, #2
  }
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3720      	adds	r7, #32
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
	...

08006bd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b088      	sub	sp, #32
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	431a      	orrs	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	695b      	ldr	r3, [r3, #20]
 8006bea:	431a      	orrs	r2, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	4ba7      	ldr	r3, [pc, #668]	; (8006e98 <UART_SetConfig+0x2c8>)
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	6812      	ldr	r2, [r2, #0]
 8006c02:	6979      	ldr	r1, [r7, #20]
 8006c04:	430b      	orrs	r3, r1
 8006c06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a95      	ldr	r2, [pc, #596]	; (8006e9c <UART_SetConfig+0x2cc>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d120      	bne.n	8006c8e <UART_SetConfig+0xbe>
 8006c4c:	4b94      	ldr	r3, [pc, #592]	; (8006ea0 <UART_SetConfig+0x2d0>)
 8006c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c52:	f003 0303 	and.w	r3, r3, #3
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d816      	bhi.n	8006c88 <UART_SetConfig+0xb8>
 8006c5a:	a201      	add	r2, pc, #4	; (adr r2, 8006c60 <UART_SetConfig+0x90>)
 8006c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c60:	08006c71 	.word	0x08006c71
 8006c64:	08006c7d 	.word	0x08006c7d
 8006c68:	08006c77 	.word	0x08006c77
 8006c6c:	08006c83 	.word	0x08006c83
 8006c70:	2301      	movs	r3, #1
 8006c72:	77fb      	strb	r3, [r7, #31]
 8006c74:	e14f      	b.n	8006f16 <UART_SetConfig+0x346>
 8006c76:	2302      	movs	r3, #2
 8006c78:	77fb      	strb	r3, [r7, #31]
 8006c7a:	e14c      	b.n	8006f16 <UART_SetConfig+0x346>
 8006c7c:	2304      	movs	r3, #4
 8006c7e:	77fb      	strb	r3, [r7, #31]
 8006c80:	e149      	b.n	8006f16 <UART_SetConfig+0x346>
 8006c82:	2308      	movs	r3, #8
 8006c84:	77fb      	strb	r3, [r7, #31]
 8006c86:	e146      	b.n	8006f16 <UART_SetConfig+0x346>
 8006c88:	2310      	movs	r3, #16
 8006c8a:	77fb      	strb	r3, [r7, #31]
 8006c8c:	e143      	b.n	8006f16 <UART_SetConfig+0x346>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4a84      	ldr	r2, [pc, #528]	; (8006ea4 <UART_SetConfig+0x2d4>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d132      	bne.n	8006cfe <UART_SetConfig+0x12e>
 8006c98:	4b81      	ldr	r3, [pc, #516]	; (8006ea0 <UART_SetConfig+0x2d0>)
 8006c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c9e:	f003 030c 	and.w	r3, r3, #12
 8006ca2:	2b0c      	cmp	r3, #12
 8006ca4:	d828      	bhi.n	8006cf8 <UART_SetConfig+0x128>
 8006ca6:	a201      	add	r2, pc, #4	; (adr r2, 8006cac <UART_SetConfig+0xdc>)
 8006ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cac:	08006ce1 	.word	0x08006ce1
 8006cb0:	08006cf9 	.word	0x08006cf9
 8006cb4:	08006cf9 	.word	0x08006cf9
 8006cb8:	08006cf9 	.word	0x08006cf9
 8006cbc:	08006ced 	.word	0x08006ced
 8006cc0:	08006cf9 	.word	0x08006cf9
 8006cc4:	08006cf9 	.word	0x08006cf9
 8006cc8:	08006cf9 	.word	0x08006cf9
 8006ccc:	08006ce7 	.word	0x08006ce7
 8006cd0:	08006cf9 	.word	0x08006cf9
 8006cd4:	08006cf9 	.word	0x08006cf9
 8006cd8:	08006cf9 	.word	0x08006cf9
 8006cdc:	08006cf3 	.word	0x08006cf3
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	77fb      	strb	r3, [r7, #31]
 8006ce4:	e117      	b.n	8006f16 <UART_SetConfig+0x346>
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	77fb      	strb	r3, [r7, #31]
 8006cea:	e114      	b.n	8006f16 <UART_SetConfig+0x346>
 8006cec:	2304      	movs	r3, #4
 8006cee:	77fb      	strb	r3, [r7, #31]
 8006cf0:	e111      	b.n	8006f16 <UART_SetConfig+0x346>
 8006cf2:	2308      	movs	r3, #8
 8006cf4:	77fb      	strb	r3, [r7, #31]
 8006cf6:	e10e      	b.n	8006f16 <UART_SetConfig+0x346>
 8006cf8:	2310      	movs	r3, #16
 8006cfa:	77fb      	strb	r3, [r7, #31]
 8006cfc:	e10b      	b.n	8006f16 <UART_SetConfig+0x346>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a69      	ldr	r2, [pc, #420]	; (8006ea8 <UART_SetConfig+0x2d8>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d120      	bne.n	8006d4a <UART_SetConfig+0x17a>
 8006d08:	4b65      	ldr	r3, [pc, #404]	; (8006ea0 <UART_SetConfig+0x2d0>)
 8006d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d12:	2b30      	cmp	r3, #48	; 0x30
 8006d14:	d013      	beq.n	8006d3e <UART_SetConfig+0x16e>
 8006d16:	2b30      	cmp	r3, #48	; 0x30
 8006d18:	d814      	bhi.n	8006d44 <UART_SetConfig+0x174>
 8006d1a:	2b20      	cmp	r3, #32
 8006d1c:	d009      	beq.n	8006d32 <UART_SetConfig+0x162>
 8006d1e:	2b20      	cmp	r3, #32
 8006d20:	d810      	bhi.n	8006d44 <UART_SetConfig+0x174>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d002      	beq.n	8006d2c <UART_SetConfig+0x15c>
 8006d26:	2b10      	cmp	r3, #16
 8006d28:	d006      	beq.n	8006d38 <UART_SetConfig+0x168>
 8006d2a:	e00b      	b.n	8006d44 <UART_SetConfig+0x174>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	77fb      	strb	r3, [r7, #31]
 8006d30:	e0f1      	b.n	8006f16 <UART_SetConfig+0x346>
 8006d32:	2302      	movs	r3, #2
 8006d34:	77fb      	strb	r3, [r7, #31]
 8006d36:	e0ee      	b.n	8006f16 <UART_SetConfig+0x346>
 8006d38:	2304      	movs	r3, #4
 8006d3a:	77fb      	strb	r3, [r7, #31]
 8006d3c:	e0eb      	b.n	8006f16 <UART_SetConfig+0x346>
 8006d3e:	2308      	movs	r3, #8
 8006d40:	77fb      	strb	r3, [r7, #31]
 8006d42:	e0e8      	b.n	8006f16 <UART_SetConfig+0x346>
 8006d44:	2310      	movs	r3, #16
 8006d46:	77fb      	strb	r3, [r7, #31]
 8006d48:	e0e5      	b.n	8006f16 <UART_SetConfig+0x346>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a57      	ldr	r2, [pc, #348]	; (8006eac <UART_SetConfig+0x2dc>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d120      	bne.n	8006d96 <UART_SetConfig+0x1c6>
 8006d54:	4b52      	ldr	r3, [pc, #328]	; (8006ea0 <UART_SetConfig+0x2d0>)
 8006d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d5e:	2bc0      	cmp	r3, #192	; 0xc0
 8006d60:	d013      	beq.n	8006d8a <UART_SetConfig+0x1ba>
 8006d62:	2bc0      	cmp	r3, #192	; 0xc0
 8006d64:	d814      	bhi.n	8006d90 <UART_SetConfig+0x1c0>
 8006d66:	2b80      	cmp	r3, #128	; 0x80
 8006d68:	d009      	beq.n	8006d7e <UART_SetConfig+0x1ae>
 8006d6a:	2b80      	cmp	r3, #128	; 0x80
 8006d6c:	d810      	bhi.n	8006d90 <UART_SetConfig+0x1c0>
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <UART_SetConfig+0x1a8>
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	d006      	beq.n	8006d84 <UART_SetConfig+0x1b4>
 8006d76:	e00b      	b.n	8006d90 <UART_SetConfig+0x1c0>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	77fb      	strb	r3, [r7, #31]
 8006d7c:	e0cb      	b.n	8006f16 <UART_SetConfig+0x346>
 8006d7e:	2302      	movs	r3, #2
 8006d80:	77fb      	strb	r3, [r7, #31]
 8006d82:	e0c8      	b.n	8006f16 <UART_SetConfig+0x346>
 8006d84:	2304      	movs	r3, #4
 8006d86:	77fb      	strb	r3, [r7, #31]
 8006d88:	e0c5      	b.n	8006f16 <UART_SetConfig+0x346>
 8006d8a:	2308      	movs	r3, #8
 8006d8c:	77fb      	strb	r3, [r7, #31]
 8006d8e:	e0c2      	b.n	8006f16 <UART_SetConfig+0x346>
 8006d90:	2310      	movs	r3, #16
 8006d92:	77fb      	strb	r3, [r7, #31]
 8006d94:	e0bf      	b.n	8006f16 <UART_SetConfig+0x346>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a45      	ldr	r2, [pc, #276]	; (8006eb0 <UART_SetConfig+0x2e0>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d125      	bne.n	8006dec <UART_SetConfig+0x21c>
 8006da0:	4b3f      	ldr	r3, [pc, #252]	; (8006ea0 <UART_SetConfig+0x2d0>)
 8006da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dae:	d017      	beq.n	8006de0 <UART_SetConfig+0x210>
 8006db0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006db4:	d817      	bhi.n	8006de6 <UART_SetConfig+0x216>
 8006db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dba:	d00b      	beq.n	8006dd4 <UART_SetConfig+0x204>
 8006dbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dc0:	d811      	bhi.n	8006de6 <UART_SetConfig+0x216>
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d003      	beq.n	8006dce <UART_SetConfig+0x1fe>
 8006dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dca:	d006      	beq.n	8006dda <UART_SetConfig+0x20a>
 8006dcc:	e00b      	b.n	8006de6 <UART_SetConfig+0x216>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	77fb      	strb	r3, [r7, #31]
 8006dd2:	e0a0      	b.n	8006f16 <UART_SetConfig+0x346>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	77fb      	strb	r3, [r7, #31]
 8006dd8:	e09d      	b.n	8006f16 <UART_SetConfig+0x346>
 8006dda:	2304      	movs	r3, #4
 8006ddc:	77fb      	strb	r3, [r7, #31]
 8006dde:	e09a      	b.n	8006f16 <UART_SetConfig+0x346>
 8006de0:	2308      	movs	r3, #8
 8006de2:	77fb      	strb	r3, [r7, #31]
 8006de4:	e097      	b.n	8006f16 <UART_SetConfig+0x346>
 8006de6:	2310      	movs	r3, #16
 8006de8:	77fb      	strb	r3, [r7, #31]
 8006dea:	e094      	b.n	8006f16 <UART_SetConfig+0x346>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a30      	ldr	r2, [pc, #192]	; (8006eb4 <UART_SetConfig+0x2e4>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d125      	bne.n	8006e42 <UART_SetConfig+0x272>
 8006df6:	4b2a      	ldr	r3, [pc, #168]	; (8006ea0 <UART_SetConfig+0x2d0>)
 8006df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dfc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e00:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e04:	d017      	beq.n	8006e36 <UART_SetConfig+0x266>
 8006e06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e0a:	d817      	bhi.n	8006e3c <UART_SetConfig+0x26c>
 8006e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e10:	d00b      	beq.n	8006e2a <UART_SetConfig+0x25a>
 8006e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e16:	d811      	bhi.n	8006e3c <UART_SetConfig+0x26c>
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <UART_SetConfig+0x254>
 8006e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e20:	d006      	beq.n	8006e30 <UART_SetConfig+0x260>
 8006e22:	e00b      	b.n	8006e3c <UART_SetConfig+0x26c>
 8006e24:	2301      	movs	r3, #1
 8006e26:	77fb      	strb	r3, [r7, #31]
 8006e28:	e075      	b.n	8006f16 <UART_SetConfig+0x346>
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	77fb      	strb	r3, [r7, #31]
 8006e2e:	e072      	b.n	8006f16 <UART_SetConfig+0x346>
 8006e30:	2304      	movs	r3, #4
 8006e32:	77fb      	strb	r3, [r7, #31]
 8006e34:	e06f      	b.n	8006f16 <UART_SetConfig+0x346>
 8006e36:	2308      	movs	r3, #8
 8006e38:	77fb      	strb	r3, [r7, #31]
 8006e3a:	e06c      	b.n	8006f16 <UART_SetConfig+0x346>
 8006e3c:	2310      	movs	r3, #16
 8006e3e:	77fb      	strb	r3, [r7, #31]
 8006e40:	e069      	b.n	8006f16 <UART_SetConfig+0x346>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a1c      	ldr	r2, [pc, #112]	; (8006eb8 <UART_SetConfig+0x2e8>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d137      	bne.n	8006ebc <UART_SetConfig+0x2ec>
 8006e4c:	4b14      	ldr	r3, [pc, #80]	; (8006ea0 <UART_SetConfig+0x2d0>)
 8006e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e52:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006e56:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e5a:	d017      	beq.n	8006e8c <UART_SetConfig+0x2bc>
 8006e5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e60:	d817      	bhi.n	8006e92 <UART_SetConfig+0x2c2>
 8006e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e66:	d00b      	beq.n	8006e80 <UART_SetConfig+0x2b0>
 8006e68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e6c:	d811      	bhi.n	8006e92 <UART_SetConfig+0x2c2>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d003      	beq.n	8006e7a <UART_SetConfig+0x2aa>
 8006e72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e76:	d006      	beq.n	8006e86 <UART_SetConfig+0x2b6>
 8006e78:	e00b      	b.n	8006e92 <UART_SetConfig+0x2c2>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	77fb      	strb	r3, [r7, #31]
 8006e7e:	e04a      	b.n	8006f16 <UART_SetConfig+0x346>
 8006e80:	2302      	movs	r3, #2
 8006e82:	77fb      	strb	r3, [r7, #31]
 8006e84:	e047      	b.n	8006f16 <UART_SetConfig+0x346>
 8006e86:	2304      	movs	r3, #4
 8006e88:	77fb      	strb	r3, [r7, #31]
 8006e8a:	e044      	b.n	8006f16 <UART_SetConfig+0x346>
 8006e8c:	2308      	movs	r3, #8
 8006e8e:	77fb      	strb	r3, [r7, #31]
 8006e90:	e041      	b.n	8006f16 <UART_SetConfig+0x346>
 8006e92:	2310      	movs	r3, #16
 8006e94:	77fb      	strb	r3, [r7, #31]
 8006e96:	e03e      	b.n	8006f16 <UART_SetConfig+0x346>
 8006e98:	efff69f3 	.word	0xefff69f3
 8006e9c:	40011000 	.word	0x40011000
 8006ea0:	40023800 	.word	0x40023800
 8006ea4:	40004400 	.word	0x40004400
 8006ea8:	40004800 	.word	0x40004800
 8006eac:	40004c00 	.word	0x40004c00
 8006eb0:	40005000 	.word	0x40005000
 8006eb4:	40011400 	.word	0x40011400
 8006eb8:	40007800 	.word	0x40007800
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a71      	ldr	r2, [pc, #452]	; (8007088 <UART_SetConfig+0x4b8>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d125      	bne.n	8006f12 <UART_SetConfig+0x342>
 8006ec6:	4b71      	ldr	r3, [pc, #452]	; (800708c <UART_SetConfig+0x4bc>)
 8006ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ecc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006ed0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006ed4:	d017      	beq.n	8006f06 <UART_SetConfig+0x336>
 8006ed6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006eda:	d817      	bhi.n	8006f0c <UART_SetConfig+0x33c>
 8006edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ee0:	d00b      	beq.n	8006efa <UART_SetConfig+0x32a>
 8006ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ee6:	d811      	bhi.n	8006f0c <UART_SetConfig+0x33c>
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d003      	beq.n	8006ef4 <UART_SetConfig+0x324>
 8006eec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ef0:	d006      	beq.n	8006f00 <UART_SetConfig+0x330>
 8006ef2:	e00b      	b.n	8006f0c <UART_SetConfig+0x33c>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	77fb      	strb	r3, [r7, #31]
 8006ef8:	e00d      	b.n	8006f16 <UART_SetConfig+0x346>
 8006efa:	2302      	movs	r3, #2
 8006efc:	77fb      	strb	r3, [r7, #31]
 8006efe:	e00a      	b.n	8006f16 <UART_SetConfig+0x346>
 8006f00:	2304      	movs	r3, #4
 8006f02:	77fb      	strb	r3, [r7, #31]
 8006f04:	e007      	b.n	8006f16 <UART_SetConfig+0x346>
 8006f06:	2308      	movs	r3, #8
 8006f08:	77fb      	strb	r3, [r7, #31]
 8006f0a:	e004      	b.n	8006f16 <UART_SetConfig+0x346>
 8006f0c:	2310      	movs	r3, #16
 8006f0e:	77fb      	strb	r3, [r7, #31]
 8006f10:	e001      	b.n	8006f16 <UART_SetConfig+0x346>
 8006f12:	2310      	movs	r3, #16
 8006f14:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f1e:	d15a      	bne.n	8006fd6 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006f20:	7ffb      	ldrb	r3, [r7, #31]
 8006f22:	2b08      	cmp	r3, #8
 8006f24:	d827      	bhi.n	8006f76 <UART_SetConfig+0x3a6>
 8006f26:	a201      	add	r2, pc, #4	; (adr r2, 8006f2c <UART_SetConfig+0x35c>)
 8006f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f2c:	08006f51 	.word	0x08006f51
 8006f30:	08006f59 	.word	0x08006f59
 8006f34:	08006f61 	.word	0x08006f61
 8006f38:	08006f77 	.word	0x08006f77
 8006f3c:	08006f67 	.word	0x08006f67
 8006f40:	08006f77 	.word	0x08006f77
 8006f44:	08006f77 	.word	0x08006f77
 8006f48:	08006f77 	.word	0x08006f77
 8006f4c:	08006f6f 	.word	0x08006f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f50:	f7fe fae2 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 8006f54:	61b8      	str	r0, [r7, #24]
        break;
 8006f56:	e013      	b.n	8006f80 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f58:	f7fe faf2 	bl	8005540 <HAL_RCC_GetPCLK2Freq>
 8006f5c:	61b8      	str	r0, [r7, #24]
        break;
 8006f5e:	e00f      	b.n	8006f80 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f60:	4b4b      	ldr	r3, [pc, #300]	; (8007090 <UART_SetConfig+0x4c0>)
 8006f62:	61bb      	str	r3, [r7, #24]
        break;
 8006f64:	e00c      	b.n	8006f80 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f66:	f7fe fa15 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8006f6a:	61b8      	str	r0, [r7, #24]
        break;
 8006f6c:	e008      	b.n	8006f80 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f72:	61bb      	str	r3, [r7, #24]
        break;
 8006f74:	e004      	b.n	8006f80 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006f76:	2300      	movs	r3, #0
 8006f78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	77bb      	strb	r3, [r7, #30]
        break;
 8006f7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d074      	beq.n	8007070 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	005a      	lsls	r2, r3, #1
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	085b      	lsrs	r3, r3, #1
 8006f90:	441a      	add	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	2b0f      	cmp	r3, #15
 8006fa0:	d916      	bls.n	8006fd0 <UART_SetConfig+0x400>
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fa8:	d212      	bcs.n	8006fd0 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	f023 030f 	bic.w	r3, r3, #15
 8006fb2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	085b      	lsrs	r3, r3, #1
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	f003 0307 	and.w	r3, r3, #7
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	89fb      	ldrh	r3, [r7, #14]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	89fa      	ldrh	r2, [r7, #14]
 8006fcc:	60da      	str	r2, [r3, #12]
 8006fce:	e04f      	b.n	8007070 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	77bb      	strb	r3, [r7, #30]
 8006fd4:	e04c      	b.n	8007070 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006fd6:	7ffb      	ldrb	r3, [r7, #31]
 8006fd8:	2b08      	cmp	r3, #8
 8006fda:	d828      	bhi.n	800702e <UART_SetConfig+0x45e>
 8006fdc:	a201      	add	r2, pc, #4	; (adr r2, 8006fe4 <UART_SetConfig+0x414>)
 8006fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe2:	bf00      	nop
 8006fe4:	08007009 	.word	0x08007009
 8006fe8:	08007011 	.word	0x08007011
 8006fec:	08007019 	.word	0x08007019
 8006ff0:	0800702f 	.word	0x0800702f
 8006ff4:	0800701f 	.word	0x0800701f
 8006ff8:	0800702f 	.word	0x0800702f
 8006ffc:	0800702f 	.word	0x0800702f
 8007000:	0800702f 	.word	0x0800702f
 8007004:	08007027 	.word	0x08007027
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007008:	f7fe fa86 	bl	8005518 <HAL_RCC_GetPCLK1Freq>
 800700c:	61b8      	str	r0, [r7, #24]
        break;
 800700e:	e013      	b.n	8007038 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007010:	f7fe fa96 	bl	8005540 <HAL_RCC_GetPCLK2Freq>
 8007014:	61b8      	str	r0, [r7, #24]
        break;
 8007016:	e00f      	b.n	8007038 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007018:	4b1d      	ldr	r3, [pc, #116]	; (8007090 <UART_SetConfig+0x4c0>)
 800701a:	61bb      	str	r3, [r7, #24]
        break;
 800701c:	e00c      	b.n	8007038 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800701e:	f7fe f9b9 	bl	8005394 <HAL_RCC_GetSysClockFreq>
 8007022:	61b8      	str	r0, [r7, #24]
        break;
 8007024:	e008      	b.n	8007038 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800702a:	61bb      	str	r3, [r7, #24]
        break;
 800702c:	e004      	b.n	8007038 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007032:	2301      	movs	r3, #1
 8007034:	77bb      	strb	r3, [r7, #30]
        break;
 8007036:	bf00      	nop
    }

    if (pclk != 0U)
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d018      	beq.n	8007070 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	085a      	lsrs	r2, r3, #1
 8007044:	69bb      	ldr	r3, [r7, #24]
 8007046:	441a      	add	r2, r3
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007050:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007052:	693b      	ldr	r3, [r7, #16]
 8007054:	2b0f      	cmp	r3, #15
 8007056:	d909      	bls.n	800706c <UART_SetConfig+0x49c>
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800705e:	d205      	bcs.n	800706c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	b29a      	uxth	r2, r3
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	60da      	str	r2, [r3, #12]
 800706a:	e001      	b.n	8007070 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800707c:	7fbb      	ldrb	r3, [r7, #30]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3720      	adds	r7, #32
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	40007c00 	.word	0x40007c00
 800708c:	40023800 	.word	0x40023800
 8007090:	00f42400 	.word	0x00f42400

08007094 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a0:	f003 0301 	and.w	r3, r3, #1
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00a      	beq.n	80070be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	430a      	orrs	r2, r1
 80070bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00a      	beq.n	80070e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	430a      	orrs	r2, r1
 80070de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	f003 0304 	and.w	r3, r3, #4
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00a      	beq.n	8007102 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007106:	f003 0308 	and.w	r3, r3, #8
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00a      	beq.n	8007124 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	430a      	orrs	r2, r1
 8007122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007128:	f003 0310 	and.w	r3, r3, #16
 800712c:	2b00      	cmp	r3, #0
 800712e:	d00a      	beq.n	8007146 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	430a      	orrs	r2, r1
 8007144:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	f003 0320 	and.w	r3, r3, #32
 800714e:	2b00      	cmp	r3, #0
 8007150:	d00a      	beq.n	8007168 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007170:	2b00      	cmp	r3, #0
 8007172:	d01a      	beq.n	80071aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800718e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007192:	d10a      	bne.n	80071aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00a      	beq.n	80071cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	430a      	orrs	r2, r1
 80071ca:	605a      	str	r2, [r3, #4]
  }
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af02      	add	r7, sp, #8
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80071e8:	f7fb f94a 	bl	8002480 <HAL_GetTick>
 80071ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0308 	and.w	r3, r3, #8
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	d10e      	bne.n	800721a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f82d 	bl	800726a <UART_WaitOnFlagUntilTimeout>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e023      	b.n	8007262 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b04      	cmp	r3, #4
 8007226:	d10e      	bne.n	8007246 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007228:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f817 	bl	800726a <UART_WaitOnFlagUntilTimeout>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007242:	2303      	movs	r3, #3
 8007244:	e00d      	b.n	8007262 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2220      	movs	r2, #32
 800724a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2220      	movs	r2, #32
 8007250:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b09c      	sub	sp, #112	; 0x70
 800726e:	af00      	add	r7, sp, #0
 8007270:	60f8      	str	r0, [r7, #12]
 8007272:	60b9      	str	r1, [r7, #8]
 8007274:	603b      	str	r3, [r7, #0]
 8007276:	4613      	mov	r3, r2
 8007278:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800727a:	e0a5      	b.n	80073c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800727c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800727e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007282:	f000 80a1 	beq.w	80073c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007286:	f7fb f8fb 	bl	8002480 <HAL_GetTick>
 800728a:	4602      	mov	r2, r0
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	1ad3      	subs	r3, r2, r3
 8007290:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007292:	429a      	cmp	r2, r3
 8007294:	d302      	bcc.n	800729c <UART_WaitOnFlagUntilTimeout+0x32>
 8007296:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007298:	2b00      	cmp	r3, #0
 800729a:	d13e      	bne.n	800731a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072a4:	e853 3f00 	ldrex	r3, [r3]
 80072a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80072aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072b0:	667b      	str	r3, [r7, #100]	; 0x64
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072bc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80072c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072c2:	e841 2300 	strex	r3, r2, [r1]
 80072c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80072c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1e6      	bne.n	800729c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	3308      	adds	r3, #8
 80072d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072d8:	e853 3f00 	ldrex	r3, [r3]
 80072dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e0:	f023 0301 	bic.w	r3, r3, #1
 80072e4:	663b      	str	r3, [r7, #96]	; 0x60
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	3308      	adds	r3, #8
 80072ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80072ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80072f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80072f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072f6:	e841 2300 	strex	r3, r2, [r1]
 80072fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80072fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1e5      	bne.n	80072ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2220      	movs	r2, #32
 8007306:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2220      	movs	r2, #32
 800730c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007316:	2303      	movs	r3, #3
 8007318:	e067      	b.n	80073ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f003 0304 	and.w	r3, r3, #4
 8007324:	2b00      	cmp	r3, #0
 8007326:	d04f      	beq.n	80073c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	69db      	ldr	r3, [r3, #28]
 800732e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007332:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007336:	d147      	bne.n	80073c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007340:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800734a:	e853 3f00 	ldrex	r3, [r3]
 800734e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007356:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	461a      	mov	r2, r3
 800735e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007360:	637b      	str	r3, [r7, #52]	; 0x34
 8007362:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007364:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007366:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007368:	e841 2300 	strex	r3, r2, [r1]
 800736c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	2b00      	cmp	r3, #0
 8007372:	d1e6      	bne.n	8007342 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	3308      	adds	r3, #8
 800737a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	e853 3f00 	ldrex	r3, [r3]
 8007382:	613b      	str	r3, [r7, #16]
   return(result);
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	f023 0301 	bic.w	r3, r3, #1
 800738a:	66bb      	str	r3, [r7, #104]	; 0x68
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	3308      	adds	r3, #8
 8007392:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007394:	623a      	str	r2, [r7, #32]
 8007396:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007398:	69f9      	ldr	r1, [r7, #28]
 800739a:	6a3a      	ldr	r2, [r7, #32]
 800739c:	e841 2300 	strex	r3, r2, [r1]
 80073a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e5      	bne.n	8007374 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2220      	movs	r2, #32
 80073ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2220      	movs	r2, #32
 80073b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2220      	movs	r2, #32
 80073b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e010      	b.n	80073ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	69da      	ldr	r2, [r3, #28]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	4013      	ands	r3, r2
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	bf0c      	ite	eq
 80073d8:	2301      	moveq	r3, #1
 80073da:	2300      	movne	r3, #0
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	461a      	mov	r2, r3
 80073e0:	79fb      	ldrb	r3, [r7, #7]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	f43f af4a 	beq.w	800727c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3770      	adds	r7, #112	; 0x70
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
	...

080073f4 <__errno>:
 80073f4:	4b01      	ldr	r3, [pc, #4]	; (80073fc <__errno+0x8>)
 80073f6:	6818      	ldr	r0, [r3, #0]
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	20000010 	.word	0x20000010

08007400 <__libc_init_array>:
 8007400:	b570      	push	{r4, r5, r6, lr}
 8007402:	4d0d      	ldr	r5, [pc, #52]	; (8007438 <__libc_init_array+0x38>)
 8007404:	4c0d      	ldr	r4, [pc, #52]	; (800743c <__libc_init_array+0x3c>)
 8007406:	1b64      	subs	r4, r4, r5
 8007408:	10a4      	asrs	r4, r4, #2
 800740a:	2600      	movs	r6, #0
 800740c:	42a6      	cmp	r6, r4
 800740e:	d109      	bne.n	8007424 <__libc_init_array+0x24>
 8007410:	4d0b      	ldr	r5, [pc, #44]	; (8007440 <__libc_init_array+0x40>)
 8007412:	4c0c      	ldr	r4, [pc, #48]	; (8007444 <__libc_init_array+0x44>)
 8007414:	f004 fc5e 	bl	800bcd4 <_init>
 8007418:	1b64      	subs	r4, r4, r5
 800741a:	10a4      	asrs	r4, r4, #2
 800741c:	2600      	movs	r6, #0
 800741e:	42a6      	cmp	r6, r4
 8007420:	d105      	bne.n	800742e <__libc_init_array+0x2e>
 8007422:	bd70      	pop	{r4, r5, r6, pc}
 8007424:	f855 3b04 	ldr.w	r3, [r5], #4
 8007428:	4798      	blx	r3
 800742a:	3601      	adds	r6, #1
 800742c:	e7ee      	b.n	800740c <__libc_init_array+0xc>
 800742e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007432:	4798      	blx	r3
 8007434:	3601      	adds	r6, #1
 8007436:	e7f2      	b.n	800741e <__libc_init_array+0x1e>
 8007438:	0800c494 	.word	0x0800c494
 800743c:	0800c494 	.word	0x0800c494
 8007440:	0800c494 	.word	0x0800c494
 8007444:	0800c498 	.word	0x0800c498

08007448 <memset>:
 8007448:	4402      	add	r2, r0
 800744a:	4603      	mov	r3, r0
 800744c:	4293      	cmp	r3, r2
 800744e:	d100      	bne.n	8007452 <memset+0xa>
 8007450:	4770      	bx	lr
 8007452:	f803 1b01 	strb.w	r1, [r3], #1
 8007456:	e7f9      	b.n	800744c <memset+0x4>

08007458 <__cvt>:
 8007458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800745a:	ed2d 8b02 	vpush	{d8}
 800745e:	eeb0 8b40 	vmov.f64	d8, d0
 8007462:	b085      	sub	sp, #20
 8007464:	4617      	mov	r7, r2
 8007466:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007468:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800746a:	ee18 2a90 	vmov	r2, s17
 800746e:	f025 0520 	bic.w	r5, r5, #32
 8007472:	2a00      	cmp	r2, #0
 8007474:	bfb6      	itet	lt
 8007476:	222d      	movlt	r2, #45	; 0x2d
 8007478:	2200      	movge	r2, #0
 800747a:	eeb1 8b40 	vneglt.f64	d8, d0
 800747e:	2d46      	cmp	r5, #70	; 0x46
 8007480:	460c      	mov	r4, r1
 8007482:	701a      	strb	r2, [r3, #0]
 8007484:	d004      	beq.n	8007490 <__cvt+0x38>
 8007486:	2d45      	cmp	r5, #69	; 0x45
 8007488:	d100      	bne.n	800748c <__cvt+0x34>
 800748a:	3401      	adds	r4, #1
 800748c:	2102      	movs	r1, #2
 800748e:	e000      	b.n	8007492 <__cvt+0x3a>
 8007490:	2103      	movs	r1, #3
 8007492:	ab03      	add	r3, sp, #12
 8007494:	9301      	str	r3, [sp, #4]
 8007496:	ab02      	add	r3, sp, #8
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	4622      	mov	r2, r4
 800749c:	4633      	mov	r3, r6
 800749e:	eeb0 0b48 	vmov.f64	d0, d8
 80074a2:	f001 feb5 	bl	8009210 <_dtoa_r>
 80074a6:	2d47      	cmp	r5, #71	; 0x47
 80074a8:	d109      	bne.n	80074be <__cvt+0x66>
 80074aa:	07fb      	lsls	r3, r7, #31
 80074ac:	d407      	bmi.n	80074be <__cvt+0x66>
 80074ae:	9b03      	ldr	r3, [sp, #12]
 80074b0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074b2:	1a1b      	subs	r3, r3, r0
 80074b4:	6013      	str	r3, [r2, #0]
 80074b6:	b005      	add	sp, #20
 80074b8:	ecbd 8b02 	vpop	{d8}
 80074bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074be:	2d46      	cmp	r5, #70	; 0x46
 80074c0:	eb00 0204 	add.w	r2, r0, r4
 80074c4:	d10c      	bne.n	80074e0 <__cvt+0x88>
 80074c6:	7803      	ldrb	r3, [r0, #0]
 80074c8:	2b30      	cmp	r3, #48	; 0x30
 80074ca:	d107      	bne.n	80074dc <__cvt+0x84>
 80074cc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80074d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074d4:	bf1c      	itt	ne
 80074d6:	f1c4 0401 	rsbne	r4, r4, #1
 80074da:	6034      	strne	r4, [r6, #0]
 80074dc:	6833      	ldr	r3, [r6, #0]
 80074de:	441a      	add	r2, r3
 80074e0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80074e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e8:	bf08      	it	eq
 80074ea:	9203      	streq	r2, [sp, #12]
 80074ec:	2130      	movs	r1, #48	; 0x30
 80074ee:	9b03      	ldr	r3, [sp, #12]
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d2dc      	bcs.n	80074ae <__cvt+0x56>
 80074f4:	1c5c      	adds	r4, r3, #1
 80074f6:	9403      	str	r4, [sp, #12]
 80074f8:	7019      	strb	r1, [r3, #0]
 80074fa:	e7f8      	b.n	80074ee <__cvt+0x96>

080074fc <__exponent>:
 80074fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074fe:	4603      	mov	r3, r0
 8007500:	2900      	cmp	r1, #0
 8007502:	bfb8      	it	lt
 8007504:	4249      	neglt	r1, r1
 8007506:	f803 2b02 	strb.w	r2, [r3], #2
 800750a:	bfb4      	ite	lt
 800750c:	222d      	movlt	r2, #45	; 0x2d
 800750e:	222b      	movge	r2, #43	; 0x2b
 8007510:	2909      	cmp	r1, #9
 8007512:	7042      	strb	r2, [r0, #1]
 8007514:	dd2a      	ble.n	800756c <__exponent+0x70>
 8007516:	f10d 0407 	add.w	r4, sp, #7
 800751a:	46a4      	mov	ip, r4
 800751c:	270a      	movs	r7, #10
 800751e:	46a6      	mov	lr, r4
 8007520:	460a      	mov	r2, r1
 8007522:	fb91 f6f7 	sdiv	r6, r1, r7
 8007526:	fb07 1516 	mls	r5, r7, r6, r1
 800752a:	3530      	adds	r5, #48	; 0x30
 800752c:	2a63      	cmp	r2, #99	; 0x63
 800752e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007532:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007536:	4631      	mov	r1, r6
 8007538:	dcf1      	bgt.n	800751e <__exponent+0x22>
 800753a:	3130      	adds	r1, #48	; 0x30
 800753c:	f1ae 0502 	sub.w	r5, lr, #2
 8007540:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007544:	1c44      	adds	r4, r0, #1
 8007546:	4629      	mov	r1, r5
 8007548:	4561      	cmp	r1, ip
 800754a:	d30a      	bcc.n	8007562 <__exponent+0x66>
 800754c:	f10d 0209 	add.w	r2, sp, #9
 8007550:	eba2 020e 	sub.w	r2, r2, lr
 8007554:	4565      	cmp	r5, ip
 8007556:	bf88      	it	hi
 8007558:	2200      	movhi	r2, #0
 800755a:	4413      	add	r3, r2
 800755c:	1a18      	subs	r0, r3, r0
 800755e:	b003      	add	sp, #12
 8007560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007562:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007566:	f804 2f01 	strb.w	r2, [r4, #1]!
 800756a:	e7ed      	b.n	8007548 <__exponent+0x4c>
 800756c:	2330      	movs	r3, #48	; 0x30
 800756e:	3130      	adds	r1, #48	; 0x30
 8007570:	7083      	strb	r3, [r0, #2]
 8007572:	70c1      	strb	r1, [r0, #3]
 8007574:	1d03      	adds	r3, r0, #4
 8007576:	e7f1      	b.n	800755c <__exponent+0x60>

08007578 <_printf_float>:
 8007578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757c:	b08b      	sub	sp, #44	; 0x2c
 800757e:	460c      	mov	r4, r1
 8007580:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007584:	4616      	mov	r6, r2
 8007586:	461f      	mov	r7, r3
 8007588:	4605      	mov	r5, r0
 800758a:	f003 f8e9 	bl	800a760 <_localeconv_r>
 800758e:	f8d0 b000 	ldr.w	fp, [r0]
 8007592:	4658      	mov	r0, fp
 8007594:	f7f8 fe54 	bl	8000240 <strlen>
 8007598:	2300      	movs	r3, #0
 800759a:	9308      	str	r3, [sp, #32]
 800759c:	f8d8 3000 	ldr.w	r3, [r8]
 80075a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80075a4:	6822      	ldr	r2, [r4, #0]
 80075a6:	3307      	adds	r3, #7
 80075a8:	f023 0307 	bic.w	r3, r3, #7
 80075ac:	f103 0108 	add.w	r1, r3, #8
 80075b0:	f8c8 1000 	str.w	r1, [r8]
 80075b4:	4682      	mov	sl, r0
 80075b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80075ba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80075be:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8007820 <_printf_float+0x2a8>
 80075c2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80075c6:	eeb0 6bc0 	vabs.f64	d6, d0
 80075ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80075ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d2:	dd24      	ble.n	800761e <_printf_float+0xa6>
 80075d4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80075d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075dc:	d502      	bpl.n	80075e4 <_printf_float+0x6c>
 80075de:	232d      	movs	r3, #45	; 0x2d
 80075e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075e4:	4b90      	ldr	r3, [pc, #576]	; (8007828 <_printf_float+0x2b0>)
 80075e6:	4891      	ldr	r0, [pc, #580]	; (800782c <_printf_float+0x2b4>)
 80075e8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80075ec:	bf94      	ite	ls
 80075ee:	4698      	movls	r8, r3
 80075f0:	4680      	movhi	r8, r0
 80075f2:	2303      	movs	r3, #3
 80075f4:	6123      	str	r3, [r4, #16]
 80075f6:	f022 0204 	bic.w	r2, r2, #4
 80075fa:	2300      	movs	r3, #0
 80075fc:	6022      	str	r2, [r4, #0]
 80075fe:	9304      	str	r3, [sp, #16]
 8007600:	9700      	str	r7, [sp, #0]
 8007602:	4633      	mov	r3, r6
 8007604:	aa09      	add	r2, sp, #36	; 0x24
 8007606:	4621      	mov	r1, r4
 8007608:	4628      	mov	r0, r5
 800760a:	f000 f9d3 	bl	80079b4 <_printf_common>
 800760e:	3001      	adds	r0, #1
 8007610:	f040 808a 	bne.w	8007728 <_printf_float+0x1b0>
 8007614:	f04f 30ff 	mov.w	r0, #4294967295
 8007618:	b00b      	add	sp, #44	; 0x2c
 800761a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800761e:	eeb4 0b40 	vcmp.f64	d0, d0
 8007622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007626:	d709      	bvc.n	800763c <_printf_float+0xc4>
 8007628:	ee10 3a90 	vmov	r3, s1
 800762c:	2b00      	cmp	r3, #0
 800762e:	bfbc      	itt	lt
 8007630:	232d      	movlt	r3, #45	; 0x2d
 8007632:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007636:	487e      	ldr	r0, [pc, #504]	; (8007830 <_printf_float+0x2b8>)
 8007638:	4b7e      	ldr	r3, [pc, #504]	; (8007834 <_printf_float+0x2bc>)
 800763a:	e7d5      	b.n	80075e8 <_printf_float+0x70>
 800763c:	6863      	ldr	r3, [r4, #4]
 800763e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8007642:	9104      	str	r1, [sp, #16]
 8007644:	1c59      	adds	r1, r3, #1
 8007646:	d13c      	bne.n	80076c2 <_printf_float+0x14a>
 8007648:	2306      	movs	r3, #6
 800764a:	6063      	str	r3, [r4, #4]
 800764c:	2300      	movs	r3, #0
 800764e:	9303      	str	r3, [sp, #12]
 8007650:	ab08      	add	r3, sp, #32
 8007652:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8007656:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800765a:	ab07      	add	r3, sp, #28
 800765c:	6861      	ldr	r1, [r4, #4]
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	6022      	str	r2, [r4, #0]
 8007662:	f10d 031b 	add.w	r3, sp, #27
 8007666:	4628      	mov	r0, r5
 8007668:	f7ff fef6 	bl	8007458 <__cvt>
 800766c:	9b04      	ldr	r3, [sp, #16]
 800766e:	9907      	ldr	r1, [sp, #28]
 8007670:	2b47      	cmp	r3, #71	; 0x47
 8007672:	4680      	mov	r8, r0
 8007674:	d108      	bne.n	8007688 <_printf_float+0x110>
 8007676:	1cc8      	adds	r0, r1, #3
 8007678:	db02      	blt.n	8007680 <_printf_float+0x108>
 800767a:	6863      	ldr	r3, [r4, #4]
 800767c:	4299      	cmp	r1, r3
 800767e:	dd41      	ble.n	8007704 <_printf_float+0x18c>
 8007680:	f1a9 0902 	sub.w	r9, r9, #2
 8007684:	fa5f f989 	uxtb.w	r9, r9
 8007688:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800768c:	d820      	bhi.n	80076d0 <_printf_float+0x158>
 800768e:	3901      	subs	r1, #1
 8007690:	464a      	mov	r2, r9
 8007692:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007696:	9107      	str	r1, [sp, #28]
 8007698:	f7ff ff30 	bl	80074fc <__exponent>
 800769c:	9a08      	ldr	r2, [sp, #32]
 800769e:	9004      	str	r0, [sp, #16]
 80076a0:	1813      	adds	r3, r2, r0
 80076a2:	2a01      	cmp	r2, #1
 80076a4:	6123      	str	r3, [r4, #16]
 80076a6:	dc02      	bgt.n	80076ae <_printf_float+0x136>
 80076a8:	6822      	ldr	r2, [r4, #0]
 80076aa:	07d2      	lsls	r2, r2, #31
 80076ac:	d501      	bpl.n	80076b2 <_printf_float+0x13a>
 80076ae:	3301      	adds	r3, #1
 80076b0:	6123      	str	r3, [r4, #16]
 80076b2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d0a2      	beq.n	8007600 <_printf_float+0x88>
 80076ba:	232d      	movs	r3, #45	; 0x2d
 80076bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076c0:	e79e      	b.n	8007600 <_printf_float+0x88>
 80076c2:	9904      	ldr	r1, [sp, #16]
 80076c4:	2947      	cmp	r1, #71	; 0x47
 80076c6:	d1c1      	bne.n	800764c <_printf_float+0xd4>
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d1bf      	bne.n	800764c <_printf_float+0xd4>
 80076cc:	2301      	movs	r3, #1
 80076ce:	e7bc      	b.n	800764a <_printf_float+0xd2>
 80076d0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80076d4:	d118      	bne.n	8007708 <_printf_float+0x190>
 80076d6:	2900      	cmp	r1, #0
 80076d8:	6863      	ldr	r3, [r4, #4]
 80076da:	dd0b      	ble.n	80076f4 <_printf_float+0x17c>
 80076dc:	6121      	str	r1, [r4, #16]
 80076de:	b913      	cbnz	r3, 80076e6 <_printf_float+0x16e>
 80076e0:	6822      	ldr	r2, [r4, #0]
 80076e2:	07d0      	lsls	r0, r2, #31
 80076e4:	d502      	bpl.n	80076ec <_printf_float+0x174>
 80076e6:	3301      	adds	r3, #1
 80076e8:	440b      	add	r3, r1
 80076ea:	6123      	str	r3, [r4, #16]
 80076ec:	2300      	movs	r3, #0
 80076ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80076f0:	9304      	str	r3, [sp, #16]
 80076f2:	e7de      	b.n	80076b2 <_printf_float+0x13a>
 80076f4:	b913      	cbnz	r3, 80076fc <_printf_float+0x184>
 80076f6:	6822      	ldr	r2, [r4, #0]
 80076f8:	07d2      	lsls	r2, r2, #31
 80076fa:	d501      	bpl.n	8007700 <_printf_float+0x188>
 80076fc:	3302      	adds	r3, #2
 80076fe:	e7f4      	b.n	80076ea <_printf_float+0x172>
 8007700:	2301      	movs	r3, #1
 8007702:	e7f2      	b.n	80076ea <_printf_float+0x172>
 8007704:	f04f 0967 	mov.w	r9, #103	; 0x67
 8007708:	9b08      	ldr	r3, [sp, #32]
 800770a:	4299      	cmp	r1, r3
 800770c:	db05      	blt.n	800771a <_printf_float+0x1a2>
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	6121      	str	r1, [r4, #16]
 8007712:	07d8      	lsls	r0, r3, #31
 8007714:	d5ea      	bpl.n	80076ec <_printf_float+0x174>
 8007716:	1c4b      	adds	r3, r1, #1
 8007718:	e7e7      	b.n	80076ea <_printf_float+0x172>
 800771a:	2900      	cmp	r1, #0
 800771c:	bfd4      	ite	le
 800771e:	f1c1 0202 	rsble	r2, r1, #2
 8007722:	2201      	movgt	r2, #1
 8007724:	4413      	add	r3, r2
 8007726:	e7e0      	b.n	80076ea <_printf_float+0x172>
 8007728:	6823      	ldr	r3, [r4, #0]
 800772a:	055a      	lsls	r2, r3, #21
 800772c:	d407      	bmi.n	800773e <_printf_float+0x1c6>
 800772e:	6923      	ldr	r3, [r4, #16]
 8007730:	4642      	mov	r2, r8
 8007732:	4631      	mov	r1, r6
 8007734:	4628      	mov	r0, r5
 8007736:	47b8      	blx	r7
 8007738:	3001      	adds	r0, #1
 800773a:	d12a      	bne.n	8007792 <_printf_float+0x21a>
 800773c:	e76a      	b.n	8007614 <_printf_float+0x9c>
 800773e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007742:	f240 80e2 	bls.w	800790a <_printf_float+0x392>
 8007746:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800774a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800774e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007752:	d133      	bne.n	80077bc <_printf_float+0x244>
 8007754:	4a38      	ldr	r2, [pc, #224]	; (8007838 <_printf_float+0x2c0>)
 8007756:	2301      	movs	r3, #1
 8007758:	4631      	mov	r1, r6
 800775a:	4628      	mov	r0, r5
 800775c:	47b8      	blx	r7
 800775e:	3001      	adds	r0, #1
 8007760:	f43f af58 	beq.w	8007614 <_printf_float+0x9c>
 8007764:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8007768:	429a      	cmp	r2, r3
 800776a:	db02      	blt.n	8007772 <_printf_float+0x1fa>
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	07d8      	lsls	r0, r3, #31
 8007770:	d50f      	bpl.n	8007792 <_printf_float+0x21a>
 8007772:	4653      	mov	r3, sl
 8007774:	465a      	mov	r2, fp
 8007776:	4631      	mov	r1, r6
 8007778:	4628      	mov	r0, r5
 800777a:	47b8      	blx	r7
 800777c:	3001      	adds	r0, #1
 800777e:	f43f af49 	beq.w	8007614 <_printf_float+0x9c>
 8007782:	f04f 0800 	mov.w	r8, #0
 8007786:	f104 091a 	add.w	r9, r4, #26
 800778a:	9b08      	ldr	r3, [sp, #32]
 800778c:	3b01      	subs	r3, #1
 800778e:	4543      	cmp	r3, r8
 8007790:	dc09      	bgt.n	80077a6 <_printf_float+0x22e>
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	079b      	lsls	r3, r3, #30
 8007796:	f100 8108 	bmi.w	80079aa <_printf_float+0x432>
 800779a:	68e0      	ldr	r0, [r4, #12]
 800779c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800779e:	4298      	cmp	r0, r3
 80077a0:	bfb8      	it	lt
 80077a2:	4618      	movlt	r0, r3
 80077a4:	e738      	b.n	8007618 <_printf_float+0xa0>
 80077a6:	2301      	movs	r3, #1
 80077a8:	464a      	mov	r2, r9
 80077aa:	4631      	mov	r1, r6
 80077ac:	4628      	mov	r0, r5
 80077ae:	47b8      	blx	r7
 80077b0:	3001      	adds	r0, #1
 80077b2:	f43f af2f 	beq.w	8007614 <_printf_float+0x9c>
 80077b6:	f108 0801 	add.w	r8, r8, #1
 80077ba:	e7e6      	b.n	800778a <_printf_float+0x212>
 80077bc:	9b07      	ldr	r3, [sp, #28]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	dc3c      	bgt.n	800783c <_printf_float+0x2c4>
 80077c2:	4a1d      	ldr	r2, [pc, #116]	; (8007838 <_printf_float+0x2c0>)
 80077c4:	2301      	movs	r3, #1
 80077c6:	4631      	mov	r1, r6
 80077c8:	4628      	mov	r0, r5
 80077ca:	47b8      	blx	r7
 80077cc:	3001      	adds	r0, #1
 80077ce:	f43f af21 	beq.w	8007614 <_printf_float+0x9c>
 80077d2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80077d6:	4313      	orrs	r3, r2
 80077d8:	d102      	bne.n	80077e0 <_printf_float+0x268>
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	07d9      	lsls	r1, r3, #31
 80077de:	d5d8      	bpl.n	8007792 <_printf_float+0x21a>
 80077e0:	4653      	mov	r3, sl
 80077e2:	465a      	mov	r2, fp
 80077e4:	4631      	mov	r1, r6
 80077e6:	4628      	mov	r0, r5
 80077e8:	47b8      	blx	r7
 80077ea:	3001      	adds	r0, #1
 80077ec:	f43f af12 	beq.w	8007614 <_printf_float+0x9c>
 80077f0:	f04f 0900 	mov.w	r9, #0
 80077f4:	f104 0a1a 	add.w	sl, r4, #26
 80077f8:	9b07      	ldr	r3, [sp, #28]
 80077fa:	425b      	negs	r3, r3
 80077fc:	454b      	cmp	r3, r9
 80077fe:	dc01      	bgt.n	8007804 <_printf_float+0x28c>
 8007800:	9b08      	ldr	r3, [sp, #32]
 8007802:	e795      	b.n	8007730 <_printf_float+0x1b8>
 8007804:	2301      	movs	r3, #1
 8007806:	4652      	mov	r2, sl
 8007808:	4631      	mov	r1, r6
 800780a:	4628      	mov	r0, r5
 800780c:	47b8      	blx	r7
 800780e:	3001      	adds	r0, #1
 8007810:	f43f af00 	beq.w	8007614 <_printf_float+0x9c>
 8007814:	f109 0901 	add.w	r9, r9, #1
 8007818:	e7ee      	b.n	80077f8 <_printf_float+0x280>
 800781a:	bf00      	nop
 800781c:	f3af 8000 	nop.w
 8007820:	ffffffff 	.word	0xffffffff
 8007824:	7fefffff 	.word	0x7fefffff
 8007828:	0800bfd8 	.word	0x0800bfd8
 800782c:	0800bfdc 	.word	0x0800bfdc
 8007830:	0800bfe4 	.word	0x0800bfe4
 8007834:	0800bfe0 	.word	0x0800bfe0
 8007838:	0800bfe8 	.word	0x0800bfe8
 800783c:	9a08      	ldr	r2, [sp, #32]
 800783e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007840:	429a      	cmp	r2, r3
 8007842:	bfa8      	it	ge
 8007844:	461a      	movge	r2, r3
 8007846:	2a00      	cmp	r2, #0
 8007848:	4691      	mov	r9, r2
 800784a:	dc38      	bgt.n	80078be <_printf_float+0x346>
 800784c:	2300      	movs	r3, #0
 800784e:	9305      	str	r3, [sp, #20]
 8007850:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007854:	f104 021a 	add.w	r2, r4, #26
 8007858:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800785a:	9905      	ldr	r1, [sp, #20]
 800785c:	9304      	str	r3, [sp, #16]
 800785e:	eba3 0309 	sub.w	r3, r3, r9
 8007862:	428b      	cmp	r3, r1
 8007864:	dc33      	bgt.n	80078ce <_printf_float+0x356>
 8007866:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800786a:	429a      	cmp	r2, r3
 800786c:	db3c      	blt.n	80078e8 <_printf_float+0x370>
 800786e:	6823      	ldr	r3, [r4, #0]
 8007870:	07da      	lsls	r2, r3, #31
 8007872:	d439      	bmi.n	80078e8 <_printf_float+0x370>
 8007874:	9a08      	ldr	r2, [sp, #32]
 8007876:	9b04      	ldr	r3, [sp, #16]
 8007878:	9907      	ldr	r1, [sp, #28]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	eba2 0901 	sub.w	r9, r2, r1
 8007880:	4599      	cmp	r9, r3
 8007882:	bfa8      	it	ge
 8007884:	4699      	movge	r9, r3
 8007886:	f1b9 0f00 	cmp.w	r9, #0
 800788a:	dc35      	bgt.n	80078f8 <_printf_float+0x380>
 800788c:	f04f 0800 	mov.w	r8, #0
 8007890:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007894:	f104 0a1a 	add.w	sl, r4, #26
 8007898:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800789c:	1a9b      	subs	r3, r3, r2
 800789e:	eba3 0309 	sub.w	r3, r3, r9
 80078a2:	4543      	cmp	r3, r8
 80078a4:	f77f af75 	ble.w	8007792 <_printf_float+0x21a>
 80078a8:	2301      	movs	r3, #1
 80078aa:	4652      	mov	r2, sl
 80078ac:	4631      	mov	r1, r6
 80078ae:	4628      	mov	r0, r5
 80078b0:	47b8      	blx	r7
 80078b2:	3001      	adds	r0, #1
 80078b4:	f43f aeae 	beq.w	8007614 <_printf_float+0x9c>
 80078b8:	f108 0801 	add.w	r8, r8, #1
 80078bc:	e7ec      	b.n	8007898 <_printf_float+0x320>
 80078be:	4613      	mov	r3, r2
 80078c0:	4631      	mov	r1, r6
 80078c2:	4642      	mov	r2, r8
 80078c4:	4628      	mov	r0, r5
 80078c6:	47b8      	blx	r7
 80078c8:	3001      	adds	r0, #1
 80078ca:	d1bf      	bne.n	800784c <_printf_float+0x2d4>
 80078cc:	e6a2      	b.n	8007614 <_printf_float+0x9c>
 80078ce:	2301      	movs	r3, #1
 80078d0:	4631      	mov	r1, r6
 80078d2:	4628      	mov	r0, r5
 80078d4:	9204      	str	r2, [sp, #16]
 80078d6:	47b8      	blx	r7
 80078d8:	3001      	adds	r0, #1
 80078da:	f43f ae9b 	beq.w	8007614 <_printf_float+0x9c>
 80078de:	9b05      	ldr	r3, [sp, #20]
 80078e0:	9a04      	ldr	r2, [sp, #16]
 80078e2:	3301      	adds	r3, #1
 80078e4:	9305      	str	r3, [sp, #20]
 80078e6:	e7b7      	b.n	8007858 <_printf_float+0x2e0>
 80078e8:	4653      	mov	r3, sl
 80078ea:	465a      	mov	r2, fp
 80078ec:	4631      	mov	r1, r6
 80078ee:	4628      	mov	r0, r5
 80078f0:	47b8      	blx	r7
 80078f2:	3001      	adds	r0, #1
 80078f4:	d1be      	bne.n	8007874 <_printf_float+0x2fc>
 80078f6:	e68d      	b.n	8007614 <_printf_float+0x9c>
 80078f8:	9a04      	ldr	r2, [sp, #16]
 80078fa:	464b      	mov	r3, r9
 80078fc:	4442      	add	r2, r8
 80078fe:	4631      	mov	r1, r6
 8007900:	4628      	mov	r0, r5
 8007902:	47b8      	blx	r7
 8007904:	3001      	adds	r0, #1
 8007906:	d1c1      	bne.n	800788c <_printf_float+0x314>
 8007908:	e684      	b.n	8007614 <_printf_float+0x9c>
 800790a:	9a08      	ldr	r2, [sp, #32]
 800790c:	2a01      	cmp	r2, #1
 800790e:	dc01      	bgt.n	8007914 <_printf_float+0x39c>
 8007910:	07db      	lsls	r3, r3, #31
 8007912:	d537      	bpl.n	8007984 <_printf_float+0x40c>
 8007914:	2301      	movs	r3, #1
 8007916:	4642      	mov	r2, r8
 8007918:	4631      	mov	r1, r6
 800791a:	4628      	mov	r0, r5
 800791c:	47b8      	blx	r7
 800791e:	3001      	adds	r0, #1
 8007920:	f43f ae78 	beq.w	8007614 <_printf_float+0x9c>
 8007924:	4653      	mov	r3, sl
 8007926:	465a      	mov	r2, fp
 8007928:	4631      	mov	r1, r6
 800792a:	4628      	mov	r0, r5
 800792c:	47b8      	blx	r7
 800792e:	3001      	adds	r0, #1
 8007930:	f43f ae70 	beq.w	8007614 <_printf_float+0x9c>
 8007934:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8007938:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800793c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007940:	d01b      	beq.n	800797a <_printf_float+0x402>
 8007942:	9b08      	ldr	r3, [sp, #32]
 8007944:	f108 0201 	add.w	r2, r8, #1
 8007948:	3b01      	subs	r3, #1
 800794a:	4631      	mov	r1, r6
 800794c:	4628      	mov	r0, r5
 800794e:	47b8      	blx	r7
 8007950:	3001      	adds	r0, #1
 8007952:	d10e      	bne.n	8007972 <_printf_float+0x3fa>
 8007954:	e65e      	b.n	8007614 <_printf_float+0x9c>
 8007956:	2301      	movs	r3, #1
 8007958:	464a      	mov	r2, r9
 800795a:	4631      	mov	r1, r6
 800795c:	4628      	mov	r0, r5
 800795e:	47b8      	blx	r7
 8007960:	3001      	adds	r0, #1
 8007962:	f43f ae57 	beq.w	8007614 <_printf_float+0x9c>
 8007966:	f108 0801 	add.w	r8, r8, #1
 800796a:	9b08      	ldr	r3, [sp, #32]
 800796c:	3b01      	subs	r3, #1
 800796e:	4543      	cmp	r3, r8
 8007970:	dcf1      	bgt.n	8007956 <_printf_float+0x3de>
 8007972:	9b04      	ldr	r3, [sp, #16]
 8007974:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007978:	e6db      	b.n	8007732 <_printf_float+0x1ba>
 800797a:	f04f 0800 	mov.w	r8, #0
 800797e:	f104 091a 	add.w	r9, r4, #26
 8007982:	e7f2      	b.n	800796a <_printf_float+0x3f2>
 8007984:	2301      	movs	r3, #1
 8007986:	4642      	mov	r2, r8
 8007988:	e7df      	b.n	800794a <_printf_float+0x3d2>
 800798a:	2301      	movs	r3, #1
 800798c:	464a      	mov	r2, r9
 800798e:	4631      	mov	r1, r6
 8007990:	4628      	mov	r0, r5
 8007992:	47b8      	blx	r7
 8007994:	3001      	adds	r0, #1
 8007996:	f43f ae3d 	beq.w	8007614 <_printf_float+0x9c>
 800799a:	f108 0801 	add.w	r8, r8, #1
 800799e:	68e3      	ldr	r3, [r4, #12]
 80079a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079a2:	1a5b      	subs	r3, r3, r1
 80079a4:	4543      	cmp	r3, r8
 80079a6:	dcf0      	bgt.n	800798a <_printf_float+0x412>
 80079a8:	e6f7      	b.n	800779a <_printf_float+0x222>
 80079aa:	f04f 0800 	mov.w	r8, #0
 80079ae:	f104 0919 	add.w	r9, r4, #25
 80079b2:	e7f4      	b.n	800799e <_printf_float+0x426>

080079b4 <_printf_common>:
 80079b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b8:	4616      	mov	r6, r2
 80079ba:	4699      	mov	r9, r3
 80079bc:	688a      	ldr	r2, [r1, #8]
 80079be:	690b      	ldr	r3, [r1, #16]
 80079c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079c4:	4293      	cmp	r3, r2
 80079c6:	bfb8      	it	lt
 80079c8:	4613      	movlt	r3, r2
 80079ca:	6033      	str	r3, [r6, #0]
 80079cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079d0:	4607      	mov	r7, r0
 80079d2:	460c      	mov	r4, r1
 80079d4:	b10a      	cbz	r2, 80079da <_printf_common+0x26>
 80079d6:	3301      	adds	r3, #1
 80079d8:	6033      	str	r3, [r6, #0]
 80079da:	6823      	ldr	r3, [r4, #0]
 80079dc:	0699      	lsls	r1, r3, #26
 80079de:	bf42      	ittt	mi
 80079e0:	6833      	ldrmi	r3, [r6, #0]
 80079e2:	3302      	addmi	r3, #2
 80079e4:	6033      	strmi	r3, [r6, #0]
 80079e6:	6825      	ldr	r5, [r4, #0]
 80079e8:	f015 0506 	ands.w	r5, r5, #6
 80079ec:	d106      	bne.n	80079fc <_printf_common+0x48>
 80079ee:	f104 0a19 	add.w	sl, r4, #25
 80079f2:	68e3      	ldr	r3, [r4, #12]
 80079f4:	6832      	ldr	r2, [r6, #0]
 80079f6:	1a9b      	subs	r3, r3, r2
 80079f8:	42ab      	cmp	r3, r5
 80079fa:	dc26      	bgt.n	8007a4a <_printf_common+0x96>
 80079fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007a00:	1e13      	subs	r3, r2, #0
 8007a02:	6822      	ldr	r2, [r4, #0]
 8007a04:	bf18      	it	ne
 8007a06:	2301      	movne	r3, #1
 8007a08:	0692      	lsls	r2, r2, #26
 8007a0a:	d42b      	bmi.n	8007a64 <_printf_common+0xb0>
 8007a0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a10:	4649      	mov	r1, r9
 8007a12:	4638      	mov	r0, r7
 8007a14:	47c0      	blx	r8
 8007a16:	3001      	adds	r0, #1
 8007a18:	d01e      	beq.n	8007a58 <_printf_common+0xa4>
 8007a1a:	6823      	ldr	r3, [r4, #0]
 8007a1c:	68e5      	ldr	r5, [r4, #12]
 8007a1e:	6832      	ldr	r2, [r6, #0]
 8007a20:	f003 0306 	and.w	r3, r3, #6
 8007a24:	2b04      	cmp	r3, #4
 8007a26:	bf08      	it	eq
 8007a28:	1aad      	subeq	r5, r5, r2
 8007a2a:	68a3      	ldr	r3, [r4, #8]
 8007a2c:	6922      	ldr	r2, [r4, #16]
 8007a2e:	bf0c      	ite	eq
 8007a30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a34:	2500      	movne	r5, #0
 8007a36:	4293      	cmp	r3, r2
 8007a38:	bfc4      	itt	gt
 8007a3a:	1a9b      	subgt	r3, r3, r2
 8007a3c:	18ed      	addgt	r5, r5, r3
 8007a3e:	2600      	movs	r6, #0
 8007a40:	341a      	adds	r4, #26
 8007a42:	42b5      	cmp	r5, r6
 8007a44:	d11a      	bne.n	8007a7c <_printf_common+0xc8>
 8007a46:	2000      	movs	r0, #0
 8007a48:	e008      	b.n	8007a5c <_printf_common+0xa8>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	4652      	mov	r2, sl
 8007a4e:	4649      	mov	r1, r9
 8007a50:	4638      	mov	r0, r7
 8007a52:	47c0      	blx	r8
 8007a54:	3001      	adds	r0, #1
 8007a56:	d103      	bne.n	8007a60 <_printf_common+0xac>
 8007a58:	f04f 30ff 	mov.w	r0, #4294967295
 8007a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a60:	3501      	adds	r5, #1
 8007a62:	e7c6      	b.n	80079f2 <_printf_common+0x3e>
 8007a64:	18e1      	adds	r1, r4, r3
 8007a66:	1c5a      	adds	r2, r3, #1
 8007a68:	2030      	movs	r0, #48	; 0x30
 8007a6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a6e:	4422      	add	r2, r4
 8007a70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a78:	3302      	adds	r3, #2
 8007a7a:	e7c7      	b.n	8007a0c <_printf_common+0x58>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	4622      	mov	r2, r4
 8007a80:	4649      	mov	r1, r9
 8007a82:	4638      	mov	r0, r7
 8007a84:	47c0      	blx	r8
 8007a86:	3001      	adds	r0, #1
 8007a88:	d0e6      	beq.n	8007a58 <_printf_common+0xa4>
 8007a8a:	3601      	adds	r6, #1
 8007a8c:	e7d9      	b.n	8007a42 <_printf_common+0x8e>
	...

08007a90 <_printf_i>:
 8007a90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a94:	460c      	mov	r4, r1
 8007a96:	4691      	mov	r9, r2
 8007a98:	7e27      	ldrb	r7, [r4, #24]
 8007a9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a9c:	2f78      	cmp	r7, #120	; 0x78
 8007a9e:	4680      	mov	r8, r0
 8007aa0:	469a      	mov	sl, r3
 8007aa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007aa6:	d807      	bhi.n	8007ab8 <_printf_i+0x28>
 8007aa8:	2f62      	cmp	r7, #98	; 0x62
 8007aaa:	d80a      	bhi.n	8007ac2 <_printf_i+0x32>
 8007aac:	2f00      	cmp	r7, #0
 8007aae:	f000 80d8 	beq.w	8007c62 <_printf_i+0x1d2>
 8007ab2:	2f58      	cmp	r7, #88	; 0x58
 8007ab4:	f000 80a3 	beq.w	8007bfe <_printf_i+0x16e>
 8007ab8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007abc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007ac0:	e03a      	b.n	8007b38 <_printf_i+0xa8>
 8007ac2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ac6:	2b15      	cmp	r3, #21
 8007ac8:	d8f6      	bhi.n	8007ab8 <_printf_i+0x28>
 8007aca:	a001      	add	r0, pc, #4	; (adr r0, 8007ad0 <_printf_i+0x40>)
 8007acc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007ad0:	08007b29 	.word	0x08007b29
 8007ad4:	08007b3d 	.word	0x08007b3d
 8007ad8:	08007ab9 	.word	0x08007ab9
 8007adc:	08007ab9 	.word	0x08007ab9
 8007ae0:	08007ab9 	.word	0x08007ab9
 8007ae4:	08007ab9 	.word	0x08007ab9
 8007ae8:	08007b3d 	.word	0x08007b3d
 8007aec:	08007ab9 	.word	0x08007ab9
 8007af0:	08007ab9 	.word	0x08007ab9
 8007af4:	08007ab9 	.word	0x08007ab9
 8007af8:	08007ab9 	.word	0x08007ab9
 8007afc:	08007c49 	.word	0x08007c49
 8007b00:	08007b6d 	.word	0x08007b6d
 8007b04:	08007c2b 	.word	0x08007c2b
 8007b08:	08007ab9 	.word	0x08007ab9
 8007b0c:	08007ab9 	.word	0x08007ab9
 8007b10:	08007c6b 	.word	0x08007c6b
 8007b14:	08007ab9 	.word	0x08007ab9
 8007b18:	08007b6d 	.word	0x08007b6d
 8007b1c:	08007ab9 	.word	0x08007ab9
 8007b20:	08007ab9 	.word	0x08007ab9
 8007b24:	08007c33 	.word	0x08007c33
 8007b28:	680b      	ldr	r3, [r1, #0]
 8007b2a:	1d1a      	adds	r2, r3, #4
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	600a      	str	r2, [r1, #0]
 8007b30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007b34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e0a3      	b.n	8007c84 <_printf_i+0x1f4>
 8007b3c:	6825      	ldr	r5, [r4, #0]
 8007b3e:	6808      	ldr	r0, [r1, #0]
 8007b40:	062e      	lsls	r6, r5, #24
 8007b42:	f100 0304 	add.w	r3, r0, #4
 8007b46:	d50a      	bpl.n	8007b5e <_printf_i+0xce>
 8007b48:	6805      	ldr	r5, [r0, #0]
 8007b4a:	600b      	str	r3, [r1, #0]
 8007b4c:	2d00      	cmp	r5, #0
 8007b4e:	da03      	bge.n	8007b58 <_printf_i+0xc8>
 8007b50:	232d      	movs	r3, #45	; 0x2d
 8007b52:	426d      	negs	r5, r5
 8007b54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b58:	485e      	ldr	r0, [pc, #376]	; (8007cd4 <_printf_i+0x244>)
 8007b5a:	230a      	movs	r3, #10
 8007b5c:	e019      	b.n	8007b92 <_printf_i+0x102>
 8007b5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007b62:	6805      	ldr	r5, [r0, #0]
 8007b64:	600b      	str	r3, [r1, #0]
 8007b66:	bf18      	it	ne
 8007b68:	b22d      	sxthne	r5, r5
 8007b6a:	e7ef      	b.n	8007b4c <_printf_i+0xbc>
 8007b6c:	680b      	ldr	r3, [r1, #0]
 8007b6e:	6825      	ldr	r5, [r4, #0]
 8007b70:	1d18      	adds	r0, r3, #4
 8007b72:	6008      	str	r0, [r1, #0]
 8007b74:	0628      	lsls	r0, r5, #24
 8007b76:	d501      	bpl.n	8007b7c <_printf_i+0xec>
 8007b78:	681d      	ldr	r5, [r3, #0]
 8007b7a:	e002      	b.n	8007b82 <_printf_i+0xf2>
 8007b7c:	0669      	lsls	r1, r5, #25
 8007b7e:	d5fb      	bpl.n	8007b78 <_printf_i+0xe8>
 8007b80:	881d      	ldrh	r5, [r3, #0]
 8007b82:	4854      	ldr	r0, [pc, #336]	; (8007cd4 <_printf_i+0x244>)
 8007b84:	2f6f      	cmp	r7, #111	; 0x6f
 8007b86:	bf0c      	ite	eq
 8007b88:	2308      	moveq	r3, #8
 8007b8a:	230a      	movne	r3, #10
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b92:	6866      	ldr	r6, [r4, #4]
 8007b94:	60a6      	str	r6, [r4, #8]
 8007b96:	2e00      	cmp	r6, #0
 8007b98:	bfa2      	ittt	ge
 8007b9a:	6821      	ldrge	r1, [r4, #0]
 8007b9c:	f021 0104 	bicge.w	r1, r1, #4
 8007ba0:	6021      	strge	r1, [r4, #0]
 8007ba2:	b90d      	cbnz	r5, 8007ba8 <_printf_i+0x118>
 8007ba4:	2e00      	cmp	r6, #0
 8007ba6:	d04d      	beq.n	8007c44 <_printf_i+0x1b4>
 8007ba8:	4616      	mov	r6, r2
 8007baa:	fbb5 f1f3 	udiv	r1, r5, r3
 8007bae:	fb03 5711 	mls	r7, r3, r1, r5
 8007bb2:	5dc7      	ldrb	r7, [r0, r7]
 8007bb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007bb8:	462f      	mov	r7, r5
 8007bba:	42bb      	cmp	r3, r7
 8007bbc:	460d      	mov	r5, r1
 8007bbe:	d9f4      	bls.n	8007baa <_printf_i+0x11a>
 8007bc0:	2b08      	cmp	r3, #8
 8007bc2:	d10b      	bne.n	8007bdc <_printf_i+0x14c>
 8007bc4:	6823      	ldr	r3, [r4, #0]
 8007bc6:	07df      	lsls	r7, r3, #31
 8007bc8:	d508      	bpl.n	8007bdc <_printf_i+0x14c>
 8007bca:	6923      	ldr	r3, [r4, #16]
 8007bcc:	6861      	ldr	r1, [r4, #4]
 8007bce:	4299      	cmp	r1, r3
 8007bd0:	bfde      	ittt	le
 8007bd2:	2330      	movle	r3, #48	; 0x30
 8007bd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007bd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007bdc:	1b92      	subs	r2, r2, r6
 8007bde:	6122      	str	r2, [r4, #16]
 8007be0:	f8cd a000 	str.w	sl, [sp]
 8007be4:	464b      	mov	r3, r9
 8007be6:	aa03      	add	r2, sp, #12
 8007be8:	4621      	mov	r1, r4
 8007bea:	4640      	mov	r0, r8
 8007bec:	f7ff fee2 	bl	80079b4 <_printf_common>
 8007bf0:	3001      	adds	r0, #1
 8007bf2:	d14c      	bne.n	8007c8e <_printf_i+0x1fe>
 8007bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf8:	b004      	add	sp, #16
 8007bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bfe:	4835      	ldr	r0, [pc, #212]	; (8007cd4 <_printf_i+0x244>)
 8007c00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	680e      	ldr	r6, [r1, #0]
 8007c08:	061f      	lsls	r7, r3, #24
 8007c0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8007c0e:	600e      	str	r6, [r1, #0]
 8007c10:	d514      	bpl.n	8007c3c <_printf_i+0x1ac>
 8007c12:	07d9      	lsls	r1, r3, #31
 8007c14:	bf44      	itt	mi
 8007c16:	f043 0320 	orrmi.w	r3, r3, #32
 8007c1a:	6023      	strmi	r3, [r4, #0]
 8007c1c:	b91d      	cbnz	r5, 8007c26 <_printf_i+0x196>
 8007c1e:	6823      	ldr	r3, [r4, #0]
 8007c20:	f023 0320 	bic.w	r3, r3, #32
 8007c24:	6023      	str	r3, [r4, #0]
 8007c26:	2310      	movs	r3, #16
 8007c28:	e7b0      	b.n	8007b8c <_printf_i+0xfc>
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	f043 0320 	orr.w	r3, r3, #32
 8007c30:	6023      	str	r3, [r4, #0]
 8007c32:	2378      	movs	r3, #120	; 0x78
 8007c34:	4828      	ldr	r0, [pc, #160]	; (8007cd8 <_printf_i+0x248>)
 8007c36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c3a:	e7e3      	b.n	8007c04 <_printf_i+0x174>
 8007c3c:	065e      	lsls	r6, r3, #25
 8007c3e:	bf48      	it	mi
 8007c40:	b2ad      	uxthmi	r5, r5
 8007c42:	e7e6      	b.n	8007c12 <_printf_i+0x182>
 8007c44:	4616      	mov	r6, r2
 8007c46:	e7bb      	b.n	8007bc0 <_printf_i+0x130>
 8007c48:	680b      	ldr	r3, [r1, #0]
 8007c4a:	6826      	ldr	r6, [r4, #0]
 8007c4c:	6960      	ldr	r0, [r4, #20]
 8007c4e:	1d1d      	adds	r5, r3, #4
 8007c50:	600d      	str	r5, [r1, #0]
 8007c52:	0635      	lsls	r5, r6, #24
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	d501      	bpl.n	8007c5c <_printf_i+0x1cc>
 8007c58:	6018      	str	r0, [r3, #0]
 8007c5a:	e002      	b.n	8007c62 <_printf_i+0x1d2>
 8007c5c:	0671      	lsls	r1, r6, #25
 8007c5e:	d5fb      	bpl.n	8007c58 <_printf_i+0x1c8>
 8007c60:	8018      	strh	r0, [r3, #0]
 8007c62:	2300      	movs	r3, #0
 8007c64:	6123      	str	r3, [r4, #16]
 8007c66:	4616      	mov	r6, r2
 8007c68:	e7ba      	b.n	8007be0 <_printf_i+0x150>
 8007c6a:	680b      	ldr	r3, [r1, #0]
 8007c6c:	1d1a      	adds	r2, r3, #4
 8007c6e:	600a      	str	r2, [r1, #0]
 8007c70:	681e      	ldr	r6, [r3, #0]
 8007c72:	6862      	ldr	r2, [r4, #4]
 8007c74:	2100      	movs	r1, #0
 8007c76:	4630      	mov	r0, r6
 8007c78:	f7f8 faea 	bl	8000250 <memchr>
 8007c7c:	b108      	cbz	r0, 8007c82 <_printf_i+0x1f2>
 8007c7e:	1b80      	subs	r0, r0, r6
 8007c80:	6060      	str	r0, [r4, #4]
 8007c82:	6863      	ldr	r3, [r4, #4]
 8007c84:	6123      	str	r3, [r4, #16]
 8007c86:	2300      	movs	r3, #0
 8007c88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c8c:	e7a8      	b.n	8007be0 <_printf_i+0x150>
 8007c8e:	6923      	ldr	r3, [r4, #16]
 8007c90:	4632      	mov	r2, r6
 8007c92:	4649      	mov	r1, r9
 8007c94:	4640      	mov	r0, r8
 8007c96:	47d0      	blx	sl
 8007c98:	3001      	adds	r0, #1
 8007c9a:	d0ab      	beq.n	8007bf4 <_printf_i+0x164>
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	079b      	lsls	r3, r3, #30
 8007ca0:	d413      	bmi.n	8007cca <_printf_i+0x23a>
 8007ca2:	68e0      	ldr	r0, [r4, #12]
 8007ca4:	9b03      	ldr	r3, [sp, #12]
 8007ca6:	4298      	cmp	r0, r3
 8007ca8:	bfb8      	it	lt
 8007caa:	4618      	movlt	r0, r3
 8007cac:	e7a4      	b.n	8007bf8 <_printf_i+0x168>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	4632      	mov	r2, r6
 8007cb2:	4649      	mov	r1, r9
 8007cb4:	4640      	mov	r0, r8
 8007cb6:	47d0      	blx	sl
 8007cb8:	3001      	adds	r0, #1
 8007cba:	d09b      	beq.n	8007bf4 <_printf_i+0x164>
 8007cbc:	3501      	adds	r5, #1
 8007cbe:	68e3      	ldr	r3, [r4, #12]
 8007cc0:	9903      	ldr	r1, [sp, #12]
 8007cc2:	1a5b      	subs	r3, r3, r1
 8007cc4:	42ab      	cmp	r3, r5
 8007cc6:	dcf2      	bgt.n	8007cae <_printf_i+0x21e>
 8007cc8:	e7eb      	b.n	8007ca2 <_printf_i+0x212>
 8007cca:	2500      	movs	r5, #0
 8007ccc:	f104 0619 	add.w	r6, r4, #25
 8007cd0:	e7f5      	b.n	8007cbe <_printf_i+0x22e>
 8007cd2:	bf00      	nop
 8007cd4:	0800bfea 	.word	0x0800bfea
 8007cd8:	0800bffb 	.word	0x0800bffb

08007cdc <_scanf_float>:
 8007cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce0:	b087      	sub	sp, #28
 8007ce2:	4617      	mov	r7, r2
 8007ce4:	9303      	str	r3, [sp, #12]
 8007ce6:	688b      	ldr	r3, [r1, #8]
 8007ce8:	1e5a      	subs	r2, r3, #1
 8007cea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007cee:	bf83      	ittte	hi
 8007cf0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007cf4:	195b      	addhi	r3, r3, r5
 8007cf6:	9302      	strhi	r3, [sp, #8]
 8007cf8:	2300      	movls	r3, #0
 8007cfa:	bf86      	itte	hi
 8007cfc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007d00:	608b      	strhi	r3, [r1, #8]
 8007d02:	9302      	strls	r3, [sp, #8]
 8007d04:	680b      	ldr	r3, [r1, #0]
 8007d06:	468b      	mov	fp, r1
 8007d08:	2500      	movs	r5, #0
 8007d0a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007d0e:	f84b 3b1c 	str.w	r3, [fp], #28
 8007d12:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007d16:	4680      	mov	r8, r0
 8007d18:	460c      	mov	r4, r1
 8007d1a:	465e      	mov	r6, fp
 8007d1c:	46aa      	mov	sl, r5
 8007d1e:	46a9      	mov	r9, r5
 8007d20:	9501      	str	r5, [sp, #4]
 8007d22:	68a2      	ldr	r2, [r4, #8]
 8007d24:	b152      	cbz	r2, 8007d3c <_scanf_float+0x60>
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	2b4e      	cmp	r3, #78	; 0x4e
 8007d2c:	d864      	bhi.n	8007df8 <_scanf_float+0x11c>
 8007d2e:	2b40      	cmp	r3, #64	; 0x40
 8007d30:	d83c      	bhi.n	8007dac <_scanf_float+0xd0>
 8007d32:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007d36:	b2c8      	uxtb	r0, r1
 8007d38:	280e      	cmp	r0, #14
 8007d3a:	d93a      	bls.n	8007db2 <_scanf_float+0xd6>
 8007d3c:	f1b9 0f00 	cmp.w	r9, #0
 8007d40:	d003      	beq.n	8007d4a <_scanf_float+0x6e>
 8007d42:	6823      	ldr	r3, [r4, #0]
 8007d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d48:	6023      	str	r3, [r4, #0]
 8007d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d4e:	f1ba 0f01 	cmp.w	sl, #1
 8007d52:	f200 8113 	bhi.w	8007f7c <_scanf_float+0x2a0>
 8007d56:	455e      	cmp	r6, fp
 8007d58:	f200 8105 	bhi.w	8007f66 <_scanf_float+0x28a>
 8007d5c:	2501      	movs	r5, #1
 8007d5e:	4628      	mov	r0, r5
 8007d60:	b007      	add	sp, #28
 8007d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d66:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007d6a:	2a0d      	cmp	r2, #13
 8007d6c:	d8e6      	bhi.n	8007d3c <_scanf_float+0x60>
 8007d6e:	a101      	add	r1, pc, #4	; (adr r1, 8007d74 <_scanf_float+0x98>)
 8007d70:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007d74:	08007eb3 	.word	0x08007eb3
 8007d78:	08007d3d 	.word	0x08007d3d
 8007d7c:	08007d3d 	.word	0x08007d3d
 8007d80:	08007d3d 	.word	0x08007d3d
 8007d84:	08007f13 	.word	0x08007f13
 8007d88:	08007eeb 	.word	0x08007eeb
 8007d8c:	08007d3d 	.word	0x08007d3d
 8007d90:	08007d3d 	.word	0x08007d3d
 8007d94:	08007ec1 	.word	0x08007ec1
 8007d98:	08007d3d 	.word	0x08007d3d
 8007d9c:	08007d3d 	.word	0x08007d3d
 8007da0:	08007d3d 	.word	0x08007d3d
 8007da4:	08007d3d 	.word	0x08007d3d
 8007da8:	08007e79 	.word	0x08007e79
 8007dac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007db0:	e7db      	b.n	8007d6a <_scanf_float+0x8e>
 8007db2:	290e      	cmp	r1, #14
 8007db4:	d8c2      	bhi.n	8007d3c <_scanf_float+0x60>
 8007db6:	a001      	add	r0, pc, #4	; (adr r0, 8007dbc <_scanf_float+0xe0>)
 8007db8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007dbc:	08007e6b 	.word	0x08007e6b
 8007dc0:	08007d3d 	.word	0x08007d3d
 8007dc4:	08007e6b 	.word	0x08007e6b
 8007dc8:	08007eff 	.word	0x08007eff
 8007dcc:	08007d3d 	.word	0x08007d3d
 8007dd0:	08007e19 	.word	0x08007e19
 8007dd4:	08007e55 	.word	0x08007e55
 8007dd8:	08007e55 	.word	0x08007e55
 8007ddc:	08007e55 	.word	0x08007e55
 8007de0:	08007e55 	.word	0x08007e55
 8007de4:	08007e55 	.word	0x08007e55
 8007de8:	08007e55 	.word	0x08007e55
 8007dec:	08007e55 	.word	0x08007e55
 8007df0:	08007e55 	.word	0x08007e55
 8007df4:	08007e55 	.word	0x08007e55
 8007df8:	2b6e      	cmp	r3, #110	; 0x6e
 8007dfa:	d809      	bhi.n	8007e10 <_scanf_float+0x134>
 8007dfc:	2b60      	cmp	r3, #96	; 0x60
 8007dfe:	d8b2      	bhi.n	8007d66 <_scanf_float+0x8a>
 8007e00:	2b54      	cmp	r3, #84	; 0x54
 8007e02:	d077      	beq.n	8007ef4 <_scanf_float+0x218>
 8007e04:	2b59      	cmp	r3, #89	; 0x59
 8007e06:	d199      	bne.n	8007d3c <_scanf_float+0x60>
 8007e08:	2d07      	cmp	r5, #7
 8007e0a:	d197      	bne.n	8007d3c <_scanf_float+0x60>
 8007e0c:	2508      	movs	r5, #8
 8007e0e:	e029      	b.n	8007e64 <_scanf_float+0x188>
 8007e10:	2b74      	cmp	r3, #116	; 0x74
 8007e12:	d06f      	beq.n	8007ef4 <_scanf_float+0x218>
 8007e14:	2b79      	cmp	r3, #121	; 0x79
 8007e16:	e7f6      	b.n	8007e06 <_scanf_float+0x12a>
 8007e18:	6821      	ldr	r1, [r4, #0]
 8007e1a:	05c8      	lsls	r0, r1, #23
 8007e1c:	d51a      	bpl.n	8007e54 <_scanf_float+0x178>
 8007e1e:	9b02      	ldr	r3, [sp, #8]
 8007e20:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007e24:	6021      	str	r1, [r4, #0]
 8007e26:	f109 0901 	add.w	r9, r9, #1
 8007e2a:	b11b      	cbz	r3, 8007e34 <_scanf_float+0x158>
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	3201      	adds	r2, #1
 8007e30:	9302      	str	r3, [sp, #8]
 8007e32:	60a2      	str	r2, [r4, #8]
 8007e34:	68a3      	ldr	r3, [r4, #8]
 8007e36:	3b01      	subs	r3, #1
 8007e38:	60a3      	str	r3, [r4, #8]
 8007e3a:	6923      	ldr	r3, [r4, #16]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	6123      	str	r3, [r4, #16]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	3b01      	subs	r3, #1
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	607b      	str	r3, [r7, #4]
 8007e48:	f340 8084 	ble.w	8007f54 <_scanf_float+0x278>
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	3301      	adds	r3, #1
 8007e50:	603b      	str	r3, [r7, #0]
 8007e52:	e766      	b.n	8007d22 <_scanf_float+0x46>
 8007e54:	eb1a 0f05 	cmn.w	sl, r5
 8007e58:	f47f af70 	bne.w	8007d3c <_scanf_float+0x60>
 8007e5c:	6822      	ldr	r2, [r4, #0]
 8007e5e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007e62:	6022      	str	r2, [r4, #0]
 8007e64:	f806 3b01 	strb.w	r3, [r6], #1
 8007e68:	e7e4      	b.n	8007e34 <_scanf_float+0x158>
 8007e6a:	6822      	ldr	r2, [r4, #0]
 8007e6c:	0610      	lsls	r0, r2, #24
 8007e6e:	f57f af65 	bpl.w	8007d3c <_scanf_float+0x60>
 8007e72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e76:	e7f4      	b.n	8007e62 <_scanf_float+0x186>
 8007e78:	f1ba 0f00 	cmp.w	sl, #0
 8007e7c:	d10e      	bne.n	8007e9c <_scanf_float+0x1c0>
 8007e7e:	f1b9 0f00 	cmp.w	r9, #0
 8007e82:	d10e      	bne.n	8007ea2 <_scanf_float+0x1c6>
 8007e84:	6822      	ldr	r2, [r4, #0]
 8007e86:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007e8a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007e8e:	d108      	bne.n	8007ea2 <_scanf_float+0x1c6>
 8007e90:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e94:	6022      	str	r2, [r4, #0]
 8007e96:	f04f 0a01 	mov.w	sl, #1
 8007e9a:	e7e3      	b.n	8007e64 <_scanf_float+0x188>
 8007e9c:	f1ba 0f02 	cmp.w	sl, #2
 8007ea0:	d055      	beq.n	8007f4e <_scanf_float+0x272>
 8007ea2:	2d01      	cmp	r5, #1
 8007ea4:	d002      	beq.n	8007eac <_scanf_float+0x1d0>
 8007ea6:	2d04      	cmp	r5, #4
 8007ea8:	f47f af48 	bne.w	8007d3c <_scanf_float+0x60>
 8007eac:	3501      	adds	r5, #1
 8007eae:	b2ed      	uxtb	r5, r5
 8007eb0:	e7d8      	b.n	8007e64 <_scanf_float+0x188>
 8007eb2:	f1ba 0f01 	cmp.w	sl, #1
 8007eb6:	f47f af41 	bne.w	8007d3c <_scanf_float+0x60>
 8007eba:	f04f 0a02 	mov.w	sl, #2
 8007ebe:	e7d1      	b.n	8007e64 <_scanf_float+0x188>
 8007ec0:	b97d      	cbnz	r5, 8007ee2 <_scanf_float+0x206>
 8007ec2:	f1b9 0f00 	cmp.w	r9, #0
 8007ec6:	f47f af3c 	bne.w	8007d42 <_scanf_float+0x66>
 8007eca:	6822      	ldr	r2, [r4, #0]
 8007ecc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007ed0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007ed4:	f47f af39 	bne.w	8007d4a <_scanf_float+0x6e>
 8007ed8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007edc:	6022      	str	r2, [r4, #0]
 8007ede:	2501      	movs	r5, #1
 8007ee0:	e7c0      	b.n	8007e64 <_scanf_float+0x188>
 8007ee2:	2d03      	cmp	r5, #3
 8007ee4:	d0e2      	beq.n	8007eac <_scanf_float+0x1d0>
 8007ee6:	2d05      	cmp	r5, #5
 8007ee8:	e7de      	b.n	8007ea8 <_scanf_float+0x1cc>
 8007eea:	2d02      	cmp	r5, #2
 8007eec:	f47f af26 	bne.w	8007d3c <_scanf_float+0x60>
 8007ef0:	2503      	movs	r5, #3
 8007ef2:	e7b7      	b.n	8007e64 <_scanf_float+0x188>
 8007ef4:	2d06      	cmp	r5, #6
 8007ef6:	f47f af21 	bne.w	8007d3c <_scanf_float+0x60>
 8007efa:	2507      	movs	r5, #7
 8007efc:	e7b2      	b.n	8007e64 <_scanf_float+0x188>
 8007efe:	6822      	ldr	r2, [r4, #0]
 8007f00:	0591      	lsls	r1, r2, #22
 8007f02:	f57f af1b 	bpl.w	8007d3c <_scanf_float+0x60>
 8007f06:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007f0a:	6022      	str	r2, [r4, #0]
 8007f0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f10:	e7a8      	b.n	8007e64 <_scanf_float+0x188>
 8007f12:	6822      	ldr	r2, [r4, #0]
 8007f14:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007f18:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007f1c:	d006      	beq.n	8007f2c <_scanf_float+0x250>
 8007f1e:	0550      	lsls	r0, r2, #21
 8007f20:	f57f af0c 	bpl.w	8007d3c <_scanf_float+0x60>
 8007f24:	f1b9 0f00 	cmp.w	r9, #0
 8007f28:	f43f af0f 	beq.w	8007d4a <_scanf_float+0x6e>
 8007f2c:	0591      	lsls	r1, r2, #22
 8007f2e:	bf58      	it	pl
 8007f30:	9901      	ldrpl	r1, [sp, #4]
 8007f32:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007f36:	bf58      	it	pl
 8007f38:	eba9 0101 	subpl.w	r1, r9, r1
 8007f3c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007f40:	bf58      	it	pl
 8007f42:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007f46:	6022      	str	r2, [r4, #0]
 8007f48:	f04f 0900 	mov.w	r9, #0
 8007f4c:	e78a      	b.n	8007e64 <_scanf_float+0x188>
 8007f4e:	f04f 0a03 	mov.w	sl, #3
 8007f52:	e787      	b.n	8007e64 <_scanf_float+0x188>
 8007f54:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007f58:	4639      	mov	r1, r7
 8007f5a:	4640      	mov	r0, r8
 8007f5c:	4798      	blx	r3
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	f43f aedf 	beq.w	8007d22 <_scanf_float+0x46>
 8007f64:	e6ea      	b.n	8007d3c <_scanf_float+0x60>
 8007f66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f6e:	463a      	mov	r2, r7
 8007f70:	4640      	mov	r0, r8
 8007f72:	4798      	blx	r3
 8007f74:	6923      	ldr	r3, [r4, #16]
 8007f76:	3b01      	subs	r3, #1
 8007f78:	6123      	str	r3, [r4, #16]
 8007f7a:	e6ec      	b.n	8007d56 <_scanf_float+0x7a>
 8007f7c:	1e6b      	subs	r3, r5, #1
 8007f7e:	2b06      	cmp	r3, #6
 8007f80:	d825      	bhi.n	8007fce <_scanf_float+0x2f2>
 8007f82:	2d02      	cmp	r5, #2
 8007f84:	d836      	bhi.n	8007ff4 <_scanf_float+0x318>
 8007f86:	455e      	cmp	r6, fp
 8007f88:	f67f aee8 	bls.w	8007d5c <_scanf_float+0x80>
 8007f8c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f90:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f94:	463a      	mov	r2, r7
 8007f96:	4640      	mov	r0, r8
 8007f98:	4798      	blx	r3
 8007f9a:	6923      	ldr	r3, [r4, #16]
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	6123      	str	r3, [r4, #16]
 8007fa0:	e7f1      	b.n	8007f86 <_scanf_float+0x2aa>
 8007fa2:	9802      	ldr	r0, [sp, #8]
 8007fa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fa8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007fac:	9002      	str	r0, [sp, #8]
 8007fae:	463a      	mov	r2, r7
 8007fb0:	4640      	mov	r0, r8
 8007fb2:	4798      	blx	r3
 8007fb4:	6923      	ldr	r3, [r4, #16]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	6123      	str	r3, [r4, #16]
 8007fba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fbe:	fa5f fa8a 	uxtb.w	sl, sl
 8007fc2:	f1ba 0f02 	cmp.w	sl, #2
 8007fc6:	d1ec      	bne.n	8007fa2 <_scanf_float+0x2c6>
 8007fc8:	3d03      	subs	r5, #3
 8007fca:	b2ed      	uxtb	r5, r5
 8007fcc:	1b76      	subs	r6, r6, r5
 8007fce:	6823      	ldr	r3, [r4, #0]
 8007fd0:	05da      	lsls	r2, r3, #23
 8007fd2:	d52f      	bpl.n	8008034 <_scanf_float+0x358>
 8007fd4:	055b      	lsls	r3, r3, #21
 8007fd6:	d510      	bpl.n	8007ffa <_scanf_float+0x31e>
 8007fd8:	455e      	cmp	r6, fp
 8007fda:	f67f aebf 	bls.w	8007d5c <_scanf_float+0x80>
 8007fde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fe2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007fe6:	463a      	mov	r2, r7
 8007fe8:	4640      	mov	r0, r8
 8007fea:	4798      	blx	r3
 8007fec:	6923      	ldr	r3, [r4, #16]
 8007fee:	3b01      	subs	r3, #1
 8007ff0:	6123      	str	r3, [r4, #16]
 8007ff2:	e7f1      	b.n	8007fd8 <_scanf_float+0x2fc>
 8007ff4:	46aa      	mov	sl, r5
 8007ff6:	9602      	str	r6, [sp, #8]
 8007ff8:	e7df      	b.n	8007fba <_scanf_float+0x2de>
 8007ffa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007ffe:	6923      	ldr	r3, [r4, #16]
 8008000:	2965      	cmp	r1, #101	; 0x65
 8008002:	f103 33ff 	add.w	r3, r3, #4294967295
 8008006:	f106 35ff 	add.w	r5, r6, #4294967295
 800800a:	6123      	str	r3, [r4, #16]
 800800c:	d00c      	beq.n	8008028 <_scanf_float+0x34c>
 800800e:	2945      	cmp	r1, #69	; 0x45
 8008010:	d00a      	beq.n	8008028 <_scanf_float+0x34c>
 8008012:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008016:	463a      	mov	r2, r7
 8008018:	4640      	mov	r0, r8
 800801a:	4798      	blx	r3
 800801c:	6923      	ldr	r3, [r4, #16]
 800801e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008022:	3b01      	subs	r3, #1
 8008024:	1eb5      	subs	r5, r6, #2
 8008026:	6123      	str	r3, [r4, #16]
 8008028:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800802c:	463a      	mov	r2, r7
 800802e:	4640      	mov	r0, r8
 8008030:	4798      	blx	r3
 8008032:	462e      	mov	r6, r5
 8008034:	6825      	ldr	r5, [r4, #0]
 8008036:	f015 0510 	ands.w	r5, r5, #16
 800803a:	d14d      	bne.n	80080d8 <_scanf_float+0x3fc>
 800803c:	7035      	strb	r5, [r6, #0]
 800803e:	6823      	ldr	r3, [r4, #0]
 8008040:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008044:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008048:	d11a      	bne.n	8008080 <_scanf_float+0x3a4>
 800804a:	9b01      	ldr	r3, [sp, #4]
 800804c:	454b      	cmp	r3, r9
 800804e:	eba3 0209 	sub.w	r2, r3, r9
 8008052:	d122      	bne.n	800809a <_scanf_float+0x3be>
 8008054:	2200      	movs	r2, #0
 8008056:	4659      	mov	r1, fp
 8008058:	4640      	mov	r0, r8
 800805a:	f000 feff 	bl	8008e5c <_strtod_r>
 800805e:	9b03      	ldr	r3, [sp, #12]
 8008060:	6821      	ldr	r1, [r4, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f011 0f02 	tst.w	r1, #2
 8008068:	f103 0204 	add.w	r2, r3, #4
 800806c:	d020      	beq.n	80080b0 <_scanf_float+0x3d4>
 800806e:	9903      	ldr	r1, [sp, #12]
 8008070:	600a      	str	r2, [r1, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	ed83 0b00 	vstr	d0, [r3]
 8008078:	68e3      	ldr	r3, [r4, #12]
 800807a:	3301      	adds	r3, #1
 800807c:	60e3      	str	r3, [r4, #12]
 800807e:	e66e      	b.n	8007d5e <_scanf_float+0x82>
 8008080:	9b04      	ldr	r3, [sp, #16]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d0e6      	beq.n	8008054 <_scanf_float+0x378>
 8008086:	9905      	ldr	r1, [sp, #20]
 8008088:	230a      	movs	r3, #10
 800808a:	462a      	mov	r2, r5
 800808c:	3101      	adds	r1, #1
 800808e:	4640      	mov	r0, r8
 8008090:	f000 ff6e 	bl	8008f70 <_strtol_r>
 8008094:	9b04      	ldr	r3, [sp, #16]
 8008096:	9e05      	ldr	r6, [sp, #20]
 8008098:	1ac2      	subs	r2, r0, r3
 800809a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800809e:	429e      	cmp	r6, r3
 80080a0:	bf28      	it	cs
 80080a2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80080a6:	490d      	ldr	r1, [pc, #52]	; (80080dc <_scanf_float+0x400>)
 80080a8:	4630      	mov	r0, r6
 80080aa:	f000 f8c5 	bl	8008238 <siprintf>
 80080ae:	e7d1      	b.n	8008054 <_scanf_float+0x378>
 80080b0:	f011 0f04 	tst.w	r1, #4
 80080b4:	9903      	ldr	r1, [sp, #12]
 80080b6:	600a      	str	r2, [r1, #0]
 80080b8:	d1db      	bne.n	8008072 <_scanf_float+0x396>
 80080ba:	eeb4 0b40 	vcmp.f64	d0, d0
 80080be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c2:	681e      	ldr	r6, [r3, #0]
 80080c4:	d705      	bvc.n	80080d2 <_scanf_float+0x3f6>
 80080c6:	4806      	ldr	r0, [pc, #24]	; (80080e0 <_scanf_float+0x404>)
 80080c8:	f000 f8b0 	bl	800822c <nanf>
 80080cc:	ed86 0a00 	vstr	s0, [r6]
 80080d0:	e7d2      	b.n	8008078 <_scanf_float+0x39c>
 80080d2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80080d6:	e7f9      	b.n	80080cc <_scanf_float+0x3f0>
 80080d8:	2500      	movs	r5, #0
 80080da:	e640      	b.n	8007d5e <_scanf_float+0x82>
 80080dc:	0800c00c 	.word	0x0800c00c
 80080e0:	0800c488 	.word	0x0800c488

080080e4 <iprintf>:
 80080e4:	b40f      	push	{r0, r1, r2, r3}
 80080e6:	4b0a      	ldr	r3, [pc, #40]	; (8008110 <iprintf+0x2c>)
 80080e8:	b513      	push	{r0, r1, r4, lr}
 80080ea:	681c      	ldr	r4, [r3, #0]
 80080ec:	b124      	cbz	r4, 80080f8 <iprintf+0x14>
 80080ee:	69a3      	ldr	r3, [r4, #24]
 80080f0:	b913      	cbnz	r3, 80080f8 <iprintf+0x14>
 80080f2:	4620      	mov	r0, r4
 80080f4:	f001 ff28 	bl	8009f48 <__sinit>
 80080f8:	ab05      	add	r3, sp, #20
 80080fa:	9a04      	ldr	r2, [sp, #16]
 80080fc:	68a1      	ldr	r1, [r4, #8]
 80080fe:	9301      	str	r3, [sp, #4]
 8008100:	4620      	mov	r0, r4
 8008102:	f003 fabd 	bl	800b680 <_vfiprintf_r>
 8008106:	b002      	add	sp, #8
 8008108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800810c:	b004      	add	sp, #16
 800810e:	4770      	bx	lr
 8008110:	20000010 	.word	0x20000010

08008114 <putchar>:
 8008114:	4b09      	ldr	r3, [pc, #36]	; (800813c <putchar+0x28>)
 8008116:	b513      	push	{r0, r1, r4, lr}
 8008118:	681c      	ldr	r4, [r3, #0]
 800811a:	4601      	mov	r1, r0
 800811c:	b134      	cbz	r4, 800812c <putchar+0x18>
 800811e:	69a3      	ldr	r3, [r4, #24]
 8008120:	b923      	cbnz	r3, 800812c <putchar+0x18>
 8008122:	9001      	str	r0, [sp, #4]
 8008124:	4620      	mov	r0, r4
 8008126:	f001 ff0f 	bl	8009f48 <__sinit>
 800812a:	9901      	ldr	r1, [sp, #4]
 800812c:	68a2      	ldr	r2, [r4, #8]
 800812e:	4620      	mov	r0, r4
 8008130:	b002      	add	sp, #8
 8008132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008136:	f003 bbd3 	b.w	800b8e0 <_putc_r>
 800813a:	bf00      	nop
 800813c:	20000010 	.word	0x20000010

08008140 <_puts_r>:
 8008140:	b570      	push	{r4, r5, r6, lr}
 8008142:	460e      	mov	r6, r1
 8008144:	4605      	mov	r5, r0
 8008146:	b118      	cbz	r0, 8008150 <_puts_r+0x10>
 8008148:	6983      	ldr	r3, [r0, #24]
 800814a:	b90b      	cbnz	r3, 8008150 <_puts_r+0x10>
 800814c:	f001 fefc 	bl	8009f48 <__sinit>
 8008150:	69ab      	ldr	r3, [r5, #24]
 8008152:	68ac      	ldr	r4, [r5, #8]
 8008154:	b913      	cbnz	r3, 800815c <_puts_r+0x1c>
 8008156:	4628      	mov	r0, r5
 8008158:	f001 fef6 	bl	8009f48 <__sinit>
 800815c:	4b2c      	ldr	r3, [pc, #176]	; (8008210 <_puts_r+0xd0>)
 800815e:	429c      	cmp	r4, r3
 8008160:	d120      	bne.n	80081a4 <_puts_r+0x64>
 8008162:	686c      	ldr	r4, [r5, #4]
 8008164:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008166:	07db      	lsls	r3, r3, #31
 8008168:	d405      	bmi.n	8008176 <_puts_r+0x36>
 800816a:	89a3      	ldrh	r3, [r4, #12]
 800816c:	0598      	lsls	r0, r3, #22
 800816e:	d402      	bmi.n	8008176 <_puts_r+0x36>
 8008170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008172:	f002 fafa 	bl	800a76a <__retarget_lock_acquire_recursive>
 8008176:	89a3      	ldrh	r3, [r4, #12]
 8008178:	0719      	lsls	r1, r3, #28
 800817a:	d51d      	bpl.n	80081b8 <_puts_r+0x78>
 800817c:	6923      	ldr	r3, [r4, #16]
 800817e:	b1db      	cbz	r3, 80081b8 <_puts_r+0x78>
 8008180:	3e01      	subs	r6, #1
 8008182:	68a3      	ldr	r3, [r4, #8]
 8008184:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008188:	3b01      	subs	r3, #1
 800818a:	60a3      	str	r3, [r4, #8]
 800818c:	bb39      	cbnz	r1, 80081de <_puts_r+0x9e>
 800818e:	2b00      	cmp	r3, #0
 8008190:	da38      	bge.n	8008204 <_puts_r+0xc4>
 8008192:	4622      	mov	r2, r4
 8008194:	210a      	movs	r1, #10
 8008196:	4628      	mov	r0, r5
 8008198:	f000 feec 	bl	8008f74 <__swbuf_r>
 800819c:	3001      	adds	r0, #1
 800819e:	d011      	beq.n	80081c4 <_puts_r+0x84>
 80081a0:	250a      	movs	r5, #10
 80081a2:	e011      	b.n	80081c8 <_puts_r+0x88>
 80081a4:	4b1b      	ldr	r3, [pc, #108]	; (8008214 <_puts_r+0xd4>)
 80081a6:	429c      	cmp	r4, r3
 80081a8:	d101      	bne.n	80081ae <_puts_r+0x6e>
 80081aa:	68ac      	ldr	r4, [r5, #8]
 80081ac:	e7da      	b.n	8008164 <_puts_r+0x24>
 80081ae:	4b1a      	ldr	r3, [pc, #104]	; (8008218 <_puts_r+0xd8>)
 80081b0:	429c      	cmp	r4, r3
 80081b2:	bf08      	it	eq
 80081b4:	68ec      	ldreq	r4, [r5, #12]
 80081b6:	e7d5      	b.n	8008164 <_puts_r+0x24>
 80081b8:	4621      	mov	r1, r4
 80081ba:	4628      	mov	r0, r5
 80081bc:	f000 ff2c 	bl	8009018 <__swsetup_r>
 80081c0:	2800      	cmp	r0, #0
 80081c2:	d0dd      	beq.n	8008180 <_puts_r+0x40>
 80081c4:	f04f 35ff 	mov.w	r5, #4294967295
 80081c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081ca:	07da      	lsls	r2, r3, #31
 80081cc:	d405      	bmi.n	80081da <_puts_r+0x9a>
 80081ce:	89a3      	ldrh	r3, [r4, #12]
 80081d0:	059b      	lsls	r3, r3, #22
 80081d2:	d402      	bmi.n	80081da <_puts_r+0x9a>
 80081d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081d6:	f002 fac9 	bl	800a76c <__retarget_lock_release_recursive>
 80081da:	4628      	mov	r0, r5
 80081dc:	bd70      	pop	{r4, r5, r6, pc}
 80081de:	2b00      	cmp	r3, #0
 80081e0:	da04      	bge.n	80081ec <_puts_r+0xac>
 80081e2:	69a2      	ldr	r2, [r4, #24]
 80081e4:	429a      	cmp	r2, r3
 80081e6:	dc06      	bgt.n	80081f6 <_puts_r+0xb6>
 80081e8:	290a      	cmp	r1, #10
 80081ea:	d004      	beq.n	80081f6 <_puts_r+0xb6>
 80081ec:	6823      	ldr	r3, [r4, #0]
 80081ee:	1c5a      	adds	r2, r3, #1
 80081f0:	6022      	str	r2, [r4, #0]
 80081f2:	7019      	strb	r1, [r3, #0]
 80081f4:	e7c5      	b.n	8008182 <_puts_r+0x42>
 80081f6:	4622      	mov	r2, r4
 80081f8:	4628      	mov	r0, r5
 80081fa:	f000 febb 	bl	8008f74 <__swbuf_r>
 80081fe:	3001      	adds	r0, #1
 8008200:	d1bf      	bne.n	8008182 <_puts_r+0x42>
 8008202:	e7df      	b.n	80081c4 <_puts_r+0x84>
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	250a      	movs	r5, #10
 8008208:	1c5a      	adds	r2, r3, #1
 800820a:	6022      	str	r2, [r4, #0]
 800820c:	701d      	strb	r5, [r3, #0]
 800820e:	e7db      	b.n	80081c8 <_puts_r+0x88>
 8008210:	0800c220 	.word	0x0800c220
 8008214:	0800c240 	.word	0x0800c240
 8008218:	0800c200 	.word	0x0800c200

0800821c <puts>:
 800821c:	4b02      	ldr	r3, [pc, #8]	; (8008228 <puts+0xc>)
 800821e:	4601      	mov	r1, r0
 8008220:	6818      	ldr	r0, [r3, #0]
 8008222:	f7ff bf8d 	b.w	8008140 <_puts_r>
 8008226:	bf00      	nop
 8008228:	20000010 	.word	0x20000010

0800822c <nanf>:
 800822c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008234 <nanf+0x8>
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	7fc00000 	.word	0x7fc00000

08008238 <siprintf>:
 8008238:	b40e      	push	{r1, r2, r3}
 800823a:	b500      	push	{lr}
 800823c:	b09c      	sub	sp, #112	; 0x70
 800823e:	ab1d      	add	r3, sp, #116	; 0x74
 8008240:	9002      	str	r0, [sp, #8]
 8008242:	9006      	str	r0, [sp, #24]
 8008244:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008248:	4809      	ldr	r0, [pc, #36]	; (8008270 <siprintf+0x38>)
 800824a:	9107      	str	r1, [sp, #28]
 800824c:	9104      	str	r1, [sp, #16]
 800824e:	4909      	ldr	r1, [pc, #36]	; (8008274 <siprintf+0x3c>)
 8008250:	f853 2b04 	ldr.w	r2, [r3], #4
 8008254:	9105      	str	r1, [sp, #20]
 8008256:	6800      	ldr	r0, [r0, #0]
 8008258:	9301      	str	r3, [sp, #4]
 800825a:	a902      	add	r1, sp, #8
 800825c:	f003 f8e6 	bl	800b42c <_svfiprintf_r>
 8008260:	9b02      	ldr	r3, [sp, #8]
 8008262:	2200      	movs	r2, #0
 8008264:	701a      	strb	r2, [r3, #0]
 8008266:	b01c      	add	sp, #112	; 0x70
 8008268:	f85d eb04 	ldr.w	lr, [sp], #4
 800826c:	b003      	add	sp, #12
 800826e:	4770      	bx	lr
 8008270:	20000010 	.word	0x20000010
 8008274:	ffff0208 	.word	0xffff0208

08008278 <sulp>:
 8008278:	b570      	push	{r4, r5, r6, lr}
 800827a:	4604      	mov	r4, r0
 800827c:	460d      	mov	r5, r1
 800827e:	4616      	mov	r6, r2
 8008280:	ec45 4b10 	vmov	d0, r4, r5
 8008284:	f002 fe6c 	bl	800af60 <__ulp>
 8008288:	b17e      	cbz	r6, 80082aa <sulp+0x32>
 800828a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800828e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008292:	2b00      	cmp	r3, #0
 8008294:	dd09      	ble.n	80082aa <sulp+0x32>
 8008296:	051b      	lsls	r3, r3, #20
 8008298:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800829c:	2000      	movs	r0, #0
 800829e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 80082a2:	ec41 0b17 	vmov	d7, r0, r1
 80082a6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80082aa:	bd70      	pop	{r4, r5, r6, pc}
 80082ac:	0000      	movs	r0, r0
	...

080082b0 <_strtod_l>:
 80082b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082b4:	ed2d 8b0c 	vpush	{d8-d13}
 80082b8:	b09d      	sub	sp, #116	; 0x74
 80082ba:	461f      	mov	r7, r3
 80082bc:	2300      	movs	r3, #0
 80082be:	9318      	str	r3, [sp, #96]	; 0x60
 80082c0:	4ba6      	ldr	r3, [pc, #664]	; (800855c <_strtod_l+0x2ac>)
 80082c2:	9213      	str	r2, [sp, #76]	; 0x4c
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	9308      	str	r3, [sp, #32]
 80082c8:	4604      	mov	r4, r0
 80082ca:	4618      	mov	r0, r3
 80082cc:	468a      	mov	sl, r1
 80082ce:	f7f7 ffb7 	bl	8000240 <strlen>
 80082d2:	f04f 0800 	mov.w	r8, #0
 80082d6:	4605      	mov	r5, r0
 80082d8:	f04f 0900 	mov.w	r9, #0
 80082dc:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80082e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082e2:	781a      	ldrb	r2, [r3, #0]
 80082e4:	2a2b      	cmp	r2, #43	; 0x2b
 80082e6:	d04d      	beq.n	8008384 <_strtod_l+0xd4>
 80082e8:	d83a      	bhi.n	8008360 <_strtod_l+0xb0>
 80082ea:	2a0d      	cmp	r2, #13
 80082ec:	d833      	bhi.n	8008356 <_strtod_l+0xa6>
 80082ee:	2a08      	cmp	r2, #8
 80082f0:	d833      	bhi.n	800835a <_strtod_l+0xaa>
 80082f2:	2a00      	cmp	r2, #0
 80082f4:	d03d      	beq.n	8008372 <_strtod_l+0xc2>
 80082f6:	2300      	movs	r3, #0
 80082f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80082fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80082fc:	7833      	ldrb	r3, [r6, #0]
 80082fe:	2b30      	cmp	r3, #48	; 0x30
 8008300:	f040 80b6 	bne.w	8008470 <_strtod_l+0x1c0>
 8008304:	7873      	ldrb	r3, [r6, #1]
 8008306:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800830a:	2b58      	cmp	r3, #88	; 0x58
 800830c:	d16d      	bne.n	80083ea <_strtod_l+0x13a>
 800830e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008310:	9301      	str	r3, [sp, #4]
 8008312:	ab18      	add	r3, sp, #96	; 0x60
 8008314:	9702      	str	r7, [sp, #8]
 8008316:	9300      	str	r3, [sp, #0]
 8008318:	4a91      	ldr	r2, [pc, #580]	; (8008560 <_strtod_l+0x2b0>)
 800831a:	ab19      	add	r3, sp, #100	; 0x64
 800831c:	a917      	add	r1, sp, #92	; 0x5c
 800831e:	4620      	mov	r0, r4
 8008320:	f001 ff16 	bl	800a150 <__gethex>
 8008324:	f010 0507 	ands.w	r5, r0, #7
 8008328:	4607      	mov	r7, r0
 800832a:	d005      	beq.n	8008338 <_strtod_l+0x88>
 800832c:	2d06      	cmp	r5, #6
 800832e:	d12b      	bne.n	8008388 <_strtod_l+0xd8>
 8008330:	3601      	adds	r6, #1
 8008332:	2300      	movs	r3, #0
 8008334:	9617      	str	r6, [sp, #92]	; 0x5c
 8008336:	930b      	str	r3, [sp, #44]	; 0x2c
 8008338:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800833a:	2b00      	cmp	r3, #0
 800833c:	f040 856e 	bne.w	8008e1c <_strtod_l+0xb6c>
 8008340:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008342:	b1e3      	cbz	r3, 800837e <_strtod_l+0xce>
 8008344:	ec49 8b17 	vmov	d7, r8, r9
 8008348:	eeb1 0b47 	vneg.f64	d0, d7
 800834c:	b01d      	add	sp, #116	; 0x74
 800834e:	ecbd 8b0c 	vpop	{d8-d13}
 8008352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008356:	2a20      	cmp	r2, #32
 8008358:	d1cd      	bne.n	80082f6 <_strtod_l+0x46>
 800835a:	3301      	adds	r3, #1
 800835c:	9317      	str	r3, [sp, #92]	; 0x5c
 800835e:	e7bf      	b.n	80082e0 <_strtod_l+0x30>
 8008360:	2a2d      	cmp	r2, #45	; 0x2d
 8008362:	d1c8      	bne.n	80082f6 <_strtod_l+0x46>
 8008364:	2201      	movs	r2, #1
 8008366:	920b      	str	r2, [sp, #44]	; 0x2c
 8008368:	1c5a      	adds	r2, r3, #1
 800836a:	9217      	str	r2, [sp, #92]	; 0x5c
 800836c:	785b      	ldrb	r3, [r3, #1]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1c3      	bne.n	80082fa <_strtod_l+0x4a>
 8008372:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008374:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8008378:	2b00      	cmp	r3, #0
 800837a:	f040 854d 	bne.w	8008e18 <_strtod_l+0xb68>
 800837e:	ec49 8b10 	vmov	d0, r8, r9
 8008382:	e7e3      	b.n	800834c <_strtod_l+0x9c>
 8008384:	2200      	movs	r2, #0
 8008386:	e7ee      	b.n	8008366 <_strtod_l+0xb6>
 8008388:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800838a:	b13a      	cbz	r2, 800839c <_strtod_l+0xec>
 800838c:	2135      	movs	r1, #53	; 0x35
 800838e:	a81a      	add	r0, sp, #104	; 0x68
 8008390:	f002 fef2 	bl	800b178 <__copybits>
 8008394:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008396:	4620      	mov	r0, r4
 8008398:	f002 fab6 	bl	800a908 <_Bfree>
 800839c:	3d01      	subs	r5, #1
 800839e:	2d05      	cmp	r5, #5
 80083a0:	d807      	bhi.n	80083b2 <_strtod_l+0x102>
 80083a2:	e8df f005 	tbb	[pc, r5]
 80083a6:	0b0e      	.short	0x0b0e
 80083a8:	030e1d18 	.word	0x030e1d18
 80083ac:	f04f 0900 	mov.w	r9, #0
 80083b0:	46c8      	mov	r8, r9
 80083b2:	073b      	lsls	r3, r7, #28
 80083b4:	d5c0      	bpl.n	8008338 <_strtod_l+0x88>
 80083b6:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80083ba:	e7bd      	b.n	8008338 <_strtod_l+0x88>
 80083bc:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 80083c0:	e7f7      	b.n	80083b2 <_strtod_l+0x102>
 80083c2:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 80083c6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80083c8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80083cc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80083d0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80083d4:	e7ed      	b.n	80083b2 <_strtod_l+0x102>
 80083d6:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8008564 <_strtod_l+0x2b4>
 80083da:	f04f 0800 	mov.w	r8, #0
 80083de:	e7e8      	b.n	80083b2 <_strtod_l+0x102>
 80083e0:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80083e4:	f04f 38ff 	mov.w	r8, #4294967295
 80083e8:	e7e3      	b.n	80083b2 <_strtod_l+0x102>
 80083ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80083ec:	1c5a      	adds	r2, r3, #1
 80083ee:	9217      	str	r2, [sp, #92]	; 0x5c
 80083f0:	785b      	ldrb	r3, [r3, #1]
 80083f2:	2b30      	cmp	r3, #48	; 0x30
 80083f4:	d0f9      	beq.n	80083ea <_strtod_l+0x13a>
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d09e      	beq.n	8008338 <_strtod_l+0x88>
 80083fa:	2301      	movs	r3, #1
 80083fc:	9306      	str	r3, [sp, #24]
 80083fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008400:	930c      	str	r3, [sp, #48]	; 0x30
 8008402:	2300      	movs	r3, #0
 8008404:	9304      	str	r3, [sp, #16]
 8008406:	930a      	str	r3, [sp, #40]	; 0x28
 8008408:	461e      	mov	r6, r3
 800840a:	220a      	movs	r2, #10
 800840c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800840e:	f890 b000 	ldrb.w	fp, [r0]
 8008412:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8008416:	b2d9      	uxtb	r1, r3
 8008418:	2909      	cmp	r1, #9
 800841a:	d92b      	bls.n	8008474 <_strtod_l+0x1c4>
 800841c:	9908      	ldr	r1, [sp, #32]
 800841e:	462a      	mov	r2, r5
 8008420:	f003 fb01 	bl	800ba26 <strncmp>
 8008424:	2800      	cmp	r0, #0
 8008426:	d035      	beq.n	8008494 <_strtod_l+0x1e4>
 8008428:	2000      	movs	r0, #0
 800842a:	465a      	mov	r2, fp
 800842c:	4633      	mov	r3, r6
 800842e:	4683      	mov	fp, r0
 8008430:	4601      	mov	r1, r0
 8008432:	2a65      	cmp	r2, #101	; 0x65
 8008434:	d001      	beq.n	800843a <_strtod_l+0x18a>
 8008436:	2a45      	cmp	r2, #69	; 0x45
 8008438:	d118      	bne.n	800846c <_strtod_l+0x1bc>
 800843a:	b91b      	cbnz	r3, 8008444 <_strtod_l+0x194>
 800843c:	9b06      	ldr	r3, [sp, #24]
 800843e:	4303      	orrs	r3, r0
 8008440:	d097      	beq.n	8008372 <_strtod_l+0xc2>
 8008442:	2300      	movs	r3, #0
 8008444:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8008448:	f10a 0201 	add.w	r2, sl, #1
 800844c:	9217      	str	r2, [sp, #92]	; 0x5c
 800844e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8008452:	2a2b      	cmp	r2, #43	; 0x2b
 8008454:	d077      	beq.n	8008546 <_strtod_l+0x296>
 8008456:	2a2d      	cmp	r2, #45	; 0x2d
 8008458:	d07d      	beq.n	8008556 <_strtod_l+0x2a6>
 800845a:	f04f 0e00 	mov.w	lr, #0
 800845e:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008462:	2d09      	cmp	r5, #9
 8008464:	f240 8084 	bls.w	8008570 <_strtod_l+0x2c0>
 8008468:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 800846c:	2500      	movs	r5, #0
 800846e:	e09f      	b.n	80085b0 <_strtod_l+0x300>
 8008470:	2300      	movs	r3, #0
 8008472:	e7c3      	b.n	80083fc <_strtod_l+0x14c>
 8008474:	2e08      	cmp	r6, #8
 8008476:	bfd5      	itete	le
 8008478:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800847a:	9904      	ldrgt	r1, [sp, #16]
 800847c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008480:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008484:	f100 0001 	add.w	r0, r0, #1
 8008488:	bfd4      	ite	le
 800848a:	930a      	strle	r3, [sp, #40]	; 0x28
 800848c:	9304      	strgt	r3, [sp, #16]
 800848e:	3601      	adds	r6, #1
 8008490:	9017      	str	r0, [sp, #92]	; 0x5c
 8008492:	e7bb      	b.n	800840c <_strtod_l+0x15c>
 8008494:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008496:	195a      	adds	r2, r3, r5
 8008498:	9217      	str	r2, [sp, #92]	; 0x5c
 800849a:	5d5a      	ldrb	r2, [r3, r5]
 800849c:	b3ae      	cbz	r6, 800850a <_strtod_l+0x25a>
 800849e:	4683      	mov	fp, r0
 80084a0:	4633      	mov	r3, r6
 80084a2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80084a6:	2909      	cmp	r1, #9
 80084a8:	d912      	bls.n	80084d0 <_strtod_l+0x220>
 80084aa:	2101      	movs	r1, #1
 80084ac:	e7c1      	b.n	8008432 <_strtod_l+0x182>
 80084ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	9217      	str	r2, [sp, #92]	; 0x5c
 80084b4:	785a      	ldrb	r2, [r3, #1]
 80084b6:	3001      	adds	r0, #1
 80084b8:	2a30      	cmp	r2, #48	; 0x30
 80084ba:	d0f8      	beq.n	80084ae <_strtod_l+0x1fe>
 80084bc:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80084c0:	2b08      	cmp	r3, #8
 80084c2:	f200 84b0 	bhi.w	8008e26 <_strtod_l+0xb76>
 80084c6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80084c8:	930c      	str	r3, [sp, #48]	; 0x30
 80084ca:	4683      	mov	fp, r0
 80084cc:	2000      	movs	r0, #0
 80084ce:	4603      	mov	r3, r0
 80084d0:	3a30      	subs	r2, #48	; 0x30
 80084d2:	f100 0101 	add.w	r1, r0, #1
 80084d6:	d012      	beq.n	80084fe <_strtod_l+0x24e>
 80084d8:	448b      	add	fp, r1
 80084da:	eb00 0c03 	add.w	ip, r0, r3
 80084de:	4619      	mov	r1, r3
 80084e0:	250a      	movs	r5, #10
 80084e2:	4561      	cmp	r1, ip
 80084e4:	d113      	bne.n	800850e <_strtod_l+0x25e>
 80084e6:	1819      	adds	r1, r3, r0
 80084e8:	2908      	cmp	r1, #8
 80084ea:	f103 0301 	add.w	r3, r3, #1
 80084ee:	4403      	add	r3, r0
 80084f0:	dc1d      	bgt.n	800852e <_strtod_l+0x27e>
 80084f2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80084f4:	210a      	movs	r1, #10
 80084f6:	fb01 2200 	mla	r2, r1, r0, r2
 80084fa:	920a      	str	r2, [sp, #40]	; 0x28
 80084fc:	2100      	movs	r1, #0
 80084fe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008500:	1c50      	adds	r0, r2, #1
 8008502:	9017      	str	r0, [sp, #92]	; 0x5c
 8008504:	7852      	ldrb	r2, [r2, #1]
 8008506:	4608      	mov	r0, r1
 8008508:	e7cb      	b.n	80084a2 <_strtod_l+0x1f2>
 800850a:	4630      	mov	r0, r6
 800850c:	e7d4      	b.n	80084b8 <_strtod_l+0x208>
 800850e:	2908      	cmp	r1, #8
 8008510:	dc04      	bgt.n	800851c <_strtod_l+0x26c>
 8008512:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008514:	436f      	muls	r7, r5
 8008516:	970a      	str	r7, [sp, #40]	; 0x28
 8008518:	3101      	adds	r1, #1
 800851a:	e7e2      	b.n	80084e2 <_strtod_l+0x232>
 800851c:	f101 0e01 	add.w	lr, r1, #1
 8008520:	f1be 0f10 	cmp.w	lr, #16
 8008524:	bfde      	ittt	le
 8008526:	9f04      	ldrle	r7, [sp, #16]
 8008528:	436f      	mulle	r7, r5
 800852a:	9704      	strle	r7, [sp, #16]
 800852c:	e7f4      	b.n	8008518 <_strtod_l+0x268>
 800852e:	2b10      	cmp	r3, #16
 8008530:	bfdf      	itttt	le
 8008532:	9804      	ldrle	r0, [sp, #16]
 8008534:	210a      	movle	r1, #10
 8008536:	fb01 2200 	mlale	r2, r1, r0, r2
 800853a:	9204      	strle	r2, [sp, #16]
 800853c:	e7de      	b.n	80084fc <_strtod_l+0x24c>
 800853e:	f04f 0b00 	mov.w	fp, #0
 8008542:	2101      	movs	r1, #1
 8008544:	e77a      	b.n	800843c <_strtod_l+0x18c>
 8008546:	f04f 0e00 	mov.w	lr, #0
 800854a:	f10a 0202 	add.w	r2, sl, #2
 800854e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008550:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8008554:	e783      	b.n	800845e <_strtod_l+0x1ae>
 8008556:	f04f 0e01 	mov.w	lr, #1
 800855a:	e7f6      	b.n	800854a <_strtod_l+0x29a>
 800855c:	0800c2cc 	.word	0x0800c2cc
 8008560:	0800c014 	.word	0x0800c014
 8008564:	7ff00000 	.word	0x7ff00000
 8008568:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800856a:	1c55      	adds	r5, r2, #1
 800856c:	9517      	str	r5, [sp, #92]	; 0x5c
 800856e:	7852      	ldrb	r2, [r2, #1]
 8008570:	2a30      	cmp	r2, #48	; 0x30
 8008572:	d0f9      	beq.n	8008568 <_strtod_l+0x2b8>
 8008574:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8008578:	2d08      	cmp	r5, #8
 800857a:	f63f af77 	bhi.w	800846c <_strtod_l+0x1bc>
 800857e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008582:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008584:	9208      	str	r2, [sp, #32]
 8008586:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008588:	1c55      	adds	r5, r2, #1
 800858a:	9517      	str	r5, [sp, #92]	; 0x5c
 800858c:	7852      	ldrb	r2, [r2, #1]
 800858e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8008592:	2f09      	cmp	r7, #9
 8008594:	d937      	bls.n	8008606 <_strtod_l+0x356>
 8008596:	9f08      	ldr	r7, [sp, #32]
 8008598:	1bed      	subs	r5, r5, r7
 800859a:	2d08      	cmp	r5, #8
 800859c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80085a0:	dc02      	bgt.n	80085a8 <_strtod_l+0x2f8>
 80085a2:	4565      	cmp	r5, ip
 80085a4:	bfa8      	it	ge
 80085a6:	4665      	movge	r5, ip
 80085a8:	f1be 0f00 	cmp.w	lr, #0
 80085ac:	d000      	beq.n	80085b0 <_strtod_l+0x300>
 80085ae:	426d      	negs	r5, r5
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d14f      	bne.n	8008654 <_strtod_l+0x3a4>
 80085b4:	9b06      	ldr	r3, [sp, #24]
 80085b6:	4303      	orrs	r3, r0
 80085b8:	f47f aebe 	bne.w	8008338 <_strtod_l+0x88>
 80085bc:	2900      	cmp	r1, #0
 80085be:	f47f aed8 	bne.w	8008372 <_strtod_l+0xc2>
 80085c2:	2a69      	cmp	r2, #105	; 0x69
 80085c4:	d027      	beq.n	8008616 <_strtod_l+0x366>
 80085c6:	dc24      	bgt.n	8008612 <_strtod_l+0x362>
 80085c8:	2a49      	cmp	r2, #73	; 0x49
 80085ca:	d024      	beq.n	8008616 <_strtod_l+0x366>
 80085cc:	2a4e      	cmp	r2, #78	; 0x4e
 80085ce:	f47f aed0 	bne.w	8008372 <_strtod_l+0xc2>
 80085d2:	499b      	ldr	r1, [pc, #620]	; (8008840 <_strtod_l+0x590>)
 80085d4:	a817      	add	r0, sp, #92	; 0x5c
 80085d6:	f002 f813 	bl	800a600 <__match>
 80085da:	2800      	cmp	r0, #0
 80085dc:	f43f aec9 	beq.w	8008372 <_strtod_l+0xc2>
 80085e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	2b28      	cmp	r3, #40	; 0x28
 80085e6:	d12d      	bne.n	8008644 <_strtod_l+0x394>
 80085e8:	4996      	ldr	r1, [pc, #600]	; (8008844 <_strtod_l+0x594>)
 80085ea:	aa1a      	add	r2, sp, #104	; 0x68
 80085ec:	a817      	add	r0, sp, #92	; 0x5c
 80085ee:	f002 f81b 	bl	800a628 <__hexnan>
 80085f2:	2805      	cmp	r0, #5
 80085f4:	d126      	bne.n	8008644 <_strtod_l+0x394>
 80085f6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80085f8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80085fc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008600:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008604:	e698      	b.n	8008338 <_strtod_l+0x88>
 8008606:	250a      	movs	r5, #10
 8008608:	fb05 250c 	mla	r5, r5, ip, r2
 800860c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8008610:	e7b9      	b.n	8008586 <_strtod_l+0x2d6>
 8008612:	2a6e      	cmp	r2, #110	; 0x6e
 8008614:	e7db      	b.n	80085ce <_strtod_l+0x31e>
 8008616:	498c      	ldr	r1, [pc, #560]	; (8008848 <_strtod_l+0x598>)
 8008618:	a817      	add	r0, sp, #92	; 0x5c
 800861a:	f001 fff1 	bl	800a600 <__match>
 800861e:	2800      	cmp	r0, #0
 8008620:	f43f aea7 	beq.w	8008372 <_strtod_l+0xc2>
 8008624:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008626:	4989      	ldr	r1, [pc, #548]	; (800884c <_strtod_l+0x59c>)
 8008628:	3b01      	subs	r3, #1
 800862a:	a817      	add	r0, sp, #92	; 0x5c
 800862c:	9317      	str	r3, [sp, #92]	; 0x5c
 800862e:	f001 ffe7 	bl	800a600 <__match>
 8008632:	b910      	cbnz	r0, 800863a <_strtod_l+0x38a>
 8008634:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008636:	3301      	adds	r3, #1
 8008638:	9317      	str	r3, [sp, #92]	; 0x5c
 800863a:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8008860 <_strtod_l+0x5b0>
 800863e:	f04f 0800 	mov.w	r8, #0
 8008642:	e679      	b.n	8008338 <_strtod_l+0x88>
 8008644:	4882      	ldr	r0, [pc, #520]	; (8008850 <_strtod_l+0x5a0>)
 8008646:	f003 f993 	bl	800b970 <nan>
 800864a:	ed8d 0b04 	vstr	d0, [sp, #16]
 800864e:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008652:	e671      	b.n	8008338 <_strtod_l+0x88>
 8008654:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 8008658:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800865c:	eba5 020b 	sub.w	r2, r5, fp
 8008660:	2e00      	cmp	r6, #0
 8008662:	bf08      	it	eq
 8008664:	461e      	moveq	r6, r3
 8008666:	2b10      	cmp	r3, #16
 8008668:	ed8d 7b08 	vstr	d7, [sp, #32]
 800866c:	9206      	str	r2, [sp, #24]
 800866e:	461a      	mov	r2, r3
 8008670:	bfa8      	it	ge
 8008672:	2210      	movge	r2, #16
 8008674:	2b09      	cmp	r3, #9
 8008676:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800867a:	dd0e      	ble.n	800869a <_strtod_l+0x3ea>
 800867c:	4975      	ldr	r1, [pc, #468]	; (8008854 <_strtod_l+0x5a4>)
 800867e:	eddd 7a04 	vldr	s15, [sp, #16]
 8008682:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008686:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800868a:	ed9d 5b08 	vldr	d5, [sp, #32]
 800868e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008692:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008696:	ec59 8b17 	vmov	r8, r9, d7
 800869a:	2b0f      	cmp	r3, #15
 800869c:	dc37      	bgt.n	800870e <_strtod_l+0x45e>
 800869e:	9906      	ldr	r1, [sp, #24]
 80086a0:	2900      	cmp	r1, #0
 80086a2:	f43f ae49 	beq.w	8008338 <_strtod_l+0x88>
 80086a6:	dd23      	ble.n	80086f0 <_strtod_l+0x440>
 80086a8:	2916      	cmp	r1, #22
 80086aa:	dc0b      	bgt.n	80086c4 <_strtod_l+0x414>
 80086ac:	4b69      	ldr	r3, [pc, #420]	; (8008854 <_strtod_l+0x5a4>)
 80086ae:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80086b2:	ed93 7b00 	vldr	d7, [r3]
 80086b6:	ec49 8b16 	vmov	d6, r8, r9
 80086ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80086be:	ec59 8b17 	vmov	r8, r9, d7
 80086c2:	e639      	b.n	8008338 <_strtod_l+0x88>
 80086c4:	9806      	ldr	r0, [sp, #24]
 80086c6:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 80086ca:	4281      	cmp	r1, r0
 80086cc:	db1f      	blt.n	800870e <_strtod_l+0x45e>
 80086ce:	4a61      	ldr	r2, [pc, #388]	; (8008854 <_strtod_l+0x5a4>)
 80086d0:	f1c3 030f 	rsb	r3, r3, #15
 80086d4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80086d8:	ed91 7b00 	vldr	d7, [r1]
 80086dc:	ec49 8b16 	vmov	d6, r8, r9
 80086e0:	1ac3      	subs	r3, r0, r3
 80086e2:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80086e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80086ea:	ed92 6b00 	vldr	d6, [r2]
 80086ee:	e7e4      	b.n	80086ba <_strtod_l+0x40a>
 80086f0:	9906      	ldr	r1, [sp, #24]
 80086f2:	3116      	adds	r1, #22
 80086f4:	db0b      	blt.n	800870e <_strtod_l+0x45e>
 80086f6:	4b57      	ldr	r3, [pc, #348]	; (8008854 <_strtod_l+0x5a4>)
 80086f8:	ebab 0505 	sub.w	r5, fp, r5
 80086fc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008700:	ed95 7b00 	vldr	d7, [r5]
 8008704:	ec49 8b16 	vmov	d6, r8, r9
 8008708:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800870c:	e7d7      	b.n	80086be <_strtod_l+0x40e>
 800870e:	9906      	ldr	r1, [sp, #24]
 8008710:	1a9a      	subs	r2, r3, r2
 8008712:	440a      	add	r2, r1
 8008714:	2a00      	cmp	r2, #0
 8008716:	dd74      	ble.n	8008802 <_strtod_l+0x552>
 8008718:	f012 000f 	ands.w	r0, r2, #15
 800871c:	d00a      	beq.n	8008734 <_strtod_l+0x484>
 800871e:	494d      	ldr	r1, [pc, #308]	; (8008854 <_strtod_l+0x5a4>)
 8008720:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008724:	ed91 7b00 	vldr	d7, [r1]
 8008728:	ec49 8b16 	vmov	d6, r8, r9
 800872c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008730:	ec59 8b17 	vmov	r8, r9, d7
 8008734:	f032 020f 	bics.w	r2, r2, #15
 8008738:	d04f      	beq.n	80087da <_strtod_l+0x52a>
 800873a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800873e:	dd22      	ble.n	8008786 <_strtod_l+0x4d6>
 8008740:	2500      	movs	r5, #0
 8008742:	462e      	mov	r6, r5
 8008744:	950a      	str	r5, [sp, #40]	; 0x28
 8008746:	462f      	mov	r7, r5
 8008748:	2322      	movs	r3, #34	; 0x22
 800874a:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8008860 <_strtod_l+0x5b0>
 800874e:	6023      	str	r3, [r4, #0]
 8008750:	f04f 0800 	mov.w	r8, #0
 8008754:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008756:	2b00      	cmp	r3, #0
 8008758:	f43f adee 	beq.w	8008338 <_strtod_l+0x88>
 800875c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800875e:	4620      	mov	r0, r4
 8008760:	f002 f8d2 	bl	800a908 <_Bfree>
 8008764:	4639      	mov	r1, r7
 8008766:	4620      	mov	r0, r4
 8008768:	f002 f8ce 	bl	800a908 <_Bfree>
 800876c:	4631      	mov	r1, r6
 800876e:	4620      	mov	r0, r4
 8008770:	f002 f8ca 	bl	800a908 <_Bfree>
 8008774:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008776:	4620      	mov	r0, r4
 8008778:	f002 f8c6 	bl	800a908 <_Bfree>
 800877c:	4629      	mov	r1, r5
 800877e:	4620      	mov	r0, r4
 8008780:	f002 f8c2 	bl	800a908 <_Bfree>
 8008784:	e5d8      	b.n	8008338 <_strtod_l+0x88>
 8008786:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800878a:	2000      	movs	r0, #0
 800878c:	4f32      	ldr	r7, [pc, #200]	; (8008858 <_strtod_l+0x5a8>)
 800878e:	1112      	asrs	r2, r2, #4
 8008790:	4601      	mov	r1, r0
 8008792:	2a01      	cmp	r2, #1
 8008794:	dc24      	bgt.n	80087e0 <_strtod_l+0x530>
 8008796:	b108      	cbz	r0, 800879c <_strtod_l+0x4ec>
 8008798:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800879c:	4a2e      	ldr	r2, [pc, #184]	; (8008858 <_strtod_l+0x5a8>)
 800879e:	482f      	ldr	r0, [pc, #188]	; (800885c <_strtod_l+0x5ac>)
 80087a0:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 80087a4:	ed91 7b00 	vldr	d7, [r1]
 80087a8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80087ac:	ec49 8b16 	vmov	d6, r8, r9
 80087b0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80087b4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80087b8:	9905      	ldr	r1, [sp, #20]
 80087ba:	4a29      	ldr	r2, [pc, #164]	; (8008860 <_strtod_l+0x5b0>)
 80087bc:	400a      	ands	r2, r1
 80087be:	4282      	cmp	r2, r0
 80087c0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80087c4:	d8bc      	bhi.n	8008740 <_strtod_l+0x490>
 80087c6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 80087ca:	4282      	cmp	r2, r0
 80087cc:	bf86      	itte	hi
 80087ce:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8008864 <_strtod_l+0x5b4>
 80087d2:	f04f 38ff 	movhi.w	r8, #4294967295
 80087d6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 80087da:	2200      	movs	r2, #0
 80087dc:	9204      	str	r2, [sp, #16]
 80087de:	e07f      	b.n	80088e0 <_strtod_l+0x630>
 80087e0:	f012 0f01 	tst.w	r2, #1
 80087e4:	d00a      	beq.n	80087fc <_strtod_l+0x54c>
 80087e6:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 80087ea:	ed90 7b00 	vldr	d7, [r0]
 80087ee:	ed9d 6b04 	vldr	d6, [sp, #16]
 80087f2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80087f6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80087fa:	2001      	movs	r0, #1
 80087fc:	3101      	adds	r1, #1
 80087fe:	1052      	asrs	r2, r2, #1
 8008800:	e7c7      	b.n	8008792 <_strtod_l+0x4e2>
 8008802:	d0ea      	beq.n	80087da <_strtod_l+0x52a>
 8008804:	4252      	negs	r2, r2
 8008806:	f012 000f 	ands.w	r0, r2, #15
 800880a:	d00a      	beq.n	8008822 <_strtod_l+0x572>
 800880c:	4911      	ldr	r1, [pc, #68]	; (8008854 <_strtod_l+0x5a4>)
 800880e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008812:	ed91 7b00 	vldr	d7, [r1]
 8008816:	ec49 8b16 	vmov	d6, r8, r9
 800881a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800881e:	ec59 8b17 	vmov	r8, r9, d7
 8008822:	1112      	asrs	r2, r2, #4
 8008824:	d0d9      	beq.n	80087da <_strtod_l+0x52a>
 8008826:	2a1f      	cmp	r2, #31
 8008828:	dd1e      	ble.n	8008868 <_strtod_l+0x5b8>
 800882a:	2500      	movs	r5, #0
 800882c:	462e      	mov	r6, r5
 800882e:	950a      	str	r5, [sp, #40]	; 0x28
 8008830:	462f      	mov	r7, r5
 8008832:	2322      	movs	r3, #34	; 0x22
 8008834:	f04f 0800 	mov.w	r8, #0
 8008838:	f04f 0900 	mov.w	r9, #0
 800883c:	6023      	str	r3, [r4, #0]
 800883e:	e789      	b.n	8008754 <_strtod_l+0x4a4>
 8008840:	0800bfe5 	.word	0x0800bfe5
 8008844:	0800c028 	.word	0x0800c028
 8008848:	0800bfdd 	.word	0x0800bfdd
 800884c:	0800c16c 	.word	0x0800c16c
 8008850:	0800c488 	.word	0x0800c488
 8008854:	0800c368 	.word	0x0800c368
 8008858:	0800c340 	.word	0x0800c340
 800885c:	7ca00000 	.word	0x7ca00000
 8008860:	7ff00000 	.word	0x7ff00000
 8008864:	7fefffff 	.word	0x7fefffff
 8008868:	f012 0110 	ands.w	r1, r2, #16
 800886c:	bf18      	it	ne
 800886e:	216a      	movne	r1, #106	; 0x6a
 8008870:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8008874:	9104      	str	r1, [sp, #16]
 8008876:	49c0      	ldr	r1, [pc, #768]	; (8008b78 <_strtod_l+0x8c8>)
 8008878:	2000      	movs	r0, #0
 800887a:	07d7      	lsls	r7, r2, #31
 800887c:	d508      	bpl.n	8008890 <_strtod_l+0x5e0>
 800887e:	ed9d 6b08 	vldr	d6, [sp, #32]
 8008882:	ed91 7b00 	vldr	d7, [r1]
 8008886:	ee26 7b07 	vmul.f64	d7, d6, d7
 800888a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800888e:	2001      	movs	r0, #1
 8008890:	1052      	asrs	r2, r2, #1
 8008892:	f101 0108 	add.w	r1, r1, #8
 8008896:	d1f0      	bne.n	800887a <_strtod_l+0x5ca>
 8008898:	b108      	cbz	r0, 800889e <_strtod_l+0x5ee>
 800889a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800889e:	9a04      	ldr	r2, [sp, #16]
 80088a0:	b1ba      	cbz	r2, 80088d2 <_strtod_l+0x622>
 80088a2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80088a6:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 80088aa:	2a00      	cmp	r2, #0
 80088ac:	4649      	mov	r1, r9
 80088ae:	dd10      	ble.n	80088d2 <_strtod_l+0x622>
 80088b0:	2a1f      	cmp	r2, #31
 80088b2:	f340 8132 	ble.w	8008b1a <_strtod_l+0x86a>
 80088b6:	2a34      	cmp	r2, #52	; 0x34
 80088b8:	bfde      	ittt	le
 80088ba:	3a20      	suble	r2, #32
 80088bc:	f04f 30ff 	movle.w	r0, #4294967295
 80088c0:	fa00 f202 	lslle.w	r2, r0, r2
 80088c4:	f04f 0800 	mov.w	r8, #0
 80088c8:	bfcc      	ite	gt
 80088ca:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80088ce:	ea02 0901 	andle.w	r9, r2, r1
 80088d2:	ec49 8b17 	vmov	d7, r8, r9
 80088d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80088da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088de:	d0a4      	beq.n	800882a <_strtod_l+0x57a>
 80088e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088e2:	9200      	str	r2, [sp, #0]
 80088e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088e6:	4632      	mov	r2, r6
 80088e8:	4620      	mov	r0, r4
 80088ea:	f002 f879 	bl	800a9e0 <__s2b>
 80088ee:	900a      	str	r0, [sp, #40]	; 0x28
 80088f0:	2800      	cmp	r0, #0
 80088f2:	f43f af25 	beq.w	8008740 <_strtod_l+0x490>
 80088f6:	9b06      	ldr	r3, [sp, #24]
 80088f8:	ebab 0505 	sub.w	r5, fp, r5
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	bfb4      	ite	lt
 8008900:	462b      	movlt	r3, r5
 8008902:	2300      	movge	r3, #0
 8008904:	930c      	str	r3, [sp, #48]	; 0x30
 8008906:	9b06      	ldr	r3, [sp, #24]
 8008908:	ed9f 9b95 	vldr	d9, [pc, #596]	; 8008b60 <_strtod_l+0x8b0>
 800890c:	ed9f ab96 	vldr	d10, [pc, #600]	; 8008b68 <_strtod_l+0x8b8>
 8008910:	ed9f bb97 	vldr	d11, [pc, #604]	; 8008b70 <_strtod_l+0x8c0>
 8008914:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008918:	2500      	movs	r5, #0
 800891a:	9312      	str	r3, [sp, #72]	; 0x48
 800891c:	462e      	mov	r6, r5
 800891e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008920:	4620      	mov	r0, r4
 8008922:	6859      	ldr	r1, [r3, #4]
 8008924:	f001 ffb0 	bl	800a888 <_Balloc>
 8008928:	4607      	mov	r7, r0
 800892a:	2800      	cmp	r0, #0
 800892c:	f43f af0c 	beq.w	8008748 <_strtod_l+0x498>
 8008930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008932:	691a      	ldr	r2, [r3, #16]
 8008934:	3202      	adds	r2, #2
 8008936:	f103 010c 	add.w	r1, r3, #12
 800893a:	0092      	lsls	r2, r2, #2
 800893c:	300c      	adds	r0, #12
 800893e:	f001 ff95 	bl	800a86c <memcpy>
 8008942:	ec49 8b10 	vmov	d0, r8, r9
 8008946:	aa1a      	add	r2, sp, #104	; 0x68
 8008948:	a919      	add	r1, sp, #100	; 0x64
 800894a:	4620      	mov	r0, r4
 800894c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8008950:	f002 fb82 	bl	800b058 <__d2b>
 8008954:	9018      	str	r0, [sp, #96]	; 0x60
 8008956:	2800      	cmp	r0, #0
 8008958:	f43f aef6 	beq.w	8008748 <_strtod_l+0x498>
 800895c:	2101      	movs	r1, #1
 800895e:	4620      	mov	r0, r4
 8008960:	f002 f8d8 	bl	800ab14 <__i2b>
 8008964:	4606      	mov	r6, r0
 8008966:	2800      	cmp	r0, #0
 8008968:	f43f aeee 	beq.w	8008748 <_strtod_l+0x498>
 800896c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800896e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008970:	2b00      	cmp	r3, #0
 8008972:	bfab      	itete	ge
 8008974:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008976:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008978:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 800897c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8008980:	bfac      	ite	ge
 8008982:	eb03 0b02 	addge.w	fp, r3, r2
 8008986:	eba2 0a03 	sublt.w	sl, r2, r3
 800898a:	9a04      	ldr	r2, [sp, #16]
 800898c:	1a9b      	subs	r3, r3, r2
 800898e:	440b      	add	r3, r1
 8008990:	4a7a      	ldr	r2, [pc, #488]	; (8008b7c <_strtod_l+0x8cc>)
 8008992:	3b01      	subs	r3, #1
 8008994:	4293      	cmp	r3, r2
 8008996:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800899a:	f280 80d1 	bge.w	8008b40 <_strtod_l+0x890>
 800899e:	1ad2      	subs	r2, r2, r3
 80089a0:	2a1f      	cmp	r2, #31
 80089a2:	eba1 0102 	sub.w	r1, r1, r2
 80089a6:	f04f 0001 	mov.w	r0, #1
 80089aa:	f300 80bd 	bgt.w	8008b28 <_strtod_l+0x878>
 80089ae:	fa00 f302 	lsl.w	r3, r0, r2
 80089b2:	930e      	str	r3, [sp, #56]	; 0x38
 80089b4:	2300      	movs	r3, #0
 80089b6:	930d      	str	r3, [sp, #52]	; 0x34
 80089b8:	eb0b 0301 	add.w	r3, fp, r1
 80089bc:	9a04      	ldr	r2, [sp, #16]
 80089be:	459b      	cmp	fp, r3
 80089c0:	448a      	add	sl, r1
 80089c2:	4492      	add	sl, r2
 80089c4:	465a      	mov	r2, fp
 80089c6:	bfa8      	it	ge
 80089c8:	461a      	movge	r2, r3
 80089ca:	4552      	cmp	r2, sl
 80089cc:	bfa8      	it	ge
 80089ce:	4652      	movge	r2, sl
 80089d0:	2a00      	cmp	r2, #0
 80089d2:	bfc2      	ittt	gt
 80089d4:	1a9b      	subgt	r3, r3, r2
 80089d6:	ebaa 0a02 	subgt.w	sl, sl, r2
 80089da:	ebab 0b02 	subgt.w	fp, fp, r2
 80089de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089e0:	2a00      	cmp	r2, #0
 80089e2:	dd18      	ble.n	8008a16 <_strtod_l+0x766>
 80089e4:	4631      	mov	r1, r6
 80089e6:	4620      	mov	r0, r4
 80089e8:	9315      	str	r3, [sp, #84]	; 0x54
 80089ea:	f002 f94f 	bl	800ac8c <__pow5mult>
 80089ee:	4606      	mov	r6, r0
 80089f0:	2800      	cmp	r0, #0
 80089f2:	f43f aea9 	beq.w	8008748 <_strtod_l+0x498>
 80089f6:	4601      	mov	r1, r0
 80089f8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80089fa:	4620      	mov	r0, r4
 80089fc:	f002 f8a0 	bl	800ab40 <__multiply>
 8008a00:	9014      	str	r0, [sp, #80]	; 0x50
 8008a02:	2800      	cmp	r0, #0
 8008a04:	f43f aea0 	beq.w	8008748 <_strtod_l+0x498>
 8008a08:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008a0a:	4620      	mov	r0, r4
 8008a0c:	f001 ff7c 	bl	800a908 <_Bfree>
 8008a10:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008a12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008a14:	9218      	str	r2, [sp, #96]	; 0x60
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f300 8097 	bgt.w	8008b4a <_strtod_l+0x89a>
 8008a1c:	9b06      	ldr	r3, [sp, #24]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	dd08      	ble.n	8008a34 <_strtod_l+0x784>
 8008a22:	4639      	mov	r1, r7
 8008a24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a26:	4620      	mov	r0, r4
 8008a28:	f002 f930 	bl	800ac8c <__pow5mult>
 8008a2c:	4607      	mov	r7, r0
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	f43f ae8a 	beq.w	8008748 <_strtod_l+0x498>
 8008a34:	f1ba 0f00 	cmp.w	sl, #0
 8008a38:	dd08      	ble.n	8008a4c <_strtod_l+0x79c>
 8008a3a:	4639      	mov	r1, r7
 8008a3c:	4652      	mov	r2, sl
 8008a3e:	4620      	mov	r0, r4
 8008a40:	f002 f97e 	bl	800ad40 <__lshift>
 8008a44:	4607      	mov	r7, r0
 8008a46:	2800      	cmp	r0, #0
 8008a48:	f43f ae7e 	beq.w	8008748 <_strtod_l+0x498>
 8008a4c:	f1bb 0f00 	cmp.w	fp, #0
 8008a50:	dd08      	ble.n	8008a64 <_strtod_l+0x7b4>
 8008a52:	4631      	mov	r1, r6
 8008a54:	465a      	mov	r2, fp
 8008a56:	4620      	mov	r0, r4
 8008a58:	f002 f972 	bl	800ad40 <__lshift>
 8008a5c:	4606      	mov	r6, r0
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	f43f ae72 	beq.w	8008748 <_strtod_l+0x498>
 8008a64:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008a66:	463a      	mov	r2, r7
 8008a68:	4620      	mov	r0, r4
 8008a6a:	f002 f9f1 	bl	800ae50 <__mdiff>
 8008a6e:	4605      	mov	r5, r0
 8008a70:	2800      	cmp	r0, #0
 8008a72:	f43f ae69 	beq.w	8008748 <_strtod_l+0x498>
 8008a76:	2300      	movs	r3, #0
 8008a78:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8008a7c:	60c3      	str	r3, [r0, #12]
 8008a7e:	4631      	mov	r1, r6
 8008a80:	f002 f9ca 	bl	800ae18 <__mcmp>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	da7f      	bge.n	8008b88 <_strtod_l+0x8d8>
 8008a88:	ea5a 0308 	orrs.w	r3, sl, r8
 8008a8c:	f040 80a5 	bne.w	8008bda <_strtod_l+0x92a>
 8008a90:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f040 80a0 	bne.w	8008bda <_strtod_l+0x92a>
 8008a9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008a9e:	0d1b      	lsrs	r3, r3, #20
 8008aa0:	051b      	lsls	r3, r3, #20
 8008aa2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008aa6:	f240 8098 	bls.w	8008bda <_strtod_l+0x92a>
 8008aaa:	696b      	ldr	r3, [r5, #20]
 8008aac:	b91b      	cbnz	r3, 8008ab6 <_strtod_l+0x806>
 8008aae:	692b      	ldr	r3, [r5, #16]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	f340 8092 	ble.w	8008bda <_strtod_l+0x92a>
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	2201      	movs	r2, #1
 8008aba:	4620      	mov	r0, r4
 8008abc:	f002 f940 	bl	800ad40 <__lshift>
 8008ac0:	4631      	mov	r1, r6
 8008ac2:	4605      	mov	r5, r0
 8008ac4:	f002 f9a8 	bl	800ae18 <__mcmp>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	f340 8086 	ble.w	8008bda <_strtod_l+0x92a>
 8008ace:	9904      	ldr	r1, [sp, #16]
 8008ad0:	4a2b      	ldr	r2, [pc, #172]	; (8008b80 <_strtod_l+0x8d0>)
 8008ad2:	464b      	mov	r3, r9
 8008ad4:	2900      	cmp	r1, #0
 8008ad6:	f000 80a1 	beq.w	8008c1c <_strtod_l+0x96c>
 8008ada:	ea02 0109 	and.w	r1, r2, r9
 8008ade:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008ae2:	f300 809b 	bgt.w	8008c1c <_strtod_l+0x96c>
 8008ae6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008aea:	f77f aea2 	ble.w	8008832 <_strtod_l+0x582>
 8008aee:	4a25      	ldr	r2, [pc, #148]	; (8008b84 <_strtod_l+0x8d4>)
 8008af0:	2300      	movs	r3, #0
 8008af2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8008af6:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8008afa:	ec49 8b17 	vmov	d7, r8, r9
 8008afe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008b02:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008b06:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	bf08      	it	eq
 8008b0e:	2322      	moveq	r3, #34	; 0x22
 8008b10:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008b14:	bf08      	it	eq
 8008b16:	6023      	streq	r3, [r4, #0]
 8008b18:	e620      	b.n	800875c <_strtod_l+0x4ac>
 8008b1a:	f04f 31ff 	mov.w	r1, #4294967295
 8008b1e:	fa01 f202 	lsl.w	r2, r1, r2
 8008b22:	ea02 0808 	and.w	r8, r2, r8
 8008b26:	e6d4      	b.n	80088d2 <_strtod_l+0x622>
 8008b28:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8008b2c:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8008b30:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8008b34:	33e2      	adds	r3, #226	; 0xe2
 8008b36:	fa00 f303 	lsl.w	r3, r0, r3
 8008b3a:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 8008b3e:	e73b      	b.n	80089b8 <_strtod_l+0x708>
 8008b40:	2000      	movs	r0, #0
 8008b42:	2301      	movs	r3, #1
 8008b44:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 8008b48:	e736      	b.n	80089b8 <_strtod_l+0x708>
 8008b4a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	4620      	mov	r0, r4
 8008b50:	f002 f8f6 	bl	800ad40 <__lshift>
 8008b54:	9018      	str	r0, [sp, #96]	; 0x60
 8008b56:	2800      	cmp	r0, #0
 8008b58:	f47f af60 	bne.w	8008a1c <_strtod_l+0x76c>
 8008b5c:	e5f4      	b.n	8008748 <_strtod_l+0x498>
 8008b5e:	bf00      	nop
 8008b60:	94a03595 	.word	0x94a03595
 8008b64:	3fcfffff 	.word	0x3fcfffff
 8008b68:	94a03595 	.word	0x94a03595
 8008b6c:	3fdfffff 	.word	0x3fdfffff
 8008b70:	35afe535 	.word	0x35afe535
 8008b74:	3fe00000 	.word	0x3fe00000
 8008b78:	0800c040 	.word	0x0800c040
 8008b7c:	fffffc02 	.word	0xfffffc02
 8008b80:	7ff00000 	.word	0x7ff00000
 8008b84:	39500000 	.word	0x39500000
 8008b88:	46cb      	mov	fp, r9
 8008b8a:	d165      	bne.n	8008c58 <_strtod_l+0x9a8>
 8008b8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b90:	f1ba 0f00 	cmp.w	sl, #0
 8008b94:	d02a      	beq.n	8008bec <_strtod_l+0x93c>
 8008b96:	4aaa      	ldr	r2, [pc, #680]	; (8008e40 <_strtod_l+0xb90>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d12b      	bne.n	8008bf4 <_strtod_l+0x944>
 8008b9c:	9b04      	ldr	r3, [sp, #16]
 8008b9e:	4641      	mov	r1, r8
 8008ba0:	b1fb      	cbz	r3, 8008be2 <_strtod_l+0x932>
 8008ba2:	4aa8      	ldr	r2, [pc, #672]	; (8008e44 <_strtod_l+0xb94>)
 8008ba4:	ea09 0202 	and.w	r2, r9, r2
 8008ba8:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008bac:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb0:	d81a      	bhi.n	8008be8 <_strtod_l+0x938>
 8008bb2:	0d12      	lsrs	r2, r2, #20
 8008bb4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008bb8:	fa00 f303 	lsl.w	r3, r0, r3
 8008bbc:	4299      	cmp	r1, r3
 8008bbe:	d119      	bne.n	8008bf4 <_strtod_l+0x944>
 8008bc0:	4ba1      	ldr	r3, [pc, #644]	; (8008e48 <_strtod_l+0xb98>)
 8008bc2:	459b      	cmp	fp, r3
 8008bc4:	d102      	bne.n	8008bcc <_strtod_l+0x91c>
 8008bc6:	3101      	adds	r1, #1
 8008bc8:	f43f adbe 	beq.w	8008748 <_strtod_l+0x498>
 8008bcc:	4b9d      	ldr	r3, [pc, #628]	; (8008e44 <_strtod_l+0xb94>)
 8008bce:	ea0b 0303 	and.w	r3, fp, r3
 8008bd2:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008bd6:	f04f 0800 	mov.w	r8, #0
 8008bda:	9b04      	ldr	r3, [sp, #16]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d186      	bne.n	8008aee <_strtod_l+0x83e>
 8008be0:	e5bc      	b.n	800875c <_strtod_l+0x4ac>
 8008be2:	f04f 33ff 	mov.w	r3, #4294967295
 8008be6:	e7e9      	b.n	8008bbc <_strtod_l+0x90c>
 8008be8:	4603      	mov	r3, r0
 8008bea:	e7e7      	b.n	8008bbc <_strtod_l+0x90c>
 8008bec:	ea53 0308 	orrs.w	r3, r3, r8
 8008bf0:	f43f af6d 	beq.w	8008ace <_strtod_l+0x81e>
 8008bf4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bf6:	b1db      	cbz	r3, 8008c30 <_strtod_l+0x980>
 8008bf8:	ea13 0f0b 	tst.w	r3, fp
 8008bfc:	d0ed      	beq.n	8008bda <_strtod_l+0x92a>
 8008bfe:	9a04      	ldr	r2, [sp, #16]
 8008c00:	4640      	mov	r0, r8
 8008c02:	4649      	mov	r1, r9
 8008c04:	f1ba 0f00 	cmp.w	sl, #0
 8008c08:	d016      	beq.n	8008c38 <_strtod_l+0x988>
 8008c0a:	f7ff fb35 	bl	8008278 <sulp>
 8008c0e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008c12:	ee37 7b00 	vadd.f64	d7, d7, d0
 8008c16:	ec59 8b17 	vmov	r8, r9, d7
 8008c1a:	e7de      	b.n	8008bda <_strtod_l+0x92a>
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008c22:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008c26:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008c2a:	f04f 38ff 	mov.w	r8, #4294967295
 8008c2e:	e7d4      	b.n	8008bda <_strtod_l+0x92a>
 8008c30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c32:	ea13 0f08 	tst.w	r3, r8
 8008c36:	e7e1      	b.n	8008bfc <_strtod_l+0x94c>
 8008c38:	f7ff fb1e 	bl	8008278 <sulp>
 8008c3c:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008c40:	ee37 7b40 	vsub.f64	d7, d7, d0
 8008c44:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c48:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c50:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8008c54:	d1c1      	bne.n	8008bda <_strtod_l+0x92a>
 8008c56:	e5ec      	b.n	8008832 <_strtod_l+0x582>
 8008c58:	4631      	mov	r1, r6
 8008c5a:	4628      	mov	r0, r5
 8008c5c:	f002 fa58 	bl	800b110 <__ratio>
 8008c60:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 8008c64:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c6c:	d867      	bhi.n	8008d3e <_strtod_l+0xa8e>
 8008c6e:	f1ba 0f00 	cmp.w	sl, #0
 8008c72:	d044      	beq.n	8008cfe <_strtod_l+0xa4e>
 8008c74:	4b75      	ldr	r3, [pc, #468]	; (8008e4c <_strtod_l+0xb9c>)
 8008c76:	2200      	movs	r2, #0
 8008c78:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8008c7c:	4971      	ldr	r1, [pc, #452]	; (8008e44 <_strtod_l+0xb94>)
 8008c7e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8008e58 <_strtod_l+0xba8>
 8008c82:	ea0b 0001 	and.w	r0, fp, r1
 8008c86:	4560      	cmp	r0, ip
 8008c88:	900d      	str	r0, [sp, #52]	; 0x34
 8008c8a:	f040 808b 	bne.w	8008da4 <_strtod_l+0xaf4>
 8008c8e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008c92:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8008c96:	ec49 8b10 	vmov	d0, r8, r9
 8008c9a:	ec43 2b1c 	vmov	d12, r2, r3
 8008c9e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008ca2:	f002 f95d 	bl	800af60 <__ulp>
 8008ca6:	ec49 8b1d 	vmov	d13, r8, r9
 8008caa:	eeac db00 	vfma.f64	d13, d12, d0
 8008cae:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8008cb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008cb4:	4963      	ldr	r1, [pc, #396]	; (8008e44 <_strtod_l+0xb94>)
 8008cb6:	4a66      	ldr	r2, [pc, #408]	; (8008e50 <_strtod_l+0xba0>)
 8008cb8:	4019      	ands	r1, r3
 8008cba:	4291      	cmp	r1, r2
 8008cbc:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8008cc0:	d947      	bls.n	8008d52 <_strtod_l+0xaa2>
 8008cc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cc4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d103      	bne.n	8008cd4 <_strtod_l+0xa24>
 8008ccc:	9b08      	ldr	r3, [sp, #32]
 8008cce:	3301      	adds	r3, #1
 8008cd0:	f43f ad3a 	beq.w	8008748 <_strtod_l+0x498>
 8008cd4:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8008e48 <_strtod_l+0xb98>
 8008cd8:	f04f 38ff 	mov.w	r8, #4294967295
 8008cdc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008cde:	4620      	mov	r0, r4
 8008ce0:	f001 fe12 	bl	800a908 <_Bfree>
 8008ce4:	4639      	mov	r1, r7
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	f001 fe0e 	bl	800a908 <_Bfree>
 8008cec:	4631      	mov	r1, r6
 8008cee:	4620      	mov	r0, r4
 8008cf0:	f001 fe0a 	bl	800a908 <_Bfree>
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	4620      	mov	r0, r4
 8008cf8:	f001 fe06 	bl	800a908 <_Bfree>
 8008cfc:	e60f      	b.n	800891e <_strtod_l+0x66e>
 8008cfe:	f1b8 0f00 	cmp.w	r8, #0
 8008d02:	d112      	bne.n	8008d2a <_strtod_l+0xa7a>
 8008d04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d08:	b9b3      	cbnz	r3, 8008d38 <_strtod_l+0xa88>
 8008d0a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8008d0e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8008d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d16:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8008d1a:	d401      	bmi.n	8008d20 <_strtod_l+0xa70>
 8008d1c:	ee20 8b08 	vmul.f64	d8, d0, d8
 8008d20:	eeb1 7b48 	vneg.f64	d7, d8
 8008d24:	ec53 2b17 	vmov	r2, r3, d7
 8008d28:	e7a8      	b.n	8008c7c <_strtod_l+0x9cc>
 8008d2a:	f1b8 0f01 	cmp.w	r8, #1
 8008d2e:	d103      	bne.n	8008d38 <_strtod_l+0xa88>
 8008d30:	f1b9 0f00 	cmp.w	r9, #0
 8008d34:	f43f ad7d 	beq.w	8008832 <_strtod_l+0x582>
 8008d38:	4b46      	ldr	r3, [pc, #280]	; (8008e54 <_strtod_l+0xba4>)
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	e79c      	b.n	8008c78 <_strtod_l+0x9c8>
 8008d3e:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8008d42:	ee20 8b08 	vmul.f64	d8, d0, d8
 8008d46:	f1ba 0f00 	cmp.w	sl, #0
 8008d4a:	d0e9      	beq.n	8008d20 <_strtod_l+0xa70>
 8008d4c:	ec53 2b18 	vmov	r2, r3, d8
 8008d50:	e794      	b.n	8008c7c <_strtod_l+0x9cc>
 8008d52:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008d56:	9b04      	ldr	r3, [sp, #16]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d1bf      	bne.n	8008cdc <_strtod_l+0xa2c>
 8008d5c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008d60:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d62:	0d1b      	lsrs	r3, r3, #20
 8008d64:	051b      	lsls	r3, r3, #20
 8008d66:	429a      	cmp	r2, r3
 8008d68:	d1b8      	bne.n	8008cdc <_strtod_l+0xa2c>
 8008d6a:	ec51 0b18 	vmov	r0, r1, d8
 8008d6e:	f7f7 fc93 	bl	8000698 <__aeabi_d2lz>
 8008d72:	f7f7 fc4b 	bl	800060c <__aeabi_l2d>
 8008d76:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d7a:	ec41 0b17 	vmov	d7, r0, r1
 8008d7e:	ea43 0308 	orr.w	r3, r3, r8
 8008d82:	ea53 030a 	orrs.w	r3, r3, sl
 8008d86:	ee38 8b47 	vsub.f64	d8, d8, d7
 8008d8a:	d03e      	beq.n	8008e0a <_strtod_l+0xb5a>
 8008d8c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8008d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d94:	f53f ace2 	bmi.w	800875c <_strtod_l+0x4ac>
 8008d98:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8008d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da0:	dd9c      	ble.n	8008cdc <_strtod_l+0xa2c>
 8008da2:	e4db      	b.n	800875c <_strtod_l+0x4ac>
 8008da4:	9904      	ldr	r1, [sp, #16]
 8008da6:	b301      	cbz	r1, 8008dea <_strtod_l+0xb3a>
 8008da8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008daa:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8008dae:	d81c      	bhi.n	8008dea <_strtod_l+0xb3a>
 8008db0:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8008e38 <_strtod_l+0xb88>
 8008db4:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dbc:	d811      	bhi.n	8008de2 <_strtod_l+0xb32>
 8008dbe:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8008dc2:	ee18 3a10 	vmov	r3, s16
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	bf38      	it	cc
 8008dca:	2301      	movcc	r3, #1
 8008dcc:	ee08 3a10 	vmov	s16, r3
 8008dd0:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8008dd4:	f1ba 0f00 	cmp.w	sl, #0
 8008dd8:	d114      	bne.n	8008e04 <_strtod_l+0xb54>
 8008dda:	eeb1 7b48 	vneg.f64	d7, d8
 8008dde:	ec53 2b17 	vmov	r2, r3, d7
 8008de2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008de4:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8008de8:	1a0b      	subs	r3, r1, r0
 8008dea:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008dee:	ec43 2b1c 	vmov	d12, r2, r3
 8008df2:	f002 f8b5 	bl	800af60 <__ulp>
 8008df6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8008dfa:	eeac 7b00 	vfma.f64	d7, d12, d0
 8008dfe:	ec59 8b17 	vmov	r8, r9, d7
 8008e02:	e7a8      	b.n	8008d56 <_strtod_l+0xaa6>
 8008e04:	ec53 2b18 	vmov	r2, r3, d8
 8008e08:	e7eb      	b.n	8008de2 <_strtod_l+0xb32>
 8008e0a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8008e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e12:	f57f af63 	bpl.w	8008cdc <_strtod_l+0xa2c>
 8008e16:	e4a1      	b.n	800875c <_strtod_l+0x4ac>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e1c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008e1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e20:	6013      	str	r3, [r2, #0]
 8008e22:	f7ff ba8d 	b.w	8008340 <_strtod_l+0x90>
 8008e26:	2a65      	cmp	r2, #101	; 0x65
 8008e28:	f43f ab89 	beq.w	800853e <_strtod_l+0x28e>
 8008e2c:	2a45      	cmp	r2, #69	; 0x45
 8008e2e:	f43f ab86 	beq.w	800853e <_strtod_l+0x28e>
 8008e32:	2101      	movs	r1, #1
 8008e34:	f7ff bbbe 	b.w	80085b4 <_strtod_l+0x304>
 8008e38:	ffc00000 	.word	0xffc00000
 8008e3c:	41dfffff 	.word	0x41dfffff
 8008e40:	000fffff 	.word	0x000fffff
 8008e44:	7ff00000 	.word	0x7ff00000
 8008e48:	7fefffff 	.word	0x7fefffff
 8008e4c:	3ff00000 	.word	0x3ff00000
 8008e50:	7c9fffff 	.word	0x7c9fffff
 8008e54:	bff00000 	.word	0xbff00000
 8008e58:	7fe00000 	.word	0x7fe00000

08008e5c <_strtod_r>:
 8008e5c:	4b01      	ldr	r3, [pc, #4]	; (8008e64 <_strtod_r+0x8>)
 8008e5e:	f7ff ba27 	b.w	80082b0 <_strtod_l>
 8008e62:	bf00      	nop
 8008e64:	20000078 	.word	0x20000078

08008e68 <_strtol_l.isra.0>:
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e6e:	d001      	beq.n	8008e74 <_strtol_l.isra.0+0xc>
 8008e70:	2b24      	cmp	r3, #36	; 0x24
 8008e72:	d906      	bls.n	8008e82 <_strtol_l.isra.0+0x1a>
 8008e74:	f7fe fabe 	bl	80073f4 <__errno>
 8008e78:	2316      	movs	r3, #22
 8008e7a:	6003      	str	r3, [r0, #0]
 8008e7c:	2000      	movs	r0, #0
 8008e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e82:	4f3a      	ldr	r7, [pc, #232]	; (8008f6c <_strtol_l.isra.0+0x104>)
 8008e84:	468e      	mov	lr, r1
 8008e86:	4676      	mov	r6, lr
 8008e88:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008e8c:	5de5      	ldrb	r5, [r4, r7]
 8008e8e:	f015 0508 	ands.w	r5, r5, #8
 8008e92:	d1f8      	bne.n	8008e86 <_strtol_l.isra.0+0x1e>
 8008e94:	2c2d      	cmp	r4, #45	; 0x2d
 8008e96:	d134      	bne.n	8008f02 <_strtol_l.isra.0+0x9a>
 8008e98:	f89e 4000 	ldrb.w	r4, [lr]
 8008e9c:	f04f 0801 	mov.w	r8, #1
 8008ea0:	f106 0e02 	add.w	lr, r6, #2
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d05c      	beq.n	8008f62 <_strtol_l.isra.0+0xfa>
 8008ea8:	2b10      	cmp	r3, #16
 8008eaa:	d10c      	bne.n	8008ec6 <_strtol_l.isra.0+0x5e>
 8008eac:	2c30      	cmp	r4, #48	; 0x30
 8008eae:	d10a      	bne.n	8008ec6 <_strtol_l.isra.0+0x5e>
 8008eb0:	f89e 4000 	ldrb.w	r4, [lr]
 8008eb4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008eb8:	2c58      	cmp	r4, #88	; 0x58
 8008eba:	d14d      	bne.n	8008f58 <_strtol_l.isra.0+0xf0>
 8008ebc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008ec0:	2310      	movs	r3, #16
 8008ec2:	f10e 0e02 	add.w	lr, lr, #2
 8008ec6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008eca:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008ece:	2600      	movs	r6, #0
 8008ed0:	fbbc f9f3 	udiv	r9, ip, r3
 8008ed4:	4635      	mov	r5, r6
 8008ed6:	fb03 ca19 	mls	sl, r3, r9, ip
 8008eda:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008ede:	2f09      	cmp	r7, #9
 8008ee0:	d818      	bhi.n	8008f14 <_strtol_l.isra.0+0xac>
 8008ee2:	463c      	mov	r4, r7
 8008ee4:	42a3      	cmp	r3, r4
 8008ee6:	dd24      	ble.n	8008f32 <_strtol_l.isra.0+0xca>
 8008ee8:	2e00      	cmp	r6, #0
 8008eea:	db1f      	blt.n	8008f2c <_strtol_l.isra.0+0xc4>
 8008eec:	45a9      	cmp	r9, r5
 8008eee:	d31d      	bcc.n	8008f2c <_strtol_l.isra.0+0xc4>
 8008ef0:	d101      	bne.n	8008ef6 <_strtol_l.isra.0+0x8e>
 8008ef2:	45a2      	cmp	sl, r4
 8008ef4:	db1a      	blt.n	8008f2c <_strtol_l.isra.0+0xc4>
 8008ef6:	fb05 4503 	mla	r5, r5, r3, r4
 8008efa:	2601      	movs	r6, #1
 8008efc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008f00:	e7eb      	b.n	8008eda <_strtol_l.isra.0+0x72>
 8008f02:	2c2b      	cmp	r4, #43	; 0x2b
 8008f04:	bf08      	it	eq
 8008f06:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008f0a:	46a8      	mov	r8, r5
 8008f0c:	bf08      	it	eq
 8008f0e:	f106 0e02 	addeq.w	lr, r6, #2
 8008f12:	e7c7      	b.n	8008ea4 <_strtol_l.isra.0+0x3c>
 8008f14:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008f18:	2f19      	cmp	r7, #25
 8008f1a:	d801      	bhi.n	8008f20 <_strtol_l.isra.0+0xb8>
 8008f1c:	3c37      	subs	r4, #55	; 0x37
 8008f1e:	e7e1      	b.n	8008ee4 <_strtol_l.isra.0+0x7c>
 8008f20:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008f24:	2f19      	cmp	r7, #25
 8008f26:	d804      	bhi.n	8008f32 <_strtol_l.isra.0+0xca>
 8008f28:	3c57      	subs	r4, #87	; 0x57
 8008f2a:	e7db      	b.n	8008ee4 <_strtol_l.isra.0+0x7c>
 8008f2c:	f04f 36ff 	mov.w	r6, #4294967295
 8008f30:	e7e4      	b.n	8008efc <_strtol_l.isra.0+0x94>
 8008f32:	2e00      	cmp	r6, #0
 8008f34:	da05      	bge.n	8008f42 <_strtol_l.isra.0+0xda>
 8008f36:	2322      	movs	r3, #34	; 0x22
 8008f38:	6003      	str	r3, [r0, #0]
 8008f3a:	4665      	mov	r5, ip
 8008f3c:	b942      	cbnz	r2, 8008f50 <_strtol_l.isra.0+0xe8>
 8008f3e:	4628      	mov	r0, r5
 8008f40:	e79d      	b.n	8008e7e <_strtol_l.isra.0+0x16>
 8008f42:	f1b8 0f00 	cmp.w	r8, #0
 8008f46:	d000      	beq.n	8008f4a <_strtol_l.isra.0+0xe2>
 8008f48:	426d      	negs	r5, r5
 8008f4a:	2a00      	cmp	r2, #0
 8008f4c:	d0f7      	beq.n	8008f3e <_strtol_l.isra.0+0xd6>
 8008f4e:	b10e      	cbz	r6, 8008f54 <_strtol_l.isra.0+0xec>
 8008f50:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008f54:	6011      	str	r1, [r2, #0]
 8008f56:	e7f2      	b.n	8008f3e <_strtol_l.isra.0+0xd6>
 8008f58:	2430      	movs	r4, #48	; 0x30
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1b3      	bne.n	8008ec6 <_strtol_l.isra.0+0x5e>
 8008f5e:	2308      	movs	r3, #8
 8008f60:	e7b1      	b.n	8008ec6 <_strtol_l.isra.0+0x5e>
 8008f62:	2c30      	cmp	r4, #48	; 0x30
 8008f64:	d0a4      	beq.n	8008eb0 <_strtol_l.isra.0+0x48>
 8008f66:	230a      	movs	r3, #10
 8008f68:	e7ad      	b.n	8008ec6 <_strtol_l.isra.0+0x5e>
 8008f6a:	bf00      	nop
 8008f6c:	0800c069 	.word	0x0800c069

08008f70 <_strtol_r>:
 8008f70:	f7ff bf7a 	b.w	8008e68 <_strtol_l.isra.0>

08008f74 <__swbuf_r>:
 8008f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f76:	460e      	mov	r6, r1
 8008f78:	4614      	mov	r4, r2
 8008f7a:	4605      	mov	r5, r0
 8008f7c:	b118      	cbz	r0, 8008f86 <__swbuf_r+0x12>
 8008f7e:	6983      	ldr	r3, [r0, #24]
 8008f80:	b90b      	cbnz	r3, 8008f86 <__swbuf_r+0x12>
 8008f82:	f000 ffe1 	bl	8009f48 <__sinit>
 8008f86:	4b21      	ldr	r3, [pc, #132]	; (800900c <__swbuf_r+0x98>)
 8008f88:	429c      	cmp	r4, r3
 8008f8a:	d12b      	bne.n	8008fe4 <__swbuf_r+0x70>
 8008f8c:	686c      	ldr	r4, [r5, #4]
 8008f8e:	69a3      	ldr	r3, [r4, #24]
 8008f90:	60a3      	str	r3, [r4, #8]
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	071a      	lsls	r2, r3, #28
 8008f96:	d52f      	bpl.n	8008ff8 <__swbuf_r+0x84>
 8008f98:	6923      	ldr	r3, [r4, #16]
 8008f9a:	b36b      	cbz	r3, 8008ff8 <__swbuf_r+0x84>
 8008f9c:	6923      	ldr	r3, [r4, #16]
 8008f9e:	6820      	ldr	r0, [r4, #0]
 8008fa0:	1ac0      	subs	r0, r0, r3
 8008fa2:	6963      	ldr	r3, [r4, #20]
 8008fa4:	b2f6      	uxtb	r6, r6
 8008fa6:	4283      	cmp	r3, r0
 8008fa8:	4637      	mov	r7, r6
 8008faa:	dc04      	bgt.n	8008fb6 <__swbuf_r+0x42>
 8008fac:	4621      	mov	r1, r4
 8008fae:	4628      	mov	r0, r5
 8008fb0:	f000 ff36 	bl	8009e20 <_fflush_r>
 8008fb4:	bb30      	cbnz	r0, 8009004 <__swbuf_r+0x90>
 8008fb6:	68a3      	ldr	r3, [r4, #8]
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	60a3      	str	r3, [r4, #8]
 8008fbc:	6823      	ldr	r3, [r4, #0]
 8008fbe:	1c5a      	adds	r2, r3, #1
 8008fc0:	6022      	str	r2, [r4, #0]
 8008fc2:	701e      	strb	r6, [r3, #0]
 8008fc4:	6963      	ldr	r3, [r4, #20]
 8008fc6:	3001      	adds	r0, #1
 8008fc8:	4283      	cmp	r3, r0
 8008fca:	d004      	beq.n	8008fd6 <__swbuf_r+0x62>
 8008fcc:	89a3      	ldrh	r3, [r4, #12]
 8008fce:	07db      	lsls	r3, r3, #31
 8008fd0:	d506      	bpl.n	8008fe0 <__swbuf_r+0x6c>
 8008fd2:	2e0a      	cmp	r6, #10
 8008fd4:	d104      	bne.n	8008fe0 <__swbuf_r+0x6c>
 8008fd6:	4621      	mov	r1, r4
 8008fd8:	4628      	mov	r0, r5
 8008fda:	f000 ff21 	bl	8009e20 <_fflush_r>
 8008fde:	b988      	cbnz	r0, 8009004 <__swbuf_r+0x90>
 8008fe0:	4638      	mov	r0, r7
 8008fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fe4:	4b0a      	ldr	r3, [pc, #40]	; (8009010 <__swbuf_r+0x9c>)
 8008fe6:	429c      	cmp	r4, r3
 8008fe8:	d101      	bne.n	8008fee <__swbuf_r+0x7a>
 8008fea:	68ac      	ldr	r4, [r5, #8]
 8008fec:	e7cf      	b.n	8008f8e <__swbuf_r+0x1a>
 8008fee:	4b09      	ldr	r3, [pc, #36]	; (8009014 <__swbuf_r+0xa0>)
 8008ff0:	429c      	cmp	r4, r3
 8008ff2:	bf08      	it	eq
 8008ff4:	68ec      	ldreq	r4, [r5, #12]
 8008ff6:	e7ca      	b.n	8008f8e <__swbuf_r+0x1a>
 8008ff8:	4621      	mov	r1, r4
 8008ffa:	4628      	mov	r0, r5
 8008ffc:	f000 f80c 	bl	8009018 <__swsetup_r>
 8009000:	2800      	cmp	r0, #0
 8009002:	d0cb      	beq.n	8008f9c <__swbuf_r+0x28>
 8009004:	f04f 37ff 	mov.w	r7, #4294967295
 8009008:	e7ea      	b.n	8008fe0 <__swbuf_r+0x6c>
 800900a:	bf00      	nop
 800900c:	0800c220 	.word	0x0800c220
 8009010:	0800c240 	.word	0x0800c240
 8009014:	0800c200 	.word	0x0800c200

08009018 <__swsetup_r>:
 8009018:	4b32      	ldr	r3, [pc, #200]	; (80090e4 <__swsetup_r+0xcc>)
 800901a:	b570      	push	{r4, r5, r6, lr}
 800901c:	681d      	ldr	r5, [r3, #0]
 800901e:	4606      	mov	r6, r0
 8009020:	460c      	mov	r4, r1
 8009022:	b125      	cbz	r5, 800902e <__swsetup_r+0x16>
 8009024:	69ab      	ldr	r3, [r5, #24]
 8009026:	b913      	cbnz	r3, 800902e <__swsetup_r+0x16>
 8009028:	4628      	mov	r0, r5
 800902a:	f000 ff8d 	bl	8009f48 <__sinit>
 800902e:	4b2e      	ldr	r3, [pc, #184]	; (80090e8 <__swsetup_r+0xd0>)
 8009030:	429c      	cmp	r4, r3
 8009032:	d10f      	bne.n	8009054 <__swsetup_r+0x3c>
 8009034:	686c      	ldr	r4, [r5, #4]
 8009036:	89a3      	ldrh	r3, [r4, #12]
 8009038:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800903c:	0719      	lsls	r1, r3, #28
 800903e:	d42c      	bmi.n	800909a <__swsetup_r+0x82>
 8009040:	06dd      	lsls	r5, r3, #27
 8009042:	d411      	bmi.n	8009068 <__swsetup_r+0x50>
 8009044:	2309      	movs	r3, #9
 8009046:	6033      	str	r3, [r6, #0]
 8009048:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800904c:	81a3      	strh	r3, [r4, #12]
 800904e:	f04f 30ff 	mov.w	r0, #4294967295
 8009052:	e03e      	b.n	80090d2 <__swsetup_r+0xba>
 8009054:	4b25      	ldr	r3, [pc, #148]	; (80090ec <__swsetup_r+0xd4>)
 8009056:	429c      	cmp	r4, r3
 8009058:	d101      	bne.n	800905e <__swsetup_r+0x46>
 800905a:	68ac      	ldr	r4, [r5, #8]
 800905c:	e7eb      	b.n	8009036 <__swsetup_r+0x1e>
 800905e:	4b24      	ldr	r3, [pc, #144]	; (80090f0 <__swsetup_r+0xd8>)
 8009060:	429c      	cmp	r4, r3
 8009062:	bf08      	it	eq
 8009064:	68ec      	ldreq	r4, [r5, #12]
 8009066:	e7e6      	b.n	8009036 <__swsetup_r+0x1e>
 8009068:	0758      	lsls	r0, r3, #29
 800906a:	d512      	bpl.n	8009092 <__swsetup_r+0x7a>
 800906c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800906e:	b141      	cbz	r1, 8009082 <__swsetup_r+0x6a>
 8009070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009074:	4299      	cmp	r1, r3
 8009076:	d002      	beq.n	800907e <__swsetup_r+0x66>
 8009078:	4630      	mov	r0, r6
 800907a:	f002 f8d1 	bl	800b220 <_free_r>
 800907e:	2300      	movs	r3, #0
 8009080:	6363      	str	r3, [r4, #52]	; 0x34
 8009082:	89a3      	ldrh	r3, [r4, #12]
 8009084:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009088:	81a3      	strh	r3, [r4, #12]
 800908a:	2300      	movs	r3, #0
 800908c:	6063      	str	r3, [r4, #4]
 800908e:	6923      	ldr	r3, [r4, #16]
 8009090:	6023      	str	r3, [r4, #0]
 8009092:	89a3      	ldrh	r3, [r4, #12]
 8009094:	f043 0308 	orr.w	r3, r3, #8
 8009098:	81a3      	strh	r3, [r4, #12]
 800909a:	6923      	ldr	r3, [r4, #16]
 800909c:	b94b      	cbnz	r3, 80090b2 <__swsetup_r+0x9a>
 800909e:	89a3      	ldrh	r3, [r4, #12]
 80090a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090a8:	d003      	beq.n	80090b2 <__swsetup_r+0x9a>
 80090aa:	4621      	mov	r1, r4
 80090ac:	4630      	mov	r0, r6
 80090ae:	f001 fb83 	bl	800a7b8 <__smakebuf_r>
 80090b2:	89a0      	ldrh	r0, [r4, #12]
 80090b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090b8:	f010 0301 	ands.w	r3, r0, #1
 80090bc:	d00a      	beq.n	80090d4 <__swsetup_r+0xbc>
 80090be:	2300      	movs	r3, #0
 80090c0:	60a3      	str	r3, [r4, #8]
 80090c2:	6963      	ldr	r3, [r4, #20]
 80090c4:	425b      	negs	r3, r3
 80090c6:	61a3      	str	r3, [r4, #24]
 80090c8:	6923      	ldr	r3, [r4, #16]
 80090ca:	b943      	cbnz	r3, 80090de <__swsetup_r+0xc6>
 80090cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80090d0:	d1ba      	bne.n	8009048 <__swsetup_r+0x30>
 80090d2:	bd70      	pop	{r4, r5, r6, pc}
 80090d4:	0781      	lsls	r1, r0, #30
 80090d6:	bf58      	it	pl
 80090d8:	6963      	ldrpl	r3, [r4, #20]
 80090da:	60a3      	str	r3, [r4, #8]
 80090dc:	e7f4      	b.n	80090c8 <__swsetup_r+0xb0>
 80090de:	2000      	movs	r0, #0
 80090e0:	e7f7      	b.n	80090d2 <__swsetup_r+0xba>
 80090e2:	bf00      	nop
 80090e4:	20000010 	.word	0x20000010
 80090e8:	0800c220 	.word	0x0800c220
 80090ec:	0800c240 	.word	0x0800c240
 80090f0:	0800c200 	.word	0x0800c200

080090f4 <quorem>:
 80090f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f8:	6903      	ldr	r3, [r0, #16]
 80090fa:	690c      	ldr	r4, [r1, #16]
 80090fc:	42a3      	cmp	r3, r4
 80090fe:	4607      	mov	r7, r0
 8009100:	f2c0 8081 	blt.w	8009206 <quorem+0x112>
 8009104:	3c01      	subs	r4, #1
 8009106:	f101 0814 	add.w	r8, r1, #20
 800910a:	f100 0514 	add.w	r5, r0, #20
 800910e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009112:	9301      	str	r3, [sp, #4]
 8009114:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009118:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800911c:	3301      	adds	r3, #1
 800911e:	429a      	cmp	r2, r3
 8009120:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009124:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009128:	fbb2 f6f3 	udiv	r6, r2, r3
 800912c:	d331      	bcc.n	8009192 <quorem+0x9e>
 800912e:	f04f 0e00 	mov.w	lr, #0
 8009132:	4640      	mov	r0, r8
 8009134:	46ac      	mov	ip, r5
 8009136:	46f2      	mov	sl, lr
 8009138:	f850 2b04 	ldr.w	r2, [r0], #4
 800913c:	b293      	uxth	r3, r2
 800913e:	fb06 e303 	mla	r3, r6, r3, lr
 8009142:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009146:	b29b      	uxth	r3, r3
 8009148:	ebaa 0303 	sub.w	r3, sl, r3
 800914c:	0c12      	lsrs	r2, r2, #16
 800914e:	f8dc a000 	ldr.w	sl, [ip]
 8009152:	fb06 e202 	mla	r2, r6, r2, lr
 8009156:	fa13 f38a 	uxtah	r3, r3, sl
 800915a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800915e:	fa1f fa82 	uxth.w	sl, r2
 8009162:	f8dc 2000 	ldr.w	r2, [ip]
 8009166:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800916a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800916e:	b29b      	uxth	r3, r3
 8009170:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009174:	4581      	cmp	r9, r0
 8009176:	f84c 3b04 	str.w	r3, [ip], #4
 800917a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800917e:	d2db      	bcs.n	8009138 <quorem+0x44>
 8009180:	f855 300b 	ldr.w	r3, [r5, fp]
 8009184:	b92b      	cbnz	r3, 8009192 <quorem+0x9e>
 8009186:	9b01      	ldr	r3, [sp, #4]
 8009188:	3b04      	subs	r3, #4
 800918a:	429d      	cmp	r5, r3
 800918c:	461a      	mov	r2, r3
 800918e:	d32e      	bcc.n	80091ee <quorem+0xfa>
 8009190:	613c      	str	r4, [r7, #16]
 8009192:	4638      	mov	r0, r7
 8009194:	f001 fe40 	bl	800ae18 <__mcmp>
 8009198:	2800      	cmp	r0, #0
 800919a:	db24      	blt.n	80091e6 <quorem+0xf2>
 800919c:	3601      	adds	r6, #1
 800919e:	4628      	mov	r0, r5
 80091a0:	f04f 0c00 	mov.w	ip, #0
 80091a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80091a8:	f8d0 e000 	ldr.w	lr, [r0]
 80091ac:	b293      	uxth	r3, r2
 80091ae:	ebac 0303 	sub.w	r3, ip, r3
 80091b2:	0c12      	lsrs	r2, r2, #16
 80091b4:	fa13 f38e 	uxtah	r3, r3, lr
 80091b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80091bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80091c6:	45c1      	cmp	r9, r8
 80091c8:	f840 3b04 	str.w	r3, [r0], #4
 80091cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80091d0:	d2e8      	bcs.n	80091a4 <quorem+0xb0>
 80091d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091da:	b922      	cbnz	r2, 80091e6 <quorem+0xf2>
 80091dc:	3b04      	subs	r3, #4
 80091de:	429d      	cmp	r5, r3
 80091e0:	461a      	mov	r2, r3
 80091e2:	d30a      	bcc.n	80091fa <quorem+0x106>
 80091e4:	613c      	str	r4, [r7, #16]
 80091e6:	4630      	mov	r0, r6
 80091e8:	b003      	add	sp, #12
 80091ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ee:	6812      	ldr	r2, [r2, #0]
 80091f0:	3b04      	subs	r3, #4
 80091f2:	2a00      	cmp	r2, #0
 80091f4:	d1cc      	bne.n	8009190 <quorem+0x9c>
 80091f6:	3c01      	subs	r4, #1
 80091f8:	e7c7      	b.n	800918a <quorem+0x96>
 80091fa:	6812      	ldr	r2, [r2, #0]
 80091fc:	3b04      	subs	r3, #4
 80091fe:	2a00      	cmp	r2, #0
 8009200:	d1f0      	bne.n	80091e4 <quorem+0xf0>
 8009202:	3c01      	subs	r4, #1
 8009204:	e7eb      	b.n	80091de <quorem+0xea>
 8009206:	2000      	movs	r0, #0
 8009208:	e7ee      	b.n	80091e8 <quorem+0xf4>
 800920a:	0000      	movs	r0, r0
 800920c:	0000      	movs	r0, r0
	...

08009210 <_dtoa_r>:
 8009210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009214:	ec59 8b10 	vmov	r8, r9, d0
 8009218:	b095      	sub	sp, #84	; 0x54
 800921a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800921c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800921e:	9107      	str	r1, [sp, #28]
 8009220:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009224:	4606      	mov	r6, r0
 8009226:	9209      	str	r2, [sp, #36]	; 0x24
 8009228:	9310      	str	r3, [sp, #64]	; 0x40
 800922a:	b975      	cbnz	r5, 800924a <_dtoa_r+0x3a>
 800922c:	2010      	movs	r0, #16
 800922e:	f001 fb03 	bl	800a838 <malloc>
 8009232:	4602      	mov	r2, r0
 8009234:	6270      	str	r0, [r6, #36]	; 0x24
 8009236:	b920      	cbnz	r0, 8009242 <_dtoa_r+0x32>
 8009238:	4bab      	ldr	r3, [pc, #684]	; (80094e8 <_dtoa_r+0x2d8>)
 800923a:	21ea      	movs	r1, #234	; 0xea
 800923c:	48ab      	ldr	r0, [pc, #684]	; (80094ec <_dtoa_r+0x2dc>)
 800923e:	f002 fc23 	bl	800ba88 <__assert_func>
 8009242:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009246:	6005      	str	r5, [r0, #0]
 8009248:	60c5      	str	r5, [r0, #12]
 800924a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800924c:	6819      	ldr	r1, [r3, #0]
 800924e:	b151      	cbz	r1, 8009266 <_dtoa_r+0x56>
 8009250:	685a      	ldr	r2, [r3, #4]
 8009252:	604a      	str	r2, [r1, #4]
 8009254:	2301      	movs	r3, #1
 8009256:	4093      	lsls	r3, r2
 8009258:	608b      	str	r3, [r1, #8]
 800925a:	4630      	mov	r0, r6
 800925c:	f001 fb54 	bl	800a908 <_Bfree>
 8009260:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009262:	2200      	movs	r2, #0
 8009264:	601a      	str	r2, [r3, #0]
 8009266:	f1b9 0300 	subs.w	r3, r9, #0
 800926a:	bfbb      	ittet	lt
 800926c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009270:	9303      	strlt	r3, [sp, #12]
 8009272:	2300      	movge	r3, #0
 8009274:	2201      	movlt	r2, #1
 8009276:	bfac      	ite	ge
 8009278:	6023      	strge	r3, [r4, #0]
 800927a:	6022      	strlt	r2, [r4, #0]
 800927c:	4b9c      	ldr	r3, [pc, #624]	; (80094f0 <_dtoa_r+0x2e0>)
 800927e:	9c03      	ldr	r4, [sp, #12]
 8009280:	43a3      	bics	r3, r4
 8009282:	d11a      	bne.n	80092ba <_dtoa_r+0xaa>
 8009284:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009286:	f242 730f 	movw	r3, #9999	; 0x270f
 800928a:	6013      	str	r3, [r2, #0]
 800928c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009290:	ea53 0308 	orrs.w	r3, r3, r8
 8009294:	f000 8512 	beq.w	8009cbc <_dtoa_r+0xaac>
 8009298:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800929a:	b953      	cbnz	r3, 80092b2 <_dtoa_r+0xa2>
 800929c:	4b95      	ldr	r3, [pc, #596]	; (80094f4 <_dtoa_r+0x2e4>)
 800929e:	e01f      	b.n	80092e0 <_dtoa_r+0xd0>
 80092a0:	4b95      	ldr	r3, [pc, #596]	; (80094f8 <_dtoa_r+0x2e8>)
 80092a2:	9300      	str	r3, [sp, #0]
 80092a4:	3308      	adds	r3, #8
 80092a6:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80092a8:	6013      	str	r3, [r2, #0]
 80092aa:	9800      	ldr	r0, [sp, #0]
 80092ac:	b015      	add	sp, #84	; 0x54
 80092ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b2:	4b90      	ldr	r3, [pc, #576]	; (80094f4 <_dtoa_r+0x2e4>)
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	3303      	adds	r3, #3
 80092b8:	e7f5      	b.n	80092a6 <_dtoa_r+0x96>
 80092ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80092c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80092ca:	d10b      	bne.n	80092e4 <_dtoa_r+0xd4>
 80092cc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80092ce:	2301      	movs	r3, #1
 80092d0:	6013      	str	r3, [r2, #0]
 80092d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	f000 84ee 	beq.w	8009cb6 <_dtoa_r+0xaa6>
 80092da:	4888      	ldr	r0, [pc, #544]	; (80094fc <_dtoa_r+0x2ec>)
 80092dc:	6018      	str	r0, [r3, #0]
 80092de:	1e43      	subs	r3, r0, #1
 80092e0:	9300      	str	r3, [sp, #0]
 80092e2:	e7e2      	b.n	80092aa <_dtoa_r+0x9a>
 80092e4:	a913      	add	r1, sp, #76	; 0x4c
 80092e6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80092ea:	aa12      	add	r2, sp, #72	; 0x48
 80092ec:	4630      	mov	r0, r6
 80092ee:	f001 feb3 	bl	800b058 <__d2b>
 80092f2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80092f6:	4605      	mov	r5, r0
 80092f8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80092fa:	2900      	cmp	r1, #0
 80092fc:	d047      	beq.n	800938e <_dtoa_r+0x17e>
 80092fe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009300:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009304:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009308:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800930c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009310:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009314:	2400      	movs	r4, #0
 8009316:	ec43 2b16 	vmov	d6, r2, r3
 800931a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800931e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 80094d0 <_dtoa_r+0x2c0>
 8009322:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009326:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 80094d8 <_dtoa_r+0x2c8>
 800932a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800932e:	eeb0 7b46 	vmov.f64	d7, d6
 8009332:	ee06 1a90 	vmov	s13, r1
 8009336:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800933a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 80094e0 <_dtoa_r+0x2d0>
 800933e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009342:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009346:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800934a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800934e:	ee16 ba90 	vmov	fp, s13
 8009352:	9411      	str	r4, [sp, #68]	; 0x44
 8009354:	d508      	bpl.n	8009368 <_dtoa_r+0x158>
 8009356:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800935a:	eeb4 6b47 	vcmp.f64	d6, d7
 800935e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009362:	bf18      	it	ne
 8009364:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009368:	f1bb 0f16 	cmp.w	fp, #22
 800936c:	d832      	bhi.n	80093d4 <_dtoa_r+0x1c4>
 800936e:	4b64      	ldr	r3, [pc, #400]	; (8009500 <_dtoa_r+0x2f0>)
 8009370:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009374:	ed93 7b00 	vldr	d7, [r3]
 8009378:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800937c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009384:	d501      	bpl.n	800938a <_dtoa_r+0x17a>
 8009386:	f10b 3bff 	add.w	fp, fp, #4294967295
 800938a:	2300      	movs	r3, #0
 800938c:	e023      	b.n	80093d6 <_dtoa_r+0x1c6>
 800938e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009390:	4401      	add	r1, r0
 8009392:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009396:	2b20      	cmp	r3, #32
 8009398:	bfc3      	ittte	gt
 800939a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800939e:	fa04 f303 	lslgt.w	r3, r4, r3
 80093a2:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80093a6:	f1c3 0320 	rsble	r3, r3, #32
 80093aa:	bfc6      	itte	gt
 80093ac:	fa28 f804 	lsrgt.w	r8, r8, r4
 80093b0:	ea43 0308 	orrgt.w	r3, r3, r8
 80093b4:	fa08 f303 	lslle.w	r3, r8, r3
 80093b8:	ee07 3a90 	vmov	s15, r3
 80093bc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80093c0:	3901      	subs	r1, #1
 80093c2:	ed8d 7b00 	vstr	d7, [sp]
 80093c6:	9c01      	ldr	r4, [sp, #4]
 80093c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093cc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80093d0:	2401      	movs	r4, #1
 80093d2:	e7a0      	b.n	8009316 <_dtoa_r+0x106>
 80093d4:	2301      	movs	r3, #1
 80093d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80093d8:	1a43      	subs	r3, r0, r1
 80093da:	1e5a      	subs	r2, r3, #1
 80093dc:	bf45      	ittet	mi
 80093de:	f1c3 0301 	rsbmi	r3, r3, #1
 80093e2:	9305      	strmi	r3, [sp, #20]
 80093e4:	2300      	movpl	r3, #0
 80093e6:	2300      	movmi	r3, #0
 80093e8:	9206      	str	r2, [sp, #24]
 80093ea:	bf54      	ite	pl
 80093ec:	9305      	strpl	r3, [sp, #20]
 80093ee:	9306      	strmi	r3, [sp, #24]
 80093f0:	f1bb 0f00 	cmp.w	fp, #0
 80093f4:	db18      	blt.n	8009428 <_dtoa_r+0x218>
 80093f6:	9b06      	ldr	r3, [sp, #24]
 80093f8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80093fc:	445b      	add	r3, fp
 80093fe:	9306      	str	r3, [sp, #24]
 8009400:	2300      	movs	r3, #0
 8009402:	9a07      	ldr	r2, [sp, #28]
 8009404:	2a09      	cmp	r2, #9
 8009406:	d849      	bhi.n	800949c <_dtoa_r+0x28c>
 8009408:	2a05      	cmp	r2, #5
 800940a:	bfc4      	itt	gt
 800940c:	3a04      	subgt	r2, #4
 800940e:	9207      	strgt	r2, [sp, #28]
 8009410:	9a07      	ldr	r2, [sp, #28]
 8009412:	f1a2 0202 	sub.w	r2, r2, #2
 8009416:	bfcc      	ite	gt
 8009418:	2400      	movgt	r4, #0
 800941a:	2401      	movle	r4, #1
 800941c:	2a03      	cmp	r2, #3
 800941e:	d848      	bhi.n	80094b2 <_dtoa_r+0x2a2>
 8009420:	e8df f002 	tbb	[pc, r2]
 8009424:	3a2c2e0b 	.word	0x3a2c2e0b
 8009428:	9b05      	ldr	r3, [sp, #20]
 800942a:	2200      	movs	r2, #0
 800942c:	eba3 030b 	sub.w	r3, r3, fp
 8009430:	9305      	str	r3, [sp, #20]
 8009432:	920e      	str	r2, [sp, #56]	; 0x38
 8009434:	f1cb 0300 	rsb	r3, fp, #0
 8009438:	e7e3      	b.n	8009402 <_dtoa_r+0x1f2>
 800943a:	2200      	movs	r2, #0
 800943c:	9208      	str	r2, [sp, #32]
 800943e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009440:	2a00      	cmp	r2, #0
 8009442:	dc39      	bgt.n	80094b8 <_dtoa_r+0x2a8>
 8009444:	f04f 0a01 	mov.w	sl, #1
 8009448:	46d1      	mov	r9, sl
 800944a:	4652      	mov	r2, sl
 800944c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009450:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009452:	2100      	movs	r1, #0
 8009454:	6079      	str	r1, [r7, #4]
 8009456:	2004      	movs	r0, #4
 8009458:	f100 0c14 	add.w	ip, r0, #20
 800945c:	4594      	cmp	ip, r2
 800945e:	6879      	ldr	r1, [r7, #4]
 8009460:	d92f      	bls.n	80094c2 <_dtoa_r+0x2b2>
 8009462:	4630      	mov	r0, r6
 8009464:	930c      	str	r3, [sp, #48]	; 0x30
 8009466:	f001 fa0f 	bl	800a888 <_Balloc>
 800946a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800946c:	9000      	str	r0, [sp, #0]
 800946e:	4602      	mov	r2, r0
 8009470:	2800      	cmp	r0, #0
 8009472:	d149      	bne.n	8009508 <_dtoa_r+0x2f8>
 8009474:	4b23      	ldr	r3, [pc, #140]	; (8009504 <_dtoa_r+0x2f4>)
 8009476:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800947a:	e6df      	b.n	800923c <_dtoa_r+0x2c>
 800947c:	2201      	movs	r2, #1
 800947e:	e7dd      	b.n	800943c <_dtoa_r+0x22c>
 8009480:	2200      	movs	r2, #0
 8009482:	9208      	str	r2, [sp, #32]
 8009484:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009486:	eb0b 0a02 	add.w	sl, fp, r2
 800948a:	f10a 0901 	add.w	r9, sl, #1
 800948e:	464a      	mov	r2, r9
 8009490:	2a01      	cmp	r2, #1
 8009492:	bfb8      	it	lt
 8009494:	2201      	movlt	r2, #1
 8009496:	e7db      	b.n	8009450 <_dtoa_r+0x240>
 8009498:	2201      	movs	r2, #1
 800949a:	e7f2      	b.n	8009482 <_dtoa_r+0x272>
 800949c:	2401      	movs	r4, #1
 800949e:	2200      	movs	r2, #0
 80094a0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80094a4:	f04f 3aff 	mov.w	sl, #4294967295
 80094a8:	2100      	movs	r1, #0
 80094aa:	46d1      	mov	r9, sl
 80094ac:	2212      	movs	r2, #18
 80094ae:	9109      	str	r1, [sp, #36]	; 0x24
 80094b0:	e7ce      	b.n	8009450 <_dtoa_r+0x240>
 80094b2:	2201      	movs	r2, #1
 80094b4:	9208      	str	r2, [sp, #32]
 80094b6:	e7f5      	b.n	80094a4 <_dtoa_r+0x294>
 80094b8:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 80094bc:	46d1      	mov	r9, sl
 80094be:	4652      	mov	r2, sl
 80094c0:	e7c6      	b.n	8009450 <_dtoa_r+0x240>
 80094c2:	3101      	adds	r1, #1
 80094c4:	6079      	str	r1, [r7, #4]
 80094c6:	0040      	lsls	r0, r0, #1
 80094c8:	e7c6      	b.n	8009458 <_dtoa_r+0x248>
 80094ca:	bf00      	nop
 80094cc:	f3af 8000 	nop.w
 80094d0:	636f4361 	.word	0x636f4361
 80094d4:	3fd287a7 	.word	0x3fd287a7
 80094d8:	8b60c8b3 	.word	0x8b60c8b3
 80094dc:	3fc68a28 	.word	0x3fc68a28
 80094e0:	509f79fb 	.word	0x509f79fb
 80094e4:	3fd34413 	.word	0x3fd34413
 80094e8:	0800c176 	.word	0x0800c176
 80094ec:	0800c18d 	.word	0x0800c18d
 80094f0:	7ff00000 	.word	0x7ff00000
 80094f4:	0800c172 	.word	0x0800c172
 80094f8:	0800c169 	.word	0x0800c169
 80094fc:	0800bfe9 	.word	0x0800bfe9
 8009500:	0800c368 	.word	0x0800c368
 8009504:	0800c1ec 	.word	0x0800c1ec
 8009508:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800950a:	9900      	ldr	r1, [sp, #0]
 800950c:	6011      	str	r1, [r2, #0]
 800950e:	f1b9 0f0e 	cmp.w	r9, #14
 8009512:	d872      	bhi.n	80095fa <_dtoa_r+0x3ea>
 8009514:	2c00      	cmp	r4, #0
 8009516:	d070      	beq.n	80095fa <_dtoa_r+0x3ea>
 8009518:	f1bb 0f00 	cmp.w	fp, #0
 800951c:	f340 80a6 	ble.w	800966c <_dtoa_r+0x45c>
 8009520:	49ca      	ldr	r1, [pc, #808]	; (800984c <_dtoa_r+0x63c>)
 8009522:	f00b 020f 	and.w	r2, fp, #15
 8009526:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800952a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800952e:	ed92 7b00 	vldr	d7, [r2]
 8009532:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009536:	f000 808d 	beq.w	8009654 <_dtoa_r+0x444>
 800953a:	4ac5      	ldr	r2, [pc, #788]	; (8009850 <_dtoa_r+0x640>)
 800953c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8009540:	ed92 6b08 	vldr	d6, [r2, #32]
 8009544:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8009548:	ed8d 6b02 	vstr	d6, [sp, #8]
 800954c:	f001 010f 	and.w	r1, r1, #15
 8009550:	2203      	movs	r2, #3
 8009552:	48bf      	ldr	r0, [pc, #764]	; (8009850 <_dtoa_r+0x640>)
 8009554:	2900      	cmp	r1, #0
 8009556:	d17f      	bne.n	8009658 <_dtoa_r+0x448>
 8009558:	ed9d 6b02 	vldr	d6, [sp, #8]
 800955c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009560:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009564:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009566:	2900      	cmp	r1, #0
 8009568:	f000 80b2 	beq.w	80096d0 <_dtoa_r+0x4c0>
 800956c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009570:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009574:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800957c:	f140 80a8 	bpl.w	80096d0 <_dtoa_r+0x4c0>
 8009580:	f1b9 0f00 	cmp.w	r9, #0
 8009584:	f000 80a4 	beq.w	80096d0 <_dtoa_r+0x4c0>
 8009588:	f1ba 0f00 	cmp.w	sl, #0
 800958c:	dd31      	ble.n	80095f2 <_dtoa_r+0x3e2>
 800958e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009592:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009596:	ed8d 7b02 	vstr	d7, [sp, #8]
 800959a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800959e:	3201      	adds	r2, #1
 80095a0:	4650      	mov	r0, sl
 80095a2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80095a6:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80095aa:	ee07 2a90 	vmov	s15, r2
 80095ae:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80095b2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80095b6:	ed8d 5b02 	vstr	d5, [sp, #8]
 80095ba:	9c03      	ldr	r4, [sp, #12]
 80095bc:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80095c0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80095c4:	2800      	cmp	r0, #0
 80095c6:	f040 8086 	bne.w	80096d6 <_dtoa_r+0x4c6>
 80095ca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80095ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 80095d2:	ec42 1b17 	vmov	d7, r1, r2
 80095d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80095da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095de:	f300 8272 	bgt.w	8009ac6 <_dtoa_r+0x8b6>
 80095e2:	eeb1 7b47 	vneg.f64	d7, d7
 80095e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80095ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ee:	f100 8267 	bmi.w	8009ac0 <_dtoa_r+0x8b0>
 80095f2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80095f6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80095fa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80095fc:	2a00      	cmp	r2, #0
 80095fe:	f2c0 8129 	blt.w	8009854 <_dtoa_r+0x644>
 8009602:	f1bb 0f0e 	cmp.w	fp, #14
 8009606:	f300 8125 	bgt.w	8009854 <_dtoa_r+0x644>
 800960a:	4b90      	ldr	r3, [pc, #576]	; (800984c <_dtoa_r+0x63c>)
 800960c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009610:	ed93 6b00 	vldr	d6, [r3]
 8009614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009616:	2b00      	cmp	r3, #0
 8009618:	f280 80c3 	bge.w	80097a2 <_dtoa_r+0x592>
 800961c:	f1b9 0f00 	cmp.w	r9, #0
 8009620:	f300 80bf 	bgt.w	80097a2 <_dtoa_r+0x592>
 8009624:	f040 824c 	bne.w	8009ac0 <_dtoa_r+0x8b0>
 8009628:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800962c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009630:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009634:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800963c:	464c      	mov	r4, r9
 800963e:	464f      	mov	r7, r9
 8009640:	f280 8222 	bge.w	8009a88 <_dtoa_r+0x878>
 8009644:	f8dd 8000 	ldr.w	r8, [sp]
 8009648:	2331      	movs	r3, #49	; 0x31
 800964a:	f808 3b01 	strb.w	r3, [r8], #1
 800964e:	f10b 0b01 	add.w	fp, fp, #1
 8009652:	e21e      	b.n	8009a92 <_dtoa_r+0x882>
 8009654:	2202      	movs	r2, #2
 8009656:	e77c      	b.n	8009552 <_dtoa_r+0x342>
 8009658:	07cc      	lsls	r4, r1, #31
 800965a:	d504      	bpl.n	8009666 <_dtoa_r+0x456>
 800965c:	ed90 6b00 	vldr	d6, [r0]
 8009660:	3201      	adds	r2, #1
 8009662:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009666:	1049      	asrs	r1, r1, #1
 8009668:	3008      	adds	r0, #8
 800966a:	e773      	b.n	8009554 <_dtoa_r+0x344>
 800966c:	d02e      	beq.n	80096cc <_dtoa_r+0x4bc>
 800966e:	f1cb 0100 	rsb	r1, fp, #0
 8009672:	4a76      	ldr	r2, [pc, #472]	; (800984c <_dtoa_r+0x63c>)
 8009674:	f001 000f 	and.w	r0, r1, #15
 8009678:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800967c:	ed92 7b00 	vldr	d7, [r2]
 8009680:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8009684:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009688:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800968c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8009690:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8009694:	486e      	ldr	r0, [pc, #440]	; (8009850 <_dtoa_r+0x640>)
 8009696:	1109      	asrs	r1, r1, #4
 8009698:	2400      	movs	r4, #0
 800969a:	2202      	movs	r2, #2
 800969c:	b939      	cbnz	r1, 80096ae <_dtoa_r+0x49e>
 800969e:	2c00      	cmp	r4, #0
 80096a0:	f43f af60 	beq.w	8009564 <_dtoa_r+0x354>
 80096a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80096a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096ac:	e75a      	b.n	8009564 <_dtoa_r+0x354>
 80096ae:	07cf      	lsls	r7, r1, #31
 80096b0:	d509      	bpl.n	80096c6 <_dtoa_r+0x4b6>
 80096b2:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 80096b6:	ed90 7b00 	vldr	d7, [r0]
 80096ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 80096be:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80096c2:	3201      	adds	r2, #1
 80096c4:	2401      	movs	r4, #1
 80096c6:	1049      	asrs	r1, r1, #1
 80096c8:	3008      	adds	r0, #8
 80096ca:	e7e7      	b.n	800969c <_dtoa_r+0x48c>
 80096cc:	2202      	movs	r2, #2
 80096ce:	e749      	b.n	8009564 <_dtoa_r+0x354>
 80096d0:	465f      	mov	r7, fp
 80096d2:	4648      	mov	r0, r9
 80096d4:	e765      	b.n	80095a2 <_dtoa_r+0x392>
 80096d6:	ec42 1b17 	vmov	d7, r1, r2
 80096da:	4a5c      	ldr	r2, [pc, #368]	; (800984c <_dtoa_r+0x63c>)
 80096dc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80096e0:	ed12 4b02 	vldr	d4, [r2, #-8]
 80096e4:	9a00      	ldr	r2, [sp, #0]
 80096e6:	1814      	adds	r4, r2, r0
 80096e8:	9a08      	ldr	r2, [sp, #32]
 80096ea:	b352      	cbz	r2, 8009742 <_dtoa_r+0x532>
 80096ec:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80096f0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80096f4:	f8dd 8000 	ldr.w	r8, [sp]
 80096f8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80096fc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009700:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009704:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009708:	ee14 2a90 	vmov	r2, s9
 800970c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009710:	3230      	adds	r2, #48	; 0x30
 8009712:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009716:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800971a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800971e:	f808 2b01 	strb.w	r2, [r8], #1
 8009722:	d439      	bmi.n	8009798 <_dtoa_r+0x588>
 8009724:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009728:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800972c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009730:	d472      	bmi.n	8009818 <_dtoa_r+0x608>
 8009732:	45a0      	cmp	r8, r4
 8009734:	f43f af5d 	beq.w	80095f2 <_dtoa_r+0x3e2>
 8009738:	ee27 7b03 	vmul.f64	d7, d7, d3
 800973c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009740:	e7e0      	b.n	8009704 <_dtoa_r+0x4f4>
 8009742:	f8dd 8000 	ldr.w	r8, [sp]
 8009746:	ee27 7b04 	vmul.f64	d7, d7, d4
 800974a:	4621      	mov	r1, r4
 800974c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009750:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009754:	ee14 2a90 	vmov	r2, s9
 8009758:	3230      	adds	r2, #48	; 0x30
 800975a:	f808 2b01 	strb.w	r2, [r8], #1
 800975e:	45a0      	cmp	r8, r4
 8009760:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009764:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009768:	d118      	bne.n	800979c <_dtoa_r+0x58c>
 800976a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800976e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009772:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800977a:	dc4d      	bgt.n	8009818 <_dtoa_r+0x608>
 800977c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009780:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009788:	f57f af33 	bpl.w	80095f2 <_dtoa_r+0x3e2>
 800978c:	4688      	mov	r8, r1
 800978e:	3901      	subs	r1, #1
 8009790:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009794:	2b30      	cmp	r3, #48	; 0x30
 8009796:	d0f9      	beq.n	800978c <_dtoa_r+0x57c>
 8009798:	46bb      	mov	fp, r7
 800979a:	e02a      	b.n	80097f2 <_dtoa_r+0x5e2>
 800979c:	ee26 6b03 	vmul.f64	d6, d6, d3
 80097a0:	e7d6      	b.n	8009750 <_dtoa_r+0x540>
 80097a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80097a6:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80097aa:	f8dd 8000 	ldr.w	r8, [sp]
 80097ae:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80097b2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80097b6:	ee15 3a10 	vmov	r3, s10
 80097ba:	3330      	adds	r3, #48	; 0x30
 80097bc:	f808 3b01 	strb.w	r3, [r8], #1
 80097c0:	9b00      	ldr	r3, [sp, #0]
 80097c2:	eba8 0303 	sub.w	r3, r8, r3
 80097c6:	4599      	cmp	r9, r3
 80097c8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80097cc:	eea3 7b46 	vfms.f64	d7, d3, d6
 80097d0:	d133      	bne.n	800983a <_dtoa_r+0x62a>
 80097d2:	ee37 7b07 	vadd.f64	d7, d7, d7
 80097d6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80097da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097de:	dc1a      	bgt.n	8009816 <_dtoa_r+0x606>
 80097e0:	eeb4 7b46 	vcmp.f64	d7, d6
 80097e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097e8:	d103      	bne.n	80097f2 <_dtoa_r+0x5e2>
 80097ea:	ee15 3a10 	vmov	r3, s10
 80097ee:	07d9      	lsls	r1, r3, #31
 80097f0:	d411      	bmi.n	8009816 <_dtoa_r+0x606>
 80097f2:	4629      	mov	r1, r5
 80097f4:	4630      	mov	r0, r6
 80097f6:	f001 f887 	bl	800a908 <_Bfree>
 80097fa:	2300      	movs	r3, #0
 80097fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80097fe:	f888 3000 	strb.w	r3, [r8]
 8009802:	f10b 0301 	add.w	r3, fp, #1
 8009806:	6013      	str	r3, [r2, #0]
 8009808:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800980a:	2b00      	cmp	r3, #0
 800980c:	f43f ad4d 	beq.w	80092aa <_dtoa_r+0x9a>
 8009810:	f8c3 8000 	str.w	r8, [r3]
 8009814:	e549      	b.n	80092aa <_dtoa_r+0x9a>
 8009816:	465f      	mov	r7, fp
 8009818:	4643      	mov	r3, r8
 800981a:	4698      	mov	r8, r3
 800981c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009820:	2a39      	cmp	r2, #57	; 0x39
 8009822:	d106      	bne.n	8009832 <_dtoa_r+0x622>
 8009824:	9a00      	ldr	r2, [sp, #0]
 8009826:	429a      	cmp	r2, r3
 8009828:	d1f7      	bne.n	800981a <_dtoa_r+0x60a>
 800982a:	9900      	ldr	r1, [sp, #0]
 800982c:	2230      	movs	r2, #48	; 0x30
 800982e:	3701      	adds	r7, #1
 8009830:	700a      	strb	r2, [r1, #0]
 8009832:	781a      	ldrb	r2, [r3, #0]
 8009834:	3201      	adds	r2, #1
 8009836:	701a      	strb	r2, [r3, #0]
 8009838:	e7ae      	b.n	8009798 <_dtoa_r+0x588>
 800983a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800983e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009846:	d1b2      	bne.n	80097ae <_dtoa_r+0x59e>
 8009848:	e7d3      	b.n	80097f2 <_dtoa_r+0x5e2>
 800984a:	bf00      	nop
 800984c:	0800c368 	.word	0x0800c368
 8009850:	0800c340 	.word	0x0800c340
 8009854:	9908      	ldr	r1, [sp, #32]
 8009856:	2900      	cmp	r1, #0
 8009858:	f000 80d1 	beq.w	80099fe <_dtoa_r+0x7ee>
 800985c:	9907      	ldr	r1, [sp, #28]
 800985e:	2901      	cmp	r1, #1
 8009860:	f300 80b4 	bgt.w	80099cc <_dtoa_r+0x7bc>
 8009864:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009866:	2900      	cmp	r1, #0
 8009868:	f000 80ac 	beq.w	80099c4 <_dtoa_r+0x7b4>
 800986c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009870:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009874:	461c      	mov	r4, r3
 8009876:	930a      	str	r3, [sp, #40]	; 0x28
 8009878:	9b05      	ldr	r3, [sp, #20]
 800987a:	4413      	add	r3, r2
 800987c:	9305      	str	r3, [sp, #20]
 800987e:	9b06      	ldr	r3, [sp, #24]
 8009880:	2101      	movs	r1, #1
 8009882:	4413      	add	r3, r2
 8009884:	4630      	mov	r0, r6
 8009886:	9306      	str	r3, [sp, #24]
 8009888:	f001 f944 	bl	800ab14 <__i2b>
 800988c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800988e:	4607      	mov	r7, r0
 8009890:	f1b8 0f00 	cmp.w	r8, #0
 8009894:	dd0d      	ble.n	80098b2 <_dtoa_r+0x6a2>
 8009896:	9a06      	ldr	r2, [sp, #24]
 8009898:	2a00      	cmp	r2, #0
 800989a:	dd0a      	ble.n	80098b2 <_dtoa_r+0x6a2>
 800989c:	4542      	cmp	r2, r8
 800989e:	9905      	ldr	r1, [sp, #20]
 80098a0:	bfa8      	it	ge
 80098a2:	4642      	movge	r2, r8
 80098a4:	1a89      	subs	r1, r1, r2
 80098a6:	9105      	str	r1, [sp, #20]
 80098a8:	9906      	ldr	r1, [sp, #24]
 80098aa:	eba8 0802 	sub.w	r8, r8, r2
 80098ae:	1a8a      	subs	r2, r1, r2
 80098b0:	9206      	str	r2, [sp, #24]
 80098b2:	b303      	cbz	r3, 80098f6 <_dtoa_r+0x6e6>
 80098b4:	9a08      	ldr	r2, [sp, #32]
 80098b6:	2a00      	cmp	r2, #0
 80098b8:	f000 80a6 	beq.w	8009a08 <_dtoa_r+0x7f8>
 80098bc:	2c00      	cmp	r4, #0
 80098be:	dd13      	ble.n	80098e8 <_dtoa_r+0x6d8>
 80098c0:	4639      	mov	r1, r7
 80098c2:	4622      	mov	r2, r4
 80098c4:	4630      	mov	r0, r6
 80098c6:	930c      	str	r3, [sp, #48]	; 0x30
 80098c8:	f001 f9e0 	bl	800ac8c <__pow5mult>
 80098cc:	462a      	mov	r2, r5
 80098ce:	4601      	mov	r1, r0
 80098d0:	4607      	mov	r7, r0
 80098d2:	4630      	mov	r0, r6
 80098d4:	f001 f934 	bl	800ab40 <__multiply>
 80098d8:	4629      	mov	r1, r5
 80098da:	900a      	str	r0, [sp, #40]	; 0x28
 80098dc:	4630      	mov	r0, r6
 80098de:	f001 f813 	bl	800a908 <_Bfree>
 80098e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098e6:	4615      	mov	r5, r2
 80098e8:	1b1a      	subs	r2, r3, r4
 80098ea:	d004      	beq.n	80098f6 <_dtoa_r+0x6e6>
 80098ec:	4629      	mov	r1, r5
 80098ee:	4630      	mov	r0, r6
 80098f0:	f001 f9cc 	bl	800ac8c <__pow5mult>
 80098f4:	4605      	mov	r5, r0
 80098f6:	2101      	movs	r1, #1
 80098f8:	4630      	mov	r0, r6
 80098fa:	f001 f90b 	bl	800ab14 <__i2b>
 80098fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009900:	2b00      	cmp	r3, #0
 8009902:	4604      	mov	r4, r0
 8009904:	f340 8082 	ble.w	8009a0c <_dtoa_r+0x7fc>
 8009908:	461a      	mov	r2, r3
 800990a:	4601      	mov	r1, r0
 800990c:	4630      	mov	r0, r6
 800990e:	f001 f9bd 	bl	800ac8c <__pow5mult>
 8009912:	9b07      	ldr	r3, [sp, #28]
 8009914:	2b01      	cmp	r3, #1
 8009916:	4604      	mov	r4, r0
 8009918:	dd7b      	ble.n	8009a12 <_dtoa_r+0x802>
 800991a:	2300      	movs	r3, #0
 800991c:	930a      	str	r3, [sp, #40]	; 0x28
 800991e:	6922      	ldr	r2, [r4, #16]
 8009920:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009924:	6910      	ldr	r0, [r2, #16]
 8009926:	f001 f8a5 	bl	800aa74 <__hi0bits>
 800992a:	f1c0 0020 	rsb	r0, r0, #32
 800992e:	9b06      	ldr	r3, [sp, #24]
 8009930:	4418      	add	r0, r3
 8009932:	f010 001f 	ands.w	r0, r0, #31
 8009936:	f000 808d 	beq.w	8009a54 <_dtoa_r+0x844>
 800993a:	f1c0 0220 	rsb	r2, r0, #32
 800993e:	2a04      	cmp	r2, #4
 8009940:	f340 8086 	ble.w	8009a50 <_dtoa_r+0x840>
 8009944:	f1c0 001c 	rsb	r0, r0, #28
 8009948:	9b05      	ldr	r3, [sp, #20]
 800994a:	4403      	add	r3, r0
 800994c:	9305      	str	r3, [sp, #20]
 800994e:	9b06      	ldr	r3, [sp, #24]
 8009950:	4403      	add	r3, r0
 8009952:	4480      	add	r8, r0
 8009954:	9306      	str	r3, [sp, #24]
 8009956:	9b05      	ldr	r3, [sp, #20]
 8009958:	2b00      	cmp	r3, #0
 800995a:	dd05      	ble.n	8009968 <_dtoa_r+0x758>
 800995c:	4629      	mov	r1, r5
 800995e:	461a      	mov	r2, r3
 8009960:	4630      	mov	r0, r6
 8009962:	f001 f9ed 	bl	800ad40 <__lshift>
 8009966:	4605      	mov	r5, r0
 8009968:	9b06      	ldr	r3, [sp, #24]
 800996a:	2b00      	cmp	r3, #0
 800996c:	dd05      	ble.n	800997a <_dtoa_r+0x76a>
 800996e:	4621      	mov	r1, r4
 8009970:	461a      	mov	r2, r3
 8009972:	4630      	mov	r0, r6
 8009974:	f001 f9e4 	bl	800ad40 <__lshift>
 8009978:	4604      	mov	r4, r0
 800997a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800997c:	2b00      	cmp	r3, #0
 800997e:	d06b      	beq.n	8009a58 <_dtoa_r+0x848>
 8009980:	4621      	mov	r1, r4
 8009982:	4628      	mov	r0, r5
 8009984:	f001 fa48 	bl	800ae18 <__mcmp>
 8009988:	2800      	cmp	r0, #0
 800998a:	da65      	bge.n	8009a58 <_dtoa_r+0x848>
 800998c:	2300      	movs	r3, #0
 800998e:	4629      	mov	r1, r5
 8009990:	220a      	movs	r2, #10
 8009992:	4630      	mov	r0, r6
 8009994:	f000 ffda 	bl	800a94c <__multadd>
 8009998:	9b08      	ldr	r3, [sp, #32]
 800999a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800999e:	4605      	mov	r5, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	f000 8192 	beq.w	8009cca <_dtoa_r+0xaba>
 80099a6:	4639      	mov	r1, r7
 80099a8:	2300      	movs	r3, #0
 80099aa:	220a      	movs	r2, #10
 80099ac:	4630      	mov	r0, r6
 80099ae:	f000 ffcd 	bl	800a94c <__multadd>
 80099b2:	f1ba 0f00 	cmp.w	sl, #0
 80099b6:	4607      	mov	r7, r0
 80099b8:	f300 808e 	bgt.w	8009ad8 <_dtoa_r+0x8c8>
 80099bc:	9b07      	ldr	r3, [sp, #28]
 80099be:	2b02      	cmp	r3, #2
 80099c0:	dc51      	bgt.n	8009a66 <_dtoa_r+0x856>
 80099c2:	e089      	b.n	8009ad8 <_dtoa_r+0x8c8>
 80099c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80099c6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80099ca:	e751      	b.n	8009870 <_dtoa_r+0x660>
 80099cc:	f109 34ff 	add.w	r4, r9, #4294967295
 80099d0:	42a3      	cmp	r3, r4
 80099d2:	bfbf      	itttt	lt
 80099d4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80099d6:	1ae3      	sublt	r3, r4, r3
 80099d8:	18d2      	addlt	r2, r2, r3
 80099da:	4613      	movlt	r3, r2
 80099dc:	bfb7      	itett	lt
 80099de:	930e      	strlt	r3, [sp, #56]	; 0x38
 80099e0:	1b1c      	subge	r4, r3, r4
 80099e2:	4623      	movlt	r3, r4
 80099e4:	2400      	movlt	r4, #0
 80099e6:	f1b9 0f00 	cmp.w	r9, #0
 80099ea:	bfb5      	itete	lt
 80099ec:	9a05      	ldrlt	r2, [sp, #20]
 80099ee:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80099f2:	eba2 0809 	sublt.w	r8, r2, r9
 80099f6:	464a      	movge	r2, r9
 80099f8:	bfb8      	it	lt
 80099fa:	2200      	movlt	r2, #0
 80099fc:	e73b      	b.n	8009876 <_dtoa_r+0x666>
 80099fe:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009a02:	9f08      	ldr	r7, [sp, #32]
 8009a04:	461c      	mov	r4, r3
 8009a06:	e743      	b.n	8009890 <_dtoa_r+0x680>
 8009a08:	461a      	mov	r2, r3
 8009a0a:	e76f      	b.n	80098ec <_dtoa_r+0x6dc>
 8009a0c:	9b07      	ldr	r3, [sp, #28]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	dc18      	bgt.n	8009a44 <_dtoa_r+0x834>
 8009a12:	9b02      	ldr	r3, [sp, #8]
 8009a14:	b9b3      	cbnz	r3, 8009a44 <_dtoa_r+0x834>
 8009a16:	9b03      	ldr	r3, [sp, #12]
 8009a18:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009a1c:	b9a2      	cbnz	r2, 8009a48 <_dtoa_r+0x838>
 8009a1e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009a22:	0d12      	lsrs	r2, r2, #20
 8009a24:	0512      	lsls	r2, r2, #20
 8009a26:	b18a      	cbz	r2, 8009a4c <_dtoa_r+0x83c>
 8009a28:	9b05      	ldr	r3, [sp, #20]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	9305      	str	r3, [sp, #20]
 8009a2e:	9b06      	ldr	r3, [sp, #24]
 8009a30:	3301      	adds	r3, #1
 8009a32:	9306      	str	r3, [sp, #24]
 8009a34:	2301      	movs	r3, #1
 8009a36:	930a      	str	r3, [sp, #40]	; 0x28
 8009a38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f47f af6f 	bne.w	800991e <_dtoa_r+0x70e>
 8009a40:	2001      	movs	r0, #1
 8009a42:	e774      	b.n	800992e <_dtoa_r+0x71e>
 8009a44:	2300      	movs	r3, #0
 8009a46:	e7f6      	b.n	8009a36 <_dtoa_r+0x826>
 8009a48:	9b02      	ldr	r3, [sp, #8]
 8009a4a:	e7f4      	b.n	8009a36 <_dtoa_r+0x826>
 8009a4c:	920a      	str	r2, [sp, #40]	; 0x28
 8009a4e:	e7f3      	b.n	8009a38 <_dtoa_r+0x828>
 8009a50:	d081      	beq.n	8009956 <_dtoa_r+0x746>
 8009a52:	4610      	mov	r0, r2
 8009a54:	301c      	adds	r0, #28
 8009a56:	e777      	b.n	8009948 <_dtoa_r+0x738>
 8009a58:	f1b9 0f00 	cmp.w	r9, #0
 8009a5c:	dc37      	bgt.n	8009ace <_dtoa_r+0x8be>
 8009a5e:	9b07      	ldr	r3, [sp, #28]
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	dd34      	ble.n	8009ace <_dtoa_r+0x8be>
 8009a64:	46ca      	mov	sl, r9
 8009a66:	f1ba 0f00 	cmp.w	sl, #0
 8009a6a:	d10d      	bne.n	8009a88 <_dtoa_r+0x878>
 8009a6c:	4621      	mov	r1, r4
 8009a6e:	4653      	mov	r3, sl
 8009a70:	2205      	movs	r2, #5
 8009a72:	4630      	mov	r0, r6
 8009a74:	f000 ff6a 	bl	800a94c <__multadd>
 8009a78:	4601      	mov	r1, r0
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	f001 f9cb 	bl	800ae18 <__mcmp>
 8009a82:	2800      	cmp	r0, #0
 8009a84:	f73f adde 	bgt.w	8009644 <_dtoa_r+0x434>
 8009a88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a8a:	f8dd 8000 	ldr.w	r8, [sp]
 8009a8e:	ea6f 0b03 	mvn.w	fp, r3
 8009a92:	f04f 0900 	mov.w	r9, #0
 8009a96:	4621      	mov	r1, r4
 8009a98:	4630      	mov	r0, r6
 8009a9a:	f000 ff35 	bl	800a908 <_Bfree>
 8009a9e:	2f00      	cmp	r7, #0
 8009aa0:	f43f aea7 	beq.w	80097f2 <_dtoa_r+0x5e2>
 8009aa4:	f1b9 0f00 	cmp.w	r9, #0
 8009aa8:	d005      	beq.n	8009ab6 <_dtoa_r+0x8a6>
 8009aaa:	45b9      	cmp	r9, r7
 8009aac:	d003      	beq.n	8009ab6 <_dtoa_r+0x8a6>
 8009aae:	4649      	mov	r1, r9
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	f000 ff29 	bl	800a908 <_Bfree>
 8009ab6:	4639      	mov	r1, r7
 8009ab8:	4630      	mov	r0, r6
 8009aba:	f000 ff25 	bl	800a908 <_Bfree>
 8009abe:	e698      	b.n	80097f2 <_dtoa_r+0x5e2>
 8009ac0:	2400      	movs	r4, #0
 8009ac2:	4627      	mov	r7, r4
 8009ac4:	e7e0      	b.n	8009a88 <_dtoa_r+0x878>
 8009ac6:	46bb      	mov	fp, r7
 8009ac8:	4604      	mov	r4, r0
 8009aca:	4607      	mov	r7, r0
 8009acc:	e5ba      	b.n	8009644 <_dtoa_r+0x434>
 8009ace:	9b08      	ldr	r3, [sp, #32]
 8009ad0:	46ca      	mov	sl, r9
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	f000 8100 	beq.w	8009cd8 <_dtoa_r+0xac8>
 8009ad8:	f1b8 0f00 	cmp.w	r8, #0
 8009adc:	dd05      	ble.n	8009aea <_dtoa_r+0x8da>
 8009ade:	4639      	mov	r1, r7
 8009ae0:	4642      	mov	r2, r8
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	f001 f92c 	bl	800ad40 <__lshift>
 8009ae8:	4607      	mov	r7, r0
 8009aea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d05d      	beq.n	8009bac <_dtoa_r+0x99c>
 8009af0:	6879      	ldr	r1, [r7, #4]
 8009af2:	4630      	mov	r0, r6
 8009af4:	f000 fec8 	bl	800a888 <_Balloc>
 8009af8:	4680      	mov	r8, r0
 8009afa:	b928      	cbnz	r0, 8009b08 <_dtoa_r+0x8f8>
 8009afc:	4b82      	ldr	r3, [pc, #520]	; (8009d08 <_dtoa_r+0xaf8>)
 8009afe:	4602      	mov	r2, r0
 8009b00:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009b04:	f7ff bb9a 	b.w	800923c <_dtoa_r+0x2c>
 8009b08:	693a      	ldr	r2, [r7, #16]
 8009b0a:	3202      	adds	r2, #2
 8009b0c:	0092      	lsls	r2, r2, #2
 8009b0e:	f107 010c 	add.w	r1, r7, #12
 8009b12:	300c      	adds	r0, #12
 8009b14:	f000 feaa 	bl	800a86c <memcpy>
 8009b18:	2201      	movs	r2, #1
 8009b1a:	4641      	mov	r1, r8
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	f001 f90f 	bl	800ad40 <__lshift>
 8009b22:	9b00      	ldr	r3, [sp, #0]
 8009b24:	3301      	adds	r3, #1
 8009b26:	9305      	str	r3, [sp, #20]
 8009b28:	9b00      	ldr	r3, [sp, #0]
 8009b2a:	4453      	add	r3, sl
 8009b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8009b2e:	9b02      	ldr	r3, [sp, #8]
 8009b30:	f003 0301 	and.w	r3, r3, #1
 8009b34:	46b9      	mov	r9, r7
 8009b36:	9308      	str	r3, [sp, #32]
 8009b38:	4607      	mov	r7, r0
 8009b3a:	9b05      	ldr	r3, [sp, #20]
 8009b3c:	4621      	mov	r1, r4
 8009b3e:	3b01      	subs	r3, #1
 8009b40:	4628      	mov	r0, r5
 8009b42:	9302      	str	r3, [sp, #8]
 8009b44:	f7ff fad6 	bl	80090f4 <quorem>
 8009b48:	4603      	mov	r3, r0
 8009b4a:	3330      	adds	r3, #48	; 0x30
 8009b4c:	9006      	str	r0, [sp, #24]
 8009b4e:	4649      	mov	r1, r9
 8009b50:	4628      	mov	r0, r5
 8009b52:	930a      	str	r3, [sp, #40]	; 0x28
 8009b54:	f001 f960 	bl	800ae18 <__mcmp>
 8009b58:	463a      	mov	r2, r7
 8009b5a:	4682      	mov	sl, r0
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f001 f976 	bl	800ae50 <__mdiff>
 8009b64:	68c2      	ldr	r2, [r0, #12]
 8009b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b68:	4680      	mov	r8, r0
 8009b6a:	bb0a      	cbnz	r2, 8009bb0 <_dtoa_r+0x9a0>
 8009b6c:	4601      	mov	r1, r0
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f001 f952 	bl	800ae18 <__mcmp>
 8009b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b76:	4602      	mov	r2, r0
 8009b78:	4641      	mov	r1, r8
 8009b7a:	4630      	mov	r0, r6
 8009b7c:	920e      	str	r2, [sp, #56]	; 0x38
 8009b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8009b80:	f000 fec2 	bl	800a908 <_Bfree>
 8009b84:	9b07      	ldr	r3, [sp, #28]
 8009b86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009b88:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009b8c:	ea43 0102 	orr.w	r1, r3, r2
 8009b90:	9b08      	ldr	r3, [sp, #32]
 8009b92:	430b      	orrs	r3, r1
 8009b94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b96:	d10d      	bne.n	8009bb4 <_dtoa_r+0x9a4>
 8009b98:	2b39      	cmp	r3, #57	; 0x39
 8009b9a:	d029      	beq.n	8009bf0 <_dtoa_r+0x9e0>
 8009b9c:	f1ba 0f00 	cmp.w	sl, #0
 8009ba0:	dd01      	ble.n	8009ba6 <_dtoa_r+0x996>
 8009ba2:	9b06      	ldr	r3, [sp, #24]
 8009ba4:	3331      	adds	r3, #49	; 0x31
 8009ba6:	9a02      	ldr	r2, [sp, #8]
 8009ba8:	7013      	strb	r3, [r2, #0]
 8009baa:	e774      	b.n	8009a96 <_dtoa_r+0x886>
 8009bac:	4638      	mov	r0, r7
 8009bae:	e7b8      	b.n	8009b22 <_dtoa_r+0x912>
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	e7e1      	b.n	8009b78 <_dtoa_r+0x968>
 8009bb4:	f1ba 0f00 	cmp.w	sl, #0
 8009bb8:	db06      	blt.n	8009bc8 <_dtoa_r+0x9b8>
 8009bba:	9907      	ldr	r1, [sp, #28]
 8009bbc:	ea41 0a0a 	orr.w	sl, r1, sl
 8009bc0:	9908      	ldr	r1, [sp, #32]
 8009bc2:	ea5a 0101 	orrs.w	r1, sl, r1
 8009bc6:	d120      	bne.n	8009c0a <_dtoa_r+0x9fa>
 8009bc8:	2a00      	cmp	r2, #0
 8009bca:	ddec      	ble.n	8009ba6 <_dtoa_r+0x996>
 8009bcc:	4629      	mov	r1, r5
 8009bce:	2201      	movs	r2, #1
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	9305      	str	r3, [sp, #20]
 8009bd4:	f001 f8b4 	bl	800ad40 <__lshift>
 8009bd8:	4621      	mov	r1, r4
 8009bda:	4605      	mov	r5, r0
 8009bdc:	f001 f91c 	bl	800ae18 <__mcmp>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	9b05      	ldr	r3, [sp, #20]
 8009be4:	dc02      	bgt.n	8009bec <_dtoa_r+0x9dc>
 8009be6:	d1de      	bne.n	8009ba6 <_dtoa_r+0x996>
 8009be8:	07da      	lsls	r2, r3, #31
 8009bea:	d5dc      	bpl.n	8009ba6 <_dtoa_r+0x996>
 8009bec:	2b39      	cmp	r3, #57	; 0x39
 8009bee:	d1d8      	bne.n	8009ba2 <_dtoa_r+0x992>
 8009bf0:	9a02      	ldr	r2, [sp, #8]
 8009bf2:	2339      	movs	r3, #57	; 0x39
 8009bf4:	7013      	strb	r3, [r2, #0]
 8009bf6:	4643      	mov	r3, r8
 8009bf8:	4698      	mov	r8, r3
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8009c00:	2a39      	cmp	r2, #57	; 0x39
 8009c02:	d051      	beq.n	8009ca8 <_dtoa_r+0xa98>
 8009c04:	3201      	adds	r2, #1
 8009c06:	701a      	strb	r2, [r3, #0]
 8009c08:	e745      	b.n	8009a96 <_dtoa_r+0x886>
 8009c0a:	2a00      	cmp	r2, #0
 8009c0c:	dd03      	ble.n	8009c16 <_dtoa_r+0xa06>
 8009c0e:	2b39      	cmp	r3, #57	; 0x39
 8009c10:	d0ee      	beq.n	8009bf0 <_dtoa_r+0x9e0>
 8009c12:	3301      	adds	r3, #1
 8009c14:	e7c7      	b.n	8009ba6 <_dtoa_r+0x996>
 8009c16:	9a05      	ldr	r2, [sp, #20]
 8009c18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c1a:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009c1e:	428a      	cmp	r2, r1
 8009c20:	d02b      	beq.n	8009c7a <_dtoa_r+0xa6a>
 8009c22:	4629      	mov	r1, r5
 8009c24:	2300      	movs	r3, #0
 8009c26:	220a      	movs	r2, #10
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f000 fe8f 	bl	800a94c <__multadd>
 8009c2e:	45b9      	cmp	r9, r7
 8009c30:	4605      	mov	r5, r0
 8009c32:	f04f 0300 	mov.w	r3, #0
 8009c36:	f04f 020a 	mov.w	r2, #10
 8009c3a:	4649      	mov	r1, r9
 8009c3c:	4630      	mov	r0, r6
 8009c3e:	d107      	bne.n	8009c50 <_dtoa_r+0xa40>
 8009c40:	f000 fe84 	bl	800a94c <__multadd>
 8009c44:	4681      	mov	r9, r0
 8009c46:	4607      	mov	r7, r0
 8009c48:	9b05      	ldr	r3, [sp, #20]
 8009c4a:	3301      	adds	r3, #1
 8009c4c:	9305      	str	r3, [sp, #20]
 8009c4e:	e774      	b.n	8009b3a <_dtoa_r+0x92a>
 8009c50:	f000 fe7c 	bl	800a94c <__multadd>
 8009c54:	4639      	mov	r1, r7
 8009c56:	4681      	mov	r9, r0
 8009c58:	2300      	movs	r3, #0
 8009c5a:	220a      	movs	r2, #10
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	f000 fe75 	bl	800a94c <__multadd>
 8009c62:	4607      	mov	r7, r0
 8009c64:	e7f0      	b.n	8009c48 <_dtoa_r+0xa38>
 8009c66:	f1ba 0f00 	cmp.w	sl, #0
 8009c6a:	9a00      	ldr	r2, [sp, #0]
 8009c6c:	bfcc      	ite	gt
 8009c6e:	46d0      	movgt	r8, sl
 8009c70:	f04f 0801 	movle.w	r8, #1
 8009c74:	4490      	add	r8, r2
 8009c76:	f04f 0900 	mov.w	r9, #0
 8009c7a:	4629      	mov	r1, r5
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	4630      	mov	r0, r6
 8009c80:	9302      	str	r3, [sp, #8]
 8009c82:	f001 f85d 	bl	800ad40 <__lshift>
 8009c86:	4621      	mov	r1, r4
 8009c88:	4605      	mov	r5, r0
 8009c8a:	f001 f8c5 	bl	800ae18 <__mcmp>
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	dcb1      	bgt.n	8009bf6 <_dtoa_r+0x9e6>
 8009c92:	d102      	bne.n	8009c9a <_dtoa_r+0xa8a>
 8009c94:	9b02      	ldr	r3, [sp, #8]
 8009c96:	07db      	lsls	r3, r3, #31
 8009c98:	d4ad      	bmi.n	8009bf6 <_dtoa_r+0x9e6>
 8009c9a:	4643      	mov	r3, r8
 8009c9c:	4698      	mov	r8, r3
 8009c9e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ca2:	2a30      	cmp	r2, #48	; 0x30
 8009ca4:	d0fa      	beq.n	8009c9c <_dtoa_r+0xa8c>
 8009ca6:	e6f6      	b.n	8009a96 <_dtoa_r+0x886>
 8009ca8:	9a00      	ldr	r2, [sp, #0]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d1a4      	bne.n	8009bf8 <_dtoa_r+0x9e8>
 8009cae:	f10b 0b01 	add.w	fp, fp, #1
 8009cb2:	2331      	movs	r3, #49	; 0x31
 8009cb4:	e778      	b.n	8009ba8 <_dtoa_r+0x998>
 8009cb6:	4b15      	ldr	r3, [pc, #84]	; (8009d0c <_dtoa_r+0xafc>)
 8009cb8:	f7ff bb12 	b.w	80092e0 <_dtoa_r+0xd0>
 8009cbc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f47f aaee 	bne.w	80092a0 <_dtoa_r+0x90>
 8009cc4:	4b12      	ldr	r3, [pc, #72]	; (8009d10 <_dtoa_r+0xb00>)
 8009cc6:	f7ff bb0b 	b.w	80092e0 <_dtoa_r+0xd0>
 8009cca:	f1ba 0f00 	cmp.w	sl, #0
 8009cce:	dc03      	bgt.n	8009cd8 <_dtoa_r+0xac8>
 8009cd0:	9b07      	ldr	r3, [sp, #28]
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	f73f aec7 	bgt.w	8009a66 <_dtoa_r+0x856>
 8009cd8:	f8dd 8000 	ldr.w	r8, [sp]
 8009cdc:	4621      	mov	r1, r4
 8009cde:	4628      	mov	r0, r5
 8009ce0:	f7ff fa08 	bl	80090f4 <quorem>
 8009ce4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009ce8:	f808 3b01 	strb.w	r3, [r8], #1
 8009cec:	9a00      	ldr	r2, [sp, #0]
 8009cee:	eba8 0202 	sub.w	r2, r8, r2
 8009cf2:	4592      	cmp	sl, r2
 8009cf4:	ddb7      	ble.n	8009c66 <_dtoa_r+0xa56>
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	220a      	movs	r2, #10
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	f000 fe25 	bl	800a94c <__multadd>
 8009d02:	4605      	mov	r5, r0
 8009d04:	e7ea      	b.n	8009cdc <_dtoa_r+0xacc>
 8009d06:	bf00      	nop
 8009d08:	0800c1ec 	.word	0x0800c1ec
 8009d0c:	0800bfe8 	.word	0x0800bfe8
 8009d10:	0800c169 	.word	0x0800c169

08009d14 <__sflush_r>:
 8009d14:	898a      	ldrh	r2, [r1, #12]
 8009d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d1a:	4605      	mov	r5, r0
 8009d1c:	0710      	lsls	r0, r2, #28
 8009d1e:	460c      	mov	r4, r1
 8009d20:	d458      	bmi.n	8009dd4 <__sflush_r+0xc0>
 8009d22:	684b      	ldr	r3, [r1, #4]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	dc05      	bgt.n	8009d34 <__sflush_r+0x20>
 8009d28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	dc02      	bgt.n	8009d34 <__sflush_r+0x20>
 8009d2e:	2000      	movs	r0, #0
 8009d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d36:	2e00      	cmp	r6, #0
 8009d38:	d0f9      	beq.n	8009d2e <__sflush_r+0x1a>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009d40:	682f      	ldr	r7, [r5, #0]
 8009d42:	602b      	str	r3, [r5, #0]
 8009d44:	d032      	beq.n	8009dac <__sflush_r+0x98>
 8009d46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009d48:	89a3      	ldrh	r3, [r4, #12]
 8009d4a:	075a      	lsls	r2, r3, #29
 8009d4c:	d505      	bpl.n	8009d5a <__sflush_r+0x46>
 8009d4e:	6863      	ldr	r3, [r4, #4]
 8009d50:	1ac0      	subs	r0, r0, r3
 8009d52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d54:	b10b      	cbz	r3, 8009d5a <__sflush_r+0x46>
 8009d56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d58:	1ac0      	subs	r0, r0, r3
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009d60:	6a21      	ldr	r1, [r4, #32]
 8009d62:	4628      	mov	r0, r5
 8009d64:	47b0      	blx	r6
 8009d66:	1c43      	adds	r3, r0, #1
 8009d68:	89a3      	ldrh	r3, [r4, #12]
 8009d6a:	d106      	bne.n	8009d7a <__sflush_r+0x66>
 8009d6c:	6829      	ldr	r1, [r5, #0]
 8009d6e:	291d      	cmp	r1, #29
 8009d70:	d82c      	bhi.n	8009dcc <__sflush_r+0xb8>
 8009d72:	4a2a      	ldr	r2, [pc, #168]	; (8009e1c <__sflush_r+0x108>)
 8009d74:	40ca      	lsrs	r2, r1
 8009d76:	07d6      	lsls	r6, r2, #31
 8009d78:	d528      	bpl.n	8009dcc <__sflush_r+0xb8>
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	6062      	str	r2, [r4, #4]
 8009d7e:	04d9      	lsls	r1, r3, #19
 8009d80:	6922      	ldr	r2, [r4, #16]
 8009d82:	6022      	str	r2, [r4, #0]
 8009d84:	d504      	bpl.n	8009d90 <__sflush_r+0x7c>
 8009d86:	1c42      	adds	r2, r0, #1
 8009d88:	d101      	bne.n	8009d8e <__sflush_r+0x7a>
 8009d8a:	682b      	ldr	r3, [r5, #0]
 8009d8c:	b903      	cbnz	r3, 8009d90 <__sflush_r+0x7c>
 8009d8e:	6560      	str	r0, [r4, #84]	; 0x54
 8009d90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d92:	602f      	str	r7, [r5, #0]
 8009d94:	2900      	cmp	r1, #0
 8009d96:	d0ca      	beq.n	8009d2e <__sflush_r+0x1a>
 8009d98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d9c:	4299      	cmp	r1, r3
 8009d9e:	d002      	beq.n	8009da6 <__sflush_r+0x92>
 8009da0:	4628      	mov	r0, r5
 8009da2:	f001 fa3d 	bl	800b220 <_free_r>
 8009da6:	2000      	movs	r0, #0
 8009da8:	6360      	str	r0, [r4, #52]	; 0x34
 8009daa:	e7c1      	b.n	8009d30 <__sflush_r+0x1c>
 8009dac:	6a21      	ldr	r1, [r4, #32]
 8009dae:	2301      	movs	r3, #1
 8009db0:	4628      	mov	r0, r5
 8009db2:	47b0      	blx	r6
 8009db4:	1c41      	adds	r1, r0, #1
 8009db6:	d1c7      	bne.n	8009d48 <__sflush_r+0x34>
 8009db8:	682b      	ldr	r3, [r5, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d0c4      	beq.n	8009d48 <__sflush_r+0x34>
 8009dbe:	2b1d      	cmp	r3, #29
 8009dc0:	d001      	beq.n	8009dc6 <__sflush_r+0xb2>
 8009dc2:	2b16      	cmp	r3, #22
 8009dc4:	d101      	bne.n	8009dca <__sflush_r+0xb6>
 8009dc6:	602f      	str	r7, [r5, #0]
 8009dc8:	e7b1      	b.n	8009d2e <__sflush_r+0x1a>
 8009dca:	89a3      	ldrh	r3, [r4, #12]
 8009dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dd0:	81a3      	strh	r3, [r4, #12]
 8009dd2:	e7ad      	b.n	8009d30 <__sflush_r+0x1c>
 8009dd4:	690f      	ldr	r7, [r1, #16]
 8009dd6:	2f00      	cmp	r7, #0
 8009dd8:	d0a9      	beq.n	8009d2e <__sflush_r+0x1a>
 8009dda:	0793      	lsls	r3, r2, #30
 8009ddc:	680e      	ldr	r6, [r1, #0]
 8009dde:	bf08      	it	eq
 8009de0:	694b      	ldreq	r3, [r1, #20]
 8009de2:	600f      	str	r7, [r1, #0]
 8009de4:	bf18      	it	ne
 8009de6:	2300      	movne	r3, #0
 8009de8:	eba6 0807 	sub.w	r8, r6, r7
 8009dec:	608b      	str	r3, [r1, #8]
 8009dee:	f1b8 0f00 	cmp.w	r8, #0
 8009df2:	dd9c      	ble.n	8009d2e <__sflush_r+0x1a>
 8009df4:	6a21      	ldr	r1, [r4, #32]
 8009df6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009df8:	4643      	mov	r3, r8
 8009dfa:	463a      	mov	r2, r7
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	47b0      	blx	r6
 8009e00:	2800      	cmp	r0, #0
 8009e02:	dc06      	bgt.n	8009e12 <__sflush_r+0xfe>
 8009e04:	89a3      	ldrh	r3, [r4, #12]
 8009e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e0a:	81a3      	strh	r3, [r4, #12]
 8009e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8009e10:	e78e      	b.n	8009d30 <__sflush_r+0x1c>
 8009e12:	4407      	add	r7, r0
 8009e14:	eba8 0800 	sub.w	r8, r8, r0
 8009e18:	e7e9      	b.n	8009dee <__sflush_r+0xda>
 8009e1a:	bf00      	nop
 8009e1c:	20400001 	.word	0x20400001

08009e20 <_fflush_r>:
 8009e20:	b538      	push	{r3, r4, r5, lr}
 8009e22:	690b      	ldr	r3, [r1, #16]
 8009e24:	4605      	mov	r5, r0
 8009e26:	460c      	mov	r4, r1
 8009e28:	b913      	cbnz	r3, 8009e30 <_fflush_r+0x10>
 8009e2a:	2500      	movs	r5, #0
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
 8009e30:	b118      	cbz	r0, 8009e3a <_fflush_r+0x1a>
 8009e32:	6983      	ldr	r3, [r0, #24]
 8009e34:	b90b      	cbnz	r3, 8009e3a <_fflush_r+0x1a>
 8009e36:	f000 f887 	bl	8009f48 <__sinit>
 8009e3a:	4b14      	ldr	r3, [pc, #80]	; (8009e8c <_fflush_r+0x6c>)
 8009e3c:	429c      	cmp	r4, r3
 8009e3e:	d11b      	bne.n	8009e78 <_fflush_r+0x58>
 8009e40:	686c      	ldr	r4, [r5, #4]
 8009e42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d0ef      	beq.n	8009e2a <_fflush_r+0xa>
 8009e4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009e4c:	07d0      	lsls	r0, r2, #31
 8009e4e:	d404      	bmi.n	8009e5a <_fflush_r+0x3a>
 8009e50:	0599      	lsls	r1, r3, #22
 8009e52:	d402      	bmi.n	8009e5a <_fflush_r+0x3a>
 8009e54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e56:	f000 fc88 	bl	800a76a <__retarget_lock_acquire_recursive>
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	4621      	mov	r1, r4
 8009e5e:	f7ff ff59 	bl	8009d14 <__sflush_r>
 8009e62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e64:	07da      	lsls	r2, r3, #31
 8009e66:	4605      	mov	r5, r0
 8009e68:	d4e0      	bmi.n	8009e2c <_fflush_r+0xc>
 8009e6a:	89a3      	ldrh	r3, [r4, #12]
 8009e6c:	059b      	lsls	r3, r3, #22
 8009e6e:	d4dd      	bmi.n	8009e2c <_fflush_r+0xc>
 8009e70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e72:	f000 fc7b 	bl	800a76c <__retarget_lock_release_recursive>
 8009e76:	e7d9      	b.n	8009e2c <_fflush_r+0xc>
 8009e78:	4b05      	ldr	r3, [pc, #20]	; (8009e90 <_fflush_r+0x70>)
 8009e7a:	429c      	cmp	r4, r3
 8009e7c:	d101      	bne.n	8009e82 <_fflush_r+0x62>
 8009e7e:	68ac      	ldr	r4, [r5, #8]
 8009e80:	e7df      	b.n	8009e42 <_fflush_r+0x22>
 8009e82:	4b04      	ldr	r3, [pc, #16]	; (8009e94 <_fflush_r+0x74>)
 8009e84:	429c      	cmp	r4, r3
 8009e86:	bf08      	it	eq
 8009e88:	68ec      	ldreq	r4, [r5, #12]
 8009e8a:	e7da      	b.n	8009e42 <_fflush_r+0x22>
 8009e8c:	0800c220 	.word	0x0800c220
 8009e90:	0800c240 	.word	0x0800c240
 8009e94:	0800c200 	.word	0x0800c200

08009e98 <std>:
 8009e98:	2300      	movs	r3, #0
 8009e9a:	b510      	push	{r4, lr}
 8009e9c:	4604      	mov	r4, r0
 8009e9e:	e9c0 3300 	strd	r3, r3, [r0]
 8009ea2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009ea6:	6083      	str	r3, [r0, #8]
 8009ea8:	8181      	strh	r1, [r0, #12]
 8009eaa:	6643      	str	r3, [r0, #100]	; 0x64
 8009eac:	81c2      	strh	r2, [r0, #14]
 8009eae:	6183      	str	r3, [r0, #24]
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	2208      	movs	r2, #8
 8009eb4:	305c      	adds	r0, #92	; 0x5c
 8009eb6:	f7fd fac7 	bl	8007448 <memset>
 8009eba:	4b05      	ldr	r3, [pc, #20]	; (8009ed0 <std+0x38>)
 8009ebc:	6263      	str	r3, [r4, #36]	; 0x24
 8009ebe:	4b05      	ldr	r3, [pc, #20]	; (8009ed4 <std+0x3c>)
 8009ec0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ec2:	4b05      	ldr	r3, [pc, #20]	; (8009ed8 <std+0x40>)
 8009ec4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ec6:	4b05      	ldr	r3, [pc, #20]	; (8009edc <std+0x44>)
 8009ec8:	6224      	str	r4, [r4, #32]
 8009eca:	6323      	str	r3, [r4, #48]	; 0x30
 8009ecc:	bd10      	pop	{r4, pc}
 8009ece:	bf00      	nop
 8009ed0:	0800b9a1 	.word	0x0800b9a1
 8009ed4:	0800b9c3 	.word	0x0800b9c3
 8009ed8:	0800b9fb 	.word	0x0800b9fb
 8009edc:	0800ba1f 	.word	0x0800ba1f

08009ee0 <_cleanup_r>:
 8009ee0:	4901      	ldr	r1, [pc, #4]	; (8009ee8 <_cleanup_r+0x8>)
 8009ee2:	f000 b8af 	b.w	800a044 <_fwalk_reent>
 8009ee6:	bf00      	nop
 8009ee8:	08009e21 	.word	0x08009e21

08009eec <__sfmoreglue>:
 8009eec:	b570      	push	{r4, r5, r6, lr}
 8009eee:	1e4a      	subs	r2, r1, #1
 8009ef0:	2568      	movs	r5, #104	; 0x68
 8009ef2:	4355      	muls	r5, r2
 8009ef4:	460e      	mov	r6, r1
 8009ef6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009efa:	f001 f9e1 	bl	800b2c0 <_malloc_r>
 8009efe:	4604      	mov	r4, r0
 8009f00:	b140      	cbz	r0, 8009f14 <__sfmoreglue+0x28>
 8009f02:	2100      	movs	r1, #0
 8009f04:	e9c0 1600 	strd	r1, r6, [r0]
 8009f08:	300c      	adds	r0, #12
 8009f0a:	60a0      	str	r0, [r4, #8]
 8009f0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009f10:	f7fd fa9a 	bl	8007448 <memset>
 8009f14:	4620      	mov	r0, r4
 8009f16:	bd70      	pop	{r4, r5, r6, pc}

08009f18 <__sfp_lock_acquire>:
 8009f18:	4801      	ldr	r0, [pc, #4]	; (8009f20 <__sfp_lock_acquire+0x8>)
 8009f1a:	f000 bc26 	b.w	800a76a <__retarget_lock_acquire_recursive>
 8009f1e:	bf00      	nop
 8009f20:	200006a4 	.word	0x200006a4

08009f24 <__sfp_lock_release>:
 8009f24:	4801      	ldr	r0, [pc, #4]	; (8009f2c <__sfp_lock_release+0x8>)
 8009f26:	f000 bc21 	b.w	800a76c <__retarget_lock_release_recursive>
 8009f2a:	bf00      	nop
 8009f2c:	200006a4 	.word	0x200006a4

08009f30 <__sinit_lock_acquire>:
 8009f30:	4801      	ldr	r0, [pc, #4]	; (8009f38 <__sinit_lock_acquire+0x8>)
 8009f32:	f000 bc1a 	b.w	800a76a <__retarget_lock_acquire_recursive>
 8009f36:	bf00      	nop
 8009f38:	2000069f 	.word	0x2000069f

08009f3c <__sinit_lock_release>:
 8009f3c:	4801      	ldr	r0, [pc, #4]	; (8009f44 <__sinit_lock_release+0x8>)
 8009f3e:	f000 bc15 	b.w	800a76c <__retarget_lock_release_recursive>
 8009f42:	bf00      	nop
 8009f44:	2000069f 	.word	0x2000069f

08009f48 <__sinit>:
 8009f48:	b510      	push	{r4, lr}
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	f7ff fff0 	bl	8009f30 <__sinit_lock_acquire>
 8009f50:	69a3      	ldr	r3, [r4, #24]
 8009f52:	b11b      	cbz	r3, 8009f5c <__sinit+0x14>
 8009f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f58:	f7ff bff0 	b.w	8009f3c <__sinit_lock_release>
 8009f5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009f60:	6523      	str	r3, [r4, #80]	; 0x50
 8009f62:	4b13      	ldr	r3, [pc, #76]	; (8009fb0 <__sinit+0x68>)
 8009f64:	4a13      	ldr	r2, [pc, #76]	; (8009fb4 <__sinit+0x6c>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	62a2      	str	r2, [r4, #40]	; 0x28
 8009f6a:	42a3      	cmp	r3, r4
 8009f6c:	bf04      	itt	eq
 8009f6e:	2301      	moveq	r3, #1
 8009f70:	61a3      	streq	r3, [r4, #24]
 8009f72:	4620      	mov	r0, r4
 8009f74:	f000 f820 	bl	8009fb8 <__sfp>
 8009f78:	6060      	str	r0, [r4, #4]
 8009f7a:	4620      	mov	r0, r4
 8009f7c:	f000 f81c 	bl	8009fb8 <__sfp>
 8009f80:	60a0      	str	r0, [r4, #8]
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 f818 	bl	8009fb8 <__sfp>
 8009f88:	2200      	movs	r2, #0
 8009f8a:	60e0      	str	r0, [r4, #12]
 8009f8c:	2104      	movs	r1, #4
 8009f8e:	6860      	ldr	r0, [r4, #4]
 8009f90:	f7ff ff82 	bl	8009e98 <std>
 8009f94:	68a0      	ldr	r0, [r4, #8]
 8009f96:	2201      	movs	r2, #1
 8009f98:	2109      	movs	r1, #9
 8009f9a:	f7ff ff7d 	bl	8009e98 <std>
 8009f9e:	68e0      	ldr	r0, [r4, #12]
 8009fa0:	2202      	movs	r2, #2
 8009fa2:	2112      	movs	r1, #18
 8009fa4:	f7ff ff78 	bl	8009e98 <std>
 8009fa8:	2301      	movs	r3, #1
 8009faa:	61a3      	str	r3, [r4, #24]
 8009fac:	e7d2      	b.n	8009f54 <__sinit+0xc>
 8009fae:	bf00      	nop
 8009fb0:	0800bfd4 	.word	0x0800bfd4
 8009fb4:	08009ee1 	.word	0x08009ee1

08009fb8 <__sfp>:
 8009fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fba:	4607      	mov	r7, r0
 8009fbc:	f7ff ffac 	bl	8009f18 <__sfp_lock_acquire>
 8009fc0:	4b1e      	ldr	r3, [pc, #120]	; (800a03c <__sfp+0x84>)
 8009fc2:	681e      	ldr	r6, [r3, #0]
 8009fc4:	69b3      	ldr	r3, [r6, #24]
 8009fc6:	b913      	cbnz	r3, 8009fce <__sfp+0x16>
 8009fc8:	4630      	mov	r0, r6
 8009fca:	f7ff ffbd 	bl	8009f48 <__sinit>
 8009fce:	3648      	adds	r6, #72	; 0x48
 8009fd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009fd4:	3b01      	subs	r3, #1
 8009fd6:	d503      	bpl.n	8009fe0 <__sfp+0x28>
 8009fd8:	6833      	ldr	r3, [r6, #0]
 8009fda:	b30b      	cbz	r3, 800a020 <__sfp+0x68>
 8009fdc:	6836      	ldr	r6, [r6, #0]
 8009fde:	e7f7      	b.n	8009fd0 <__sfp+0x18>
 8009fe0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009fe4:	b9d5      	cbnz	r5, 800a01c <__sfp+0x64>
 8009fe6:	4b16      	ldr	r3, [pc, #88]	; (800a040 <__sfp+0x88>)
 8009fe8:	60e3      	str	r3, [r4, #12]
 8009fea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009fee:	6665      	str	r5, [r4, #100]	; 0x64
 8009ff0:	f000 fbba 	bl	800a768 <__retarget_lock_init_recursive>
 8009ff4:	f7ff ff96 	bl	8009f24 <__sfp_lock_release>
 8009ff8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ffc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a000:	6025      	str	r5, [r4, #0]
 800a002:	61a5      	str	r5, [r4, #24]
 800a004:	2208      	movs	r2, #8
 800a006:	4629      	mov	r1, r5
 800a008:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a00c:	f7fd fa1c 	bl	8007448 <memset>
 800a010:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a014:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a018:	4620      	mov	r0, r4
 800a01a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a01c:	3468      	adds	r4, #104	; 0x68
 800a01e:	e7d9      	b.n	8009fd4 <__sfp+0x1c>
 800a020:	2104      	movs	r1, #4
 800a022:	4638      	mov	r0, r7
 800a024:	f7ff ff62 	bl	8009eec <__sfmoreglue>
 800a028:	4604      	mov	r4, r0
 800a02a:	6030      	str	r0, [r6, #0]
 800a02c:	2800      	cmp	r0, #0
 800a02e:	d1d5      	bne.n	8009fdc <__sfp+0x24>
 800a030:	f7ff ff78 	bl	8009f24 <__sfp_lock_release>
 800a034:	230c      	movs	r3, #12
 800a036:	603b      	str	r3, [r7, #0]
 800a038:	e7ee      	b.n	800a018 <__sfp+0x60>
 800a03a:	bf00      	nop
 800a03c:	0800bfd4 	.word	0x0800bfd4
 800a040:	ffff0001 	.word	0xffff0001

0800a044 <_fwalk_reent>:
 800a044:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a048:	4606      	mov	r6, r0
 800a04a:	4688      	mov	r8, r1
 800a04c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a050:	2700      	movs	r7, #0
 800a052:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a056:	f1b9 0901 	subs.w	r9, r9, #1
 800a05a:	d505      	bpl.n	800a068 <_fwalk_reent+0x24>
 800a05c:	6824      	ldr	r4, [r4, #0]
 800a05e:	2c00      	cmp	r4, #0
 800a060:	d1f7      	bne.n	800a052 <_fwalk_reent+0xe>
 800a062:	4638      	mov	r0, r7
 800a064:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a068:	89ab      	ldrh	r3, [r5, #12]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d907      	bls.n	800a07e <_fwalk_reent+0x3a>
 800a06e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a072:	3301      	adds	r3, #1
 800a074:	d003      	beq.n	800a07e <_fwalk_reent+0x3a>
 800a076:	4629      	mov	r1, r5
 800a078:	4630      	mov	r0, r6
 800a07a:	47c0      	blx	r8
 800a07c:	4307      	orrs	r7, r0
 800a07e:	3568      	adds	r5, #104	; 0x68
 800a080:	e7e9      	b.n	800a056 <_fwalk_reent+0x12>

0800a082 <rshift>:
 800a082:	6903      	ldr	r3, [r0, #16]
 800a084:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a088:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a08c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a090:	f100 0414 	add.w	r4, r0, #20
 800a094:	dd45      	ble.n	800a122 <rshift+0xa0>
 800a096:	f011 011f 	ands.w	r1, r1, #31
 800a09a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a09e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a0a2:	d10c      	bne.n	800a0be <rshift+0x3c>
 800a0a4:	f100 0710 	add.w	r7, r0, #16
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	42b1      	cmp	r1, r6
 800a0ac:	d334      	bcc.n	800a118 <rshift+0x96>
 800a0ae:	1a9b      	subs	r3, r3, r2
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	1eea      	subs	r2, r5, #3
 800a0b4:	4296      	cmp	r6, r2
 800a0b6:	bf38      	it	cc
 800a0b8:	2300      	movcc	r3, #0
 800a0ba:	4423      	add	r3, r4
 800a0bc:	e015      	b.n	800a0ea <rshift+0x68>
 800a0be:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a0c2:	f1c1 0820 	rsb	r8, r1, #32
 800a0c6:	40cf      	lsrs	r7, r1
 800a0c8:	f105 0e04 	add.w	lr, r5, #4
 800a0cc:	46a1      	mov	r9, r4
 800a0ce:	4576      	cmp	r6, lr
 800a0d0:	46f4      	mov	ip, lr
 800a0d2:	d815      	bhi.n	800a100 <rshift+0x7e>
 800a0d4:	1a9b      	subs	r3, r3, r2
 800a0d6:	009a      	lsls	r2, r3, #2
 800a0d8:	3a04      	subs	r2, #4
 800a0da:	3501      	adds	r5, #1
 800a0dc:	42ae      	cmp	r6, r5
 800a0de:	bf38      	it	cc
 800a0e0:	2200      	movcc	r2, #0
 800a0e2:	18a3      	adds	r3, r4, r2
 800a0e4:	50a7      	str	r7, [r4, r2]
 800a0e6:	b107      	cbz	r7, 800a0ea <rshift+0x68>
 800a0e8:	3304      	adds	r3, #4
 800a0ea:	1b1a      	subs	r2, r3, r4
 800a0ec:	42a3      	cmp	r3, r4
 800a0ee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a0f2:	bf08      	it	eq
 800a0f4:	2300      	moveq	r3, #0
 800a0f6:	6102      	str	r2, [r0, #16]
 800a0f8:	bf08      	it	eq
 800a0fa:	6143      	streq	r3, [r0, #20]
 800a0fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a100:	f8dc c000 	ldr.w	ip, [ip]
 800a104:	fa0c fc08 	lsl.w	ip, ip, r8
 800a108:	ea4c 0707 	orr.w	r7, ip, r7
 800a10c:	f849 7b04 	str.w	r7, [r9], #4
 800a110:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a114:	40cf      	lsrs	r7, r1
 800a116:	e7da      	b.n	800a0ce <rshift+0x4c>
 800a118:	f851 cb04 	ldr.w	ip, [r1], #4
 800a11c:	f847 cf04 	str.w	ip, [r7, #4]!
 800a120:	e7c3      	b.n	800a0aa <rshift+0x28>
 800a122:	4623      	mov	r3, r4
 800a124:	e7e1      	b.n	800a0ea <rshift+0x68>

0800a126 <__hexdig_fun>:
 800a126:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a12a:	2b09      	cmp	r3, #9
 800a12c:	d802      	bhi.n	800a134 <__hexdig_fun+0xe>
 800a12e:	3820      	subs	r0, #32
 800a130:	b2c0      	uxtb	r0, r0
 800a132:	4770      	bx	lr
 800a134:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a138:	2b05      	cmp	r3, #5
 800a13a:	d801      	bhi.n	800a140 <__hexdig_fun+0x1a>
 800a13c:	3847      	subs	r0, #71	; 0x47
 800a13e:	e7f7      	b.n	800a130 <__hexdig_fun+0xa>
 800a140:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a144:	2b05      	cmp	r3, #5
 800a146:	d801      	bhi.n	800a14c <__hexdig_fun+0x26>
 800a148:	3827      	subs	r0, #39	; 0x27
 800a14a:	e7f1      	b.n	800a130 <__hexdig_fun+0xa>
 800a14c:	2000      	movs	r0, #0
 800a14e:	4770      	bx	lr

0800a150 <__gethex>:
 800a150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a154:	ed2d 8b02 	vpush	{d8}
 800a158:	b089      	sub	sp, #36	; 0x24
 800a15a:	ee08 0a10 	vmov	s16, r0
 800a15e:	9304      	str	r3, [sp, #16]
 800a160:	4bbc      	ldr	r3, [pc, #752]	; (800a454 <__gethex+0x304>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	9301      	str	r3, [sp, #4]
 800a166:	4618      	mov	r0, r3
 800a168:	468b      	mov	fp, r1
 800a16a:	4690      	mov	r8, r2
 800a16c:	f7f6 f868 	bl	8000240 <strlen>
 800a170:	9b01      	ldr	r3, [sp, #4]
 800a172:	f8db 2000 	ldr.w	r2, [fp]
 800a176:	4403      	add	r3, r0
 800a178:	4682      	mov	sl, r0
 800a17a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a17e:	9305      	str	r3, [sp, #20]
 800a180:	1c93      	adds	r3, r2, #2
 800a182:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a186:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a18a:	32fe      	adds	r2, #254	; 0xfe
 800a18c:	18d1      	adds	r1, r2, r3
 800a18e:	461f      	mov	r7, r3
 800a190:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a194:	9100      	str	r1, [sp, #0]
 800a196:	2830      	cmp	r0, #48	; 0x30
 800a198:	d0f8      	beq.n	800a18c <__gethex+0x3c>
 800a19a:	f7ff ffc4 	bl	800a126 <__hexdig_fun>
 800a19e:	4604      	mov	r4, r0
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	d13a      	bne.n	800a21a <__gethex+0xca>
 800a1a4:	9901      	ldr	r1, [sp, #4]
 800a1a6:	4652      	mov	r2, sl
 800a1a8:	4638      	mov	r0, r7
 800a1aa:	f001 fc3c 	bl	800ba26 <strncmp>
 800a1ae:	4605      	mov	r5, r0
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	d168      	bne.n	800a286 <__gethex+0x136>
 800a1b4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a1b8:	eb07 060a 	add.w	r6, r7, sl
 800a1bc:	f7ff ffb3 	bl	800a126 <__hexdig_fun>
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	d062      	beq.n	800a28a <__gethex+0x13a>
 800a1c4:	4633      	mov	r3, r6
 800a1c6:	7818      	ldrb	r0, [r3, #0]
 800a1c8:	2830      	cmp	r0, #48	; 0x30
 800a1ca:	461f      	mov	r7, r3
 800a1cc:	f103 0301 	add.w	r3, r3, #1
 800a1d0:	d0f9      	beq.n	800a1c6 <__gethex+0x76>
 800a1d2:	f7ff ffa8 	bl	800a126 <__hexdig_fun>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	fab0 f480 	clz	r4, r0
 800a1dc:	0964      	lsrs	r4, r4, #5
 800a1de:	4635      	mov	r5, r6
 800a1e0:	9300      	str	r3, [sp, #0]
 800a1e2:	463a      	mov	r2, r7
 800a1e4:	4616      	mov	r6, r2
 800a1e6:	3201      	adds	r2, #1
 800a1e8:	7830      	ldrb	r0, [r6, #0]
 800a1ea:	f7ff ff9c 	bl	800a126 <__hexdig_fun>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d1f8      	bne.n	800a1e4 <__gethex+0x94>
 800a1f2:	9901      	ldr	r1, [sp, #4]
 800a1f4:	4652      	mov	r2, sl
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	f001 fc15 	bl	800ba26 <strncmp>
 800a1fc:	b980      	cbnz	r0, 800a220 <__gethex+0xd0>
 800a1fe:	b94d      	cbnz	r5, 800a214 <__gethex+0xc4>
 800a200:	eb06 050a 	add.w	r5, r6, sl
 800a204:	462a      	mov	r2, r5
 800a206:	4616      	mov	r6, r2
 800a208:	3201      	adds	r2, #1
 800a20a:	7830      	ldrb	r0, [r6, #0]
 800a20c:	f7ff ff8b 	bl	800a126 <__hexdig_fun>
 800a210:	2800      	cmp	r0, #0
 800a212:	d1f8      	bne.n	800a206 <__gethex+0xb6>
 800a214:	1bad      	subs	r5, r5, r6
 800a216:	00ad      	lsls	r5, r5, #2
 800a218:	e004      	b.n	800a224 <__gethex+0xd4>
 800a21a:	2400      	movs	r4, #0
 800a21c:	4625      	mov	r5, r4
 800a21e:	e7e0      	b.n	800a1e2 <__gethex+0x92>
 800a220:	2d00      	cmp	r5, #0
 800a222:	d1f7      	bne.n	800a214 <__gethex+0xc4>
 800a224:	7833      	ldrb	r3, [r6, #0]
 800a226:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a22a:	2b50      	cmp	r3, #80	; 0x50
 800a22c:	d13b      	bne.n	800a2a6 <__gethex+0x156>
 800a22e:	7873      	ldrb	r3, [r6, #1]
 800a230:	2b2b      	cmp	r3, #43	; 0x2b
 800a232:	d02c      	beq.n	800a28e <__gethex+0x13e>
 800a234:	2b2d      	cmp	r3, #45	; 0x2d
 800a236:	d02e      	beq.n	800a296 <__gethex+0x146>
 800a238:	1c71      	adds	r1, r6, #1
 800a23a:	f04f 0900 	mov.w	r9, #0
 800a23e:	7808      	ldrb	r0, [r1, #0]
 800a240:	f7ff ff71 	bl	800a126 <__hexdig_fun>
 800a244:	1e43      	subs	r3, r0, #1
 800a246:	b2db      	uxtb	r3, r3
 800a248:	2b18      	cmp	r3, #24
 800a24a:	d82c      	bhi.n	800a2a6 <__gethex+0x156>
 800a24c:	f1a0 0210 	sub.w	r2, r0, #16
 800a250:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a254:	f7ff ff67 	bl	800a126 <__hexdig_fun>
 800a258:	1e43      	subs	r3, r0, #1
 800a25a:	b2db      	uxtb	r3, r3
 800a25c:	2b18      	cmp	r3, #24
 800a25e:	d91d      	bls.n	800a29c <__gethex+0x14c>
 800a260:	f1b9 0f00 	cmp.w	r9, #0
 800a264:	d000      	beq.n	800a268 <__gethex+0x118>
 800a266:	4252      	negs	r2, r2
 800a268:	4415      	add	r5, r2
 800a26a:	f8cb 1000 	str.w	r1, [fp]
 800a26e:	b1e4      	cbz	r4, 800a2aa <__gethex+0x15a>
 800a270:	9b00      	ldr	r3, [sp, #0]
 800a272:	2b00      	cmp	r3, #0
 800a274:	bf14      	ite	ne
 800a276:	2700      	movne	r7, #0
 800a278:	2706      	moveq	r7, #6
 800a27a:	4638      	mov	r0, r7
 800a27c:	b009      	add	sp, #36	; 0x24
 800a27e:	ecbd 8b02 	vpop	{d8}
 800a282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a286:	463e      	mov	r6, r7
 800a288:	4625      	mov	r5, r4
 800a28a:	2401      	movs	r4, #1
 800a28c:	e7ca      	b.n	800a224 <__gethex+0xd4>
 800a28e:	f04f 0900 	mov.w	r9, #0
 800a292:	1cb1      	adds	r1, r6, #2
 800a294:	e7d3      	b.n	800a23e <__gethex+0xee>
 800a296:	f04f 0901 	mov.w	r9, #1
 800a29a:	e7fa      	b.n	800a292 <__gethex+0x142>
 800a29c:	230a      	movs	r3, #10
 800a29e:	fb03 0202 	mla	r2, r3, r2, r0
 800a2a2:	3a10      	subs	r2, #16
 800a2a4:	e7d4      	b.n	800a250 <__gethex+0x100>
 800a2a6:	4631      	mov	r1, r6
 800a2a8:	e7df      	b.n	800a26a <__gethex+0x11a>
 800a2aa:	1bf3      	subs	r3, r6, r7
 800a2ac:	3b01      	subs	r3, #1
 800a2ae:	4621      	mov	r1, r4
 800a2b0:	2b07      	cmp	r3, #7
 800a2b2:	dc0b      	bgt.n	800a2cc <__gethex+0x17c>
 800a2b4:	ee18 0a10 	vmov	r0, s16
 800a2b8:	f000 fae6 	bl	800a888 <_Balloc>
 800a2bc:	4604      	mov	r4, r0
 800a2be:	b940      	cbnz	r0, 800a2d2 <__gethex+0x182>
 800a2c0:	4b65      	ldr	r3, [pc, #404]	; (800a458 <__gethex+0x308>)
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	21de      	movs	r1, #222	; 0xde
 800a2c6:	4865      	ldr	r0, [pc, #404]	; (800a45c <__gethex+0x30c>)
 800a2c8:	f001 fbde 	bl	800ba88 <__assert_func>
 800a2cc:	3101      	adds	r1, #1
 800a2ce:	105b      	asrs	r3, r3, #1
 800a2d0:	e7ee      	b.n	800a2b0 <__gethex+0x160>
 800a2d2:	f100 0914 	add.w	r9, r0, #20
 800a2d6:	f04f 0b00 	mov.w	fp, #0
 800a2da:	f1ca 0301 	rsb	r3, sl, #1
 800a2de:	f8cd 9008 	str.w	r9, [sp, #8]
 800a2e2:	f8cd b000 	str.w	fp, [sp]
 800a2e6:	9306      	str	r3, [sp, #24]
 800a2e8:	42b7      	cmp	r7, r6
 800a2ea:	d340      	bcc.n	800a36e <__gethex+0x21e>
 800a2ec:	9802      	ldr	r0, [sp, #8]
 800a2ee:	9b00      	ldr	r3, [sp, #0]
 800a2f0:	f840 3b04 	str.w	r3, [r0], #4
 800a2f4:	eba0 0009 	sub.w	r0, r0, r9
 800a2f8:	1080      	asrs	r0, r0, #2
 800a2fa:	0146      	lsls	r6, r0, #5
 800a2fc:	6120      	str	r0, [r4, #16]
 800a2fe:	4618      	mov	r0, r3
 800a300:	f000 fbb8 	bl	800aa74 <__hi0bits>
 800a304:	1a30      	subs	r0, r6, r0
 800a306:	f8d8 6000 	ldr.w	r6, [r8]
 800a30a:	42b0      	cmp	r0, r6
 800a30c:	dd63      	ble.n	800a3d6 <__gethex+0x286>
 800a30e:	1b87      	subs	r7, r0, r6
 800a310:	4639      	mov	r1, r7
 800a312:	4620      	mov	r0, r4
 800a314:	f000 ff53 	bl	800b1be <__any_on>
 800a318:	4682      	mov	sl, r0
 800a31a:	b1a8      	cbz	r0, 800a348 <__gethex+0x1f8>
 800a31c:	1e7b      	subs	r3, r7, #1
 800a31e:	1159      	asrs	r1, r3, #5
 800a320:	f003 021f 	and.w	r2, r3, #31
 800a324:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a328:	f04f 0a01 	mov.w	sl, #1
 800a32c:	fa0a f202 	lsl.w	r2, sl, r2
 800a330:	420a      	tst	r2, r1
 800a332:	d009      	beq.n	800a348 <__gethex+0x1f8>
 800a334:	4553      	cmp	r3, sl
 800a336:	dd05      	ble.n	800a344 <__gethex+0x1f4>
 800a338:	1eb9      	subs	r1, r7, #2
 800a33a:	4620      	mov	r0, r4
 800a33c:	f000 ff3f 	bl	800b1be <__any_on>
 800a340:	2800      	cmp	r0, #0
 800a342:	d145      	bne.n	800a3d0 <__gethex+0x280>
 800a344:	f04f 0a02 	mov.w	sl, #2
 800a348:	4639      	mov	r1, r7
 800a34a:	4620      	mov	r0, r4
 800a34c:	f7ff fe99 	bl	800a082 <rshift>
 800a350:	443d      	add	r5, r7
 800a352:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a356:	42ab      	cmp	r3, r5
 800a358:	da4c      	bge.n	800a3f4 <__gethex+0x2a4>
 800a35a:	ee18 0a10 	vmov	r0, s16
 800a35e:	4621      	mov	r1, r4
 800a360:	f000 fad2 	bl	800a908 <_Bfree>
 800a364:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a366:	2300      	movs	r3, #0
 800a368:	6013      	str	r3, [r2, #0]
 800a36a:	27a3      	movs	r7, #163	; 0xa3
 800a36c:	e785      	b.n	800a27a <__gethex+0x12a>
 800a36e:	1e73      	subs	r3, r6, #1
 800a370:	9a05      	ldr	r2, [sp, #20]
 800a372:	9303      	str	r3, [sp, #12]
 800a374:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a378:	4293      	cmp	r3, r2
 800a37a:	d019      	beq.n	800a3b0 <__gethex+0x260>
 800a37c:	f1bb 0f20 	cmp.w	fp, #32
 800a380:	d107      	bne.n	800a392 <__gethex+0x242>
 800a382:	9b02      	ldr	r3, [sp, #8]
 800a384:	9a00      	ldr	r2, [sp, #0]
 800a386:	f843 2b04 	str.w	r2, [r3], #4
 800a38a:	9302      	str	r3, [sp, #8]
 800a38c:	2300      	movs	r3, #0
 800a38e:	9300      	str	r3, [sp, #0]
 800a390:	469b      	mov	fp, r3
 800a392:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a396:	f7ff fec6 	bl	800a126 <__hexdig_fun>
 800a39a:	9b00      	ldr	r3, [sp, #0]
 800a39c:	f000 000f 	and.w	r0, r0, #15
 800a3a0:	fa00 f00b 	lsl.w	r0, r0, fp
 800a3a4:	4303      	orrs	r3, r0
 800a3a6:	9300      	str	r3, [sp, #0]
 800a3a8:	f10b 0b04 	add.w	fp, fp, #4
 800a3ac:	9b03      	ldr	r3, [sp, #12]
 800a3ae:	e00d      	b.n	800a3cc <__gethex+0x27c>
 800a3b0:	9b03      	ldr	r3, [sp, #12]
 800a3b2:	9a06      	ldr	r2, [sp, #24]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	42bb      	cmp	r3, r7
 800a3b8:	d3e0      	bcc.n	800a37c <__gethex+0x22c>
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	9901      	ldr	r1, [sp, #4]
 800a3be:	9307      	str	r3, [sp, #28]
 800a3c0:	4652      	mov	r2, sl
 800a3c2:	f001 fb30 	bl	800ba26 <strncmp>
 800a3c6:	9b07      	ldr	r3, [sp, #28]
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d1d7      	bne.n	800a37c <__gethex+0x22c>
 800a3cc:	461e      	mov	r6, r3
 800a3ce:	e78b      	b.n	800a2e8 <__gethex+0x198>
 800a3d0:	f04f 0a03 	mov.w	sl, #3
 800a3d4:	e7b8      	b.n	800a348 <__gethex+0x1f8>
 800a3d6:	da0a      	bge.n	800a3ee <__gethex+0x29e>
 800a3d8:	1a37      	subs	r7, r6, r0
 800a3da:	4621      	mov	r1, r4
 800a3dc:	ee18 0a10 	vmov	r0, s16
 800a3e0:	463a      	mov	r2, r7
 800a3e2:	f000 fcad 	bl	800ad40 <__lshift>
 800a3e6:	1bed      	subs	r5, r5, r7
 800a3e8:	4604      	mov	r4, r0
 800a3ea:	f100 0914 	add.w	r9, r0, #20
 800a3ee:	f04f 0a00 	mov.w	sl, #0
 800a3f2:	e7ae      	b.n	800a352 <__gethex+0x202>
 800a3f4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a3f8:	42a8      	cmp	r0, r5
 800a3fa:	dd72      	ble.n	800a4e2 <__gethex+0x392>
 800a3fc:	1b45      	subs	r5, r0, r5
 800a3fe:	42ae      	cmp	r6, r5
 800a400:	dc36      	bgt.n	800a470 <__gethex+0x320>
 800a402:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a406:	2b02      	cmp	r3, #2
 800a408:	d02a      	beq.n	800a460 <__gethex+0x310>
 800a40a:	2b03      	cmp	r3, #3
 800a40c:	d02c      	beq.n	800a468 <__gethex+0x318>
 800a40e:	2b01      	cmp	r3, #1
 800a410:	d115      	bne.n	800a43e <__gethex+0x2ee>
 800a412:	42ae      	cmp	r6, r5
 800a414:	d113      	bne.n	800a43e <__gethex+0x2ee>
 800a416:	2e01      	cmp	r6, #1
 800a418:	d10b      	bne.n	800a432 <__gethex+0x2e2>
 800a41a:	9a04      	ldr	r2, [sp, #16]
 800a41c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a420:	6013      	str	r3, [r2, #0]
 800a422:	2301      	movs	r3, #1
 800a424:	6123      	str	r3, [r4, #16]
 800a426:	f8c9 3000 	str.w	r3, [r9]
 800a42a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a42c:	2762      	movs	r7, #98	; 0x62
 800a42e:	601c      	str	r4, [r3, #0]
 800a430:	e723      	b.n	800a27a <__gethex+0x12a>
 800a432:	1e71      	subs	r1, r6, #1
 800a434:	4620      	mov	r0, r4
 800a436:	f000 fec2 	bl	800b1be <__any_on>
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d1ed      	bne.n	800a41a <__gethex+0x2ca>
 800a43e:	ee18 0a10 	vmov	r0, s16
 800a442:	4621      	mov	r1, r4
 800a444:	f000 fa60 	bl	800a908 <_Bfree>
 800a448:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a44a:	2300      	movs	r3, #0
 800a44c:	6013      	str	r3, [r2, #0]
 800a44e:	2750      	movs	r7, #80	; 0x50
 800a450:	e713      	b.n	800a27a <__gethex+0x12a>
 800a452:	bf00      	nop
 800a454:	0800c2cc 	.word	0x0800c2cc
 800a458:	0800c1ec 	.word	0x0800c1ec
 800a45c:	0800c260 	.word	0x0800c260
 800a460:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a462:	2b00      	cmp	r3, #0
 800a464:	d1eb      	bne.n	800a43e <__gethex+0x2ee>
 800a466:	e7d8      	b.n	800a41a <__gethex+0x2ca>
 800a468:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1d5      	bne.n	800a41a <__gethex+0x2ca>
 800a46e:	e7e6      	b.n	800a43e <__gethex+0x2ee>
 800a470:	1e6f      	subs	r7, r5, #1
 800a472:	f1ba 0f00 	cmp.w	sl, #0
 800a476:	d131      	bne.n	800a4dc <__gethex+0x38c>
 800a478:	b127      	cbz	r7, 800a484 <__gethex+0x334>
 800a47a:	4639      	mov	r1, r7
 800a47c:	4620      	mov	r0, r4
 800a47e:	f000 fe9e 	bl	800b1be <__any_on>
 800a482:	4682      	mov	sl, r0
 800a484:	117b      	asrs	r3, r7, #5
 800a486:	2101      	movs	r1, #1
 800a488:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a48c:	f007 071f 	and.w	r7, r7, #31
 800a490:	fa01 f707 	lsl.w	r7, r1, r7
 800a494:	421f      	tst	r7, r3
 800a496:	4629      	mov	r1, r5
 800a498:	4620      	mov	r0, r4
 800a49a:	bf18      	it	ne
 800a49c:	f04a 0a02 	orrne.w	sl, sl, #2
 800a4a0:	1b76      	subs	r6, r6, r5
 800a4a2:	f7ff fdee 	bl	800a082 <rshift>
 800a4a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a4aa:	2702      	movs	r7, #2
 800a4ac:	f1ba 0f00 	cmp.w	sl, #0
 800a4b0:	d048      	beq.n	800a544 <__gethex+0x3f4>
 800a4b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d015      	beq.n	800a4e6 <__gethex+0x396>
 800a4ba:	2b03      	cmp	r3, #3
 800a4bc:	d017      	beq.n	800a4ee <__gethex+0x39e>
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d109      	bne.n	800a4d6 <__gethex+0x386>
 800a4c2:	f01a 0f02 	tst.w	sl, #2
 800a4c6:	d006      	beq.n	800a4d6 <__gethex+0x386>
 800a4c8:	f8d9 0000 	ldr.w	r0, [r9]
 800a4cc:	ea4a 0a00 	orr.w	sl, sl, r0
 800a4d0:	f01a 0f01 	tst.w	sl, #1
 800a4d4:	d10e      	bne.n	800a4f4 <__gethex+0x3a4>
 800a4d6:	f047 0710 	orr.w	r7, r7, #16
 800a4da:	e033      	b.n	800a544 <__gethex+0x3f4>
 800a4dc:	f04f 0a01 	mov.w	sl, #1
 800a4e0:	e7d0      	b.n	800a484 <__gethex+0x334>
 800a4e2:	2701      	movs	r7, #1
 800a4e4:	e7e2      	b.n	800a4ac <__gethex+0x35c>
 800a4e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4e8:	f1c3 0301 	rsb	r3, r3, #1
 800a4ec:	9315      	str	r3, [sp, #84]	; 0x54
 800a4ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d0f0      	beq.n	800a4d6 <__gethex+0x386>
 800a4f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a4f8:	f104 0314 	add.w	r3, r4, #20
 800a4fc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a500:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a504:	f04f 0c00 	mov.w	ip, #0
 800a508:	4618      	mov	r0, r3
 800a50a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a50e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a512:	d01c      	beq.n	800a54e <__gethex+0x3fe>
 800a514:	3201      	adds	r2, #1
 800a516:	6002      	str	r2, [r0, #0]
 800a518:	2f02      	cmp	r7, #2
 800a51a:	f104 0314 	add.w	r3, r4, #20
 800a51e:	d13f      	bne.n	800a5a0 <__gethex+0x450>
 800a520:	f8d8 2000 	ldr.w	r2, [r8]
 800a524:	3a01      	subs	r2, #1
 800a526:	42b2      	cmp	r2, r6
 800a528:	d10a      	bne.n	800a540 <__gethex+0x3f0>
 800a52a:	1171      	asrs	r1, r6, #5
 800a52c:	2201      	movs	r2, #1
 800a52e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a532:	f006 061f 	and.w	r6, r6, #31
 800a536:	fa02 f606 	lsl.w	r6, r2, r6
 800a53a:	421e      	tst	r6, r3
 800a53c:	bf18      	it	ne
 800a53e:	4617      	movne	r7, r2
 800a540:	f047 0720 	orr.w	r7, r7, #32
 800a544:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a546:	601c      	str	r4, [r3, #0]
 800a548:	9b04      	ldr	r3, [sp, #16]
 800a54a:	601d      	str	r5, [r3, #0]
 800a54c:	e695      	b.n	800a27a <__gethex+0x12a>
 800a54e:	4299      	cmp	r1, r3
 800a550:	f843 cc04 	str.w	ip, [r3, #-4]
 800a554:	d8d8      	bhi.n	800a508 <__gethex+0x3b8>
 800a556:	68a3      	ldr	r3, [r4, #8]
 800a558:	459b      	cmp	fp, r3
 800a55a:	db19      	blt.n	800a590 <__gethex+0x440>
 800a55c:	6861      	ldr	r1, [r4, #4]
 800a55e:	ee18 0a10 	vmov	r0, s16
 800a562:	3101      	adds	r1, #1
 800a564:	f000 f990 	bl	800a888 <_Balloc>
 800a568:	4681      	mov	r9, r0
 800a56a:	b918      	cbnz	r0, 800a574 <__gethex+0x424>
 800a56c:	4b1a      	ldr	r3, [pc, #104]	; (800a5d8 <__gethex+0x488>)
 800a56e:	4602      	mov	r2, r0
 800a570:	2184      	movs	r1, #132	; 0x84
 800a572:	e6a8      	b.n	800a2c6 <__gethex+0x176>
 800a574:	6922      	ldr	r2, [r4, #16]
 800a576:	3202      	adds	r2, #2
 800a578:	f104 010c 	add.w	r1, r4, #12
 800a57c:	0092      	lsls	r2, r2, #2
 800a57e:	300c      	adds	r0, #12
 800a580:	f000 f974 	bl	800a86c <memcpy>
 800a584:	4621      	mov	r1, r4
 800a586:	ee18 0a10 	vmov	r0, s16
 800a58a:	f000 f9bd 	bl	800a908 <_Bfree>
 800a58e:	464c      	mov	r4, r9
 800a590:	6923      	ldr	r3, [r4, #16]
 800a592:	1c5a      	adds	r2, r3, #1
 800a594:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a598:	6122      	str	r2, [r4, #16]
 800a59a:	2201      	movs	r2, #1
 800a59c:	615a      	str	r2, [r3, #20]
 800a59e:	e7bb      	b.n	800a518 <__gethex+0x3c8>
 800a5a0:	6922      	ldr	r2, [r4, #16]
 800a5a2:	455a      	cmp	r2, fp
 800a5a4:	dd0b      	ble.n	800a5be <__gethex+0x46e>
 800a5a6:	2101      	movs	r1, #1
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f7ff fd6a 	bl	800a082 <rshift>
 800a5ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a5b2:	3501      	adds	r5, #1
 800a5b4:	42ab      	cmp	r3, r5
 800a5b6:	f6ff aed0 	blt.w	800a35a <__gethex+0x20a>
 800a5ba:	2701      	movs	r7, #1
 800a5bc:	e7c0      	b.n	800a540 <__gethex+0x3f0>
 800a5be:	f016 061f 	ands.w	r6, r6, #31
 800a5c2:	d0fa      	beq.n	800a5ba <__gethex+0x46a>
 800a5c4:	449a      	add	sl, r3
 800a5c6:	f1c6 0620 	rsb	r6, r6, #32
 800a5ca:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a5ce:	f000 fa51 	bl	800aa74 <__hi0bits>
 800a5d2:	42b0      	cmp	r0, r6
 800a5d4:	dbe7      	blt.n	800a5a6 <__gethex+0x456>
 800a5d6:	e7f0      	b.n	800a5ba <__gethex+0x46a>
 800a5d8:	0800c1ec 	.word	0x0800c1ec

0800a5dc <L_shift>:
 800a5dc:	f1c2 0208 	rsb	r2, r2, #8
 800a5e0:	0092      	lsls	r2, r2, #2
 800a5e2:	b570      	push	{r4, r5, r6, lr}
 800a5e4:	f1c2 0620 	rsb	r6, r2, #32
 800a5e8:	6843      	ldr	r3, [r0, #4]
 800a5ea:	6804      	ldr	r4, [r0, #0]
 800a5ec:	fa03 f506 	lsl.w	r5, r3, r6
 800a5f0:	432c      	orrs	r4, r5
 800a5f2:	40d3      	lsrs	r3, r2
 800a5f4:	6004      	str	r4, [r0, #0]
 800a5f6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a5fa:	4288      	cmp	r0, r1
 800a5fc:	d3f4      	bcc.n	800a5e8 <L_shift+0xc>
 800a5fe:	bd70      	pop	{r4, r5, r6, pc}

0800a600 <__match>:
 800a600:	b530      	push	{r4, r5, lr}
 800a602:	6803      	ldr	r3, [r0, #0]
 800a604:	3301      	adds	r3, #1
 800a606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a60a:	b914      	cbnz	r4, 800a612 <__match+0x12>
 800a60c:	6003      	str	r3, [r0, #0]
 800a60e:	2001      	movs	r0, #1
 800a610:	bd30      	pop	{r4, r5, pc}
 800a612:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a616:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a61a:	2d19      	cmp	r5, #25
 800a61c:	bf98      	it	ls
 800a61e:	3220      	addls	r2, #32
 800a620:	42a2      	cmp	r2, r4
 800a622:	d0f0      	beq.n	800a606 <__match+0x6>
 800a624:	2000      	movs	r0, #0
 800a626:	e7f3      	b.n	800a610 <__match+0x10>

0800a628 <__hexnan>:
 800a628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a62c:	680b      	ldr	r3, [r1, #0]
 800a62e:	6801      	ldr	r1, [r0, #0]
 800a630:	115e      	asrs	r6, r3, #5
 800a632:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a636:	f013 031f 	ands.w	r3, r3, #31
 800a63a:	b087      	sub	sp, #28
 800a63c:	bf18      	it	ne
 800a63e:	3604      	addne	r6, #4
 800a640:	2500      	movs	r5, #0
 800a642:	1f37      	subs	r7, r6, #4
 800a644:	4682      	mov	sl, r0
 800a646:	4690      	mov	r8, r2
 800a648:	9301      	str	r3, [sp, #4]
 800a64a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a64e:	46b9      	mov	r9, r7
 800a650:	463c      	mov	r4, r7
 800a652:	9502      	str	r5, [sp, #8]
 800a654:	46ab      	mov	fp, r5
 800a656:	784a      	ldrb	r2, [r1, #1]
 800a658:	1c4b      	adds	r3, r1, #1
 800a65a:	9303      	str	r3, [sp, #12]
 800a65c:	b342      	cbz	r2, 800a6b0 <__hexnan+0x88>
 800a65e:	4610      	mov	r0, r2
 800a660:	9105      	str	r1, [sp, #20]
 800a662:	9204      	str	r2, [sp, #16]
 800a664:	f7ff fd5f 	bl	800a126 <__hexdig_fun>
 800a668:	2800      	cmp	r0, #0
 800a66a:	d14f      	bne.n	800a70c <__hexnan+0xe4>
 800a66c:	9a04      	ldr	r2, [sp, #16]
 800a66e:	9905      	ldr	r1, [sp, #20]
 800a670:	2a20      	cmp	r2, #32
 800a672:	d818      	bhi.n	800a6a6 <__hexnan+0x7e>
 800a674:	9b02      	ldr	r3, [sp, #8]
 800a676:	459b      	cmp	fp, r3
 800a678:	dd13      	ble.n	800a6a2 <__hexnan+0x7a>
 800a67a:	454c      	cmp	r4, r9
 800a67c:	d206      	bcs.n	800a68c <__hexnan+0x64>
 800a67e:	2d07      	cmp	r5, #7
 800a680:	dc04      	bgt.n	800a68c <__hexnan+0x64>
 800a682:	462a      	mov	r2, r5
 800a684:	4649      	mov	r1, r9
 800a686:	4620      	mov	r0, r4
 800a688:	f7ff ffa8 	bl	800a5dc <L_shift>
 800a68c:	4544      	cmp	r4, r8
 800a68e:	d950      	bls.n	800a732 <__hexnan+0x10a>
 800a690:	2300      	movs	r3, #0
 800a692:	f1a4 0904 	sub.w	r9, r4, #4
 800a696:	f844 3c04 	str.w	r3, [r4, #-4]
 800a69a:	f8cd b008 	str.w	fp, [sp, #8]
 800a69e:	464c      	mov	r4, r9
 800a6a0:	461d      	mov	r5, r3
 800a6a2:	9903      	ldr	r1, [sp, #12]
 800a6a4:	e7d7      	b.n	800a656 <__hexnan+0x2e>
 800a6a6:	2a29      	cmp	r2, #41	; 0x29
 800a6a8:	d156      	bne.n	800a758 <__hexnan+0x130>
 800a6aa:	3102      	adds	r1, #2
 800a6ac:	f8ca 1000 	str.w	r1, [sl]
 800a6b0:	f1bb 0f00 	cmp.w	fp, #0
 800a6b4:	d050      	beq.n	800a758 <__hexnan+0x130>
 800a6b6:	454c      	cmp	r4, r9
 800a6b8:	d206      	bcs.n	800a6c8 <__hexnan+0xa0>
 800a6ba:	2d07      	cmp	r5, #7
 800a6bc:	dc04      	bgt.n	800a6c8 <__hexnan+0xa0>
 800a6be:	462a      	mov	r2, r5
 800a6c0:	4649      	mov	r1, r9
 800a6c2:	4620      	mov	r0, r4
 800a6c4:	f7ff ff8a 	bl	800a5dc <L_shift>
 800a6c8:	4544      	cmp	r4, r8
 800a6ca:	d934      	bls.n	800a736 <__hexnan+0x10e>
 800a6cc:	f1a8 0204 	sub.w	r2, r8, #4
 800a6d0:	4623      	mov	r3, r4
 800a6d2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a6d6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a6da:	429f      	cmp	r7, r3
 800a6dc:	d2f9      	bcs.n	800a6d2 <__hexnan+0xaa>
 800a6de:	1b3b      	subs	r3, r7, r4
 800a6e0:	f023 0303 	bic.w	r3, r3, #3
 800a6e4:	3304      	adds	r3, #4
 800a6e6:	3401      	adds	r4, #1
 800a6e8:	3e03      	subs	r6, #3
 800a6ea:	42b4      	cmp	r4, r6
 800a6ec:	bf88      	it	hi
 800a6ee:	2304      	movhi	r3, #4
 800a6f0:	4443      	add	r3, r8
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f843 2b04 	str.w	r2, [r3], #4
 800a6f8:	429f      	cmp	r7, r3
 800a6fa:	d2fb      	bcs.n	800a6f4 <__hexnan+0xcc>
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	b91b      	cbnz	r3, 800a708 <__hexnan+0xe0>
 800a700:	4547      	cmp	r7, r8
 800a702:	d127      	bne.n	800a754 <__hexnan+0x12c>
 800a704:	2301      	movs	r3, #1
 800a706:	603b      	str	r3, [r7, #0]
 800a708:	2005      	movs	r0, #5
 800a70a:	e026      	b.n	800a75a <__hexnan+0x132>
 800a70c:	3501      	adds	r5, #1
 800a70e:	2d08      	cmp	r5, #8
 800a710:	f10b 0b01 	add.w	fp, fp, #1
 800a714:	dd06      	ble.n	800a724 <__hexnan+0xfc>
 800a716:	4544      	cmp	r4, r8
 800a718:	d9c3      	bls.n	800a6a2 <__hexnan+0x7a>
 800a71a:	2300      	movs	r3, #0
 800a71c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a720:	2501      	movs	r5, #1
 800a722:	3c04      	subs	r4, #4
 800a724:	6822      	ldr	r2, [r4, #0]
 800a726:	f000 000f 	and.w	r0, r0, #15
 800a72a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a72e:	6022      	str	r2, [r4, #0]
 800a730:	e7b7      	b.n	800a6a2 <__hexnan+0x7a>
 800a732:	2508      	movs	r5, #8
 800a734:	e7b5      	b.n	800a6a2 <__hexnan+0x7a>
 800a736:	9b01      	ldr	r3, [sp, #4]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d0df      	beq.n	800a6fc <__hexnan+0xd4>
 800a73c:	f04f 32ff 	mov.w	r2, #4294967295
 800a740:	f1c3 0320 	rsb	r3, r3, #32
 800a744:	fa22 f303 	lsr.w	r3, r2, r3
 800a748:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a74c:	401a      	ands	r2, r3
 800a74e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a752:	e7d3      	b.n	800a6fc <__hexnan+0xd4>
 800a754:	3f04      	subs	r7, #4
 800a756:	e7d1      	b.n	800a6fc <__hexnan+0xd4>
 800a758:	2004      	movs	r0, #4
 800a75a:	b007      	add	sp, #28
 800a75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a760 <_localeconv_r>:
 800a760:	4800      	ldr	r0, [pc, #0]	; (800a764 <_localeconv_r+0x4>)
 800a762:	4770      	bx	lr
 800a764:	20000168 	.word	0x20000168

0800a768 <__retarget_lock_init_recursive>:
 800a768:	4770      	bx	lr

0800a76a <__retarget_lock_acquire_recursive>:
 800a76a:	4770      	bx	lr

0800a76c <__retarget_lock_release_recursive>:
 800a76c:	4770      	bx	lr

0800a76e <__swhatbuf_r>:
 800a76e:	b570      	push	{r4, r5, r6, lr}
 800a770:	460e      	mov	r6, r1
 800a772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a776:	2900      	cmp	r1, #0
 800a778:	b096      	sub	sp, #88	; 0x58
 800a77a:	4614      	mov	r4, r2
 800a77c:	461d      	mov	r5, r3
 800a77e:	da07      	bge.n	800a790 <__swhatbuf_r+0x22>
 800a780:	2300      	movs	r3, #0
 800a782:	602b      	str	r3, [r5, #0]
 800a784:	89b3      	ldrh	r3, [r6, #12]
 800a786:	061a      	lsls	r2, r3, #24
 800a788:	d410      	bmi.n	800a7ac <__swhatbuf_r+0x3e>
 800a78a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a78e:	e00e      	b.n	800a7ae <__swhatbuf_r+0x40>
 800a790:	466a      	mov	r2, sp
 800a792:	f001 f9b9 	bl	800bb08 <_fstat_r>
 800a796:	2800      	cmp	r0, #0
 800a798:	dbf2      	blt.n	800a780 <__swhatbuf_r+0x12>
 800a79a:	9a01      	ldr	r2, [sp, #4]
 800a79c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a7a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a7a4:	425a      	negs	r2, r3
 800a7a6:	415a      	adcs	r2, r3
 800a7a8:	602a      	str	r2, [r5, #0]
 800a7aa:	e7ee      	b.n	800a78a <__swhatbuf_r+0x1c>
 800a7ac:	2340      	movs	r3, #64	; 0x40
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	6023      	str	r3, [r4, #0]
 800a7b2:	b016      	add	sp, #88	; 0x58
 800a7b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a7b8 <__smakebuf_r>:
 800a7b8:	898b      	ldrh	r3, [r1, #12]
 800a7ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a7bc:	079d      	lsls	r5, r3, #30
 800a7be:	4606      	mov	r6, r0
 800a7c0:	460c      	mov	r4, r1
 800a7c2:	d507      	bpl.n	800a7d4 <__smakebuf_r+0x1c>
 800a7c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7c8:	6023      	str	r3, [r4, #0]
 800a7ca:	6123      	str	r3, [r4, #16]
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	6163      	str	r3, [r4, #20]
 800a7d0:	b002      	add	sp, #8
 800a7d2:	bd70      	pop	{r4, r5, r6, pc}
 800a7d4:	ab01      	add	r3, sp, #4
 800a7d6:	466a      	mov	r2, sp
 800a7d8:	f7ff ffc9 	bl	800a76e <__swhatbuf_r>
 800a7dc:	9900      	ldr	r1, [sp, #0]
 800a7de:	4605      	mov	r5, r0
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	f000 fd6d 	bl	800b2c0 <_malloc_r>
 800a7e6:	b948      	cbnz	r0, 800a7fc <__smakebuf_r+0x44>
 800a7e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7ec:	059a      	lsls	r2, r3, #22
 800a7ee:	d4ef      	bmi.n	800a7d0 <__smakebuf_r+0x18>
 800a7f0:	f023 0303 	bic.w	r3, r3, #3
 800a7f4:	f043 0302 	orr.w	r3, r3, #2
 800a7f8:	81a3      	strh	r3, [r4, #12]
 800a7fa:	e7e3      	b.n	800a7c4 <__smakebuf_r+0xc>
 800a7fc:	4b0d      	ldr	r3, [pc, #52]	; (800a834 <__smakebuf_r+0x7c>)
 800a7fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800a800:	89a3      	ldrh	r3, [r4, #12]
 800a802:	6020      	str	r0, [r4, #0]
 800a804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a808:	81a3      	strh	r3, [r4, #12]
 800a80a:	9b00      	ldr	r3, [sp, #0]
 800a80c:	6163      	str	r3, [r4, #20]
 800a80e:	9b01      	ldr	r3, [sp, #4]
 800a810:	6120      	str	r0, [r4, #16]
 800a812:	b15b      	cbz	r3, 800a82c <__smakebuf_r+0x74>
 800a814:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a818:	4630      	mov	r0, r6
 800a81a:	f001 f987 	bl	800bb2c <_isatty_r>
 800a81e:	b128      	cbz	r0, 800a82c <__smakebuf_r+0x74>
 800a820:	89a3      	ldrh	r3, [r4, #12]
 800a822:	f023 0303 	bic.w	r3, r3, #3
 800a826:	f043 0301 	orr.w	r3, r3, #1
 800a82a:	81a3      	strh	r3, [r4, #12]
 800a82c:	89a0      	ldrh	r0, [r4, #12]
 800a82e:	4305      	orrs	r5, r0
 800a830:	81a5      	strh	r5, [r4, #12]
 800a832:	e7cd      	b.n	800a7d0 <__smakebuf_r+0x18>
 800a834:	08009ee1 	.word	0x08009ee1

0800a838 <malloc>:
 800a838:	4b02      	ldr	r3, [pc, #8]	; (800a844 <malloc+0xc>)
 800a83a:	4601      	mov	r1, r0
 800a83c:	6818      	ldr	r0, [r3, #0]
 800a83e:	f000 bd3f 	b.w	800b2c0 <_malloc_r>
 800a842:	bf00      	nop
 800a844:	20000010 	.word	0x20000010

0800a848 <__ascii_mbtowc>:
 800a848:	b082      	sub	sp, #8
 800a84a:	b901      	cbnz	r1, 800a84e <__ascii_mbtowc+0x6>
 800a84c:	a901      	add	r1, sp, #4
 800a84e:	b142      	cbz	r2, 800a862 <__ascii_mbtowc+0x1a>
 800a850:	b14b      	cbz	r3, 800a866 <__ascii_mbtowc+0x1e>
 800a852:	7813      	ldrb	r3, [r2, #0]
 800a854:	600b      	str	r3, [r1, #0]
 800a856:	7812      	ldrb	r2, [r2, #0]
 800a858:	1e10      	subs	r0, r2, #0
 800a85a:	bf18      	it	ne
 800a85c:	2001      	movne	r0, #1
 800a85e:	b002      	add	sp, #8
 800a860:	4770      	bx	lr
 800a862:	4610      	mov	r0, r2
 800a864:	e7fb      	b.n	800a85e <__ascii_mbtowc+0x16>
 800a866:	f06f 0001 	mvn.w	r0, #1
 800a86a:	e7f8      	b.n	800a85e <__ascii_mbtowc+0x16>

0800a86c <memcpy>:
 800a86c:	440a      	add	r2, r1
 800a86e:	4291      	cmp	r1, r2
 800a870:	f100 33ff 	add.w	r3, r0, #4294967295
 800a874:	d100      	bne.n	800a878 <memcpy+0xc>
 800a876:	4770      	bx	lr
 800a878:	b510      	push	{r4, lr}
 800a87a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a87e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a882:	4291      	cmp	r1, r2
 800a884:	d1f9      	bne.n	800a87a <memcpy+0xe>
 800a886:	bd10      	pop	{r4, pc}

0800a888 <_Balloc>:
 800a888:	b570      	push	{r4, r5, r6, lr}
 800a88a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a88c:	4604      	mov	r4, r0
 800a88e:	460d      	mov	r5, r1
 800a890:	b976      	cbnz	r6, 800a8b0 <_Balloc+0x28>
 800a892:	2010      	movs	r0, #16
 800a894:	f7ff ffd0 	bl	800a838 <malloc>
 800a898:	4602      	mov	r2, r0
 800a89a:	6260      	str	r0, [r4, #36]	; 0x24
 800a89c:	b920      	cbnz	r0, 800a8a8 <_Balloc+0x20>
 800a89e:	4b18      	ldr	r3, [pc, #96]	; (800a900 <_Balloc+0x78>)
 800a8a0:	4818      	ldr	r0, [pc, #96]	; (800a904 <_Balloc+0x7c>)
 800a8a2:	2166      	movs	r1, #102	; 0x66
 800a8a4:	f001 f8f0 	bl	800ba88 <__assert_func>
 800a8a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8ac:	6006      	str	r6, [r0, #0]
 800a8ae:	60c6      	str	r6, [r0, #12]
 800a8b0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a8b2:	68f3      	ldr	r3, [r6, #12]
 800a8b4:	b183      	cbz	r3, 800a8d8 <_Balloc+0x50>
 800a8b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a8be:	b9b8      	cbnz	r0, 800a8f0 <_Balloc+0x68>
 800a8c0:	2101      	movs	r1, #1
 800a8c2:	fa01 f605 	lsl.w	r6, r1, r5
 800a8c6:	1d72      	adds	r2, r6, #5
 800a8c8:	0092      	lsls	r2, r2, #2
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f000 fc98 	bl	800b200 <_calloc_r>
 800a8d0:	b160      	cbz	r0, 800a8ec <_Balloc+0x64>
 800a8d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a8d6:	e00e      	b.n	800a8f6 <_Balloc+0x6e>
 800a8d8:	2221      	movs	r2, #33	; 0x21
 800a8da:	2104      	movs	r1, #4
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f000 fc8f 	bl	800b200 <_calloc_r>
 800a8e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a8e4:	60f0      	str	r0, [r6, #12]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1e4      	bne.n	800a8b6 <_Balloc+0x2e>
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	bd70      	pop	{r4, r5, r6, pc}
 800a8f0:	6802      	ldr	r2, [r0, #0]
 800a8f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a8f6:	2300      	movs	r3, #0
 800a8f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a8fc:	e7f7      	b.n	800a8ee <_Balloc+0x66>
 800a8fe:	bf00      	nop
 800a900:	0800c176 	.word	0x0800c176
 800a904:	0800c2e0 	.word	0x0800c2e0

0800a908 <_Bfree>:
 800a908:	b570      	push	{r4, r5, r6, lr}
 800a90a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a90c:	4605      	mov	r5, r0
 800a90e:	460c      	mov	r4, r1
 800a910:	b976      	cbnz	r6, 800a930 <_Bfree+0x28>
 800a912:	2010      	movs	r0, #16
 800a914:	f7ff ff90 	bl	800a838 <malloc>
 800a918:	4602      	mov	r2, r0
 800a91a:	6268      	str	r0, [r5, #36]	; 0x24
 800a91c:	b920      	cbnz	r0, 800a928 <_Bfree+0x20>
 800a91e:	4b09      	ldr	r3, [pc, #36]	; (800a944 <_Bfree+0x3c>)
 800a920:	4809      	ldr	r0, [pc, #36]	; (800a948 <_Bfree+0x40>)
 800a922:	218a      	movs	r1, #138	; 0x8a
 800a924:	f001 f8b0 	bl	800ba88 <__assert_func>
 800a928:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a92c:	6006      	str	r6, [r0, #0]
 800a92e:	60c6      	str	r6, [r0, #12]
 800a930:	b13c      	cbz	r4, 800a942 <_Bfree+0x3a>
 800a932:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a934:	6862      	ldr	r2, [r4, #4]
 800a936:	68db      	ldr	r3, [r3, #12]
 800a938:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a93c:	6021      	str	r1, [r4, #0]
 800a93e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a942:	bd70      	pop	{r4, r5, r6, pc}
 800a944:	0800c176 	.word	0x0800c176
 800a948:	0800c2e0 	.word	0x0800c2e0

0800a94c <__multadd>:
 800a94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a950:	690e      	ldr	r6, [r1, #16]
 800a952:	4607      	mov	r7, r0
 800a954:	4698      	mov	r8, r3
 800a956:	460c      	mov	r4, r1
 800a958:	f101 0014 	add.w	r0, r1, #20
 800a95c:	2300      	movs	r3, #0
 800a95e:	6805      	ldr	r5, [r0, #0]
 800a960:	b2a9      	uxth	r1, r5
 800a962:	fb02 8101 	mla	r1, r2, r1, r8
 800a966:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a96a:	0c2d      	lsrs	r5, r5, #16
 800a96c:	fb02 c505 	mla	r5, r2, r5, ip
 800a970:	b289      	uxth	r1, r1
 800a972:	3301      	adds	r3, #1
 800a974:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a978:	429e      	cmp	r6, r3
 800a97a:	f840 1b04 	str.w	r1, [r0], #4
 800a97e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a982:	dcec      	bgt.n	800a95e <__multadd+0x12>
 800a984:	f1b8 0f00 	cmp.w	r8, #0
 800a988:	d022      	beq.n	800a9d0 <__multadd+0x84>
 800a98a:	68a3      	ldr	r3, [r4, #8]
 800a98c:	42b3      	cmp	r3, r6
 800a98e:	dc19      	bgt.n	800a9c4 <__multadd+0x78>
 800a990:	6861      	ldr	r1, [r4, #4]
 800a992:	4638      	mov	r0, r7
 800a994:	3101      	adds	r1, #1
 800a996:	f7ff ff77 	bl	800a888 <_Balloc>
 800a99a:	4605      	mov	r5, r0
 800a99c:	b928      	cbnz	r0, 800a9aa <__multadd+0x5e>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	4b0d      	ldr	r3, [pc, #52]	; (800a9d8 <__multadd+0x8c>)
 800a9a2:	480e      	ldr	r0, [pc, #56]	; (800a9dc <__multadd+0x90>)
 800a9a4:	21b5      	movs	r1, #181	; 0xb5
 800a9a6:	f001 f86f 	bl	800ba88 <__assert_func>
 800a9aa:	6922      	ldr	r2, [r4, #16]
 800a9ac:	3202      	adds	r2, #2
 800a9ae:	f104 010c 	add.w	r1, r4, #12
 800a9b2:	0092      	lsls	r2, r2, #2
 800a9b4:	300c      	adds	r0, #12
 800a9b6:	f7ff ff59 	bl	800a86c <memcpy>
 800a9ba:	4621      	mov	r1, r4
 800a9bc:	4638      	mov	r0, r7
 800a9be:	f7ff ffa3 	bl	800a908 <_Bfree>
 800a9c2:	462c      	mov	r4, r5
 800a9c4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a9c8:	3601      	adds	r6, #1
 800a9ca:	f8c3 8014 	str.w	r8, [r3, #20]
 800a9ce:	6126      	str	r6, [r4, #16]
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9d6:	bf00      	nop
 800a9d8:	0800c1ec 	.word	0x0800c1ec
 800a9dc:	0800c2e0 	.word	0x0800c2e0

0800a9e0 <__s2b>:
 800a9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9e4:	460c      	mov	r4, r1
 800a9e6:	4615      	mov	r5, r2
 800a9e8:	461f      	mov	r7, r3
 800a9ea:	2209      	movs	r2, #9
 800a9ec:	3308      	adds	r3, #8
 800a9ee:	4606      	mov	r6, r0
 800a9f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a9f4:	2100      	movs	r1, #0
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	db09      	blt.n	800aa10 <__s2b+0x30>
 800a9fc:	4630      	mov	r0, r6
 800a9fe:	f7ff ff43 	bl	800a888 <_Balloc>
 800aa02:	b940      	cbnz	r0, 800aa16 <__s2b+0x36>
 800aa04:	4602      	mov	r2, r0
 800aa06:	4b19      	ldr	r3, [pc, #100]	; (800aa6c <__s2b+0x8c>)
 800aa08:	4819      	ldr	r0, [pc, #100]	; (800aa70 <__s2b+0x90>)
 800aa0a:	21ce      	movs	r1, #206	; 0xce
 800aa0c:	f001 f83c 	bl	800ba88 <__assert_func>
 800aa10:	0052      	lsls	r2, r2, #1
 800aa12:	3101      	adds	r1, #1
 800aa14:	e7f0      	b.n	800a9f8 <__s2b+0x18>
 800aa16:	9b08      	ldr	r3, [sp, #32]
 800aa18:	6143      	str	r3, [r0, #20]
 800aa1a:	2d09      	cmp	r5, #9
 800aa1c:	f04f 0301 	mov.w	r3, #1
 800aa20:	6103      	str	r3, [r0, #16]
 800aa22:	dd16      	ble.n	800aa52 <__s2b+0x72>
 800aa24:	f104 0909 	add.w	r9, r4, #9
 800aa28:	46c8      	mov	r8, r9
 800aa2a:	442c      	add	r4, r5
 800aa2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800aa30:	4601      	mov	r1, r0
 800aa32:	3b30      	subs	r3, #48	; 0x30
 800aa34:	220a      	movs	r2, #10
 800aa36:	4630      	mov	r0, r6
 800aa38:	f7ff ff88 	bl	800a94c <__multadd>
 800aa3c:	45a0      	cmp	r8, r4
 800aa3e:	d1f5      	bne.n	800aa2c <__s2b+0x4c>
 800aa40:	f1a5 0408 	sub.w	r4, r5, #8
 800aa44:	444c      	add	r4, r9
 800aa46:	1b2d      	subs	r5, r5, r4
 800aa48:	1963      	adds	r3, r4, r5
 800aa4a:	42bb      	cmp	r3, r7
 800aa4c:	db04      	blt.n	800aa58 <__s2b+0x78>
 800aa4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa52:	340a      	adds	r4, #10
 800aa54:	2509      	movs	r5, #9
 800aa56:	e7f6      	b.n	800aa46 <__s2b+0x66>
 800aa58:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa5c:	4601      	mov	r1, r0
 800aa5e:	3b30      	subs	r3, #48	; 0x30
 800aa60:	220a      	movs	r2, #10
 800aa62:	4630      	mov	r0, r6
 800aa64:	f7ff ff72 	bl	800a94c <__multadd>
 800aa68:	e7ee      	b.n	800aa48 <__s2b+0x68>
 800aa6a:	bf00      	nop
 800aa6c:	0800c1ec 	.word	0x0800c1ec
 800aa70:	0800c2e0 	.word	0x0800c2e0

0800aa74 <__hi0bits>:
 800aa74:	0c03      	lsrs	r3, r0, #16
 800aa76:	041b      	lsls	r3, r3, #16
 800aa78:	b9d3      	cbnz	r3, 800aab0 <__hi0bits+0x3c>
 800aa7a:	0400      	lsls	r0, r0, #16
 800aa7c:	2310      	movs	r3, #16
 800aa7e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800aa82:	bf04      	itt	eq
 800aa84:	0200      	lsleq	r0, r0, #8
 800aa86:	3308      	addeq	r3, #8
 800aa88:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aa8c:	bf04      	itt	eq
 800aa8e:	0100      	lsleq	r0, r0, #4
 800aa90:	3304      	addeq	r3, #4
 800aa92:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800aa96:	bf04      	itt	eq
 800aa98:	0080      	lsleq	r0, r0, #2
 800aa9a:	3302      	addeq	r3, #2
 800aa9c:	2800      	cmp	r0, #0
 800aa9e:	db05      	blt.n	800aaac <__hi0bits+0x38>
 800aaa0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800aaa4:	f103 0301 	add.w	r3, r3, #1
 800aaa8:	bf08      	it	eq
 800aaaa:	2320      	moveq	r3, #32
 800aaac:	4618      	mov	r0, r3
 800aaae:	4770      	bx	lr
 800aab0:	2300      	movs	r3, #0
 800aab2:	e7e4      	b.n	800aa7e <__hi0bits+0xa>

0800aab4 <__lo0bits>:
 800aab4:	6803      	ldr	r3, [r0, #0]
 800aab6:	f013 0207 	ands.w	r2, r3, #7
 800aaba:	4601      	mov	r1, r0
 800aabc:	d00b      	beq.n	800aad6 <__lo0bits+0x22>
 800aabe:	07da      	lsls	r2, r3, #31
 800aac0:	d424      	bmi.n	800ab0c <__lo0bits+0x58>
 800aac2:	0798      	lsls	r0, r3, #30
 800aac4:	bf49      	itett	mi
 800aac6:	085b      	lsrmi	r3, r3, #1
 800aac8:	089b      	lsrpl	r3, r3, #2
 800aaca:	2001      	movmi	r0, #1
 800aacc:	600b      	strmi	r3, [r1, #0]
 800aace:	bf5c      	itt	pl
 800aad0:	600b      	strpl	r3, [r1, #0]
 800aad2:	2002      	movpl	r0, #2
 800aad4:	4770      	bx	lr
 800aad6:	b298      	uxth	r0, r3
 800aad8:	b9b0      	cbnz	r0, 800ab08 <__lo0bits+0x54>
 800aada:	0c1b      	lsrs	r3, r3, #16
 800aadc:	2010      	movs	r0, #16
 800aade:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aae2:	bf04      	itt	eq
 800aae4:	0a1b      	lsreq	r3, r3, #8
 800aae6:	3008      	addeq	r0, #8
 800aae8:	071a      	lsls	r2, r3, #28
 800aaea:	bf04      	itt	eq
 800aaec:	091b      	lsreq	r3, r3, #4
 800aaee:	3004      	addeq	r0, #4
 800aaf0:	079a      	lsls	r2, r3, #30
 800aaf2:	bf04      	itt	eq
 800aaf4:	089b      	lsreq	r3, r3, #2
 800aaf6:	3002      	addeq	r0, #2
 800aaf8:	07da      	lsls	r2, r3, #31
 800aafa:	d403      	bmi.n	800ab04 <__lo0bits+0x50>
 800aafc:	085b      	lsrs	r3, r3, #1
 800aafe:	f100 0001 	add.w	r0, r0, #1
 800ab02:	d005      	beq.n	800ab10 <__lo0bits+0x5c>
 800ab04:	600b      	str	r3, [r1, #0]
 800ab06:	4770      	bx	lr
 800ab08:	4610      	mov	r0, r2
 800ab0a:	e7e8      	b.n	800aade <__lo0bits+0x2a>
 800ab0c:	2000      	movs	r0, #0
 800ab0e:	4770      	bx	lr
 800ab10:	2020      	movs	r0, #32
 800ab12:	4770      	bx	lr

0800ab14 <__i2b>:
 800ab14:	b510      	push	{r4, lr}
 800ab16:	460c      	mov	r4, r1
 800ab18:	2101      	movs	r1, #1
 800ab1a:	f7ff feb5 	bl	800a888 <_Balloc>
 800ab1e:	4602      	mov	r2, r0
 800ab20:	b928      	cbnz	r0, 800ab2e <__i2b+0x1a>
 800ab22:	4b05      	ldr	r3, [pc, #20]	; (800ab38 <__i2b+0x24>)
 800ab24:	4805      	ldr	r0, [pc, #20]	; (800ab3c <__i2b+0x28>)
 800ab26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ab2a:	f000 ffad 	bl	800ba88 <__assert_func>
 800ab2e:	2301      	movs	r3, #1
 800ab30:	6144      	str	r4, [r0, #20]
 800ab32:	6103      	str	r3, [r0, #16]
 800ab34:	bd10      	pop	{r4, pc}
 800ab36:	bf00      	nop
 800ab38:	0800c1ec 	.word	0x0800c1ec
 800ab3c:	0800c2e0 	.word	0x0800c2e0

0800ab40 <__multiply>:
 800ab40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab44:	4614      	mov	r4, r2
 800ab46:	690a      	ldr	r2, [r1, #16]
 800ab48:	6923      	ldr	r3, [r4, #16]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	bfb8      	it	lt
 800ab4e:	460b      	movlt	r3, r1
 800ab50:	460d      	mov	r5, r1
 800ab52:	bfbc      	itt	lt
 800ab54:	4625      	movlt	r5, r4
 800ab56:	461c      	movlt	r4, r3
 800ab58:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ab5c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ab60:	68ab      	ldr	r3, [r5, #8]
 800ab62:	6869      	ldr	r1, [r5, #4]
 800ab64:	eb0a 0709 	add.w	r7, sl, r9
 800ab68:	42bb      	cmp	r3, r7
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	bfb8      	it	lt
 800ab6e:	3101      	addlt	r1, #1
 800ab70:	f7ff fe8a 	bl	800a888 <_Balloc>
 800ab74:	b930      	cbnz	r0, 800ab84 <__multiply+0x44>
 800ab76:	4602      	mov	r2, r0
 800ab78:	4b42      	ldr	r3, [pc, #264]	; (800ac84 <__multiply+0x144>)
 800ab7a:	4843      	ldr	r0, [pc, #268]	; (800ac88 <__multiply+0x148>)
 800ab7c:	f240 115d 	movw	r1, #349	; 0x15d
 800ab80:	f000 ff82 	bl	800ba88 <__assert_func>
 800ab84:	f100 0614 	add.w	r6, r0, #20
 800ab88:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ab8c:	4633      	mov	r3, r6
 800ab8e:	2200      	movs	r2, #0
 800ab90:	4543      	cmp	r3, r8
 800ab92:	d31e      	bcc.n	800abd2 <__multiply+0x92>
 800ab94:	f105 0c14 	add.w	ip, r5, #20
 800ab98:	f104 0314 	add.w	r3, r4, #20
 800ab9c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800aba0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800aba4:	9202      	str	r2, [sp, #8]
 800aba6:	ebac 0205 	sub.w	r2, ip, r5
 800abaa:	3a15      	subs	r2, #21
 800abac:	f022 0203 	bic.w	r2, r2, #3
 800abb0:	3204      	adds	r2, #4
 800abb2:	f105 0115 	add.w	r1, r5, #21
 800abb6:	458c      	cmp	ip, r1
 800abb8:	bf38      	it	cc
 800abba:	2204      	movcc	r2, #4
 800abbc:	9201      	str	r2, [sp, #4]
 800abbe:	9a02      	ldr	r2, [sp, #8]
 800abc0:	9303      	str	r3, [sp, #12]
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d808      	bhi.n	800abd8 <__multiply+0x98>
 800abc6:	2f00      	cmp	r7, #0
 800abc8:	dc55      	bgt.n	800ac76 <__multiply+0x136>
 800abca:	6107      	str	r7, [r0, #16]
 800abcc:	b005      	add	sp, #20
 800abce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd2:	f843 2b04 	str.w	r2, [r3], #4
 800abd6:	e7db      	b.n	800ab90 <__multiply+0x50>
 800abd8:	f8b3 a000 	ldrh.w	sl, [r3]
 800abdc:	f1ba 0f00 	cmp.w	sl, #0
 800abe0:	d020      	beq.n	800ac24 <__multiply+0xe4>
 800abe2:	f105 0e14 	add.w	lr, r5, #20
 800abe6:	46b1      	mov	r9, r6
 800abe8:	2200      	movs	r2, #0
 800abea:	f85e 4b04 	ldr.w	r4, [lr], #4
 800abee:	f8d9 b000 	ldr.w	fp, [r9]
 800abf2:	b2a1      	uxth	r1, r4
 800abf4:	fa1f fb8b 	uxth.w	fp, fp
 800abf8:	fb0a b101 	mla	r1, sl, r1, fp
 800abfc:	4411      	add	r1, r2
 800abfe:	f8d9 2000 	ldr.w	r2, [r9]
 800ac02:	0c24      	lsrs	r4, r4, #16
 800ac04:	0c12      	lsrs	r2, r2, #16
 800ac06:	fb0a 2404 	mla	r4, sl, r4, r2
 800ac0a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ac0e:	b289      	uxth	r1, r1
 800ac10:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ac14:	45f4      	cmp	ip, lr
 800ac16:	f849 1b04 	str.w	r1, [r9], #4
 800ac1a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ac1e:	d8e4      	bhi.n	800abea <__multiply+0xaa>
 800ac20:	9901      	ldr	r1, [sp, #4]
 800ac22:	5072      	str	r2, [r6, r1]
 800ac24:	9a03      	ldr	r2, [sp, #12]
 800ac26:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ac2a:	3304      	adds	r3, #4
 800ac2c:	f1b9 0f00 	cmp.w	r9, #0
 800ac30:	d01f      	beq.n	800ac72 <__multiply+0x132>
 800ac32:	6834      	ldr	r4, [r6, #0]
 800ac34:	f105 0114 	add.w	r1, r5, #20
 800ac38:	46b6      	mov	lr, r6
 800ac3a:	f04f 0a00 	mov.w	sl, #0
 800ac3e:	880a      	ldrh	r2, [r1, #0]
 800ac40:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ac44:	fb09 b202 	mla	r2, r9, r2, fp
 800ac48:	4492      	add	sl, r2
 800ac4a:	b2a4      	uxth	r4, r4
 800ac4c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ac50:	f84e 4b04 	str.w	r4, [lr], #4
 800ac54:	f851 4b04 	ldr.w	r4, [r1], #4
 800ac58:	f8be 2000 	ldrh.w	r2, [lr]
 800ac5c:	0c24      	lsrs	r4, r4, #16
 800ac5e:	fb09 2404 	mla	r4, r9, r4, r2
 800ac62:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ac66:	458c      	cmp	ip, r1
 800ac68:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ac6c:	d8e7      	bhi.n	800ac3e <__multiply+0xfe>
 800ac6e:	9a01      	ldr	r2, [sp, #4]
 800ac70:	50b4      	str	r4, [r6, r2]
 800ac72:	3604      	adds	r6, #4
 800ac74:	e7a3      	b.n	800abbe <__multiply+0x7e>
 800ac76:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d1a5      	bne.n	800abca <__multiply+0x8a>
 800ac7e:	3f01      	subs	r7, #1
 800ac80:	e7a1      	b.n	800abc6 <__multiply+0x86>
 800ac82:	bf00      	nop
 800ac84:	0800c1ec 	.word	0x0800c1ec
 800ac88:	0800c2e0 	.word	0x0800c2e0

0800ac8c <__pow5mult>:
 800ac8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac90:	4615      	mov	r5, r2
 800ac92:	f012 0203 	ands.w	r2, r2, #3
 800ac96:	4606      	mov	r6, r0
 800ac98:	460f      	mov	r7, r1
 800ac9a:	d007      	beq.n	800acac <__pow5mult+0x20>
 800ac9c:	4c25      	ldr	r4, [pc, #148]	; (800ad34 <__pow5mult+0xa8>)
 800ac9e:	3a01      	subs	r2, #1
 800aca0:	2300      	movs	r3, #0
 800aca2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aca6:	f7ff fe51 	bl	800a94c <__multadd>
 800acaa:	4607      	mov	r7, r0
 800acac:	10ad      	asrs	r5, r5, #2
 800acae:	d03d      	beq.n	800ad2c <__pow5mult+0xa0>
 800acb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800acb2:	b97c      	cbnz	r4, 800acd4 <__pow5mult+0x48>
 800acb4:	2010      	movs	r0, #16
 800acb6:	f7ff fdbf 	bl	800a838 <malloc>
 800acba:	4602      	mov	r2, r0
 800acbc:	6270      	str	r0, [r6, #36]	; 0x24
 800acbe:	b928      	cbnz	r0, 800accc <__pow5mult+0x40>
 800acc0:	4b1d      	ldr	r3, [pc, #116]	; (800ad38 <__pow5mult+0xac>)
 800acc2:	481e      	ldr	r0, [pc, #120]	; (800ad3c <__pow5mult+0xb0>)
 800acc4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800acc8:	f000 fede 	bl	800ba88 <__assert_func>
 800accc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800acd0:	6004      	str	r4, [r0, #0]
 800acd2:	60c4      	str	r4, [r0, #12]
 800acd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800acd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800acdc:	b94c      	cbnz	r4, 800acf2 <__pow5mult+0x66>
 800acde:	f240 2171 	movw	r1, #625	; 0x271
 800ace2:	4630      	mov	r0, r6
 800ace4:	f7ff ff16 	bl	800ab14 <__i2b>
 800ace8:	2300      	movs	r3, #0
 800acea:	f8c8 0008 	str.w	r0, [r8, #8]
 800acee:	4604      	mov	r4, r0
 800acf0:	6003      	str	r3, [r0, #0]
 800acf2:	f04f 0900 	mov.w	r9, #0
 800acf6:	07eb      	lsls	r3, r5, #31
 800acf8:	d50a      	bpl.n	800ad10 <__pow5mult+0x84>
 800acfa:	4639      	mov	r1, r7
 800acfc:	4622      	mov	r2, r4
 800acfe:	4630      	mov	r0, r6
 800ad00:	f7ff ff1e 	bl	800ab40 <__multiply>
 800ad04:	4639      	mov	r1, r7
 800ad06:	4680      	mov	r8, r0
 800ad08:	4630      	mov	r0, r6
 800ad0a:	f7ff fdfd 	bl	800a908 <_Bfree>
 800ad0e:	4647      	mov	r7, r8
 800ad10:	106d      	asrs	r5, r5, #1
 800ad12:	d00b      	beq.n	800ad2c <__pow5mult+0xa0>
 800ad14:	6820      	ldr	r0, [r4, #0]
 800ad16:	b938      	cbnz	r0, 800ad28 <__pow5mult+0x9c>
 800ad18:	4622      	mov	r2, r4
 800ad1a:	4621      	mov	r1, r4
 800ad1c:	4630      	mov	r0, r6
 800ad1e:	f7ff ff0f 	bl	800ab40 <__multiply>
 800ad22:	6020      	str	r0, [r4, #0]
 800ad24:	f8c0 9000 	str.w	r9, [r0]
 800ad28:	4604      	mov	r4, r0
 800ad2a:	e7e4      	b.n	800acf6 <__pow5mult+0x6a>
 800ad2c:	4638      	mov	r0, r7
 800ad2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad32:	bf00      	nop
 800ad34:	0800c430 	.word	0x0800c430
 800ad38:	0800c176 	.word	0x0800c176
 800ad3c:	0800c2e0 	.word	0x0800c2e0

0800ad40 <__lshift>:
 800ad40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad44:	460c      	mov	r4, r1
 800ad46:	6849      	ldr	r1, [r1, #4]
 800ad48:	6923      	ldr	r3, [r4, #16]
 800ad4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad4e:	68a3      	ldr	r3, [r4, #8]
 800ad50:	4607      	mov	r7, r0
 800ad52:	4691      	mov	r9, r2
 800ad54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad58:	f108 0601 	add.w	r6, r8, #1
 800ad5c:	42b3      	cmp	r3, r6
 800ad5e:	db0b      	blt.n	800ad78 <__lshift+0x38>
 800ad60:	4638      	mov	r0, r7
 800ad62:	f7ff fd91 	bl	800a888 <_Balloc>
 800ad66:	4605      	mov	r5, r0
 800ad68:	b948      	cbnz	r0, 800ad7e <__lshift+0x3e>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	4b28      	ldr	r3, [pc, #160]	; (800ae10 <__lshift+0xd0>)
 800ad6e:	4829      	ldr	r0, [pc, #164]	; (800ae14 <__lshift+0xd4>)
 800ad70:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ad74:	f000 fe88 	bl	800ba88 <__assert_func>
 800ad78:	3101      	adds	r1, #1
 800ad7a:	005b      	lsls	r3, r3, #1
 800ad7c:	e7ee      	b.n	800ad5c <__lshift+0x1c>
 800ad7e:	2300      	movs	r3, #0
 800ad80:	f100 0114 	add.w	r1, r0, #20
 800ad84:	f100 0210 	add.w	r2, r0, #16
 800ad88:	4618      	mov	r0, r3
 800ad8a:	4553      	cmp	r3, sl
 800ad8c:	db33      	blt.n	800adf6 <__lshift+0xb6>
 800ad8e:	6920      	ldr	r0, [r4, #16]
 800ad90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad94:	f104 0314 	add.w	r3, r4, #20
 800ad98:	f019 091f 	ands.w	r9, r9, #31
 800ad9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ada0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ada4:	d02b      	beq.n	800adfe <__lshift+0xbe>
 800ada6:	f1c9 0e20 	rsb	lr, r9, #32
 800adaa:	468a      	mov	sl, r1
 800adac:	2200      	movs	r2, #0
 800adae:	6818      	ldr	r0, [r3, #0]
 800adb0:	fa00 f009 	lsl.w	r0, r0, r9
 800adb4:	4302      	orrs	r2, r0
 800adb6:	f84a 2b04 	str.w	r2, [sl], #4
 800adba:	f853 2b04 	ldr.w	r2, [r3], #4
 800adbe:	459c      	cmp	ip, r3
 800adc0:	fa22 f20e 	lsr.w	r2, r2, lr
 800adc4:	d8f3      	bhi.n	800adae <__lshift+0x6e>
 800adc6:	ebac 0304 	sub.w	r3, ip, r4
 800adca:	3b15      	subs	r3, #21
 800adcc:	f023 0303 	bic.w	r3, r3, #3
 800add0:	3304      	adds	r3, #4
 800add2:	f104 0015 	add.w	r0, r4, #21
 800add6:	4584      	cmp	ip, r0
 800add8:	bf38      	it	cc
 800adda:	2304      	movcc	r3, #4
 800addc:	50ca      	str	r2, [r1, r3]
 800adde:	b10a      	cbz	r2, 800ade4 <__lshift+0xa4>
 800ade0:	f108 0602 	add.w	r6, r8, #2
 800ade4:	3e01      	subs	r6, #1
 800ade6:	4638      	mov	r0, r7
 800ade8:	612e      	str	r6, [r5, #16]
 800adea:	4621      	mov	r1, r4
 800adec:	f7ff fd8c 	bl	800a908 <_Bfree>
 800adf0:	4628      	mov	r0, r5
 800adf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adf6:	f842 0f04 	str.w	r0, [r2, #4]!
 800adfa:	3301      	adds	r3, #1
 800adfc:	e7c5      	b.n	800ad8a <__lshift+0x4a>
 800adfe:	3904      	subs	r1, #4
 800ae00:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae04:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae08:	459c      	cmp	ip, r3
 800ae0a:	d8f9      	bhi.n	800ae00 <__lshift+0xc0>
 800ae0c:	e7ea      	b.n	800ade4 <__lshift+0xa4>
 800ae0e:	bf00      	nop
 800ae10:	0800c1ec 	.word	0x0800c1ec
 800ae14:	0800c2e0 	.word	0x0800c2e0

0800ae18 <__mcmp>:
 800ae18:	b530      	push	{r4, r5, lr}
 800ae1a:	6902      	ldr	r2, [r0, #16]
 800ae1c:	690c      	ldr	r4, [r1, #16]
 800ae1e:	1b12      	subs	r2, r2, r4
 800ae20:	d10e      	bne.n	800ae40 <__mcmp+0x28>
 800ae22:	f100 0314 	add.w	r3, r0, #20
 800ae26:	3114      	adds	r1, #20
 800ae28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ae2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ae30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ae34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ae38:	42a5      	cmp	r5, r4
 800ae3a:	d003      	beq.n	800ae44 <__mcmp+0x2c>
 800ae3c:	d305      	bcc.n	800ae4a <__mcmp+0x32>
 800ae3e:	2201      	movs	r2, #1
 800ae40:	4610      	mov	r0, r2
 800ae42:	bd30      	pop	{r4, r5, pc}
 800ae44:	4283      	cmp	r3, r0
 800ae46:	d3f3      	bcc.n	800ae30 <__mcmp+0x18>
 800ae48:	e7fa      	b.n	800ae40 <__mcmp+0x28>
 800ae4a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae4e:	e7f7      	b.n	800ae40 <__mcmp+0x28>

0800ae50 <__mdiff>:
 800ae50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae54:	460c      	mov	r4, r1
 800ae56:	4606      	mov	r6, r0
 800ae58:	4611      	mov	r1, r2
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	4617      	mov	r7, r2
 800ae5e:	f7ff ffdb 	bl	800ae18 <__mcmp>
 800ae62:	1e05      	subs	r5, r0, #0
 800ae64:	d110      	bne.n	800ae88 <__mdiff+0x38>
 800ae66:	4629      	mov	r1, r5
 800ae68:	4630      	mov	r0, r6
 800ae6a:	f7ff fd0d 	bl	800a888 <_Balloc>
 800ae6e:	b930      	cbnz	r0, 800ae7e <__mdiff+0x2e>
 800ae70:	4b39      	ldr	r3, [pc, #228]	; (800af58 <__mdiff+0x108>)
 800ae72:	4602      	mov	r2, r0
 800ae74:	f240 2132 	movw	r1, #562	; 0x232
 800ae78:	4838      	ldr	r0, [pc, #224]	; (800af5c <__mdiff+0x10c>)
 800ae7a:	f000 fe05 	bl	800ba88 <__assert_func>
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae88:	bfa4      	itt	ge
 800ae8a:	463b      	movge	r3, r7
 800ae8c:	4627      	movge	r7, r4
 800ae8e:	4630      	mov	r0, r6
 800ae90:	6879      	ldr	r1, [r7, #4]
 800ae92:	bfa6      	itte	ge
 800ae94:	461c      	movge	r4, r3
 800ae96:	2500      	movge	r5, #0
 800ae98:	2501      	movlt	r5, #1
 800ae9a:	f7ff fcf5 	bl	800a888 <_Balloc>
 800ae9e:	b920      	cbnz	r0, 800aeaa <__mdiff+0x5a>
 800aea0:	4b2d      	ldr	r3, [pc, #180]	; (800af58 <__mdiff+0x108>)
 800aea2:	4602      	mov	r2, r0
 800aea4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800aea8:	e7e6      	b.n	800ae78 <__mdiff+0x28>
 800aeaa:	693e      	ldr	r6, [r7, #16]
 800aeac:	60c5      	str	r5, [r0, #12]
 800aeae:	6925      	ldr	r5, [r4, #16]
 800aeb0:	f107 0114 	add.w	r1, r7, #20
 800aeb4:	f104 0914 	add.w	r9, r4, #20
 800aeb8:	f100 0e14 	add.w	lr, r0, #20
 800aebc:	f107 0210 	add.w	r2, r7, #16
 800aec0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800aec4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800aec8:	46f2      	mov	sl, lr
 800aeca:	2700      	movs	r7, #0
 800aecc:	f859 3b04 	ldr.w	r3, [r9], #4
 800aed0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aed4:	fa1f f883 	uxth.w	r8, r3
 800aed8:	fa17 f78b 	uxtah	r7, r7, fp
 800aedc:	0c1b      	lsrs	r3, r3, #16
 800aede:	eba7 0808 	sub.w	r8, r7, r8
 800aee2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800aee6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800aeea:	fa1f f888 	uxth.w	r8, r8
 800aeee:	141f      	asrs	r7, r3, #16
 800aef0:	454d      	cmp	r5, r9
 800aef2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800aef6:	f84a 3b04 	str.w	r3, [sl], #4
 800aefa:	d8e7      	bhi.n	800aecc <__mdiff+0x7c>
 800aefc:	1b2b      	subs	r3, r5, r4
 800aefe:	3b15      	subs	r3, #21
 800af00:	f023 0303 	bic.w	r3, r3, #3
 800af04:	3304      	adds	r3, #4
 800af06:	3415      	adds	r4, #21
 800af08:	42a5      	cmp	r5, r4
 800af0a:	bf38      	it	cc
 800af0c:	2304      	movcc	r3, #4
 800af0e:	4419      	add	r1, r3
 800af10:	4473      	add	r3, lr
 800af12:	469e      	mov	lr, r3
 800af14:	460d      	mov	r5, r1
 800af16:	4565      	cmp	r5, ip
 800af18:	d30e      	bcc.n	800af38 <__mdiff+0xe8>
 800af1a:	f10c 0203 	add.w	r2, ip, #3
 800af1e:	1a52      	subs	r2, r2, r1
 800af20:	f022 0203 	bic.w	r2, r2, #3
 800af24:	3903      	subs	r1, #3
 800af26:	458c      	cmp	ip, r1
 800af28:	bf38      	it	cc
 800af2a:	2200      	movcc	r2, #0
 800af2c:	441a      	add	r2, r3
 800af2e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800af32:	b17b      	cbz	r3, 800af54 <__mdiff+0x104>
 800af34:	6106      	str	r6, [r0, #16]
 800af36:	e7a5      	b.n	800ae84 <__mdiff+0x34>
 800af38:	f855 8b04 	ldr.w	r8, [r5], #4
 800af3c:	fa17 f488 	uxtah	r4, r7, r8
 800af40:	1422      	asrs	r2, r4, #16
 800af42:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800af46:	b2a4      	uxth	r4, r4
 800af48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800af4c:	f84e 4b04 	str.w	r4, [lr], #4
 800af50:	1417      	asrs	r7, r2, #16
 800af52:	e7e0      	b.n	800af16 <__mdiff+0xc6>
 800af54:	3e01      	subs	r6, #1
 800af56:	e7ea      	b.n	800af2e <__mdiff+0xde>
 800af58:	0800c1ec 	.word	0x0800c1ec
 800af5c:	0800c2e0 	.word	0x0800c2e0

0800af60 <__ulp>:
 800af60:	b082      	sub	sp, #8
 800af62:	ed8d 0b00 	vstr	d0, [sp]
 800af66:	9b01      	ldr	r3, [sp, #4]
 800af68:	4912      	ldr	r1, [pc, #72]	; (800afb4 <__ulp+0x54>)
 800af6a:	4019      	ands	r1, r3
 800af6c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800af70:	2900      	cmp	r1, #0
 800af72:	dd05      	ble.n	800af80 <__ulp+0x20>
 800af74:	2200      	movs	r2, #0
 800af76:	460b      	mov	r3, r1
 800af78:	ec43 2b10 	vmov	d0, r2, r3
 800af7c:	b002      	add	sp, #8
 800af7e:	4770      	bx	lr
 800af80:	4249      	negs	r1, r1
 800af82:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800af86:	ea4f 5021 	mov.w	r0, r1, asr #20
 800af8a:	f04f 0200 	mov.w	r2, #0
 800af8e:	f04f 0300 	mov.w	r3, #0
 800af92:	da04      	bge.n	800af9e <__ulp+0x3e>
 800af94:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800af98:	fa41 f300 	asr.w	r3, r1, r0
 800af9c:	e7ec      	b.n	800af78 <__ulp+0x18>
 800af9e:	f1a0 0114 	sub.w	r1, r0, #20
 800afa2:	291e      	cmp	r1, #30
 800afa4:	bfda      	itte	le
 800afa6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800afaa:	fa20 f101 	lsrle.w	r1, r0, r1
 800afae:	2101      	movgt	r1, #1
 800afb0:	460a      	mov	r2, r1
 800afb2:	e7e1      	b.n	800af78 <__ulp+0x18>
 800afb4:	7ff00000 	.word	0x7ff00000

0800afb8 <__b2d>:
 800afb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afba:	6905      	ldr	r5, [r0, #16]
 800afbc:	f100 0714 	add.w	r7, r0, #20
 800afc0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800afc4:	1f2e      	subs	r6, r5, #4
 800afc6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800afca:	4620      	mov	r0, r4
 800afcc:	f7ff fd52 	bl	800aa74 <__hi0bits>
 800afd0:	f1c0 0320 	rsb	r3, r0, #32
 800afd4:	280a      	cmp	r0, #10
 800afd6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b054 <__b2d+0x9c>
 800afda:	600b      	str	r3, [r1, #0]
 800afdc:	dc14      	bgt.n	800b008 <__b2d+0x50>
 800afde:	f1c0 0e0b 	rsb	lr, r0, #11
 800afe2:	fa24 f10e 	lsr.w	r1, r4, lr
 800afe6:	42b7      	cmp	r7, r6
 800afe8:	ea41 030c 	orr.w	r3, r1, ip
 800afec:	bf34      	ite	cc
 800afee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800aff2:	2100      	movcs	r1, #0
 800aff4:	3015      	adds	r0, #21
 800aff6:	fa04 f000 	lsl.w	r0, r4, r0
 800affa:	fa21 f10e 	lsr.w	r1, r1, lr
 800affe:	ea40 0201 	orr.w	r2, r0, r1
 800b002:	ec43 2b10 	vmov	d0, r2, r3
 800b006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b008:	42b7      	cmp	r7, r6
 800b00a:	bf3a      	itte	cc
 800b00c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b010:	f1a5 0608 	subcc.w	r6, r5, #8
 800b014:	2100      	movcs	r1, #0
 800b016:	380b      	subs	r0, #11
 800b018:	d017      	beq.n	800b04a <__b2d+0x92>
 800b01a:	f1c0 0c20 	rsb	ip, r0, #32
 800b01e:	fa04 f500 	lsl.w	r5, r4, r0
 800b022:	42be      	cmp	r6, r7
 800b024:	fa21 f40c 	lsr.w	r4, r1, ip
 800b028:	ea45 0504 	orr.w	r5, r5, r4
 800b02c:	bf8c      	ite	hi
 800b02e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b032:	2400      	movls	r4, #0
 800b034:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b038:	fa01 f000 	lsl.w	r0, r1, r0
 800b03c:	fa24 f40c 	lsr.w	r4, r4, ip
 800b040:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b044:	ea40 0204 	orr.w	r2, r0, r4
 800b048:	e7db      	b.n	800b002 <__b2d+0x4a>
 800b04a:	ea44 030c 	orr.w	r3, r4, ip
 800b04e:	460a      	mov	r2, r1
 800b050:	e7d7      	b.n	800b002 <__b2d+0x4a>
 800b052:	bf00      	nop
 800b054:	3ff00000 	.word	0x3ff00000

0800b058 <__d2b>:
 800b058:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b05c:	4689      	mov	r9, r1
 800b05e:	2101      	movs	r1, #1
 800b060:	ec57 6b10 	vmov	r6, r7, d0
 800b064:	4690      	mov	r8, r2
 800b066:	f7ff fc0f 	bl	800a888 <_Balloc>
 800b06a:	4604      	mov	r4, r0
 800b06c:	b930      	cbnz	r0, 800b07c <__d2b+0x24>
 800b06e:	4602      	mov	r2, r0
 800b070:	4b25      	ldr	r3, [pc, #148]	; (800b108 <__d2b+0xb0>)
 800b072:	4826      	ldr	r0, [pc, #152]	; (800b10c <__d2b+0xb4>)
 800b074:	f240 310a 	movw	r1, #778	; 0x30a
 800b078:	f000 fd06 	bl	800ba88 <__assert_func>
 800b07c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b080:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b084:	bb35      	cbnz	r5, 800b0d4 <__d2b+0x7c>
 800b086:	2e00      	cmp	r6, #0
 800b088:	9301      	str	r3, [sp, #4]
 800b08a:	d028      	beq.n	800b0de <__d2b+0x86>
 800b08c:	4668      	mov	r0, sp
 800b08e:	9600      	str	r6, [sp, #0]
 800b090:	f7ff fd10 	bl	800aab4 <__lo0bits>
 800b094:	9900      	ldr	r1, [sp, #0]
 800b096:	b300      	cbz	r0, 800b0da <__d2b+0x82>
 800b098:	9a01      	ldr	r2, [sp, #4]
 800b09a:	f1c0 0320 	rsb	r3, r0, #32
 800b09e:	fa02 f303 	lsl.w	r3, r2, r3
 800b0a2:	430b      	orrs	r3, r1
 800b0a4:	40c2      	lsrs	r2, r0
 800b0a6:	6163      	str	r3, [r4, #20]
 800b0a8:	9201      	str	r2, [sp, #4]
 800b0aa:	9b01      	ldr	r3, [sp, #4]
 800b0ac:	61a3      	str	r3, [r4, #24]
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	bf14      	ite	ne
 800b0b2:	2202      	movne	r2, #2
 800b0b4:	2201      	moveq	r2, #1
 800b0b6:	6122      	str	r2, [r4, #16]
 800b0b8:	b1d5      	cbz	r5, 800b0f0 <__d2b+0x98>
 800b0ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b0be:	4405      	add	r5, r0
 800b0c0:	f8c9 5000 	str.w	r5, [r9]
 800b0c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b0c8:	f8c8 0000 	str.w	r0, [r8]
 800b0cc:	4620      	mov	r0, r4
 800b0ce:	b003      	add	sp, #12
 800b0d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b0d8:	e7d5      	b.n	800b086 <__d2b+0x2e>
 800b0da:	6161      	str	r1, [r4, #20]
 800b0dc:	e7e5      	b.n	800b0aa <__d2b+0x52>
 800b0de:	a801      	add	r0, sp, #4
 800b0e0:	f7ff fce8 	bl	800aab4 <__lo0bits>
 800b0e4:	9b01      	ldr	r3, [sp, #4]
 800b0e6:	6163      	str	r3, [r4, #20]
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	6122      	str	r2, [r4, #16]
 800b0ec:	3020      	adds	r0, #32
 800b0ee:	e7e3      	b.n	800b0b8 <__d2b+0x60>
 800b0f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b0f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b0f8:	f8c9 0000 	str.w	r0, [r9]
 800b0fc:	6918      	ldr	r0, [r3, #16]
 800b0fe:	f7ff fcb9 	bl	800aa74 <__hi0bits>
 800b102:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b106:	e7df      	b.n	800b0c8 <__d2b+0x70>
 800b108:	0800c1ec 	.word	0x0800c1ec
 800b10c:	0800c2e0 	.word	0x0800c2e0

0800b110 <__ratio>:
 800b110:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b114:	468a      	mov	sl, r1
 800b116:	4669      	mov	r1, sp
 800b118:	4683      	mov	fp, r0
 800b11a:	f7ff ff4d 	bl	800afb8 <__b2d>
 800b11e:	a901      	add	r1, sp, #4
 800b120:	4650      	mov	r0, sl
 800b122:	ec59 8b10 	vmov	r8, r9, d0
 800b126:	ee10 6a10 	vmov	r6, s0
 800b12a:	f7ff ff45 	bl	800afb8 <__b2d>
 800b12e:	f8db 3010 	ldr.w	r3, [fp, #16]
 800b132:	f8da 2010 	ldr.w	r2, [sl, #16]
 800b136:	eba3 0c02 	sub.w	ip, r3, r2
 800b13a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b13e:	1a9b      	subs	r3, r3, r2
 800b140:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b144:	ec55 4b10 	vmov	r4, r5, d0
 800b148:	2b00      	cmp	r3, #0
 800b14a:	ee10 0a10 	vmov	r0, s0
 800b14e:	bfce      	itee	gt
 800b150:	464a      	movgt	r2, r9
 800b152:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b156:	462a      	movle	r2, r5
 800b158:	464f      	mov	r7, r9
 800b15a:	4629      	mov	r1, r5
 800b15c:	bfcc      	ite	gt
 800b15e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b162:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800b166:	ec47 6b17 	vmov	d7, r6, r7
 800b16a:	ec41 0b16 	vmov	d6, r0, r1
 800b16e:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800b172:	b003      	add	sp, #12
 800b174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b178 <__copybits>:
 800b178:	3901      	subs	r1, #1
 800b17a:	b570      	push	{r4, r5, r6, lr}
 800b17c:	1149      	asrs	r1, r1, #5
 800b17e:	6914      	ldr	r4, [r2, #16]
 800b180:	3101      	adds	r1, #1
 800b182:	f102 0314 	add.w	r3, r2, #20
 800b186:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b18a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b18e:	1f05      	subs	r5, r0, #4
 800b190:	42a3      	cmp	r3, r4
 800b192:	d30c      	bcc.n	800b1ae <__copybits+0x36>
 800b194:	1aa3      	subs	r3, r4, r2
 800b196:	3b11      	subs	r3, #17
 800b198:	f023 0303 	bic.w	r3, r3, #3
 800b19c:	3211      	adds	r2, #17
 800b19e:	42a2      	cmp	r2, r4
 800b1a0:	bf88      	it	hi
 800b1a2:	2300      	movhi	r3, #0
 800b1a4:	4418      	add	r0, r3
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	4288      	cmp	r0, r1
 800b1aa:	d305      	bcc.n	800b1b8 <__copybits+0x40>
 800b1ac:	bd70      	pop	{r4, r5, r6, pc}
 800b1ae:	f853 6b04 	ldr.w	r6, [r3], #4
 800b1b2:	f845 6f04 	str.w	r6, [r5, #4]!
 800b1b6:	e7eb      	b.n	800b190 <__copybits+0x18>
 800b1b8:	f840 3b04 	str.w	r3, [r0], #4
 800b1bc:	e7f4      	b.n	800b1a8 <__copybits+0x30>

0800b1be <__any_on>:
 800b1be:	f100 0214 	add.w	r2, r0, #20
 800b1c2:	6900      	ldr	r0, [r0, #16]
 800b1c4:	114b      	asrs	r3, r1, #5
 800b1c6:	4298      	cmp	r0, r3
 800b1c8:	b510      	push	{r4, lr}
 800b1ca:	db11      	blt.n	800b1f0 <__any_on+0x32>
 800b1cc:	dd0a      	ble.n	800b1e4 <__any_on+0x26>
 800b1ce:	f011 011f 	ands.w	r1, r1, #31
 800b1d2:	d007      	beq.n	800b1e4 <__any_on+0x26>
 800b1d4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b1d8:	fa24 f001 	lsr.w	r0, r4, r1
 800b1dc:	fa00 f101 	lsl.w	r1, r0, r1
 800b1e0:	428c      	cmp	r4, r1
 800b1e2:	d10b      	bne.n	800b1fc <__any_on+0x3e>
 800b1e4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d803      	bhi.n	800b1f4 <__any_on+0x36>
 800b1ec:	2000      	movs	r0, #0
 800b1ee:	bd10      	pop	{r4, pc}
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	e7f7      	b.n	800b1e4 <__any_on+0x26>
 800b1f4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b1f8:	2900      	cmp	r1, #0
 800b1fa:	d0f5      	beq.n	800b1e8 <__any_on+0x2a>
 800b1fc:	2001      	movs	r0, #1
 800b1fe:	e7f6      	b.n	800b1ee <__any_on+0x30>

0800b200 <_calloc_r>:
 800b200:	b513      	push	{r0, r1, r4, lr}
 800b202:	434a      	muls	r2, r1
 800b204:	4611      	mov	r1, r2
 800b206:	9201      	str	r2, [sp, #4]
 800b208:	f000 f85a 	bl	800b2c0 <_malloc_r>
 800b20c:	4604      	mov	r4, r0
 800b20e:	b118      	cbz	r0, 800b218 <_calloc_r+0x18>
 800b210:	9a01      	ldr	r2, [sp, #4]
 800b212:	2100      	movs	r1, #0
 800b214:	f7fc f918 	bl	8007448 <memset>
 800b218:	4620      	mov	r0, r4
 800b21a:	b002      	add	sp, #8
 800b21c:	bd10      	pop	{r4, pc}
	...

0800b220 <_free_r>:
 800b220:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b222:	2900      	cmp	r1, #0
 800b224:	d048      	beq.n	800b2b8 <_free_r+0x98>
 800b226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b22a:	9001      	str	r0, [sp, #4]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	f1a1 0404 	sub.w	r4, r1, #4
 800b232:	bfb8      	it	lt
 800b234:	18e4      	addlt	r4, r4, r3
 800b236:	f000 fcb5 	bl	800bba4 <__malloc_lock>
 800b23a:	4a20      	ldr	r2, [pc, #128]	; (800b2bc <_free_r+0x9c>)
 800b23c:	9801      	ldr	r0, [sp, #4]
 800b23e:	6813      	ldr	r3, [r2, #0]
 800b240:	4615      	mov	r5, r2
 800b242:	b933      	cbnz	r3, 800b252 <_free_r+0x32>
 800b244:	6063      	str	r3, [r4, #4]
 800b246:	6014      	str	r4, [r2, #0]
 800b248:	b003      	add	sp, #12
 800b24a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b24e:	f000 bcaf 	b.w	800bbb0 <__malloc_unlock>
 800b252:	42a3      	cmp	r3, r4
 800b254:	d90b      	bls.n	800b26e <_free_r+0x4e>
 800b256:	6821      	ldr	r1, [r4, #0]
 800b258:	1862      	adds	r2, r4, r1
 800b25a:	4293      	cmp	r3, r2
 800b25c:	bf04      	itt	eq
 800b25e:	681a      	ldreq	r2, [r3, #0]
 800b260:	685b      	ldreq	r3, [r3, #4]
 800b262:	6063      	str	r3, [r4, #4]
 800b264:	bf04      	itt	eq
 800b266:	1852      	addeq	r2, r2, r1
 800b268:	6022      	streq	r2, [r4, #0]
 800b26a:	602c      	str	r4, [r5, #0]
 800b26c:	e7ec      	b.n	800b248 <_free_r+0x28>
 800b26e:	461a      	mov	r2, r3
 800b270:	685b      	ldr	r3, [r3, #4]
 800b272:	b10b      	cbz	r3, 800b278 <_free_r+0x58>
 800b274:	42a3      	cmp	r3, r4
 800b276:	d9fa      	bls.n	800b26e <_free_r+0x4e>
 800b278:	6811      	ldr	r1, [r2, #0]
 800b27a:	1855      	adds	r5, r2, r1
 800b27c:	42a5      	cmp	r5, r4
 800b27e:	d10b      	bne.n	800b298 <_free_r+0x78>
 800b280:	6824      	ldr	r4, [r4, #0]
 800b282:	4421      	add	r1, r4
 800b284:	1854      	adds	r4, r2, r1
 800b286:	42a3      	cmp	r3, r4
 800b288:	6011      	str	r1, [r2, #0]
 800b28a:	d1dd      	bne.n	800b248 <_free_r+0x28>
 800b28c:	681c      	ldr	r4, [r3, #0]
 800b28e:	685b      	ldr	r3, [r3, #4]
 800b290:	6053      	str	r3, [r2, #4]
 800b292:	4421      	add	r1, r4
 800b294:	6011      	str	r1, [r2, #0]
 800b296:	e7d7      	b.n	800b248 <_free_r+0x28>
 800b298:	d902      	bls.n	800b2a0 <_free_r+0x80>
 800b29a:	230c      	movs	r3, #12
 800b29c:	6003      	str	r3, [r0, #0]
 800b29e:	e7d3      	b.n	800b248 <_free_r+0x28>
 800b2a0:	6825      	ldr	r5, [r4, #0]
 800b2a2:	1961      	adds	r1, r4, r5
 800b2a4:	428b      	cmp	r3, r1
 800b2a6:	bf04      	itt	eq
 800b2a8:	6819      	ldreq	r1, [r3, #0]
 800b2aa:	685b      	ldreq	r3, [r3, #4]
 800b2ac:	6063      	str	r3, [r4, #4]
 800b2ae:	bf04      	itt	eq
 800b2b0:	1949      	addeq	r1, r1, r5
 800b2b2:	6021      	streq	r1, [r4, #0]
 800b2b4:	6054      	str	r4, [r2, #4]
 800b2b6:	e7c7      	b.n	800b248 <_free_r+0x28>
 800b2b8:	b003      	add	sp, #12
 800b2ba:	bd30      	pop	{r4, r5, pc}
 800b2bc:	20000308 	.word	0x20000308

0800b2c0 <_malloc_r>:
 800b2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2c2:	1ccd      	adds	r5, r1, #3
 800b2c4:	f025 0503 	bic.w	r5, r5, #3
 800b2c8:	3508      	adds	r5, #8
 800b2ca:	2d0c      	cmp	r5, #12
 800b2cc:	bf38      	it	cc
 800b2ce:	250c      	movcc	r5, #12
 800b2d0:	2d00      	cmp	r5, #0
 800b2d2:	4606      	mov	r6, r0
 800b2d4:	db01      	blt.n	800b2da <_malloc_r+0x1a>
 800b2d6:	42a9      	cmp	r1, r5
 800b2d8:	d903      	bls.n	800b2e2 <_malloc_r+0x22>
 800b2da:	230c      	movs	r3, #12
 800b2dc:	6033      	str	r3, [r6, #0]
 800b2de:	2000      	movs	r0, #0
 800b2e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2e2:	f000 fc5f 	bl	800bba4 <__malloc_lock>
 800b2e6:	4921      	ldr	r1, [pc, #132]	; (800b36c <_malloc_r+0xac>)
 800b2e8:	680a      	ldr	r2, [r1, #0]
 800b2ea:	4614      	mov	r4, r2
 800b2ec:	b99c      	cbnz	r4, 800b316 <_malloc_r+0x56>
 800b2ee:	4f20      	ldr	r7, [pc, #128]	; (800b370 <_malloc_r+0xb0>)
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	b923      	cbnz	r3, 800b2fe <_malloc_r+0x3e>
 800b2f4:	4621      	mov	r1, r4
 800b2f6:	4630      	mov	r0, r6
 800b2f8:	f000 fb42 	bl	800b980 <_sbrk_r>
 800b2fc:	6038      	str	r0, [r7, #0]
 800b2fe:	4629      	mov	r1, r5
 800b300:	4630      	mov	r0, r6
 800b302:	f000 fb3d 	bl	800b980 <_sbrk_r>
 800b306:	1c43      	adds	r3, r0, #1
 800b308:	d123      	bne.n	800b352 <_malloc_r+0x92>
 800b30a:	230c      	movs	r3, #12
 800b30c:	6033      	str	r3, [r6, #0]
 800b30e:	4630      	mov	r0, r6
 800b310:	f000 fc4e 	bl	800bbb0 <__malloc_unlock>
 800b314:	e7e3      	b.n	800b2de <_malloc_r+0x1e>
 800b316:	6823      	ldr	r3, [r4, #0]
 800b318:	1b5b      	subs	r3, r3, r5
 800b31a:	d417      	bmi.n	800b34c <_malloc_r+0x8c>
 800b31c:	2b0b      	cmp	r3, #11
 800b31e:	d903      	bls.n	800b328 <_malloc_r+0x68>
 800b320:	6023      	str	r3, [r4, #0]
 800b322:	441c      	add	r4, r3
 800b324:	6025      	str	r5, [r4, #0]
 800b326:	e004      	b.n	800b332 <_malloc_r+0x72>
 800b328:	6863      	ldr	r3, [r4, #4]
 800b32a:	42a2      	cmp	r2, r4
 800b32c:	bf0c      	ite	eq
 800b32e:	600b      	streq	r3, [r1, #0]
 800b330:	6053      	strne	r3, [r2, #4]
 800b332:	4630      	mov	r0, r6
 800b334:	f000 fc3c 	bl	800bbb0 <__malloc_unlock>
 800b338:	f104 000b 	add.w	r0, r4, #11
 800b33c:	1d23      	adds	r3, r4, #4
 800b33e:	f020 0007 	bic.w	r0, r0, #7
 800b342:	1ac2      	subs	r2, r0, r3
 800b344:	d0cc      	beq.n	800b2e0 <_malloc_r+0x20>
 800b346:	1a1b      	subs	r3, r3, r0
 800b348:	50a3      	str	r3, [r4, r2]
 800b34a:	e7c9      	b.n	800b2e0 <_malloc_r+0x20>
 800b34c:	4622      	mov	r2, r4
 800b34e:	6864      	ldr	r4, [r4, #4]
 800b350:	e7cc      	b.n	800b2ec <_malloc_r+0x2c>
 800b352:	1cc4      	adds	r4, r0, #3
 800b354:	f024 0403 	bic.w	r4, r4, #3
 800b358:	42a0      	cmp	r0, r4
 800b35a:	d0e3      	beq.n	800b324 <_malloc_r+0x64>
 800b35c:	1a21      	subs	r1, r4, r0
 800b35e:	4630      	mov	r0, r6
 800b360:	f000 fb0e 	bl	800b980 <_sbrk_r>
 800b364:	3001      	adds	r0, #1
 800b366:	d1dd      	bne.n	800b324 <_malloc_r+0x64>
 800b368:	e7cf      	b.n	800b30a <_malloc_r+0x4a>
 800b36a:	bf00      	nop
 800b36c:	20000308 	.word	0x20000308
 800b370:	2000030c 	.word	0x2000030c

0800b374 <__ssputs_r>:
 800b374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b378:	688e      	ldr	r6, [r1, #8]
 800b37a:	429e      	cmp	r6, r3
 800b37c:	4682      	mov	sl, r0
 800b37e:	460c      	mov	r4, r1
 800b380:	4690      	mov	r8, r2
 800b382:	461f      	mov	r7, r3
 800b384:	d838      	bhi.n	800b3f8 <__ssputs_r+0x84>
 800b386:	898a      	ldrh	r2, [r1, #12]
 800b388:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b38c:	d032      	beq.n	800b3f4 <__ssputs_r+0x80>
 800b38e:	6825      	ldr	r5, [r4, #0]
 800b390:	6909      	ldr	r1, [r1, #16]
 800b392:	eba5 0901 	sub.w	r9, r5, r1
 800b396:	6965      	ldr	r5, [r4, #20]
 800b398:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b39c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	444b      	add	r3, r9
 800b3a4:	106d      	asrs	r5, r5, #1
 800b3a6:	429d      	cmp	r5, r3
 800b3a8:	bf38      	it	cc
 800b3aa:	461d      	movcc	r5, r3
 800b3ac:	0553      	lsls	r3, r2, #21
 800b3ae:	d531      	bpl.n	800b414 <__ssputs_r+0xa0>
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	f7ff ff85 	bl	800b2c0 <_malloc_r>
 800b3b6:	4606      	mov	r6, r0
 800b3b8:	b950      	cbnz	r0, 800b3d0 <__ssputs_r+0x5c>
 800b3ba:	230c      	movs	r3, #12
 800b3bc:	f8ca 3000 	str.w	r3, [sl]
 800b3c0:	89a3      	ldrh	r3, [r4, #12]
 800b3c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b3c6:	81a3      	strh	r3, [r4, #12]
 800b3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d0:	6921      	ldr	r1, [r4, #16]
 800b3d2:	464a      	mov	r2, r9
 800b3d4:	f7ff fa4a 	bl	800a86c <memcpy>
 800b3d8:	89a3      	ldrh	r3, [r4, #12]
 800b3da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b3de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3e2:	81a3      	strh	r3, [r4, #12]
 800b3e4:	6126      	str	r6, [r4, #16]
 800b3e6:	6165      	str	r5, [r4, #20]
 800b3e8:	444e      	add	r6, r9
 800b3ea:	eba5 0509 	sub.w	r5, r5, r9
 800b3ee:	6026      	str	r6, [r4, #0]
 800b3f0:	60a5      	str	r5, [r4, #8]
 800b3f2:	463e      	mov	r6, r7
 800b3f4:	42be      	cmp	r6, r7
 800b3f6:	d900      	bls.n	800b3fa <__ssputs_r+0x86>
 800b3f8:	463e      	mov	r6, r7
 800b3fa:	4632      	mov	r2, r6
 800b3fc:	6820      	ldr	r0, [r4, #0]
 800b3fe:	4641      	mov	r1, r8
 800b400:	f000 fbb6 	bl	800bb70 <memmove>
 800b404:	68a3      	ldr	r3, [r4, #8]
 800b406:	6822      	ldr	r2, [r4, #0]
 800b408:	1b9b      	subs	r3, r3, r6
 800b40a:	4432      	add	r2, r6
 800b40c:	60a3      	str	r3, [r4, #8]
 800b40e:	6022      	str	r2, [r4, #0]
 800b410:	2000      	movs	r0, #0
 800b412:	e7db      	b.n	800b3cc <__ssputs_r+0x58>
 800b414:	462a      	mov	r2, r5
 800b416:	f000 fbd1 	bl	800bbbc <_realloc_r>
 800b41a:	4606      	mov	r6, r0
 800b41c:	2800      	cmp	r0, #0
 800b41e:	d1e1      	bne.n	800b3e4 <__ssputs_r+0x70>
 800b420:	6921      	ldr	r1, [r4, #16]
 800b422:	4650      	mov	r0, sl
 800b424:	f7ff fefc 	bl	800b220 <_free_r>
 800b428:	e7c7      	b.n	800b3ba <__ssputs_r+0x46>
	...

0800b42c <_svfiprintf_r>:
 800b42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b430:	4698      	mov	r8, r3
 800b432:	898b      	ldrh	r3, [r1, #12]
 800b434:	061b      	lsls	r3, r3, #24
 800b436:	b09d      	sub	sp, #116	; 0x74
 800b438:	4607      	mov	r7, r0
 800b43a:	460d      	mov	r5, r1
 800b43c:	4614      	mov	r4, r2
 800b43e:	d50e      	bpl.n	800b45e <_svfiprintf_r+0x32>
 800b440:	690b      	ldr	r3, [r1, #16]
 800b442:	b963      	cbnz	r3, 800b45e <_svfiprintf_r+0x32>
 800b444:	2140      	movs	r1, #64	; 0x40
 800b446:	f7ff ff3b 	bl	800b2c0 <_malloc_r>
 800b44a:	6028      	str	r0, [r5, #0]
 800b44c:	6128      	str	r0, [r5, #16]
 800b44e:	b920      	cbnz	r0, 800b45a <_svfiprintf_r+0x2e>
 800b450:	230c      	movs	r3, #12
 800b452:	603b      	str	r3, [r7, #0]
 800b454:	f04f 30ff 	mov.w	r0, #4294967295
 800b458:	e0d1      	b.n	800b5fe <_svfiprintf_r+0x1d2>
 800b45a:	2340      	movs	r3, #64	; 0x40
 800b45c:	616b      	str	r3, [r5, #20]
 800b45e:	2300      	movs	r3, #0
 800b460:	9309      	str	r3, [sp, #36]	; 0x24
 800b462:	2320      	movs	r3, #32
 800b464:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b468:	f8cd 800c 	str.w	r8, [sp, #12]
 800b46c:	2330      	movs	r3, #48	; 0x30
 800b46e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b618 <_svfiprintf_r+0x1ec>
 800b472:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b476:	f04f 0901 	mov.w	r9, #1
 800b47a:	4623      	mov	r3, r4
 800b47c:	469a      	mov	sl, r3
 800b47e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b482:	b10a      	cbz	r2, 800b488 <_svfiprintf_r+0x5c>
 800b484:	2a25      	cmp	r2, #37	; 0x25
 800b486:	d1f9      	bne.n	800b47c <_svfiprintf_r+0x50>
 800b488:	ebba 0b04 	subs.w	fp, sl, r4
 800b48c:	d00b      	beq.n	800b4a6 <_svfiprintf_r+0x7a>
 800b48e:	465b      	mov	r3, fp
 800b490:	4622      	mov	r2, r4
 800b492:	4629      	mov	r1, r5
 800b494:	4638      	mov	r0, r7
 800b496:	f7ff ff6d 	bl	800b374 <__ssputs_r>
 800b49a:	3001      	adds	r0, #1
 800b49c:	f000 80aa 	beq.w	800b5f4 <_svfiprintf_r+0x1c8>
 800b4a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b4a2:	445a      	add	r2, fp
 800b4a4:	9209      	str	r2, [sp, #36]	; 0x24
 800b4a6:	f89a 3000 	ldrb.w	r3, [sl]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	f000 80a2 	beq.w	800b5f4 <_svfiprintf_r+0x1c8>
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b4b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4ba:	f10a 0a01 	add.w	sl, sl, #1
 800b4be:	9304      	str	r3, [sp, #16]
 800b4c0:	9307      	str	r3, [sp, #28]
 800b4c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b4c6:	931a      	str	r3, [sp, #104]	; 0x68
 800b4c8:	4654      	mov	r4, sl
 800b4ca:	2205      	movs	r2, #5
 800b4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4d0:	4851      	ldr	r0, [pc, #324]	; (800b618 <_svfiprintf_r+0x1ec>)
 800b4d2:	f7f4 febd 	bl	8000250 <memchr>
 800b4d6:	9a04      	ldr	r2, [sp, #16]
 800b4d8:	b9d8      	cbnz	r0, 800b512 <_svfiprintf_r+0xe6>
 800b4da:	06d0      	lsls	r0, r2, #27
 800b4dc:	bf44      	itt	mi
 800b4de:	2320      	movmi	r3, #32
 800b4e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4e4:	0711      	lsls	r1, r2, #28
 800b4e6:	bf44      	itt	mi
 800b4e8:	232b      	movmi	r3, #43	; 0x2b
 800b4ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b4ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b4f2:	2b2a      	cmp	r3, #42	; 0x2a
 800b4f4:	d015      	beq.n	800b522 <_svfiprintf_r+0xf6>
 800b4f6:	9a07      	ldr	r2, [sp, #28]
 800b4f8:	4654      	mov	r4, sl
 800b4fa:	2000      	movs	r0, #0
 800b4fc:	f04f 0c0a 	mov.w	ip, #10
 800b500:	4621      	mov	r1, r4
 800b502:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b506:	3b30      	subs	r3, #48	; 0x30
 800b508:	2b09      	cmp	r3, #9
 800b50a:	d94e      	bls.n	800b5aa <_svfiprintf_r+0x17e>
 800b50c:	b1b0      	cbz	r0, 800b53c <_svfiprintf_r+0x110>
 800b50e:	9207      	str	r2, [sp, #28]
 800b510:	e014      	b.n	800b53c <_svfiprintf_r+0x110>
 800b512:	eba0 0308 	sub.w	r3, r0, r8
 800b516:	fa09 f303 	lsl.w	r3, r9, r3
 800b51a:	4313      	orrs	r3, r2
 800b51c:	9304      	str	r3, [sp, #16]
 800b51e:	46a2      	mov	sl, r4
 800b520:	e7d2      	b.n	800b4c8 <_svfiprintf_r+0x9c>
 800b522:	9b03      	ldr	r3, [sp, #12]
 800b524:	1d19      	adds	r1, r3, #4
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	9103      	str	r1, [sp, #12]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	bfbb      	ittet	lt
 800b52e:	425b      	neglt	r3, r3
 800b530:	f042 0202 	orrlt.w	r2, r2, #2
 800b534:	9307      	strge	r3, [sp, #28]
 800b536:	9307      	strlt	r3, [sp, #28]
 800b538:	bfb8      	it	lt
 800b53a:	9204      	strlt	r2, [sp, #16]
 800b53c:	7823      	ldrb	r3, [r4, #0]
 800b53e:	2b2e      	cmp	r3, #46	; 0x2e
 800b540:	d10c      	bne.n	800b55c <_svfiprintf_r+0x130>
 800b542:	7863      	ldrb	r3, [r4, #1]
 800b544:	2b2a      	cmp	r3, #42	; 0x2a
 800b546:	d135      	bne.n	800b5b4 <_svfiprintf_r+0x188>
 800b548:	9b03      	ldr	r3, [sp, #12]
 800b54a:	1d1a      	adds	r2, r3, #4
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	9203      	str	r2, [sp, #12]
 800b550:	2b00      	cmp	r3, #0
 800b552:	bfb8      	it	lt
 800b554:	f04f 33ff 	movlt.w	r3, #4294967295
 800b558:	3402      	adds	r4, #2
 800b55a:	9305      	str	r3, [sp, #20]
 800b55c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b628 <_svfiprintf_r+0x1fc>
 800b560:	7821      	ldrb	r1, [r4, #0]
 800b562:	2203      	movs	r2, #3
 800b564:	4650      	mov	r0, sl
 800b566:	f7f4 fe73 	bl	8000250 <memchr>
 800b56a:	b140      	cbz	r0, 800b57e <_svfiprintf_r+0x152>
 800b56c:	2340      	movs	r3, #64	; 0x40
 800b56e:	eba0 000a 	sub.w	r0, r0, sl
 800b572:	fa03 f000 	lsl.w	r0, r3, r0
 800b576:	9b04      	ldr	r3, [sp, #16]
 800b578:	4303      	orrs	r3, r0
 800b57a:	3401      	adds	r4, #1
 800b57c:	9304      	str	r3, [sp, #16]
 800b57e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b582:	4826      	ldr	r0, [pc, #152]	; (800b61c <_svfiprintf_r+0x1f0>)
 800b584:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b588:	2206      	movs	r2, #6
 800b58a:	f7f4 fe61 	bl	8000250 <memchr>
 800b58e:	2800      	cmp	r0, #0
 800b590:	d038      	beq.n	800b604 <_svfiprintf_r+0x1d8>
 800b592:	4b23      	ldr	r3, [pc, #140]	; (800b620 <_svfiprintf_r+0x1f4>)
 800b594:	bb1b      	cbnz	r3, 800b5de <_svfiprintf_r+0x1b2>
 800b596:	9b03      	ldr	r3, [sp, #12]
 800b598:	3307      	adds	r3, #7
 800b59a:	f023 0307 	bic.w	r3, r3, #7
 800b59e:	3308      	adds	r3, #8
 800b5a0:	9303      	str	r3, [sp, #12]
 800b5a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5a4:	4433      	add	r3, r6
 800b5a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b5a8:	e767      	b.n	800b47a <_svfiprintf_r+0x4e>
 800b5aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5ae:	460c      	mov	r4, r1
 800b5b0:	2001      	movs	r0, #1
 800b5b2:	e7a5      	b.n	800b500 <_svfiprintf_r+0xd4>
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	3401      	adds	r4, #1
 800b5b8:	9305      	str	r3, [sp, #20]
 800b5ba:	4619      	mov	r1, r3
 800b5bc:	f04f 0c0a 	mov.w	ip, #10
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5c6:	3a30      	subs	r2, #48	; 0x30
 800b5c8:	2a09      	cmp	r2, #9
 800b5ca:	d903      	bls.n	800b5d4 <_svfiprintf_r+0x1a8>
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d0c5      	beq.n	800b55c <_svfiprintf_r+0x130>
 800b5d0:	9105      	str	r1, [sp, #20]
 800b5d2:	e7c3      	b.n	800b55c <_svfiprintf_r+0x130>
 800b5d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5d8:	4604      	mov	r4, r0
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e7f0      	b.n	800b5c0 <_svfiprintf_r+0x194>
 800b5de:	ab03      	add	r3, sp, #12
 800b5e0:	9300      	str	r3, [sp, #0]
 800b5e2:	462a      	mov	r2, r5
 800b5e4:	4b0f      	ldr	r3, [pc, #60]	; (800b624 <_svfiprintf_r+0x1f8>)
 800b5e6:	a904      	add	r1, sp, #16
 800b5e8:	4638      	mov	r0, r7
 800b5ea:	f7fb ffc5 	bl	8007578 <_printf_float>
 800b5ee:	1c42      	adds	r2, r0, #1
 800b5f0:	4606      	mov	r6, r0
 800b5f2:	d1d6      	bne.n	800b5a2 <_svfiprintf_r+0x176>
 800b5f4:	89ab      	ldrh	r3, [r5, #12]
 800b5f6:	065b      	lsls	r3, r3, #25
 800b5f8:	f53f af2c 	bmi.w	800b454 <_svfiprintf_r+0x28>
 800b5fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b5fe:	b01d      	add	sp, #116	; 0x74
 800b600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b604:	ab03      	add	r3, sp, #12
 800b606:	9300      	str	r3, [sp, #0]
 800b608:	462a      	mov	r2, r5
 800b60a:	4b06      	ldr	r3, [pc, #24]	; (800b624 <_svfiprintf_r+0x1f8>)
 800b60c:	a904      	add	r1, sp, #16
 800b60e:	4638      	mov	r0, r7
 800b610:	f7fc fa3e 	bl	8007a90 <_printf_i>
 800b614:	e7eb      	b.n	800b5ee <_svfiprintf_r+0x1c2>
 800b616:	bf00      	nop
 800b618:	0800c43c 	.word	0x0800c43c
 800b61c:	0800c446 	.word	0x0800c446
 800b620:	08007579 	.word	0x08007579
 800b624:	0800b375 	.word	0x0800b375
 800b628:	0800c442 	.word	0x0800c442

0800b62c <__sfputc_r>:
 800b62c:	6893      	ldr	r3, [r2, #8]
 800b62e:	3b01      	subs	r3, #1
 800b630:	2b00      	cmp	r3, #0
 800b632:	b410      	push	{r4}
 800b634:	6093      	str	r3, [r2, #8]
 800b636:	da08      	bge.n	800b64a <__sfputc_r+0x1e>
 800b638:	6994      	ldr	r4, [r2, #24]
 800b63a:	42a3      	cmp	r3, r4
 800b63c:	db01      	blt.n	800b642 <__sfputc_r+0x16>
 800b63e:	290a      	cmp	r1, #10
 800b640:	d103      	bne.n	800b64a <__sfputc_r+0x1e>
 800b642:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b646:	f7fd bc95 	b.w	8008f74 <__swbuf_r>
 800b64a:	6813      	ldr	r3, [r2, #0]
 800b64c:	1c58      	adds	r0, r3, #1
 800b64e:	6010      	str	r0, [r2, #0]
 800b650:	7019      	strb	r1, [r3, #0]
 800b652:	4608      	mov	r0, r1
 800b654:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b658:	4770      	bx	lr

0800b65a <__sfputs_r>:
 800b65a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b65c:	4606      	mov	r6, r0
 800b65e:	460f      	mov	r7, r1
 800b660:	4614      	mov	r4, r2
 800b662:	18d5      	adds	r5, r2, r3
 800b664:	42ac      	cmp	r4, r5
 800b666:	d101      	bne.n	800b66c <__sfputs_r+0x12>
 800b668:	2000      	movs	r0, #0
 800b66a:	e007      	b.n	800b67c <__sfputs_r+0x22>
 800b66c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b670:	463a      	mov	r2, r7
 800b672:	4630      	mov	r0, r6
 800b674:	f7ff ffda 	bl	800b62c <__sfputc_r>
 800b678:	1c43      	adds	r3, r0, #1
 800b67a:	d1f3      	bne.n	800b664 <__sfputs_r+0xa>
 800b67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b680 <_vfiprintf_r>:
 800b680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b684:	460d      	mov	r5, r1
 800b686:	b09d      	sub	sp, #116	; 0x74
 800b688:	4614      	mov	r4, r2
 800b68a:	4698      	mov	r8, r3
 800b68c:	4606      	mov	r6, r0
 800b68e:	b118      	cbz	r0, 800b698 <_vfiprintf_r+0x18>
 800b690:	6983      	ldr	r3, [r0, #24]
 800b692:	b90b      	cbnz	r3, 800b698 <_vfiprintf_r+0x18>
 800b694:	f7fe fc58 	bl	8009f48 <__sinit>
 800b698:	4b89      	ldr	r3, [pc, #548]	; (800b8c0 <_vfiprintf_r+0x240>)
 800b69a:	429d      	cmp	r5, r3
 800b69c:	d11b      	bne.n	800b6d6 <_vfiprintf_r+0x56>
 800b69e:	6875      	ldr	r5, [r6, #4]
 800b6a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6a2:	07d9      	lsls	r1, r3, #31
 800b6a4:	d405      	bmi.n	800b6b2 <_vfiprintf_r+0x32>
 800b6a6:	89ab      	ldrh	r3, [r5, #12]
 800b6a8:	059a      	lsls	r2, r3, #22
 800b6aa:	d402      	bmi.n	800b6b2 <_vfiprintf_r+0x32>
 800b6ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6ae:	f7ff f85c 	bl	800a76a <__retarget_lock_acquire_recursive>
 800b6b2:	89ab      	ldrh	r3, [r5, #12]
 800b6b4:	071b      	lsls	r3, r3, #28
 800b6b6:	d501      	bpl.n	800b6bc <_vfiprintf_r+0x3c>
 800b6b8:	692b      	ldr	r3, [r5, #16]
 800b6ba:	b9eb      	cbnz	r3, 800b6f8 <_vfiprintf_r+0x78>
 800b6bc:	4629      	mov	r1, r5
 800b6be:	4630      	mov	r0, r6
 800b6c0:	f7fd fcaa 	bl	8009018 <__swsetup_r>
 800b6c4:	b1c0      	cbz	r0, 800b6f8 <_vfiprintf_r+0x78>
 800b6c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6c8:	07dc      	lsls	r4, r3, #31
 800b6ca:	d50e      	bpl.n	800b6ea <_vfiprintf_r+0x6a>
 800b6cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b6d0:	b01d      	add	sp, #116	; 0x74
 800b6d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d6:	4b7b      	ldr	r3, [pc, #492]	; (800b8c4 <_vfiprintf_r+0x244>)
 800b6d8:	429d      	cmp	r5, r3
 800b6da:	d101      	bne.n	800b6e0 <_vfiprintf_r+0x60>
 800b6dc:	68b5      	ldr	r5, [r6, #8]
 800b6de:	e7df      	b.n	800b6a0 <_vfiprintf_r+0x20>
 800b6e0:	4b79      	ldr	r3, [pc, #484]	; (800b8c8 <_vfiprintf_r+0x248>)
 800b6e2:	429d      	cmp	r5, r3
 800b6e4:	bf08      	it	eq
 800b6e6:	68f5      	ldreq	r5, [r6, #12]
 800b6e8:	e7da      	b.n	800b6a0 <_vfiprintf_r+0x20>
 800b6ea:	89ab      	ldrh	r3, [r5, #12]
 800b6ec:	0598      	lsls	r0, r3, #22
 800b6ee:	d4ed      	bmi.n	800b6cc <_vfiprintf_r+0x4c>
 800b6f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6f2:	f7ff f83b 	bl	800a76c <__retarget_lock_release_recursive>
 800b6f6:	e7e9      	b.n	800b6cc <_vfiprintf_r+0x4c>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	9309      	str	r3, [sp, #36]	; 0x24
 800b6fc:	2320      	movs	r3, #32
 800b6fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b702:	f8cd 800c 	str.w	r8, [sp, #12]
 800b706:	2330      	movs	r3, #48	; 0x30
 800b708:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b8cc <_vfiprintf_r+0x24c>
 800b70c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b710:	f04f 0901 	mov.w	r9, #1
 800b714:	4623      	mov	r3, r4
 800b716:	469a      	mov	sl, r3
 800b718:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b71c:	b10a      	cbz	r2, 800b722 <_vfiprintf_r+0xa2>
 800b71e:	2a25      	cmp	r2, #37	; 0x25
 800b720:	d1f9      	bne.n	800b716 <_vfiprintf_r+0x96>
 800b722:	ebba 0b04 	subs.w	fp, sl, r4
 800b726:	d00b      	beq.n	800b740 <_vfiprintf_r+0xc0>
 800b728:	465b      	mov	r3, fp
 800b72a:	4622      	mov	r2, r4
 800b72c:	4629      	mov	r1, r5
 800b72e:	4630      	mov	r0, r6
 800b730:	f7ff ff93 	bl	800b65a <__sfputs_r>
 800b734:	3001      	adds	r0, #1
 800b736:	f000 80aa 	beq.w	800b88e <_vfiprintf_r+0x20e>
 800b73a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b73c:	445a      	add	r2, fp
 800b73e:	9209      	str	r2, [sp, #36]	; 0x24
 800b740:	f89a 3000 	ldrb.w	r3, [sl]
 800b744:	2b00      	cmp	r3, #0
 800b746:	f000 80a2 	beq.w	800b88e <_vfiprintf_r+0x20e>
 800b74a:	2300      	movs	r3, #0
 800b74c:	f04f 32ff 	mov.w	r2, #4294967295
 800b750:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b754:	f10a 0a01 	add.w	sl, sl, #1
 800b758:	9304      	str	r3, [sp, #16]
 800b75a:	9307      	str	r3, [sp, #28]
 800b75c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b760:	931a      	str	r3, [sp, #104]	; 0x68
 800b762:	4654      	mov	r4, sl
 800b764:	2205      	movs	r2, #5
 800b766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b76a:	4858      	ldr	r0, [pc, #352]	; (800b8cc <_vfiprintf_r+0x24c>)
 800b76c:	f7f4 fd70 	bl	8000250 <memchr>
 800b770:	9a04      	ldr	r2, [sp, #16]
 800b772:	b9d8      	cbnz	r0, 800b7ac <_vfiprintf_r+0x12c>
 800b774:	06d1      	lsls	r1, r2, #27
 800b776:	bf44      	itt	mi
 800b778:	2320      	movmi	r3, #32
 800b77a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b77e:	0713      	lsls	r3, r2, #28
 800b780:	bf44      	itt	mi
 800b782:	232b      	movmi	r3, #43	; 0x2b
 800b784:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b788:	f89a 3000 	ldrb.w	r3, [sl]
 800b78c:	2b2a      	cmp	r3, #42	; 0x2a
 800b78e:	d015      	beq.n	800b7bc <_vfiprintf_r+0x13c>
 800b790:	9a07      	ldr	r2, [sp, #28]
 800b792:	4654      	mov	r4, sl
 800b794:	2000      	movs	r0, #0
 800b796:	f04f 0c0a 	mov.w	ip, #10
 800b79a:	4621      	mov	r1, r4
 800b79c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b7a0:	3b30      	subs	r3, #48	; 0x30
 800b7a2:	2b09      	cmp	r3, #9
 800b7a4:	d94e      	bls.n	800b844 <_vfiprintf_r+0x1c4>
 800b7a6:	b1b0      	cbz	r0, 800b7d6 <_vfiprintf_r+0x156>
 800b7a8:	9207      	str	r2, [sp, #28]
 800b7aa:	e014      	b.n	800b7d6 <_vfiprintf_r+0x156>
 800b7ac:	eba0 0308 	sub.w	r3, r0, r8
 800b7b0:	fa09 f303 	lsl.w	r3, r9, r3
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	9304      	str	r3, [sp, #16]
 800b7b8:	46a2      	mov	sl, r4
 800b7ba:	e7d2      	b.n	800b762 <_vfiprintf_r+0xe2>
 800b7bc:	9b03      	ldr	r3, [sp, #12]
 800b7be:	1d19      	adds	r1, r3, #4
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	9103      	str	r1, [sp, #12]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	bfbb      	ittet	lt
 800b7c8:	425b      	neglt	r3, r3
 800b7ca:	f042 0202 	orrlt.w	r2, r2, #2
 800b7ce:	9307      	strge	r3, [sp, #28]
 800b7d0:	9307      	strlt	r3, [sp, #28]
 800b7d2:	bfb8      	it	lt
 800b7d4:	9204      	strlt	r2, [sp, #16]
 800b7d6:	7823      	ldrb	r3, [r4, #0]
 800b7d8:	2b2e      	cmp	r3, #46	; 0x2e
 800b7da:	d10c      	bne.n	800b7f6 <_vfiprintf_r+0x176>
 800b7dc:	7863      	ldrb	r3, [r4, #1]
 800b7de:	2b2a      	cmp	r3, #42	; 0x2a
 800b7e0:	d135      	bne.n	800b84e <_vfiprintf_r+0x1ce>
 800b7e2:	9b03      	ldr	r3, [sp, #12]
 800b7e4:	1d1a      	adds	r2, r3, #4
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	9203      	str	r2, [sp, #12]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	bfb8      	it	lt
 800b7ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800b7f2:	3402      	adds	r4, #2
 800b7f4:	9305      	str	r3, [sp, #20]
 800b7f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b8dc <_vfiprintf_r+0x25c>
 800b7fa:	7821      	ldrb	r1, [r4, #0]
 800b7fc:	2203      	movs	r2, #3
 800b7fe:	4650      	mov	r0, sl
 800b800:	f7f4 fd26 	bl	8000250 <memchr>
 800b804:	b140      	cbz	r0, 800b818 <_vfiprintf_r+0x198>
 800b806:	2340      	movs	r3, #64	; 0x40
 800b808:	eba0 000a 	sub.w	r0, r0, sl
 800b80c:	fa03 f000 	lsl.w	r0, r3, r0
 800b810:	9b04      	ldr	r3, [sp, #16]
 800b812:	4303      	orrs	r3, r0
 800b814:	3401      	adds	r4, #1
 800b816:	9304      	str	r3, [sp, #16]
 800b818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b81c:	482c      	ldr	r0, [pc, #176]	; (800b8d0 <_vfiprintf_r+0x250>)
 800b81e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b822:	2206      	movs	r2, #6
 800b824:	f7f4 fd14 	bl	8000250 <memchr>
 800b828:	2800      	cmp	r0, #0
 800b82a:	d03f      	beq.n	800b8ac <_vfiprintf_r+0x22c>
 800b82c:	4b29      	ldr	r3, [pc, #164]	; (800b8d4 <_vfiprintf_r+0x254>)
 800b82e:	bb1b      	cbnz	r3, 800b878 <_vfiprintf_r+0x1f8>
 800b830:	9b03      	ldr	r3, [sp, #12]
 800b832:	3307      	adds	r3, #7
 800b834:	f023 0307 	bic.w	r3, r3, #7
 800b838:	3308      	adds	r3, #8
 800b83a:	9303      	str	r3, [sp, #12]
 800b83c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b83e:	443b      	add	r3, r7
 800b840:	9309      	str	r3, [sp, #36]	; 0x24
 800b842:	e767      	b.n	800b714 <_vfiprintf_r+0x94>
 800b844:	fb0c 3202 	mla	r2, ip, r2, r3
 800b848:	460c      	mov	r4, r1
 800b84a:	2001      	movs	r0, #1
 800b84c:	e7a5      	b.n	800b79a <_vfiprintf_r+0x11a>
 800b84e:	2300      	movs	r3, #0
 800b850:	3401      	adds	r4, #1
 800b852:	9305      	str	r3, [sp, #20]
 800b854:	4619      	mov	r1, r3
 800b856:	f04f 0c0a 	mov.w	ip, #10
 800b85a:	4620      	mov	r0, r4
 800b85c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b860:	3a30      	subs	r2, #48	; 0x30
 800b862:	2a09      	cmp	r2, #9
 800b864:	d903      	bls.n	800b86e <_vfiprintf_r+0x1ee>
 800b866:	2b00      	cmp	r3, #0
 800b868:	d0c5      	beq.n	800b7f6 <_vfiprintf_r+0x176>
 800b86a:	9105      	str	r1, [sp, #20]
 800b86c:	e7c3      	b.n	800b7f6 <_vfiprintf_r+0x176>
 800b86e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b872:	4604      	mov	r4, r0
 800b874:	2301      	movs	r3, #1
 800b876:	e7f0      	b.n	800b85a <_vfiprintf_r+0x1da>
 800b878:	ab03      	add	r3, sp, #12
 800b87a:	9300      	str	r3, [sp, #0]
 800b87c:	462a      	mov	r2, r5
 800b87e:	4b16      	ldr	r3, [pc, #88]	; (800b8d8 <_vfiprintf_r+0x258>)
 800b880:	a904      	add	r1, sp, #16
 800b882:	4630      	mov	r0, r6
 800b884:	f7fb fe78 	bl	8007578 <_printf_float>
 800b888:	4607      	mov	r7, r0
 800b88a:	1c78      	adds	r0, r7, #1
 800b88c:	d1d6      	bne.n	800b83c <_vfiprintf_r+0x1bc>
 800b88e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b890:	07d9      	lsls	r1, r3, #31
 800b892:	d405      	bmi.n	800b8a0 <_vfiprintf_r+0x220>
 800b894:	89ab      	ldrh	r3, [r5, #12]
 800b896:	059a      	lsls	r2, r3, #22
 800b898:	d402      	bmi.n	800b8a0 <_vfiprintf_r+0x220>
 800b89a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b89c:	f7fe ff66 	bl	800a76c <__retarget_lock_release_recursive>
 800b8a0:	89ab      	ldrh	r3, [r5, #12]
 800b8a2:	065b      	lsls	r3, r3, #25
 800b8a4:	f53f af12 	bmi.w	800b6cc <_vfiprintf_r+0x4c>
 800b8a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b8aa:	e711      	b.n	800b6d0 <_vfiprintf_r+0x50>
 800b8ac:	ab03      	add	r3, sp, #12
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	462a      	mov	r2, r5
 800b8b2:	4b09      	ldr	r3, [pc, #36]	; (800b8d8 <_vfiprintf_r+0x258>)
 800b8b4:	a904      	add	r1, sp, #16
 800b8b6:	4630      	mov	r0, r6
 800b8b8:	f7fc f8ea 	bl	8007a90 <_printf_i>
 800b8bc:	e7e4      	b.n	800b888 <_vfiprintf_r+0x208>
 800b8be:	bf00      	nop
 800b8c0:	0800c220 	.word	0x0800c220
 800b8c4:	0800c240 	.word	0x0800c240
 800b8c8:	0800c200 	.word	0x0800c200
 800b8cc:	0800c43c 	.word	0x0800c43c
 800b8d0:	0800c446 	.word	0x0800c446
 800b8d4:	08007579 	.word	0x08007579
 800b8d8:	0800b65b 	.word	0x0800b65b
 800b8dc:	0800c442 	.word	0x0800c442

0800b8e0 <_putc_r>:
 800b8e0:	b570      	push	{r4, r5, r6, lr}
 800b8e2:	460d      	mov	r5, r1
 800b8e4:	4614      	mov	r4, r2
 800b8e6:	4606      	mov	r6, r0
 800b8e8:	b118      	cbz	r0, 800b8f2 <_putc_r+0x12>
 800b8ea:	6983      	ldr	r3, [r0, #24]
 800b8ec:	b90b      	cbnz	r3, 800b8f2 <_putc_r+0x12>
 800b8ee:	f7fe fb2b 	bl	8009f48 <__sinit>
 800b8f2:	4b1c      	ldr	r3, [pc, #112]	; (800b964 <_putc_r+0x84>)
 800b8f4:	429c      	cmp	r4, r3
 800b8f6:	d124      	bne.n	800b942 <_putc_r+0x62>
 800b8f8:	6874      	ldr	r4, [r6, #4]
 800b8fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b8fc:	07d8      	lsls	r0, r3, #31
 800b8fe:	d405      	bmi.n	800b90c <_putc_r+0x2c>
 800b900:	89a3      	ldrh	r3, [r4, #12]
 800b902:	0599      	lsls	r1, r3, #22
 800b904:	d402      	bmi.n	800b90c <_putc_r+0x2c>
 800b906:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b908:	f7fe ff2f 	bl	800a76a <__retarget_lock_acquire_recursive>
 800b90c:	68a3      	ldr	r3, [r4, #8]
 800b90e:	3b01      	subs	r3, #1
 800b910:	2b00      	cmp	r3, #0
 800b912:	60a3      	str	r3, [r4, #8]
 800b914:	da05      	bge.n	800b922 <_putc_r+0x42>
 800b916:	69a2      	ldr	r2, [r4, #24]
 800b918:	4293      	cmp	r3, r2
 800b91a:	db1c      	blt.n	800b956 <_putc_r+0x76>
 800b91c:	b2eb      	uxtb	r3, r5
 800b91e:	2b0a      	cmp	r3, #10
 800b920:	d019      	beq.n	800b956 <_putc_r+0x76>
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	1c5a      	adds	r2, r3, #1
 800b926:	6022      	str	r2, [r4, #0]
 800b928:	701d      	strb	r5, [r3, #0]
 800b92a:	b2ed      	uxtb	r5, r5
 800b92c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b92e:	07da      	lsls	r2, r3, #31
 800b930:	d405      	bmi.n	800b93e <_putc_r+0x5e>
 800b932:	89a3      	ldrh	r3, [r4, #12]
 800b934:	059b      	lsls	r3, r3, #22
 800b936:	d402      	bmi.n	800b93e <_putc_r+0x5e>
 800b938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b93a:	f7fe ff17 	bl	800a76c <__retarget_lock_release_recursive>
 800b93e:	4628      	mov	r0, r5
 800b940:	bd70      	pop	{r4, r5, r6, pc}
 800b942:	4b09      	ldr	r3, [pc, #36]	; (800b968 <_putc_r+0x88>)
 800b944:	429c      	cmp	r4, r3
 800b946:	d101      	bne.n	800b94c <_putc_r+0x6c>
 800b948:	68b4      	ldr	r4, [r6, #8]
 800b94a:	e7d6      	b.n	800b8fa <_putc_r+0x1a>
 800b94c:	4b07      	ldr	r3, [pc, #28]	; (800b96c <_putc_r+0x8c>)
 800b94e:	429c      	cmp	r4, r3
 800b950:	bf08      	it	eq
 800b952:	68f4      	ldreq	r4, [r6, #12]
 800b954:	e7d1      	b.n	800b8fa <_putc_r+0x1a>
 800b956:	4629      	mov	r1, r5
 800b958:	4622      	mov	r2, r4
 800b95a:	4630      	mov	r0, r6
 800b95c:	f7fd fb0a 	bl	8008f74 <__swbuf_r>
 800b960:	4605      	mov	r5, r0
 800b962:	e7e3      	b.n	800b92c <_putc_r+0x4c>
 800b964:	0800c220 	.word	0x0800c220
 800b968:	0800c240 	.word	0x0800c240
 800b96c:	0800c200 	.word	0x0800c200

0800b970 <nan>:
 800b970:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b978 <nan+0x8>
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	00000000 	.word	0x00000000
 800b97c:	7ff80000 	.word	0x7ff80000

0800b980 <_sbrk_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4d06      	ldr	r5, [pc, #24]	; (800b99c <_sbrk_r+0x1c>)
 800b984:	2300      	movs	r3, #0
 800b986:	4604      	mov	r4, r0
 800b988:	4608      	mov	r0, r1
 800b98a:	602b      	str	r3, [r5, #0]
 800b98c:	f7f6 fcb6 	bl	80022fc <_sbrk>
 800b990:	1c43      	adds	r3, r0, #1
 800b992:	d102      	bne.n	800b99a <_sbrk_r+0x1a>
 800b994:	682b      	ldr	r3, [r5, #0]
 800b996:	b103      	cbz	r3, 800b99a <_sbrk_r+0x1a>
 800b998:	6023      	str	r3, [r4, #0]
 800b99a:	bd38      	pop	{r3, r4, r5, pc}
 800b99c:	200006a8 	.word	0x200006a8

0800b9a0 <__sread>:
 800b9a0:	b510      	push	{r4, lr}
 800b9a2:	460c      	mov	r4, r1
 800b9a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9a8:	f000 f92e 	bl	800bc08 <_read_r>
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	bfab      	itete	ge
 800b9b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9b2:	89a3      	ldrhlt	r3, [r4, #12]
 800b9b4:	181b      	addge	r3, r3, r0
 800b9b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9ba:	bfac      	ite	ge
 800b9bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9be:	81a3      	strhlt	r3, [r4, #12]
 800b9c0:	bd10      	pop	{r4, pc}

0800b9c2 <__swrite>:
 800b9c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c6:	461f      	mov	r7, r3
 800b9c8:	898b      	ldrh	r3, [r1, #12]
 800b9ca:	05db      	lsls	r3, r3, #23
 800b9cc:	4605      	mov	r5, r0
 800b9ce:	460c      	mov	r4, r1
 800b9d0:	4616      	mov	r6, r2
 800b9d2:	d505      	bpl.n	800b9e0 <__swrite+0x1e>
 800b9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d8:	2302      	movs	r3, #2
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f000 f8b6 	bl	800bb4c <_lseek_r>
 800b9e0:	89a3      	ldrh	r3, [r4, #12]
 800b9e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9ea:	81a3      	strh	r3, [r4, #12]
 800b9ec:	4632      	mov	r2, r6
 800b9ee:	463b      	mov	r3, r7
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f6:	f000 b835 	b.w	800ba64 <_write_r>

0800b9fa <__sseek>:
 800b9fa:	b510      	push	{r4, lr}
 800b9fc:	460c      	mov	r4, r1
 800b9fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba02:	f000 f8a3 	bl	800bb4c <_lseek_r>
 800ba06:	1c43      	adds	r3, r0, #1
 800ba08:	89a3      	ldrh	r3, [r4, #12]
 800ba0a:	bf15      	itete	ne
 800ba0c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba16:	81a3      	strheq	r3, [r4, #12]
 800ba18:	bf18      	it	ne
 800ba1a:	81a3      	strhne	r3, [r4, #12]
 800ba1c:	bd10      	pop	{r4, pc}

0800ba1e <__sclose>:
 800ba1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba22:	f000 b84f 	b.w	800bac4 <_close_r>

0800ba26 <strncmp>:
 800ba26:	b510      	push	{r4, lr}
 800ba28:	b16a      	cbz	r2, 800ba46 <strncmp+0x20>
 800ba2a:	3901      	subs	r1, #1
 800ba2c:	1884      	adds	r4, r0, r2
 800ba2e:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ba32:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d103      	bne.n	800ba42 <strncmp+0x1c>
 800ba3a:	42a0      	cmp	r0, r4
 800ba3c:	d001      	beq.n	800ba42 <strncmp+0x1c>
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1f5      	bne.n	800ba2e <strncmp+0x8>
 800ba42:	1a98      	subs	r0, r3, r2
 800ba44:	bd10      	pop	{r4, pc}
 800ba46:	4610      	mov	r0, r2
 800ba48:	e7fc      	b.n	800ba44 <strncmp+0x1e>

0800ba4a <__ascii_wctomb>:
 800ba4a:	b149      	cbz	r1, 800ba60 <__ascii_wctomb+0x16>
 800ba4c:	2aff      	cmp	r2, #255	; 0xff
 800ba4e:	bf85      	ittet	hi
 800ba50:	238a      	movhi	r3, #138	; 0x8a
 800ba52:	6003      	strhi	r3, [r0, #0]
 800ba54:	700a      	strbls	r2, [r1, #0]
 800ba56:	f04f 30ff 	movhi.w	r0, #4294967295
 800ba5a:	bf98      	it	ls
 800ba5c:	2001      	movls	r0, #1
 800ba5e:	4770      	bx	lr
 800ba60:	4608      	mov	r0, r1
 800ba62:	4770      	bx	lr

0800ba64 <_write_r>:
 800ba64:	b538      	push	{r3, r4, r5, lr}
 800ba66:	4d07      	ldr	r5, [pc, #28]	; (800ba84 <_write_r+0x20>)
 800ba68:	4604      	mov	r4, r0
 800ba6a:	4608      	mov	r0, r1
 800ba6c:	4611      	mov	r1, r2
 800ba6e:	2200      	movs	r2, #0
 800ba70:	602a      	str	r2, [r5, #0]
 800ba72:	461a      	mov	r2, r3
 800ba74:	f7f6 fbf1 	bl	800225a <_write>
 800ba78:	1c43      	adds	r3, r0, #1
 800ba7a:	d102      	bne.n	800ba82 <_write_r+0x1e>
 800ba7c:	682b      	ldr	r3, [r5, #0]
 800ba7e:	b103      	cbz	r3, 800ba82 <_write_r+0x1e>
 800ba80:	6023      	str	r3, [r4, #0]
 800ba82:	bd38      	pop	{r3, r4, r5, pc}
 800ba84:	200006a8 	.word	0x200006a8

0800ba88 <__assert_func>:
 800ba88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba8a:	4614      	mov	r4, r2
 800ba8c:	461a      	mov	r2, r3
 800ba8e:	4b09      	ldr	r3, [pc, #36]	; (800bab4 <__assert_func+0x2c>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	4605      	mov	r5, r0
 800ba94:	68d8      	ldr	r0, [r3, #12]
 800ba96:	b14c      	cbz	r4, 800baac <__assert_func+0x24>
 800ba98:	4b07      	ldr	r3, [pc, #28]	; (800bab8 <__assert_func+0x30>)
 800ba9a:	9100      	str	r1, [sp, #0]
 800ba9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800baa0:	4906      	ldr	r1, [pc, #24]	; (800babc <__assert_func+0x34>)
 800baa2:	462b      	mov	r3, r5
 800baa4:	f000 f81e 	bl	800bae4 <fiprintf>
 800baa8:	f000 f8c0 	bl	800bc2c <abort>
 800baac:	4b04      	ldr	r3, [pc, #16]	; (800bac0 <__assert_func+0x38>)
 800baae:	461c      	mov	r4, r3
 800bab0:	e7f3      	b.n	800ba9a <__assert_func+0x12>
 800bab2:	bf00      	nop
 800bab4:	20000010 	.word	0x20000010
 800bab8:	0800c44d 	.word	0x0800c44d
 800babc:	0800c45a 	.word	0x0800c45a
 800bac0:	0800c488 	.word	0x0800c488

0800bac4 <_close_r>:
 800bac4:	b538      	push	{r3, r4, r5, lr}
 800bac6:	4d06      	ldr	r5, [pc, #24]	; (800bae0 <_close_r+0x1c>)
 800bac8:	2300      	movs	r3, #0
 800baca:	4604      	mov	r4, r0
 800bacc:	4608      	mov	r0, r1
 800bace:	602b      	str	r3, [r5, #0]
 800bad0:	f7f6 fbdf 	bl	8002292 <_close>
 800bad4:	1c43      	adds	r3, r0, #1
 800bad6:	d102      	bne.n	800bade <_close_r+0x1a>
 800bad8:	682b      	ldr	r3, [r5, #0]
 800bada:	b103      	cbz	r3, 800bade <_close_r+0x1a>
 800badc:	6023      	str	r3, [r4, #0]
 800bade:	bd38      	pop	{r3, r4, r5, pc}
 800bae0:	200006a8 	.word	0x200006a8

0800bae4 <fiprintf>:
 800bae4:	b40e      	push	{r1, r2, r3}
 800bae6:	b503      	push	{r0, r1, lr}
 800bae8:	4601      	mov	r1, r0
 800baea:	ab03      	add	r3, sp, #12
 800baec:	4805      	ldr	r0, [pc, #20]	; (800bb04 <fiprintf+0x20>)
 800baee:	f853 2b04 	ldr.w	r2, [r3], #4
 800baf2:	6800      	ldr	r0, [r0, #0]
 800baf4:	9301      	str	r3, [sp, #4]
 800baf6:	f7ff fdc3 	bl	800b680 <_vfiprintf_r>
 800bafa:	b002      	add	sp, #8
 800bafc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb00:	b003      	add	sp, #12
 800bb02:	4770      	bx	lr
 800bb04:	20000010 	.word	0x20000010

0800bb08 <_fstat_r>:
 800bb08:	b538      	push	{r3, r4, r5, lr}
 800bb0a:	4d07      	ldr	r5, [pc, #28]	; (800bb28 <_fstat_r+0x20>)
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	4604      	mov	r4, r0
 800bb10:	4608      	mov	r0, r1
 800bb12:	4611      	mov	r1, r2
 800bb14:	602b      	str	r3, [r5, #0]
 800bb16:	f7f6 fbc8 	bl	80022aa <_fstat>
 800bb1a:	1c43      	adds	r3, r0, #1
 800bb1c:	d102      	bne.n	800bb24 <_fstat_r+0x1c>
 800bb1e:	682b      	ldr	r3, [r5, #0]
 800bb20:	b103      	cbz	r3, 800bb24 <_fstat_r+0x1c>
 800bb22:	6023      	str	r3, [r4, #0]
 800bb24:	bd38      	pop	{r3, r4, r5, pc}
 800bb26:	bf00      	nop
 800bb28:	200006a8 	.word	0x200006a8

0800bb2c <_isatty_r>:
 800bb2c:	b538      	push	{r3, r4, r5, lr}
 800bb2e:	4d06      	ldr	r5, [pc, #24]	; (800bb48 <_isatty_r+0x1c>)
 800bb30:	2300      	movs	r3, #0
 800bb32:	4604      	mov	r4, r0
 800bb34:	4608      	mov	r0, r1
 800bb36:	602b      	str	r3, [r5, #0]
 800bb38:	f7f6 fbc7 	bl	80022ca <_isatty>
 800bb3c:	1c43      	adds	r3, r0, #1
 800bb3e:	d102      	bne.n	800bb46 <_isatty_r+0x1a>
 800bb40:	682b      	ldr	r3, [r5, #0]
 800bb42:	b103      	cbz	r3, 800bb46 <_isatty_r+0x1a>
 800bb44:	6023      	str	r3, [r4, #0]
 800bb46:	bd38      	pop	{r3, r4, r5, pc}
 800bb48:	200006a8 	.word	0x200006a8

0800bb4c <_lseek_r>:
 800bb4c:	b538      	push	{r3, r4, r5, lr}
 800bb4e:	4d07      	ldr	r5, [pc, #28]	; (800bb6c <_lseek_r+0x20>)
 800bb50:	4604      	mov	r4, r0
 800bb52:	4608      	mov	r0, r1
 800bb54:	4611      	mov	r1, r2
 800bb56:	2200      	movs	r2, #0
 800bb58:	602a      	str	r2, [r5, #0]
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	f7f6 fbc0 	bl	80022e0 <_lseek>
 800bb60:	1c43      	adds	r3, r0, #1
 800bb62:	d102      	bne.n	800bb6a <_lseek_r+0x1e>
 800bb64:	682b      	ldr	r3, [r5, #0]
 800bb66:	b103      	cbz	r3, 800bb6a <_lseek_r+0x1e>
 800bb68:	6023      	str	r3, [r4, #0]
 800bb6a:	bd38      	pop	{r3, r4, r5, pc}
 800bb6c:	200006a8 	.word	0x200006a8

0800bb70 <memmove>:
 800bb70:	4288      	cmp	r0, r1
 800bb72:	b510      	push	{r4, lr}
 800bb74:	eb01 0402 	add.w	r4, r1, r2
 800bb78:	d902      	bls.n	800bb80 <memmove+0x10>
 800bb7a:	4284      	cmp	r4, r0
 800bb7c:	4623      	mov	r3, r4
 800bb7e:	d807      	bhi.n	800bb90 <memmove+0x20>
 800bb80:	1e43      	subs	r3, r0, #1
 800bb82:	42a1      	cmp	r1, r4
 800bb84:	d008      	beq.n	800bb98 <memmove+0x28>
 800bb86:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bb8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bb8e:	e7f8      	b.n	800bb82 <memmove+0x12>
 800bb90:	4402      	add	r2, r0
 800bb92:	4601      	mov	r1, r0
 800bb94:	428a      	cmp	r2, r1
 800bb96:	d100      	bne.n	800bb9a <memmove+0x2a>
 800bb98:	bd10      	pop	{r4, pc}
 800bb9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bb9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bba2:	e7f7      	b.n	800bb94 <memmove+0x24>

0800bba4 <__malloc_lock>:
 800bba4:	4801      	ldr	r0, [pc, #4]	; (800bbac <__malloc_lock+0x8>)
 800bba6:	f7fe bde0 	b.w	800a76a <__retarget_lock_acquire_recursive>
 800bbaa:	bf00      	nop
 800bbac:	200006a0 	.word	0x200006a0

0800bbb0 <__malloc_unlock>:
 800bbb0:	4801      	ldr	r0, [pc, #4]	; (800bbb8 <__malloc_unlock+0x8>)
 800bbb2:	f7fe bddb 	b.w	800a76c <__retarget_lock_release_recursive>
 800bbb6:	bf00      	nop
 800bbb8:	200006a0 	.word	0x200006a0

0800bbbc <_realloc_r>:
 800bbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbbe:	4607      	mov	r7, r0
 800bbc0:	4614      	mov	r4, r2
 800bbc2:	460e      	mov	r6, r1
 800bbc4:	b921      	cbnz	r1, 800bbd0 <_realloc_r+0x14>
 800bbc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bbca:	4611      	mov	r1, r2
 800bbcc:	f7ff bb78 	b.w	800b2c0 <_malloc_r>
 800bbd0:	b922      	cbnz	r2, 800bbdc <_realloc_r+0x20>
 800bbd2:	f7ff fb25 	bl	800b220 <_free_r>
 800bbd6:	4625      	mov	r5, r4
 800bbd8:	4628      	mov	r0, r5
 800bbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbdc:	f000 f82d 	bl	800bc3a <_malloc_usable_size_r>
 800bbe0:	42a0      	cmp	r0, r4
 800bbe2:	d20f      	bcs.n	800bc04 <_realloc_r+0x48>
 800bbe4:	4621      	mov	r1, r4
 800bbe6:	4638      	mov	r0, r7
 800bbe8:	f7ff fb6a 	bl	800b2c0 <_malloc_r>
 800bbec:	4605      	mov	r5, r0
 800bbee:	2800      	cmp	r0, #0
 800bbf0:	d0f2      	beq.n	800bbd8 <_realloc_r+0x1c>
 800bbf2:	4631      	mov	r1, r6
 800bbf4:	4622      	mov	r2, r4
 800bbf6:	f7fe fe39 	bl	800a86c <memcpy>
 800bbfa:	4631      	mov	r1, r6
 800bbfc:	4638      	mov	r0, r7
 800bbfe:	f7ff fb0f 	bl	800b220 <_free_r>
 800bc02:	e7e9      	b.n	800bbd8 <_realloc_r+0x1c>
 800bc04:	4635      	mov	r5, r6
 800bc06:	e7e7      	b.n	800bbd8 <_realloc_r+0x1c>

0800bc08 <_read_r>:
 800bc08:	b538      	push	{r3, r4, r5, lr}
 800bc0a:	4d07      	ldr	r5, [pc, #28]	; (800bc28 <_read_r+0x20>)
 800bc0c:	4604      	mov	r4, r0
 800bc0e:	4608      	mov	r0, r1
 800bc10:	4611      	mov	r1, r2
 800bc12:	2200      	movs	r2, #0
 800bc14:	602a      	str	r2, [r5, #0]
 800bc16:	461a      	mov	r2, r3
 800bc18:	f7f6 fb02 	bl	8002220 <_read>
 800bc1c:	1c43      	adds	r3, r0, #1
 800bc1e:	d102      	bne.n	800bc26 <_read_r+0x1e>
 800bc20:	682b      	ldr	r3, [r5, #0]
 800bc22:	b103      	cbz	r3, 800bc26 <_read_r+0x1e>
 800bc24:	6023      	str	r3, [r4, #0]
 800bc26:	bd38      	pop	{r3, r4, r5, pc}
 800bc28:	200006a8 	.word	0x200006a8

0800bc2c <abort>:
 800bc2c:	b508      	push	{r3, lr}
 800bc2e:	2006      	movs	r0, #6
 800bc30:	f000 f834 	bl	800bc9c <raise>
 800bc34:	2001      	movs	r0, #1
 800bc36:	f7f6 fae9 	bl	800220c <_exit>

0800bc3a <_malloc_usable_size_r>:
 800bc3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc3e:	1f18      	subs	r0, r3, #4
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	bfbc      	itt	lt
 800bc44:	580b      	ldrlt	r3, [r1, r0]
 800bc46:	18c0      	addlt	r0, r0, r3
 800bc48:	4770      	bx	lr

0800bc4a <_raise_r>:
 800bc4a:	291f      	cmp	r1, #31
 800bc4c:	b538      	push	{r3, r4, r5, lr}
 800bc4e:	4604      	mov	r4, r0
 800bc50:	460d      	mov	r5, r1
 800bc52:	d904      	bls.n	800bc5e <_raise_r+0x14>
 800bc54:	2316      	movs	r3, #22
 800bc56:	6003      	str	r3, [r0, #0]
 800bc58:	f04f 30ff 	mov.w	r0, #4294967295
 800bc5c:	bd38      	pop	{r3, r4, r5, pc}
 800bc5e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc60:	b112      	cbz	r2, 800bc68 <_raise_r+0x1e>
 800bc62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc66:	b94b      	cbnz	r3, 800bc7c <_raise_r+0x32>
 800bc68:	4620      	mov	r0, r4
 800bc6a:	f000 f831 	bl	800bcd0 <_getpid_r>
 800bc6e:	462a      	mov	r2, r5
 800bc70:	4601      	mov	r1, r0
 800bc72:	4620      	mov	r0, r4
 800bc74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc78:	f000 b818 	b.w	800bcac <_kill_r>
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d00a      	beq.n	800bc96 <_raise_r+0x4c>
 800bc80:	1c59      	adds	r1, r3, #1
 800bc82:	d103      	bne.n	800bc8c <_raise_r+0x42>
 800bc84:	2316      	movs	r3, #22
 800bc86:	6003      	str	r3, [r0, #0]
 800bc88:	2001      	movs	r0, #1
 800bc8a:	e7e7      	b.n	800bc5c <_raise_r+0x12>
 800bc8c:	2400      	movs	r4, #0
 800bc8e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc92:	4628      	mov	r0, r5
 800bc94:	4798      	blx	r3
 800bc96:	2000      	movs	r0, #0
 800bc98:	e7e0      	b.n	800bc5c <_raise_r+0x12>
	...

0800bc9c <raise>:
 800bc9c:	4b02      	ldr	r3, [pc, #8]	; (800bca8 <raise+0xc>)
 800bc9e:	4601      	mov	r1, r0
 800bca0:	6818      	ldr	r0, [r3, #0]
 800bca2:	f7ff bfd2 	b.w	800bc4a <_raise_r>
 800bca6:	bf00      	nop
 800bca8:	20000010 	.word	0x20000010

0800bcac <_kill_r>:
 800bcac:	b538      	push	{r3, r4, r5, lr}
 800bcae:	4d07      	ldr	r5, [pc, #28]	; (800bccc <_kill_r+0x20>)
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	4608      	mov	r0, r1
 800bcb6:	4611      	mov	r1, r2
 800bcb8:	602b      	str	r3, [r5, #0]
 800bcba:	f7f6 fa97 	bl	80021ec <_kill>
 800bcbe:	1c43      	adds	r3, r0, #1
 800bcc0:	d102      	bne.n	800bcc8 <_kill_r+0x1c>
 800bcc2:	682b      	ldr	r3, [r5, #0]
 800bcc4:	b103      	cbz	r3, 800bcc8 <_kill_r+0x1c>
 800bcc6:	6023      	str	r3, [r4, #0]
 800bcc8:	bd38      	pop	{r3, r4, r5, pc}
 800bcca:	bf00      	nop
 800bccc:	200006a8 	.word	0x200006a8

0800bcd0 <_getpid_r>:
 800bcd0:	f7f6 ba84 	b.w	80021dc <_getpid>

0800bcd4 <_init>:
 800bcd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcd6:	bf00      	nop
 800bcd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcda:	bc08      	pop	{r3}
 800bcdc:	469e      	mov	lr, r3
 800bcde:	4770      	bx	lr

0800bce0 <_fini>:
 800bce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bce2:	bf00      	nop
 800bce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bce6:	bc08      	pop	{r3}
 800bce8:	469e      	mov	lr, r3
 800bcea:	4770      	bx	lr
