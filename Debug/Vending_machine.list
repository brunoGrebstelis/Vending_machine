
Vending_machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c6a0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a88  0800c8a0  0800c8a0  0001c8a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d328  0800d328  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d328  0800d328  0001d328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d330  0800d330  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d330  0800d330  0001d330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d334  0800d334  0001d334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800d338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000510  200001e8  0800d51c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006f8  0800d51c  000206f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000202aa  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003811  00000000  00000000  000404bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  00043cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00044ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ad00  00000000  00000000  00045b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d3d  00000000  00000000  00070808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f72f0  00000000  00000000  00087545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017e835  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c8  00000000  00000000  0017e888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e8 	.word	0x200001e8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c888 	.word	0x0800c888

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ec 	.word	0x200001ec
 800023c:	0800c888 	.word	0x0800c888

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <CheckTemperature>:
static const uint16_t fanPins[3]  = { GPIO_PIN_2, GPIO_PIN_3, GPIO_PIN_4 };
static const uint16_t heatPins[3] = { GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7 };


// Periodic temperature check
void CheckTemperature(AHT20_Sensor_t sensor) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08c      	sub	sp, #48	; 0x30
 80009d4:	af02      	add	r7, sp, #8
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
    if (sensor < SENSOR_AHT20_1 || sensor > SENSOR_AHT20_8) {
 80009da:	79fb      	ldrb	r3, [r7, #7]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d002      	beq.n	80009e6 <CheckTemperature+0x16>
 80009e0:	79fb      	ldrb	r3, [r7, #7]
 80009e2:	2b08      	cmp	r3, #8
 80009e4:	d905      	bls.n	80009f2 <CheckTemperature+0x22>
        printf("Invalid sensor: %d. Must be between SENSOR_AHT20_1 and SENSOR_AHT20_8.\r\n", sensor);
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	4619      	mov	r1, r3
 80009ea:	485e      	ldr	r0, [pc, #376]	; (8000b64 <CheckTemperature+0x194>)
 80009ec:	f008 f8c2 	bl	8008b74 <iprintf>
 80009f0:	e0b5      	b.n	8000b5e <CheckTemperature+0x18e>
        return;
    }

    // Mapping sensor to PCA9548A channel bitmask
    uint8_t channelMasks[] = {CHANNEL_0, CHANNEL_1, CHANNEL_2, CHANNEL_3, CHANNEL_4, CHANNEL_5, CHANNEL_6, CHANNEL_7};
 80009f2:	4a5d      	ldr	r2, [pc, #372]	; (8000b68 <CheckTemperature+0x198>)
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009fc:	e883 0003 	stmia.w	r3, {r0, r1}
    uint8_t selectedChannel = channelMasks[sensor - 1];  // Adjust for 0-based indexing
 8000a00:	79fb      	ldrb	r3, [r7, #7]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a08:	4413      	add	r3, r2
 8000a0a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000a0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    float temperature, humidity;
    if (AHT20_ReadData_PCA9548A(&hi2c2, PCA9548A_ADDRESS, selectedChannel, &temperature, &humidity) == HAL_OK) {
 8000a12:	f107 0110 	add.w	r1, r7, #16
 8000a16:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000a1a:	f107 030c 	add.w	r3, r7, #12
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	460b      	mov	r3, r1
 8000a22:	2170      	movs	r1, #112	; 0x70
 8000a24:	4851      	ldr	r0, [pc, #324]	; (8000b6c <CheckTemperature+0x19c>)
 8000a26:	f000 f97b 	bl	8000d20 <AHT20_ReadData_PCA9548A>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d157      	bne.n	8000ae0 <CheckTemperature+0x110>
        printf("Sensor %d - Temperature: %.2f C\r\n", sensor, temperature);
 8000a30:	79f9      	ldrb	r1, [r7, #7]
 8000a32:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a36:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a3a:	ec53 2b17 	vmov	r2, r3, d7
 8000a3e:	484c      	ldr	r0, [pc, #304]	; (8000b70 <CheckTemperature+0x1a0>)
 8000a40:	f008 f898 	bl	8008b74 <iprintf>
        printf("Sensor %d - Humidity: %.2f %%RH\r\n", sensor, humidity);
 8000a44:	79f9      	ldrb	r1, [r7, #7]
 8000a46:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a4e:	ec53 2b17 	vmov	r2, r3, d7
 8000a52:	4848      	ldr	r0, [pc, #288]	; (8000b74 <CheckTemperature+0x1a4>)
 8000a54:	f008 f88e 	bl	8008b74 <iprintf>

        int16_t tRaw = (int16_t)(temperature * 100.0f);
 8000a58:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a5c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8000b78 <CheckTemperature+0x1a8>
 8000a60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a68:	ee17 3a90 	vmov	r3, s15
 8000a6c:	84bb      	strh	r3, [r7, #36]	; 0x24
        int16_t hRaw = (int16_t)(humidity * 100.0f);
 8000a6e:	edd7 7a03 	vldr	s15, [r7, #12]
 8000a72:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8000b78 <CheckTemperature+0x1a8>
 8000a76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a7e:	ee17 3a90 	vmov	r3, s15
 8000a82:	847b      	strh	r3, [r7, #34]	; 0x22
        uint8_t tHigh = (uint8_t)((tRaw >> 8) & 0xFF);
 8000a84:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8000a88:	121b      	asrs	r3, r3, #8
 8000a8a:	b21b      	sxth	r3, r3
 8000a8c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t tLow  = (uint8_t)( tRaw       & 0xFF);
 8000a90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000a92:	f887 3020 	strb.w	r3, [r7, #32]
        uint8_t hHigh = (uint8_t)((hRaw >> 8) & 0xFF);
 8000a96:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000a9a:	121b      	asrs	r3, r3, #8
 8000a9c:	b21b      	sxth	r3, r3
 8000a9e:	77fb      	strb	r3, [r7, #31]
        uint8_t hLow  = (uint8_t)( hRaw       & 0xFF);
 8000aa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000aa2:	77bb      	strb	r3, [r7, #30]
        SPI_SendMessage(0xF4, sensor, tHigh, tLow, hHigh, hLow);
 8000aa4:	f897 0020 	ldrb.w	r0, [r7, #32]
 8000aa8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8000aac:	79f9      	ldrb	r1, [r7, #7]
 8000aae:	7fbb      	ldrb	r3, [r7, #30]
 8000ab0:	9301      	str	r3, [sp, #4]
 8000ab2:	7ffb      	ldrb	r3, [r7, #31]
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	20f4      	movs	r0, #244	; 0xf4
 8000aba:	f001 fe59 	bl	8002770 <SPI_SendMessage>
        tempSensFailed[sensor - 1] = false;
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	4a2e      	ldr	r2, [pc, #184]	; (8000b7c <CheckTemperature+0x1ac>)
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	54d1      	strb	r1, [r2, r3]

        Climate_Update(sensor, temperature, fanMode);
 8000ac8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000acc:	4b2c      	ldr	r3, [pc, #176]	; (8000b80 <CheckTemperature+0x1b0>)
 8000ace:	781a      	ldrb	r2, [r3, #0]
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 f857 	bl	8000b8c <Climate_Update>
 8000ade:	e017      	b.n	8000b10 <CheckTemperature+0x140>

    } else {
        printf("Failed to read data from sensor %d.\r\n", sensor);
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4827      	ldr	r0, [pc, #156]	; (8000b84 <CheckTemperature+0x1b4>)
 8000ae6:	f008 f845 	bl	8008b74 <iprintf>
        if (!tempSensFailed[sensor - 1]) {
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	4a23      	ldr	r2, [pc, #140]	; (8000b7c <CheckTemperature+0x1ac>)
 8000af0:	5cd3      	ldrb	r3, [r2, r3]
 8000af2:	f083 0301 	eor.w	r3, r3, #1
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d009      	beq.n	8000b10 <CheckTemperature+0x140>
        	setError(STATE_SENSOR, sensor);
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	4619      	mov	r1, r3
 8000b00:	2007      	movs	r0, #7
 8000b02:	f000 fe09 	bl	8001718 <setError>
            tempSensFailed[sensor - 1] = true;
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <CheckTemperature+0x1ac>)
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	54d1      	strb	r1, [r2, r3]
        }
    }

    if (temperature < 0.0 && !tempBelowZero[sensor - 1]) {
 8000b10:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b1c:	d513      	bpl.n	8000b46 <CheckTemperature+0x176>
 8000b1e:	79fb      	ldrb	r3, [r7, #7]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	4a19      	ldr	r2, [pc, #100]	; (8000b88 <CheckTemperature+0x1b8>)
 8000b24:	5cd3      	ldrb	r3, [r2, r3]
 8000b26:	f083 0301 	eor.w	r3, r3, #1
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d00a      	beq.n	8000b46 <CheckTemperature+0x176>
        tempBelowZero[sensor - 1] = true;
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <CheckTemperature+0x1b8>)
 8000b36:	2101      	movs	r1, #1
 8000b38:	54d1      	strb	r1, [r2, r3]
        setError(STATE_TEMPERATURE, sensor);
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	2006      	movs	r0, #6
 8000b40:	f000 fdea 	bl	8001718 <setError>
 8000b44:	e00b      	b.n	8000b5e <CheckTemperature+0x18e>
    } else if (temperature >= 0.0) {
 8000b46:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b4a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b52:	db04      	blt.n	8000b5e <CheckTemperature+0x18e>
        tempBelowZero[sensor - 1] = false;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	4a0b      	ldr	r2, [pc, #44]	; (8000b88 <CheckTemperature+0x1b8>)
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	54d1      	strb	r1, [r2, r3]
    }


}
 8000b5e:	3728      	adds	r7, #40	; 0x28
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	0800c8a0 	.word	0x0800c8a0
 8000b68:	0800c95c 	.word	0x0800c95c
 8000b6c:	200004d8 	.word	0x200004d8
 8000b70:	0800c8ec 	.word	0x0800c8ec
 8000b74:	0800c910 	.word	0x0800c910
 8000b78:	42c80000 	.word	0x42c80000
 8000b7c:	20000204 	.word	0x20000204
 8000b80:	2000022c 	.word	0x2000022c
 8000b84:	0800c934 	.word	0x0800c934
 8000b88:	2000020c 	.word	0x2000020c

08000b8c <Climate_Update>:



void Climate_Update(AHT20_Sensor_t sensor, float temperature, uint8_t fanMode) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	ed87 0a00 	vstr	s0, [r7]
 8000b98:	460a      	mov	r2, r1
 8000b9a:	71fb      	strb	r3, [r7, #7]
 8000b9c:	4613      	mov	r3, r2
 8000b9e:	71bb      	strb	r3, [r7, #6]
    /* Accept only chambers 1-3 */
    if (sensor < SENSOR_AHT20_1 || sensor > SENSOR_AHT20_3) return;
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d04b      	beq.n	8000c3e <Climate_Update+0xb2>
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	2b03      	cmp	r3, #3
 8000baa:	d848      	bhi.n	8000c3e <Climate_Update+0xb2>

    uint8_t idx     = sensor - SENSOR_AHT20_1;   /* 0,1,2                       */
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	73bb      	strb	r3, [r7, #14]
    uint8_t fanBit  = idx;                       /* bits 0-2                    */
 8000bb2:	7bbb      	ldrb	r3, [r7, #14]
 8000bb4:	737b      	strb	r3, [r7, #13]
    uint8_t heatBit = idx + 3;                   /* bits 3-5                    */
 8000bb6:	7bbb      	ldrb	r3, [r7, #14]
 8000bb8:	3303      	adds	r3, #3
 8000bba:	733b      	strb	r3, [r7, #12]

    /* ───────── Heater decision ───────── */
    GPIO_PinState heat;
    if      (temperature <  TEMP_MIN) heat = GPIO_PIN_SET;                      /* force ON  */
 8000bbc:	edd7 7a00 	vldr	s15, [r7]
 8000bc0:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8000bc4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bcc:	d502      	bpl.n	8000bd4 <Climate_Update+0x48>
 8000bce:	2301      	movs	r3, #1
 8000bd0:	73fb      	strb	r3, [r7, #15]
 8000bd2:	e013      	b.n	8000bfc <Climate_Update+0x70>
    else if (temperature >  TEMP_MAX) heat = GPIO_PIN_RESET;                    /* force OFF */
 8000bd4:	edd7 7a00 	vldr	s15, [r7]
 8000bd8:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8000bdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be4:	dd02      	ble.n	8000bec <Climate_Update+0x60>
 8000be6:	2300      	movs	r3, #0
 8000be8:	73fb      	strb	r3, [r7, #15]
 8000bea:	e007      	b.n	8000bfc <Climate_Update+0x70>
    else                               heat = (fanMode & (1 << heatBit)) ? GPIO_PIN_SET
 8000bec:	79ba      	ldrb	r2, [r7, #6]
 8000bee:	7b3b      	ldrb	r3, [r7, #12]
 8000bf0:	fa42 f303 	asr.w	r3, r2, r3
                                                                         : GPIO_PIN_RESET;
 8000bf4:	b2db      	uxtb	r3, r3
    else                               heat = (fanMode & (1 << heatBit)) ? GPIO_PIN_SET
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(GPIOG, heatPins[idx], heat);
 8000bfc:	7bbb      	ldrb	r3, [r7, #14]
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <Climate_Update+0xbc>)
 8000c00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c04:	7bfa      	ldrb	r2, [r7, #15]
 8000c06:	4619      	mov	r1, r3
 8000c08:	4810      	ldr	r0, [pc, #64]	; (8000c4c <Climate_Update+0xc0>)
 8000c0a:	f003 f9fd 	bl	8004008 <HAL_GPIO_WritePin>

    /* ───────── Fan decision ──────────── */
    GPIO_PinState fan = (heat == GPIO_PIN_SET)            ? GPIO_PIN_SET        /* heater needs airflow */
                      : (fanMode & (1 << fanBit))         ? GPIO_PIN_SET
 8000c0e:	7bfb      	ldrb	r3, [r7, #15]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d008      	beq.n	8000c26 <Climate_Update+0x9a>
 8000c14:	79ba      	ldrb	r2, [r7, #6]
 8000c16:	7b7b      	ldrb	r3, [r7, #13]
 8000c18:	fa42 f303 	asr.w	r3, r2, r3
                                                        : GPIO_PIN_RESET;
 8000c1c:	b2db      	uxtb	r3, r3
                      : (fanMode & (1 << fanBit))         ? GPIO_PIN_SET
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	e000      	b.n	8000c28 <Climate_Update+0x9c>
 8000c26:	2301      	movs	r3, #1
    GPIO_PinState fan = (heat == GPIO_PIN_SET)            ? GPIO_PIN_SET        /* heater needs airflow */
 8000c28:	72fb      	strb	r3, [r7, #11]
    HAL_GPIO_WritePin(GPIOG, fanPins[idx], fan);
 8000c2a:	7bbb      	ldrb	r3, [r7, #14]
 8000c2c:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <Climate_Update+0xc4>)
 8000c2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c32:	7afa      	ldrb	r2, [r7, #11]
 8000c34:	4619      	mov	r1, r3
 8000c36:	4805      	ldr	r0, [pc, #20]	; (8000c4c <Climate_Update+0xc0>)
 8000c38:	f003 f9e6 	bl	8004008 <HAL_GPIO_WritePin>
 8000c3c:	e000      	b.n	8000c40 <Climate_Update+0xb4>
    if (sensor < SENSOR_AHT20_1 || sensor > SENSOR_AHT20_3) return;
 8000c3e:	bf00      	nop
}
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	0800cd24 	.word	0x0800cd24
 8000c4c:	40021800 	.word	0x40021800
 8000c50:	0800cd1c 	.word	0x0800cd1c
 8000c54:	00000000 	.word	0x00000000

08000c58 <AHT20_CalculateValues>:
    AHT20_CalculateValues(raw_data, temperature, humidity);
    return HAL_OK;
}

// Function to calculate temperature and humidity from raw data
void AHT20_CalculateValues(uint8_t *data, float *temperature, float *humidity) {
 8000c58:	b480      	push	{r7}
 8000c5a:	b087      	sub	sp, #28
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
    uint32_t raw_humidity = (data[1] << 12) | (data[2] << 4) | (data[3] >> 4);
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3301      	adds	r3, #1
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	031a      	lsls	r2, r3, #12
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	3302      	adds	r3, #2
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	011b      	lsls	r3, r3, #4
 8000c74:	4313      	orrs	r3, r2
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	3203      	adds	r2, #3
 8000c7a:	7812      	ldrb	r2, [r2, #0]
 8000c7c:	0912      	lsrs	r2, r2, #4
 8000c7e:	b2d2      	uxtb	r2, r2
 8000c80:	4313      	orrs	r3, r2
 8000c82:	617b      	str	r3, [r7, #20]
    uint32_t raw_temperature = ((data[3] & 0xF) << 16) | (data[4] << 8) | data[5];
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	3303      	adds	r3, #3
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	041b      	lsls	r3, r3, #16
 8000c8c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	3304      	adds	r3, #4
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	021b      	lsls	r3, r3, #8
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	3205      	adds	r2, #5
 8000c9e:	7812      	ldrb	r2, [r2, #0]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
    *humidity = (raw_humidity * 100.0) / 1048576;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	ee07 3a90 	vmov	s15, r3
 8000caa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000cae:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8000d00 <AHT20_CalculateValues+0xa8>
 8000cb2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000cb6:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8000d08 <AHT20_CalculateValues+0xb0>
 8000cba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cbe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	edc3 7a00 	vstr	s15, [r3]
    *temperature = ((raw_temperature * 200.0) / 1048576) - 50.0;
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	ee07 3a90 	vmov	s15, r3
 8000cce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000cd2:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8000d10 <AHT20_CalculateValues+0xb8>
 8000cd6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000cda:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000d08 <AHT20_CalculateValues+0xb0>
 8000cde:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ce2:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000d18 <AHT20_CalculateValues+0xc0>
 8000ce6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000cea:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	edc3 7a00 	vstr	s15, [r3]
}
 8000cf4:	bf00      	nop
 8000cf6:	371c      	adds	r7, #28
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	00000000 	.word	0x00000000
 8000d04:	40590000 	.word	0x40590000
 8000d08:	00000000 	.word	0x00000000
 8000d0c:	41300000 	.word	0x41300000
 8000d10:	00000000 	.word	0x00000000
 8000d14:	40690000 	.word	0x40690000
 8000d18:	00000000 	.word	0x00000000
 8000d1c:	40490000 	.word	0x40490000

08000d20 <AHT20_ReadData_PCA9548A>:


// Read data from AHT20 via PCA9548A
HAL_StatusTypeDef AHT20_ReadData_PCA9548A(I2C_HandleTypeDef *hi2c, uint8_t pca9548a_address, uint8_t channel, float *temperature, float *humidity) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08c      	sub	sp, #48	; 0x30
 8000d24:	af02      	add	r7, sp, #8
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	72fb      	strb	r3, [r7, #11]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	72bb      	strb	r3, [r7, #10]
    uint8_t cmd_measure[] = {0xAC, 0x33, 0x00};
 8000d32:	4a53      	ldr	r2, [pc, #332]	; (8000e80 <AHT20_ReadData_PCA9548A+0x160>)
 8000d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d38:	6812      	ldr	r2, [r2, #0]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	8019      	strh	r1, [r3, #0]
 8000d3e:	3302      	adds	r3, #2
 8000d40:	0c12      	lsrs	r2, r2, #16
 8000d42:	701a      	strb	r2, [r3, #0]
    uint8_t raw_data[6];
    uint8_t status;

    // Select the appropriate channel on PCA9548A
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, pca9548a_address << 1, &channel, 1, HAL_MAX_DELAY);
 8000d44:	7afb      	ldrb	r3, [r7, #11]
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	b299      	uxth	r1, r3
 8000d4c:	f107 020a 	add.w	r2, r7, #10
 8000d50:	f04f 33ff 	mov.w	r3, #4294967295
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	2301      	movs	r3, #1
 8000d58:	68f8      	ldr	r0, [r7, #12]
 8000d5a:	f003 fa49 	bl	80041f0 <HAL_I2C_Master_Transmit>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (ret != HAL_OK) return ret;
 8000d64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d002      	beq.n	8000d72 <AHT20_ReadData_PCA9548A+0x52>
 8000d6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d70:	e081      	b.n	8000e76 <AHT20_ReadData_PCA9548A+0x156>

    // Check status of AHT20
    ret = HAL_I2C_Master_Transmit(hi2c, AHT20_ADDRESS, (uint8_t[]){0x71}, 1, HAL_MAX_DELAY);
 8000d72:	2371      	movs	r3, #113	; 0x71
 8000d74:	763b      	strb	r3, [r7, #24]
 8000d76:	f107 0218 	add.w	r2, r7, #24
 8000d7a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7e:	9300      	str	r3, [sp, #0]
 8000d80:	2301      	movs	r3, #1
 8000d82:	2170      	movs	r1, #112	; 0x70
 8000d84:	68f8      	ldr	r0, [r7, #12]
 8000d86:	f003 fa33 	bl	80041f0 <HAL_I2C_Master_Transmit>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (ret != HAL_OK) return ret;
 8000d90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d002      	beq.n	8000d9e <AHT20_ReadData_PCA9548A+0x7e>
 8000d98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d9c:	e06b      	b.n	8000e76 <AHT20_ReadData_PCA9548A+0x156>

    ret = HAL_I2C_Master_Receive(hi2c, AHT20_ADDRESS, &status, 1, HAL_MAX_DELAY);
 8000d9e:	f107 021b 	add.w	r2, r7, #27
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	2301      	movs	r3, #1
 8000daa:	2170      	movs	r1, #112	; 0x70
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f003 fb13 	bl	80043d8 <HAL_I2C_Master_Receive>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (ret != HAL_OK) return ret;
 8000db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d002      	beq.n	8000dc6 <AHT20_ReadData_PCA9548A+0xa6>
 8000dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000dc4:	e057      	b.n	8000e76 <AHT20_ReadData_PCA9548A+0x156>

    // Check if the sensor is calibrated
    if ((status & 0x18) != 0x18) {
 8000dc6:	7efb      	ldrb	r3, [r7, #27]
 8000dc8:	f003 0318 	and.w	r3, r3, #24
 8000dcc:	2b18      	cmp	r3, #24
 8000dce:	d01f      	beq.n	8000e10 <AHT20_ReadData_PCA9548A+0xf0>
        uint8_t init_cmd[] = {0xBE, 0x08, 0x00};
 8000dd0:	4a2c      	ldr	r2, [pc, #176]	; (8000e84 <AHT20_ReadData_PCA9548A+0x164>)
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	6812      	ldr	r2, [r2, #0]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	8019      	strh	r1, [r3, #0]
 8000ddc:	3302      	adds	r3, #2
 8000dde:	0c12      	lsrs	r2, r2, #16
 8000de0:	701a      	strb	r2, [r3, #0]
        ret = HAL_I2C_Master_Transmit(hi2c, AHT20_ADDRESS, init_cmd, 3, HAL_MAX_DELAY);
 8000de2:	f107 0214 	add.w	r2, r7, #20
 8000de6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dea:	9300      	str	r3, [sp, #0]
 8000dec:	2303      	movs	r3, #3
 8000dee:	2170      	movs	r1, #112	; 0x70
 8000df0:	68f8      	ldr	r0, [r7, #12]
 8000df2:	f003 f9fd 	bl	80041f0 <HAL_I2C_Master_Transmit>
 8000df6:	4603      	mov	r3, r0
 8000df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (ret != HAL_OK) return ret;
 8000dfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d002      	beq.n	8000e0a <AHT20_ReadData_PCA9548A+0xea>
 8000e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e08:	e035      	b.n	8000e76 <AHT20_ReadData_PCA9548A+0x156>
        HAL_Delay(10);
 8000e0a:	200a      	movs	r0, #10
 8000e0c:	f002 f964 	bl	80030d8 <HAL_Delay>
    }

    // Trigger measurement
    ret = HAL_I2C_Master_Transmit(hi2c, AHT20_ADDRESS, cmd_measure, sizeof(cmd_measure), HAL_MAX_DELAY);
 8000e10:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000e14:	f04f 33ff 	mov.w	r3, #4294967295
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	2170      	movs	r1, #112	; 0x70
 8000e1e:	68f8      	ldr	r0, [r7, #12]
 8000e20:	f003 f9e6 	bl	80041f0 <HAL_I2C_Master_Transmit>
 8000e24:	4603      	mov	r3, r0
 8000e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (ret != HAL_OK) return ret;
 8000e2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d002      	beq.n	8000e38 <AHT20_ReadData_PCA9548A+0x118>
 8000e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e36:	e01e      	b.n	8000e76 <AHT20_ReadData_PCA9548A+0x156>

    // Wait for measurement
    HAL_Delay(80);
 8000e38:	2050      	movs	r0, #80	; 0x50
 8000e3a:	f002 f94d 	bl	80030d8 <HAL_Delay>

    // Read measurement data
    ret = HAL_I2C_Master_Receive(hi2c, AHT20_ADDRESS, raw_data, sizeof(raw_data), HAL_MAX_DELAY);
 8000e3e:	f107 021c 	add.w	r2, r7, #28
 8000e42:	f04f 33ff 	mov.w	r3, #4294967295
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2306      	movs	r3, #6
 8000e4a:	2170      	movs	r1, #112	; 0x70
 8000e4c:	68f8      	ldr	r0, [r7, #12]
 8000e4e:	f003 fac3 	bl	80043d8 <HAL_I2C_Master_Receive>
 8000e52:	4603      	mov	r3, r0
 8000e54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (ret != HAL_OK) return ret;
 8000e58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d002      	beq.n	8000e66 <AHT20_ReadData_PCA9548A+0x146>
 8000e60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e64:	e007      	b.n	8000e76 <AHT20_ReadData_PCA9548A+0x156>

    // Calculate temperature and humidity
    AHT20_CalculateValues(raw_data, temperature, humidity);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e6c:	6879      	ldr	r1, [r7, #4]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fef2 	bl	8000c58 <AHT20_CalculateValues>
    return HAL_OK;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3728      	adds	r7, #40	; 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	0800c964 	.word	0x0800c964
 8000e84:	0800c968 	.word	0x0800c968

08000e88 <init_application>:

static uint64_t lastTime1 = 0;
static uint64_t lastTime2 = 0;
static int sensorIndex = 0;

void init_application(){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af02      	add	r7, sp, #8
	printf("STM32 SPI Slave Ready\r\n"); // Print ready message
 8000e8e:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <init_application+0x38>)
 8000e90:	f007 ff0c 	bl	8008cac <puts>
	HAL_SPI_TransmitReceive_IT(&hspi1, spi_tx_buffer, spi_rx_buffer, SPI_BUFFER_SIZE);
 8000e94:	2306      	movs	r3, #6
 8000e96:	4a0b      	ldr	r2, [pc, #44]	; (8000ec4 <init_application+0x3c>)
 8000e98:	490b      	ldr	r1, [pc, #44]	; (8000ec8 <init_application+0x40>)
 8000e9a:	480c      	ldr	r0, [pc, #48]	; (8000ecc <init_application+0x44>)
 8000e9c:	f005 fd7e 	bl	800699c <HAL_SPI_TransmitReceive_IT>
	HAL_Delay(10);
 8000ea0:	200a      	movs	r0, #10
 8000ea2:	f002 f919 	bl	80030d8 <HAL_Delay>
	SPI_SendMessage(0xF5, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF);
 8000ea6:	23ff      	movs	r3, #255	; 0xff
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	23ff      	movs	r3, #255	; 0xff
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	23ff      	movs	r3, #255	; 0xff
 8000eb0:	22ff      	movs	r2, #255	; 0xff
 8000eb2:	21ff      	movs	r1, #255	; 0xff
 8000eb4:	20f5      	movs	r0, #245	; 0xf5
 8000eb6:	f001 fc5b 	bl	8002770 <SPI_SendMessage>
        //Send_RGB(i + 100, red, green, blue, mode);
        //open_cabinet(i);
    //}


}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	0800c96c 	.word	0x0800c96c
 8000ec4:	200006cc 	.word	0x200006cc
 8000ec8:	200006d4 	.word	0x200006d4
 8000ecc:	20000524 	.word	0x20000524

08000ed0 <loop_application>:

void loop_application(){
 8000ed0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000ed4:	af00      	add	r7, sp, #0


	if(getSPIFlag()){
 8000ed6:	f001 faf7 	bl	80024c8 <getSPIFlag>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d004      	beq.n	8000eea <loop_application+0x1a>
		Process_SPI_Command(rpi_msg, SPI_BUFFER_SIZE);
 8000ee0:	2106      	movs	r1, #6
 8000ee2:	4858      	ldr	r0, [pc, #352]	; (8001044 <loop_application+0x174>)
 8000ee4:	f001 fb3a 	bl	800255c <Process_SPI_Command>
		    sensorIndex = (sensorIndex + 1) % 8;
		}

	}

}
 8000ee8:	e0a8      	b.n	800103c <loop_application+0x16c>
		if(getSendSPIFlag() && get_error_flag()) HandleState();
 8000eea:	f001 faf9 	bl	80024e0 <getSendSPIFlag>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d006      	beq.n	8000f02 <loop_application+0x32>
 8000ef4:	f000 fbf8 	bl	80016e8 <get_error_flag>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <loop_application+0x32>
 8000efe:	f000 fc29 	bl	8001754 <HandleState>
		if(getSendSPIFlag() && get_locker_flag()) CheckAllLockersAfterDelay();
 8000f02:	f001 faed 	bl	80024e0 <getSendSPIFlag>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d006      	beq.n	8000f1a <loop_application+0x4a>
 8000f0c:	f000 fbf8 	bl	8001700 <get_locker_flag>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <loop_application+0x4a>
 8000f16:	f000 fceb 	bl	80018f0 <CheckAllLockersAfterDelay>
		if(getClimateFlag()) setFanMode();
 8000f1a:	f000 f8ab 	bl	8001074 <getClimateFlag>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <loop_application+0x58>
 8000f24:	f000 f8be 	bl	80010a4 <setFanMode>
		if(HAL_GetTick() - lastTime1 >= 33000 && getAutoFlag()) {
 8000f28:	f002 f8ca 	bl	80030c0 <HAL_GetTick>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f04f 0100 	mov.w	r1, #0
 8000f34:	4b44      	ldr	r3, [pc, #272]	; (8001048 <loop_application+0x178>)
 8000f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3a:	ebb0 0802 	subs.w	r8, r0, r2
 8000f3e:	eb61 0903 	sbc.w	r9, r1, r3
 8000f42:	f248 02e7 	movw	r2, #32999	; 0x80e7
 8000f46:	f04f 0300 	mov.w	r3, #0
 8000f4a:	454b      	cmp	r3, r9
 8000f4c:	bf08      	it	eq
 8000f4e:	4542      	cmpeq	r2, r8
 8000f50:	d20f      	bcs.n	8000f72 <loop_application+0xa2>
 8000f52:	f000 f89b 	bl	800108c <getAutoFlag>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d00a      	beq.n	8000f72 <loop_application+0xa2>
			lastTime1 = HAL_GetTick();
 8000f5c:	f002 f8b0 	bl	80030c0 <HAL_GetTick>
 8000f60:	4603      	mov	r3, r0
 8000f62:	461a      	mov	r2, r3
 8000f64:	f04f 0300 	mov.w	r3, #0
 8000f68:	4937      	ldr	r1, [pc, #220]	; (8001048 <loop_application+0x178>)
 8000f6a:	e9c1 2300 	strd	r2, r3, [r1]
			ControlClimate();
 8000f6e:	f000 f9eb 	bl	8001348 <ControlClimate>
		if (getSendSPIFlag() && HAL_GetTick() - lastTime2 >= 30000) {
 8000f72:	f001 fab5 	bl	80024e0 <getSendSPIFlag>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d05f      	beq.n	800103c <loop_application+0x16c>
 8000f7c:	f002 f8a0 	bl	80030c0 <HAL_GetTick>
 8000f80:	4603      	mov	r3, r0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f04f 0100 	mov.w	r1, #0
 8000f88:	4b30      	ldr	r3, [pc, #192]	; (800104c <loop_application+0x17c>)
 8000f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8e:	1a84      	subs	r4, r0, r2
 8000f90:	eb61 0503 	sbc.w	r5, r1, r3
 8000f94:	f247 522f 	movw	r2, #29999	; 0x752f
 8000f98:	f04f 0300 	mov.w	r3, #0
 8000f9c:	42ab      	cmp	r3, r5
 8000f9e:	bf08      	it	eq
 8000fa0:	42a2      	cmpeq	r2, r4
 8000fa2:	d24b      	bcs.n	800103c <loop_application+0x16c>
		    lastTime2 = HAL_GetTick();
 8000fa4:	f002 f88c 	bl	80030c0 <HAL_GetTick>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	461a      	mov	r2, r3
 8000fac:	f04f 0300 	mov.w	r3, #0
 8000fb0:	4926      	ldr	r1, [pc, #152]	; (800104c <loop_application+0x17c>)
 8000fb2:	e9c1 2300 	strd	r2, r3, [r1]
		    switch (sensorIndex) {
 8000fb6:	4b26      	ldr	r3, [pc, #152]	; (8001050 <loop_application+0x180>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b07      	cmp	r3, #7
 8000fbc:	d832      	bhi.n	8001024 <loop_application+0x154>
 8000fbe:	a201      	add	r2, pc, #4	; (adr r2, 8000fc4 <loop_application+0xf4>)
 8000fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fc4:	08000fe5 	.word	0x08000fe5
 8000fc8:	08000fed 	.word	0x08000fed
 8000fcc:	08000ff5 	.word	0x08000ff5
 8000fd0:	08000ffd 	.word	0x08000ffd
 8000fd4:	08001005 	.word	0x08001005
 8000fd8:	0800100d 	.word	0x0800100d
 8000fdc:	08001015 	.word	0x08001015
 8000fe0:	0800101d 	.word	0x0800101d
		            CheckTemperature(SENSOR_AHT20_1);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f7ff fcf3 	bl	80009d0 <CheckTemperature>
		            break;
 8000fea:	e01b      	b.n	8001024 <loop_application+0x154>
		        	CheckTemperature(SENSOR_AHT20_2);
 8000fec:	2002      	movs	r0, #2
 8000fee:	f7ff fcef 	bl	80009d0 <CheckTemperature>
		            break;
 8000ff2:	e017      	b.n	8001024 <loop_application+0x154>
		        	CheckTemperature(SENSOR_AHT20_1);
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	f7ff fceb 	bl	80009d0 <CheckTemperature>
		            break;
 8000ffa:	e013      	b.n	8001024 <loop_application+0x154>
		            CheckTemperature(SENSOR_AHT20_3);
 8000ffc:	2003      	movs	r0, #3
 8000ffe:	f7ff fce7 	bl	80009d0 <CheckTemperature>
		            break;
 8001002:	e00f      	b.n	8001024 <loop_application+0x154>
		        	CheckTemperature(SENSOR_AHT20_1);
 8001004:	2001      	movs	r0, #1
 8001006:	f7ff fce3 	bl	80009d0 <CheckTemperature>
		            break;
 800100a:	e00b      	b.n	8001024 <loop_application+0x154>
		            CheckTemperature(SENSOR_AHT20_4);
 800100c:	2004      	movs	r0, #4
 800100e:	f7ff fcdf 	bl	80009d0 <CheckTemperature>
		            break;
 8001012:	e007      	b.n	8001024 <loop_application+0x154>
		        	CheckTemperature(SENSOR_AHT20_1);
 8001014:	2001      	movs	r0, #1
 8001016:	f7ff fcdb 	bl	80009d0 <CheckTemperature>
		            break;
 800101a:	e003      	b.n	8001024 <loop_application+0x154>
		            CheckTemperature(SENSOR_AHT20_5);
 800101c:	2005      	movs	r0, #5
 800101e:	f7ff fcd7 	bl	80009d0 <CheckTemperature>
		            break;
 8001022:	bf00      	nop
		    sensorIndex = (sensorIndex + 1) % 8;
 8001024:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <loop_application+0x180>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	3301      	adds	r3, #1
 800102a:	425a      	negs	r2, r3
 800102c:	f003 0307 	and.w	r3, r3, #7
 8001030:	f002 0207 	and.w	r2, r2, #7
 8001034:	bf58      	it	pl
 8001036:	4253      	negpl	r3, r2
 8001038:	4a05      	ldr	r2, [pc, #20]	; (8001050 <loop_application+0x180>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001042:	bf00      	nop
 8001044:	200006dc 	.word	0x200006dc
 8001048:	20000218 	.word	0x20000218
 800104c:	20000220 	.word	0x20000220
 8001050:	20000228 	.word	0x20000228

08001054 <setClimateFlag>:
bool climate_flag = false;
bool auto_flag = false;



void setClimateFlag(bool flag){
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	71fb      	strb	r3, [r7, #7]
	climate_flag = flag;
 800105e:	4a04      	ldr	r2, [pc, #16]	; (8001070 <setClimateFlag+0x1c>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	7013      	strb	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	2000022d 	.word	0x2000022d

08001074 <getClimateFlag>:
bool getClimateFlag(){
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	return climate_flag;
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <getClimateFlag+0x14>)
 800107a:	781b      	ldrb	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	2000022d 	.word	0x2000022d

0800108c <getAutoFlag>:

void setAutoFlag(bool flag){
	auto_flag = flag;
}
bool getAutoFlag(){
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
	return auto_flag;
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <getAutoFlag+0x14>)
 8001092:	781b      	ldrb	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	2000022e 	.word	0x2000022e

080010a4 <setFanMode>:

void setFanMode() {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0

	printf("Mode in setFanMode() in climate.c: %d\r\n", fanMode);
 80010a8:	4b3f      	ldr	r3, [pc, #252]	; (80011a8 <setFanMode+0x104>)
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	4619      	mov	r1, r3
 80010ae:	483f      	ldr	r0, [pc, #252]	; (80011ac <setFanMode+0x108>)
 80010b0:	f007 fd60 	bl	8008b74 <iprintf>

    // If 'fanMode' is 255, that indicates Auto => all OFF
    if (fanMode == 255)
 80010b4:	4b3c      	ldr	r3, [pc, #240]	; (80011a8 <setFanMode+0x104>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2bff      	cmp	r3, #255	; 0xff
 80010ba:	d127      	bne.n	800110c <setFanMode+0x68>
    {
        printf("AUTO ON\r\n");
 80010bc:	483c      	ldr	r0, [pc, #240]	; (80011b0 <setFanMode+0x10c>)
 80010be:	f007 fdf5 	bl	8008cac <puts>
        // Turn everything OFF
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, RESET); // Fan1
 80010c2:	2200      	movs	r2, #0
 80010c4:	2104      	movs	r1, #4
 80010c6:	483b      	ldr	r0, [pc, #236]	; (80011b4 <setFanMode+0x110>)
 80010c8:	f002 ff9e 	bl	8004008 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, RESET); // Fan2
 80010cc:	2200      	movs	r2, #0
 80010ce:	2108      	movs	r1, #8
 80010d0:	4838      	ldr	r0, [pc, #224]	; (80011b4 <setFanMode+0x110>)
 80010d2:	f002 ff99 	bl	8004008 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, RESET); // Fan3
 80010d6:	2200      	movs	r2, #0
 80010d8:	2110      	movs	r1, #16
 80010da:	4836      	ldr	r0, [pc, #216]	; (80011b4 <setFanMode+0x110>)
 80010dc:	f002 ff94 	bl	8004008 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, RESET); // Heat1
 80010e0:	2200      	movs	r2, #0
 80010e2:	2120      	movs	r1, #32
 80010e4:	4833      	ldr	r0, [pc, #204]	; (80011b4 <setFanMode+0x110>)
 80010e6:	f002 ff8f 	bl	8004008 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, RESET); // Heat2
 80010ea:	2200      	movs	r2, #0
 80010ec:	2140      	movs	r1, #64	; 0x40
 80010ee:	4831      	ldr	r0, [pc, #196]	; (80011b4 <setFanMode+0x110>)
 80010f0:	f002 ff8a 	bl	8004008 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, RESET); // Heat3
 80010f4:	2200      	movs	r2, #0
 80010f6:	2180      	movs	r1, #128	; 0x80
 80010f8:	482e      	ldr	r0, [pc, #184]	; (80011b4 <setFanMode+0x110>)
 80010fa:	f002 ff85 	bl	8004008 <HAL_GPIO_WritePin>

        climate_flag = false;
 80010fe:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <setFanMode+0x114>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
        auto_flag = true;    // We are in auto mode
 8001104:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <setFanMode+0x118>)
 8001106:	2201      	movs	r2, #1
 8001108:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, (fanMode & (1 << 5)) ? SET : RESET);  // Heat3

        climate_flag = false;  // Keep same logic as original (all manual modes => climate_flag = false)
        auto_flag = false;     // Auto is off in this branch
    }
}
 800110a:	e04b      	b.n	80011a4 <setFanMode+0x100>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, (fanMode & (1 << 0)) ? SET : RESET);  // Fan1
 800110c:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <setFanMode+0x104>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	b2db      	uxtb	r3, r3
 8001116:	461a      	mov	r2, r3
 8001118:	2104      	movs	r1, #4
 800111a:	4826      	ldr	r0, [pc, #152]	; (80011b4 <setFanMode+0x110>)
 800111c:	f002 ff74 	bl	8004008 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, (fanMode & (1 << 1)) ? SET : RESET);  // Fan2
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <setFanMode+0x104>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	105b      	asrs	r3, r3, #1
 8001126:	b2db      	uxtb	r3, r3
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	b2db      	uxtb	r3, r3
 800112e:	461a      	mov	r2, r3
 8001130:	2108      	movs	r1, #8
 8001132:	4820      	ldr	r0, [pc, #128]	; (80011b4 <setFanMode+0x110>)
 8001134:	f002 ff68 	bl	8004008 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, (fanMode & (1 << 2)) ? SET : RESET);  // Fan3
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <setFanMode+0x104>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	109b      	asrs	r3, r3, #2
 800113e:	b2db      	uxtb	r3, r3
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	b2db      	uxtb	r3, r3
 8001146:	461a      	mov	r2, r3
 8001148:	2110      	movs	r1, #16
 800114a:	481a      	ldr	r0, [pc, #104]	; (80011b4 <setFanMode+0x110>)
 800114c:	f002 ff5c 	bl	8004008 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, (fanMode & (1 << 3)) ? SET : RESET);  // Heat1
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <setFanMode+0x104>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	10db      	asrs	r3, r3, #3
 8001156:	b2db      	uxtb	r3, r3
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	b2db      	uxtb	r3, r3
 800115e:	461a      	mov	r2, r3
 8001160:	2120      	movs	r1, #32
 8001162:	4814      	ldr	r0, [pc, #80]	; (80011b4 <setFanMode+0x110>)
 8001164:	f002 ff50 	bl	8004008 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, (fanMode & (1 << 4)) ? SET : RESET);  // Heat2
 8001168:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <setFanMode+0x104>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	111b      	asrs	r3, r3, #4
 800116e:	b2db      	uxtb	r3, r3
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	b2db      	uxtb	r3, r3
 8001176:	461a      	mov	r2, r3
 8001178:	2140      	movs	r1, #64	; 0x40
 800117a:	480e      	ldr	r0, [pc, #56]	; (80011b4 <setFanMode+0x110>)
 800117c:	f002 ff44 	bl	8004008 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, (fanMode & (1 << 5)) ? SET : RESET);  // Heat3
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <setFanMode+0x104>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	115b      	asrs	r3, r3, #5
 8001186:	b2db      	uxtb	r3, r3
 8001188:	f003 0301 	and.w	r3, r3, #1
 800118c:	b2db      	uxtb	r3, r3
 800118e:	461a      	mov	r2, r3
 8001190:	2180      	movs	r1, #128	; 0x80
 8001192:	4808      	ldr	r0, [pc, #32]	; (80011b4 <setFanMode+0x110>)
 8001194:	f002 ff38 	bl	8004008 <HAL_GPIO_WritePin>
        climate_flag = false;  // Keep same logic as original (all manual modes => climate_flag = false)
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <setFanMode+0x114>)
 800119a:	2200      	movs	r2, #0
 800119c:	701a      	strb	r2, [r3, #0]
        auto_flag = false;     // Auto is off in this branch
 800119e:	4b07      	ldr	r3, [pc, #28]	; (80011bc <setFanMode+0x118>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	2000022c 	.word	0x2000022c
 80011ac:	0800c984 	.word	0x0800c984
 80011b0:	0800c9ac 	.word	0x0800c9ac
 80011b4:	40021800 	.word	0x40021800
 80011b8:	2000022d 	.word	0x2000022d
 80011bc:	2000022e 	.word	0x2000022e

080011c0 <CalculateWindowInsideSurface>:

float CalculateWindowInsideSurface(float T_in, float T_out, float area){
 80011c0:	b480      	push	{r7}
 80011c2:	b08b      	sub	sp, #44	; 0x2c
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80011ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80011ce:	ed87 1a01 	vstr	s2, [r7, #4]
    // 1. Convection Resistances & Conduction
    float R_conv_in  = 1.0f / (H_IN  * area);
 80011d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80011d6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80011da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80011e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float R_conv_out = 1.0f / (H_OUT * area);
 80011ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ee:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80011f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80011f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80011fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011fe:	edc7 7a08 	vstr	s15, [r7, #32]
    float R_cond     = L_ACRYLIC / (K_ACRYLIC * area);
 8001202:	edd7 7a01 	vldr	s15, [r7, #4]
 8001206:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8001278 <CalculateWindowInsideSurface+0xb8>
 800120a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800120e:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800127c <CalculateWindowInsideSurface+0xbc>
 8001212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001216:	edc7 7a07 	vstr	s15, [r7, #28]

    // 2. Total thermal resistance
    float R_total = R_conv_in + R_cond + R_conv_out;
 800121a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800121e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001222:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001226:	ed97 7a08 	vldr	s14, [r7, #32]
 800122a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122e:	edc7 7a06 	vstr	s15, [r7, #24]

    // 3. Heat flux (W) through the window
    float Q = (T_in - T_out) / R_total;
 8001232:	ed97 7a03 	vldr	s14, [r7, #12]
 8001236:	edd7 7a02 	vldr	s15, [r7, #8]
 800123a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800123e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001246:	edc7 7a05 	vstr	s15, [r7, #20]

    // 4. Inside surface temperature
    float T_surf_in = T_in - Q * R_conv_in;
 800124a:	ed97 7a05 	vldr	s14, [r7, #20]
 800124e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001252:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001256:	ed97 7a03 	vldr	s14, [r7, #12]
 800125a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800125e:	edc7 7a04 	vstr	s15, [r7, #16]

    return T_surf_in;
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	ee07 3a90 	vmov	s15, r3
}
 8001268:	eeb0 0a67 	vmov.f32	s0, s15
 800126c:	372c      	adds	r7, #44	; 0x2c
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	3e4ccccd 	.word	0x3e4ccccd
 800127c:	3c23d70a 	.word	0x3c23d70a

08001280 <CalculateDewPointMagnus>:

static float CalculateDewPointMagnus(float tempC, float humidity){
 8001280:	b580      	push	{r7, lr}
 8001282:	ed2d 8b02 	vpush	{d8}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	ed87 0a01 	vstr	s0, [r7, #4]
 800128e:	edc7 0a00 	vstr	s1, [r7]
    // Example constants for the Magnus-Tetens approximation
    float A = 17.27f;
 8001292:	4b29      	ldr	r3, [pc, #164]	; (8001338 <CalculateDewPointMagnus+0xb8>)
 8001294:	617b      	str	r3, [r7, #20]
    float B = 237.7f;  // °C
 8001296:	4b29      	ldr	r3, [pc, #164]	; (800133c <CalculateDewPointMagnus+0xbc>)
 8001298:	613b      	str	r3, [r7, #16]

    // Avoid zero or negative humidity
    if (humidity < 1.0f)  humidity = 1.0f;
 800129a:	edd7 7a00 	vldr	s15, [r7]
 800129e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012aa:	d502      	bpl.n	80012b2 <CalculateDewPointMagnus+0x32>
 80012ac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012b0:	603b      	str	r3, [r7, #0]
    if (humidity > 100.0f) humidity = 100.0f;
 80012b2:	edd7 7a00 	vldr	s15, [r7]
 80012b6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001340 <CalculateDewPointMagnus+0xc0>
 80012ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c2:	dd01      	ble.n	80012c8 <CalculateDewPointMagnus+0x48>
 80012c4:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <CalculateDewPointMagnus+0xc4>)
 80012c6:	603b      	str	r3, [r7, #0]

    // alpha = [A * T / (B + T)] + ln(RH/100)
    float alpha = (A * tempC) / (B + tempC) + logf(humidity / 100.0f);
 80012c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80012cc:	edd7 7a01 	vldr	s15, [r7, #4]
 80012d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012d4:	edd7 6a04 	vldr	s13, [r7, #16]
 80012d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80012dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80012e0:	ee87 8a27 	vdiv.f32	s16, s14, s15
 80012e4:	edd7 7a00 	vldr	s15, [r7]
 80012e8:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001340 <CalculateDewPointMagnus+0xc0>
 80012ec:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80012f0:	eeb0 0a47 	vmov.f32	s0, s14
 80012f4:	f00b fa36 	bl	800c764 <logf>
 80012f8:	eef0 7a40 	vmov.f32	s15, s0
 80012fc:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001300:	edc7 7a03 	vstr	s15, [r7, #12]

    float dewPoint = (B * alpha) / (A - alpha);
 8001304:	ed97 7a04 	vldr	s14, [r7, #16]
 8001308:	edd7 7a03 	vldr	s15, [r7, #12]
 800130c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001310:	ed97 7a05 	vldr	s14, [r7, #20]
 8001314:	edd7 7a03 	vldr	s15, [r7, #12]
 8001318:	ee37 7a67 	vsub.f32	s14, s14, s15
 800131c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001320:	edc7 7a02 	vstr	s15, [r7, #8]
    return dewPoint;
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	ee07 3a90 	vmov	s15, r3
}
 800132a:	eeb0 0a67 	vmov.f32	s0, s15
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	ecbd 8b02 	vpop	{d8}
 8001336:	bd80      	pop	{r7, pc}
 8001338:	418a28f6 	.word	0x418a28f6
 800133c:	436db333 	.word	0x436db333
 8001340:	42c80000 	.word	0x42c80000
 8001344:	42c80000 	.word	0x42c80000

08001348 <ControlClimate>:

void ControlClimate(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b092      	sub	sp, #72	; 0x48
 800134c:	af02      	add	r7, sp, #8

    // 1) Variables for measured T/H
    float T_outdoor=0.0f, H_outdoor=0.0f;
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	f04f 0300 	mov.w	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
    float T_ch1=0.0f,    H_ch1=0.0f;
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	613b      	str	r3, [r7, #16]
    float T_ch2=0.0f,    H_ch2=0.0f;
 8001366:	f04f 0300 	mov.w	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
    float T_ch3=0.0f,    H_ch3=0.0f;
 8001372:	f04f 0300 	mov.w	r3, #0
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	603b      	str	r3, [r7, #0]

    // 2) Read from each sensor (PCA9548A channels)
    AHT20_ReadData_PCA9548A(&hi2c2, PCA9548A_ADDRESS, CHANNEL_3, &T_outdoor, &H_outdoor); // outside
 800137e:	f107 021c 	add.w	r2, r7, #28
 8001382:	f107 0318 	add.w	r3, r7, #24
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	4613      	mov	r3, r2
 800138a:	2208      	movs	r2, #8
 800138c:	2170      	movs	r1, #112	; 0x70
 800138e:	48d0      	ldr	r0, [pc, #832]	; (80016d0 <ControlClimate+0x388>)
 8001390:	f7ff fcc6 	bl	8000d20 <AHT20_ReadData_PCA9548A>
    AHT20_ReadData_PCA9548A(&hi2c2, PCA9548A_ADDRESS, CHANNEL_1, &T_ch1,     &H_ch1);     // chamber 1
 8001394:	f107 0214 	add.w	r2, r7, #20
 8001398:	f107 0310 	add.w	r3, r7, #16
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	4613      	mov	r3, r2
 80013a0:	2202      	movs	r2, #2
 80013a2:	2170      	movs	r1, #112	; 0x70
 80013a4:	48ca      	ldr	r0, [pc, #808]	; (80016d0 <ControlClimate+0x388>)
 80013a6:	f7ff fcbb 	bl	8000d20 <AHT20_ReadData_PCA9548A>
    AHT20_ReadData_PCA9548A(&hi2c2, PCA9548A_ADDRESS, CHANNEL_0, &T_ch2,     &H_ch2);     // chamber 2
 80013aa:	f107 020c 	add.w	r2, r7, #12
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	4613      	mov	r3, r2
 80013b6:	2201      	movs	r2, #1
 80013b8:	2170      	movs	r1, #112	; 0x70
 80013ba:	48c5      	ldr	r0, [pc, #788]	; (80016d0 <ControlClimate+0x388>)
 80013bc:	f7ff fcb0 	bl	8000d20 <AHT20_ReadData_PCA9548A>
    AHT20_ReadData_PCA9548A(&hi2c2, PCA9548A_ADDRESS, CHANNEL_2, &T_ch3,     &H_ch3);     // chamber 3
 80013c0:	1d3a      	adds	r2, r7, #4
 80013c2:	463b      	mov	r3, r7
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	4613      	mov	r3, r2
 80013c8:	2204      	movs	r2, #4
 80013ca:	2170      	movs	r1, #112	; 0x70
 80013cc:	48c0      	ldr	r0, [pc, #768]	; (80016d0 <ControlClimate+0x388>)
 80013ce:	f7ff fca7 	bl	8000d20 <AHT20_ReadData_PCA9548A>

    // 3) CHAMBER 1 CONTROL
    {
        // a) Calculate dew point & window inside surface
        float dewCh1 = CalculateDewPointMagnus(T_ch1, H_ch1);
 80013d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80013d6:	ed97 7a04 	vldr	s14, [r7, #16]
 80013da:	eef0 0a47 	vmov.f32	s1, s14
 80013de:	eeb0 0a67 	vmov.f32	s0, s15
 80013e2:	f7ff ff4d 	bl	8001280 <CalculateDewPointMagnus>
 80013e6:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
        float T_surf_ch1 = CalculateWindowInsideSurface(T_ch1, T_outdoor, CH1_WINDOW_AREA);
 80013ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80013f2:	ed9f 1ab8 	vldr	s2, [pc, #736]	; 80016d4 <ControlClimate+0x38c>
 80013f6:	eef0 0a47 	vmov.f32	s1, s14
 80013fa:	eeb0 0a67 	vmov.f32	s0, s15
 80013fe:	f7ff fedf 	bl	80011c0 <CalculateWindowInsideSurface>
 8001402:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30

        // b) Decide fan & heater states
        // Start with default OFF
        GPIO_PinState fanCh1 = GPIO_PIN_RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        GPIO_PinState heatCh1 = GPIO_PIN_RESET;
 800140c:	2300      	movs	r3, #0
 800140e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

        // (i) Prevent condensation
        if(T_surf_ch1 < dewCh1) {
 8001412:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001416:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800141a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800141e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001422:	d502      	bpl.n	800142a <ControlClimate+0xe2>
            fanCh1 = GPIO_PIN_SET; // fan ON to reduce humidity / mix air
 8001424:	2301      	movs	r3, #1
 8001426:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        }

        // (ii) Temperature checks
        if(T_ch1 < TEMP_MIN) {
 800142a:	edd7 7a05 	vldr	s15, [r7, #20]
 800142e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001432:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143a:	d503      	bpl.n	8001444 <ControlClimate+0xfc>
            heatCh1 = GPIO_PIN_SET; // too cold => heater ON
 800143c:	2301      	movs	r3, #1
 800143e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001442:	e00b      	b.n	800145c <ControlClimate+0x114>
        } else if(T_ch1 > TEMP_MAX) {
 8001444:	edd7 7a05 	vldr	s15, [r7, #20]
 8001448:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800144c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001454:	dd02      	ble.n	800145c <ControlClimate+0x114>
            fanCh1 = GPIO_PIN_SET;  // too hot => fan ON
 8001456:	2301      	movs	r3, #1
 8001458:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        }

        // (iii) Humidity checks
        //   If humidity is above HUMIDITY_MAX => also run fan
        //   If humidity is below HUMIDITY_MIN => prefer fan OFF unless forced for condensation or high temp
        if(H_ch1 > HUMIDITY_MAX) {
 800145c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001460:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 80016d8 <ControlClimate+0x390>
 8001464:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146c:	dd03      	ble.n	8001476 <ControlClimate+0x12e>
            fanCh1 = GPIO_PIN_SET;
 800146e:	2301      	movs	r3, #1
 8001470:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001474:	e01d      	b.n	80014b2 <ControlClimate+0x16a>
        } else if(H_ch1 < HUMIDITY_MIN && T_surf_ch1 >= dewCh1 && T_ch1 <= TEMP_MAX) {
 8001476:	edd7 7a04 	vldr	s15, [r7, #16]
 800147a:	ed9f 7a98 	vldr	s14, [pc, #608]	; 80016dc <ControlClimate+0x394>
 800147e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001486:	d514      	bpl.n	80014b2 <ControlClimate+0x16a>
 8001488:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800148c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001490:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001498:	db0b      	blt.n	80014b2 <ControlClimate+0x16a>
 800149a:	edd7 7a05 	vldr	s15, [r7, #20]
 800149e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80014a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014aa:	d802      	bhi.n	80014b2 <ControlClimate+0x16a>
            // Keep fan OFF to preserve moisture, but only if no condensation or high temp
            fanCh1 = GPIO_PIN_RESET;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        }

        // c) Write final states
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, fanCh1);
 80014b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014b6:	461a      	mov	r2, r3
 80014b8:	2104      	movs	r1, #4
 80014ba:	4889      	ldr	r0, [pc, #548]	; (80016e0 <ControlClimate+0x398>)
 80014bc:	f002 fda4 	bl	8004008 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_5, heatCh1);
 80014c0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80014c4:	461a      	mov	r2, r3
 80014c6:	2120      	movs	r1, #32
 80014c8:	4885      	ldr	r0, [pc, #532]	; (80016e0 <ControlClimate+0x398>)
 80014ca:	f002 fd9d 	bl	8004008 <HAL_GPIO_WritePin>
    }

    // 4) CHAMBER 2 CONTROL
    {
        float dewCh2 = CalculateDewPointMagnus(T_ch2, H_ch2);
 80014ce:	edd7 7a03 	vldr	s15, [r7, #12]
 80014d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80014d6:	eef0 0a47 	vmov.f32	s1, s14
 80014da:	eeb0 0a67 	vmov.f32	s0, s15
 80014de:	f7ff fecf 	bl	8001280 <CalculateDewPointMagnus>
 80014e2:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
        float T_surf_ch2 = CalculateWindowInsideSurface(T_ch2, T_outdoor, CH2_WINDOW_AREA);
 80014e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80014ea:	ed97 7a07 	vldr	s14, [r7, #28]
 80014ee:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 80016e4 <ControlClimate+0x39c>
 80014f2:	eef0 0a47 	vmov.f32	s1, s14
 80014f6:	eeb0 0a67 	vmov.f32	s0, s15
 80014fa:	f7ff fe61 	bl	80011c0 <CalculateWindowInsideSurface>
 80014fe:	ed87 0a0a 	vstr	s0, [r7, #40]	; 0x28

        GPIO_PinState fanCh2 = GPIO_PIN_RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        GPIO_PinState heatCh2 = GPIO_PIN_RESET;
 8001508:	2300      	movs	r3, #0
 800150a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

        if(T_surf_ch2 < dewCh2) { fanCh2 = GPIO_PIN_SET; }
 800150e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001512:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001516:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800151a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151e:	d502      	bpl.n	8001526 <ControlClimate+0x1de>
 8001520:	2301      	movs	r3, #1
 8001522:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

        if(T_ch2 < TEMP_MIN) { heatCh2 = GPIO_PIN_SET; }
 8001526:	edd7 7a03 	vldr	s15, [r7, #12]
 800152a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800152e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001536:	d503      	bpl.n	8001540 <ControlClimate+0x1f8>
 8001538:	2301      	movs	r3, #1
 800153a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800153e:	e00b      	b.n	8001558 <ControlClimate+0x210>
        else if(T_ch2 > TEMP_MAX) { fanCh2 = GPIO_PIN_SET; }
 8001540:	edd7 7a03 	vldr	s15, [r7, #12]
 8001544:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001548:	eef4 7ac7 	vcmpe.f32	s15, s14
 800154c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001550:	dd02      	ble.n	8001558 <ControlClimate+0x210>
 8001552:	2301      	movs	r3, #1
 8001554:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

        if(H_ch2 > HUMIDITY_MAX) { fanCh2 = GPIO_PIN_SET; }
 8001558:	edd7 7a02 	vldr	s15, [r7, #8]
 800155c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80016d8 <ControlClimate+0x390>
 8001560:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001564:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001568:	dd03      	ble.n	8001572 <ControlClimate+0x22a>
 800156a:	2301      	movs	r3, #1
 800156c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8001570:	e01d      	b.n	80015ae <ControlClimate+0x266>
        else if(H_ch2 < HUMIDITY_MIN && T_surf_ch2 >= dewCh2 && T_ch2 <= TEMP_MAX) {
 8001572:	edd7 7a02 	vldr	s15, [r7, #8]
 8001576:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80016dc <ControlClimate+0x394>
 800157a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800157e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001582:	d514      	bpl.n	80015ae <ControlClimate+0x266>
 8001584:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001588:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800158c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001594:	db0b      	blt.n	80015ae <ControlClimate+0x266>
 8001596:	edd7 7a03 	vldr	s15, [r7, #12]
 800159a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800159e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80015a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a6:	d802      	bhi.n	80015ae <ControlClimate+0x266>
            fanCh2 = GPIO_PIN_RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
        }

        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, fanCh2);
 80015ae:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80015b2:	461a      	mov	r2, r3
 80015b4:	2108      	movs	r1, #8
 80015b6:	484a      	ldr	r0, [pc, #296]	; (80016e0 <ControlClimate+0x398>)
 80015b8:	f002 fd26 	bl	8004008 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, heatCh2);
 80015bc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80015c0:	461a      	mov	r2, r3
 80015c2:	2140      	movs	r1, #64	; 0x40
 80015c4:	4846      	ldr	r0, [pc, #280]	; (80016e0 <ControlClimate+0x398>)
 80015c6:	f002 fd1f 	bl	8004008 <HAL_GPIO_WritePin>
    }

    // 5) CHAMBER 3 CONTROL
    {
        float dewCh3 = CalculateDewPointMagnus(T_ch3, H_ch3);
 80015ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80015ce:	ed97 7a00 	vldr	s14, [r7]
 80015d2:	eef0 0a47 	vmov.f32	s1, s14
 80015d6:	eeb0 0a67 	vmov.f32	s0, s15
 80015da:	f7ff fe51 	bl	8001280 <CalculateDewPointMagnus>
 80015de:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
        float T_surf_ch3 = CalculateWindowInsideSurface(T_ch3, T_outdoor, CH3_WINDOW_AREA);
 80015e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80015e6:	ed97 7a07 	vldr	s14, [r7, #28]
 80015ea:	ed9f 1a3a 	vldr	s2, [pc, #232]	; 80016d4 <ControlClimate+0x38c>
 80015ee:	eef0 0a47 	vmov.f32	s1, s14
 80015f2:	eeb0 0a67 	vmov.f32	s0, s15
 80015f6:	f7ff fde3 	bl	80011c0 <CalculateWindowInsideSurface>
 80015fa:	ed87 0a08 	vstr	s0, [r7, #32]

        GPIO_PinState fanCh3 = GPIO_PIN_RESET;
 80015fe:	2300      	movs	r3, #0
 8001600:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        GPIO_PinState heatCh3 = GPIO_PIN_RESET;
 8001604:	2300      	movs	r3, #0
 8001606:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

        if(T_surf_ch3 < dewCh3) { fanCh3 = GPIO_PIN_SET; }
 800160a:	ed97 7a08 	vldr	s14, [r7, #32]
 800160e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001612:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161a:	d502      	bpl.n	8001622 <ControlClimate+0x2da>
 800161c:	2301      	movs	r3, #1
 800161e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

        if(T_ch3 < TEMP_MIN) { heatCh3 = GPIO_PIN_SET; }
 8001622:	edd7 7a01 	vldr	s15, [r7, #4]
 8001626:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800162a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001632:	d503      	bpl.n	800163c <ControlClimate+0x2f4>
 8001634:	2301      	movs	r3, #1
 8001636:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
 800163a:	e00b      	b.n	8001654 <ControlClimate+0x30c>
        else if(T_ch3 > TEMP_MAX) { fanCh3 = GPIO_PIN_SET; }
 800163c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001640:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001644:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800164c:	dd02      	ble.n	8001654 <ControlClimate+0x30c>
 800164e:	2301      	movs	r3, #1
 8001650:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

        if(H_ch3 > HUMIDITY_MAX) { fanCh3 = GPIO_PIN_SET; }
 8001654:	edd7 7a00 	vldr	s15, [r7]
 8001658:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80016d8 <ControlClimate+0x390>
 800165c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001664:	dd03      	ble.n	800166e <ControlClimate+0x326>
 8001666:	2301      	movs	r3, #1
 8001668:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800166c:	e01d      	b.n	80016aa <ControlClimate+0x362>
        else if(H_ch3 < HUMIDITY_MIN && T_surf_ch3 >= dewCh3 && T_ch3 <= TEMP_MAX) {
 800166e:	edd7 7a00 	vldr	s15, [r7]
 8001672:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80016dc <ControlClimate+0x394>
 8001676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800167e:	d514      	bpl.n	80016aa <ControlClimate+0x362>
 8001680:	ed97 7a08 	vldr	s14, [r7, #32]
 8001684:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001688:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800168c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001690:	db0b      	blt.n	80016aa <ControlClimate+0x362>
 8001692:	edd7 7a01 	vldr	s15, [r7, #4]
 8001696:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800169a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a2:	d802      	bhi.n	80016aa <ControlClimate+0x362>
            fanCh3 = GPIO_PIN_RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        }

        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4, fanCh3);
 80016aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80016ae:	461a      	mov	r2, r3
 80016b0:	2110      	movs	r1, #16
 80016b2:	480b      	ldr	r0, [pc, #44]	; (80016e0 <ControlClimate+0x398>)
 80016b4:	f002 fca8 	bl	8004008 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, heatCh3);
 80016b8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80016bc:	461a      	mov	r2, r3
 80016be:	2180      	movs	r1, #128	; 0x80
 80016c0:	4807      	ldr	r0, [pc, #28]	; (80016e0 <ControlClimate+0x398>)
 80016c2:	f002 fca1 	bl	8004008 <HAL_GPIO_WritePin>
    }
}
 80016c6:	bf00      	nop
 80016c8:	3740      	adds	r7, #64	; 0x40
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200004d8 	.word	0x200004d8
 80016d4:	3b49b846 	.word	0x3b49b846
 80016d8:	42aa0000 	.word	0x42aa0000
 80016dc:	42700000 	.word	0x42700000
 80016e0:	40021800 	.word	0x40021800
 80016e4:	3a313598 	.word	0x3a313598

080016e8 <get_error_flag>:
bool checkPending[24] = { false };
uint64_t openTimestamp[24] = { 0 };



bool get_error_flag(){
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
	return error_flag;
 80016ec:	4b03      	ldr	r3, [pc, #12]	; (80016fc <get_error_flag+0x14>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	20000230 	.word	0x20000230

08001700 <get_locker_flag>:
bool get_locker_flag(){
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
	return lockerFlag;
 8001704:	4b03      	ldr	r3, [pc, #12]	; (8001714 <get_locker_flag+0x14>)
 8001706:	781b      	ldrb	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	20000231 	.word	0x20000231

08001718 <setError>:



void setError(SystemErrorState state, uint8_t err_locker){
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	460a      	mov	r2, r1
 8001722:	71fb      	strb	r3, [r7, #7]
 8001724:	4613      	mov	r3, r2
 8001726:	71bb      	strb	r3, [r7, #6]
	errorState = state;
 8001728:	4a07      	ldr	r2, [pc, #28]	; (8001748 <setError+0x30>)
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	7013      	strb	r3, [r2, #0]
    error_locker = err_locker;
 800172e:	4a07      	ldr	r2, [pc, #28]	; (800174c <setError+0x34>)
 8001730:	79bb      	ldrb	r3, [r7, #6]
 8001732:	7013      	strb	r3, [r2, #0]
    error_flag = true;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <setError+0x38>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000000 	.word	0x20000000
 800174c:	2000022f 	.word	0x2000022f
 8001750:	20000230 	.word	0x20000230

08001754 <HandleState>:

// Handle error states
void HandleState() {
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af02      	add	r7, sp, #8
	SystemErrorState state = errorState;
 800175a:	4b5a      	ldr	r3, [pc, #360]	; (80018c4 <HandleState+0x170>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	3b01      	subs	r3, #1
 8001764:	2b06      	cmp	r3, #6
 8001766:	f200 80a5 	bhi.w	80018b4 <HandleState+0x160>
 800176a:	a201      	add	r2, pc, #4	; (adr r2, 8001770 <HandleState+0x1c>)
 800176c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001770:	0800178d 	.word	0x0800178d
 8001774:	080017bd 	.word	0x080017bd
 8001778:	080017ed 	.word	0x080017ed
 800177c:	080017f5 	.word	0x080017f5
 8001780:	08001825 	.word	0x08001825
 8001784:	08001855 	.word	0x08001855
 8001788:	08001885 	.word	0x08001885
        case STATE_JAMMED:
            printf("Case 1: JAMMED\n");
 800178c:	484e      	ldr	r0, [pc, #312]	; (80018c8 <HandleState+0x174>)
 800178e:	f007 fa8d 	bl	8008cac <puts>
            SPI_SendMessage(0xF1, error_locker, 150, 0xFF, 0xFF, 0xFF);
 8001792:	4b4e      	ldr	r3, [pc, #312]	; (80018cc <HandleState+0x178>)
 8001794:	7819      	ldrb	r1, [r3, #0]
 8001796:	23ff      	movs	r3, #255	; 0xff
 8001798:	9301      	str	r3, [sp, #4]
 800179a:	23ff      	movs	r3, #255	; 0xff
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	23ff      	movs	r3, #255	; 0xff
 80017a0:	2296      	movs	r2, #150	; 0x96
 80017a2:	20f1      	movs	r0, #241	; 0xf1
 80017a4:	f000 ffe4 	bl	8002770 <SPI_SendMessage>
            errorState = NO_ERROR;
 80017a8:	4b46      	ldr	r3, [pc, #280]	; (80018c4 <HandleState+0x170>)
 80017aa:	2208      	movs	r2, #8
 80017ac:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 80017ae:	4b47      	ldr	r3, [pc, #284]	; (80018cc <HandleState+0x178>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 80017b4:	4b46      	ldr	r3, [pc, #280]	; (80018d0 <HandleState+0x17c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
            break;
 80017ba:	e07f      	b.n	80018bc <HandleState+0x168>
        case STATE_OPENED:
            printf("Case 2: OPENED\n");
 80017bc:	4845      	ldr	r0, [pc, #276]	; (80018d4 <HandleState+0x180>)
 80017be:	f007 fa75 	bl	8008cac <puts>
            SPI_SendMessage(0xF1, error_locker, 50, 0xFF, 0xFF, 0xFF);
 80017c2:	4b42      	ldr	r3, [pc, #264]	; (80018cc <HandleState+0x178>)
 80017c4:	7819      	ldrb	r1, [r3, #0]
 80017c6:	23ff      	movs	r3, #255	; 0xff
 80017c8:	9301      	str	r3, [sp, #4]
 80017ca:	23ff      	movs	r3, #255	; 0xff
 80017cc:	9300      	str	r3, [sp, #0]
 80017ce:	23ff      	movs	r3, #255	; 0xff
 80017d0:	2232      	movs	r2, #50	; 0x32
 80017d2:	20f1      	movs	r0, #241	; 0xf1
 80017d4:	f000 ffcc 	bl	8002770 <SPI_SendMessage>
            errorState = NO_ERROR;
 80017d8:	4b3a      	ldr	r3, [pc, #232]	; (80018c4 <HandleState+0x170>)
 80017da:	2208      	movs	r2, #8
 80017dc:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 80017de:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <HandleState+0x178>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 80017e4:	4b3a      	ldr	r3, [pc, #232]	; (80018d0 <HandleState+0x17c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
            break;
 80017ea:	e067      	b.n	80018bc <HandleState+0x168>
        case STATE_CLOSED:
            printf("Case 3: CLOSED\n");
 80017ec:	483a      	ldr	r0, [pc, #232]	; (80018d8 <HandleState+0x184>)
 80017ee:	f007 fa5d 	bl	8008cac <puts>
            break;
 80017f2:	e063      	b.n	80018bc <HandleState+0x168>
        case STATE_PRICE_TAG:
            printf("Case 4: PRICE_TAG\n");
 80017f4:	4839      	ldr	r0, [pc, #228]	; (80018dc <HandleState+0x188>)
 80017f6:	f007 fa59 	bl	8008cac <puts>
            SPI_SendMessage(0xF2, error_locker, 50, 0xFF, 0xFF, 0xFF);
 80017fa:	4b34      	ldr	r3, [pc, #208]	; (80018cc <HandleState+0x178>)
 80017fc:	7819      	ldrb	r1, [r3, #0]
 80017fe:	23ff      	movs	r3, #255	; 0xff
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	23ff      	movs	r3, #255	; 0xff
 8001804:	9300      	str	r3, [sp, #0]
 8001806:	23ff      	movs	r3, #255	; 0xff
 8001808:	2232      	movs	r2, #50	; 0x32
 800180a:	20f2      	movs	r0, #242	; 0xf2
 800180c:	f000 ffb0 	bl	8002770 <SPI_SendMessage>
            errorState = NO_ERROR;
 8001810:	4b2c      	ldr	r3, [pc, #176]	; (80018c4 <HandleState+0x170>)
 8001812:	2208      	movs	r2, #8
 8001814:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8001816:	4b2d      	ldr	r3, [pc, #180]	; (80018cc <HandleState+0x178>)
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 800181c:	4b2c      	ldr	r3, [pc, #176]	; (80018d0 <HandleState+0x17c>)
 800181e:	2200      	movs	r2, #0
 8001820:	701a      	strb	r2, [r3, #0]
            break;
 8001822:	e04b      	b.n	80018bc <HandleState+0x168>
        case STATE_LED_DRIVER:
            printf("Case 5: LED_DRIVER\n");
 8001824:	482e      	ldr	r0, [pc, #184]	; (80018e0 <HandleState+0x18c>)
 8001826:	f007 fa41 	bl	8008cac <puts>
            SPI_SendMessage(0xF2, error_locker, 100, 0xFF, 0xFF, 0xFF);
 800182a:	4b28      	ldr	r3, [pc, #160]	; (80018cc <HandleState+0x178>)
 800182c:	7819      	ldrb	r1, [r3, #0]
 800182e:	23ff      	movs	r3, #255	; 0xff
 8001830:	9301      	str	r3, [sp, #4]
 8001832:	23ff      	movs	r3, #255	; 0xff
 8001834:	9300      	str	r3, [sp, #0]
 8001836:	23ff      	movs	r3, #255	; 0xff
 8001838:	2264      	movs	r2, #100	; 0x64
 800183a:	20f2      	movs	r0, #242	; 0xf2
 800183c:	f000 ff98 	bl	8002770 <SPI_SendMessage>
            errorState = NO_ERROR;
 8001840:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <HandleState+0x170>)
 8001842:	2208      	movs	r2, #8
 8001844:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8001846:	4b21      	ldr	r3, [pc, #132]	; (80018cc <HandleState+0x178>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 800184c:	4b20      	ldr	r3, [pc, #128]	; (80018d0 <HandleState+0x17c>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
            break;
 8001852:	e033      	b.n	80018bc <HandleState+0x168>
        case STATE_TEMPERATURE:
            printf("Case 6: TEMPERATURE\n");
 8001854:	4823      	ldr	r0, [pc, #140]	; (80018e4 <HandleState+0x190>)
 8001856:	f007 fa29 	bl	8008cac <puts>
            SPI_SendMessage(0xF3, error_locker, 50, 0xFF, 0xFF, 0xFF);
 800185a:	4b1c      	ldr	r3, [pc, #112]	; (80018cc <HandleState+0x178>)
 800185c:	7819      	ldrb	r1, [r3, #0]
 800185e:	23ff      	movs	r3, #255	; 0xff
 8001860:	9301      	str	r3, [sp, #4]
 8001862:	23ff      	movs	r3, #255	; 0xff
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	23ff      	movs	r3, #255	; 0xff
 8001868:	2232      	movs	r2, #50	; 0x32
 800186a:	20f3      	movs	r0, #243	; 0xf3
 800186c:	f000 ff80 	bl	8002770 <SPI_SendMessage>
            errorState = NO_ERROR;
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <HandleState+0x170>)
 8001872:	2208      	movs	r2, #8
 8001874:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HandleState+0x178>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <HandleState+0x17c>)
 800187e:	2200      	movs	r2, #0
 8001880:	701a      	strb	r2, [r3, #0]
            break;
 8001882:	e01b      	b.n	80018bc <HandleState+0x168>
        case STATE_SENSOR:
            printf("Case 7: SENSOR\n");
 8001884:	4818      	ldr	r0, [pc, #96]	; (80018e8 <HandleState+0x194>)
 8001886:	f007 fa11 	bl	8008cac <puts>
            SPI_SendMessage(0xF3, error_locker, 100, 0xFF, 0xFF, 0xFF);
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HandleState+0x178>)
 800188c:	7819      	ldrb	r1, [r3, #0]
 800188e:	23ff      	movs	r3, #255	; 0xff
 8001890:	9301      	str	r3, [sp, #4]
 8001892:	23ff      	movs	r3, #255	; 0xff
 8001894:	9300      	str	r3, [sp, #0]
 8001896:	23ff      	movs	r3, #255	; 0xff
 8001898:	2264      	movs	r2, #100	; 0x64
 800189a:	20f3      	movs	r0, #243	; 0xf3
 800189c:	f000 ff68 	bl	8002770 <SPI_SendMessage>
            errorState = NO_ERROR;
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <HandleState+0x170>)
 80018a2:	2208      	movs	r2, #8
 80018a4:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HandleState+0x178>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HandleState+0x17c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
            break;
 80018b2:	e003      	b.n	80018bc <HandleState+0x168>
        default:
            printf("Invalid state\n");
 80018b4:	480d      	ldr	r0, [pc, #52]	; (80018ec <HandleState+0x198>)
 80018b6:	f007 f9f9 	bl	8008cac <puts>
            break;
 80018ba:	bf00      	nop
    }
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000000 	.word	0x20000000
 80018c8:	0800c9b8 	.word	0x0800c9b8
 80018cc:	2000022f 	.word	0x2000022f
 80018d0:	20000230 	.word	0x20000230
 80018d4:	0800c9c8 	.word	0x0800c9c8
 80018d8:	0800c9d8 	.word	0x0800c9d8
 80018dc:	0800c9e8 	.word	0x0800c9e8
 80018e0:	0800c9fc 	.word	0x0800c9fc
 80018e4:	0800ca10 	.word	0x0800ca10
 80018e8:	0800ca24 	.word	0x0800ca24
 80018ec:	0800ca34 	.word	0x0800ca34

080018f0 <CheckAllLockersAfterDelay>:

// Check all lockers after delay (5 minutes) to see if they remain open
void CheckAllLockersAfterDelay(void) {
 80018f0:	b5b0      	push	{r4, r5, r7, lr}
 80018f2:	b084      	sub	sp, #16
 80018f4:	af00      	add	r7, sp, #0
    bool anyOpenedOrPending = false;
 80018f6:	2300      	movs	r3, #0
 80018f8:	73fb      	strb	r3, [r7, #15]
    uint32_t currentTime = HAL_GetTick();
 80018fa:	f001 fbe1 	bl	80030c0 <HAL_GetTick>
 80018fe:	6078      	str	r0, [r7, #4]

    for (int i = 0; i < 24; i++) {
 8001900:	2300      	movs	r3, #0
 8001902:	60bb      	str	r3, [r7, #8]
 8001904:	e053      	b.n	80019ae <CheckAllLockersAfterDelay+0xbe>
        // If we had marked a locker for a re-check
        if (checkPending[i]) {
 8001906:	4a2f      	ldr	r2, [pc, #188]	; (80019c4 <CheckAllLockersAfterDelay+0xd4>)
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	4413      	add	r3, r2
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d042      	beq.n	8001998 <CheckAllLockersAfterDelay+0xa8>
            anyOpenedOrPending = true;
 8001912:	2301      	movs	r3, #1
 8001914:	73fb      	strb	r3, [r7, #15]
            // Has 5 minutes passed since we opened it?
            if ((currentTime - openTimestamp[i]) >= LOCKER_CHECK_DELAY) {
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4618      	mov	r0, r3
 800191a:	f04f 0100 	mov.w	r1, #0
 800191e:	4a2a      	ldr	r2, [pc, #168]	; (80019c8 <CheckAllLockersAfterDelay+0xd8>)
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4413      	add	r3, r2
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	1a84      	subs	r4, r0, r2
 800192c:	eb61 0503 	sbc.w	r5, r1, r3
 8001930:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001934:	f04f 0300 	mov.w	r3, #0
 8001938:	42ab      	cmp	r3, r5
 800193a:	bf08      	it	eq
 800193c:	42a2      	cmpeq	r2, r4
 800193e:	d233      	bcs.n	80019a8 <CheckAllLockersAfterDelay+0xb8>
                int status = read_cabinet_status(i + 1);
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	3301      	adds	r3, #1
 8001946:	b2db      	uxtb	r3, r3
 8001948:	4618      	mov	r0, r3
 800194a:	f000 f9e3 	bl	8001d14 <read_cabinet_status>
 800194e:	6038      	str	r0, [r7, #0]
                if (status == 1) {
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d112      	bne.n	800197c <CheckAllLockersAfterDelay+0x8c>
                    errorState = STATE_OPENED;
 8001956:	4b1d      	ldr	r3, [pc, #116]	; (80019cc <CheckAllLockersAfterDelay+0xdc>)
 8001958:	2202      	movs	r2, #2
 800195a:	701a      	strb	r2, [r3, #0]
                    error_locker = i + 1;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	3301      	adds	r3, #1
 8001962:	b2da      	uxtb	r2, r3
 8001964:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <CheckAllLockersAfterDelay+0xe0>)
 8001966:	701a      	strb	r2, [r3, #0]
                    error_flag = true;
 8001968:	4b1a      	ldr	r3, [pc, #104]	; (80019d4 <CheckAllLockersAfterDelay+0xe4>)
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
                    printf("Locker %d is still open after 5 minutes!\n", i + 1);
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	3301      	adds	r3, #1
 8001972:	4619      	mov	r1, r3
 8001974:	4818      	ldr	r0, [pc, #96]	; (80019d8 <CheckAllLockersAfterDelay+0xe8>)
 8001976:	f007 f8fd 	bl	8008b74 <iprintf>
 800197a:	e007      	b.n	800198c <CheckAllLockersAfterDelay+0x9c>
                } else if (status == 0) {
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d104      	bne.n	800198c <CheckAllLockersAfterDelay+0x9c>
                    // It's now closed
                    lockerOpened[i] = false;
 8001982:	4a16      	ldr	r2, [pc, #88]	; (80019dc <CheckAllLockersAfterDelay+0xec>)
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	4413      	add	r3, r2
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]
                }
                checkPending[i] = false;
 800198c:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <CheckAllLockersAfterDelay+0xd4>)
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	4413      	add	r3, r2
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
 8001996:	e007      	b.n	80019a8 <CheckAllLockersAfterDelay+0xb8>
            }
        } else {
            if (lockerOpened[i]) {
 8001998:	4a10      	ldr	r2, [pc, #64]	; (80019dc <CheckAllLockersAfterDelay+0xec>)
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	4413      	add	r3, r2
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <CheckAllLockersAfterDelay+0xb8>
                anyOpenedOrPending = true;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 24; i++) {
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	3301      	adds	r3, #1
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2b17      	cmp	r3, #23
 80019b2:	dda8      	ble.n	8001906 <CheckAllLockersAfterDelay+0x16>
            }
        }
    }
    lockerFlag = anyOpenedOrPending;
 80019b4:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <CheckAllLockersAfterDelay+0xf0>)
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
 80019b8:	7013      	strb	r3, [r2, #0]
}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bdb0      	pop	{r4, r5, r7, pc}
 80019c2:	bf00      	nop
 80019c4:	2000024c 	.word	0x2000024c
 80019c8:	20000268 	.word	0x20000268
 80019cc:	20000000 	.word	0x20000000
 80019d0:	2000022f 	.word	0x2000022f
 80019d4:	20000230 	.word	0x20000230
 80019d8:	0800ca44 	.word	0x0800ca44
 80019dc:	20000234 	.word	0x20000234
 80019e0:	20000231 	.word	0x20000231

080019e4 <led_idx>:
static uint8_t Price_Buffer[2];

static bool rgb_error_sent[LED_COUNT];
static bool price_error_sent[PRICE_COUNT];

static inline uint8_t led_idx(uint16_t addr){return (uint8_t)(addr - LED_BASE_ADDR);}   /* 0 … LED_COUNT‑1 */
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	80fb      	strh	r3, [r7, #6]
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	3b64      	subs	r3, #100	; 0x64
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <price_idx>:
static inline uint8_t price_idx(uint16_t addr){return (uint8_t)(addr - PRICE_BASE_ADDR);} /* 0 … PRICE_COUNT‑1 */
 8001a02:	b480      	push	{r7}
 8001a04:	b083      	sub	sp, #12
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	80fb      	strh	r3, [r7, #6]
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <Send_RGB>:

void I2C_Master_Send_Byte(uint16_t addr, uint8_t val){
    HAL_I2C_Master_Transmit(&hi2c1, addr << 1, &val, 1, 10);
}

void Send_RGB(uint16_t addr, uint8_t r, uint8_t g, uint8_t b, uint8_t mode){
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b087      	sub	sp, #28
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	4604      	mov	r4, r0
 8001a24:	4608      	mov	r0, r1
 8001a26:	4611      	mov	r1, r2
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4623      	mov	r3, r4
 8001a2c:	80fb      	strh	r3, [r7, #6]
 8001a2e:	4603      	mov	r3, r0
 8001a30:	717b      	strb	r3, [r7, #5]
 8001a32:	460b      	mov	r3, r1
 8001a34:	713b      	strb	r3, [r7, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	70fb      	strb	r3, [r7, #3]
    uint8_t idx = led_idx(addr); if(idx >= LED_COUNT) return;
 8001a3a:	88fb      	ldrh	r3, [r7, #6]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ffd1 	bl	80019e4 <led_idx>
 8001a42:	4603      	mov	r3, r0
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
 8001a48:	2b0e      	cmp	r3, #14
 8001a4a:	d833      	bhi.n	8001ab4 <Send_RGB+0x98>
    RGB_Buffer[0] = r; RGB_Buffer[1] = g; RGB_Buffer[2] = b; RGB_Buffer[3] = mode;
 8001a4c:	4a1b      	ldr	r2, [pc, #108]	; (8001abc <Send_RGB+0xa0>)
 8001a4e:	797b      	ldrb	r3, [r7, #5]
 8001a50:	7013      	strb	r3, [r2, #0]
 8001a52:	4a1a      	ldr	r2, [pc, #104]	; (8001abc <Send_RGB+0xa0>)
 8001a54:	793b      	ldrb	r3, [r7, #4]
 8001a56:	7053      	strb	r3, [r2, #1]
 8001a58:	4a18      	ldr	r2, [pc, #96]	; (8001abc <Send_RGB+0xa0>)
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	7093      	strb	r3, [r2, #2]
 8001a5e:	4a17      	ldr	r2, [pc, #92]	; (8001abc <Send_RGB+0xa0>)
 8001a60:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a64:	70d3      	strb	r3, [r2, #3]
    //if(HAL_I2C_Master_Transmit_DMA(&hi2c1, addr << 1, RGB_Buffer, 4) != HAL_OK){
    if(HAL_I2C_Master_Transmit(&hi2c1, addr << 1, RGB_Buffer, 4, 10) != HAL_OK){
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	b299      	uxth	r1, r3
 8001a6c:	230a      	movs	r3, #10
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2304      	movs	r3, #4
 8001a72:	4a12      	ldr	r2, [pc, #72]	; (8001abc <Send_RGB+0xa0>)
 8001a74:	4812      	ldr	r0, [pc, #72]	; (8001ac0 <Send_RGB+0xa4>)
 8001a76:	f002 fbbb 	bl	80041f0 <HAL_I2C_Master_Transmit>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d014      	beq.n	8001aaa <Send_RGB+0x8e>
    	HAL_I2C_DeInit(&hi2c1);
 8001a80:	480f      	ldr	r0, [pc, #60]	; (8001ac0 <Send_RGB+0xa4>)
 8001a82:	f002 fb85 	bl	8004190 <HAL_I2C_DeInit>
    	HAL_I2C_Init(&hi2c1);
 8001a86:	480e      	ldr	r0, [pc, #56]	; (8001ac0 <Send_RGB+0xa4>)
 8001a88:	f002 faf2 	bl	8004070 <HAL_I2C_Init>
        if(rgb_error_sent[idx]){
 8001a8c:	7bfb      	ldrb	r3, [r7, #15]
 8001a8e:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <Send_RGB+0xa8>)
 8001a90:	5cd3      	ldrb	r3, [r2, r3]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00f      	beq.n	8001ab6 <Send_RGB+0x9a>
        	setError(STATE_LED_DRIVER, idx);
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	2005      	movs	r0, #5
 8001a9c:	f7ff fe3c 	bl	8001718 <setError>
        	rgb_error_sent[idx] = false;
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <Send_RGB+0xa8>)
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	54d1      	strb	r1, [r2, r3]
 8001aa8:	e005      	b.n	8001ab6 <Send_RGB+0x9a>
        }
    }else rgb_error_sent[idx] = true;
 8001aaa:	7bfb      	ldrb	r3, [r7, #15]
 8001aac:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <Send_RGB+0xa8>)
 8001aae:	2101      	movs	r1, #1
 8001ab0:	54d1      	strb	r1, [r2, r3]
 8001ab2:	e000      	b.n	8001ab6 <Send_RGB+0x9a>
    uint8_t idx = led_idx(addr); if(idx >= LED_COUNT) return;
 8001ab4:	bf00      	nop
}
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd90      	pop	{r4, r7, pc}
 8001abc:	20000328 	.word	0x20000328
 8001ac0:	2000048c 	.word	0x2000048c
 8001ac4:	20000330 	.word	0x20000330

08001ac8 <Send_Price>:

void Send_Price(uint16_t addr, uint8_t b1, uint8_t b2){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b086      	sub	sp, #24
 8001acc:	af02      	add	r7, sp, #8
 8001ace:	4603      	mov	r3, r0
 8001ad0:	80fb      	strh	r3, [r7, #6]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	717b      	strb	r3, [r7, #5]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	713b      	strb	r3, [r7, #4]
    uint8_t idx = price_idx(addr); if(idx >= PRICE_COUNT) return;
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff ff90 	bl	8001a02 <price_idx>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	73fb      	strb	r3, [r7, #15]
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	2b0e      	cmp	r3, #14
 8001aea:	d82c      	bhi.n	8001b46 <Send_Price+0x7e>
    Price_Buffer[0] = b1; Price_Buffer[1] = b2;
 8001aec:	4a18      	ldr	r2, [pc, #96]	; (8001b50 <Send_Price+0x88>)
 8001aee:	797b      	ldrb	r3, [r7, #5]
 8001af0:	7013      	strb	r3, [r2, #0]
 8001af2:	4a17      	ldr	r2, [pc, #92]	; (8001b50 <Send_Price+0x88>)
 8001af4:	793b      	ldrb	r3, [r7, #4]
 8001af6:	7053      	strb	r3, [r2, #1]
    //if(HAL_I2C_Master_Transmit_DMA(&hi2c1, addr << 1, Price_Buffer, 2) != HAL_OK){
    if(HAL_I2C_Master_Transmit(&hi2c1, addr << 1, Price_Buffer, 2, 10) != HAL_OK){
 8001af8:	88fb      	ldrh	r3, [r7, #6]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	b299      	uxth	r1, r3
 8001afe:	230a      	movs	r3, #10
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	2302      	movs	r3, #2
 8001b04:	4a12      	ldr	r2, [pc, #72]	; (8001b50 <Send_Price+0x88>)
 8001b06:	4813      	ldr	r0, [pc, #76]	; (8001b54 <Send_Price+0x8c>)
 8001b08:	f002 fb72 	bl	80041f0 <HAL_I2C_Master_Transmit>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d014      	beq.n	8001b3c <Send_Price+0x74>
    	HAL_I2C_DeInit(&hi2c1);
 8001b12:	4810      	ldr	r0, [pc, #64]	; (8001b54 <Send_Price+0x8c>)
 8001b14:	f002 fb3c 	bl	8004190 <HAL_I2C_DeInit>
    	HAL_I2C_Init(&hi2c1);
 8001b18:	480e      	ldr	r0, [pc, #56]	; (8001b54 <Send_Price+0x8c>)
 8001b1a:	f002 faa9 	bl	8004070 <HAL_I2C_Init>
        if(price_error_sent[idx]){
 8001b1e:	7bfb      	ldrb	r3, [r7, #15]
 8001b20:	4a0d      	ldr	r2, [pc, #52]	; (8001b58 <Send_Price+0x90>)
 8001b22:	5cd3      	ldrb	r3, [r2, r3]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d00f      	beq.n	8001b48 <Send_Price+0x80>
        	setError(STATE_PRICE_TAG, idx);
 8001b28:	7bfb      	ldrb	r3, [r7, #15]
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	2004      	movs	r0, #4
 8001b2e:	f7ff fdf3 	bl	8001718 <setError>
        	price_error_sent[idx] = false;
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	4a08      	ldr	r2, [pc, #32]	; (8001b58 <Send_Price+0x90>)
 8001b36:	2100      	movs	r1, #0
 8001b38:	54d1      	strb	r1, [r2, r3]
 8001b3a:	e005      	b.n	8001b48 <Send_Price+0x80>
        }
    }else price_error_sent[idx] = true;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	4a06      	ldr	r2, [pc, #24]	; (8001b58 <Send_Price+0x90>)
 8001b40:	2101      	movs	r1, #1
 8001b42:	54d1      	strb	r1, [r2, r3]
 8001b44:	e000      	b.n	8001b48 <Send_Price+0x80>
    uint8_t idx = price_idx(addr); if(idx >= PRICE_COUNT) return;
 8001b46:	bf00      	nop
}
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	2000032c 	.word	0x2000032c
 8001b54:	2000048c 	.word	0x2000048c
 8001b58:	20000340 	.word	0x20000340

08001b5c <calculate_checksum>:
#include "locker.h"

extern UART_HandleTypeDef huart2;

// Function to calculate XOR checksum
uint8_t calculate_checksum(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3) {
 8001b5c:	b490      	push	{r4, r7}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4604      	mov	r4, r0
 8001b64:	4608      	mov	r0, r1
 8001b66:	4611      	mov	r1, r2
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4623      	mov	r3, r4
 8001b6c:	71fb      	strb	r3, [r7, #7]
 8001b6e:	4603      	mov	r3, r0
 8001b70:	71bb      	strb	r3, [r7, #6]
 8001b72:	460b      	mov	r3, r1
 8001b74:	717b      	strb	r3, [r7, #5]
 8001b76:	4613      	mov	r3, r2
 8001b78:	713b      	strb	r3, [r7, #4]
    return byte0 ^ byte1 ^ byte2 ^ byte3;
 8001b7a:	79fa      	ldrb	r2, [r7, #7]
 8001b7c:	79bb      	ldrb	r3, [r7, #6]
 8001b7e:	4053      	eors	r3, r2
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	797b      	ldrb	r3, [r7, #5]
 8001b84:	4053      	eors	r3, r2
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	793b      	ldrb	r3, [r7, #4]
 8001b8a:	4053      	eors	r3, r2
 8001b8c:	b2db      	uxtb	r3, r3
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc90      	pop	{r4, r7}
 8001b96:	4770      	bx	lr

08001b98 <open_cabinet>:

// Function to open a cabinet
void open_cabinet(uint8_t locker_id) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
    if (locker_id < 1 || locker_id > 24) {
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <open_cabinet+0x16>
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	2b18      	cmp	r3, #24
 8001bac:	d903      	bls.n	8001bb6 <open_cabinet+0x1e>
        printf("Invalid locker ID. Must be between 1 and 24.\n");
 8001bae:	484b      	ldr	r0, [pc, #300]	; (8001cdc <open_cabinet+0x144>)
 8001bb0:	f007 f87c 	bl	8008cac <puts>
        return;
 8001bb4:	e08f      	b.n	8001cd6 <open_cabinet+0x13e>
    }

    // Check the cabinet status first
    int status = read_cabinet_status(locker_id);
 8001bb6:	79fb      	ldrb	r3, [r7, #7]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f000 f8ab 	bl	8001d14 <read_cabinet_status>
 8001bbe:	61b8      	str	r0, [r7, #24]
    if (status == 1) {
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d105      	bne.n	8001bd2 <open_cabinet+0x3a>
        printf("Locker %d is already open. No action required.\n", locker_id);
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4845      	ldr	r0, [pc, #276]	; (8001ce0 <open_cabinet+0x148>)
 8001bcc:	f006 ffd2 	bl	8008b74 <iprintf>
        return;
 8001bd0:	e081      	b.n	8001cd6 <open_cabinet+0x13e>
    } else if (status == 0) {
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d179      	bne.n	8001ccc <open_cabinet+0x134>
        uint8_t command[5];
        uint8_t response[5];

        // Build the command to open the cabinet
        command[0] = 0x8A;
 8001bd8:	238a      	movs	r3, #138	; 0x8a
 8001bda:	743b      	strb	r3, [r7, #16]
        command[1] = 0x01;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	747b      	strb	r3, [r7, #17]
        command[2] = locker_id;
 8001be0:	79fb      	ldrb	r3, [r7, #7]
 8001be2:	74bb      	strb	r3, [r7, #18]
        command[3] = 0x11;
 8001be4:	2311      	movs	r3, #17
 8001be6:	74fb      	strb	r3, [r7, #19]
        command[4] = calculate_checksum(command[0], command[1], command[2], command[3]);
 8001be8:	7c38      	ldrb	r0, [r7, #16]
 8001bea:	7c79      	ldrb	r1, [r7, #17]
 8001bec:	7cba      	ldrb	r2, [r7, #18]
 8001bee:	7cfb      	ldrb	r3, [r7, #19]
 8001bf0:	f7ff ffb4 	bl	8001b5c <calculate_checksum>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	753b      	strb	r3, [r7, #20]

        // Transmit the command
        RS485_Transmit(command, sizeof(command));
 8001bf8:	f107 0310 	add.w	r3, r7, #16
 8001bfc:	2105      	movs	r1, #5
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f000 f95a 	bl	8001eb8 <RS485_Transmit>

        // Wait for the response
        if (HAL_UART_Receive(&huart2, response, sizeof(response), 3000) == HAL_OK) {
 8001c04:	f107 0108 	add.w	r1, r7, #8
 8001c08:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001c0c:	2205      	movs	r2, #5
 8001c0e:	4835      	ldr	r0, [pc, #212]	; (8001ce4 <open_cabinet+0x14c>)
 8001c10:	f005 fc53 	bl	80074ba <HAL_UART_Receive>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d154      	bne.n	8001cc4 <open_cabinet+0x12c>
            printf("Response received: ");
 8001c1a:	4833      	ldr	r0, [pc, #204]	; (8001ce8 <open_cabinet+0x150>)
 8001c1c:	f006 ffaa 	bl	8008b74 <iprintf>
            for (int i = 0; i < sizeof(response); i++) {
 8001c20:	2300      	movs	r3, #0
 8001c22:	61fb      	str	r3, [r7, #28]
 8001c24:	e00b      	b.n	8001c3e <open_cabinet+0xa6>
                printf("0x%02X ", response[i]);
 8001c26:	f107 0208 	add.w	r2, r7, #8
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	4619      	mov	r1, r3
 8001c32:	482e      	ldr	r0, [pc, #184]	; (8001cec <open_cabinet+0x154>)
 8001c34:	f006 ff9e 	bl	8008b74 <iprintf>
            for (int i = 0; i < sizeof(response); i++) {
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d9f0      	bls.n	8001c26 <open_cabinet+0x8e>
            }
            printf("\n");
 8001c44:	200a      	movs	r0, #10
 8001c46:	f006 ffad 	bl	8008ba4 <putchar>

            uint8_t expected_checksum = calculate_checksum(response[0], response[1], response[2], response[3]);
 8001c4a:	7a38      	ldrb	r0, [r7, #8]
 8001c4c:	7a79      	ldrb	r1, [r7, #9]
 8001c4e:	7aba      	ldrb	r2, [r7, #10]
 8001c50:	7afb      	ldrb	r3, [r7, #11]
 8001c52:	f7ff ff83 	bl	8001b5c <calculate_checksum>
 8001c56:	4603      	mov	r3, r0
 8001c58:	75fb      	strb	r3, [r7, #23]
            if (response[4] != expected_checksum) {
 8001c5a:	7b3b      	ldrb	r3, [r7, #12]
 8001c5c:	7dfa      	ldrb	r2, [r7, #23]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d003      	beq.n	8001c6a <open_cabinet+0xd2>
                printf("Response checksum error.\n");
 8001c62:	4823      	ldr	r0, [pc, #140]	; (8001cf0 <open_cabinet+0x158>)
 8001c64:	f007 f822 	bl	8008cac <puts>
 8001c68:	e035      	b.n	8001cd6 <open_cabinet+0x13e>
                return;
            }

            if (response[3] == 0x11) {
 8001c6a:	7afb      	ldrb	r3, [r7, #11]
 8001c6c:	2b11      	cmp	r3, #17
 8001c6e:	d11e      	bne.n	8001cae <open_cabinet+0x116>
                printf("Locker %d opened successfully.\n", locker_id);
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	4619      	mov	r1, r3
 8001c74:	481f      	ldr	r0, [pc, #124]	; (8001cf4 <open_cabinet+0x15c>)
 8001c76:	f006 ff7d 	bl	8008b74 <iprintf>
                lockerOpened[locker_id - 1] = true;
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	4a1e      	ldr	r2, [pc, #120]	; (8001cf8 <open_cabinet+0x160>)
 8001c80:	2101      	movs	r1, #1
 8001c82:	54d1      	strb	r1, [r2, r3]
                openTimestamp[locker_id - 1] = HAL_GetTick();
 8001c84:	f001 fa1c 	bl	80030c0 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	1e59      	subs	r1, r3, #1
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	481a      	ldr	r0, [pc, #104]	; (8001cfc <open_cabinet+0x164>)
 8001c94:	00c9      	lsls	r1, r1, #3
 8001c96:	4401      	add	r1, r0
 8001c98:	e9c1 2300 	strd	r2, r3, [r1]
                checkPending[locker_id - 1] = true;
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	4a17      	ldr	r2, [pc, #92]	; (8001d00 <open_cabinet+0x168>)
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	54d1      	strb	r1, [r2, r3]
                lockerFlag = true;
 8001ca6:	4b17      	ldr	r3, [pc, #92]	; (8001d04 <open_cabinet+0x16c>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	701a      	strb	r2, [r3, #0]
 8001cac:	e013      	b.n	8001cd6 <open_cabinet+0x13e>
            } else {
                printf("Unexpected response when opening locker %d.\n", locker_id);
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4815      	ldr	r0, [pc, #84]	; (8001d08 <open_cabinet+0x170>)
 8001cb4:	f006 ff5e 	bl	8008b74 <iprintf>
                setError(STATE_JAMMED, locker_id);
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	2001      	movs	r0, #1
 8001cbe:	f7ff fd2b 	bl	8001718 <setError>
 8001cc2:	e008      	b.n	8001cd6 <open_cabinet+0x13e>
            }
        } else {
            printf("No response received when opening the cabinet.\n");
 8001cc4:	4811      	ldr	r0, [pc, #68]	; (8001d0c <open_cabinet+0x174>)
 8001cc6:	f006 fff1 	bl	8008cac <puts>
 8001cca:	e004      	b.n	8001cd6 <open_cabinet+0x13e>
        }
    } else {
        printf("Failed to determine the status of locker %d. Aborting open operation.\n", locker_id);
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	480f      	ldr	r0, [pc, #60]	; (8001d10 <open_cabinet+0x178>)
 8001cd2:	f006 ff4f 	bl	8008b74 <iprintf>
    }
}
 8001cd6:	3720      	adds	r7, #32
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	0800ca70 	.word	0x0800ca70
 8001ce0:	0800caa0 	.word	0x0800caa0
 8001ce4:	20000588 	.word	0x20000588
 8001ce8:	0800cad0 	.word	0x0800cad0
 8001cec:	0800cae4 	.word	0x0800cae4
 8001cf0:	0800caec 	.word	0x0800caec
 8001cf4:	0800cb08 	.word	0x0800cb08
 8001cf8:	20000234 	.word	0x20000234
 8001cfc:	20000268 	.word	0x20000268
 8001d00:	2000024c 	.word	0x2000024c
 8001d04:	20000231 	.word	0x20000231
 8001d08:	0800cb28 	.word	0x0800cb28
 8001d0c:	0800cb58 	.word	0x0800cb58
 8001d10:	0800cb88 	.word	0x0800cb88

08001d14 <read_cabinet_status>:




// Function to read the cabinet status
int read_cabinet_status(uint8_t locker_id) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
    if (locker_id < 1 || locker_id > 24) {
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <read_cabinet_status+0x16>
 8001d24:	79fb      	ldrb	r3, [r7, #7]
 8001d26:	2b18      	cmp	r3, #24
 8001d28:	d905      	bls.n	8001d36 <read_cabinet_status+0x22>
        printf("Invalid locker ID. Must be between 1 and 24.\n");
 8001d2a:	4848      	ldr	r0, [pc, #288]	; (8001e4c <read_cabinet_status+0x138>)
 8001d2c:	f006 ffbe 	bl	8008cac <puts>
        return -1;
 8001d30:	f04f 33ff 	mov.w	r3, #4294967295
 8001d34:	e086      	b.n	8001e44 <read_cabinet_status+0x130>

    uint8_t command[5];
    uint8_t response[5];

    // Build the command to read the cabinet status
    command[0] = 0x80;
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	753b      	strb	r3, [r7, #20]
    command[1] = 0x01;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	757b      	strb	r3, [r7, #21]
    command[2] = locker_id;
 8001d3e:	79fb      	ldrb	r3, [r7, #7]
 8001d40:	75bb      	strb	r3, [r7, #22]
    command[3] = 0x33;
 8001d42:	2333      	movs	r3, #51	; 0x33
 8001d44:	75fb      	strb	r3, [r7, #23]
    command[4] = calculate_checksum(command[0], command[1], command[2], command[3]);
 8001d46:	7d38      	ldrb	r0, [r7, #20]
 8001d48:	7d79      	ldrb	r1, [r7, #21]
 8001d4a:	7dba      	ldrb	r2, [r7, #22]
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
 8001d4e:	f7ff ff05 	bl	8001b5c <calculate_checksum>
 8001d52:	4603      	mov	r3, r0
 8001d54:	763b      	strb	r3, [r7, #24]

    // Transmit the command
    RS485_Transmit(command, sizeof(command));
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	2105      	movs	r1, #5
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 f8ab 	bl	8001eb8 <RS485_Transmit>

    // Wait for the response
    if (HAL_UART_Receive(&huart2, response, sizeof(response), 1000) == HAL_OK) {
 8001d62:	f107 010c 	add.w	r1, r7, #12
 8001d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d6a:	2205      	movs	r2, #5
 8001d6c:	4838      	ldr	r0, [pc, #224]	; (8001e50 <read_cabinet_status+0x13c>)
 8001d6e:	f005 fba4 	bl	80074ba <HAL_UART_Receive>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d145      	bne.n	8001e04 <read_cabinet_status+0xf0>
        // Print the raw response
        printf("Response received: ");
 8001d78:	4836      	ldr	r0, [pc, #216]	; (8001e54 <read_cabinet_status+0x140>)
 8001d7a:	f006 fefb 	bl	8008b74 <iprintf>
        for (int i = 0; i < sizeof(response); i++) {
 8001d7e:	2300      	movs	r3, #0
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	e00b      	b.n	8001d9c <read_cabinet_status+0x88>
            printf("0x%02X ", response[i]);
 8001d84:	f107 020c 	add.w	r2, r7, #12
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4831      	ldr	r0, [pc, #196]	; (8001e58 <read_cabinet_status+0x144>)
 8001d92:	f006 feef 	bl	8008b74 <iprintf>
        for (int i = 0; i < sizeof(response); i++) {
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	61fb      	str	r3, [r7, #28]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d9f0      	bls.n	8001d84 <read_cabinet_status+0x70>
        }
        printf("\n");
 8001da2:	200a      	movs	r0, #10
 8001da4:	f006 fefe 	bl	8008ba4 <putchar>

        // Validate the response
        uint8_t expected_checksum = calculate_checksum(response[0], response[1], response[2], response[3]);
 8001da8:	7b38      	ldrb	r0, [r7, #12]
 8001daa:	7b79      	ldrb	r1, [r7, #13]
 8001dac:	7bba      	ldrb	r2, [r7, #14]
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
 8001db0:	f7ff fed4 	bl	8001b5c <calculate_checksum>
 8001db4:	4603      	mov	r3, r0
 8001db6:	76fb      	strb	r3, [r7, #27]
        if (response[4] != expected_checksum) {
 8001db8:	7c3b      	ldrb	r3, [r7, #16]
 8001dba:	7efa      	ldrb	r2, [r7, #27]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d005      	beq.n	8001dcc <read_cabinet_status+0xb8>
            printf("Response checksum error.\n");
 8001dc0:	4826      	ldr	r0, [pc, #152]	; (8001e5c <read_cabinet_status+0x148>)
 8001dc2:	f006 ff73 	bl	8008cac <puts>
            return -1;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dca:	e03b      	b.n	8001e44 <read_cabinet_status+0x130>
        }

        // Interpret the response
        if (response[3] == 0x11) {
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	2b11      	cmp	r3, #17
 8001dd0:	d106      	bne.n	8001de0 <read_cabinet_status+0xcc>
            printf("Locker %d is open.\n", locker_id);
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4822      	ldr	r0, [pc, #136]	; (8001e60 <read_cabinet_status+0x14c>)
 8001dd8:	f006 fecc 	bl	8008b74 <iprintf>
            return 1; // Locker is open
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e031      	b.n	8001e44 <read_cabinet_status+0x130>
        } else if (response[3] == 0x00) {
 8001de0:	7bfb      	ldrb	r3, [r7, #15]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d106      	bne.n	8001df4 <read_cabinet_status+0xe0>
            printf("Locker %d is closed.\n", locker_id);
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	4619      	mov	r1, r3
 8001dea:	481e      	ldr	r0, [pc, #120]	; (8001e64 <read_cabinet_status+0x150>)
 8001dec:	f006 fec2 	bl	8008b74 <iprintf>
            return 0; // Locker is closed
 8001df0:	2300      	movs	r3, #0
 8001df2:	e027      	b.n	8001e44 <read_cabinet_status+0x130>
        } else {
            printf("Unexpected response for locker %d.\n", locker_id);
 8001df4:	79fb      	ldrb	r3, [r7, #7]
 8001df6:	4619      	mov	r1, r3
 8001df8:	481b      	ldr	r0, [pc, #108]	; (8001e68 <read_cabinet_status+0x154>)
 8001dfa:	f006 febb 	bl	8008b74 <iprintf>
            return -1; // Error or unexpected
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001e02:	e01f      	b.n	8001e44 <read_cabinet_status+0x130>
        }
    } else {
        printf("No response received when reading the cabinet status.\n");
 8001e04:	4819      	ldr	r0, [pc, #100]	; (8001e6c <read_cabinet_status+0x158>)
 8001e06:	f006 ff51 	bl	8008cac <puts>
        // Build the command to open the cabinet
        command[0] = 0x8A;
 8001e0a:	238a      	movs	r3, #138	; 0x8a
 8001e0c:	753b      	strb	r3, [r7, #20]
        command[1] = 0x01;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	757b      	strb	r3, [r7, #21]
        command[2] = locker_id;
 8001e12:	79fb      	ldrb	r3, [r7, #7]
 8001e14:	75bb      	strb	r3, [r7, #22]
        command[3] = 0x11;
 8001e16:	2311      	movs	r3, #17
 8001e18:	75fb      	strb	r3, [r7, #23]
        command[4] = calculate_checksum(command[0], command[1], command[2], command[3]);
 8001e1a:	7d38      	ldrb	r0, [r7, #20]
 8001e1c:	7d79      	ldrb	r1, [r7, #21]
 8001e1e:	7dba      	ldrb	r2, [r7, #22]
 8001e20:	7dfb      	ldrb	r3, [r7, #23]
 8001e22:	f7ff fe9b 	bl	8001b5c <calculate_checksum>
 8001e26:	4603      	mov	r3, r0
 8001e28:	763b      	strb	r3, [r7, #24]

        // Transmit the command
        RS485_Transmit(command, sizeof(command));
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	2105      	movs	r1, #5
 8001e30:	4618      	mov	r0, r3
 8001e32:	f000 f841 	bl	8001eb8 <RS485_Transmit>

        setError(STATE_JAMMED, locker_id);
 8001e36:	79fb      	ldrb	r3, [r7, #7]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	2001      	movs	r0, #1
 8001e3c:	f7ff fc6c 	bl	8001718 <setError>

        return -1;
 8001e40:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	0800ca70 	.word	0x0800ca70
 8001e50:	20000588 	.word	0x20000588
 8001e54:	0800cad0 	.word	0x0800cad0
 8001e58:	0800cae4 	.word	0x0800cae4
 8001e5c:	0800caec 	.word	0x0800caec
 8001e60:	0800cbd0 	.word	0x0800cbd0
 8001e64:	0800cbe4 	.word	0x0800cbe4
 8001e68:	0800cbfc 	.word	0x0800cbfc
 8001e6c:	0800cc20 	.word	0x0800cc20

08001e70 <RS485_SetTransmitMode>:

// Set RS485 to transmit mode
void RS485_SetTransmitMode(void) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_SET);
 8001e74:	2201      	movs	r2, #1
 8001e76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e7a:	4805      	ldr	r0, [pc, #20]	; (8001e90 <RS485_SetTransmitMode+0x20>)
 8001e7c:	f002 f8c4 	bl	8004008 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8001e80:	2201      	movs	r2, #1
 8001e82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e86:	4802      	ldr	r0, [pc, #8]	; (8001e90 <RS485_SetTransmitMode+0x20>)
 8001e88:	f002 f8be 	bl	8004008 <HAL_GPIO_WritePin>
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40021800 	.word	0x40021800

08001e94 <RS485_SetReceiveMode>:

// Set RS485 to receive mode
void RS485_SetReceiveMode(void) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_RESET);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e9e:	4805      	ldr	r0, [pc, #20]	; (8001eb4 <RS485_SetReceiveMode+0x20>)
 8001ea0:	f002 f8b2 	bl	8004008 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eaa:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <RS485_SetReceiveMode+0x20>)
 8001eac:	f002 f8ac 	bl	8004008 <HAL_GPIO_WritePin>
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40021800 	.word	0x40021800

08001eb8 <RS485_Transmit>:

// Transmit data via RS485
void RS485_Transmit(uint8_t *data, uint16_t size) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	807b      	strh	r3, [r7, #2]
    RS485_SetTransmitMode();
 8001ec4:	f7ff ffd4 	bl	8001e70 <RS485_SetTransmitMode>
    HAL_UART_Transmit(&huart2, data, size, HAL_MAX_DELAY);
 8001ec8:	887a      	ldrh	r2, [r7, #2]
 8001eca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <RS485_Transmit+0x30>)
 8001ed2:	f005 fa5f 	bl	8007394 <HAL_UART_Transmit>
    HAL_Delay(1);
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f001 f8fe 	bl	80030d8 <HAL_Delay>
    RS485_SetReceiveMode();
 8001edc:	f7ff ffda 	bl	8001e94 <RS485_SetReceiveMode>
}
 8001ee0:	bf00      	nop
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20000588 	.word	0x20000588

08001eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ef0:	f001 f895 	bl	800301e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ef4:	f000 f816 	bl	8001f24 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ef8:	f000 fa2c 	bl	8002354 <MX_GPIO_Init>
  MX_DMA_Init();
 8001efc:	f000 f9f0 	bl	80022e0 <MX_DMA_Init>
  MX_SPI1_Init();
 8001f00:	f000 f956 	bl	80021b0 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001f04:	f000 f9bc 	bl	8002280 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001f08:	f000 f892 	bl	8002030 <MX_I2C1_Init>
  MX_I2C4_Init();
 8001f0c:	f000 f910 	bl	8002130 <MX_I2C4_Init>
  MX_I2C2_Init();
 8001f10:	f000 f8ce 	bl	80020b0 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001f14:	f000 f984 	bl	8002220 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  init_application();
 8001f18:	f7fe ffb6 	bl	8000e88 <init_application>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop_application();
 8001f1c:	f7fe ffd8 	bl	8000ed0 <loop_application>
 8001f20:	e7fc      	b.n	8001f1c <main+0x30>
	...

08001f24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b0b8      	sub	sp, #224	; 0xe0
 8001f28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f2a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001f2e:	2234      	movs	r2, #52	; 0x34
 8001f30:	2100      	movs	r1, #0
 8001f32:	4618      	mov	r0, r3
 8001f34:	f005 ffce 	bl	8007ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f38:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f48:	f107 0308 	add.w	r3, r7, #8
 8001f4c:	2290      	movs	r2, #144	; 0x90
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f005 ffbf 	bl	8007ed4 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001f56:	f003 fbb9 	bl	80056cc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5a:	4b32      	ldr	r3, [pc, #200]	; (8002024 <SystemClock_Config+0x100>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	4a31      	ldr	r2, [pc, #196]	; (8002024 <SystemClock_Config+0x100>)
 8001f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
 8001f66:	4b2f      	ldr	r3, [pc, #188]	; (8002024 <SystemClock_Config+0x100>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	607b      	str	r3, [r7, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f72:	4b2d      	ldr	r3, [pc, #180]	; (8002028 <SystemClock_Config+0x104>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f7a:	4a2b      	ldr	r2, [pc, #172]	; (8002028 <SystemClock_Config+0x104>)
 8001f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	4b29      	ldr	r3, [pc, #164]	; (8002028 <SystemClock_Config+0x104>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f8a:	603b      	str	r3, [r7, #0]
 8001f8c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f94:	2301      	movs	r3, #1
 8001f96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f9a:	2310      	movs	r3, #16
 8001f9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001faa:	4618      	mov	r0, r3
 8001fac:	f003 fb9e 	bl	80056ec <HAL_RCC_OscConfig>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001fb6:	f000 fa6f 	bl	8002498 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fba:	230f      	movs	r3, #15
 8001fbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fd8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f003 fe32 	bl	8005c48 <HAL_RCC_ClockConfig>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001fea:	f000 fa55 	bl	8002498 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8001fee:	4b0f      	ldr	r3, [pc, #60]	; (800202c <SystemClock_Config+0x108>)
 8001ff0:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ffe:	2300      	movs	r3, #0
 8002000:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8002002:	2300      	movs	r3, #0
 8002004:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002006:	f107 0308 	add.w	r3, r7, #8
 800200a:	4618      	mov	r0, r3
 800200c:	f003 fff2 	bl	8005ff4 <HAL_RCCEx_PeriphCLKConfig>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8002016:	f000 fa3f 	bl	8002498 <Error_Handler>
  }
}
 800201a:	bf00      	nop
 800201c:	37e0      	adds	r7, #224	; 0xe0
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800
 8002028:	40007000 	.word	0x40007000
 800202c:	0002c180 	.word	0x0002c180

08002030 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002034:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <MX_I2C1_Init+0x74>)
 8002036:	4a1c      	ldr	r2, [pc, #112]	; (80020a8 <MX_I2C1_Init+0x78>)
 8002038:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10107BC0;
 800203a:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <MX_I2C1_Init+0x74>)
 800203c:	4a1b      	ldr	r2, [pc, #108]	; (80020ac <MX_I2C1_Init+0x7c>)
 800203e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002040:	4b18      	ldr	r3, [pc, #96]	; (80020a4 <MX_I2C1_Init+0x74>)
 8002042:	2200      	movs	r2, #0
 8002044:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002046:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <MX_I2C1_Init+0x74>)
 8002048:	2201      	movs	r2, #1
 800204a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <MX_I2C1_Init+0x74>)
 800204e:	2200      	movs	r2, #0
 8002050:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002052:	4b14      	ldr	r3, [pc, #80]	; (80020a4 <MX_I2C1_Init+0x74>)
 8002054:	2200      	movs	r2, #0
 8002056:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <MX_I2C1_Init+0x74>)
 800205a:	2200      	movs	r2, #0
 800205c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <MX_I2C1_Init+0x74>)
 8002060:	2200      	movs	r2, #0
 8002062:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002064:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <MX_I2C1_Init+0x74>)
 8002066:	2200      	movs	r2, #0
 8002068:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800206a:	480e      	ldr	r0, [pc, #56]	; (80020a4 <MX_I2C1_Init+0x74>)
 800206c:	f002 f800 	bl	8004070 <HAL_I2C_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002076:	f000 fa0f 	bl	8002498 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800207a:	2100      	movs	r1, #0
 800207c:	4809      	ldr	r0, [pc, #36]	; (80020a4 <MX_I2C1_Init+0x74>)
 800207e:	f003 fa8d 	bl	800559c <HAL_I2CEx_ConfigAnalogFilter>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002088:	f000 fa06 	bl	8002498 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800208c:	2100      	movs	r1, #0
 800208e:	4805      	ldr	r0, [pc, #20]	; (80020a4 <MX_I2C1_Init+0x74>)
 8002090:	f003 facf 	bl	8005632 <HAL_I2CEx_ConfigDigitalFilter>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800209a:	f000 f9fd 	bl	8002498 <Error_Handler>
  /* USER CODE BEGIN I2C1_Init 2 */
  //__HAL_LINKDMA(&hi2c1, hdmatx, hdma_i2c1_tx);

  /* USER CODE END I2C1_Init 2 */

}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	2000048c 	.word	0x2000048c
 80020a8:	40005400 	.word	0x40005400
 80020ac:	10107bc0 	.word	0x10107bc0

080020b0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80020b4:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <MX_I2C2_Init+0x74>)
 80020b6:	4a1c      	ldr	r2, [pc, #112]	; (8002128 <MX_I2C2_Init+0x78>)
 80020b8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <MX_I2C2_Init+0x74>)
 80020bc:	4a1b      	ldr	r2, [pc, #108]	; (800212c <MX_I2C2_Init+0x7c>)
 80020be:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80020c0:	4b18      	ldr	r3, [pc, #96]	; (8002124 <MX_I2C2_Init+0x74>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020c6:	4b17      	ldr	r3, [pc, #92]	; (8002124 <MX_I2C2_Init+0x74>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020cc:	4b15      	ldr	r3, [pc, #84]	; (8002124 <MX_I2C2_Init+0x74>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <MX_I2C2_Init+0x74>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <MX_I2C2_Init+0x74>)
 80020da:	2200      	movs	r2, #0
 80020dc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <MX_I2C2_Init+0x74>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020e4:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <MX_I2C2_Init+0x74>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80020ea:	480e      	ldr	r0, [pc, #56]	; (8002124 <MX_I2C2_Init+0x74>)
 80020ec:	f001 ffc0 	bl	8004070 <HAL_I2C_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80020f6:	f000 f9cf 	bl	8002498 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020fa:	2100      	movs	r1, #0
 80020fc:	4809      	ldr	r0, [pc, #36]	; (8002124 <MX_I2C2_Init+0x74>)
 80020fe:	f003 fa4d 	bl	800559c <HAL_I2CEx_ConfigAnalogFilter>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002108:	f000 f9c6 	bl	8002498 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800210c:	2100      	movs	r1, #0
 800210e:	4805      	ldr	r0, [pc, #20]	; (8002124 <MX_I2C2_Init+0x74>)
 8002110:	f003 fa8f 	bl	8005632 <HAL_I2CEx_ConfigDigitalFilter>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800211a:	f000 f9bd 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200004d8 	.word	0x200004d8
 8002128:	40005800 	.word	0x40005800
 800212c:	00303d5b 	.word	0x00303d5b

08002130 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8002134:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <MX_I2C4_Init+0x74>)
 8002136:	4a1c      	ldr	r2, [pc, #112]	; (80021a8 <MX_I2C4_Init+0x78>)
 8002138:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00303D5B;
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <MX_I2C4_Init+0x74>)
 800213c:	4a1b      	ldr	r2, [pc, #108]	; (80021ac <MX_I2C4_Init+0x7c>)
 800213e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8002140:	4b18      	ldr	r3, [pc, #96]	; (80021a4 <MX_I2C4_Init+0x74>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002146:	4b17      	ldr	r3, [pc, #92]	; (80021a4 <MX_I2C4_Init+0x74>)
 8002148:	2201      	movs	r2, #1
 800214a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800214c:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <MX_I2C4_Init+0x74>)
 800214e:	2200      	movs	r2, #0
 8002150:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8002152:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <MX_I2C4_Init+0x74>)
 8002154:	2200      	movs	r2, #0
 8002156:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <MX_I2C4_Init+0x74>)
 800215a:	2200      	movs	r2, #0
 800215c:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <MX_I2C4_Init+0x74>)
 8002160:	2200      	movs	r2, #0
 8002162:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <MX_I2C4_Init+0x74>)
 8002166:	2200      	movs	r2, #0
 8002168:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800216a:	480e      	ldr	r0, [pc, #56]	; (80021a4 <MX_I2C4_Init+0x74>)
 800216c:	f001 ff80 	bl	8004070 <HAL_I2C_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8002176:	f000 f98f 	bl	8002498 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800217a:	2100      	movs	r1, #0
 800217c:	4809      	ldr	r0, [pc, #36]	; (80021a4 <MX_I2C4_Init+0x74>)
 800217e:	f003 fa0d 	bl	800559c <HAL_I2CEx_ConfigAnalogFilter>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8002188:	f000 f986 	bl	8002498 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800218c:	2100      	movs	r1, #0
 800218e:	4805      	ldr	r0, [pc, #20]	; (80021a4 <MX_I2C4_Init+0x74>)
 8002190:	f003 fa4f 	bl	8005632 <HAL_I2CEx_ConfigDigitalFilter>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800219a:	f000 f97d 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000035c 	.word	0x2000035c
 80021a8:	40006000 	.word	0x40006000
 80021ac:	00303d5b 	.word	0x00303d5b

080021b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80021b4:	4b18      	ldr	r3, [pc, #96]	; (8002218 <MX_SPI1_Init+0x68>)
 80021b6:	4a19      	ldr	r2, [pc, #100]	; (800221c <MX_SPI1_Init+0x6c>)
 80021b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80021ba:	4b17      	ldr	r3, [pc, #92]	; (8002218 <MX_SPI1_Init+0x68>)
 80021bc:	2200      	movs	r2, #0
 80021be:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021c0:	4b15      	ldr	r3, [pc, #84]	; (8002218 <MX_SPI1_Init+0x68>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021c6:	4b14      	ldr	r3, [pc, #80]	; (8002218 <MX_SPI1_Init+0x68>)
 80021c8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021ce:	4b12      	ldr	r3, [pc, #72]	; (8002218 <MX_SPI1_Init+0x68>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021d4:	4b10      	ldr	r3, [pc, #64]	; (8002218 <MX_SPI1_Init+0x68>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80021da:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <MX_SPI1_Init+0x68>)
 80021dc:	2200      	movs	r2, #0
 80021de:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021e0:	4b0d      	ldr	r3, [pc, #52]	; (8002218 <MX_SPI1_Init+0x68>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021e6:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <MX_SPI1_Init+0x68>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <MX_SPI1_Init+0x68>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <MX_SPI1_Init+0x68>)
 80021f4:	2207      	movs	r2, #7
 80021f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021f8:	4b07      	ldr	r3, [pc, #28]	; (8002218 <MX_SPI1_Init+0x68>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <MX_SPI1_Init+0x68>)
 8002200:	2200      	movs	r2, #0
 8002202:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002204:	4804      	ldr	r0, [pc, #16]	; (8002218 <MX_SPI1_Init+0x68>)
 8002206:	f004 fb1d 	bl	8006844 <HAL_SPI_Init>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 8002210:	f000 f942 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002214:	bf00      	nop
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000524 	.word	0x20000524
 800221c:	40013000 	.word	0x40013000

08002220 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002224:	4b14      	ldr	r3, [pc, #80]	; (8002278 <MX_USART2_UART_Init+0x58>)
 8002226:	4a15      	ldr	r2, [pc, #84]	; (800227c <MX_USART2_UART_Init+0x5c>)
 8002228:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800222a:	4b13      	ldr	r3, [pc, #76]	; (8002278 <MX_USART2_UART_Init+0x58>)
 800222c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002230:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <MX_USART2_UART_Init+0x58>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <MX_USART2_UART_Init+0x58>)
 800223a:	2200      	movs	r2, #0
 800223c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <MX_USART2_UART_Init+0x58>)
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <MX_USART2_UART_Init+0x58>)
 8002246:	220c      	movs	r2, #12
 8002248:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <MX_USART2_UART_Init+0x58>)
 800224c:	2200      	movs	r2, #0
 800224e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <MX_USART2_UART_Init+0x58>)
 8002252:	2200      	movs	r2, #0
 8002254:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <MX_USART2_UART_Init+0x58>)
 8002258:	2200      	movs	r2, #0
 800225a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <MX_USART2_UART_Init+0x58>)
 800225e:	2200      	movs	r2, #0
 8002260:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002262:	4805      	ldr	r0, [pc, #20]	; (8002278 <MX_USART2_UART_Init+0x58>)
 8002264:	f005 f848 	bl	80072f8 <HAL_UART_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800226e:	f000 f913 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000588 	.word	0x20000588
 800227c:	40004400 	.word	0x40004400

08002280 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002284:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <MX_USART3_UART_Init+0x58>)
 8002286:	4a15      	ldr	r2, [pc, #84]	; (80022dc <MX_USART3_UART_Init+0x5c>)
 8002288:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800228a:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <MX_USART3_UART_Init+0x58>)
 800228c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002290:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <MX_USART3_UART_Init+0x58>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002298:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <MX_USART3_UART_Init+0x58>)
 800229a:	2200      	movs	r2, #0
 800229c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800229e:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <MX_USART3_UART_Init+0x58>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <MX_USART3_UART_Init+0x58>)
 80022a6:	220c      	movs	r2, #12
 80022a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022aa:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <MX_USART3_UART_Init+0x58>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b0:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <MX_USART3_UART_Init+0x58>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <MX_USART3_UART_Init+0x58>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <MX_USART3_UART_Init+0x58>)
 80022be:	2200      	movs	r2, #0
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80022c2:	4805      	ldr	r0, [pc, #20]	; (80022d8 <MX_USART3_UART_Init+0x58>)
 80022c4:	f005 f818 	bl	80072f8 <HAL_UART_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80022ce:	f000 f8e3 	bl	8002498 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	200003a8 	.word	0x200003a8
 80022dc:	40004800 	.word	0x40004800

080022e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022e6:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <MX_DMA_Init+0x70>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	4a19      	ldr	r2, [pc, #100]	; (8002350 <MX_DMA_Init+0x70>)
 80022ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022f0:	6313      	str	r3, [r2, #48]	; 0x30
 80022f2:	4b17      	ldr	r3, [pc, #92]	; (8002350 <MX_DMA_Init+0x70>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022fa:	607b      	str	r3, [r7, #4]
 80022fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022fe:	4b14      	ldr	r3, [pc, #80]	; (8002350 <MX_DMA_Init+0x70>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002302:	4a13      	ldr	r2, [pc, #76]	; (8002350 <MX_DMA_Init+0x70>)
 8002304:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002308:	6313      	str	r3, [r2, #48]	; 0x30
 800230a:	4b11      	ldr	r3, [pc, #68]	; (8002350 <MX_DMA_Init+0x70>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002312:	603b      	str	r3, [r7, #0]
 8002314:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002316:	2200      	movs	r2, #0
 8002318:	2100      	movs	r1, #0
 800231a:	2011      	movs	r0, #17
 800231c:	f000 ffff 	bl	800331e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002320:	2011      	movs	r0, #17
 8002322:	f001 f818 	bl	8003356 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002326:	2200      	movs	r2, #0
 8002328:	2100      	movs	r1, #0
 800232a:	2038      	movs	r0, #56	; 0x38
 800232c:	f000 fff7 	bl	800331e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002330:	2038      	movs	r0, #56	; 0x38
 8002332:	f001 f810 	bl	8003356 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002336:	2200      	movs	r2, #0
 8002338:	2100      	movs	r1, #0
 800233a:	203b      	movs	r0, #59	; 0x3b
 800233c:	f000 ffef 	bl	800331e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002340:	203b      	movs	r0, #59	; 0x3b
 8002342:	f001 f808 	bl	8003356 <HAL_NVIC_EnableIRQ>

}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800

08002354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08c      	sub	sp, #48	; 0x30
 8002358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235a:	f107 031c 	add.w	r3, r7, #28
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
 8002368:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800236a:	4b48      	ldr	r3, [pc, #288]	; (800248c <MX_GPIO_Init+0x138>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236e:	4a47      	ldr	r2, [pc, #284]	; (800248c <MX_GPIO_Init+0x138>)
 8002370:	f043 0304 	orr.w	r3, r3, #4
 8002374:	6313      	str	r3, [r2, #48]	; 0x30
 8002376:	4b45      	ldr	r3, [pc, #276]	; (800248c <MX_GPIO_Init+0x138>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	61bb      	str	r3, [r7, #24]
 8002380:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002382:	4b42      	ldr	r3, [pc, #264]	; (800248c <MX_GPIO_Init+0x138>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a41      	ldr	r2, [pc, #260]	; (800248c <MX_GPIO_Init+0x138>)
 8002388:	f043 0320 	orr.w	r3, r3, #32
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b3f      	ldr	r3, [pc, #252]	; (800248c <MX_GPIO_Init+0x138>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0320 	and.w	r3, r3, #32
 8002396:	617b      	str	r3, [r7, #20]
 8002398:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800239a:	4b3c      	ldr	r3, [pc, #240]	; (800248c <MX_GPIO_Init+0x138>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a3b      	ldr	r2, [pc, #236]	; (800248c <MX_GPIO_Init+0x138>)
 80023a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b39      	ldr	r3, [pc, #228]	; (800248c <MX_GPIO_Init+0x138>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b2:	4b36      	ldr	r3, [pc, #216]	; (800248c <MX_GPIO_Init+0x138>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b6:	4a35      	ldr	r2, [pc, #212]	; (800248c <MX_GPIO_Init+0x138>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6313      	str	r3, [r2, #48]	; 0x30
 80023be:	4b33      	ldr	r3, [pc, #204]	; (800248c <MX_GPIO_Init+0x138>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ca:	4b30      	ldr	r3, [pc, #192]	; (800248c <MX_GPIO_Init+0x138>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a2f      	ldr	r2, [pc, #188]	; (800248c <MX_GPIO_Init+0x138>)
 80023d0:	f043 0302 	orr.w	r3, r3, #2
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b2d      	ldr	r3, [pc, #180]	; (800248c <MX_GPIO_Init+0x138>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	60bb      	str	r3, [r7, #8]
 80023e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e2:	4b2a      	ldr	r3, [pc, #168]	; (800248c <MX_GPIO_Init+0x138>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	4a29      	ldr	r2, [pc, #164]	; (800248c <MX_GPIO_Init+0x138>)
 80023e8:	f043 0308 	orr.w	r3, r3, #8
 80023ec:	6313      	str	r3, [r2, #48]	; 0x30
 80023ee:	4b27      	ldr	r3, [pc, #156]	; (800248c <MX_GPIO_Init+0x138>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f003 0308 	and.w	r3, r3, #8
 80023f6:	607b      	str	r3, [r7, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80023fa:	4b24      	ldr	r3, [pc, #144]	; (800248c <MX_GPIO_Init+0x138>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a23      	ldr	r2, [pc, #140]	; (800248c <MX_GPIO_Init+0x138>)
 8002400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b21      	ldr	r3, [pc, #132]	; (800248c <MX_GPIO_Init+0x138>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240e:	603b      	str	r3, [r7, #0]
 8002410:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002412:	2200      	movs	r2, #0
 8002414:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002418:	481d      	ldr	r0, [pc, #116]	; (8002490 <MX_GPIO_Init+0x13c>)
 800241a:	f001 fdf5 	bl	8004008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800241e:	2200      	movs	r2, #0
 8002420:	f642 41fc 	movw	r1, #11516	; 0x2cfc
 8002424:	481b      	ldr	r0, [pc, #108]	; (8002494 <MX_GPIO_Init+0x140>)
 8002426:	f001 fdef 	bl	8004008 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_13, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800242a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800242e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002430:	2301      	movs	r3, #1
 8002432:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002438:	2300      	movs	r3, #0
 800243a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243c:	f107 031c 	add.w	r3, r7, #28
 8002440:	4619      	mov	r1, r3
 8002442:	4813      	ldr	r0, [pc, #76]	; (8002490 <MX_GPIO_Init+0x13c>)
 8002444:	f001 fb28 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 PG4 PG5
                           PG6 PG7 PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002448:	f240 43fc 	movw	r3, #1276	; 0x4fc
 800244c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800244e:	2301      	movs	r3, #1
 8002450:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002452:	2300      	movs	r3, #0
 8002454:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002456:	2300      	movs	r3, #0
 8002458:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800245a:	f107 031c 	add.w	r3, r7, #28
 800245e:	4619      	mov	r1, r3
 8002460:	480c      	ldr	r0, [pc, #48]	; (8002494 <MX_GPIO_Init+0x140>)
 8002462:	f001 fb19 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002466:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800246a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246c:	2301      	movs	r3, #1
 800246e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002470:	2302      	movs	r3, #2
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002474:	2300      	movs	r3, #0
 8002476:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002478:	f107 031c 	add.w	r3, r7, #28
 800247c:	4619      	mov	r1, r3
 800247e:	4805      	ldr	r0, [pc, #20]	; (8002494 <MX_GPIO_Init+0x140>)
 8002480:	f001 fb0a 	bl	8003a98 <HAL_GPIO_Init>

}
 8002484:	bf00      	nop
 8002486:	3730      	adds	r7, #48	; 0x30
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40023800 	.word	0x40023800
 8002490:	40020400 	.word	0x40020400
 8002494:	40021800 	.word	0x40021800

08002498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800249c:	b672      	cpsid	i
}
 800249e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1) {
 80024a0:	e7fe      	b.n	80024a0 <Error_Handler+0x8>
	...

080024a4 <__io_putchar>:

extern UART_HandleTypeDef huart3;


#ifdef __GNUC__
int __io_putchar(int ch) {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80024ac:	1d39      	adds	r1, r7, #4
 80024ae:	f04f 33ff 	mov.w	r3, #4294967295
 80024b2:	2201      	movs	r2, #1
 80024b4:	4803      	ldr	r0, [pc, #12]	; (80024c4 <__io_putchar+0x20>)
 80024b6:	f004 ff6d 	bl	8007394 <HAL_UART_Transmit>
    return ch;
 80024ba:	687b      	ldr	r3, [r7, #4]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	200003a8 	.word	0x200003a8

080024c8 <getSPIFlag>:
static bool send_spi_flag = true;

extern SPI_HandleTypeDef hspi1;


bool getSPIFlag(){
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
	return spi_flag;
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <getSPIFlag+0x14>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	2000034f 	.word	0x2000034f

080024e0 <getSendSPIFlag>:
bool getSendSPIFlag(){
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
	return send_spi_flag;
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <getSendSPIFlag+0x14>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	20000001 	.word	0x20000001

080024f8 <HAL_SPI_TxRxCpltCallback>:


// SPI receive complete callback
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1) {
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a0e      	ldr	r2, [pc, #56]	; (8002540 <HAL_SPI_TxRxCpltCallback+0x48>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d115      	bne.n	8002536 <HAL_SPI_TxRxCpltCallback+0x3e>

    	send_spi_flag = false;
 800250a:	4b0e      	ldr	r3, [pc, #56]	; (8002544 <HAL_SPI_TxRxCpltCallback+0x4c>)
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]
    	if(spi_rx_buffer[0] != 0xFF){
 8002510:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <HAL_SPI_TxRxCpltCallback+0x50>)
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2bff      	cmp	r3, #255	; 0xff
 8002516:	d008      	beq.n	800252a <HAL_SPI_TxRxCpltCallback+0x32>
    		spi_flag = true;
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <HAL_SPI_TxRxCpltCallback+0x54>)
 800251a:	2201      	movs	r2, #1
 800251c:	701a      	strb	r2, [r3, #0]
    		memcpy(rpi_msg, spi_rx_buffer, SPI_BUFFER_SIZE);
 800251e:	4b0c      	ldr	r3, [pc, #48]	; (8002550 <HAL_SPI_TxRxCpltCallback+0x58>)
 8002520:	4a09      	ldr	r2, [pc, #36]	; (8002548 <HAL_SPI_TxRxCpltCallback+0x50>)
 8002522:	6811      	ldr	r1, [r2, #0]
 8002524:	6019      	str	r1, [r3, #0]
 8002526:	8892      	ldrh	r2, [r2, #4]
 8002528:	809a      	strh	r2, [r3, #4]
    	}
        HAL_SPI_TransmitReceive_IT(&hspi1, spi_tx_buffer, spi_rx_buffer, SPI_BUFFER_SIZE);
 800252a:	2306      	movs	r3, #6
 800252c:	4a06      	ldr	r2, [pc, #24]	; (8002548 <HAL_SPI_TxRxCpltCallback+0x50>)
 800252e:	4909      	ldr	r1, [pc, #36]	; (8002554 <HAL_SPI_TxRxCpltCallback+0x5c>)
 8002530:	4809      	ldr	r0, [pc, #36]	; (8002558 <HAL_SPI_TxRxCpltCallback+0x60>)
 8002532:	f004 fa33 	bl	800699c <HAL_SPI_TransmitReceive_IT>


    }
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40013000 	.word	0x40013000
 8002544:	20000001 	.word	0x20000001
 8002548:	200006cc 	.word	0x200006cc
 800254c:	2000034f 	.word	0x2000034f
 8002550:	200006dc 	.word	0x200006dc
 8002554:	200006d4 	.word	0x200006d4
 8002558:	20000524 	.word	0x20000524

0800255c <Process_SPI_Command>:




// Function to handle received SPI data
void Process_SPI_Command(uint8_t *data, uint16_t size) {
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b08b      	sub	sp, #44	; 0x2c
 8002560:	af02      	add	r7, sp, #8
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	460b      	mov	r3, r1
 8002566:	807b      	strh	r3, [r7, #2]
	uint8_t red = 255;
 8002568:	23ff      	movs	r3, #255	; 0xff
 800256a:	74fb      	strb	r3, [r7, #19]
	uint8_t green = 255;
 800256c:	23ff      	movs	r3, #255	; 0xff
 800256e:	74bb      	strb	r3, [r7, #18]
	uint8_t blue = 255;
 8002570:	23ff      	movs	r3, #255	; 0xff
 8002572:	747b      	strb	r3, [r7, #17]
	uint8_t mode = 0xFF;
 8002574:	23ff      	movs	r3, #255	; 0xff
 8002576:	743b      	strb	r3, [r7, #16]

    printf("SPI Data Received: ");
 8002578:	4871      	ldr	r0, [pc, #452]	; (8002740 <Process_SPI_Command+0x1e4>)
 800257a:	f006 fafb 	bl	8008b74 <iprintf>
    for (uint16_t i = 0; i < size; i++) {
 800257e:	2300      	movs	r3, #0
 8002580:	83fb      	strh	r3, [r7, #30]
 8002582:	e00a      	b.n	800259a <Process_SPI_Command+0x3e>
        printf("0x%02X ", data[i]);
 8002584:	8bfb      	ldrh	r3, [r7, #30]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	4413      	add	r3, r2
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4619      	mov	r1, r3
 800258e:	486d      	ldr	r0, [pc, #436]	; (8002744 <Process_SPI_Command+0x1e8>)
 8002590:	f006 faf0 	bl	8008b74 <iprintf>
    for (uint16_t i = 0; i < size; i++) {
 8002594:	8bfb      	ldrh	r3, [r7, #30]
 8002596:	3301      	adds	r3, #1
 8002598:	83fb      	strh	r3, [r7, #30]
 800259a:	8bfa      	ldrh	r2, [r7, #30]
 800259c:	887b      	ldrh	r3, [r7, #2]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d3f0      	bcc.n	8002584 <Process_SPI_Command+0x28>
    }
    printf("\r\n");
 80025a2:	4869      	ldr	r0, [pc, #420]	; (8002748 <Process_SPI_Command+0x1ec>)
 80025a4:	f006 fb82 	bl	8008cac <puts>

    // Example: Handle LED color command (0x01)
    if (data[0] == 0x01) {
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d145      	bne.n	800263c <Process_SPI_Command+0xe0>
        uint8_t locker_id = data[1];
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	785b      	ldrb	r3, [r3, #1]
 80025b4:	73fb      	strb	r3, [r7, #15]
        red = data[2];
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	789b      	ldrb	r3, [r3, #2]
 80025ba:	74fb      	strb	r3, [r7, #19]
        green = data[3];
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	78db      	ldrb	r3, [r3, #3]
 80025c0:	74bb      	strb	r3, [r7, #18]
        blue = data[4];
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	791b      	ldrb	r3, [r3, #4]
 80025c6:	747b      	strb	r3, [r7, #17]
        mode = data[5];
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	795b      	ldrb	r3, [r3, #5]
 80025cc:	743b      	strb	r3, [r7, #16]

        if(locker_id == 255) {
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	2bff      	cmp	r3, #255	; 0xff
 80025d2:	d11e      	bne.n	8002612 <Process_SPI_Command+0xb6>
        	//HAL_Delay(1);
            printf("Set all LED to Color: R=%d, G=%d, B=%d\r\n", red, green, blue);
 80025d4:	7cf9      	ldrb	r1, [r7, #19]
 80025d6:	7cba      	ldrb	r2, [r7, #18]
 80025d8:	7c7b      	ldrb	r3, [r7, #17]
 80025da:	485c      	ldr	r0, [pc, #368]	; (800274c <Process_SPI_Command+0x1f0>)
 80025dc:	f006 faca 	bl	8008b74 <iprintf>
            for(int i = 1; i <= 14; i++) {
 80025e0:	2301      	movs	r3, #1
 80025e2:	61bb      	str	r3, [r7, #24]
 80025e4:	e011      	b.n	800260a <Process_SPI_Command+0xae>
            	HAL_Delay(1);
 80025e6:	2001      	movs	r0, #1
 80025e8:	f000 fd76 	bl	80030d8 <HAL_Delay>
                Send_RGB(i + 100, red, green, blue, mode);
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	3364      	adds	r3, #100	; 0x64
 80025f2:	b298      	uxth	r0, r3
 80025f4:	7c7c      	ldrb	r4, [r7, #17]
 80025f6:	7cba      	ldrb	r2, [r7, #18]
 80025f8:	7cf9      	ldrb	r1, [r7, #19]
 80025fa:	7c3b      	ldrb	r3, [r7, #16]
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	4623      	mov	r3, r4
 8002600:	f7ff fa0c 	bl	8001a1c <Send_RGB>
            for(int i = 1; i <= 14; i++) {
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	3301      	adds	r3, #1
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b0e      	cmp	r3, #14
 800260e:	ddea      	ble.n	80025e6 <Process_SPI_Command+0x8a>
 8002610:	e014      	b.n	800263c <Process_SPI_Command+0xe0>
                //HAL_Delay(10);

            }
        } else {
            Send_RGB(locker_id + 100, red, green, blue, mode);
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	b29b      	uxth	r3, r3
 8002616:	3364      	adds	r3, #100	; 0x64
 8002618:	b298      	uxth	r0, r3
 800261a:	7c7c      	ldrb	r4, [r7, #17]
 800261c:	7cba      	ldrb	r2, [r7, #18]
 800261e:	7cf9      	ldrb	r1, [r7, #19]
 8002620:	7c3b      	ldrb	r3, [r7, #16]
 8002622:	9300      	str	r3, [sp, #0]
 8002624:	4623      	mov	r3, r4
 8002626:	f7ff f9f9 	bl	8001a1c <Send_RGB>
            printf("Set LED Color: Locker %d, R=%d, G=%d, B=%d\r\n", locker_id, red, green, blue);
 800262a:	7bf9      	ldrb	r1, [r7, #15]
 800262c:	7cfa      	ldrb	r2, [r7, #19]
 800262e:	7cb8      	ldrb	r0, [r7, #18]
 8002630:	7c7b      	ldrb	r3, [r7, #17]
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	4603      	mov	r3, r0
 8002636:	4846      	ldr	r0, [pc, #280]	; (8002750 <Process_SPI_Command+0x1f4>)
 8002638:	f006 fa9c 	bl	8008b74 <iprintf>
        }
    }

    // Example: Handle price command (0x02)
    if (data[0] == 0x02) {
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b02      	cmp	r3, #2
 8002642:	d134      	bne.n	80026ae <Process_SPI_Command+0x152>
        uint8_t  locker_id = data[1];
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	785b      	ldrb	r3, [r3, #1]
 8002648:	73bb      	strb	r3, [r7, #14]
        uint16_t price     = (data[2] << 8) | data[3];
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	3302      	adds	r3, #2
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	021b      	lsls	r3, r3, #8
 8002652:	b21a      	sxth	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3303      	adds	r3, #3
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	b21b      	sxth	r3, r3
 800265c:	4313      	orrs	r3, r2
 800265e:	b21b      	sxth	r3, r3
 8002660:	81bb      	strh	r3, [r7, #12]
        printf("Set Price: Locker %d, Price = %d EUR\r\n", locker_id, price);
 8002662:	7bbb      	ldrb	r3, [r7, #14]
 8002664:	89ba      	ldrh	r2, [r7, #12]
 8002666:	4619      	mov	r1, r3
 8002668:	483a      	ldr	r0, [pc, #232]	; (8002754 <Process_SPI_Command+0x1f8>)
 800266a:	f006 fa83 	bl	8008b74 <iprintf>
        /* Zero is a special case: send 10 first, then 0                       *
         * 10 = 0x000A  → high-byte 0, low-byte 10 (decimal)                   */
        if (price == 0) {
 800266e:	89bb      	ldrh	r3, [r7, #12]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d111      	bne.n	8002698 <Process_SPI_Command+0x13c>
            Send_Price(locker_id, 0x00, 0x0A);       // send 10
 8002674:	7bbb      	ldrb	r3, [r7, #14]
 8002676:	b29b      	uxth	r3, r3
 8002678:	220a      	movs	r2, #10
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fa23 	bl	8001ac8 <Send_Price>
            HAL_Delay(10);
 8002682:	200a      	movs	r0, #10
 8002684:	f000 fd28 	bl	80030d8 <HAL_Delay>
            Send_Price(locker_id, 0x00, 0x00);       // now send 0
 8002688:	7bbb      	ldrb	r3, [r7, #14]
 800268a:	b29b      	uxth	r3, r3
 800268c:	2200      	movs	r2, #0
 800268e:	2100      	movs	r1, #0
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fa19 	bl	8001ac8 <Send_Price>
 8002696:	e00a      	b.n	80026ae <Process_SPI_Command+0x152>
        } else { Send_Price(locker_id, data[2], data[3]); }
 8002698:	7bbb      	ldrb	r3, [r7, #14]
 800269a:	b298      	uxth	r0, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3302      	adds	r3, #2
 80026a0:	7819      	ldrb	r1, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	3303      	adds	r3, #3
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	f7ff fa0d 	bl	8001ac8 <Send_Price>
    }

    // Example: Handle unlock command (0x03)
    if (data[0] == 0x03) {
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b03      	cmp	r3, #3
 80026b4:	d116      	bne.n	80026e4 <Process_SPI_Command+0x188>
        uint8_t locker_id = data[1];
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	785b      	ldrb	r3, [r3, #1]
 80026ba:	72fb      	strb	r3, [r7, #11]
        printf("Unlock: Locker %d\r\n", locker_id);
 80026bc:	7afb      	ldrb	r3, [r7, #11]
 80026be:	4619      	mov	r1, r3
 80026c0:	4825      	ldr	r0, [pc, #148]	; (8002758 <Process_SPI_Command+0x1fc>)
 80026c2:	f006 fa57 	bl	8008b74 <iprintf>
        Send_RGB(locker_id + 100, 0, 0, 0, 0);
 80026c6:	7afb      	ldrb	r3, [r7, #11]
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3364      	adds	r3, #100	; 0x64
 80026cc:	b298      	uxth	r0, r3
 80026ce:	2300      	movs	r3, #0
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	2300      	movs	r3, #0
 80026d4:	2200      	movs	r2, #0
 80026d6:	2100      	movs	r1, #0
 80026d8:	f7ff f9a0 	bl	8001a1c <Send_RGB>
        open_cabinet(locker_id);
 80026dc:	7afb      	ldrb	r3, [r7, #11]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff fa5a 	bl	8001b98 <open_cabinet>

    }

    if (data[0] == 0x04) {
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b04      	cmp	r3, #4
 80026ea:	d10c      	bne.n	8002706 <Process_SPI_Command+0x1aa>
    	fanMode = data[1];
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	785a      	ldrb	r2, [r3, #1]
 80026f0:	4b1a      	ldr	r3, [pc, #104]	; (800275c <Process_SPI_Command+0x200>)
 80026f2:	701a      	strb	r2, [r3, #0]
        printf("Mode: %d\r\n", fanMode);
 80026f4:	4b19      	ldr	r3, [pc, #100]	; (800275c <Process_SPI_Command+0x200>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	4619      	mov	r1, r3
 80026fa:	4819      	ldr	r0, [pc, #100]	; (8002760 <Process_SPI_Command+0x204>)
 80026fc:	f006 fa3a 	bl	8008b74 <iprintf>
        setClimateFlag(true);
 8002700:	2001      	movs	r0, #1
 8002702:	f7fe fca7 	bl	8001054 <setClimateFlag>


    }

    if (data[0] == 0x00) {
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10e      	bne.n	800272c <Process_SPI_Command+0x1d0>
        for (int i = 0; i < size; i++) {
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	e007      	b.n	8002724 <Process_SPI_Command+0x1c8>
            spi_tx_buffer[i] = 0x00;
 8002714:	4a13      	ldr	r2, [pc, #76]	; (8002764 <Process_SPI_Command+0x208>)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	4413      	add	r3, r2
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < size; i++) {
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	3301      	adds	r3, #1
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	887b      	ldrh	r3, [r7, #2]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	429a      	cmp	r2, r3
 800272a:	dbf3      	blt.n	8002714 <Process_SPI_Command+0x1b8>
        }
    }
    send_spi_flag = true;
 800272c:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <Process_SPI_Command+0x20c>)
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]
    spi_flag = false;
 8002732:	4b0e      	ldr	r3, [pc, #56]	; (800276c <Process_SPI_Command+0x210>)
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]


}
 8002738:	bf00      	nop
 800273a:	3724      	adds	r7, #36	; 0x24
 800273c:	46bd      	mov	sp, r7
 800273e:	bd90      	pop	{r4, r7, pc}
 8002740:	0800cc58 	.word	0x0800cc58
 8002744:	0800cc6c 	.word	0x0800cc6c
 8002748:	0800cc74 	.word	0x0800cc74
 800274c:	0800cc78 	.word	0x0800cc78
 8002750:	0800cca4 	.word	0x0800cca4
 8002754:	0800ccd4 	.word	0x0800ccd4
 8002758:	0800ccfc 	.word	0x0800ccfc
 800275c:	2000022c 	.word	0x2000022c
 8002760:	0800cd10 	.word	0x0800cd10
 8002764:	200006d4 	.word	0x200006d4
 8002768:	20000001 	.word	0x20000001
 800276c:	2000034f 	.word	0x2000034f

08002770 <SPI_SendMessage>:

// Send a message over SPI to the master
void SPI_SendMessage(uint8_t command, uint8_t locker_id, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4) {
 8002770:	b590      	push	{r4, r7, lr}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4604      	mov	r4, r0
 8002778:	4608      	mov	r0, r1
 800277a:	4611      	mov	r1, r2
 800277c:	461a      	mov	r2, r3
 800277e:	4623      	mov	r3, r4
 8002780:	71fb      	strb	r3, [r7, #7]
 8002782:	4603      	mov	r3, r0
 8002784:	71bb      	strb	r3, [r7, #6]
 8002786:	460b      	mov	r3, r1
 8002788:	717b      	strb	r3, [r7, #5]
 800278a:	4613      	mov	r3, r2
 800278c:	713b      	strb	r3, [r7, #4]
	//printf("1\r\n");
	send_spi_flag = false;
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <SPI_SendMessage+0x5c>)
 8002790:	2200      	movs	r2, #0
 8002792:	701a      	strb	r2, [r3, #0]
    spi_tx_buffer[0] = command;
 8002794:	4a0e      	ldr	r2, [pc, #56]	; (80027d0 <SPI_SendMessage+0x60>)
 8002796:	79fb      	ldrb	r3, [r7, #7]
 8002798:	7013      	strb	r3, [r2, #0]
    spi_tx_buffer[1] = locker_id;
 800279a:	4a0d      	ldr	r2, [pc, #52]	; (80027d0 <SPI_SendMessage+0x60>)
 800279c:	79bb      	ldrb	r3, [r7, #6]
 800279e:	7053      	strb	r3, [r2, #1]
    spi_tx_buffer[2] = data1;
 80027a0:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <SPI_SendMessage+0x60>)
 80027a2:	797b      	ldrb	r3, [r7, #5]
 80027a4:	7093      	strb	r3, [r2, #2]
    spi_tx_buffer[3] = data2;
 80027a6:	4a0a      	ldr	r2, [pc, #40]	; (80027d0 <SPI_SendMessage+0x60>)
 80027a8:	793b      	ldrb	r3, [r7, #4]
 80027aa:	70d3      	strb	r3, [r2, #3]
    spi_tx_buffer[4] = data3;
 80027ac:	4a08      	ldr	r2, [pc, #32]	; (80027d0 <SPI_SendMessage+0x60>)
 80027ae:	7e3b      	ldrb	r3, [r7, #24]
 80027b0:	7113      	strb	r3, [r2, #4]
    spi_tx_buffer[5] = data4;
 80027b2:	4a07      	ldr	r2, [pc, #28]	; (80027d0 <SPI_SendMessage+0x60>)
 80027b4:	7f3b      	ldrb	r3, [r7, #28]
 80027b6:	7153      	strb	r3, [r2, #5]

    HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_10);
 80027b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027bc:	4805      	ldr	r0, [pc, #20]	; (80027d4 <SPI_SendMessage+0x64>)
 80027be:	f001 fc3c 	bl	800403a <HAL_GPIO_TogglePin>

}
 80027c2:	bf00      	nop
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd90      	pop	{r4, r7, pc}
 80027ca:	bf00      	nop
 80027cc:	20000001 	.word	0x20000001
 80027d0:	200006d4 	.word	0x200006d4
 80027d4:	40021800 	.word	0x40021800

080027d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80027de:	4b0f      	ldr	r3, [pc, #60]	; (800281c <HAL_MspInit+0x44>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	4a0e      	ldr	r2, [pc, #56]	; (800281c <HAL_MspInit+0x44>)
 80027e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ea:	4b0c      	ldr	r3, [pc, #48]	; (800281c <HAL_MspInit+0x44>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f2:	607b      	str	r3, [r7, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_MspInit+0x44>)
 80027f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fa:	4a08      	ldr	r2, [pc, #32]	; (800281c <HAL_MspInit+0x44>)
 80027fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002800:	6453      	str	r3, [r2, #68]	; 0x44
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_MspInit+0x44>)
 8002804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280a:	603b      	str	r3, [r7, #0]
 800280c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800

08002820 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08e      	sub	sp, #56	; 0x38
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a6d      	ldr	r2, [pc, #436]	; (80029f4 <HAL_I2C_MspInit+0x1d4>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d167      	bne.n	8002912 <HAL_I2C_MspInit+0xf2>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002842:	4b6d      	ldr	r3, [pc, #436]	; (80029f8 <HAL_I2C_MspInit+0x1d8>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	4a6c      	ldr	r2, [pc, #432]	; (80029f8 <HAL_I2C_MspInit+0x1d8>)
 8002848:	f043 0302 	orr.w	r3, r3, #2
 800284c:	6313      	str	r3, [r2, #48]	; 0x30
 800284e:	4b6a      	ldr	r3, [pc, #424]	; (80029f8 <HAL_I2C_MspInit+0x1d8>)
 8002850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	623b      	str	r3, [r7, #32]
 8002858:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800285a:	23c0      	movs	r3, #192	; 0xc0
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800285e:	2312      	movs	r3, #18
 8002860:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002862:	2301      	movs	r3, #1
 8002864:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002866:	2300      	movs	r3, #0
 8002868:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800286a:	2304      	movs	r3, #4
 800286c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800286e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002872:	4619      	mov	r1, r3
 8002874:	4861      	ldr	r0, [pc, #388]	; (80029fc <HAL_I2C_MspInit+0x1dc>)
 8002876:	f001 f90f 	bl	8003a98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800287a:	4b5f      	ldr	r3, [pc, #380]	; (80029f8 <HAL_I2C_MspInit+0x1d8>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a5e      	ldr	r2, [pc, #376]	; (80029f8 <HAL_I2C_MspInit+0x1d8>)
 8002880:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b5c      	ldr	r3, [pc, #368]	; (80029f8 <HAL_I2C_MspInit+0x1d8>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800288e:	61fb      	str	r3, [r7, #28]
 8002890:	69fb      	ldr	r3, [r7, #28]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002892:	4b5b      	ldr	r3, [pc, #364]	; (8002a00 <HAL_I2C_MspInit+0x1e0>)
 8002894:	4a5b      	ldr	r2, [pc, #364]	; (8002a04 <HAL_I2C_MspInit+0x1e4>)
 8002896:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002898:	4b59      	ldr	r3, [pc, #356]	; (8002a00 <HAL_I2C_MspInit+0x1e0>)
 800289a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800289e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028a0:	4b57      	ldr	r3, [pc, #348]	; (8002a00 <HAL_I2C_MspInit+0x1e0>)
 80028a2:	2240      	movs	r2, #64	; 0x40
 80028a4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028a6:	4b56      	ldr	r3, [pc, #344]	; (8002a00 <HAL_I2C_MspInit+0x1e0>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028ac:	4b54      	ldr	r3, [pc, #336]	; (8002a00 <HAL_I2C_MspInit+0x1e0>)
 80028ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028b2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028b4:	4b52      	ldr	r3, [pc, #328]	; (8002a00 <HAL_I2C_MspInit+0x1e0>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028ba:	4b51      	ldr	r3, [pc, #324]	; (8002a00 <HAL_I2C_MspInit+0x1e0>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80028c0:	4b4f      	ldr	r3, [pc, #316]	; (8002a00 <HAL_I2C_MspInit+0x1e0>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80028c6:	4b4e      	ldr	r3, [pc, #312]	; (8002a00 <HAL_I2C_MspInit+0x1e0>)
 80028c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028cc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ce:	4b4c      	ldr	r3, [pc, #304]	; (8002a00 <HAL_I2C_MspInit+0x1e0>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80028d4:	484a      	ldr	r0, [pc, #296]	; (8002a00 <HAL_I2C_MspInit+0x1e0>)
 80028d6:	f000 fd67 	bl	80033a8 <HAL_DMA_Init>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <HAL_I2C_MspInit+0xc4>
    {
      Error_Handler();
 80028e0:	f7ff fdda 	bl	8002498 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a46      	ldr	r2, [pc, #280]	; (8002a00 <HAL_I2C_MspInit+0x1e0>)
 80028e8:	639a      	str	r2, [r3, #56]	; 0x38
 80028ea:	4a45      	ldr	r2, [pc, #276]	; (8002a00 <HAL_I2C_MspInit+0x1e0>)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80028f0:	2200      	movs	r2, #0
 80028f2:	2100      	movs	r1, #0
 80028f4:	201f      	movs	r0, #31
 80028f6:	f000 fd12 	bl	800331e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80028fa:	201f      	movs	r0, #31
 80028fc:	f000 fd2b 	bl	8003356 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002900:	2200      	movs	r2, #0
 8002902:	2100      	movs	r1, #0
 8002904:	2020      	movs	r0, #32
 8002906:	f000 fd0a 	bl	800331e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800290a:	2020      	movs	r0, #32
 800290c:	f000 fd23 	bl	8003356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8002910:	e06b      	b.n	80029ea <HAL_I2C_MspInit+0x1ca>
  else if(hi2c->Instance==I2C2)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a3c      	ldr	r2, [pc, #240]	; (8002a08 <HAL_I2C_MspInit+0x1e8>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d138      	bne.n	800298e <HAL_I2C_MspInit+0x16e>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800291c:	4b36      	ldr	r3, [pc, #216]	; (80029f8 <HAL_I2C_MspInit+0x1d8>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	4a35      	ldr	r2, [pc, #212]	; (80029f8 <HAL_I2C_MspInit+0x1d8>)
 8002922:	f043 0320 	orr.w	r3, r3, #32
 8002926:	6313      	str	r3, [r2, #48]	; 0x30
 8002928:	4b33      	ldr	r3, [pc, #204]	; (80029f8 <HAL_I2C_MspInit+0x1d8>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	f003 0320 	and.w	r3, r3, #32
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002934:	2303      	movs	r3, #3
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002938:	2312      	movs	r3, #18
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800293c:	2301      	movs	r3, #1
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002940:	2302      	movs	r3, #2
 8002942:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002944:	2304      	movs	r3, #4
 8002946:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002948:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800294c:	4619      	mov	r1, r3
 800294e:	482f      	ldr	r0, [pc, #188]	; (8002a0c <HAL_I2C_MspInit+0x1ec>)
 8002950:	f001 f8a2 	bl	8003a98 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002954:	4b28      	ldr	r3, [pc, #160]	; (80029f8 <HAL_I2C_MspInit+0x1d8>)
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	4a27      	ldr	r2, [pc, #156]	; (80029f8 <HAL_I2C_MspInit+0x1d8>)
 800295a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800295e:	6413      	str	r3, [r2, #64]	; 0x40
 8002960:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <HAL_I2C_MspInit+0x1d8>)
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 0, 0);
 800296c:	2200      	movs	r2, #0
 800296e:	2100      	movs	r1, #0
 8002970:	2021      	movs	r0, #33	; 0x21
 8002972:	f000 fcd4 	bl	800331e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002976:	2021      	movs	r0, #33	; 0x21
 8002978:	f000 fced 	bl	8003356 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 800297c:	2200      	movs	r2, #0
 800297e:	2100      	movs	r1, #0
 8002980:	2022      	movs	r0, #34	; 0x22
 8002982:	f000 fccc 	bl	800331e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8002986:	2022      	movs	r0, #34	; 0x22
 8002988:	f000 fce5 	bl	8003356 <HAL_NVIC_EnableIRQ>
}
 800298c:	e02d      	b.n	80029ea <HAL_I2C_MspInit+0x1ca>
  else if(hi2c->Instance==I2C4)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1f      	ldr	r2, [pc, #124]	; (8002a10 <HAL_I2C_MspInit+0x1f0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d128      	bne.n	80029ea <HAL_I2C_MspInit+0x1ca>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002998:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <HAL_I2C_MspInit+0x1d8>)
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	4a16      	ldr	r2, [pc, #88]	; (80029f8 <HAL_I2C_MspInit+0x1d8>)
 800299e:	f043 0320 	orr.w	r3, r3, #32
 80029a2:	6313      	str	r3, [r2, #48]	; 0x30
 80029a4:	4b14      	ldr	r3, [pc, #80]	; (80029f8 <HAL_I2C_MspInit+0x1d8>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	f003 0320 	and.w	r3, r3, #32
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80029b0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029b6:	2312      	movs	r3, #18
 80029b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ba:	2301      	movs	r3, #1
 80029bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029be:	2303      	movs	r3, #3
 80029c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80029c2:	2304      	movs	r3, #4
 80029c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ca:	4619      	mov	r1, r3
 80029cc:	480f      	ldr	r0, [pc, #60]	; (8002a0c <HAL_I2C_MspInit+0x1ec>)
 80029ce:	f001 f863 	bl	8003a98 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_I2C_MspInit+0x1d8>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	4a08      	ldr	r2, [pc, #32]	; (80029f8 <HAL_I2C_MspInit+0x1d8>)
 80029d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029dc:	6413      	str	r3, [r2, #64]	; 0x40
 80029de:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_I2C_MspInit+0x1d8>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
}
 80029ea:	bf00      	nop
 80029ec:	3738      	adds	r7, #56	; 0x38
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40005400 	.word	0x40005400
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40020400 	.word	0x40020400
 8002a00:	2000042c 	.word	0x2000042c
 8002a04:	400260a0 	.word	0x400260a0
 8002a08:	40005800 	.word	0x40005800
 8002a0c:	40021400 	.word	0x40021400
 8002a10:	40006000 	.word	0x40006000

08002a14 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a27      	ldr	r2, [pc, #156]	; (8002ac0 <HAL_I2C_MspDeInit+0xac>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d119      	bne.n	8002a5a <HAL_I2C_MspDeInit+0x46>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002a26:	4b27      	ldr	r3, [pc, #156]	; (8002ac4 <HAL_I2C_MspDeInit+0xb0>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	4a26      	ldr	r2, [pc, #152]	; (8002ac4 <HAL_I2C_MspDeInit+0xb0>)
 8002a2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a30:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8002a32:	2140      	movs	r1, #64	; 0x40
 8002a34:	4824      	ldr	r0, [pc, #144]	; (8002ac8 <HAL_I2C_MspDeInit+0xb4>)
 8002a36:	f001 f9db 	bl	8003df0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8002a3a:	2180      	movs	r1, #128	; 0x80
 8002a3c:	4822      	ldr	r0, [pc, #136]	; (8002ac8 <HAL_I2C_MspDeInit+0xb4>)
 8002a3e:	f001 f9d7 	bl	8003df0 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmatx);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 fd5c 	bl	8003504 <HAL_DMA_DeInit>

    /* I2C1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(I2C1_EV_IRQn);
 8002a4c:	201f      	movs	r0, #31
 8002a4e:	f000 fc90 	bl	8003372 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C1_ER_IRQn);
 8002a52:	2020      	movs	r0, #32
 8002a54:	f000 fc8d 	bl	8003372 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C4_MspDeInit 1 */

  /* USER CODE END I2C4_MspDeInit 1 */
  }

}
 8002a58:	e02e      	b.n	8002ab8 <HAL_I2C_MspDeInit+0xa4>
  else if(hi2c->Instance==I2C2)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a1b      	ldr	r2, [pc, #108]	; (8002acc <HAL_I2C_MspDeInit+0xb8>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d114      	bne.n	8002a8e <HAL_I2C_MspDeInit+0x7a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002a64:	4b17      	ldr	r3, [pc, #92]	; (8002ac4 <HAL_I2C_MspDeInit+0xb0>)
 8002a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a68:	4a16      	ldr	r2, [pc, #88]	; (8002ac4 <HAL_I2C_MspDeInit+0xb0>)
 8002a6a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002a6e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_0);
 8002a70:	2101      	movs	r1, #1
 8002a72:	4817      	ldr	r0, [pc, #92]	; (8002ad0 <HAL_I2C_MspDeInit+0xbc>)
 8002a74:	f001 f9bc 	bl	8003df0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_1);
 8002a78:	2102      	movs	r1, #2
 8002a7a:	4815      	ldr	r0, [pc, #84]	; (8002ad0 <HAL_I2C_MspDeInit+0xbc>)
 8002a7c:	f001 f9b8 	bl	8003df0 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(I2C2_EV_IRQn);
 8002a80:	2021      	movs	r0, #33	; 0x21
 8002a82:	f000 fc76 	bl	8003372 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 8002a86:	2022      	movs	r0, #34	; 0x22
 8002a88:	f000 fc73 	bl	8003372 <HAL_NVIC_DisableIRQ>
}
 8002a8c:	e014      	b.n	8002ab8 <HAL_I2C_MspDeInit+0xa4>
  else if(hi2c->Instance==I2C4)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a10      	ldr	r2, [pc, #64]	; (8002ad4 <HAL_I2C_MspDeInit+0xc0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d10f      	bne.n	8002ab8 <HAL_I2C_MspDeInit+0xa4>
    __HAL_RCC_I2C4_CLK_DISABLE();
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <HAL_I2C_MspDeInit+0xb0>)
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	4a09      	ldr	r2, [pc, #36]	; (8002ac4 <HAL_I2C_MspDeInit+0xb0>)
 8002a9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002aa2:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_14);
 8002aa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002aa8:	4809      	ldr	r0, [pc, #36]	; (8002ad0 <HAL_I2C_MspDeInit+0xbc>)
 8002aaa:	f001 f9a1 	bl	8003df0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_15);
 8002aae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ab2:	4807      	ldr	r0, [pc, #28]	; (8002ad0 <HAL_I2C_MspDeInit+0xbc>)
 8002ab4:	f001 f99c 	bl	8003df0 <HAL_GPIO_DeInit>
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40005400 	.word	0x40005400
 8002ac4:	40023800 	.word	0x40023800
 8002ac8:	40020400 	.word	0x40020400
 8002acc:	40005800 	.word	0x40005800
 8002ad0:	40021400 	.word	0x40021400
 8002ad4:	40006000 	.word	0x40006000

08002ad8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08a      	sub	sp, #40	; 0x28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	f107 0314 	add.w	r3, r7, #20
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a4a      	ldr	r2, [pc, #296]	; (8002c20 <HAL_SPI_MspInit+0x148>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	f040 808e 	bne.w	8002c18 <HAL_SPI_MspInit+0x140>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002afc:	4b49      	ldr	r3, [pc, #292]	; (8002c24 <HAL_SPI_MspInit+0x14c>)
 8002afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b00:	4a48      	ldr	r2, [pc, #288]	; (8002c24 <HAL_SPI_MspInit+0x14c>)
 8002b02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b06:	6453      	str	r3, [r2, #68]	; 0x44
 8002b08:	4b46      	ldr	r3, [pc, #280]	; (8002c24 <HAL_SPI_MspInit+0x14c>)
 8002b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b10:	613b      	str	r3, [r7, #16]
 8002b12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b14:	4b43      	ldr	r3, [pc, #268]	; (8002c24 <HAL_SPI_MspInit+0x14c>)
 8002b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b18:	4a42      	ldr	r2, [pc, #264]	; (8002c24 <HAL_SPI_MspInit+0x14c>)
 8002b1a:	f043 0301 	orr.w	r3, r3, #1
 8002b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002b20:	4b40      	ldr	r3, [pc, #256]	; (8002c24 <HAL_SPI_MspInit+0x14c>)
 8002b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b24:	f003 0301 	and.w	r3, r3, #1
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b2c:	23f0      	movs	r3, #240	; 0xf0
 8002b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b30:	2302      	movs	r3, #2
 8002b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002b3c:	2305      	movs	r3, #5
 8002b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b40:	f107 0314 	add.w	r3, r7, #20
 8002b44:	4619      	mov	r1, r3
 8002b46:	4838      	ldr	r0, [pc, #224]	; (8002c28 <HAL_SPI_MspInit+0x150>)
 8002b48:	f000 ffa6 	bl	8003a98 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002b4c:	4b37      	ldr	r3, [pc, #220]	; (8002c2c <HAL_SPI_MspInit+0x154>)
 8002b4e:	4a38      	ldr	r2, [pc, #224]	; (8002c30 <HAL_SPI_MspInit+0x158>)
 8002b50:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002b52:	4b36      	ldr	r3, [pc, #216]	; (8002c2c <HAL_SPI_MspInit+0x154>)
 8002b54:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002b58:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b5a:	4b34      	ldr	r3, [pc, #208]	; (8002c2c <HAL_SPI_MspInit+0x154>)
 8002b5c:	2240      	movs	r2, #64	; 0x40
 8002b5e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b60:	4b32      	ldr	r3, [pc, #200]	; (8002c2c <HAL_SPI_MspInit+0x154>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b66:	4b31      	ldr	r3, [pc, #196]	; (8002c2c <HAL_SPI_MspInit+0x154>)
 8002b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b6c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b6e:	4b2f      	ldr	r3, [pc, #188]	; (8002c2c <HAL_SPI_MspInit+0x154>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b74:	4b2d      	ldr	r3, [pc, #180]	; (8002c2c <HAL_SPI_MspInit+0x154>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8002b7a:	4b2c      	ldr	r3, [pc, #176]	; (8002c2c <HAL_SPI_MspInit+0x154>)
 8002b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b80:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b82:	4b2a      	ldr	r3, [pc, #168]	; (8002c2c <HAL_SPI_MspInit+0x154>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b88:	4b28      	ldr	r3, [pc, #160]	; (8002c2c <HAL_SPI_MspInit+0x154>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002b8e:	4827      	ldr	r0, [pc, #156]	; (8002c2c <HAL_SPI_MspInit+0x154>)
 8002b90:	f000 fc0a 	bl	80033a8 <HAL_DMA_Init>
 8002b94:	4603      	mov	r3, r0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 8002b9a:	f7ff fc7d 	bl	8002498 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a22      	ldr	r2, [pc, #136]	; (8002c2c <HAL_SPI_MspInit+0x154>)
 8002ba2:	655a      	str	r2, [r3, #84]	; 0x54
 8002ba4:	4a21      	ldr	r2, [pc, #132]	; (8002c2c <HAL_SPI_MspInit+0x154>)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8002baa:	4b22      	ldr	r3, [pc, #136]	; (8002c34 <HAL_SPI_MspInit+0x15c>)
 8002bac:	4a22      	ldr	r2, [pc, #136]	; (8002c38 <HAL_SPI_MspInit+0x160>)
 8002bae:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8002bb0:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <HAL_SPI_MspInit+0x15c>)
 8002bb2:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002bb6:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002bb8:	4b1e      	ldr	r3, [pc, #120]	; (8002c34 <HAL_SPI_MspInit+0x15c>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bbe:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <HAL_SPI_MspInit+0x15c>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bc4:	4b1b      	ldr	r3, [pc, #108]	; (8002c34 <HAL_SPI_MspInit+0x15c>)
 8002bc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bca:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bcc:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <HAL_SPI_MspInit+0x15c>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bd2:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <HAL_SPI_MspInit+0x15c>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002bd8:	4b16      	ldr	r3, [pc, #88]	; (8002c34 <HAL_SPI_MspInit+0x15c>)
 8002bda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bde:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002be0:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <HAL_SPI_MspInit+0x15c>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002be6:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <HAL_SPI_MspInit+0x15c>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8002bec:	4811      	ldr	r0, [pc, #68]	; (8002c34 <HAL_SPI_MspInit+0x15c>)
 8002bee:	f000 fbdb 	bl	80033a8 <HAL_DMA_Init>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <HAL_SPI_MspInit+0x124>
    {
      Error_Handler();
 8002bf8:	f7ff fc4e 	bl	8002498 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a0d      	ldr	r2, [pc, #52]	; (8002c34 <HAL_SPI_MspInit+0x15c>)
 8002c00:	659a      	str	r2, [r3, #88]	; 0x58
 8002c02:	4a0c      	ldr	r2, [pc, #48]	; (8002c34 <HAL_SPI_MspInit+0x15c>)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	2023      	movs	r0, #35	; 0x23
 8002c0e:	f000 fb86 	bl	800331e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002c12:	2023      	movs	r0, #35	; 0x23
 8002c14:	f000 fb9f 	bl	8003356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002c18:	bf00      	nop
 8002c1a:	3728      	adds	r7, #40	; 0x28
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40013000 	.word	0x40013000
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40020000 	.word	0x40020000
 8002c2c:	2000066c 	.word	0x2000066c
 8002c30:	40026458 	.word	0x40026458
 8002c34:	2000060c 	.word	0x2000060c
 8002c38:	40026410 	.word	0x40026410

08002c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08c      	sub	sp, #48	; 0x30
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 031c 	add.w	r3, r7, #28
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a2e      	ldr	r2, [pc, #184]	; (8002d14 <HAL_UART_MspInit+0xd8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d128      	bne.n	8002cb0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c5e:	4b2e      	ldr	r3, [pc, #184]	; (8002d18 <HAL_UART_MspInit+0xdc>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c62:	4a2d      	ldr	r2, [pc, #180]	; (8002d18 <HAL_UART_MspInit+0xdc>)
 8002c64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c68:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6a:	4b2b      	ldr	r3, [pc, #172]	; (8002d18 <HAL_UART_MspInit+0xdc>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	61bb      	str	r3, [r7, #24]
 8002c74:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c76:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <HAL_UART_MspInit+0xdc>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7a:	4a27      	ldr	r2, [pc, #156]	; (8002d18 <HAL_UART_MspInit+0xdc>)
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6313      	str	r3, [r2, #48]	; 0x30
 8002c82:	4b25      	ldr	r3, [pc, #148]	; (8002d18 <HAL_UART_MspInit+0xdc>)
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	617b      	str	r3, [r7, #20]
 8002c8c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c8e:	230c      	movs	r3, #12
 8002c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c92:	2302      	movs	r3, #2
 8002c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c9e:	2307      	movs	r3, #7
 8002ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca2:	f107 031c 	add.w	r3, r7, #28
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	481c      	ldr	r0, [pc, #112]	; (8002d1c <HAL_UART_MspInit+0xe0>)
 8002caa:	f000 fef5 	bl	8003a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002cae:	e02d      	b.n	8002d0c <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a1a      	ldr	r2, [pc, #104]	; (8002d20 <HAL_UART_MspInit+0xe4>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d128      	bne.n	8002d0c <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002cba:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <HAL_UART_MspInit+0xdc>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a16      	ldr	r2, [pc, #88]	; (8002d18 <HAL_UART_MspInit+0xdc>)
 8002cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc6:	4b14      	ldr	r3, [pc, #80]	; (8002d18 <HAL_UART_MspInit+0xdc>)
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002cd2:	4b11      	ldr	r3, [pc, #68]	; (8002d18 <HAL_UART_MspInit+0xdc>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	4a10      	ldr	r2, [pc, #64]	; (8002d18 <HAL_UART_MspInit+0xdc>)
 8002cd8:	f043 0308 	orr.w	r3, r3, #8
 8002cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002cde:	4b0e      	ldr	r3, [pc, #56]	; (8002d18 <HAL_UART_MspInit+0xdc>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	f003 0308 	and.w	r3, r3, #8
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002cea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cfc:	2307      	movs	r3, #7
 8002cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d00:	f107 031c 	add.w	r3, r7, #28
 8002d04:	4619      	mov	r1, r3
 8002d06:	4807      	ldr	r0, [pc, #28]	; (8002d24 <HAL_UART_MspInit+0xe8>)
 8002d08:	f000 fec6 	bl	8003a98 <HAL_GPIO_Init>
}
 8002d0c:	bf00      	nop
 8002d0e:	3730      	adds	r7, #48	; 0x30
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40004400 	.word	0x40004400
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	40020000 	.word	0x40020000
 8002d20:	40004800 	.word	0x40004800
 8002d24:	40020c00 	.word	0x40020c00

08002d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d2c:	e7fe      	b.n	8002d2c <NMI_Handler+0x4>

08002d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d32:	e7fe      	b.n	8002d32 <HardFault_Handler+0x4>

08002d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d38:	e7fe      	b.n	8002d38 <MemManage_Handler+0x4>

08002d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d3e:	e7fe      	b.n	8002d3e <BusFault_Handler+0x4>

08002d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d44:	e7fe      	b.n	8002d44 <UsageFault_Handler+0x4>

08002d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d46:	b480      	push	{r7}
 8002d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d62:	b480      	push	{r7}
 8002d64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d66:	bf00      	nop
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr

08002d70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d74:	f000 f990 	bl	8003098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d78:	bf00      	nop
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002d80:	4802      	ldr	r0, [pc, #8]	; (8002d8c <DMA1_Stream6_IRQHandler+0x10>)
 8002d82:	f000 fc3f 	bl	8003604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	2000042c 	.word	0x2000042c

08002d90 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002d94:	4802      	ldr	r0, [pc, #8]	; (8002da0 <I2C1_EV_IRQHandler+0x10>)
 8002d96:	f001 fc15 	bl	80045c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	2000048c 	.word	0x2000048c

08002da4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002da8:	4802      	ldr	r0, [pc, #8]	; (8002db4 <I2C1_ER_IRQHandler+0x10>)
 8002daa:	f001 fc25 	bl	80045f8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	2000048c 	.word	0x2000048c

08002db8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002dbc:	4802      	ldr	r0, [pc, #8]	; (8002dc8 <I2C2_EV_IRQHandler+0x10>)
 8002dbe:	f001 fc01 	bl	80045c4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	200004d8 	.word	0x200004d8

08002dcc <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8002dd0:	4802      	ldr	r0, [pc, #8]	; (8002ddc <I2C2_ER_IRQHandler+0x10>)
 8002dd2:	f001 fc11 	bl	80045f8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8002dd6:	bf00      	nop
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	200004d8 	.word	0x200004d8

08002de0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002de4:	4802      	ldr	r0, [pc, #8]	; (8002df0 <SPI1_IRQHandler+0x10>)
 8002de6:	f003 fe89 	bl	8006afc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002dea:	bf00      	nop
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	20000524 	.word	0x20000524

08002df4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002df8:	4802      	ldr	r0, [pc, #8]	; (8002e04 <DMA2_Stream0_IRQHandler+0x10>)
 8002dfa:	f000 fc03 	bl	8003604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	2000060c 	.word	0x2000060c

08002e08 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002e0c:	4802      	ldr	r0, [pc, #8]	; (8002e18 <DMA2_Stream3_IRQHandler+0x10>)
 8002e0e:	f000 fbf9 	bl	8003604 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	2000066c 	.word	0x2000066c

08002e1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
	return 1;
 8002e20:	2301      	movs	r3, #1
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <_kill>:

int _kill(int pid, int sig)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e36:	f005 f823 	bl	8007e80 <__errno>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2216      	movs	r2, #22
 8002e3e:	601a      	str	r2, [r3, #0]
	return -1;
 8002e40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_exit>:

void _exit (int status)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e54:	f04f 31ff 	mov.w	r1, #4294967295
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ffe7 	bl	8002e2c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e5e:	e7fe      	b.n	8002e5e <_exit+0x12>

08002e60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	e00a      	b.n	8002e88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e72:	f3af 8000 	nop.w
 8002e76:	4601      	mov	r1, r0
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	60ba      	str	r2, [r7, #8]
 8002e7e:	b2ca      	uxtb	r2, r1
 8002e80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	3301      	adds	r3, #1
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	dbf0      	blt.n	8002e72 <_read+0x12>
	}

return len;
 8002e90:	687b      	ldr	r3, [r7, #4]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b086      	sub	sp, #24
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	e009      	b.n	8002ec0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	60ba      	str	r2, [r7, #8]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff faf5 	bl	80024a4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	dbf1      	blt.n	8002eac <_write+0x12>
	}
	return len;
 8002ec8:	687b      	ldr	r3, [r7, #4]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <_close>:

int _close(int file)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
	return -1;
 8002eda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002efa:	605a      	str	r2, [r3, #4]
	return 0;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <_isatty>:

int _isatty(int file)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
	return 1;
 8002f12:	2301      	movs	r3, #1
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
	return 0;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f44:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <_sbrk+0x5c>)
 8002f46:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <_sbrk+0x60>)
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f50:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <_sbrk+0x64>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d102      	bne.n	8002f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <_sbrk+0x64>)
 8002f5a:	4a12      	ldr	r2, [pc, #72]	; (8002fa4 <_sbrk+0x68>)
 8002f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f5e:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <_sbrk+0x64>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d207      	bcs.n	8002f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f6c:	f004 ff88 	bl	8007e80 <__errno>
 8002f70:	4603      	mov	r3, r0
 8002f72:	220c      	movs	r2, #12
 8002f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f76:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7a:	e009      	b.n	8002f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f7c:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <_sbrk+0x64>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f82:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <_sbrk+0x64>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	4a05      	ldr	r2, [pc, #20]	; (8002fa0 <_sbrk+0x64>)
 8002f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20080000 	.word	0x20080000
 8002f9c:	00000400 	.word	0x00000400
 8002fa0:	20000350 	.word	0x20000350
 8002fa4:	200006f8 	.word	0x200006f8

08002fa8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <SystemInit+0x20>)
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb2:	4a05      	ldr	r2, [pc, #20]	; (8002fc8 <SystemInit+0x20>)
 8002fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	e000ed00 	.word	0xe000ed00

08002fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003004 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fd0:	480d      	ldr	r0, [pc, #52]	; (8003008 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fd2:	490e      	ldr	r1, [pc, #56]	; (800300c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fd4:	4a0e      	ldr	r2, [pc, #56]	; (8003010 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fd8:	e002      	b.n	8002fe0 <LoopCopyDataInit>

08002fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fde:	3304      	adds	r3, #4

08002fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe4:	d3f9      	bcc.n	8002fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fe6:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fe8:	4c0b      	ldr	r4, [pc, #44]	; (8003018 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fec:	e001      	b.n	8002ff2 <LoopFillZerobss>

08002fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ff0:	3204      	adds	r2, #4

08002ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff4:	d3fb      	bcc.n	8002fee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ff6:	f7ff ffd7 	bl	8002fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ffa:	f004 ff47 	bl	8007e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ffe:	f7fe ff75 	bl	8001eec <main>
  bx  lr    
 8003002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003004:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8003008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800300c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003010:	0800d338 	.word	0x0800d338
  ldr r2, =_sbss
 8003014:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003018:	200006f8 	.word	0x200006f8

0800301c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800301c:	e7fe      	b.n	800301c <ADC_IRQHandler>

0800301e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003022:	2003      	movs	r0, #3
 8003024:	f000 f970 	bl	8003308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003028:	2000      	movs	r0, #0
 800302a:	f000 f805 	bl	8003038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800302e:	f7ff fbd3 	bl	80027d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	bd80      	pop	{r7, pc}

08003038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_InitTick+0x54>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_InitTick+0x58>)
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	4619      	mov	r1, r3
 800304a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800304e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003052:	fbb2 f3f3 	udiv	r3, r2, r3
 8003056:	4618      	mov	r0, r3
 8003058:	f000 f999 	bl	800338e <HAL_SYSTICK_Config>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e00e      	b.n	8003084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b0f      	cmp	r3, #15
 800306a:	d80a      	bhi.n	8003082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800306c:	2200      	movs	r2, #0
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	f04f 30ff 	mov.w	r0, #4294967295
 8003074:	f000 f953 	bl	800331e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003078:	4a06      	ldr	r2, [pc, #24]	; (8003094 <HAL_InitTick+0x5c>)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
 8003080:	e000      	b.n	8003084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
}
 8003084:	4618      	mov	r0, r3
 8003086:	3708      	adds	r7, #8
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20000004 	.word	0x20000004
 8003090:	2000000c 	.word	0x2000000c
 8003094:	20000008 	.word	0x20000008

08003098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800309c:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_IncTick+0x20>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	4b06      	ldr	r3, [pc, #24]	; (80030bc <HAL_IncTick+0x24>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4413      	add	r3, r2
 80030a8:	4a04      	ldr	r2, [pc, #16]	; (80030bc <HAL_IncTick+0x24>)
 80030aa:	6013      	str	r3, [r2, #0]
}
 80030ac:	bf00      	nop
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
 80030b6:	bf00      	nop
 80030b8:	2000000c 	.word	0x2000000c
 80030bc:	200006e4 	.word	0x200006e4

080030c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return uwTick;
 80030c4:	4b03      	ldr	r3, [pc, #12]	; (80030d4 <HAL_GetTick+0x14>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	200006e4 	.word	0x200006e4

080030d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030e0:	f7ff ffee 	bl	80030c0 <HAL_GetTick>
 80030e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f0:	d005      	beq.n	80030fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030f2:	4b0a      	ldr	r3, [pc, #40]	; (800311c <HAL_Delay+0x44>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4413      	add	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030fe:	bf00      	nop
 8003100:	f7ff ffde 	bl	80030c0 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	429a      	cmp	r2, r3
 800310e:	d8f7      	bhi.n	8003100 <HAL_Delay+0x28>
  {
  }
}
 8003110:	bf00      	nop
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	2000000c 	.word	0x2000000c

08003120 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <__NVIC_SetPriorityGrouping+0x40>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003136:	68ba      	ldr	r2, [r7, #8]
 8003138:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800313c:	4013      	ands	r3, r2
 800313e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003148:	4b06      	ldr	r3, [pc, #24]	; (8003164 <__NVIC_SetPriorityGrouping+0x44>)
 800314a:	4313      	orrs	r3, r2
 800314c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800314e:	4a04      	ldr	r2, [pc, #16]	; (8003160 <__NVIC_SetPriorityGrouping+0x40>)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	60d3      	str	r3, [r2, #12]
}
 8003154:	bf00      	nop
 8003156:	3714      	adds	r7, #20
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000ed00 	.word	0xe000ed00
 8003164:	05fa0000 	.word	0x05fa0000

08003168 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800316c:	4b04      	ldr	r3, [pc, #16]	; (8003180 <__NVIC_GetPriorityGrouping+0x18>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	0a1b      	lsrs	r3, r3, #8
 8003172:	f003 0307 	and.w	r3, r3, #7
}
 8003176:	4618      	mov	r0, r3
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	e000ed00 	.word	0xe000ed00

08003184 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800318e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003192:	2b00      	cmp	r3, #0
 8003194:	db0b      	blt.n	80031ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003196:	79fb      	ldrb	r3, [r7, #7]
 8003198:	f003 021f 	and.w	r2, r3, #31
 800319c:	4907      	ldr	r1, [pc, #28]	; (80031bc <__NVIC_EnableIRQ+0x38>)
 800319e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	2001      	movs	r0, #1
 80031a6:	fa00 f202 	lsl.w	r2, r0, r2
 80031aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031ae:	bf00      	nop
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	e000e100 	.word	0xe000e100

080031c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	4603      	mov	r3, r0
 80031c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	db12      	blt.n	80031f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	f003 021f 	and.w	r2, r3, #31
 80031d8:	490a      	ldr	r1, [pc, #40]	; (8003204 <__NVIC_DisableIRQ+0x44>)
 80031da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	2001      	movs	r0, #1
 80031e2:	fa00 f202 	lsl.w	r2, r0, r2
 80031e6:	3320      	adds	r3, #32
 80031e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80031ec:	f3bf 8f4f 	dsb	sy
}
 80031f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031f2:	f3bf 8f6f 	isb	sy
}
 80031f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000e100 	.word	0xe000e100

08003208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	6039      	str	r1, [r7, #0]
 8003212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003218:	2b00      	cmp	r3, #0
 800321a:	db0a      	blt.n	8003232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	b2da      	uxtb	r2, r3
 8003220:	490c      	ldr	r1, [pc, #48]	; (8003254 <__NVIC_SetPriority+0x4c>)
 8003222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003226:	0112      	lsls	r2, r2, #4
 8003228:	b2d2      	uxtb	r2, r2
 800322a:	440b      	add	r3, r1
 800322c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003230:	e00a      	b.n	8003248 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	b2da      	uxtb	r2, r3
 8003236:	4908      	ldr	r1, [pc, #32]	; (8003258 <__NVIC_SetPriority+0x50>)
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	f003 030f 	and.w	r3, r3, #15
 800323e:	3b04      	subs	r3, #4
 8003240:	0112      	lsls	r2, r2, #4
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	440b      	add	r3, r1
 8003246:	761a      	strb	r2, [r3, #24]
}
 8003248:	bf00      	nop
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	e000e100 	.word	0xe000e100
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800325c:	b480      	push	{r7}
 800325e:	b089      	sub	sp, #36	; 0x24
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f1c3 0307 	rsb	r3, r3, #7
 8003276:	2b04      	cmp	r3, #4
 8003278:	bf28      	it	cs
 800327a:	2304      	movcs	r3, #4
 800327c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	3304      	adds	r3, #4
 8003282:	2b06      	cmp	r3, #6
 8003284:	d902      	bls.n	800328c <NVIC_EncodePriority+0x30>
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	3b03      	subs	r3, #3
 800328a:	e000      	b.n	800328e <NVIC_EncodePriority+0x32>
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003290:	f04f 32ff 	mov.w	r2, #4294967295
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43da      	mvns	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	401a      	ands	r2, r3
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032a4:	f04f 31ff 	mov.w	r1, #4294967295
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	fa01 f303 	lsl.w	r3, r1, r3
 80032ae:	43d9      	mvns	r1, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b4:	4313      	orrs	r3, r2
         );
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3724      	adds	r7, #36	; 0x24
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
	...

080032c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032d4:	d301      	bcc.n	80032da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032d6:	2301      	movs	r3, #1
 80032d8:	e00f      	b.n	80032fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032da:	4a0a      	ldr	r2, [pc, #40]	; (8003304 <SysTick_Config+0x40>)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	3b01      	subs	r3, #1
 80032e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032e2:	210f      	movs	r1, #15
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295
 80032e8:	f7ff ff8e 	bl	8003208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032ec:	4b05      	ldr	r3, [pc, #20]	; (8003304 <SysTick_Config+0x40>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032f2:	4b04      	ldr	r3, [pc, #16]	; (8003304 <SysTick_Config+0x40>)
 80032f4:	2207      	movs	r2, #7
 80032f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	e000e010 	.word	0xe000e010

08003308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7ff ff05 	bl	8003120 <__NVIC_SetPriorityGrouping>
}
 8003316:	bf00      	nop
 8003318:	3708      	adds	r7, #8
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}

0800331e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800331e:	b580      	push	{r7, lr}
 8003320:	b086      	sub	sp, #24
 8003322:	af00      	add	r7, sp, #0
 8003324:	4603      	mov	r3, r0
 8003326:	60b9      	str	r1, [r7, #8]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003330:	f7ff ff1a 	bl	8003168 <__NVIC_GetPriorityGrouping>
 8003334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68b9      	ldr	r1, [r7, #8]
 800333a:	6978      	ldr	r0, [r7, #20]
 800333c:	f7ff ff8e 	bl	800325c <NVIC_EncodePriority>
 8003340:	4602      	mov	r2, r0
 8003342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003346:	4611      	mov	r1, r2
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff5d 	bl	8003208 <__NVIC_SetPriority>
}
 800334e:	bf00      	nop
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	4603      	mov	r3, r0
 800335e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003364:	4618      	mov	r0, r3
 8003366:	f7ff ff0d 	bl	8003184 <__NVIC_EnableIRQ>
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b082      	sub	sp, #8
 8003376:	af00      	add	r7, sp, #0
 8003378:	4603      	mov	r3, r0
 800337a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800337c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003380:	4618      	mov	r0, r3
 8003382:	f7ff ff1d 	bl	80031c0 <__NVIC_DisableIRQ>
}
 8003386:	bf00      	nop
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff ff94 	bl	80032c4 <SysTick_Config>
 800339c:	4603      	mov	r3, r0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033b4:	f7ff fe84 	bl	80030c0 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d101      	bne.n	80033c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	e099      	b.n	80034f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2202      	movs	r2, #2
 80033c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0201 	bic.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033e4:	e00f      	b.n	8003406 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033e6:	f7ff fe6b 	bl	80030c0 <HAL_GetTick>
 80033ea:	4602      	mov	r2, r0
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	1ad3      	subs	r3, r2, r3
 80033f0:	2b05      	cmp	r3, #5
 80033f2:	d908      	bls.n	8003406 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2220      	movs	r2, #32
 80033f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2203      	movs	r2, #3
 80033fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e078      	b.n	80034f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1e8      	bne.n	80033e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800341c:	697a      	ldr	r2, [r7, #20]
 800341e:	4b38      	ldr	r3, [pc, #224]	; (8003500 <HAL_DMA_Init+0x158>)
 8003420:	4013      	ands	r3, r2
 8003422:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003432:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	691b      	ldr	r3, [r3, #16]
 8003438:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800343e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800344a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003452:	697a      	ldr	r2, [r7, #20]
 8003454:	4313      	orrs	r3, r2
 8003456:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	2b04      	cmp	r3, #4
 800345e:	d107      	bne.n	8003470 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003468:	4313      	orrs	r3, r2
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4313      	orrs	r3, r2
 800346e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	f023 0307 	bic.w	r3, r3, #7
 8003486:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	2b04      	cmp	r3, #4
 8003498:	d117      	bne.n	80034ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00e      	beq.n	80034ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fa77 	bl	80039a0 <DMA_CheckFifoParam>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2240      	movs	r2, #64	; 0x40
 80034bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80034c6:	2301      	movs	r3, #1
 80034c8:	e016      	b.n	80034f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	697a      	ldr	r2, [r7, #20]
 80034d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 fa2e 	bl	8003934 <DMA_CalcBaseAndBitshift>
 80034d8:	4603      	mov	r3, r0
 80034da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034e0:	223f      	movs	r2, #63	; 0x3f
 80034e2:	409a      	lsls	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	e010803f 	.word	0xe010803f

08003504 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e050      	b.n	80035b8 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d101      	bne.n	8003526 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8003522:	2302      	movs	r3, #2
 8003524:	e048      	b.n	80035b8 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f022 0201 	bic.w	r2, r2, #1
 8003534:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2200      	movs	r2, #0
 8003544:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2200      	movs	r2, #0
 800354c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2200      	movs	r2, #0
 8003554:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2200      	movs	r2, #0
 800355c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2221      	movs	r2, #33	; 0x21
 8003564:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f000 f9e4 	bl	8003934 <DMA_CalcBaseAndBitshift>
 800356c:	4603      	mov	r3, r0
 800356e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003574:	223f      	movs	r2, #63	; 0x3f
 8003576:	409a      	lsls	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d004      	beq.n	80035de <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2280      	movs	r2, #128	; 0x80
 80035d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e00c      	b.n	80035f8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2205      	movs	r2, #5
 80035e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0201 	bic.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800360c:	2300      	movs	r3, #0
 800360e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003610:	4b92      	ldr	r3, [pc, #584]	; (800385c <HAL_DMA_IRQHandler+0x258>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a92      	ldr	r2, [pc, #584]	; (8003860 <HAL_DMA_IRQHandler+0x25c>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	0a9b      	lsrs	r3, r3, #10
 800361c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003622:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362e:	2208      	movs	r2, #8
 8003630:	409a      	lsls	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	4013      	ands	r3, r2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d01a      	beq.n	8003670 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	d013      	beq.n	8003670 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0204 	bic.w	r2, r2, #4
 8003656:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800365c:	2208      	movs	r2, #8
 800365e:	409a      	lsls	r2, r3
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003668:	f043 0201 	orr.w	r2, r3, #1
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003674:	2201      	movs	r2, #1
 8003676:	409a      	lsls	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	4013      	ands	r3, r2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d012      	beq.n	80036a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00b      	beq.n	80036a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003692:	2201      	movs	r2, #1
 8003694:	409a      	lsls	r2, r3
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800369e:	f043 0202 	orr.w	r2, r3, #2
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036aa:	2204      	movs	r2, #4
 80036ac:	409a      	lsls	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	4013      	ands	r3, r2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d012      	beq.n	80036dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00b      	beq.n	80036dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036c8:	2204      	movs	r2, #4
 80036ca:	409a      	lsls	r2, r3
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d4:	f043 0204 	orr.w	r2, r3, #4
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036e0:	2210      	movs	r2, #16
 80036e2:	409a      	lsls	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d043      	beq.n	8003774 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d03c      	beq.n	8003774 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036fe:	2210      	movs	r2, #16
 8003700:	409a      	lsls	r2, r3
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d018      	beq.n	8003746 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d108      	bne.n	8003734 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	2b00      	cmp	r3, #0
 8003728:	d024      	beq.n	8003774 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	4798      	blx	r3
 8003732:	e01f      	b.n	8003774 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003738:	2b00      	cmp	r3, #0
 800373a:	d01b      	beq.n	8003774 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	4798      	blx	r3
 8003744:	e016      	b.n	8003774 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003750:	2b00      	cmp	r3, #0
 8003752:	d107      	bne.n	8003764 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0208 	bic.w	r2, r2, #8
 8003762:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003778:	2220      	movs	r2, #32
 800377a:	409a      	lsls	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	4013      	ands	r3, r2
 8003780:	2b00      	cmp	r3, #0
 8003782:	f000 808e 	beq.w	80038a2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0310 	and.w	r3, r3, #16
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8086 	beq.w	80038a2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800379a:	2220      	movs	r2, #32
 800379c:	409a      	lsls	r2, r3
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	2b05      	cmp	r3, #5
 80037ac:	d136      	bne.n	800381c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 0216 	bic.w	r2, r2, #22
 80037bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d103      	bne.n	80037de <HAL_DMA_IRQHandler+0x1da>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f022 0208 	bic.w	r2, r2, #8
 80037ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f2:	223f      	movs	r2, #63	; 0x3f
 80037f4:	409a      	lsls	r2, r3
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800380e:	2b00      	cmp	r3, #0
 8003810:	d07d      	beq.n	800390e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	4798      	blx	r3
        }
        return;
 800381a:	e078      	b.n	800390e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d01c      	beq.n	8003864 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d108      	bne.n	800384a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383c:	2b00      	cmp	r3, #0
 800383e:	d030      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	4798      	blx	r3
 8003848:	e02b      	b.n	80038a2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384e:	2b00      	cmp	r3, #0
 8003850:	d027      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	4798      	blx	r3
 800385a:	e022      	b.n	80038a2 <HAL_DMA_IRQHandler+0x29e>
 800385c:	20000004 	.word	0x20000004
 8003860:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10f      	bne.n	8003892 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0210 	bic.w	r2, r2, #16
 8003880:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003896:	2b00      	cmp	r3, #0
 8003898:	d003      	beq.n	80038a2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d032      	beq.n	8003910 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ae:	f003 0301 	and.w	r3, r3, #1
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d022      	beq.n	80038fc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2205      	movs	r2, #5
 80038ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0201 	bic.w	r2, r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	3301      	adds	r3, #1
 80038d2:	60bb      	str	r3, [r7, #8]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d307      	bcc.n	80038ea <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1f2      	bne.n	80038ce <HAL_DMA_IRQHandler+0x2ca>
 80038e8:	e000      	b.n	80038ec <HAL_DMA_IRQHandler+0x2e8>
          break;
 80038ea:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003900:	2b00      	cmp	r3, #0
 8003902:	d005      	beq.n	8003910 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	4798      	blx	r3
 800390c:	e000      	b.n	8003910 <HAL_DMA_IRQHandler+0x30c>
        return;
 800390e:	bf00      	nop
    }
  }
}
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop

08003918 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003926:	b2db      	uxtb	r3, r3
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	b2db      	uxtb	r3, r3
 8003942:	3b10      	subs	r3, #16
 8003944:	4a13      	ldr	r2, [pc, #76]	; (8003994 <DMA_CalcBaseAndBitshift+0x60>)
 8003946:	fba2 2303 	umull	r2, r3, r2, r3
 800394a:	091b      	lsrs	r3, r3, #4
 800394c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800394e:	4a12      	ldr	r2, [pc, #72]	; (8003998 <DMA_CalcBaseAndBitshift+0x64>)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4413      	add	r3, r2
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	461a      	mov	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d908      	bls.n	8003974 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	461a      	mov	r2, r3
 8003968:	4b0c      	ldr	r3, [pc, #48]	; (800399c <DMA_CalcBaseAndBitshift+0x68>)
 800396a:	4013      	ands	r3, r2
 800396c:	1d1a      	adds	r2, r3, #4
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	659a      	str	r2, [r3, #88]	; 0x58
 8003972:	e006      	b.n	8003982 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	461a      	mov	r2, r3
 800397a:	4b08      	ldr	r3, [pc, #32]	; (800399c <DMA_CalcBaseAndBitshift+0x68>)
 800397c:	4013      	ands	r3, r2
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	aaaaaaab 	.word	0xaaaaaaab
 8003998:	0800cd44 	.word	0x0800cd44
 800399c:	fffffc00 	.word	0xfffffc00

080039a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d11f      	bne.n	80039fa <DMA_CheckFifoParam+0x5a>
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d856      	bhi.n	8003a6e <DMA_CheckFifoParam+0xce>
 80039c0:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <DMA_CheckFifoParam+0x28>)
 80039c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c6:	bf00      	nop
 80039c8:	080039d9 	.word	0x080039d9
 80039cc:	080039eb 	.word	0x080039eb
 80039d0:	080039d9 	.word	0x080039d9
 80039d4:	08003a6f 	.word	0x08003a6f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d046      	beq.n	8003a72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039e8:	e043      	b.n	8003a72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80039f2:	d140      	bne.n	8003a76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039f8:	e03d      	b.n	8003a76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a02:	d121      	bne.n	8003a48 <DMA_CheckFifoParam+0xa8>
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d837      	bhi.n	8003a7a <DMA_CheckFifoParam+0xda>
 8003a0a:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <DMA_CheckFifoParam+0x70>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a21 	.word	0x08003a21
 8003a14:	08003a27 	.word	0x08003a27
 8003a18:	08003a21 	.word	0x08003a21
 8003a1c:	08003a39 	.word	0x08003a39
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
      break;
 8003a24:	e030      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d025      	beq.n	8003a7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a36:	e022      	b.n	8003a7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003a40:	d11f      	bne.n	8003a82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a46:	e01c      	b.n	8003a82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d903      	bls.n	8003a56 <DMA_CheckFifoParam+0xb6>
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d003      	beq.n	8003a5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a54:	e018      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	73fb      	strb	r3, [r7, #15]
      break;
 8003a5a:	e015      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00e      	beq.n	8003a86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	73fb      	strb	r3, [r7, #15]
      break;
 8003a6c:	e00b      	b.n	8003a86 <DMA_CheckFifoParam+0xe6>
      break;
 8003a6e:	bf00      	nop
 8003a70:	e00a      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;
 8003a72:	bf00      	nop
 8003a74:	e008      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;
 8003a76:	bf00      	nop
 8003a78:	e006      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;
 8003a7a:	bf00      	nop
 8003a7c:	e004      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;
 8003a7e:	bf00      	nop
 8003a80:	e002      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;   
 8003a82:	bf00      	nop
 8003a84:	e000      	b.n	8003a88 <DMA_CheckFifoParam+0xe8>
      break;
 8003a86:	bf00      	nop
    }
  } 
  
  return status; 
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3714      	adds	r7, #20
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop

08003a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b089      	sub	sp, #36	; 0x24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	61fb      	str	r3, [r7, #28]
 8003ab6:	e175      	b.n	8003da4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ab8:	2201      	movs	r2, #1
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	697a      	ldr	r2, [r7, #20]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	f040 8164 	bne.w	8003d9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d005      	beq.n	8003aee <HAL_GPIO_Init+0x56>
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d130      	bne.n	8003b50 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	2203      	movs	r2, #3
 8003afa:	fa02 f303 	lsl.w	r3, r2, r3
 8003afe:	43db      	mvns	r3, r3
 8003b00:	69ba      	ldr	r2, [r7, #24]
 8003b02:	4013      	ands	r3, r2
 8003b04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b24:	2201      	movs	r2, #1
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2c:	43db      	mvns	r3, r3
 8003b2e:	69ba      	ldr	r2, [r7, #24]
 8003b30:	4013      	ands	r3, r2
 8003b32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	091b      	lsrs	r3, r3, #4
 8003b3a:	f003 0201 	and.w	r2, r3, #1
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69ba      	ldr	r2, [r7, #24]
 8003b4e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f003 0303 	and.w	r3, r3, #3
 8003b58:	2b03      	cmp	r3, #3
 8003b5a:	d017      	beq.n	8003b8c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	005b      	lsls	r3, r3, #1
 8003b66:	2203      	movs	r2, #3
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	69ba      	ldr	r2, [r7, #24]
 8003b70:	4013      	ands	r3, r2
 8003b72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 0303 	and.w	r3, r3, #3
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d123      	bne.n	8003be0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	08da      	lsrs	r2, r3, #3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	3208      	adds	r2, #8
 8003ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	220f      	movs	r2, #15
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	08da      	lsrs	r2, r3, #3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3208      	adds	r2, #8
 8003bda:	69b9      	ldr	r1, [r7, #24]
 8003bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	2203      	movs	r2, #3
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	69ba      	ldr	r2, [r7, #24]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f003 0203 	and.w	r2, r3, #3
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 80be 	beq.w	8003d9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c22:	4b66      	ldr	r3, [pc, #408]	; (8003dbc <HAL_GPIO_Init+0x324>)
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	4a65      	ldr	r2, [pc, #404]	; (8003dbc <HAL_GPIO_Init+0x324>)
 8003c28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c2e:	4b63      	ldr	r3, [pc, #396]	; (8003dbc <HAL_GPIO_Init+0x324>)
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c36:	60fb      	str	r3, [r7, #12]
 8003c38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003c3a:	4a61      	ldr	r2, [pc, #388]	; (8003dc0 <HAL_GPIO_Init+0x328>)
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	089b      	lsrs	r3, r3, #2
 8003c40:	3302      	adds	r3, #2
 8003c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f003 0303 	and.w	r3, r3, #3
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	220f      	movs	r2, #15
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43db      	mvns	r3, r3
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a58      	ldr	r2, [pc, #352]	; (8003dc4 <HAL_GPIO_Init+0x32c>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d037      	beq.n	8003cd6 <HAL_GPIO_Init+0x23e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a57      	ldr	r2, [pc, #348]	; (8003dc8 <HAL_GPIO_Init+0x330>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d031      	beq.n	8003cd2 <HAL_GPIO_Init+0x23a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a56      	ldr	r2, [pc, #344]	; (8003dcc <HAL_GPIO_Init+0x334>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d02b      	beq.n	8003cce <HAL_GPIO_Init+0x236>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a55      	ldr	r2, [pc, #340]	; (8003dd0 <HAL_GPIO_Init+0x338>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d025      	beq.n	8003cca <HAL_GPIO_Init+0x232>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a54      	ldr	r2, [pc, #336]	; (8003dd4 <HAL_GPIO_Init+0x33c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d01f      	beq.n	8003cc6 <HAL_GPIO_Init+0x22e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a53      	ldr	r2, [pc, #332]	; (8003dd8 <HAL_GPIO_Init+0x340>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d019      	beq.n	8003cc2 <HAL_GPIO_Init+0x22a>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a52      	ldr	r2, [pc, #328]	; (8003ddc <HAL_GPIO_Init+0x344>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <HAL_GPIO_Init+0x226>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a51      	ldr	r2, [pc, #324]	; (8003de0 <HAL_GPIO_Init+0x348>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00d      	beq.n	8003cba <HAL_GPIO_Init+0x222>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a50      	ldr	r2, [pc, #320]	; (8003de4 <HAL_GPIO_Init+0x34c>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d007      	beq.n	8003cb6 <HAL_GPIO_Init+0x21e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a4f      	ldr	r2, [pc, #316]	; (8003de8 <HAL_GPIO_Init+0x350>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d101      	bne.n	8003cb2 <HAL_GPIO_Init+0x21a>
 8003cae:	2309      	movs	r3, #9
 8003cb0:	e012      	b.n	8003cd8 <HAL_GPIO_Init+0x240>
 8003cb2:	230a      	movs	r3, #10
 8003cb4:	e010      	b.n	8003cd8 <HAL_GPIO_Init+0x240>
 8003cb6:	2308      	movs	r3, #8
 8003cb8:	e00e      	b.n	8003cd8 <HAL_GPIO_Init+0x240>
 8003cba:	2307      	movs	r3, #7
 8003cbc:	e00c      	b.n	8003cd8 <HAL_GPIO_Init+0x240>
 8003cbe:	2306      	movs	r3, #6
 8003cc0:	e00a      	b.n	8003cd8 <HAL_GPIO_Init+0x240>
 8003cc2:	2305      	movs	r3, #5
 8003cc4:	e008      	b.n	8003cd8 <HAL_GPIO_Init+0x240>
 8003cc6:	2304      	movs	r3, #4
 8003cc8:	e006      	b.n	8003cd8 <HAL_GPIO_Init+0x240>
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e004      	b.n	8003cd8 <HAL_GPIO_Init+0x240>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e002      	b.n	8003cd8 <HAL_GPIO_Init+0x240>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <HAL_GPIO_Init+0x240>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	69fa      	ldr	r2, [r7, #28]
 8003cda:	f002 0203 	and.w	r2, r2, #3
 8003cde:	0092      	lsls	r2, r2, #2
 8003ce0:	4093      	lsls	r3, r2
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ce8:	4935      	ldr	r1, [pc, #212]	; (8003dc0 <HAL_GPIO_Init+0x328>)
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	089b      	lsrs	r3, r3, #2
 8003cee:	3302      	adds	r3, #2
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cf6:	4b3d      	ldr	r3, [pc, #244]	; (8003dec <HAL_GPIO_Init+0x354>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4013      	ands	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d1a:	4a34      	ldr	r2, [pc, #208]	; (8003dec <HAL_GPIO_Init+0x354>)
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d20:	4b32      	ldr	r3, [pc, #200]	; (8003dec <HAL_GPIO_Init+0x354>)
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	43db      	mvns	r3, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4013      	ands	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d44:	4a29      	ldr	r2, [pc, #164]	; (8003dec <HAL_GPIO_Init+0x354>)
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d4a:	4b28      	ldr	r3, [pc, #160]	; (8003dec <HAL_GPIO_Init+0x354>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	43db      	mvns	r3, r3
 8003d54:	69ba      	ldr	r2, [r7, #24]
 8003d56:	4013      	ands	r3, r2
 8003d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d6e:	4a1f      	ldr	r2, [pc, #124]	; (8003dec <HAL_GPIO_Init+0x354>)
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d74:	4b1d      	ldr	r3, [pc, #116]	; (8003dec <HAL_GPIO_Init+0x354>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	69ba      	ldr	r2, [r7, #24]
 8003d80:	4013      	ands	r3, r2
 8003d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d98:	4a14      	ldr	r2, [pc, #80]	; (8003dec <HAL_GPIO_Init+0x354>)
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	3301      	adds	r3, #1
 8003da2:	61fb      	str	r3, [r7, #28]
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	2b0f      	cmp	r3, #15
 8003da8:	f67f ae86 	bls.w	8003ab8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003dac:	bf00      	nop
 8003dae:	bf00      	nop
 8003db0:	3724      	adds	r7, #36	; 0x24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	40013800 	.word	0x40013800
 8003dc4:	40020000 	.word	0x40020000
 8003dc8:	40020400 	.word	0x40020400
 8003dcc:	40020800 	.word	0x40020800
 8003dd0:	40020c00 	.word	0x40020c00
 8003dd4:	40021000 	.word	0x40021000
 8003dd8:	40021400 	.word	0x40021400
 8003ddc:	40021800 	.word	0x40021800
 8003de0:	40021c00 	.word	0x40021c00
 8003de4:	40022000 	.word	0x40022000
 8003de8:	40022400 	.word	0x40022400
 8003dec:	40013c00 	.word	0x40013c00

08003df0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	e0d9      	b.n	8003fc0 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	fa02 f303 	lsl.w	r3, r2, r3
 8003e14:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	f040 80c9 	bne.w	8003fba <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8003e28:	4a6b      	ldr	r2, [pc, #428]	; (8003fd8 <HAL_GPIO_DeInit+0x1e8>)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	089b      	lsrs	r3, r3, #2
 8003e2e:	3302      	adds	r3, #2
 8003e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e34:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f003 0303 	and.w	r3, r3, #3
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	220f      	movs	r2, #15
 8003e40:	fa02 f303 	lsl.w	r3, r2, r3
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	4013      	ands	r3, r2
 8003e48:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a63      	ldr	r2, [pc, #396]	; (8003fdc <HAL_GPIO_DeInit+0x1ec>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d037      	beq.n	8003ec2 <HAL_GPIO_DeInit+0xd2>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a62      	ldr	r2, [pc, #392]	; (8003fe0 <HAL_GPIO_DeInit+0x1f0>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d031      	beq.n	8003ebe <HAL_GPIO_DeInit+0xce>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a61      	ldr	r2, [pc, #388]	; (8003fe4 <HAL_GPIO_DeInit+0x1f4>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d02b      	beq.n	8003eba <HAL_GPIO_DeInit+0xca>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a60      	ldr	r2, [pc, #384]	; (8003fe8 <HAL_GPIO_DeInit+0x1f8>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d025      	beq.n	8003eb6 <HAL_GPIO_DeInit+0xc6>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a5f      	ldr	r2, [pc, #380]	; (8003fec <HAL_GPIO_DeInit+0x1fc>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d01f      	beq.n	8003eb2 <HAL_GPIO_DeInit+0xc2>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a5e      	ldr	r2, [pc, #376]	; (8003ff0 <HAL_GPIO_DeInit+0x200>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d019      	beq.n	8003eae <HAL_GPIO_DeInit+0xbe>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a5d      	ldr	r2, [pc, #372]	; (8003ff4 <HAL_GPIO_DeInit+0x204>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d013      	beq.n	8003eaa <HAL_GPIO_DeInit+0xba>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a5c      	ldr	r2, [pc, #368]	; (8003ff8 <HAL_GPIO_DeInit+0x208>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d00d      	beq.n	8003ea6 <HAL_GPIO_DeInit+0xb6>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a5b      	ldr	r2, [pc, #364]	; (8003ffc <HAL_GPIO_DeInit+0x20c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d007      	beq.n	8003ea2 <HAL_GPIO_DeInit+0xb2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a5a      	ldr	r2, [pc, #360]	; (8004000 <HAL_GPIO_DeInit+0x210>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d101      	bne.n	8003e9e <HAL_GPIO_DeInit+0xae>
 8003e9a:	2309      	movs	r3, #9
 8003e9c:	e012      	b.n	8003ec4 <HAL_GPIO_DeInit+0xd4>
 8003e9e:	230a      	movs	r3, #10
 8003ea0:	e010      	b.n	8003ec4 <HAL_GPIO_DeInit+0xd4>
 8003ea2:	2308      	movs	r3, #8
 8003ea4:	e00e      	b.n	8003ec4 <HAL_GPIO_DeInit+0xd4>
 8003ea6:	2307      	movs	r3, #7
 8003ea8:	e00c      	b.n	8003ec4 <HAL_GPIO_DeInit+0xd4>
 8003eaa:	2306      	movs	r3, #6
 8003eac:	e00a      	b.n	8003ec4 <HAL_GPIO_DeInit+0xd4>
 8003eae:	2305      	movs	r3, #5
 8003eb0:	e008      	b.n	8003ec4 <HAL_GPIO_DeInit+0xd4>
 8003eb2:	2304      	movs	r3, #4
 8003eb4:	e006      	b.n	8003ec4 <HAL_GPIO_DeInit+0xd4>
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e004      	b.n	8003ec4 <HAL_GPIO_DeInit+0xd4>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e002      	b.n	8003ec4 <HAL_GPIO_DeInit+0xd4>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e000      	b.n	8003ec4 <HAL_GPIO_DeInit+0xd4>
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	f002 0203 	and.w	r2, r2, #3
 8003eca:	0092      	lsls	r2, r2, #2
 8003ecc:	4093      	lsls	r3, r2
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d132      	bne.n	8003f3a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003ed4:	4b4b      	ldr	r3, [pc, #300]	; (8004004 <HAL_GPIO_DeInit+0x214>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	43db      	mvns	r3, r3
 8003edc:	4949      	ldr	r1, [pc, #292]	; (8004004 <HAL_GPIO_DeInit+0x214>)
 8003ede:	4013      	ands	r3, r2
 8003ee0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003ee2:	4b48      	ldr	r3, [pc, #288]	; (8004004 <HAL_GPIO_DeInit+0x214>)
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	4946      	ldr	r1, [pc, #280]	; (8004004 <HAL_GPIO_DeInit+0x214>)
 8003eec:	4013      	ands	r3, r2
 8003eee:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003ef0:	4b44      	ldr	r3, [pc, #272]	; (8004004 <HAL_GPIO_DeInit+0x214>)
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	4942      	ldr	r1, [pc, #264]	; (8004004 <HAL_GPIO_DeInit+0x214>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003efe:	4b41      	ldr	r3, [pc, #260]	; (8004004 <HAL_GPIO_DeInit+0x214>)
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	43db      	mvns	r3, r3
 8003f06:	493f      	ldr	r1, [pc, #252]	; (8004004 <HAL_GPIO_DeInit+0x214>)
 8003f08:	4013      	ands	r3, r2
 8003f0a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	220f      	movs	r2, #15
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8003f1c:	4a2e      	ldr	r2, [pc, #184]	; (8003fd8 <HAL_GPIO_DeInit+0x1e8>)
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	089b      	lsrs	r3, r3, #2
 8003f22:	3302      	adds	r3, #2
 8003f24:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	43da      	mvns	r2, r3
 8003f2c:	482a      	ldr	r0, [pc, #168]	; (8003fd8 <HAL_GPIO_DeInit+0x1e8>)
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	089b      	lsrs	r3, r3, #2
 8003f32:	400a      	ands	r2, r1
 8003f34:	3302      	adds	r3, #2
 8003f36:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	2103      	movs	r1, #3
 8003f44:	fa01 f303 	lsl.w	r3, r1, r3
 8003f48:	43db      	mvns	r3, r3
 8003f4a:	401a      	ands	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	08da      	lsrs	r2, r3, #3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3208      	adds	r2, #8
 8003f58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f003 0307 	and.w	r3, r3, #7
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	220f      	movs	r2, #15
 8003f66:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	697a      	ldr	r2, [r7, #20]
 8003f6e:	08d2      	lsrs	r2, r2, #3
 8003f70:	4019      	ands	r1, r3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3208      	adds	r2, #8
 8003f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68da      	ldr	r2, [r3, #12]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	2103      	movs	r1, #3
 8003f84:	fa01 f303 	lsl.w	r3, r1, r3
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	401a      	ands	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	2101      	movs	r1, #1
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	401a      	ands	r2, r3
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	2103      	movs	r1, #3
 8003fae:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb2:	43db      	mvns	r3, r3
 8003fb4:	401a      	ands	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	617b      	str	r3, [r7, #20]
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b0f      	cmp	r3, #15
 8003fc4:	f67f af22 	bls.w	8003e0c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003fc8:	bf00      	nop
 8003fca:	bf00      	nop
 8003fcc:	371c      	adds	r7, #28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40013800 	.word	0x40013800
 8003fdc:	40020000 	.word	0x40020000
 8003fe0:	40020400 	.word	0x40020400
 8003fe4:	40020800 	.word	0x40020800
 8003fe8:	40020c00 	.word	0x40020c00
 8003fec:	40021000 	.word	0x40021000
 8003ff0:	40021400 	.word	0x40021400
 8003ff4:	40021800 	.word	0x40021800
 8003ff8:	40021c00 	.word	0x40021c00
 8003ffc:	40022000 	.word	0x40022000
 8004000:	40022400 	.word	0x40022400
 8004004:	40013c00 	.word	0x40013c00

08004008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	460b      	mov	r3, r1
 8004012:	807b      	strh	r3, [r7, #2]
 8004014:	4613      	mov	r3, r2
 8004016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004018:	787b      	ldrb	r3, [r7, #1]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800401e:	887a      	ldrh	r2, [r7, #2]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004024:	e003      	b.n	800402e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004026:	887b      	ldrh	r3, [r7, #2]
 8004028:	041a      	lsls	r2, r3, #16
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	619a      	str	r2, [r3, #24]
}
 800402e:	bf00      	nop
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800403a:	b480      	push	{r7}
 800403c:	b085      	sub	sp, #20
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
 8004042:	460b      	mov	r3, r1
 8004044:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800404c:	887a      	ldrh	r2, [r7, #2]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	4013      	ands	r3, r2
 8004052:	041a      	lsls	r2, r3, #16
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	43d9      	mvns	r1, r3
 8004058:	887b      	ldrh	r3, [r7, #2]
 800405a:	400b      	ands	r3, r1
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	619a      	str	r2, [r3, #24]
}
 8004062:	bf00      	nop
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
	...

08004070 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e07f      	b.n	8004182 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fe fbc2 	bl	8002820 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2224      	movs	r2, #36	; 0x24
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0201 	bic.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685a      	ldr	r2, [r3, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689a      	ldr	r2, [r3, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d107      	bne.n	80040ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	689a      	ldr	r2, [r3, #8]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040e6:	609a      	str	r2, [r3, #8]
 80040e8:	e006      	b.n	80040f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80040f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d104      	bne.n	800410a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004108:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6859      	ldr	r1, [r3, #4]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	4b1d      	ldr	r3, [pc, #116]	; (800418c <HAL_I2C_Init+0x11c>)
 8004116:	430b      	orrs	r3, r1
 8004118:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004128:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691a      	ldr	r2, [r3, #16]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	699b      	ldr	r3, [r3, #24]
 800413a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	69d9      	ldr	r1, [r3, #28]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6a1a      	ldr	r2, [r3, #32]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	430a      	orrs	r2, r1
 8004152:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	02008000 	.word	0x02008000

08004190 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d101      	bne.n	80041a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e021      	b.n	80041e6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2224      	movs	r2, #36	; 0x24
 80041a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0201 	bic.w	r2, r2, #1
 80041b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7fe fc2a 	bl	8002a14 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b088      	sub	sp, #32
 80041f4:	af02      	add	r7, sp, #8
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	607a      	str	r2, [r7, #4]
 80041fa:	461a      	mov	r2, r3
 80041fc:	460b      	mov	r3, r1
 80041fe:	817b      	strh	r3, [r7, #10]
 8004200:	4613      	mov	r3, r2
 8004202:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b20      	cmp	r3, #32
 800420e:	f040 80da 	bne.w	80043c6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004218:	2b01      	cmp	r3, #1
 800421a:	d101      	bne.n	8004220 <HAL_I2C_Master_Transmit+0x30>
 800421c:	2302      	movs	r3, #2
 800421e:	e0d3      	b.n	80043c8 <HAL_I2C_Master_Transmit+0x1d8>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004228:	f7fe ff4a 	bl	80030c0 <HAL_GetTick>
 800422c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	2319      	movs	r3, #25
 8004234:	2201      	movs	r2, #1
 8004236:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 fefb 	bl	8005036 <I2C_WaitOnFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d001      	beq.n	800424a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e0be      	b.n	80043c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2221      	movs	r2, #33	; 0x21
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2210      	movs	r2, #16
 8004256:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	893a      	ldrh	r2, [r7, #8]
 800426a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004276:	b29b      	uxth	r3, r3
 8004278:	2bff      	cmp	r3, #255	; 0xff
 800427a:	d90e      	bls.n	800429a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	22ff      	movs	r2, #255	; 0xff
 8004280:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004286:	b2da      	uxtb	r2, r3
 8004288:	8979      	ldrh	r1, [r7, #10]
 800428a:	4b51      	ldr	r3, [pc, #324]	; (80043d0 <HAL_I2C_Master_Transmit+0x1e0>)
 800428c:	9300      	str	r3, [sp, #0]
 800428e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f001 f8f2 	bl	800547c <I2C_TransferConfig>
 8004298:	e06c      	b.n	8004374 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29a      	uxth	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	8979      	ldrh	r1, [r7, #10]
 80042ac:	4b48      	ldr	r3, [pc, #288]	; (80043d0 <HAL_I2C_Master_Transmit+0x1e0>)
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f001 f8e1 	bl	800547c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80042ba:	e05b      	b.n	8004374 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042bc:	697a      	ldr	r2, [r7, #20]
 80042be:	6a39      	ldr	r1, [r7, #32]
 80042c0:	68f8      	ldr	r0, [r7, #12]
 80042c2:	f000 fef8 	bl	80050b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80042c6:	4603      	mov	r3, r0
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d001      	beq.n	80042d0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e07b      	b.n	80043c8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	781a      	ldrb	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f8:	3b01      	subs	r3, #1
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004304:	b29b      	uxth	r3, r3
 8004306:	2b00      	cmp	r3, #0
 8004308:	d034      	beq.n	8004374 <HAL_I2C_Master_Transmit+0x184>
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430e:	2b00      	cmp	r3, #0
 8004310:	d130      	bne.n	8004374 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	6a3b      	ldr	r3, [r7, #32]
 8004318:	2200      	movs	r2, #0
 800431a:	2180      	movs	r1, #128	; 0x80
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f000 fe8a 	bl	8005036 <I2C_WaitOnFlagUntilTimeout>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e04d      	b.n	80043c8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004330:	b29b      	uxth	r3, r3
 8004332:	2bff      	cmp	r3, #255	; 0xff
 8004334:	d90e      	bls.n	8004354 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	22ff      	movs	r2, #255	; 0xff
 800433a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004340:	b2da      	uxtb	r2, r3
 8004342:	8979      	ldrh	r1, [r7, #10]
 8004344:	2300      	movs	r3, #0
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f001 f895 	bl	800547c <I2C_TransferConfig>
 8004352:	e00f      	b.n	8004374 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004358:	b29a      	uxth	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004362:	b2da      	uxtb	r2, r3
 8004364:	8979      	ldrh	r1, [r7, #10]
 8004366:	2300      	movs	r3, #0
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f001 f884 	bl	800547c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d19e      	bne.n	80042bc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800437e:	697a      	ldr	r2, [r7, #20]
 8004380:	6a39      	ldr	r1, [r7, #32]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 fed7 	bl	8005136 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e01a      	b.n	80043c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2220      	movs	r2, #32
 8004398:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6859      	ldr	r1, [r3, #4]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <HAL_I2C_Master_Transmit+0x1e4>)
 80043a6:	400b      	ands	r3, r1
 80043a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2200      	movs	r2, #0
 80043be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043c2:	2300      	movs	r3, #0
 80043c4:	e000      	b.n	80043c8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80043c6:	2302      	movs	r3, #2
  }
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3718      	adds	r7, #24
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	80002000 	.word	0x80002000
 80043d4:	fe00e800 	.word	0xfe00e800

080043d8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b088      	sub	sp, #32
 80043dc:	af02      	add	r7, sp, #8
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	607a      	str	r2, [r7, #4]
 80043e2:	461a      	mov	r2, r3
 80043e4:	460b      	mov	r3, r1
 80043e6:	817b      	strh	r3, [r7, #10]
 80043e8:	4613      	mov	r3, r2
 80043ea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b20      	cmp	r3, #32
 80043f6:	f040 80db 	bne.w	80045b0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_I2C_Master_Receive+0x30>
 8004404:	2302      	movs	r3, #2
 8004406:	e0d4      	b.n	80045b2 <HAL_I2C_Master_Receive+0x1da>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004410:	f7fe fe56 	bl	80030c0 <HAL_GetTick>
 8004414:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	2319      	movs	r3, #25
 800441c:	2201      	movs	r2, #1
 800441e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 fe07 	bl	8005036 <I2C_WaitOnFlagUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e0bf      	b.n	80045b2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2222      	movs	r2, #34	; 0x22
 8004436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2210      	movs	r2, #16
 800443e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	893a      	ldrh	r2, [r7, #8]
 8004452:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800445e:	b29b      	uxth	r3, r3
 8004460:	2bff      	cmp	r3, #255	; 0xff
 8004462:	d90e      	bls.n	8004482 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	22ff      	movs	r2, #255	; 0xff
 8004468:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446e:	b2da      	uxtb	r2, r3
 8004470:	8979      	ldrh	r1, [r7, #10]
 8004472:	4b52      	ldr	r3, [pc, #328]	; (80045bc <HAL_I2C_Master_Receive+0x1e4>)
 8004474:	9300      	str	r3, [sp, #0]
 8004476:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 fffe 	bl	800547c <I2C_TransferConfig>
 8004480:	e06d      	b.n	800455e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004490:	b2da      	uxtb	r2, r3
 8004492:	8979      	ldrh	r1, [r7, #10]
 8004494:	4b49      	ldr	r3, [pc, #292]	; (80045bc <HAL_I2C_Master_Receive+0x1e4>)
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 ffed 	bl	800547c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80044a2:	e05c      	b.n	800455e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	6a39      	ldr	r1, [r7, #32]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fe81 	bl	80051b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e07c      	b.n	80045b2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d4:	3b01      	subs	r3, #1
 80044d6:	b29a      	uxth	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	3b01      	subs	r3, #1
 80044e4:	b29a      	uxth	r2, r3
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d034      	beq.n	800455e <HAL_I2C_Master_Receive+0x186>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d130      	bne.n	800455e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	2200      	movs	r2, #0
 8004504:	2180      	movs	r1, #128	; 0x80
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f000 fd95 	bl	8005036 <I2C_WaitOnFlagUntilTimeout>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e04d      	b.n	80045b2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451a:	b29b      	uxth	r3, r3
 800451c:	2bff      	cmp	r3, #255	; 0xff
 800451e:	d90e      	bls.n	800453e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	22ff      	movs	r2, #255	; 0xff
 8004524:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452a:	b2da      	uxtb	r2, r3
 800452c:	8979      	ldrh	r1, [r7, #10]
 800452e:	2300      	movs	r3, #0
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 ffa0 	bl	800547c <I2C_TransferConfig>
 800453c:	e00f      	b.n	800455e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004542:	b29a      	uxth	r2, r3
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800454c:	b2da      	uxtb	r2, r3
 800454e:	8979      	ldrh	r1, [r7, #10]
 8004550:	2300      	movs	r3, #0
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 ff8f 	bl	800547c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004562:	b29b      	uxth	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d19d      	bne.n	80044a4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	6a39      	ldr	r1, [r7, #32]
 800456c:	68f8      	ldr	r0, [r7, #12]
 800456e:	f000 fde2 	bl	8005136 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d001      	beq.n	800457c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e01a      	b.n	80045b2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2220      	movs	r2, #32
 8004582:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	6859      	ldr	r1, [r3, #4]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	4b0c      	ldr	r3, [pc, #48]	; (80045c0 <HAL_I2C_Master_Receive+0x1e8>)
 8004590:	400b      	ands	r3, r1
 8004592:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045ac:	2300      	movs	r3, #0
 80045ae:	e000      	b.n	80045b2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80045b0:	2302      	movs	r3, #2
  }
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	80002400 	.word	0x80002400
 80045c0:	fe00e800 	.word	0xfe00e800

080045c4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d005      	beq.n	80045f0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	68f9      	ldr	r1, [r7, #12]
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	4798      	blx	r3
  }
}
 80045f0:	bf00      	nop
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	0a1b      	lsrs	r3, r3, #8
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d010      	beq.n	800463e <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	09db      	lsrs	r3, r3, #7
 8004620:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800462c:	f043 0201 	orr.w	r2, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f44f 7280 	mov.w	r2, #256	; 0x100
 800463c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	0a9b      	lsrs	r3, r3, #10
 8004642:	f003 0301 	and.w	r3, r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	d010      	beq.n	800466c <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	09db      	lsrs	r3, r3, #7
 800464e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465a:	f043 0208 	orr.w	r2, r3, #8
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800466a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	0a5b      	lsrs	r3, r3, #9
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d010      	beq.n	800469a <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	09db      	lsrs	r3, r3, #7
 800467c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004688:	f043 0202 	orr.w	r2, r3, #2
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004698:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 030b 	and.w	r3, r3, #11
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80046aa:	68f9      	ldr	r1, [r7, #12]
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 fb89 	bl	8004dc4 <I2C_ITError>
  }
}
 80046b2:	bf00      	nop
 80046b4:	3718      	adds	r7, #24
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046ba:	b480      	push	{r7}
 80046bc:	b083      	sub	sp, #12
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80046c2:	bf00      	nop
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr

080046e2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80046e2:	b480      	push	{r7}
 80046e4:	b083      	sub	sp, #12
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	6078      	str	r0, [r7, #4]
 80046ea:	460b      	mov	r3, r1
 80046ec:	70fb      	strb	r3, [r7, #3]
 80046ee:	4613      	mov	r3, r2
 80046f0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004706:	bf00      	nop
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004726:	b480      	push	{r7}
 8004728:	b083      	sub	sp, #12
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800472e:	bf00      	nop
 8004730:	370c      	adds	r7, #12
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b086      	sub	sp, #24
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004756:	2b01      	cmp	r3, #1
 8004758:	d101      	bne.n	800475e <I2C_Slave_ISR_IT+0x24>
 800475a:	2302      	movs	r3, #2
 800475c:	e0ec      	b.n	8004938 <I2C_Slave_ISR_IT+0x1fe>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d009      	beq.n	8004786 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	095b      	lsrs	r3, r3, #5
 8004776:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800477a:	2b00      	cmp	r3, #0
 800477c:	d003      	beq.n	8004786 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800477e:	6939      	ldr	r1, [r7, #16]
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 f9bf 	bl	8004b04 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	091b      	lsrs	r3, r3, #4
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d04d      	beq.n	800482e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800479a:	2b00      	cmp	r3, #0
 800479c:	d047      	beq.n	800482e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d128      	bne.n	80047fa <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b28      	cmp	r3, #40	; 0x28
 80047b2:	d108      	bne.n	80047c6 <I2C_Slave_ISR_IT+0x8c>
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047ba:	d104      	bne.n	80047c6 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80047bc:	6939      	ldr	r1, [r7, #16]
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 faaa 	bl	8004d18 <I2C_ITListenCplt>
 80047c4:	e032      	b.n	800482c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b29      	cmp	r3, #41	; 0x29
 80047d0:	d10e      	bne.n	80047f0 <I2C_Slave_ISR_IT+0xb6>
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047d8:	d00a      	beq.n	80047f0 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2210      	movs	r2, #16
 80047e0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 fbe5 	bl	8004fb2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f92d 	bl	8004a48 <I2C_ITSlaveSeqCplt>
 80047ee:	e01d      	b.n	800482c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2210      	movs	r2, #16
 80047f6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80047f8:	e096      	b.n	8004928 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2210      	movs	r2, #16
 8004800:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004806:	f043 0204 	orr.w	r2, r3, #4
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d004      	beq.n	800481e <I2C_Slave_ISR_IT+0xe4>
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800481a:	f040 8085 	bne.w	8004928 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	4619      	mov	r1, r3
 8004824:	68f8      	ldr	r0, [r7, #12]
 8004826:	f000 facd 	bl	8004dc4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800482a:	e07d      	b.n	8004928 <I2C_Slave_ISR_IT+0x1ee>
 800482c:	e07c      	b.n	8004928 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	089b      	lsrs	r3, r3, #2
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	2b00      	cmp	r3, #0
 8004838:	d030      	beq.n	800489c <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	089b      	lsrs	r3, r3, #2
 800483e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004842:	2b00      	cmp	r3, #0
 8004844:	d02a      	beq.n	800489c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d018      	beq.n	8004882 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	1c5a      	adds	r2, r3, #1
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800486c:	3b01      	subs	r3, #1
 800486e:	b29a      	uxth	r2, r3
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004878:	b29b      	uxth	r3, r3
 800487a:	3b01      	subs	r3, #1
 800487c:	b29a      	uxth	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004886:	b29b      	uxth	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d14f      	bne.n	800492c <I2C_Slave_ISR_IT+0x1f2>
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004892:	d04b      	beq.n	800492c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 f8d7 	bl	8004a48 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800489a:	e047      	b.n	800492c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	08db      	lsrs	r3, r3, #3
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	08db      	lsrs	r3, r3, #3
 80048ac:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d004      	beq.n	80048be <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80048b4:	6939      	ldr	r1, [r7, #16]
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 f842 	bl	8004940 <I2C_ITAddrCplt>
 80048bc:	e037      	b.n	800492e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	085b      	lsrs	r3, r3, #1
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d031      	beq.n	800492e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d02b      	beq.n	800492e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048da:	b29b      	uxth	r3, r3
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d018      	beq.n	8004912 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e4:	781a      	ldrb	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	3b01      	subs	r3, #1
 80048fe:	b29a      	uxth	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004908:	3b01      	subs	r3, #1
 800490a:	b29a      	uxth	r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004910:	e00d      	b.n	800492e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004918:	d002      	beq.n	8004920 <I2C_Slave_ISR_IT+0x1e6>
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d106      	bne.n	800492e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f891 	bl	8004a48 <I2C_ITSlaveSeqCplt>
 8004926:	e002      	b.n	800492e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004928:	bf00      	nop
 800492a:	e000      	b.n	800492e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800492c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004950:	b2db      	uxtb	r3, r3
 8004952:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004956:	2b28      	cmp	r3, #40	; 0x28
 8004958:	d16a      	bne.n	8004a30 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	0c1b      	lsrs	r3, r3, #16
 8004962:	b2db      	uxtb	r3, r3
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	0c1b      	lsrs	r3, r3, #16
 8004972:	b29b      	uxth	r3, r3
 8004974:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004978:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	b29b      	uxth	r3, r3
 8004982:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004986:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	b29b      	uxth	r3, r3
 8004990:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004994:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d138      	bne.n	8004a10 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800499e:	897b      	ldrh	r3, [r7, #10]
 80049a0:	09db      	lsrs	r3, r3, #7
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	89bb      	ldrh	r3, [r7, #12]
 80049a6:	4053      	eors	r3, r2
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	f003 0306 	and.w	r3, r3, #6
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d11c      	bne.n	80049ec <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80049b2:	897b      	ldrh	r3, [r7, #10]
 80049b4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d13b      	bne.n	8004a40 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2208      	movs	r2, #8
 80049d4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80049de:	89ba      	ldrh	r2, [r7, #12]
 80049e0:	7bfb      	ldrb	r3, [r7, #15]
 80049e2:	4619      	mov	r1, r3
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7ff fe7c 	bl	80046e2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80049ea:	e029      	b.n	8004a40 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80049ec:	893b      	ldrh	r3, [r7, #8]
 80049ee:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80049f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fd73 	bl	80054e0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a02:	89ba      	ldrh	r2, [r7, #12]
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	4619      	mov	r1, r3
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f7ff fe6a 	bl	80046e2 <HAL_I2C_AddrCallback>
}
 8004a0e:	e017      	b.n	8004a40 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004a10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 fd63 	bl	80054e0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004a22:	89ba      	ldrh	r2, [r7, #12]
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
 8004a26:	4619      	mov	r1, r3
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f7ff fe5a 	bl	80046e2 <HAL_I2C_AddrCallback>
}
 8004a2e:	e007      	b.n	8004a40 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2208      	movs	r2, #8
 8004a36:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004a40:	bf00      	nop
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	0b9b      	lsrs	r3, r3, #14
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d008      	beq.n	8004a7e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	e00d      	b.n	8004a9a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	0bdb      	lsrs	r3, r3, #15
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d007      	beq.n	8004a9a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a98:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b29      	cmp	r3, #41	; 0x29
 8004aa4:	d112      	bne.n	8004acc <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2228      	movs	r2, #40	; 0x28
 8004aaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2221      	movs	r2, #33	; 0x21
 8004ab2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fd12 	bl	80054e0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f7ff fdf8 	bl	80046ba <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004aca:	e017      	b.n	8004afc <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad2:	b2db      	uxtb	r3, r3
 8004ad4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ad6:	d111      	bne.n	8004afc <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2228      	movs	r2, #40	; 0x28
 8004adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2222      	movs	r2, #34	; 0x22
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004ae6:	2102      	movs	r1, #2
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 fcf9 	bl	80054e0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff fde9 	bl	80046ce <HAL_I2C_SlaveRxCpltCallback>
}
 8004afc:	bf00      	nop
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b20:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2220      	movs	r2, #32
 8004b28:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	2b21      	cmp	r3, #33	; 0x21
 8004b2e:	d002      	beq.n	8004b36 <I2C_ITSlaveCplt+0x32>
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	2b29      	cmp	r3, #41	; 0x29
 8004b34:	d108      	bne.n	8004b48 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004b36:	f248 0101 	movw	r1, #32769	; 0x8001
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f000 fcd0 	bl	80054e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2221      	movs	r2, #33	; 0x21
 8004b44:	631a      	str	r2, [r3, #48]	; 0x30
 8004b46:	e00d      	b.n	8004b64 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004b48:	7bfb      	ldrb	r3, [r7, #15]
 8004b4a:	2b22      	cmp	r3, #34	; 0x22
 8004b4c:	d002      	beq.n	8004b54 <I2C_ITSlaveCplt+0x50>
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
 8004b50:	2b2a      	cmp	r3, #42	; 0x2a
 8004b52:	d107      	bne.n	8004b64 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004b54:	f248 0102 	movw	r1, #32770	; 0x8002
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 fcc1 	bl	80054e0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2222      	movs	r2, #34	; 0x22
 8004b62:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b72:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6859      	ldr	r1, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	4b64      	ldr	r3, [pc, #400]	; (8004d10 <I2C_ITSlaveCplt+0x20c>)
 8004b80:	400b      	ands	r3, r1
 8004b82:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 fa14 	bl	8004fb2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	0b9b      	lsrs	r3, r3, #14
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d013      	beq.n	8004bbe <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004ba4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d020      	beq.n	8004bf0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004bbc:	e018      	b.n	8004bf0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	0bdb      	lsrs	r3, r3, #15
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d012      	beq.n	8004bf0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bd8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d006      	beq.n	8004bf0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	089b      	lsrs	r3, r3, #2
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d020      	beq.n	8004c3e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	f023 0304 	bic.w	r3, r3, #4
 8004c02:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	1c5a      	adds	r2, r3, #1
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d00c      	beq.n	8004c3e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4c:	f043 0204 	orr.w	r2, r3, #4
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d010      	beq.n	8004c8c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c6e:	4619      	mov	r1, r3
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f8a7 	bl	8004dc4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b28      	cmp	r3, #40	; 0x28
 8004c80:	d141      	bne.n	8004d06 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004c82:	6979      	ldr	r1, [r7, #20]
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f847 	bl	8004d18 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c8a:	e03c      	b.n	8004d06 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c94:	d014      	beq.n	8004cc0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7ff fed6 	bl	8004a48 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a1d      	ldr	r2, [pc, #116]	; (8004d14 <I2C_ITSlaveCplt+0x210>)
 8004ca0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7ff fd20 	bl	80046fe <HAL_I2C_ListenCpltCallback>
}
 8004cbe:	e022      	b.n	8004d06 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b22      	cmp	r3, #34	; 0x22
 8004cca:	d10e      	bne.n	8004cea <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7ff fcf3 	bl	80046ce <HAL_I2C_SlaveRxCpltCallback>
}
 8004ce8:	e00d      	b.n	8004d06 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2220      	movs	r2, #32
 8004cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff fcda 	bl	80046ba <HAL_I2C_SlaveTxCpltCallback>
}
 8004d06:	bf00      	nop
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	fe00e800 	.word	0xfe00e800
 8004d14:	ffff0000 	.word	0xffff0000

08004d18 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b082      	sub	sp, #8
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a26      	ldr	r2, [pc, #152]	; (8004dc0 <I2C_ITListenCplt+0xa8>)
 8004d26:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	089b      	lsrs	r3, r3, #2
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d022      	beq.n	8004d96 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5a:	b2d2      	uxtb	r2, r2
 8004d5c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	1c5a      	adds	r2, r3, #1
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d012      	beq.n	8004d96 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8e:	f043 0204 	orr.w	r2, r3, #4
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d96:	f248 0103 	movw	r1, #32771	; 0x8003
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fba0 	bl	80054e0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2210      	movs	r2, #16
 8004da6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f7ff fca4 	bl	80046fe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004db6:	bf00      	nop
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	ffff0000 	.word	0xffff0000

08004dc4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a5d      	ldr	r2, [pc, #372]	; (8004f58 <I2C_ITError+0x194>)
 8004de2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	431a      	orrs	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
 8004df8:	2b28      	cmp	r3, #40	; 0x28
 8004dfa:	d005      	beq.n	8004e08 <I2C_ITError+0x44>
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	2b29      	cmp	r3, #41	; 0x29
 8004e00:	d002      	beq.n	8004e08 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	2b2a      	cmp	r3, #42	; 0x2a
 8004e06:	d10b      	bne.n	8004e20 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e08:	2103      	movs	r1, #3
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fb68 	bl	80054e0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2228      	movs	r2, #40	; 0x28
 8004e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a50      	ldr	r2, [pc, #320]	; (8004f5c <I2C_ITError+0x198>)
 8004e1c:	635a      	str	r2, [r3, #52]	; 0x34
 8004e1e:	e011      	b.n	8004e44 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004e20:	f248 0103 	movw	r1, #32771	; 0x8003
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 fb5b 	bl	80054e0 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b60      	cmp	r3, #96	; 0x60
 8004e34:	d003      	beq.n	8004e3e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e48:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d039      	beq.n	8004ec6 <I2C_ITError+0x102>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b11      	cmp	r3, #17
 8004e56:	d002      	beq.n	8004e5e <I2C_ITError+0x9a>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	2b21      	cmp	r3, #33	; 0x21
 8004e5c:	d133      	bne.n	8004ec6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e6c:	d107      	bne.n	8004e7e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e7c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fe fd48 	bl	8003918 <HAL_DMA_GetState>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d017      	beq.n	8004ebe <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e92:	4a33      	ldr	r2, [pc, #204]	; (8004f60 <I2C_ITError+0x19c>)
 8004e94:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fe fb8c 	bl	80035c0 <HAL_DMA_Abort_IT>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d04d      	beq.n	8004f4a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb4:	687a      	ldr	r2, [r7, #4]
 8004eb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004eb8:	4610      	mov	r0, r2
 8004eba:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ebc:	e045      	b.n	8004f4a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f850 	bl	8004f64 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ec4:	e041      	b.n	8004f4a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d039      	beq.n	8004f42 <I2C_ITError+0x17e>
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b12      	cmp	r3, #18
 8004ed2:	d002      	beq.n	8004eda <I2C_ITError+0x116>
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b22      	cmp	r3, #34	; 0x22
 8004ed8:	d133      	bne.n	8004f42 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ee8:	d107      	bne.n	8004efa <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ef8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fe fd0a 	bl	8003918 <HAL_DMA_GetState>
 8004f04:	4603      	mov	r3, r0
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d017      	beq.n	8004f3a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0e:	4a14      	ldr	r2, [pc, #80]	; (8004f60 <I2C_ITError+0x19c>)
 8004f10:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fe fb4e 	bl	80035c0 <HAL_DMA_Abort_IT>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d011      	beq.n	8004f4e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f34:	4610      	mov	r0, r2
 8004f36:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f38:	e009      	b.n	8004f4e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f812 	bl	8004f64 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f40:	e005      	b.n	8004f4e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f80e 	bl	8004f64 <I2C_TreatErrorCallback>
  }
}
 8004f48:	e002      	b.n	8004f50 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f4a:	bf00      	nop
 8004f4c:	e000      	b.n	8004f50 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f4e:	bf00      	nop
}
 8004f50:	bf00      	nop
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	ffff0000 	.word	0xffff0000
 8004f5c:	0800473b 	.word	0x0800473b
 8004f60:	08004ffb 	.word	0x08004ffb

08004f64 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b60      	cmp	r3, #96	; 0x60
 8004f76:	d10e      	bne.n	8004f96 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2200      	movs	r2, #0
 8004f84:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff fbc9 	bl	8004726 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f94:	e009      	b.n	8004faa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7ff fbb4 	bl	8004712 <HAL_I2C_ErrorCallback>
}
 8004faa:	bf00      	nop
 8004fac:	3708      	adds	r7, #8
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b083      	sub	sp, #12
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	f003 0302 	and.w	r3, r3, #2
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d103      	bne.n	8004fd0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	d007      	beq.n	8004fee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	699a      	ldr	r2, [r3, #24]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f042 0201 	orr.w	r2, r2, #1
 8004fec:	619a      	str	r2, [r3, #24]
  }
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800500c:	2b00      	cmp	r3, #0
 800500e:	d003      	beq.n	8005018 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005014:	2200      	movs	r2, #0
 8005016:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005024:	2200      	movs	r2, #0
 8005026:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f7ff ff9b 	bl	8004f64 <I2C_TreatErrorCallback>
}
 800502e:	bf00      	nop
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	60f8      	str	r0, [r7, #12]
 800503e:	60b9      	str	r1, [r7, #8]
 8005040:	603b      	str	r3, [r7, #0]
 8005042:	4613      	mov	r3, r2
 8005044:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005046:	e022      	b.n	800508e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800504e:	d01e      	beq.n	800508e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005050:	f7fe f836 	bl	80030c0 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	683a      	ldr	r2, [r7, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d302      	bcc.n	8005066 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d113      	bne.n	800508e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800506a:	f043 0220 	orr.w	r2, r3, #32
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e00f      	b.n	80050ae <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	699a      	ldr	r2, [r3, #24]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	4013      	ands	r3, r2
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	429a      	cmp	r2, r3
 800509c:	bf0c      	ite	eq
 800509e:	2301      	moveq	r3, #1
 80050a0:	2300      	movne	r3, #0
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	461a      	mov	r2, r3
 80050a6:	79fb      	ldrb	r3, [r7, #7]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d0cd      	beq.n	8005048 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3710      	adds	r7, #16
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b084      	sub	sp, #16
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80050c2:	e02c      	b.n	800511e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80050c4:	687a      	ldr	r2, [r7, #4]
 80050c6:	68b9      	ldr	r1, [r7, #8]
 80050c8:	68f8      	ldr	r0, [r7, #12]
 80050ca:	f000 f8eb 	bl	80052a4 <I2C_IsErrorOccurred>
 80050ce:	4603      	mov	r3, r0
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d001      	beq.n	80050d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e02a      	b.n	800512e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050de:	d01e      	beq.n	800511e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e0:	f7fd ffee 	bl	80030c0 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d302      	bcc.n	80050f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d113      	bne.n	800511e <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fa:	f043 0220 	orr.w	r2, r3, #32
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e007      	b.n	800512e <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	699b      	ldr	r3, [r3, #24]
 8005124:	f003 0302 	and.w	r3, r3, #2
 8005128:	2b02      	cmp	r3, #2
 800512a:	d1cb      	bne.n	80050c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005142:	e028      	b.n	8005196 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	68b9      	ldr	r1, [r7, #8]
 8005148:	68f8      	ldr	r0, [r7, #12]
 800514a:	f000 f8ab 	bl	80052a4 <I2C_IsErrorOccurred>
 800514e:	4603      	mov	r3, r0
 8005150:	2b00      	cmp	r3, #0
 8005152:	d001      	beq.n	8005158 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e026      	b.n	80051a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005158:	f7fd ffb2 	bl	80030c0 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	429a      	cmp	r2, r3
 8005166:	d302      	bcc.n	800516e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d113      	bne.n	8005196 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005172:	f043 0220 	orr.w	r2, r3, #32
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2220      	movs	r2, #32
 800517e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e007      	b.n	80051a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	f003 0320 	and.w	r3, r3, #32
 80051a0:	2b20      	cmp	r3, #32
 80051a2:	d1cf      	bne.n	8005144 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051a4:	2300      	movs	r3, #0
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
	...

080051b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051bc:	e064      	b.n	8005288 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	68b9      	ldr	r1, [r7, #8]
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 f86e 	bl	80052a4 <I2C_IsErrorOccurred>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e062      	b.n	8005298 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b20      	cmp	r3, #32
 80051de:	d138      	bne.n	8005252 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d105      	bne.n	80051fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	e04e      	b.n	8005298 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b10      	cmp	r3, #16
 8005206:	d107      	bne.n	8005218 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2210      	movs	r2, #16
 800520e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2204      	movs	r2, #4
 8005214:	645a      	str	r2, [r3, #68]	; 0x44
 8005216:	e002      	b.n	800521e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2200      	movs	r2, #0
 800521c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2220      	movs	r2, #32
 8005224:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6859      	ldr	r1, [r3, #4]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8005232:	400b      	ands	r3, r1
 8005234:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2220      	movs	r2, #32
 800523a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e022      	b.n	8005298 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005252:	f7fd ff35 	bl	80030c0 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	429a      	cmp	r2, r3
 8005260:	d302      	bcc.n	8005268 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10f      	bne.n	8005288 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800526c:	f043 0220 	orr.w	r2, r3, #32
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2220      	movs	r2, #32
 8005278:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e007      	b.n	8005298 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b04      	cmp	r3, #4
 8005294:	d193      	bne.n	80051be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	fe00e800 	.word	0xfe00e800

080052a4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b08a      	sub	sp, #40	; 0x28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	f003 0310 	and.w	r3, r3, #16
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d075      	beq.n	80053bc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2210      	movs	r2, #16
 80052d6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80052d8:	e056      	b.n	8005388 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052e0:	d052      	beq.n	8005388 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80052e2:	f7fd feed 	bl	80030c0 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d302      	bcc.n	80052f8 <I2C_IsErrorOccurred+0x54>
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d147      	bne.n	8005388 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005302:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800530a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800531a:	d12e      	bne.n	800537a <I2C_IsErrorOccurred+0xd6>
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005322:	d02a      	beq.n	800537a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8005324:	7cfb      	ldrb	r3, [r7, #19]
 8005326:	2b20      	cmp	r3, #32
 8005328:	d027      	beq.n	800537a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	685a      	ldr	r2, [r3, #4]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005338:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800533a:	f7fd fec1 	bl	80030c0 <HAL_GetTick>
 800533e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005340:	e01b      	b.n	800537a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005342:	f7fd febd 	bl	80030c0 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b19      	cmp	r3, #25
 800534e:	d914      	bls.n	800537a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005354:	f043 0220 	orr.w	r2, r3, #32
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	f003 0320 	and.w	r3, r3, #32
 8005384:	2b20      	cmp	r3, #32
 8005386:	d1dc      	bne.n	8005342 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	f003 0320 	and.w	r3, r3, #32
 8005392:	2b20      	cmp	r3, #32
 8005394:	d003      	beq.n	800539e <I2C_IsErrorOccurred+0xfa>
 8005396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800539a:	2b00      	cmp	r3, #0
 800539c:	d09d      	beq.n	80052da <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800539e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d103      	bne.n	80053ae <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2220      	movs	r2, #32
 80053ac:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	f043 0304 	orr.w	r3, r3, #4
 80053b4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80053c4:	69bb      	ldr	r3, [r7, #24]
 80053c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00b      	beq.n	80053e6 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80053ce:	6a3b      	ldr	r3, [r7, #32]
 80053d0:	f043 0301 	orr.w	r3, r3, #1
 80053d4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053de:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d00b      	beq.n	8005408 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	f043 0308 	orr.w	r3, r3, #8
 80053f6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005400:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005408:	69bb      	ldr	r3, [r7, #24]
 800540a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005412:	6a3b      	ldr	r3, [r7, #32]
 8005414:	f043 0302 	orr.w	r3, r3, #2
 8005418:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005422:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800542a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800542e:	2b00      	cmp	r3, #0
 8005430:	d01c      	beq.n	800546c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f7ff fdbd 	bl	8004fb2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6859      	ldr	r1, [r3, #4]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	4b0d      	ldr	r3, [pc, #52]	; (8005478 <I2C_IsErrorOccurred+0x1d4>)
 8005444:	400b      	ands	r3, r1
 8005446:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	431a      	orrs	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2220      	movs	r2, #32
 8005458:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800546c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005470:	4618      	mov	r0, r3
 8005472:	3728      	adds	r7, #40	; 0x28
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}
 8005478:	fe00e800 	.word	0xfe00e800

0800547c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	607b      	str	r3, [r7, #4]
 8005486:	460b      	mov	r3, r1
 8005488:	817b      	strh	r3, [r7, #10]
 800548a:	4613      	mov	r3, r2
 800548c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800548e:	897b      	ldrh	r3, [r7, #10]
 8005490:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005494:	7a7b      	ldrb	r3, [r7, #9]
 8005496:	041b      	lsls	r3, r3, #16
 8005498:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800549c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054aa:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	0d5b      	lsrs	r3, r3, #21
 80054b6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80054ba:	4b08      	ldr	r3, [pc, #32]	; (80054dc <I2C_TransferConfig+0x60>)
 80054bc:	430b      	orrs	r3, r1
 80054be:	43db      	mvns	r3, r3
 80054c0:	ea02 0103 	and.w	r1, r2, r3
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	430a      	orrs	r2, r1
 80054cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80054ce:	bf00      	nop
 80054d0:	371c      	adds	r7, #28
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	03ff63ff 	.word	0x03ff63ff

080054e0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80054ec:	2300      	movs	r3, #0
 80054ee:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80054f0:	887b      	ldrh	r3, [r7, #2]
 80054f2:	f003 0301 	and.w	r3, r3, #1
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00f      	beq.n	800551a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005500:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005508:	b2db      	uxtb	r3, r3
 800550a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800550e:	2b28      	cmp	r3, #40	; 0x28
 8005510:	d003      	beq.n	800551a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005518:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800551a:	887b      	ldrh	r3, [r7, #2]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00f      	beq.n	8005544 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800552a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005532:	b2db      	uxtb	r3, r3
 8005534:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005538:	2b28      	cmp	r3, #40	; 0x28
 800553a:	d003      	beq.n	8005544 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005542:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005544:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005548:	2b00      	cmp	r3, #0
 800554a:	da03      	bge.n	8005554 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005552:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005554:	887b      	ldrh	r3, [r7, #2]
 8005556:	2b10      	cmp	r3, #16
 8005558:	d103      	bne.n	8005562 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005560:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005562:	887b      	ldrh	r3, [r7, #2]
 8005564:	2b20      	cmp	r3, #32
 8005566:	d103      	bne.n	8005570 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f043 0320 	orr.w	r3, r3, #32
 800556e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005570:	887b      	ldrh	r3, [r7, #2]
 8005572:	2b40      	cmp	r3, #64	; 0x40
 8005574:	d103      	bne.n	800557e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800557c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	6819      	ldr	r1, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	43da      	mvns	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	400a      	ands	r2, r1
 800558e:	601a      	str	r2, [r3, #0]
}
 8005590:	bf00      	nop
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	d138      	bne.n	8005624 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055bc:	2302      	movs	r3, #2
 80055be:	e032      	b.n	8005626 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2224      	movs	r2, #36	; 0x24
 80055cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0201 	bic.w	r2, r2, #1
 80055de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6819      	ldr	r1, [r3, #0]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	683a      	ldr	r2, [r7, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f042 0201 	orr.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	e000      	b.n	8005626 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005624:	2302      	movs	r3, #2
  }
}
 8005626:	4618      	mov	r0, r3
 8005628:	370c      	adds	r7, #12
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr

08005632 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005632:	b480      	push	{r7}
 8005634:	b085      	sub	sp, #20
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
 800563a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b20      	cmp	r3, #32
 8005646:	d139      	bne.n	80056bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005652:	2302      	movs	r3, #2
 8005654:	e033      	b.n	80056be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2224      	movs	r2, #36	; 0x24
 8005662:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f022 0201 	bic.w	r2, r2, #1
 8005674:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005684:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	021b      	lsls	r3, r3, #8
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f042 0201 	orr.w	r2, r2, #1
 80056a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80056b8:	2300      	movs	r3, #0
 80056ba:	e000      	b.n	80056be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056bc:	2302      	movs	r3, #2
  }
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80056cc:	b480      	push	{r7}
 80056ce:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056d0:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a04      	ldr	r2, [pc, #16]	; (80056e8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80056d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056da:	6013      	str	r3, [r2, #0]
}
 80056dc:	bf00      	nop
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40007000 	.word	0x40007000

080056ec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80056f4:	2300      	movs	r3, #0
 80056f6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e29b      	b.n	8005c3a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 8087 	beq.w	800581e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005710:	4b96      	ldr	r3, [pc, #600]	; (800596c <HAL_RCC_OscConfig+0x280>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 030c 	and.w	r3, r3, #12
 8005718:	2b04      	cmp	r3, #4
 800571a:	d00c      	beq.n	8005736 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800571c:	4b93      	ldr	r3, [pc, #588]	; (800596c <HAL_RCC_OscConfig+0x280>)
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	f003 030c 	and.w	r3, r3, #12
 8005724:	2b08      	cmp	r3, #8
 8005726:	d112      	bne.n	800574e <HAL_RCC_OscConfig+0x62>
 8005728:	4b90      	ldr	r3, [pc, #576]	; (800596c <HAL_RCC_OscConfig+0x280>)
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005730:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005734:	d10b      	bne.n	800574e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005736:	4b8d      	ldr	r3, [pc, #564]	; (800596c <HAL_RCC_OscConfig+0x280>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d06c      	beq.n	800581c <HAL_RCC_OscConfig+0x130>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d168      	bne.n	800581c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	e275      	b.n	8005c3a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005756:	d106      	bne.n	8005766 <HAL_RCC_OscConfig+0x7a>
 8005758:	4b84      	ldr	r3, [pc, #528]	; (800596c <HAL_RCC_OscConfig+0x280>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a83      	ldr	r2, [pc, #524]	; (800596c <HAL_RCC_OscConfig+0x280>)
 800575e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005762:	6013      	str	r3, [r2, #0]
 8005764:	e02e      	b.n	80057c4 <HAL_RCC_OscConfig+0xd8>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10c      	bne.n	8005788 <HAL_RCC_OscConfig+0x9c>
 800576e:	4b7f      	ldr	r3, [pc, #508]	; (800596c <HAL_RCC_OscConfig+0x280>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a7e      	ldr	r2, [pc, #504]	; (800596c <HAL_RCC_OscConfig+0x280>)
 8005774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005778:	6013      	str	r3, [r2, #0]
 800577a:	4b7c      	ldr	r3, [pc, #496]	; (800596c <HAL_RCC_OscConfig+0x280>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a7b      	ldr	r2, [pc, #492]	; (800596c <HAL_RCC_OscConfig+0x280>)
 8005780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	e01d      	b.n	80057c4 <HAL_RCC_OscConfig+0xd8>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005790:	d10c      	bne.n	80057ac <HAL_RCC_OscConfig+0xc0>
 8005792:	4b76      	ldr	r3, [pc, #472]	; (800596c <HAL_RCC_OscConfig+0x280>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a75      	ldr	r2, [pc, #468]	; (800596c <HAL_RCC_OscConfig+0x280>)
 8005798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	4b73      	ldr	r3, [pc, #460]	; (800596c <HAL_RCC_OscConfig+0x280>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a72      	ldr	r2, [pc, #456]	; (800596c <HAL_RCC_OscConfig+0x280>)
 80057a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057a8:	6013      	str	r3, [r2, #0]
 80057aa:	e00b      	b.n	80057c4 <HAL_RCC_OscConfig+0xd8>
 80057ac:	4b6f      	ldr	r3, [pc, #444]	; (800596c <HAL_RCC_OscConfig+0x280>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a6e      	ldr	r2, [pc, #440]	; (800596c <HAL_RCC_OscConfig+0x280>)
 80057b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b6:	6013      	str	r3, [r2, #0]
 80057b8:	4b6c      	ldr	r3, [pc, #432]	; (800596c <HAL_RCC_OscConfig+0x280>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a6b      	ldr	r2, [pc, #428]	; (800596c <HAL_RCC_OscConfig+0x280>)
 80057be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d013      	beq.n	80057f4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057cc:	f7fd fc78 	bl	80030c0 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057d4:	f7fd fc74 	bl	80030c0 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b64      	cmp	r3, #100	; 0x64
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e229      	b.n	8005c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057e6:	4b61      	ldr	r3, [pc, #388]	; (800596c <HAL_RCC_OscConfig+0x280>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0f0      	beq.n	80057d4 <HAL_RCC_OscConfig+0xe8>
 80057f2:	e014      	b.n	800581e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f4:	f7fd fc64 	bl	80030c0 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057fc:	f7fd fc60 	bl	80030c0 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b64      	cmp	r3, #100	; 0x64
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e215      	b.n	8005c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800580e:	4b57      	ldr	r3, [pc, #348]	; (800596c <HAL_RCC_OscConfig+0x280>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1f0      	bne.n	80057fc <HAL_RCC_OscConfig+0x110>
 800581a:	e000      	b.n	800581e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800581c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 0302 	and.w	r3, r3, #2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d069      	beq.n	80058fe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800582a:	4b50      	ldr	r3, [pc, #320]	; (800596c <HAL_RCC_OscConfig+0x280>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 030c 	and.w	r3, r3, #12
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00b      	beq.n	800584e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005836:	4b4d      	ldr	r3, [pc, #308]	; (800596c <HAL_RCC_OscConfig+0x280>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	f003 030c 	and.w	r3, r3, #12
 800583e:	2b08      	cmp	r3, #8
 8005840:	d11c      	bne.n	800587c <HAL_RCC_OscConfig+0x190>
 8005842:	4b4a      	ldr	r3, [pc, #296]	; (800596c <HAL_RCC_OscConfig+0x280>)
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800584a:	2b00      	cmp	r3, #0
 800584c:	d116      	bne.n	800587c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800584e:	4b47      	ldr	r3, [pc, #284]	; (800596c <HAL_RCC_OscConfig+0x280>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d005      	beq.n	8005866 <HAL_RCC_OscConfig+0x17a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d001      	beq.n	8005866 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e1e9      	b.n	8005c3a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005866:	4b41      	ldr	r3, [pc, #260]	; (800596c <HAL_RCC_OscConfig+0x280>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	493d      	ldr	r1, [pc, #244]	; (800596c <HAL_RCC_OscConfig+0x280>)
 8005876:	4313      	orrs	r3, r2
 8005878:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800587a:	e040      	b.n	80058fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d023      	beq.n	80058cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005884:	4b39      	ldr	r3, [pc, #228]	; (800596c <HAL_RCC_OscConfig+0x280>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a38      	ldr	r2, [pc, #224]	; (800596c <HAL_RCC_OscConfig+0x280>)
 800588a:	f043 0301 	orr.w	r3, r3, #1
 800588e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005890:	f7fd fc16 	bl	80030c0 <HAL_GetTick>
 8005894:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005896:	e008      	b.n	80058aa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005898:	f7fd fc12 	bl	80030c0 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d901      	bls.n	80058aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	e1c7      	b.n	8005c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058aa:	4b30      	ldr	r3, [pc, #192]	; (800596c <HAL_RCC_OscConfig+0x280>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0f0      	beq.n	8005898 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b6:	4b2d      	ldr	r3, [pc, #180]	; (800596c <HAL_RCC_OscConfig+0x280>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	4929      	ldr	r1, [pc, #164]	; (800596c <HAL_RCC_OscConfig+0x280>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	600b      	str	r3, [r1, #0]
 80058ca:	e018      	b.n	80058fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80058cc:	4b27      	ldr	r3, [pc, #156]	; (800596c <HAL_RCC_OscConfig+0x280>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a26      	ldr	r2, [pc, #152]	; (800596c <HAL_RCC_OscConfig+0x280>)
 80058d2:	f023 0301 	bic.w	r3, r3, #1
 80058d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d8:	f7fd fbf2 	bl	80030c0 <HAL_GetTick>
 80058dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058de:	e008      	b.n	80058f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058e0:	f7fd fbee 	bl	80030c0 <HAL_GetTick>
 80058e4:	4602      	mov	r2, r0
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e1a3      	b.n	8005c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80058f2:	4b1e      	ldr	r3, [pc, #120]	; (800596c <HAL_RCC_OscConfig+0x280>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1f0      	bne.n	80058e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0308 	and.w	r3, r3, #8
 8005906:	2b00      	cmp	r3, #0
 8005908:	d038      	beq.n	800597c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d019      	beq.n	8005946 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005912:	4b16      	ldr	r3, [pc, #88]	; (800596c <HAL_RCC_OscConfig+0x280>)
 8005914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005916:	4a15      	ldr	r2, [pc, #84]	; (800596c <HAL_RCC_OscConfig+0x280>)
 8005918:	f043 0301 	orr.w	r3, r3, #1
 800591c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800591e:	f7fd fbcf 	bl	80030c0 <HAL_GetTick>
 8005922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005924:	e008      	b.n	8005938 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005926:	f7fd fbcb 	bl	80030c0 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	2b02      	cmp	r3, #2
 8005932:	d901      	bls.n	8005938 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005934:	2303      	movs	r3, #3
 8005936:	e180      	b.n	8005c3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005938:	4b0c      	ldr	r3, [pc, #48]	; (800596c <HAL_RCC_OscConfig+0x280>)
 800593a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0f0      	beq.n	8005926 <HAL_RCC_OscConfig+0x23a>
 8005944:	e01a      	b.n	800597c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005946:	4b09      	ldr	r3, [pc, #36]	; (800596c <HAL_RCC_OscConfig+0x280>)
 8005948:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800594a:	4a08      	ldr	r2, [pc, #32]	; (800596c <HAL_RCC_OscConfig+0x280>)
 800594c:	f023 0301 	bic.w	r3, r3, #1
 8005950:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005952:	f7fd fbb5 	bl	80030c0 <HAL_GetTick>
 8005956:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005958:	e00a      	b.n	8005970 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800595a:	f7fd fbb1 	bl	80030c0 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d903      	bls.n	8005970 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e166      	b.n	8005c3a <HAL_RCC_OscConfig+0x54e>
 800596c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005970:	4b92      	ldr	r3, [pc, #584]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005972:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005974:	f003 0302 	and.w	r3, r3, #2
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1ee      	bne.n	800595a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f003 0304 	and.w	r3, r3, #4
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 80a4 	beq.w	8005ad2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800598a:	4b8c      	ldr	r3, [pc, #560]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d10d      	bne.n	80059b2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005996:	4b89      	ldr	r3, [pc, #548]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	4a88      	ldr	r2, [pc, #544]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 800599c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059a0:	6413      	str	r3, [r2, #64]	; 0x40
 80059a2:	4b86      	ldr	r3, [pc, #536]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059aa:	60bb      	str	r3, [r7, #8]
 80059ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059ae:	2301      	movs	r3, #1
 80059b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059b2:	4b83      	ldr	r3, [pc, #524]	; (8005bc0 <HAL_RCC_OscConfig+0x4d4>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d118      	bne.n	80059f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80059be:	4b80      	ldr	r3, [pc, #512]	; (8005bc0 <HAL_RCC_OscConfig+0x4d4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a7f      	ldr	r2, [pc, #508]	; (8005bc0 <HAL_RCC_OscConfig+0x4d4>)
 80059c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80059ca:	f7fd fb79 	bl	80030c0 <HAL_GetTick>
 80059ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059d0:	e008      	b.n	80059e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059d2:	f7fd fb75 	bl	80030c0 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	2b64      	cmp	r3, #100	; 0x64
 80059de:	d901      	bls.n	80059e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e12a      	b.n	8005c3a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80059e4:	4b76      	ldr	r3, [pc, #472]	; (8005bc0 <HAL_RCC_OscConfig+0x4d4>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d0f0      	beq.n	80059d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d106      	bne.n	8005a06 <HAL_RCC_OscConfig+0x31a>
 80059f8:	4b70      	ldr	r3, [pc, #448]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 80059fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059fc:	4a6f      	ldr	r2, [pc, #444]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 80059fe:	f043 0301 	orr.w	r3, r3, #1
 8005a02:	6713      	str	r3, [r2, #112]	; 0x70
 8005a04:	e02d      	b.n	8005a62 <HAL_RCC_OscConfig+0x376>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10c      	bne.n	8005a28 <HAL_RCC_OscConfig+0x33c>
 8005a0e:	4b6b      	ldr	r3, [pc, #428]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a12:	4a6a      	ldr	r2, [pc, #424]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005a14:	f023 0301 	bic.w	r3, r3, #1
 8005a18:	6713      	str	r3, [r2, #112]	; 0x70
 8005a1a:	4b68      	ldr	r3, [pc, #416]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1e:	4a67      	ldr	r2, [pc, #412]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005a20:	f023 0304 	bic.w	r3, r3, #4
 8005a24:	6713      	str	r3, [r2, #112]	; 0x70
 8005a26:	e01c      	b.n	8005a62 <HAL_RCC_OscConfig+0x376>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	2b05      	cmp	r3, #5
 8005a2e:	d10c      	bne.n	8005a4a <HAL_RCC_OscConfig+0x35e>
 8005a30:	4b62      	ldr	r3, [pc, #392]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a34:	4a61      	ldr	r2, [pc, #388]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005a36:	f043 0304 	orr.w	r3, r3, #4
 8005a3a:	6713      	str	r3, [r2, #112]	; 0x70
 8005a3c:	4b5f      	ldr	r3, [pc, #380]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a40:	4a5e      	ldr	r2, [pc, #376]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005a42:	f043 0301 	orr.w	r3, r3, #1
 8005a46:	6713      	str	r3, [r2, #112]	; 0x70
 8005a48:	e00b      	b.n	8005a62 <HAL_RCC_OscConfig+0x376>
 8005a4a:	4b5c      	ldr	r3, [pc, #368]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4e:	4a5b      	ldr	r2, [pc, #364]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005a50:	f023 0301 	bic.w	r3, r3, #1
 8005a54:	6713      	str	r3, [r2, #112]	; 0x70
 8005a56:	4b59      	ldr	r3, [pc, #356]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5a:	4a58      	ldr	r2, [pc, #352]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005a5c:	f023 0304 	bic.w	r3, r3, #4
 8005a60:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d015      	beq.n	8005a96 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a6a:	f7fd fb29 	bl	80030c0 <HAL_GetTick>
 8005a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a70:	e00a      	b.n	8005a88 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a72:	f7fd fb25 	bl	80030c0 <HAL_GetTick>
 8005a76:	4602      	mov	r2, r0
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	1ad3      	subs	r3, r2, r3
 8005a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d901      	bls.n	8005a88 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e0d8      	b.n	8005c3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a88:	4b4c      	ldr	r3, [pc, #304]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d0ee      	beq.n	8005a72 <HAL_RCC_OscConfig+0x386>
 8005a94:	e014      	b.n	8005ac0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a96:	f7fd fb13 	bl	80030c0 <HAL_GetTick>
 8005a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a9c:	e00a      	b.n	8005ab4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a9e:	f7fd fb0f 	bl	80030c0 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d901      	bls.n	8005ab4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e0c2      	b.n	8005c3a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ab4:	4b41      	ldr	r3, [pc, #260]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1ee      	bne.n	8005a9e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ac0:	7dfb      	ldrb	r3, [r7, #23]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d105      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ac6:	4b3d      	ldr	r3, [pc, #244]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aca:	4a3c      	ldr	r2, [pc, #240]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ad0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 80ae 	beq.w	8005c38 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005adc:	4b37      	ldr	r3, [pc, #220]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 030c 	and.w	r3, r3, #12
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d06d      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	699b      	ldr	r3, [r3, #24]
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	d14b      	bne.n	8005b88 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af0:	4b32      	ldr	r3, [pc, #200]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a31      	ldr	r2, [pc, #196]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005afc:	f7fd fae0 	bl	80030c0 <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b02:	e008      	b.n	8005b16 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b04:	f7fd fadc 	bl	80030c0 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b02      	cmp	r3, #2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e091      	b.n	8005c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b16:	4b29      	ldr	r3, [pc, #164]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f0      	bne.n	8005b04 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69da      	ldr	r2, [r3, #28]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	019b      	lsls	r3, r3, #6
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b38:	085b      	lsrs	r3, r3, #1
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	041b      	lsls	r3, r3, #16
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	061b      	lsls	r3, r3, #24
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4c:	071b      	lsls	r3, r3, #28
 8005b4e:	491b      	ldr	r1, [pc, #108]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b54:	4b19      	ldr	r3, [pc, #100]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a18      	ldr	r2, [pc, #96]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005b5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b60:	f7fd faae 	bl	80030c0 <HAL_GetTick>
 8005b64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b66:	e008      	b.n	8005b7a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b68:	f7fd faaa 	bl	80030c0 <HAL_GetTick>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e05f      	b.n	8005c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b7a:	4b10      	ldr	r3, [pc, #64]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0f0      	beq.n	8005b68 <HAL_RCC_OscConfig+0x47c>
 8005b86:	e057      	b.n	8005c38 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b88:	4b0c      	ldr	r3, [pc, #48]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a0b      	ldr	r2, [pc, #44]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005b8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b94:	f7fd fa94 	bl	80030c0 <HAL_GetTick>
 8005b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b9a:	e008      	b.n	8005bae <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b9c:	f7fd fa90 	bl	80030c0 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	d901      	bls.n	8005bae <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005baa:	2303      	movs	r3, #3
 8005bac:	e045      	b.n	8005c3a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bae:	4b03      	ldr	r3, [pc, #12]	; (8005bbc <HAL_RCC_OscConfig+0x4d0>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1f0      	bne.n	8005b9c <HAL_RCC_OscConfig+0x4b0>
 8005bba:	e03d      	b.n	8005c38 <HAL_RCC_OscConfig+0x54c>
 8005bbc:	40023800 	.word	0x40023800
 8005bc0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005bc4:	4b1f      	ldr	r3, [pc, #124]	; (8005c44 <HAL_RCC_OscConfig+0x558>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d030      	beq.n	8005c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d129      	bne.n	8005c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d122      	bne.n	8005c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005bfa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d119      	bne.n	8005c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0a:	085b      	lsrs	r3, r3, #1
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d10f      	bne.n	8005c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d107      	bne.n	8005c34 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d001      	beq.n	8005c38 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e000      	b.n	8005c3a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3718      	adds	r7, #24
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	40023800 	.word	0x40023800

08005c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
 8005c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e0d0      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c60:	4b6a      	ldr	r3, [pc, #424]	; (8005e0c <HAL_RCC_ClockConfig+0x1c4>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d910      	bls.n	8005c90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c6e:	4b67      	ldr	r3, [pc, #412]	; (8005e0c <HAL_RCC_ClockConfig+0x1c4>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f023 020f 	bic.w	r2, r3, #15
 8005c76:	4965      	ldr	r1, [pc, #404]	; (8005e0c <HAL_RCC_ClockConfig+0x1c4>)
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c7e:	4b63      	ldr	r3, [pc, #396]	; (8005e0c <HAL_RCC_ClockConfig+0x1c4>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d001      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	e0b8      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d020      	beq.n	8005cde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0304 	and.w	r3, r3, #4
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d005      	beq.n	8005cb4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ca8:	4b59      	ldr	r3, [pc, #356]	; (8005e10 <HAL_RCC_ClockConfig+0x1c8>)
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	4a58      	ldr	r2, [pc, #352]	; (8005e10 <HAL_RCC_ClockConfig+0x1c8>)
 8005cae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005cb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d005      	beq.n	8005ccc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cc0:	4b53      	ldr	r3, [pc, #332]	; (8005e10 <HAL_RCC_ClockConfig+0x1c8>)
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	4a52      	ldr	r2, [pc, #328]	; (8005e10 <HAL_RCC_ClockConfig+0x1c8>)
 8005cc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ccc:	4b50      	ldr	r3, [pc, #320]	; (8005e10 <HAL_RCC_ClockConfig+0x1c8>)
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	494d      	ldr	r1, [pc, #308]	; (8005e10 <HAL_RCC_ClockConfig+0x1c8>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d040      	beq.n	8005d6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d107      	bne.n	8005d02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cf2:	4b47      	ldr	r3, [pc, #284]	; (8005e10 <HAL_RCC_ClockConfig+0x1c8>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d115      	bne.n	8005d2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e07f      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d107      	bne.n	8005d1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d0a:	4b41      	ldr	r3, [pc, #260]	; (8005e10 <HAL_RCC_ClockConfig+0x1c8>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d109      	bne.n	8005d2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e073      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d1a:	4b3d      	ldr	r3, [pc, #244]	; (8005e10 <HAL_RCC_ClockConfig+0x1c8>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e06b      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d2a:	4b39      	ldr	r3, [pc, #228]	; (8005e10 <HAL_RCC_ClockConfig+0x1c8>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f023 0203 	bic.w	r2, r3, #3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	4936      	ldr	r1, [pc, #216]	; (8005e10 <HAL_RCC_ClockConfig+0x1c8>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d3c:	f7fd f9c0 	bl	80030c0 <HAL_GetTick>
 8005d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d42:	e00a      	b.n	8005d5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d44:	f7fd f9bc 	bl	80030c0 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e053      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5a:	4b2d      	ldr	r3, [pc, #180]	; (8005e10 <HAL_RCC_ClockConfig+0x1c8>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 020c 	and.w	r2, r3, #12
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d1eb      	bne.n	8005d44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d6c:	4b27      	ldr	r3, [pc, #156]	; (8005e0c <HAL_RCC_ClockConfig+0x1c4>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 030f 	and.w	r3, r3, #15
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d210      	bcs.n	8005d9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d7a:	4b24      	ldr	r3, [pc, #144]	; (8005e0c <HAL_RCC_ClockConfig+0x1c4>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f023 020f 	bic.w	r2, r3, #15
 8005d82:	4922      	ldr	r1, [pc, #136]	; (8005e0c <HAL_RCC_ClockConfig+0x1c4>)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d8a:	4b20      	ldr	r3, [pc, #128]	; (8005e0c <HAL_RCC_ClockConfig+0x1c4>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 030f 	and.w	r3, r3, #15
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d001      	beq.n	8005d9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e032      	b.n	8005e02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d008      	beq.n	8005dba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005da8:	4b19      	ldr	r3, [pc, #100]	; (8005e10 <HAL_RCC_ClockConfig+0x1c8>)
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	4916      	ldr	r1, [pc, #88]	; (8005e10 <HAL_RCC_ClockConfig+0x1c8>)
 8005db6:	4313      	orrs	r3, r2
 8005db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0308 	and.w	r3, r3, #8
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d009      	beq.n	8005dda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005dc6:	4b12      	ldr	r3, [pc, #72]	; (8005e10 <HAL_RCC_ClockConfig+0x1c8>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	490e      	ldr	r1, [pc, #56]	; (8005e10 <HAL_RCC_ClockConfig+0x1c8>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005dda:	f000 f821 	bl	8005e20 <HAL_RCC_GetSysClockFreq>
 8005dde:	4602      	mov	r2, r0
 8005de0:	4b0b      	ldr	r3, [pc, #44]	; (8005e10 <HAL_RCC_ClockConfig+0x1c8>)
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	091b      	lsrs	r3, r3, #4
 8005de6:	f003 030f 	and.w	r3, r3, #15
 8005dea:	490a      	ldr	r1, [pc, #40]	; (8005e14 <HAL_RCC_ClockConfig+0x1cc>)
 8005dec:	5ccb      	ldrb	r3, [r1, r3]
 8005dee:	fa22 f303 	lsr.w	r3, r2, r3
 8005df2:	4a09      	ldr	r2, [pc, #36]	; (8005e18 <HAL_RCC_ClockConfig+0x1d0>)
 8005df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005df6:	4b09      	ldr	r3, [pc, #36]	; (8005e1c <HAL_RCC_ClockConfig+0x1d4>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f7fd f91c 	bl	8003038 <HAL_InitTick>

  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	40023c00 	.word	0x40023c00
 8005e10:	40023800 	.word	0x40023800
 8005e14:	0800cd2c 	.word	0x0800cd2c
 8005e18:	20000004 	.word	0x20000004
 8005e1c:	20000008 	.word	0x20000008

08005e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e20:	b5b0      	push	{r4, r5, r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005e26:	2100      	movs	r1, #0
 8005e28:	6079      	str	r1, [r7, #4]
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	60f9      	str	r1, [r7, #12]
 8005e2e:	2100      	movs	r1, #0
 8005e30:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005e32:	2100      	movs	r1, #0
 8005e34:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e36:	4952      	ldr	r1, [pc, #328]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e38:	6889      	ldr	r1, [r1, #8]
 8005e3a:	f001 010c 	and.w	r1, r1, #12
 8005e3e:	2908      	cmp	r1, #8
 8005e40:	d00d      	beq.n	8005e5e <HAL_RCC_GetSysClockFreq+0x3e>
 8005e42:	2908      	cmp	r1, #8
 8005e44:	f200 8094 	bhi.w	8005f70 <HAL_RCC_GetSysClockFreq+0x150>
 8005e48:	2900      	cmp	r1, #0
 8005e4a:	d002      	beq.n	8005e52 <HAL_RCC_GetSysClockFreq+0x32>
 8005e4c:	2904      	cmp	r1, #4
 8005e4e:	d003      	beq.n	8005e58 <HAL_RCC_GetSysClockFreq+0x38>
 8005e50:	e08e      	b.n	8005f70 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e52:	4b4c      	ldr	r3, [pc, #304]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x164>)
 8005e54:	60bb      	str	r3, [r7, #8]
      break;
 8005e56:	e08e      	b.n	8005f76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e58:	4b4b      	ldr	r3, [pc, #300]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x168>)
 8005e5a:	60bb      	str	r3, [r7, #8]
      break;
 8005e5c:	e08b      	b.n	8005f76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e5e:	4948      	ldr	r1, [pc, #288]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e60:	6849      	ldr	r1, [r1, #4]
 8005e62:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8005e66:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005e68:	4945      	ldr	r1, [pc, #276]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e6a:	6849      	ldr	r1, [r1, #4]
 8005e6c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005e70:	2900      	cmp	r1, #0
 8005e72:	d024      	beq.n	8005ebe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e74:	4942      	ldr	r1, [pc, #264]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x160>)
 8005e76:	6849      	ldr	r1, [r1, #4]
 8005e78:	0989      	lsrs	r1, r1, #6
 8005e7a:	4608      	mov	r0, r1
 8005e7c:	f04f 0100 	mov.w	r1, #0
 8005e80:	f240 14ff 	movw	r4, #511	; 0x1ff
 8005e84:	f04f 0500 	mov.w	r5, #0
 8005e88:	ea00 0204 	and.w	r2, r0, r4
 8005e8c:	ea01 0305 	and.w	r3, r1, r5
 8005e90:	493d      	ldr	r1, [pc, #244]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x168>)
 8005e92:	fb01 f003 	mul.w	r0, r1, r3
 8005e96:	2100      	movs	r1, #0
 8005e98:	fb01 f102 	mul.w	r1, r1, r2
 8005e9c:	1844      	adds	r4, r0, r1
 8005e9e:	493a      	ldr	r1, [pc, #232]	; (8005f88 <HAL_RCC_GetSysClockFreq+0x168>)
 8005ea0:	fba2 0101 	umull	r0, r1, r2, r1
 8005ea4:	1863      	adds	r3, r4, r1
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	461a      	mov	r2, r3
 8005eac:	f04f 0300 	mov.w	r3, #0
 8005eb0:	f7fa fbda 	bl	8000668 <__aeabi_uldivmod>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	4613      	mov	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	e04a      	b.n	8005f54 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ebe:	4b30      	ldr	r3, [pc, #192]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x160>)
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	099b      	lsrs	r3, r3, #6
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	f04f 0300 	mov.w	r3, #0
 8005eca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005ece:	f04f 0100 	mov.w	r1, #0
 8005ed2:	ea02 0400 	and.w	r4, r2, r0
 8005ed6:	ea03 0501 	and.w	r5, r3, r1
 8005eda:	4620      	mov	r0, r4
 8005edc:	4629      	mov	r1, r5
 8005ede:	f04f 0200 	mov.w	r2, #0
 8005ee2:	f04f 0300 	mov.w	r3, #0
 8005ee6:	014b      	lsls	r3, r1, #5
 8005ee8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005eec:	0142      	lsls	r2, r0, #5
 8005eee:	4610      	mov	r0, r2
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	1b00      	subs	r0, r0, r4
 8005ef4:	eb61 0105 	sbc.w	r1, r1, r5
 8005ef8:	f04f 0200 	mov.w	r2, #0
 8005efc:	f04f 0300 	mov.w	r3, #0
 8005f00:	018b      	lsls	r3, r1, #6
 8005f02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005f06:	0182      	lsls	r2, r0, #6
 8005f08:	1a12      	subs	r2, r2, r0
 8005f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8005f0e:	f04f 0000 	mov.w	r0, #0
 8005f12:	f04f 0100 	mov.w	r1, #0
 8005f16:	00d9      	lsls	r1, r3, #3
 8005f18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f1c:	00d0      	lsls	r0, r2, #3
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	1912      	adds	r2, r2, r4
 8005f24:	eb45 0303 	adc.w	r3, r5, r3
 8005f28:	f04f 0000 	mov.w	r0, #0
 8005f2c:	f04f 0100 	mov.w	r1, #0
 8005f30:	0299      	lsls	r1, r3, #10
 8005f32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005f36:	0290      	lsls	r0, r2, #10
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	4619      	mov	r1, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	461a      	mov	r2, r3
 8005f44:	f04f 0300 	mov.w	r3, #0
 8005f48:	f7fa fb8e 	bl	8000668 <__aeabi_uldivmod>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4613      	mov	r3, r2
 8005f52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005f54:	4b0a      	ldr	r3, [pc, #40]	; (8005f80 <HAL_RCC_GetSysClockFreq+0x160>)
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	0c1b      	lsrs	r3, r3, #16
 8005f5a:	f003 0303 	and.w	r3, r3, #3
 8005f5e:	3301      	adds	r3, #1
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6c:	60bb      	str	r3, [r7, #8]
      break;
 8005f6e:	e002      	b.n	8005f76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005f70:	4b04      	ldr	r3, [pc, #16]	; (8005f84 <HAL_RCC_GetSysClockFreq+0x164>)
 8005f72:	60bb      	str	r3, [r7, #8]
      break;
 8005f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005f76:	68bb      	ldr	r3, [r7, #8]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8005f80:	40023800 	.word	0x40023800
 8005f84:	00f42400 	.word	0x00f42400
 8005f88:	017d7840 	.word	0x017d7840

08005f8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f90:	4b03      	ldr	r3, [pc, #12]	; (8005fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f92:	681b      	ldr	r3, [r3, #0]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	20000004 	.word	0x20000004

08005fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005fa8:	f7ff fff0 	bl	8005f8c <HAL_RCC_GetHCLKFreq>
 8005fac:	4602      	mov	r2, r0
 8005fae:	4b05      	ldr	r3, [pc, #20]	; (8005fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005fb0:	689b      	ldr	r3, [r3, #8]
 8005fb2:	0a9b      	lsrs	r3, r3, #10
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	4903      	ldr	r1, [pc, #12]	; (8005fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005fba:	5ccb      	ldrb	r3, [r1, r3]
 8005fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	40023800 	.word	0x40023800
 8005fc8:	0800cd3c 	.word	0x0800cd3c

08005fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005fd0:	f7ff ffdc 	bl	8005f8c <HAL_RCC_GetHCLKFreq>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	4b05      	ldr	r3, [pc, #20]	; (8005fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8005fd8:	689b      	ldr	r3, [r3, #8]
 8005fda:	0b5b      	lsrs	r3, r3, #13
 8005fdc:	f003 0307 	and.w	r3, r3, #7
 8005fe0:	4903      	ldr	r1, [pc, #12]	; (8005ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fe2:	5ccb      	ldrb	r3, [r1, r3]
 8005fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	bd80      	pop	{r7, pc}
 8005fec:	40023800 	.word	0x40023800
 8005ff0:	0800cd3c 	.word	0x0800cd3c

08005ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b088      	sub	sp, #32
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006000:	2300      	movs	r3, #0
 8006002:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006004:	2300      	movs	r3, #0
 8006006:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800600c:	2300      	movs	r3, #0
 800600e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 0301 	and.w	r3, r3, #1
 8006018:	2b00      	cmp	r3, #0
 800601a:	d012      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800601c:	4b69      	ldr	r3, [pc, #420]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	4a68      	ldr	r2, [pc, #416]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006022:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006026:	6093      	str	r3, [r2, #8]
 8006028:	4b66      	ldr	r3, [pc, #408]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006030:	4964      	ldr	r1, [pc, #400]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006032:	4313      	orrs	r3, r2
 8006034:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603a:	2b00      	cmp	r3, #0
 800603c:	d101      	bne.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800603e:	2301      	movs	r3, #1
 8006040:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800604a:	2b00      	cmp	r3, #0
 800604c:	d017      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800604e:	4b5d      	ldr	r3, [pc, #372]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006054:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800605c:	4959      	ldr	r1, [pc, #356]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800605e:	4313      	orrs	r3, r2
 8006060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006068:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800606c:	d101      	bne.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800606e:	2301      	movs	r3, #1
 8006070:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800607a:	2301      	movs	r3, #1
 800607c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006086:	2b00      	cmp	r3, #0
 8006088:	d017      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800608a:	4b4e      	ldr	r3, [pc, #312]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800608c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006090:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	494a      	ldr	r1, [pc, #296]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800609a:	4313      	orrs	r3, r2
 800609c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060a8:	d101      	bne.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80060aa:	2301      	movs	r3, #1
 80060ac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d101      	bne.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80060b6:	2301      	movs	r3, #1
 80060b8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80060c6:	2301      	movs	r3, #1
 80060c8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0320 	and.w	r3, r3, #32
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 808b 	beq.w	80061ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80060d8:	4b3a      	ldr	r3, [pc, #232]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060dc:	4a39      	ldr	r2, [pc, #228]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060e2:	6413      	str	r3, [r2, #64]	; 0x40
 80060e4:	4b37      	ldr	r3, [pc, #220]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80060e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060ec:	60bb      	str	r3, [r7, #8]
 80060ee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80060f0:	4b35      	ldr	r3, [pc, #212]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a34      	ldr	r2, [pc, #208]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80060f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060fc:	f7fc ffe0 	bl	80030c0 <HAL_GetTick>
 8006100:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006102:	e008      	b.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006104:	f7fc ffdc 	bl	80030c0 <HAL_GetTick>
 8006108:	4602      	mov	r2, r0
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	2b64      	cmp	r3, #100	; 0x64
 8006110:	d901      	bls.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006112:	2303      	movs	r3, #3
 8006114:	e38f      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006116:	4b2c      	ldr	r3, [pc, #176]	; (80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0f0      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006122:	4b28      	ldr	r3, [pc, #160]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800612a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d035      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006136:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	429a      	cmp	r2, r3
 800613e:	d02e      	beq.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006140:	4b20      	ldr	r3, [pc, #128]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006148:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800614a:	4b1e      	ldr	r3, [pc, #120]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800614c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800614e:	4a1d      	ldr	r2, [pc, #116]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006154:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006156:	4b1b      	ldr	r3, [pc, #108]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800615a:	4a1a      	ldr	r2, [pc, #104]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800615c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006160:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006162:	4a18      	ldr	r2, [pc, #96]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006168:	4b16      	ldr	r3, [pc, #88]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800616a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800616c:	f003 0301 	and.w	r3, r3, #1
 8006170:	2b01      	cmp	r3, #1
 8006172:	d114      	bne.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006174:	f7fc ffa4 	bl	80030c0 <HAL_GetTick>
 8006178:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800617a:	e00a      	b.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800617c:	f7fc ffa0 	bl	80030c0 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	f241 3288 	movw	r2, #5000	; 0x1388
 800618a:	4293      	cmp	r3, r2
 800618c:	d901      	bls.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e351      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006192:	4b0c      	ldr	r3, [pc, #48]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0ee      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061aa:	d111      	bne.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80061ac:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80061b8:	4b04      	ldr	r3, [pc, #16]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80061ba:	400b      	ands	r3, r1
 80061bc:	4901      	ldr	r1, [pc, #4]	; (80061c4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	608b      	str	r3, [r1, #8]
 80061c2:	e00b      	b.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80061c4:	40023800 	.word	0x40023800
 80061c8:	40007000 	.word	0x40007000
 80061cc:	0ffffcff 	.word	0x0ffffcff
 80061d0:	4bb3      	ldr	r3, [pc, #716]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061d2:	689b      	ldr	r3, [r3, #8]
 80061d4:	4ab2      	ldr	r2, [pc, #712]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061d6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80061da:	6093      	str	r3, [r2, #8]
 80061dc:	4bb0      	ldr	r3, [pc, #704]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061de:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80061e8:	49ad      	ldr	r1, [pc, #692]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0310 	and.w	r3, r3, #16
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d010      	beq.n	800621c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80061fa:	4ba9      	ldr	r3, [pc, #676]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80061fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006200:	4aa7      	ldr	r2, [pc, #668]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006206:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800620a:	4ba5      	ldr	r3, [pc, #660]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800620c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006214:	49a2      	ldr	r1, [pc, #648]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006216:	4313      	orrs	r3, r2
 8006218:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d00a      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006228:	4b9d      	ldr	r3, [pc, #628]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800622a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006236:	499a      	ldr	r1, [pc, #616]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006238:	4313      	orrs	r3, r2
 800623a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d00a      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800624a:	4b95      	ldr	r3, [pc, #596]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800624c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006250:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006258:	4991      	ldr	r1, [pc, #580]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800625a:	4313      	orrs	r3, r2
 800625c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006268:	2b00      	cmp	r3, #0
 800626a:	d00a      	beq.n	8006282 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800626c:	4b8c      	ldr	r3, [pc, #560]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800626e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006272:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800627a:	4989      	ldr	r1, [pc, #548]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800627c:	4313      	orrs	r3, r2
 800627e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00a      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800628e:	4b84      	ldr	r3, [pc, #528]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006294:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629c:	4980      	ldr	r1, [pc, #512]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00a      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062b0:	4b7b      	ldr	r3, [pc, #492]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062b6:	f023 0203 	bic.w	r2, r3, #3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062be:	4978      	ldr	r1, [pc, #480]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00a      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062d2:	4b73      	ldr	r3, [pc, #460]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d8:	f023 020c 	bic.w	r2, r3, #12
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062e0:	496f      	ldr	r1, [pc, #444]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062e2:	4313      	orrs	r3, r2
 80062e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00a      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80062f4:	4b6a      	ldr	r3, [pc, #424]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80062f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006302:	4967      	ldr	r1, [pc, #412]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006304:	4313      	orrs	r3, r2
 8006306:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006312:	2b00      	cmp	r3, #0
 8006314:	d00a      	beq.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006316:	4b62      	ldr	r3, [pc, #392]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800631c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006324:	495e      	ldr	r1, [pc, #376]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006326:	4313      	orrs	r3, r2
 8006328:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00a      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006338:	4b59      	ldr	r3, [pc, #356]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800633a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800633e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006346:	4956      	ldr	r1, [pc, #344]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006348:	4313      	orrs	r3, r2
 800634a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00a      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800635a:	4b51      	ldr	r3, [pc, #324]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800635c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006360:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006368:	494d      	ldr	r1, [pc, #308]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800636a:	4313      	orrs	r3, r2
 800636c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00a      	beq.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800637c:	4b48      	ldr	r3, [pc, #288]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800637e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006382:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800638a:	4945      	ldr	r1, [pc, #276]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800638c:	4313      	orrs	r3, r2
 800638e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00a      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800639e:	4b40      	ldr	r3, [pc, #256]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ac:	493c      	ldr	r1, [pc, #240]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00a      	beq.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80063c0:	4b37      	ldr	r3, [pc, #220]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063c6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063ce:	4934      	ldr	r1, [pc, #208]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d011      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80063e2:	4b2f      	ldr	r3, [pc, #188]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063e8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063f0:	492b      	ldr	r1, [pc, #172]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80063f2:	4313      	orrs	r3, r2
 80063f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006400:	d101      	bne.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006402:	2301      	movs	r3, #1
 8006404:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0308 	and.w	r3, r3, #8
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006412:	2301      	movs	r3, #1
 8006414:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00a      	beq.n	8006438 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006422:	4b1f      	ldr	r3, [pc, #124]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006428:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006430:	491b      	ldr	r1, [pc, #108]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006432:	4313      	orrs	r3, r2
 8006434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00b      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006444:	4b16      	ldr	r3, [pc, #88]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800644a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006454:	4912      	ldr	r1, [pc, #72]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8006456:	4313      	orrs	r3, r2
 8006458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00b      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8006468:	4b0d      	ldr	r3, [pc, #52]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800646a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800646e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006478:	4909      	ldr	r1, [pc, #36]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800647a:	4313      	orrs	r3, r2
 800647c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00f      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800648c:	4b04      	ldr	r3, [pc, #16]	; (80064a0 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800648e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006492:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800649c:	e002      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800649e:	bf00      	nop
 80064a0:	40023800 	.word	0x40023800
 80064a4:	4986      	ldr	r1, [pc, #536]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064a6:	4313      	orrs	r3, r2
 80064a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00b      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80064b8:	4b81      	ldr	r3, [pc, #516]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064c8:	497d      	ldr	r1, [pc, #500]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d006      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 80d6 	beq.w	8006690 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80064e4:	4b76      	ldr	r3, [pc, #472]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a75      	ldr	r2, [pc, #468]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80064ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064f0:	f7fc fde6 	bl	80030c0 <HAL_GetTick>
 80064f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80064f6:	e008      	b.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80064f8:	f7fc fde2 	bl	80030c0 <HAL_GetTick>
 80064fc:	4602      	mov	r2, r0
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	2b64      	cmp	r3, #100	; 0x64
 8006504:	d901      	bls.n	800650a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006506:	2303      	movs	r3, #3
 8006508:	e195      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800650a:	4b6d      	ldr	r3, [pc, #436]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1f0      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d021      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006526:	2b00      	cmp	r3, #0
 8006528:	d11d      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800652a:	4b65      	ldr	r3, [pc, #404]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800652c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006530:	0c1b      	lsrs	r3, r3, #16
 8006532:	f003 0303 	and.w	r3, r3, #3
 8006536:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006538:	4b61      	ldr	r3, [pc, #388]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800653a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800653e:	0e1b      	lsrs	r3, r3, #24
 8006540:	f003 030f 	and.w	r3, r3, #15
 8006544:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	019a      	lsls	r2, r3, #6
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	041b      	lsls	r3, r3, #16
 8006550:	431a      	orrs	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	061b      	lsls	r3, r3, #24
 8006556:	431a      	orrs	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	071b      	lsls	r3, r3, #28
 800655e:	4958      	ldr	r1, [pc, #352]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006560:	4313      	orrs	r3, r2
 8006562:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d004      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800657a:	d00a      	beq.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006584:	2b00      	cmp	r3, #0
 8006586:	d02e      	beq.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006590:	d129      	bne.n	80065e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006592:	4b4b      	ldr	r3, [pc, #300]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006598:	0c1b      	lsrs	r3, r3, #16
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80065a0:	4b47      	ldr	r3, [pc, #284]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065a6:	0f1b      	lsrs	r3, r3, #28
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	019a      	lsls	r2, r3, #6
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	041b      	lsls	r3, r3, #16
 80065b8:	431a      	orrs	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	061b      	lsls	r3, r3, #24
 80065c0:	431a      	orrs	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	071b      	lsls	r3, r3, #28
 80065c6:	493e      	ldr	r1, [pc, #248]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065c8:	4313      	orrs	r3, r2
 80065ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80065ce:	4b3c      	ldr	r3, [pc, #240]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065d4:	f023 021f 	bic.w	r2, r3, #31
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065dc:	3b01      	subs	r3, #1
 80065de:	4938      	ldr	r1, [pc, #224]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d01d      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80065f2:	4b33      	ldr	r3, [pc, #204]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80065f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065f8:	0e1b      	lsrs	r3, r3, #24
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006600:	4b2f      	ldr	r3, [pc, #188]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006606:	0f1b      	lsrs	r3, r3, #28
 8006608:	f003 0307 	and.w	r3, r3, #7
 800660c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	019a      	lsls	r2, r3, #6
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	041b      	lsls	r3, r3, #16
 800661a:	431a      	orrs	r2, r3
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	061b      	lsls	r3, r3, #24
 8006620:	431a      	orrs	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	071b      	lsls	r3, r3, #28
 8006626:	4926      	ldr	r1, [pc, #152]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006628:	4313      	orrs	r3, r2
 800662a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d011      	beq.n	800665e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	019a      	lsls	r2, r3, #6
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	691b      	ldr	r3, [r3, #16]
 8006644:	041b      	lsls	r3, r3, #16
 8006646:	431a      	orrs	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	061b      	lsls	r3, r3, #24
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	071b      	lsls	r3, r3, #28
 8006656:	491a      	ldr	r1, [pc, #104]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006658:	4313      	orrs	r3, r2
 800665a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800665e:	4b18      	ldr	r3, [pc, #96]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a17      	ldr	r2, [pc, #92]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006664:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006668:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800666a:	f7fc fd29 	bl	80030c0 <HAL_GetTick>
 800666e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006670:	e008      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006672:	f7fc fd25 	bl	80030c0 <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	2b64      	cmp	r3, #100	; 0x64
 800667e:	d901      	bls.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e0d8      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006684:	4b0e      	ldr	r3, [pc, #56]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d0f0      	beq.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	2b01      	cmp	r3, #1
 8006694:	f040 80ce 	bne.w	8006834 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006698:	4b09      	ldr	r3, [pc, #36]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a08      	ldr	r2, [pc, #32]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800669e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066a4:	f7fc fd0c 	bl	80030c0 <HAL_GetTick>
 80066a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066aa:	e00b      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066ac:	f7fc fd08 	bl	80030c0 <HAL_GetTick>
 80066b0:	4602      	mov	r2, r0
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	1ad3      	subs	r3, r2, r3
 80066b6:	2b64      	cmp	r3, #100	; 0x64
 80066b8:	d904      	bls.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e0bb      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80066be:	bf00      	nop
 80066c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80066c4:	4b5e      	ldr	r3, [pc, #376]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066d0:	d0ec      	beq.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d009      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d02e      	beq.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d12a      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80066fa:	4b51      	ldr	r3, [pc, #324]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80066fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006700:	0c1b      	lsrs	r3, r3, #16
 8006702:	f003 0303 	and.w	r3, r3, #3
 8006706:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006708:	4b4d      	ldr	r3, [pc, #308]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800670a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670e:	0f1b      	lsrs	r3, r3, #28
 8006710:	f003 0307 	and.w	r3, r3, #7
 8006714:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	019a      	lsls	r2, r3, #6
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	041b      	lsls	r3, r3, #16
 8006720:	431a      	orrs	r2, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	061b      	lsls	r3, r3, #24
 8006728:	431a      	orrs	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	071b      	lsls	r3, r3, #28
 800672e:	4944      	ldr	r1, [pc, #272]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006730:	4313      	orrs	r3, r2
 8006732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006736:	4b42      	ldr	r3, [pc, #264]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800673c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006744:	3b01      	subs	r3, #1
 8006746:	021b      	lsls	r3, r3, #8
 8006748:	493d      	ldr	r1, [pc, #244]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800674a:	4313      	orrs	r3, r2
 800674c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d022      	beq.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006764:	d11d      	bne.n	80067a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006766:	4b36      	ldr	r3, [pc, #216]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800676c:	0e1b      	lsrs	r3, r3, #24
 800676e:	f003 030f 	and.w	r3, r3, #15
 8006772:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006774:	4b32      	ldr	r3, [pc, #200]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800677a:	0f1b      	lsrs	r3, r3, #28
 800677c:	f003 0307 	and.w	r3, r3, #7
 8006780:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	019a      	lsls	r2, r3, #6
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	041b      	lsls	r3, r3, #16
 800678e:	431a      	orrs	r2, r3
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	061b      	lsls	r3, r3, #24
 8006794:	431a      	orrs	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	071b      	lsls	r3, r3, #28
 800679a:	4929      	ldr	r1, [pc, #164]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800679c:	4313      	orrs	r3, r2
 800679e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0308 	and.w	r3, r3, #8
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d028      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80067ae:	4b24      	ldr	r3, [pc, #144]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b4:	0e1b      	lsrs	r3, r3, #24
 80067b6:	f003 030f 	and.w	r3, r3, #15
 80067ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80067bc:	4b20      	ldr	r3, [pc, #128]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c2:	0c1b      	lsrs	r3, r3, #16
 80067c4:	f003 0303 	and.w	r3, r3, #3
 80067c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	019a      	lsls	r2, r3, #6
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	041b      	lsls	r3, r3, #16
 80067d4:	431a      	orrs	r2, r3
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	061b      	lsls	r3, r3, #24
 80067da:	431a      	orrs	r2, r3
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	69db      	ldr	r3, [r3, #28]
 80067e0:	071b      	lsls	r3, r3, #28
 80067e2:	4917      	ldr	r1, [pc, #92]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80067ea:	4b15      	ldr	r3, [pc, #84]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f8:	4911      	ldr	r1, [pc, #68]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80067fa:	4313      	orrs	r3, r2
 80067fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006800:	4b0f      	ldr	r3, [pc, #60]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a0e      	ldr	r2, [pc, #56]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800680a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800680c:	f7fc fc58 	bl	80030c0 <HAL_GetTick>
 8006810:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006812:	e008      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006814:	f7fc fc54 	bl	80030c0 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b64      	cmp	r3, #100	; 0x64
 8006820:	d901      	bls.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e007      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006826:	4b06      	ldr	r3, [pc, #24]	; (8006840 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800682e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006832:	d1ef      	bne.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3720      	adds	r7, #32
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	40023800 	.word	0x40023800

08006844 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e09d      	b.n	8006992 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685a:	2b00      	cmp	r3, #0
 800685c:	d108      	bne.n	8006870 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006866:	d009      	beq.n	800687c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	61da      	str	r2, [r3, #28]
 800686e:	e005      	b.n	800687c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d106      	bne.n	800689c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7fc f91e 	bl	8002ad8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068bc:	d902      	bls.n	80068c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80068be:	2300      	movs	r3, #0
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	e002      	b.n	80068ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80068c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80068d2:	d007      	beq.n	80068e4 <HAL_SPI_Init+0xa0>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068dc:	d002      	beq.n	80068e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80068f4:	431a      	orrs	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	431a      	orrs	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006912:	431a      	orrs	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800691c:	431a      	orrs	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006926:	ea42 0103 	orr.w	r1, r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	0c1b      	lsrs	r3, r3, #16
 8006940:	f003 0204 	and.w	r2, r3, #4
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006948:	f003 0310 	and.w	r3, r3, #16
 800694c:	431a      	orrs	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006952:	f003 0308 	and.w	r3, r3, #8
 8006956:	431a      	orrs	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006960:	ea42 0103 	orr.w	r1, r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69da      	ldr	r2, [r3, #28]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006980:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d101      	bne.n	80069bc <HAL_SPI_TransmitReceive_IT+0x20>
 80069b8:	2302      	movs	r3, #2
 80069ba:	e091      	b.n	8006ae0 <HAL_SPI_TransmitReceive_IT+0x144>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2201      	movs	r2, #1
 80069c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069ca:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80069d2:	7dbb      	ldrb	r3, [r7, #22]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d00d      	beq.n	80069f4 <HAL_SPI_TransmitReceive_IT+0x58>
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069de:	d106      	bne.n	80069ee <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d102      	bne.n	80069ee <HAL_SPI_TransmitReceive_IT+0x52>
 80069e8:	7dbb      	ldrb	r3, [r7, #22]
 80069ea:	2b04      	cmp	r3, #4
 80069ec:	d002      	beq.n	80069f4 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 80069ee:	2302      	movs	r3, #2
 80069f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80069f2:	e070      	b.n	8006ad6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d005      	beq.n	8006a06 <HAL_SPI_TransmitReceive_IT+0x6a>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d002      	beq.n	8006a06 <HAL_SPI_TransmitReceive_IT+0x6a>
 8006a00:	887b      	ldrh	r3, [r7, #2]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d102      	bne.n	8006a0c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006a0a:	e064      	b.n	8006ad6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006a12:	b2db      	uxtb	r3, r3
 8006a14:	2b04      	cmp	r3, #4
 8006a16:	d003      	beq.n	8006a20 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2205      	movs	r2, #5
 8006a1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	887a      	ldrh	r2, [r7, #2]
 8006a30:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	887a      	ldrh	r2, [r7, #2]
 8006a36:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	887a      	ldrh	r2, [r7, #2]
 8006a42:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	887a      	ldrh	r2, [r7, #2]
 8006a4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a56:	d906      	bls.n	8006a66 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4a24      	ldr	r2, [pc, #144]	; (8006aec <HAL_SPI_TransmitReceive_IT+0x150>)
 8006a5c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	4a23      	ldr	r2, [pc, #140]	; (8006af0 <HAL_SPI_TransmitReceive_IT+0x154>)
 8006a62:	651a      	str	r2, [r3, #80]	; 0x50
 8006a64:	e005      	b.n	8006a72 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4a22      	ldr	r2, [pc, #136]	; (8006af4 <HAL_SPI_TransmitReceive_IT+0x158>)
 8006a6a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4a22      	ldr	r2, [pc, #136]	; (8006af8 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8006a70:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	68db      	ldr	r3, [r3, #12]
 8006a76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a7a:	d802      	bhi.n	8006a82 <HAL_SPI_TransmitReceive_IT+0xe6>
 8006a7c:	887b      	ldrh	r3, [r7, #2]
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d908      	bls.n	8006a94 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	685a      	ldr	r2, [r3, #4]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a90:	605a      	str	r2, [r3, #4]
 8006a92:	e007      	b.n	8006aa4 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006aa2:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8006ab2:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006abe:	2b40      	cmp	r3, #64	; 0x40
 8006ac0:	d008      	beq.n	8006ad4 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ad0:	601a      	str	r2, [r3, #0]
 8006ad2:	e000      	b.n	8006ad6 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8006ad4:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	371c      	adds	r7, #28
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	08006e9f 	.word	0x08006e9f
 8006af0:	08006f05 	.word	0x08006f05
 8006af4:	08006d4f 	.word	0x08006d4f
 8006af8:	08006e0d 	.word	0x08006e0d

08006afc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b088      	sub	sp, #32
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	099b      	lsrs	r3, r3, #6
 8006b18:	f003 0301 	and.w	r3, r3, #1
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d10f      	bne.n	8006b40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	099b      	lsrs	r3, r3, #6
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d004      	beq.n	8006b40 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	4798      	blx	r3
    return;
 8006b3e:	e0d7      	b.n	8006cf0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	085b      	lsrs	r3, r3, #1
 8006b44:	f003 0301 	and.w	r3, r3, #1
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00a      	beq.n	8006b62 <HAL_SPI_IRQHandler+0x66>
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	09db      	lsrs	r3, r3, #7
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d004      	beq.n	8006b62 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	4798      	blx	r3
    return;
 8006b60:	e0c6      	b.n	8006cf0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	095b      	lsrs	r3, r3, #5
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d10c      	bne.n	8006b88 <HAL_SPI_IRQHandler+0x8c>
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	099b      	lsrs	r3, r3, #6
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d106      	bne.n	8006b88 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	0a1b      	lsrs	r3, r3, #8
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 80b4 	beq.w	8006cf0 <HAL_SPI_IRQHandler+0x1f4>
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	095b      	lsrs	r3, r3, #5
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	f000 80ad 	beq.w	8006cf0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	099b      	lsrs	r3, r3, #6
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d023      	beq.n	8006bea <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b03      	cmp	r3, #3
 8006bac:	d011      	beq.n	8006bd2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb2:	f043 0204 	orr.w	r2, r3, #4
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bba:	2300      	movs	r3, #0
 8006bbc:	617b      	str	r3, [r7, #20]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	617b      	str	r3, [r7, #20]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	617b      	str	r3, [r7, #20]
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	e00b      	b.n	8006bea <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	613b      	str	r3, [r7, #16]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	613b      	str	r3, [r7, #16]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	613b      	str	r3, [r7, #16]
 8006be6:	693b      	ldr	r3, [r7, #16]
        return;
 8006be8:	e082      	b.n	8006cf0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	095b      	lsrs	r3, r3, #5
 8006bee:	f003 0301 	and.w	r3, r3, #1
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d014      	beq.n	8006c20 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bfa:	f043 0201 	orr.w	r2, r3, #1
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c02:	2300      	movs	r3, #0
 8006c04:	60fb      	str	r3, [r7, #12]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	60fb      	str	r3, [r7, #12]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c1c:	601a      	str	r2, [r3, #0]
 8006c1e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	0a1b      	lsrs	r3, r3, #8
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00c      	beq.n	8006c46 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c30:	f043 0208 	orr.w	r2, r3, #8
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c38:	2300      	movs	r3, #0
 8006c3a:	60bb      	str	r3, [r7, #8]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	60bb      	str	r3, [r7, #8]
 8006c44:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d04f      	beq.n	8006cee <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685a      	ldr	r2, [r3, #4]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c5c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	f003 0302 	and.w	r3, r3, #2
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d104      	bne.n	8006c7a <HAL_SPI_IRQHandler+0x17e>
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	f003 0301 	and.w	r3, r3, #1
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d034      	beq.n	8006ce4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 0203 	bic.w	r2, r2, #3
 8006c88:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d011      	beq.n	8006cb6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c96:	4a18      	ldr	r2, [pc, #96]	; (8006cf8 <HAL_SPI_IRQHandler+0x1fc>)
 8006c98:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fc fc8e 	bl	80035c0 <HAL_DMA_Abort_IT>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d016      	beq.n	8006cec <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cc2:	4a0d      	ldr	r2, [pc, #52]	; (8006cf8 <HAL_SPI_IRQHandler+0x1fc>)
 8006cc4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fc fc78 	bl	80035c0 <HAL_DMA_Abort_IT>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00a      	beq.n	8006cec <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006ce2:	e003      	b.n	8006cec <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 f813 	bl	8006d10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006cea:	e000      	b.n	8006cee <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8006cec:	bf00      	nop
    return;
 8006cee:	bf00      	nop
  }
}
 8006cf0:	3720      	adds	r7, #32
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	08006d25 	.word	0x08006d25

08006cfc <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006d04:	bf00      	nop
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006d18:	bf00      	nop
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d30:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f7ff ffe5 	bl	8006d10 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d46:	bf00      	nop
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b082      	sub	sp, #8
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	2b01      	cmp	r3, #1
 8006d60:	d923      	bls.n	8006daa <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68da      	ldr	r2, [r3, #12]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6c:	b292      	uxth	r2, r2
 8006d6e:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d74:	1c9a      	adds	r2, r3, #2
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	3b02      	subs	r3, #2
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d11f      	bne.n	8006dd8 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006da6:	605a      	str	r2, [r3, #4]
 8006da8:	e016      	b.n	8006dd8 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f103 020c 	add.w	r2, r3, #12
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db6:	7812      	ldrb	r2, [r2, #0]
 8006db8:	b2d2      	uxtb	r2, r2
 8006dba:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dc0:	1c5a      	adds	r2, r3, #1
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	3b01      	subs	r3, #1
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10f      	bne.n	8006e04 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006df2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d102      	bne.n	8006e04 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fa38 	bl	8007274 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006e04:	bf00      	nop
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	2b01      	cmp	r3, #1
 8006e1c:	d912      	bls.n	8006e44 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e22:	881a      	ldrh	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2e:	1c9a      	adds	r2, r3, #2
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	3b02      	subs	r3, #2
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e42:	e012      	b.n	8006e6a <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	330c      	adds	r3, #12
 8006e4e:	7812      	ldrb	r2, [r2, #0]
 8006e50:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e56:	1c5a      	adds	r2, r3, #1
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	3b01      	subs	r3, #1
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d110      	bne.n	8006e96 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e82:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d102      	bne.n	8006e96 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 f9ef 	bl	8007274 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006e96:	bf00      	nop
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b082      	sub	sp, #8
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68da      	ldr	r2, [r3, #12]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb0:	b292      	uxth	r2, r2
 8006eb2:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	1c9a      	adds	r2, r3, #2
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10f      	bne.n	8006efc <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006eea:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d102      	bne.n	8006efc <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 f9bc 	bl	8007274 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006efc:	bf00      	nop
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f10:	881a      	ldrh	r2, [r3, #0]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1c:	1c9a      	adds	r2, r3, #2
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d110      	bne.n	8006f5c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	685a      	ldr	r2, [r3, #4]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f48:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f50:	b29b      	uxth	r3, r3
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d102      	bne.n	8006f5c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f98c 	bl	8007274 <SPI_CloseRxTx_ISR>
    }
  }
}
 8006f5c:	bf00      	nop
 8006f5e:	3708      	adds	r7, #8
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b088      	sub	sp, #32
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	603b      	str	r3, [r7, #0]
 8006f70:	4613      	mov	r3, r2
 8006f72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006f74:	f7fc f8a4 	bl	80030c0 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7c:	1a9b      	subs	r3, r3, r2
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	4413      	add	r3, r2
 8006f82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006f84:	f7fc f89c 	bl	80030c0 <HAL_GetTick>
 8006f88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006f8a:	4b39      	ldr	r3, [pc, #228]	; (8007070 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	015b      	lsls	r3, r3, #5
 8006f90:	0d1b      	lsrs	r3, r3, #20
 8006f92:	69fa      	ldr	r2, [r7, #28]
 8006f94:	fb02 f303 	mul.w	r3, r2, r3
 8006f98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f9a:	e054      	b.n	8007046 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa2:	d050      	beq.n	8007046 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fa4:	f7fc f88c 	bl	80030c0 <HAL_GetTick>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	1ad3      	subs	r3, r2, r3
 8006fae:	69fa      	ldr	r2, [r7, #28]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d902      	bls.n	8006fba <SPI_WaitFlagStateUntilTimeout+0x56>
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d13d      	bne.n	8007036 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006fc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fd2:	d111      	bne.n	8006ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fdc:	d004      	beq.n	8006fe8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fe6:	d107      	bne.n	8006ff8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ff6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ffc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007000:	d10f      	bne.n	8007022 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007010:	601a      	str	r2, [r3, #0]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007020:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e017      	b.n	8007066 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	3b01      	subs	r3, #1
 8007044:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689a      	ldr	r2, [r3, #8]
 800704c:	68bb      	ldr	r3, [r7, #8]
 800704e:	4013      	ands	r3, r2
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	429a      	cmp	r2, r3
 8007054:	bf0c      	ite	eq
 8007056:	2301      	moveq	r3, #1
 8007058:	2300      	movne	r3, #0
 800705a:	b2db      	uxtb	r3, r3
 800705c:	461a      	mov	r2, r3
 800705e:	79fb      	ldrb	r3, [r7, #7]
 8007060:	429a      	cmp	r2, r3
 8007062:	d19b      	bne.n	8006f9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007064:	2300      	movs	r3, #0
}
 8007066:	4618      	mov	r0, r3
 8007068:	3720      	adds	r7, #32
 800706a:	46bd      	mov	sp, r7
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	20000004 	.word	0x20000004

08007074 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b08a      	sub	sp, #40	; 0x28
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007082:	2300      	movs	r3, #0
 8007084:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007086:	f7fc f81b 	bl	80030c0 <HAL_GetTick>
 800708a:	4602      	mov	r2, r0
 800708c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708e:	1a9b      	subs	r3, r3, r2
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	4413      	add	r3, r2
 8007094:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007096:	f7fc f813 	bl	80030c0 <HAL_GetTick>
 800709a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	330c      	adds	r3, #12
 80070a2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80070a4:	4b3d      	ldr	r3, [pc, #244]	; (800719c <SPI_WaitFifoStateUntilTimeout+0x128>)
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	4613      	mov	r3, r2
 80070aa:	009b      	lsls	r3, r3, #2
 80070ac:	4413      	add	r3, r2
 80070ae:	00da      	lsls	r2, r3, #3
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	0d1b      	lsrs	r3, r3, #20
 80070b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070b6:	fb02 f303 	mul.w	r3, r2, r3
 80070ba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80070bc:	e060      	b.n	8007180 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80070c4:	d107      	bne.n	80070d6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d104      	bne.n	80070d6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80070cc:	69fb      	ldr	r3, [r7, #28]
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80070d4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070dc:	d050      	beq.n	8007180 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80070de:	f7fb ffef 	bl	80030c0 <HAL_GetTick>
 80070e2:	4602      	mov	r2, r0
 80070e4:	6a3b      	ldr	r3, [r7, #32]
 80070e6:	1ad3      	subs	r3, r2, r3
 80070e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d902      	bls.n	80070f4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80070ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d13d      	bne.n	8007170 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	685a      	ldr	r2, [r3, #4]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007102:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800710c:	d111      	bne.n	8007132 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007116:	d004      	beq.n	8007122 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007120:	d107      	bne.n	8007132 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007130:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800713a:	d10f      	bne.n	800715c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800714a:	601a      	str	r2, [r3, #0]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800715a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e010      	b.n	8007192 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007176:	2300      	movs	r3, #0
 8007178:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	3b01      	subs	r3, #1
 800717e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689a      	ldr	r2, [r3, #8]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	4013      	ands	r3, r2
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	429a      	cmp	r2, r3
 800718e:	d196      	bne.n	80070be <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3728      	adds	r7, #40	; 0x28
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	20000004 	.word	0x20000004

080071a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af02      	add	r7, sp, #8
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f7ff ff5b 	bl	8007074 <SPI_WaitFifoStateUntilTimeout>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d007      	beq.n	80071d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071c8:	f043 0220 	orr.w	r2, r3, #32
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80071d0:	2303      	movs	r3, #3
 80071d2:	e046      	b.n	8007262 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80071d4:	4b25      	ldr	r3, [pc, #148]	; (800726c <SPI_EndRxTxTransaction+0xcc>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a25      	ldr	r2, [pc, #148]	; (8007270 <SPI_EndRxTxTransaction+0xd0>)
 80071da:	fba2 2303 	umull	r2, r3, r2, r3
 80071de:	0d5b      	lsrs	r3, r3, #21
 80071e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80071e4:	fb02 f303 	mul.w	r3, r2, r3
 80071e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071f2:	d112      	bne.n	800721a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	9300      	str	r3, [sp, #0]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	2200      	movs	r2, #0
 80071fc:	2180      	movs	r1, #128	; 0x80
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f7ff feb0 	bl	8006f64 <SPI_WaitFlagStateUntilTimeout>
 8007204:	4603      	mov	r3, r0
 8007206:	2b00      	cmp	r3, #0
 8007208:	d016      	beq.n	8007238 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800720e:	f043 0220 	orr.w	r2, r3, #32
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007216:	2303      	movs	r3, #3
 8007218:	e023      	b.n	8007262 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00a      	beq.n	8007236 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	3b01      	subs	r3, #1
 8007224:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007230:	2b80      	cmp	r3, #128	; 0x80
 8007232:	d0f2      	beq.n	800721a <SPI_EndRxTxTransaction+0x7a>
 8007234:	e000      	b.n	8007238 <SPI_EndRxTxTransaction+0x98>
        break;
 8007236:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	2200      	movs	r2, #0
 8007240:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f7ff ff15 	bl	8007074 <SPI_WaitFifoStateUntilTimeout>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d007      	beq.n	8007260 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007254:	f043 0220 	orr.w	r2, r3, #32
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e000      	b.n	8007262 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	20000004 	.word	0x20000004
 8007270:	165e9f81 	.word	0x165e9f81

08007274 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800727c:	f7fb ff20 	bl	80030c0 <HAL_GetTick>
 8007280:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0220 	bic.w	r2, r2, #32
 8007290:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	2164      	movs	r1, #100	; 0x64
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f7ff ff82 	bl	80071a0 <SPI_EndRxTxTransaction>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d005      	beq.n	80072ae <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072a6:	f043 0220 	orr.w	r2, r3, #32
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d115      	bne.n	80072e2 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b04      	cmp	r3, #4
 80072c0:	d107      	bne.n	80072d2 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2201      	movs	r2, #1
 80072c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7ff fd16 	bl	8006cfc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80072d0:	e00e      	b.n	80072f0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7fb f90c 	bl	80024f8 <HAL_SPI_TxRxCpltCallback>
}
 80072e0:	e006      	b.n	80072f0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f7ff fd10 	bl	8006d10 <HAL_SPI_ErrorCallback>
}
 80072f0:	bf00      	nop
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d101      	bne.n	800730a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e040      	b.n	800738c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800730e:	2b00      	cmp	r3, #0
 8007310:	d106      	bne.n	8007320 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7fb fc8e 	bl	8002c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2224      	movs	r2, #36	; 0x24
 8007324:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f022 0201 	bic.w	r2, r2, #1
 8007334:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f990 	bl	800765c <UART_SetConfig>
 800733c:	4603      	mov	r3, r0
 800733e:	2b01      	cmp	r3, #1
 8007340:	d101      	bne.n	8007346 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e022      	b.n	800738c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fbe6 	bl	8007b20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007362:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689a      	ldr	r2, [r3, #8]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007372:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0201 	orr.w	r2, r2, #1
 8007382:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fc6d 	bl	8007c64 <UART_CheckIdleState>
 800738a:	4603      	mov	r3, r0
}
 800738c:	4618      	mov	r0, r3
 800738e:	3708      	adds	r7, #8
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b08a      	sub	sp, #40	; 0x28
 8007398:	af02      	add	r7, sp, #8
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	4613      	mov	r3, r2
 80073a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073a8:	2b20      	cmp	r3, #32
 80073aa:	f040 8081 	bne.w	80074b0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d002      	beq.n	80073ba <HAL_UART_Transmit+0x26>
 80073b4:	88fb      	ldrh	r3, [r7, #6]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80073ba:	2301      	movs	r3, #1
 80073bc:	e079      	b.n	80074b2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d101      	bne.n	80073cc <HAL_UART_Transmit+0x38>
 80073c8:	2302      	movs	r3, #2
 80073ca:	e072      	b.n	80074b2 <HAL_UART_Transmit+0x11e>
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2221      	movs	r2, #33	; 0x21
 80073e0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073e2:	f7fb fe6d 	bl	80030c0 <HAL_GetTick>
 80073e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	88fa      	ldrh	r2, [r7, #6]
 80073ec:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	88fa      	ldrh	r2, [r7, #6]
 80073f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007400:	d108      	bne.n	8007414 <HAL_UART_Transmit+0x80>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	691b      	ldr	r3, [r3, #16]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d104      	bne.n	8007414 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800740a:	2300      	movs	r3, #0
 800740c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	61bb      	str	r3, [r7, #24]
 8007412:	e003      	b.n	800741c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007418:	2300      	movs	r3, #0
 800741a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007424:	e02c      	b.n	8007480 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2200      	movs	r2, #0
 800742e:	2180      	movs	r1, #128	; 0x80
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f000 fc60 	bl	8007cf6 <UART_WaitOnFlagUntilTimeout>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e038      	b.n	80074b2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007440:	69fb      	ldr	r3, [r7, #28]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10b      	bne.n	800745e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007446:	69bb      	ldr	r3, [r7, #24]
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	461a      	mov	r2, r3
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007454:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	3302      	adds	r3, #2
 800745a:	61bb      	str	r3, [r7, #24]
 800745c:	e007      	b.n	800746e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800745e:	69fb      	ldr	r3, [r7, #28]
 8007460:	781a      	ldrb	r2, [r3, #0]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	3301      	adds	r3, #1
 800746c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007474:	b29b      	uxth	r3, r3
 8007476:	3b01      	subs	r3, #1
 8007478:	b29a      	uxth	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007486:	b29b      	uxth	r3, r3
 8007488:	2b00      	cmp	r3, #0
 800748a:	d1cc      	bne.n	8007426 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	9300      	str	r3, [sp, #0]
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	2200      	movs	r2, #0
 8007494:	2140      	movs	r1, #64	; 0x40
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	f000 fc2d 	bl	8007cf6 <UART_WaitOnFlagUntilTimeout>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d001      	beq.n	80074a6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80074a2:	2303      	movs	r3, #3
 80074a4:	e005      	b.n	80074b2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2220      	movs	r2, #32
 80074aa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80074ac:	2300      	movs	r3, #0
 80074ae:	e000      	b.n	80074b2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80074b0:	2302      	movs	r3, #2
  }
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3720      	adds	r7, #32
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b08a      	sub	sp, #40	; 0x28
 80074be:	af02      	add	r7, sp, #8
 80074c0:	60f8      	str	r0, [r7, #12]
 80074c2:	60b9      	str	r1, [r7, #8]
 80074c4:	603b      	str	r3, [r7, #0]
 80074c6:	4613      	mov	r3, r2
 80074c8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074ce:	2b20      	cmp	r3, #32
 80074d0:	f040 80be 	bne.w	8007650 <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <HAL_UART_Receive+0x26>
 80074da:	88fb      	ldrh	r3, [r7, #6]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d101      	bne.n	80074e4 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e0b6      	b.n	8007652 <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80074ea:	2b01      	cmp	r3, #1
 80074ec:	d101      	bne.n	80074f2 <HAL_UART_Receive+0x38>
 80074ee:	2302      	movs	r3, #2
 80074f0:	e0af      	b.n	8007652 <HAL_UART_Receive+0x198>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2222      	movs	r2, #34	; 0x22
 8007506:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	2200      	movs	r2, #0
 800750c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800750e:	f7fb fdd7 	bl	80030c0 <HAL_GetTick>
 8007512:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	88fa      	ldrh	r2, [r7, #6]
 8007518:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	88fa      	ldrh	r2, [r7, #6]
 8007520:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800752c:	d10e      	bne.n	800754c <HAL_UART_Receive+0x92>
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	691b      	ldr	r3, [r3, #16]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d105      	bne.n	8007542 <HAL_UART_Receive+0x88>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f240 12ff 	movw	r2, #511	; 0x1ff
 800753c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007540:	e02d      	b.n	800759e <HAL_UART_Receive+0xe4>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	22ff      	movs	r2, #255	; 0xff
 8007546:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800754a:	e028      	b.n	800759e <HAL_UART_Receive+0xe4>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d10d      	bne.n	8007570 <HAL_UART_Receive+0xb6>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d104      	bne.n	8007566 <HAL_UART_Receive+0xac>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	22ff      	movs	r2, #255	; 0xff
 8007560:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007564:	e01b      	b.n	800759e <HAL_UART_Receive+0xe4>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	227f      	movs	r2, #127	; 0x7f
 800756a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800756e:	e016      	b.n	800759e <HAL_UART_Receive+0xe4>
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007578:	d10d      	bne.n	8007596 <HAL_UART_Receive+0xdc>
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d104      	bne.n	800758c <HAL_UART_Receive+0xd2>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	227f      	movs	r2, #127	; 0x7f
 8007586:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800758a:	e008      	b.n	800759e <HAL_UART_Receive+0xe4>
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	223f      	movs	r2, #63	; 0x3f
 8007590:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007594:	e003      	b.n	800759e <HAL_UART_Receive+0xe4>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2200      	movs	r2, #0
 800759a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80075a4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075ae:	d108      	bne.n	80075c2 <HAL_UART_Receive+0x108>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d104      	bne.n	80075c2 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80075b8:	2300      	movs	r3, #0
 80075ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	61bb      	str	r3, [r7, #24]
 80075c0:	e003      	b.n	80075ca <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80075c6:	2300      	movs	r3, #0
 80075c8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80075d2:	e032      	b.n	800763a <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2200      	movs	r2, #0
 80075dc:	2120      	movs	r1, #32
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 fb89 	bl	8007cf6 <UART_WaitOnFlagUntilTimeout>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d001      	beq.n	80075ee <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e031      	b.n	8007652 <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d10c      	bne.n	800760e <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075fa:	b29a      	uxth	r2, r3
 80075fc:	8a7b      	ldrh	r3, [r7, #18]
 80075fe:	4013      	ands	r3, r2
 8007600:	b29a      	uxth	r2, r3
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	3302      	adds	r3, #2
 800760a:	61bb      	str	r3, [r7, #24]
 800760c:	e00c      	b.n	8007628 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007614:	b2da      	uxtb	r2, r3
 8007616:	8a7b      	ldrh	r3, [r7, #18]
 8007618:	b2db      	uxtb	r3, r3
 800761a:	4013      	ands	r3, r2
 800761c:	b2da      	uxtb	r2, r3
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	3301      	adds	r3, #1
 8007626:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800762e:	b29b      	uxth	r3, r3
 8007630:	3b01      	subs	r3, #1
 8007632:	b29a      	uxth	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007640:	b29b      	uxth	r3, r3
 8007642:	2b00      	cmp	r3, #0
 8007644:	d1c6      	bne.n	80075d4 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2220      	movs	r2, #32
 800764a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	e000      	b.n	8007652 <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 8007650:	2302      	movs	r3, #2
  }
}
 8007652:	4618      	mov	r0, r3
 8007654:	3720      	adds	r7, #32
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
	...

0800765c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b088      	sub	sp, #32
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007664:	2300      	movs	r3, #0
 8007666:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	689a      	ldr	r2, [r3, #8]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	691b      	ldr	r3, [r3, #16]
 8007670:	431a      	orrs	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	431a      	orrs	r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	69db      	ldr	r3, [r3, #28]
 800767c:	4313      	orrs	r3, r2
 800767e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	4ba7      	ldr	r3, [pc, #668]	; (8007924 <UART_SetConfig+0x2c8>)
 8007688:	4013      	ands	r3, r2
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	6812      	ldr	r2, [r2, #0]
 800768e:	6979      	ldr	r1, [r7, #20]
 8007690:	430b      	orrs	r3, r1
 8007692:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	68da      	ldr	r2, [r3, #12]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	6a1b      	ldr	r3, [r3, #32]
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	430a      	orrs	r2, r1
 80076cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a95      	ldr	r2, [pc, #596]	; (8007928 <UART_SetConfig+0x2cc>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d120      	bne.n	800771a <UART_SetConfig+0xbe>
 80076d8:	4b94      	ldr	r3, [pc, #592]	; (800792c <UART_SetConfig+0x2d0>)
 80076da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076de:	f003 0303 	and.w	r3, r3, #3
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d816      	bhi.n	8007714 <UART_SetConfig+0xb8>
 80076e6:	a201      	add	r2, pc, #4	; (adr r2, 80076ec <UART_SetConfig+0x90>)
 80076e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ec:	080076fd 	.word	0x080076fd
 80076f0:	08007709 	.word	0x08007709
 80076f4:	08007703 	.word	0x08007703
 80076f8:	0800770f 	.word	0x0800770f
 80076fc:	2301      	movs	r3, #1
 80076fe:	77fb      	strb	r3, [r7, #31]
 8007700:	e14f      	b.n	80079a2 <UART_SetConfig+0x346>
 8007702:	2302      	movs	r3, #2
 8007704:	77fb      	strb	r3, [r7, #31]
 8007706:	e14c      	b.n	80079a2 <UART_SetConfig+0x346>
 8007708:	2304      	movs	r3, #4
 800770a:	77fb      	strb	r3, [r7, #31]
 800770c:	e149      	b.n	80079a2 <UART_SetConfig+0x346>
 800770e:	2308      	movs	r3, #8
 8007710:	77fb      	strb	r3, [r7, #31]
 8007712:	e146      	b.n	80079a2 <UART_SetConfig+0x346>
 8007714:	2310      	movs	r3, #16
 8007716:	77fb      	strb	r3, [r7, #31]
 8007718:	e143      	b.n	80079a2 <UART_SetConfig+0x346>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a84      	ldr	r2, [pc, #528]	; (8007930 <UART_SetConfig+0x2d4>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d132      	bne.n	800778a <UART_SetConfig+0x12e>
 8007724:	4b81      	ldr	r3, [pc, #516]	; (800792c <UART_SetConfig+0x2d0>)
 8007726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800772a:	f003 030c 	and.w	r3, r3, #12
 800772e:	2b0c      	cmp	r3, #12
 8007730:	d828      	bhi.n	8007784 <UART_SetConfig+0x128>
 8007732:	a201      	add	r2, pc, #4	; (adr r2, 8007738 <UART_SetConfig+0xdc>)
 8007734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007738:	0800776d 	.word	0x0800776d
 800773c:	08007785 	.word	0x08007785
 8007740:	08007785 	.word	0x08007785
 8007744:	08007785 	.word	0x08007785
 8007748:	08007779 	.word	0x08007779
 800774c:	08007785 	.word	0x08007785
 8007750:	08007785 	.word	0x08007785
 8007754:	08007785 	.word	0x08007785
 8007758:	08007773 	.word	0x08007773
 800775c:	08007785 	.word	0x08007785
 8007760:	08007785 	.word	0x08007785
 8007764:	08007785 	.word	0x08007785
 8007768:	0800777f 	.word	0x0800777f
 800776c:	2300      	movs	r3, #0
 800776e:	77fb      	strb	r3, [r7, #31]
 8007770:	e117      	b.n	80079a2 <UART_SetConfig+0x346>
 8007772:	2302      	movs	r3, #2
 8007774:	77fb      	strb	r3, [r7, #31]
 8007776:	e114      	b.n	80079a2 <UART_SetConfig+0x346>
 8007778:	2304      	movs	r3, #4
 800777a:	77fb      	strb	r3, [r7, #31]
 800777c:	e111      	b.n	80079a2 <UART_SetConfig+0x346>
 800777e:	2308      	movs	r3, #8
 8007780:	77fb      	strb	r3, [r7, #31]
 8007782:	e10e      	b.n	80079a2 <UART_SetConfig+0x346>
 8007784:	2310      	movs	r3, #16
 8007786:	77fb      	strb	r3, [r7, #31]
 8007788:	e10b      	b.n	80079a2 <UART_SetConfig+0x346>
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a69      	ldr	r2, [pc, #420]	; (8007934 <UART_SetConfig+0x2d8>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d120      	bne.n	80077d6 <UART_SetConfig+0x17a>
 8007794:	4b65      	ldr	r3, [pc, #404]	; (800792c <UART_SetConfig+0x2d0>)
 8007796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800779a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800779e:	2b30      	cmp	r3, #48	; 0x30
 80077a0:	d013      	beq.n	80077ca <UART_SetConfig+0x16e>
 80077a2:	2b30      	cmp	r3, #48	; 0x30
 80077a4:	d814      	bhi.n	80077d0 <UART_SetConfig+0x174>
 80077a6:	2b20      	cmp	r3, #32
 80077a8:	d009      	beq.n	80077be <UART_SetConfig+0x162>
 80077aa:	2b20      	cmp	r3, #32
 80077ac:	d810      	bhi.n	80077d0 <UART_SetConfig+0x174>
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d002      	beq.n	80077b8 <UART_SetConfig+0x15c>
 80077b2:	2b10      	cmp	r3, #16
 80077b4:	d006      	beq.n	80077c4 <UART_SetConfig+0x168>
 80077b6:	e00b      	b.n	80077d0 <UART_SetConfig+0x174>
 80077b8:	2300      	movs	r3, #0
 80077ba:	77fb      	strb	r3, [r7, #31]
 80077bc:	e0f1      	b.n	80079a2 <UART_SetConfig+0x346>
 80077be:	2302      	movs	r3, #2
 80077c0:	77fb      	strb	r3, [r7, #31]
 80077c2:	e0ee      	b.n	80079a2 <UART_SetConfig+0x346>
 80077c4:	2304      	movs	r3, #4
 80077c6:	77fb      	strb	r3, [r7, #31]
 80077c8:	e0eb      	b.n	80079a2 <UART_SetConfig+0x346>
 80077ca:	2308      	movs	r3, #8
 80077cc:	77fb      	strb	r3, [r7, #31]
 80077ce:	e0e8      	b.n	80079a2 <UART_SetConfig+0x346>
 80077d0:	2310      	movs	r3, #16
 80077d2:	77fb      	strb	r3, [r7, #31]
 80077d4:	e0e5      	b.n	80079a2 <UART_SetConfig+0x346>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a57      	ldr	r2, [pc, #348]	; (8007938 <UART_SetConfig+0x2dc>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d120      	bne.n	8007822 <UART_SetConfig+0x1c6>
 80077e0:	4b52      	ldr	r3, [pc, #328]	; (800792c <UART_SetConfig+0x2d0>)
 80077e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077ea:	2bc0      	cmp	r3, #192	; 0xc0
 80077ec:	d013      	beq.n	8007816 <UART_SetConfig+0x1ba>
 80077ee:	2bc0      	cmp	r3, #192	; 0xc0
 80077f0:	d814      	bhi.n	800781c <UART_SetConfig+0x1c0>
 80077f2:	2b80      	cmp	r3, #128	; 0x80
 80077f4:	d009      	beq.n	800780a <UART_SetConfig+0x1ae>
 80077f6:	2b80      	cmp	r3, #128	; 0x80
 80077f8:	d810      	bhi.n	800781c <UART_SetConfig+0x1c0>
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <UART_SetConfig+0x1a8>
 80077fe:	2b40      	cmp	r3, #64	; 0x40
 8007800:	d006      	beq.n	8007810 <UART_SetConfig+0x1b4>
 8007802:	e00b      	b.n	800781c <UART_SetConfig+0x1c0>
 8007804:	2300      	movs	r3, #0
 8007806:	77fb      	strb	r3, [r7, #31]
 8007808:	e0cb      	b.n	80079a2 <UART_SetConfig+0x346>
 800780a:	2302      	movs	r3, #2
 800780c:	77fb      	strb	r3, [r7, #31]
 800780e:	e0c8      	b.n	80079a2 <UART_SetConfig+0x346>
 8007810:	2304      	movs	r3, #4
 8007812:	77fb      	strb	r3, [r7, #31]
 8007814:	e0c5      	b.n	80079a2 <UART_SetConfig+0x346>
 8007816:	2308      	movs	r3, #8
 8007818:	77fb      	strb	r3, [r7, #31]
 800781a:	e0c2      	b.n	80079a2 <UART_SetConfig+0x346>
 800781c:	2310      	movs	r3, #16
 800781e:	77fb      	strb	r3, [r7, #31]
 8007820:	e0bf      	b.n	80079a2 <UART_SetConfig+0x346>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a45      	ldr	r2, [pc, #276]	; (800793c <UART_SetConfig+0x2e0>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d125      	bne.n	8007878 <UART_SetConfig+0x21c>
 800782c:	4b3f      	ldr	r3, [pc, #252]	; (800792c <UART_SetConfig+0x2d0>)
 800782e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007832:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800783a:	d017      	beq.n	800786c <UART_SetConfig+0x210>
 800783c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007840:	d817      	bhi.n	8007872 <UART_SetConfig+0x216>
 8007842:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007846:	d00b      	beq.n	8007860 <UART_SetConfig+0x204>
 8007848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800784c:	d811      	bhi.n	8007872 <UART_SetConfig+0x216>
 800784e:	2b00      	cmp	r3, #0
 8007850:	d003      	beq.n	800785a <UART_SetConfig+0x1fe>
 8007852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007856:	d006      	beq.n	8007866 <UART_SetConfig+0x20a>
 8007858:	e00b      	b.n	8007872 <UART_SetConfig+0x216>
 800785a:	2300      	movs	r3, #0
 800785c:	77fb      	strb	r3, [r7, #31]
 800785e:	e0a0      	b.n	80079a2 <UART_SetConfig+0x346>
 8007860:	2302      	movs	r3, #2
 8007862:	77fb      	strb	r3, [r7, #31]
 8007864:	e09d      	b.n	80079a2 <UART_SetConfig+0x346>
 8007866:	2304      	movs	r3, #4
 8007868:	77fb      	strb	r3, [r7, #31]
 800786a:	e09a      	b.n	80079a2 <UART_SetConfig+0x346>
 800786c:	2308      	movs	r3, #8
 800786e:	77fb      	strb	r3, [r7, #31]
 8007870:	e097      	b.n	80079a2 <UART_SetConfig+0x346>
 8007872:	2310      	movs	r3, #16
 8007874:	77fb      	strb	r3, [r7, #31]
 8007876:	e094      	b.n	80079a2 <UART_SetConfig+0x346>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	4a30      	ldr	r2, [pc, #192]	; (8007940 <UART_SetConfig+0x2e4>)
 800787e:	4293      	cmp	r3, r2
 8007880:	d125      	bne.n	80078ce <UART_SetConfig+0x272>
 8007882:	4b2a      	ldr	r3, [pc, #168]	; (800792c <UART_SetConfig+0x2d0>)
 8007884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007888:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800788c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007890:	d017      	beq.n	80078c2 <UART_SetConfig+0x266>
 8007892:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007896:	d817      	bhi.n	80078c8 <UART_SetConfig+0x26c>
 8007898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800789c:	d00b      	beq.n	80078b6 <UART_SetConfig+0x25a>
 800789e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078a2:	d811      	bhi.n	80078c8 <UART_SetConfig+0x26c>
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d003      	beq.n	80078b0 <UART_SetConfig+0x254>
 80078a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078ac:	d006      	beq.n	80078bc <UART_SetConfig+0x260>
 80078ae:	e00b      	b.n	80078c8 <UART_SetConfig+0x26c>
 80078b0:	2301      	movs	r3, #1
 80078b2:	77fb      	strb	r3, [r7, #31]
 80078b4:	e075      	b.n	80079a2 <UART_SetConfig+0x346>
 80078b6:	2302      	movs	r3, #2
 80078b8:	77fb      	strb	r3, [r7, #31]
 80078ba:	e072      	b.n	80079a2 <UART_SetConfig+0x346>
 80078bc:	2304      	movs	r3, #4
 80078be:	77fb      	strb	r3, [r7, #31]
 80078c0:	e06f      	b.n	80079a2 <UART_SetConfig+0x346>
 80078c2:	2308      	movs	r3, #8
 80078c4:	77fb      	strb	r3, [r7, #31]
 80078c6:	e06c      	b.n	80079a2 <UART_SetConfig+0x346>
 80078c8:	2310      	movs	r3, #16
 80078ca:	77fb      	strb	r3, [r7, #31]
 80078cc:	e069      	b.n	80079a2 <UART_SetConfig+0x346>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a1c      	ldr	r2, [pc, #112]	; (8007944 <UART_SetConfig+0x2e8>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d137      	bne.n	8007948 <UART_SetConfig+0x2ec>
 80078d8:	4b14      	ldr	r3, [pc, #80]	; (800792c <UART_SetConfig+0x2d0>)
 80078da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078de:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80078e2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078e6:	d017      	beq.n	8007918 <UART_SetConfig+0x2bc>
 80078e8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078ec:	d817      	bhi.n	800791e <UART_SetConfig+0x2c2>
 80078ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078f2:	d00b      	beq.n	800790c <UART_SetConfig+0x2b0>
 80078f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078f8:	d811      	bhi.n	800791e <UART_SetConfig+0x2c2>
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d003      	beq.n	8007906 <UART_SetConfig+0x2aa>
 80078fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007902:	d006      	beq.n	8007912 <UART_SetConfig+0x2b6>
 8007904:	e00b      	b.n	800791e <UART_SetConfig+0x2c2>
 8007906:	2300      	movs	r3, #0
 8007908:	77fb      	strb	r3, [r7, #31]
 800790a:	e04a      	b.n	80079a2 <UART_SetConfig+0x346>
 800790c:	2302      	movs	r3, #2
 800790e:	77fb      	strb	r3, [r7, #31]
 8007910:	e047      	b.n	80079a2 <UART_SetConfig+0x346>
 8007912:	2304      	movs	r3, #4
 8007914:	77fb      	strb	r3, [r7, #31]
 8007916:	e044      	b.n	80079a2 <UART_SetConfig+0x346>
 8007918:	2308      	movs	r3, #8
 800791a:	77fb      	strb	r3, [r7, #31]
 800791c:	e041      	b.n	80079a2 <UART_SetConfig+0x346>
 800791e:	2310      	movs	r3, #16
 8007920:	77fb      	strb	r3, [r7, #31]
 8007922:	e03e      	b.n	80079a2 <UART_SetConfig+0x346>
 8007924:	efff69f3 	.word	0xefff69f3
 8007928:	40011000 	.word	0x40011000
 800792c:	40023800 	.word	0x40023800
 8007930:	40004400 	.word	0x40004400
 8007934:	40004800 	.word	0x40004800
 8007938:	40004c00 	.word	0x40004c00
 800793c:	40005000 	.word	0x40005000
 8007940:	40011400 	.word	0x40011400
 8007944:	40007800 	.word	0x40007800
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a71      	ldr	r2, [pc, #452]	; (8007b14 <UART_SetConfig+0x4b8>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d125      	bne.n	800799e <UART_SetConfig+0x342>
 8007952:	4b71      	ldr	r3, [pc, #452]	; (8007b18 <UART_SetConfig+0x4bc>)
 8007954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007958:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800795c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007960:	d017      	beq.n	8007992 <UART_SetConfig+0x336>
 8007962:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007966:	d817      	bhi.n	8007998 <UART_SetConfig+0x33c>
 8007968:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800796c:	d00b      	beq.n	8007986 <UART_SetConfig+0x32a>
 800796e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007972:	d811      	bhi.n	8007998 <UART_SetConfig+0x33c>
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <UART_SetConfig+0x324>
 8007978:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800797c:	d006      	beq.n	800798c <UART_SetConfig+0x330>
 800797e:	e00b      	b.n	8007998 <UART_SetConfig+0x33c>
 8007980:	2300      	movs	r3, #0
 8007982:	77fb      	strb	r3, [r7, #31]
 8007984:	e00d      	b.n	80079a2 <UART_SetConfig+0x346>
 8007986:	2302      	movs	r3, #2
 8007988:	77fb      	strb	r3, [r7, #31]
 800798a:	e00a      	b.n	80079a2 <UART_SetConfig+0x346>
 800798c:	2304      	movs	r3, #4
 800798e:	77fb      	strb	r3, [r7, #31]
 8007990:	e007      	b.n	80079a2 <UART_SetConfig+0x346>
 8007992:	2308      	movs	r3, #8
 8007994:	77fb      	strb	r3, [r7, #31]
 8007996:	e004      	b.n	80079a2 <UART_SetConfig+0x346>
 8007998:	2310      	movs	r3, #16
 800799a:	77fb      	strb	r3, [r7, #31]
 800799c:	e001      	b.n	80079a2 <UART_SetConfig+0x346>
 800799e:	2310      	movs	r3, #16
 80079a0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	69db      	ldr	r3, [r3, #28]
 80079a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079aa:	d15a      	bne.n	8007a62 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80079ac:	7ffb      	ldrb	r3, [r7, #31]
 80079ae:	2b08      	cmp	r3, #8
 80079b0:	d827      	bhi.n	8007a02 <UART_SetConfig+0x3a6>
 80079b2:	a201      	add	r2, pc, #4	; (adr r2, 80079b8 <UART_SetConfig+0x35c>)
 80079b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b8:	080079dd 	.word	0x080079dd
 80079bc:	080079e5 	.word	0x080079e5
 80079c0:	080079ed 	.word	0x080079ed
 80079c4:	08007a03 	.word	0x08007a03
 80079c8:	080079f3 	.word	0x080079f3
 80079cc:	08007a03 	.word	0x08007a03
 80079d0:	08007a03 	.word	0x08007a03
 80079d4:	08007a03 	.word	0x08007a03
 80079d8:	080079fb 	.word	0x080079fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079dc:	f7fe fae2 	bl	8005fa4 <HAL_RCC_GetPCLK1Freq>
 80079e0:	61b8      	str	r0, [r7, #24]
        break;
 80079e2:	e013      	b.n	8007a0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079e4:	f7fe faf2 	bl	8005fcc <HAL_RCC_GetPCLK2Freq>
 80079e8:	61b8      	str	r0, [r7, #24]
        break;
 80079ea:	e00f      	b.n	8007a0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079ec:	4b4b      	ldr	r3, [pc, #300]	; (8007b1c <UART_SetConfig+0x4c0>)
 80079ee:	61bb      	str	r3, [r7, #24]
        break;
 80079f0:	e00c      	b.n	8007a0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079f2:	f7fe fa15 	bl	8005e20 <HAL_RCC_GetSysClockFreq>
 80079f6:	61b8      	str	r0, [r7, #24]
        break;
 80079f8:	e008      	b.n	8007a0c <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079fe:	61bb      	str	r3, [r7, #24]
        break;
 8007a00:	e004      	b.n	8007a0c <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8007a02:	2300      	movs	r3, #0
 8007a04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	77bb      	strb	r3, [r7, #30]
        break;
 8007a0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d074      	beq.n	8007afc <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a12:	69bb      	ldr	r3, [r7, #24]
 8007a14:	005a      	lsls	r2, r3, #1
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	085b      	lsrs	r3, r3, #1
 8007a1c:	441a      	add	r2, r3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	2b0f      	cmp	r3, #15
 8007a2c:	d916      	bls.n	8007a5c <UART_SetConfig+0x400>
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a34:	d212      	bcs.n	8007a5c <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	f023 030f 	bic.w	r3, r3, #15
 8007a3e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	085b      	lsrs	r3, r3, #1
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	b29a      	uxth	r2, r3
 8007a4c:	89fb      	ldrh	r3, [r7, #14]
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	89fa      	ldrh	r2, [r7, #14]
 8007a58:	60da      	str	r2, [r3, #12]
 8007a5a:	e04f      	b.n	8007afc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	77bb      	strb	r3, [r7, #30]
 8007a60:	e04c      	b.n	8007afc <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a62:	7ffb      	ldrb	r3, [r7, #31]
 8007a64:	2b08      	cmp	r3, #8
 8007a66:	d828      	bhi.n	8007aba <UART_SetConfig+0x45e>
 8007a68:	a201      	add	r2, pc, #4	; (adr r2, 8007a70 <UART_SetConfig+0x414>)
 8007a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6e:	bf00      	nop
 8007a70:	08007a95 	.word	0x08007a95
 8007a74:	08007a9d 	.word	0x08007a9d
 8007a78:	08007aa5 	.word	0x08007aa5
 8007a7c:	08007abb 	.word	0x08007abb
 8007a80:	08007aab 	.word	0x08007aab
 8007a84:	08007abb 	.word	0x08007abb
 8007a88:	08007abb 	.word	0x08007abb
 8007a8c:	08007abb 	.word	0x08007abb
 8007a90:	08007ab3 	.word	0x08007ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a94:	f7fe fa86 	bl	8005fa4 <HAL_RCC_GetPCLK1Freq>
 8007a98:	61b8      	str	r0, [r7, #24]
        break;
 8007a9a:	e013      	b.n	8007ac4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a9c:	f7fe fa96 	bl	8005fcc <HAL_RCC_GetPCLK2Freq>
 8007aa0:	61b8      	str	r0, [r7, #24]
        break;
 8007aa2:	e00f      	b.n	8007ac4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007aa4:	4b1d      	ldr	r3, [pc, #116]	; (8007b1c <UART_SetConfig+0x4c0>)
 8007aa6:	61bb      	str	r3, [r7, #24]
        break;
 8007aa8:	e00c      	b.n	8007ac4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007aaa:	f7fe f9b9 	bl	8005e20 <HAL_RCC_GetSysClockFreq>
 8007aae:	61b8      	str	r0, [r7, #24]
        break;
 8007ab0:	e008      	b.n	8007ac4 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ab6:	61bb      	str	r3, [r7, #24]
        break;
 8007ab8:	e004      	b.n	8007ac4 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	77bb      	strb	r3, [r7, #30]
        break;
 8007ac2:	bf00      	nop
    }

    if (pclk != 0U)
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d018      	beq.n	8007afc <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	085a      	lsrs	r2, r3, #1
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	441a      	add	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007adc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	2b0f      	cmp	r3, #15
 8007ae2:	d909      	bls.n	8007af8 <UART_SetConfig+0x49c>
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007aea:	d205      	bcs.n	8007af8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	60da      	str	r2, [r3, #12]
 8007af6:	e001      	b.n	8007afc <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2200      	movs	r2, #0
 8007b06:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007b08:	7fbb      	ldrb	r3, [r7, #30]
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3720      	adds	r7, #32
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	40007c00 	.word	0x40007c00
 8007b18:	40023800 	.word	0x40023800
 8007b1c:	00f42400 	.word	0x00f42400

08007b20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00a      	beq.n	8007b4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	430a      	orrs	r2, r1
 8007b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4e:	f003 0302 	and.w	r3, r3, #2
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b70:	f003 0304 	and.w	r3, r3, #4
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00a      	beq.n	8007b8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b92:	f003 0308 	and.w	r3, r3, #8
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	430a      	orrs	r2, r1
 8007bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	f003 0310 	and.w	r3, r3, #16
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00a      	beq.n	8007bd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd6:	f003 0320 	and.w	r3, r3, #32
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d01a      	beq.n	8007c36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	430a      	orrs	r2, r1
 8007c14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c1e:	d10a      	bne.n	8007c36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	430a      	orrs	r2, r1
 8007c34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00a      	beq.n	8007c58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	685b      	ldr	r3, [r3, #4]
 8007c48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	430a      	orrs	r2, r1
 8007c56:	605a      	str	r2, [r3, #4]
  }
}
 8007c58:	bf00      	nop
 8007c5a:	370c      	adds	r7, #12
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b086      	sub	sp, #24
 8007c68:	af02      	add	r7, sp, #8
 8007c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c74:	f7fb fa24 	bl	80030c0 <HAL_GetTick>
 8007c78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 0308 	and.w	r3, r3, #8
 8007c84:	2b08      	cmp	r3, #8
 8007c86:	d10e      	bne.n	8007ca6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c8c:	9300      	str	r3, [sp, #0]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f82d 	bl	8007cf6 <UART_WaitOnFlagUntilTimeout>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d001      	beq.n	8007ca6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e023      	b.n	8007cee <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0304 	and.w	r3, r3, #4
 8007cb0:	2b04      	cmp	r3, #4
 8007cb2:	d10e      	bne.n	8007cd2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f817 	bl	8007cf6 <UART_WaitOnFlagUntilTimeout>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cce:	2303      	movs	r3, #3
 8007cd0:	e00d      	b.n	8007cee <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2220      	movs	r2, #32
 8007cd6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2220      	movs	r2, #32
 8007cdc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007cec:	2300      	movs	r3, #0
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b09c      	sub	sp, #112	; 0x70
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	60f8      	str	r0, [r7, #12]
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	603b      	str	r3, [r7, #0]
 8007d02:	4613      	mov	r3, r2
 8007d04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d06:	e0a5      	b.n	8007e54 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d0e:	f000 80a1 	beq.w	8007e54 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d12:	f7fb f9d5 	bl	80030c0 <HAL_GetTick>
 8007d16:	4602      	mov	r2, r0
 8007d18:	683b      	ldr	r3, [r7, #0]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d302      	bcc.n	8007d28 <UART_WaitOnFlagUntilTimeout+0x32>
 8007d22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d13e      	bne.n	8007da6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d3c:	667b      	str	r3, [r7, #100]	; 0x64
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	461a      	mov	r2, r3
 8007d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d48:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d4e:	e841 2300 	strex	r3, r2, [r1]
 8007d52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d1e6      	bne.n	8007d28 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	3308      	adds	r3, #8
 8007d60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d64:	e853 3f00 	ldrex	r3, [r3]
 8007d68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6c:	f023 0301 	bic.w	r3, r3, #1
 8007d70:	663b      	str	r3, [r7, #96]	; 0x60
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	3308      	adds	r3, #8
 8007d78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8007d7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007d80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d82:	e841 2300 	strex	r3, r2, [r1]
 8007d86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1e5      	bne.n	8007d5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2220      	movs	r2, #32
 8007d92:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2220      	movs	r2, #32
 8007d98:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e067      	b.n	8007e76 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 0304 	and.w	r3, r3, #4
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d04f      	beq.n	8007e54 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	69db      	ldr	r3, [r3, #28]
 8007dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007dc2:	d147      	bne.n	8007e54 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dcc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd6:	e853 3f00 	ldrex	r3, [r3]
 8007dda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dde:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007de2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dec:	637b      	str	r3, [r7, #52]	; 0x34
 8007dee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007df2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007df4:	e841 2300 	strex	r3, r2, [r1]
 8007df8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d1e6      	bne.n	8007dce <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	3308      	adds	r3, #8
 8007e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	e853 3f00 	ldrex	r3, [r3]
 8007e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	f023 0301 	bic.w	r3, r3, #1
 8007e16:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e20:	623a      	str	r2, [r7, #32]
 8007e22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e24:	69f9      	ldr	r1, [r7, #28]
 8007e26:	6a3a      	ldr	r2, [r7, #32]
 8007e28:	e841 2300 	strex	r3, r2, [r1]
 8007e2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1e5      	bne.n	8007e00 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2220      	movs	r2, #32
 8007e38:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2220      	movs	r2, #32
 8007e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007e50:	2303      	movs	r3, #3
 8007e52:	e010      	b.n	8007e76 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	69da      	ldr	r2, [r3, #28]
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	68ba      	ldr	r2, [r7, #8]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	bf0c      	ite	eq
 8007e64:	2301      	moveq	r3, #1
 8007e66:	2300      	movne	r3, #0
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	79fb      	ldrb	r3, [r7, #7]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	f43f af4a 	beq.w	8007d08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3770      	adds	r7, #112	; 0x70
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
	...

08007e80 <__errno>:
 8007e80:	4b01      	ldr	r3, [pc, #4]	; (8007e88 <__errno+0x8>)
 8007e82:	6818      	ldr	r0, [r3, #0]
 8007e84:	4770      	bx	lr
 8007e86:	bf00      	nop
 8007e88:	20000010 	.word	0x20000010

08007e8c <__libc_init_array>:
 8007e8c:	b570      	push	{r4, r5, r6, lr}
 8007e8e:	4d0d      	ldr	r5, [pc, #52]	; (8007ec4 <__libc_init_array+0x38>)
 8007e90:	4c0d      	ldr	r4, [pc, #52]	; (8007ec8 <__libc_init_array+0x3c>)
 8007e92:	1b64      	subs	r4, r4, r5
 8007e94:	10a4      	asrs	r4, r4, #2
 8007e96:	2600      	movs	r6, #0
 8007e98:	42a6      	cmp	r6, r4
 8007e9a:	d109      	bne.n	8007eb0 <__libc_init_array+0x24>
 8007e9c:	4d0b      	ldr	r5, [pc, #44]	; (8007ecc <__libc_init_array+0x40>)
 8007e9e:	4c0c      	ldr	r4, [pc, #48]	; (8007ed0 <__libc_init_array+0x44>)
 8007ea0:	f004 fcf2 	bl	800c888 <_init>
 8007ea4:	1b64      	subs	r4, r4, r5
 8007ea6:	10a4      	asrs	r4, r4, #2
 8007ea8:	2600      	movs	r6, #0
 8007eaa:	42a6      	cmp	r6, r4
 8007eac:	d105      	bne.n	8007eba <__libc_init_array+0x2e>
 8007eae:	bd70      	pop	{r4, r5, r6, pc}
 8007eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eb4:	4798      	blx	r3
 8007eb6:	3601      	adds	r6, #1
 8007eb8:	e7ee      	b.n	8007e98 <__libc_init_array+0xc>
 8007eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ebe:	4798      	blx	r3
 8007ec0:	3601      	adds	r6, #1
 8007ec2:	e7f2      	b.n	8007eaa <__libc_init_array+0x1e>
 8007ec4:	0800d330 	.word	0x0800d330
 8007ec8:	0800d330 	.word	0x0800d330
 8007ecc:	0800d330 	.word	0x0800d330
 8007ed0:	0800d334 	.word	0x0800d334

08007ed4 <memset>:
 8007ed4:	4402      	add	r2, r0
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d100      	bne.n	8007ede <memset+0xa>
 8007edc:	4770      	bx	lr
 8007ede:	f803 1b01 	strb.w	r1, [r3], #1
 8007ee2:	e7f9      	b.n	8007ed8 <memset+0x4>

08007ee4 <__cvt>:
 8007ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ee6:	ed2d 8b02 	vpush	{d8}
 8007eea:	eeb0 8b40 	vmov.f64	d8, d0
 8007eee:	b085      	sub	sp, #20
 8007ef0:	4617      	mov	r7, r2
 8007ef2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007ef4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007ef6:	ee18 2a90 	vmov	r2, s17
 8007efa:	f025 0520 	bic.w	r5, r5, #32
 8007efe:	2a00      	cmp	r2, #0
 8007f00:	bfb6      	itet	lt
 8007f02:	222d      	movlt	r2, #45	; 0x2d
 8007f04:	2200      	movge	r2, #0
 8007f06:	eeb1 8b40 	vneglt.f64	d8, d0
 8007f0a:	2d46      	cmp	r5, #70	; 0x46
 8007f0c:	460c      	mov	r4, r1
 8007f0e:	701a      	strb	r2, [r3, #0]
 8007f10:	d004      	beq.n	8007f1c <__cvt+0x38>
 8007f12:	2d45      	cmp	r5, #69	; 0x45
 8007f14:	d100      	bne.n	8007f18 <__cvt+0x34>
 8007f16:	3401      	adds	r4, #1
 8007f18:	2102      	movs	r1, #2
 8007f1a:	e000      	b.n	8007f1e <__cvt+0x3a>
 8007f1c:	2103      	movs	r1, #3
 8007f1e:	ab03      	add	r3, sp, #12
 8007f20:	9301      	str	r3, [sp, #4]
 8007f22:	ab02      	add	r3, sp, #8
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	4622      	mov	r2, r4
 8007f28:	4633      	mov	r3, r6
 8007f2a:	eeb0 0b48 	vmov.f64	d0, d8
 8007f2e:	f001 feb7 	bl	8009ca0 <_dtoa_r>
 8007f32:	2d47      	cmp	r5, #71	; 0x47
 8007f34:	d109      	bne.n	8007f4a <__cvt+0x66>
 8007f36:	07fb      	lsls	r3, r7, #31
 8007f38:	d407      	bmi.n	8007f4a <__cvt+0x66>
 8007f3a:	9b03      	ldr	r3, [sp, #12]
 8007f3c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f3e:	1a1b      	subs	r3, r3, r0
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	b005      	add	sp, #20
 8007f44:	ecbd 8b02 	vpop	{d8}
 8007f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f4a:	2d46      	cmp	r5, #70	; 0x46
 8007f4c:	eb00 0204 	add.w	r2, r0, r4
 8007f50:	d10c      	bne.n	8007f6c <__cvt+0x88>
 8007f52:	7803      	ldrb	r3, [r0, #0]
 8007f54:	2b30      	cmp	r3, #48	; 0x30
 8007f56:	d107      	bne.n	8007f68 <__cvt+0x84>
 8007f58:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f60:	bf1c      	itt	ne
 8007f62:	f1c4 0401 	rsbne	r4, r4, #1
 8007f66:	6034      	strne	r4, [r6, #0]
 8007f68:	6833      	ldr	r3, [r6, #0]
 8007f6a:	441a      	add	r2, r3
 8007f6c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f74:	bf08      	it	eq
 8007f76:	9203      	streq	r2, [sp, #12]
 8007f78:	2130      	movs	r1, #48	; 0x30
 8007f7a:	9b03      	ldr	r3, [sp, #12]
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d2dc      	bcs.n	8007f3a <__cvt+0x56>
 8007f80:	1c5c      	adds	r4, r3, #1
 8007f82:	9403      	str	r4, [sp, #12]
 8007f84:	7019      	strb	r1, [r3, #0]
 8007f86:	e7f8      	b.n	8007f7a <__cvt+0x96>

08007f88 <__exponent>:
 8007f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2900      	cmp	r1, #0
 8007f8e:	bfb8      	it	lt
 8007f90:	4249      	neglt	r1, r1
 8007f92:	f803 2b02 	strb.w	r2, [r3], #2
 8007f96:	bfb4      	ite	lt
 8007f98:	222d      	movlt	r2, #45	; 0x2d
 8007f9a:	222b      	movge	r2, #43	; 0x2b
 8007f9c:	2909      	cmp	r1, #9
 8007f9e:	7042      	strb	r2, [r0, #1]
 8007fa0:	dd2a      	ble.n	8007ff8 <__exponent+0x70>
 8007fa2:	f10d 0407 	add.w	r4, sp, #7
 8007fa6:	46a4      	mov	ip, r4
 8007fa8:	270a      	movs	r7, #10
 8007faa:	46a6      	mov	lr, r4
 8007fac:	460a      	mov	r2, r1
 8007fae:	fb91 f6f7 	sdiv	r6, r1, r7
 8007fb2:	fb07 1516 	mls	r5, r7, r6, r1
 8007fb6:	3530      	adds	r5, #48	; 0x30
 8007fb8:	2a63      	cmp	r2, #99	; 0x63
 8007fba:	f104 34ff 	add.w	r4, r4, #4294967295
 8007fbe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007fc2:	4631      	mov	r1, r6
 8007fc4:	dcf1      	bgt.n	8007faa <__exponent+0x22>
 8007fc6:	3130      	adds	r1, #48	; 0x30
 8007fc8:	f1ae 0502 	sub.w	r5, lr, #2
 8007fcc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007fd0:	1c44      	adds	r4, r0, #1
 8007fd2:	4629      	mov	r1, r5
 8007fd4:	4561      	cmp	r1, ip
 8007fd6:	d30a      	bcc.n	8007fee <__exponent+0x66>
 8007fd8:	f10d 0209 	add.w	r2, sp, #9
 8007fdc:	eba2 020e 	sub.w	r2, r2, lr
 8007fe0:	4565      	cmp	r5, ip
 8007fe2:	bf88      	it	hi
 8007fe4:	2200      	movhi	r2, #0
 8007fe6:	4413      	add	r3, r2
 8007fe8:	1a18      	subs	r0, r3, r0
 8007fea:	b003      	add	sp, #12
 8007fec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ff2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007ff6:	e7ed      	b.n	8007fd4 <__exponent+0x4c>
 8007ff8:	2330      	movs	r3, #48	; 0x30
 8007ffa:	3130      	adds	r1, #48	; 0x30
 8007ffc:	7083      	strb	r3, [r0, #2]
 8007ffe:	70c1      	strb	r1, [r0, #3]
 8008000:	1d03      	adds	r3, r0, #4
 8008002:	e7f1      	b.n	8007fe8 <__exponent+0x60>
 8008004:	0000      	movs	r0, r0
	...

08008008 <_printf_float>:
 8008008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800c:	b08b      	sub	sp, #44	; 0x2c
 800800e:	460c      	mov	r4, r1
 8008010:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008014:	4616      	mov	r6, r2
 8008016:	461f      	mov	r7, r3
 8008018:	4605      	mov	r5, r0
 800801a:	f003 f8e9 	bl	800b1f0 <_localeconv_r>
 800801e:	f8d0 b000 	ldr.w	fp, [r0]
 8008022:	4658      	mov	r0, fp
 8008024:	f7f8 f90c 	bl	8000240 <strlen>
 8008028:	2300      	movs	r3, #0
 800802a:	9308      	str	r3, [sp, #32]
 800802c:	f8d8 3000 	ldr.w	r3, [r8]
 8008030:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008034:	6822      	ldr	r2, [r4, #0]
 8008036:	3307      	adds	r3, #7
 8008038:	f023 0307 	bic.w	r3, r3, #7
 800803c:	f103 0108 	add.w	r1, r3, #8
 8008040:	f8c8 1000 	str.w	r1, [r8]
 8008044:	4682      	mov	sl, r0
 8008046:	e9d3 0100 	ldrd	r0, r1, [r3]
 800804a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800804e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80082b0 <_printf_float+0x2a8>
 8008052:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8008056:	eeb0 6bc0 	vabs.f64	d6, d0
 800805a:	eeb4 6b47 	vcmp.f64	d6, d7
 800805e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008062:	dd24      	ble.n	80080ae <_printf_float+0xa6>
 8008064:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800806c:	d502      	bpl.n	8008074 <_printf_float+0x6c>
 800806e:	232d      	movs	r3, #45	; 0x2d
 8008070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008074:	4b90      	ldr	r3, [pc, #576]	; (80082b8 <_printf_float+0x2b0>)
 8008076:	4891      	ldr	r0, [pc, #580]	; (80082bc <_printf_float+0x2b4>)
 8008078:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800807c:	bf94      	ite	ls
 800807e:	4698      	movls	r8, r3
 8008080:	4680      	movhi	r8, r0
 8008082:	2303      	movs	r3, #3
 8008084:	6123      	str	r3, [r4, #16]
 8008086:	f022 0204 	bic.w	r2, r2, #4
 800808a:	2300      	movs	r3, #0
 800808c:	6022      	str	r2, [r4, #0]
 800808e:	9304      	str	r3, [sp, #16]
 8008090:	9700      	str	r7, [sp, #0]
 8008092:	4633      	mov	r3, r6
 8008094:	aa09      	add	r2, sp, #36	; 0x24
 8008096:	4621      	mov	r1, r4
 8008098:	4628      	mov	r0, r5
 800809a:	f000 f9d3 	bl	8008444 <_printf_common>
 800809e:	3001      	adds	r0, #1
 80080a0:	f040 808a 	bne.w	80081b8 <_printf_float+0x1b0>
 80080a4:	f04f 30ff 	mov.w	r0, #4294967295
 80080a8:	b00b      	add	sp, #44	; 0x2c
 80080aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ae:	eeb4 0b40 	vcmp.f64	d0, d0
 80080b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080b6:	d709      	bvc.n	80080cc <_printf_float+0xc4>
 80080b8:	ee10 3a90 	vmov	r3, s1
 80080bc:	2b00      	cmp	r3, #0
 80080be:	bfbc      	itt	lt
 80080c0:	232d      	movlt	r3, #45	; 0x2d
 80080c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80080c6:	487e      	ldr	r0, [pc, #504]	; (80082c0 <_printf_float+0x2b8>)
 80080c8:	4b7e      	ldr	r3, [pc, #504]	; (80082c4 <_printf_float+0x2bc>)
 80080ca:	e7d5      	b.n	8008078 <_printf_float+0x70>
 80080cc:	6863      	ldr	r3, [r4, #4]
 80080ce:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80080d2:	9104      	str	r1, [sp, #16]
 80080d4:	1c59      	adds	r1, r3, #1
 80080d6:	d13c      	bne.n	8008152 <_printf_float+0x14a>
 80080d8:	2306      	movs	r3, #6
 80080da:	6063      	str	r3, [r4, #4]
 80080dc:	2300      	movs	r3, #0
 80080de:	9303      	str	r3, [sp, #12]
 80080e0:	ab08      	add	r3, sp, #32
 80080e2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80080e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80080ea:	ab07      	add	r3, sp, #28
 80080ec:	6861      	ldr	r1, [r4, #4]
 80080ee:	9300      	str	r3, [sp, #0]
 80080f0:	6022      	str	r2, [r4, #0]
 80080f2:	f10d 031b 	add.w	r3, sp, #27
 80080f6:	4628      	mov	r0, r5
 80080f8:	f7ff fef4 	bl	8007ee4 <__cvt>
 80080fc:	9b04      	ldr	r3, [sp, #16]
 80080fe:	9907      	ldr	r1, [sp, #28]
 8008100:	2b47      	cmp	r3, #71	; 0x47
 8008102:	4680      	mov	r8, r0
 8008104:	d108      	bne.n	8008118 <_printf_float+0x110>
 8008106:	1cc8      	adds	r0, r1, #3
 8008108:	db02      	blt.n	8008110 <_printf_float+0x108>
 800810a:	6863      	ldr	r3, [r4, #4]
 800810c:	4299      	cmp	r1, r3
 800810e:	dd41      	ble.n	8008194 <_printf_float+0x18c>
 8008110:	f1a9 0902 	sub.w	r9, r9, #2
 8008114:	fa5f f989 	uxtb.w	r9, r9
 8008118:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800811c:	d820      	bhi.n	8008160 <_printf_float+0x158>
 800811e:	3901      	subs	r1, #1
 8008120:	464a      	mov	r2, r9
 8008122:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008126:	9107      	str	r1, [sp, #28]
 8008128:	f7ff ff2e 	bl	8007f88 <__exponent>
 800812c:	9a08      	ldr	r2, [sp, #32]
 800812e:	9004      	str	r0, [sp, #16]
 8008130:	1813      	adds	r3, r2, r0
 8008132:	2a01      	cmp	r2, #1
 8008134:	6123      	str	r3, [r4, #16]
 8008136:	dc02      	bgt.n	800813e <_printf_float+0x136>
 8008138:	6822      	ldr	r2, [r4, #0]
 800813a:	07d2      	lsls	r2, r2, #31
 800813c:	d501      	bpl.n	8008142 <_printf_float+0x13a>
 800813e:	3301      	adds	r3, #1
 8008140:	6123      	str	r3, [r4, #16]
 8008142:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d0a2      	beq.n	8008090 <_printf_float+0x88>
 800814a:	232d      	movs	r3, #45	; 0x2d
 800814c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008150:	e79e      	b.n	8008090 <_printf_float+0x88>
 8008152:	9904      	ldr	r1, [sp, #16]
 8008154:	2947      	cmp	r1, #71	; 0x47
 8008156:	d1c1      	bne.n	80080dc <_printf_float+0xd4>
 8008158:	2b00      	cmp	r3, #0
 800815a:	d1bf      	bne.n	80080dc <_printf_float+0xd4>
 800815c:	2301      	movs	r3, #1
 800815e:	e7bc      	b.n	80080da <_printf_float+0xd2>
 8008160:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008164:	d118      	bne.n	8008198 <_printf_float+0x190>
 8008166:	2900      	cmp	r1, #0
 8008168:	6863      	ldr	r3, [r4, #4]
 800816a:	dd0b      	ble.n	8008184 <_printf_float+0x17c>
 800816c:	6121      	str	r1, [r4, #16]
 800816e:	b913      	cbnz	r3, 8008176 <_printf_float+0x16e>
 8008170:	6822      	ldr	r2, [r4, #0]
 8008172:	07d0      	lsls	r0, r2, #31
 8008174:	d502      	bpl.n	800817c <_printf_float+0x174>
 8008176:	3301      	adds	r3, #1
 8008178:	440b      	add	r3, r1
 800817a:	6123      	str	r3, [r4, #16]
 800817c:	2300      	movs	r3, #0
 800817e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008180:	9304      	str	r3, [sp, #16]
 8008182:	e7de      	b.n	8008142 <_printf_float+0x13a>
 8008184:	b913      	cbnz	r3, 800818c <_printf_float+0x184>
 8008186:	6822      	ldr	r2, [r4, #0]
 8008188:	07d2      	lsls	r2, r2, #31
 800818a:	d501      	bpl.n	8008190 <_printf_float+0x188>
 800818c:	3302      	adds	r3, #2
 800818e:	e7f4      	b.n	800817a <_printf_float+0x172>
 8008190:	2301      	movs	r3, #1
 8008192:	e7f2      	b.n	800817a <_printf_float+0x172>
 8008194:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008198:	9b08      	ldr	r3, [sp, #32]
 800819a:	4299      	cmp	r1, r3
 800819c:	db05      	blt.n	80081aa <_printf_float+0x1a2>
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	6121      	str	r1, [r4, #16]
 80081a2:	07d8      	lsls	r0, r3, #31
 80081a4:	d5ea      	bpl.n	800817c <_printf_float+0x174>
 80081a6:	1c4b      	adds	r3, r1, #1
 80081a8:	e7e7      	b.n	800817a <_printf_float+0x172>
 80081aa:	2900      	cmp	r1, #0
 80081ac:	bfd4      	ite	le
 80081ae:	f1c1 0202 	rsble	r2, r1, #2
 80081b2:	2201      	movgt	r2, #1
 80081b4:	4413      	add	r3, r2
 80081b6:	e7e0      	b.n	800817a <_printf_float+0x172>
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	055a      	lsls	r2, r3, #21
 80081bc:	d407      	bmi.n	80081ce <_printf_float+0x1c6>
 80081be:	6923      	ldr	r3, [r4, #16]
 80081c0:	4642      	mov	r2, r8
 80081c2:	4631      	mov	r1, r6
 80081c4:	4628      	mov	r0, r5
 80081c6:	47b8      	blx	r7
 80081c8:	3001      	adds	r0, #1
 80081ca:	d12a      	bne.n	8008222 <_printf_float+0x21a>
 80081cc:	e76a      	b.n	80080a4 <_printf_float+0x9c>
 80081ce:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80081d2:	f240 80e2 	bls.w	800839a <_printf_float+0x392>
 80081d6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80081da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80081de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081e2:	d133      	bne.n	800824c <_printf_float+0x244>
 80081e4:	4a38      	ldr	r2, [pc, #224]	; (80082c8 <_printf_float+0x2c0>)
 80081e6:	2301      	movs	r3, #1
 80081e8:	4631      	mov	r1, r6
 80081ea:	4628      	mov	r0, r5
 80081ec:	47b8      	blx	r7
 80081ee:	3001      	adds	r0, #1
 80081f0:	f43f af58 	beq.w	80080a4 <_printf_float+0x9c>
 80081f4:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	db02      	blt.n	8008202 <_printf_float+0x1fa>
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	07d8      	lsls	r0, r3, #31
 8008200:	d50f      	bpl.n	8008222 <_printf_float+0x21a>
 8008202:	4653      	mov	r3, sl
 8008204:	465a      	mov	r2, fp
 8008206:	4631      	mov	r1, r6
 8008208:	4628      	mov	r0, r5
 800820a:	47b8      	blx	r7
 800820c:	3001      	adds	r0, #1
 800820e:	f43f af49 	beq.w	80080a4 <_printf_float+0x9c>
 8008212:	f04f 0800 	mov.w	r8, #0
 8008216:	f104 091a 	add.w	r9, r4, #26
 800821a:	9b08      	ldr	r3, [sp, #32]
 800821c:	3b01      	subs	r3, #1
 800821e:	4543      	cmp	r3, r8
 8008220:	dc09      	bgt.n	8008236 <_printf_float+0x22e>
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	079b      	lsls	r3, r3, #30
 8008226:	f100 8108 	bmi.w	800843a <_printf_float+0x432>
 800822a:	68e0      	ldr	r0, [r4, #12]
 800822c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800822e:	4298      	cmp	r0, r3
 8008230:	bfb8      	it	lt
 8008232:	4618      	movlt	r0, r3
 8008234:	e738      	b.n	80080a8 <_printf_float+0xa0>
 8008236:	2301      	movs	r3, #1
 8008238:	464a      	mov	r2, r9
 800823a:	4631      	mov	r1, r6
 800823c:	4628      	mov	r0, r5
 800823e:	47b8      	blx	r7
 8008240:	3001      	adds	r0, #1
 8008242:	f43f af2f 	beq.w	80080a4 <_printf_float+0x9c>
 8008246:	f108 0801 	add.w	r8, r8, #1
 800824a:	e7e6      	b.n	800821a <_printf_float+0x212>
 800824c:	9b07      	ldr	r3, [sp, #28]
 800824e:	2b00      	cmp	r3, #0
 8008250:	dc3c      	bgt.n	80082cc <_printf_float+0x2c4>
 8008252:	4a1d      	ldr	r2, [pc, #116]	; (80082c8 <_printf_float+0x2c0>)
 8008254:	2301      	movs	r3, #1
 8008256:	4631      	mov	r1, r6
 8008258:	4628      	mov	r0, r5
 800825a:	47b8      	blx	r7
 800825c:	3001      	adds	r0, #1
 800825e:	f43f af21 	beq.w	80080a4 <_printf_float+0x9c>
 8008262:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008266:	4313      	orrs	r3, r2
 8008268:	d102      	bne.n	8008270 <_printf_float+0x268>
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	07d9      	lsls	r1, r3, #31
 800826e:	d5d8      	bpl.n	8008222 <_printf_float+0x21a>
 8008270:	4653      	mov	r3, sl
 8008272:	465a      	mov	r2, fp
 8008274:	4631      	mov	r1, r6
 8008276:	4628      	mov	r0, r5
 8008278:	47b8      	blx	r7
 800827a:	3001      	adds	r0, #1
 800827c:	f43f af12 	beq.w	80080a4 <_printf_float+0x9c>
 8008280:	f04f 0900 	mov.w	r9, #0
 8008284:	f104 0a1a 	add.w	sl, r4, #26
 8008288:	9b07      	ldr	r3, [sp, #28]
 800828a:	425b      	negs	r3, r3
 800828c:	454b      	cmp	r3, r9
 800828e:	dc01      	bgt.n	8008294 <_printf_float+0x28c>
 8008290:	9b08      	ldr	r3, [sp, #32]
 8008292:	e795      	b.n	80081c0 <_printf_float+0x1b8>
 8008294:	2301      	movs	r3, #1
 8008296:	4652      	mov	r2, sl
 8008298:	4631      	mov	r1, r6
 800829a:	4628      	mov	r0, r5
 800829c:	47b8      	blx	r7
 800829e:	3001      	adds	r0, #1
 80082a0:	f43f af00 	beq.w	80080a4 <_printf_float+0x9c>
 80082a4:	f109 0901 	add.w	r9, r9, #1
 80082a8:	e7ee      	b.n	8008288 <_printf_float+0x280>
 80082aa:	bf00      	nop
 80082ac:	f3af 8000 	nop.w
 80082b0:	ffffffff 	.word	0xffffffff
 80082b4:	7fefffff 	.word	0x7fefffff
 80082b8:	0800cd50 	.word	0x0800cd50
 80082bc:	0800cd54 	.word	0x0800cd54
 80082c0:	0800cd5c 	.word	0x0800cd5c
 80082c4:	0800cd58 	.word	0x0800cd58
 80082c8:	0800cd60 	.word	0x0800cd60
 80082cc:	9a08      	ldr	r2, [sp, #32]
 80082ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082d0:	429a      	cmp	r2, r3
 80082d2:	bfa8      	it	ge
 80082d4:	461a      	movge	r2, r3
 80082d6:	2a00      	cmp	r2, #0
 80082d8:	4691      	mov	r9, r2
 80082da:	dc38      	bgt.n	800834e <_printf_float+0x346>
 80082dc:	2300      	movs	r3, #0
 80082de:	9305      	str	r3, [sp, #20]
 80082e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082e4:	f104 021a 	add.w	r2, r4, #26
 80082e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80082ea:	9905      	ldr	r1, [sp, #20]
 80082ec:	9304      	str	r3, [sp, #16]
 80082ee:	eba3 0309 	sub.w	r3, r3, r9
 80082f2:	428b      	cmp	r3, r1
 80082f4:	dc33      	bgt.n	800835e <_printf_float+0x356>
 80082f6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	db3c      	blt.n	8008378 <_printf_float+0x370>
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	07da      	lsls	r2, r3, #31
 8008302:	d439      	bmi.n	8008378 <_printf_float+0x370>
 8008304:	9a08      	ldr	r2, [sp, #32]
 8008306:	9b04      	ldr	r3, [sp, #16]
 8008308:	9907      	ldr	r1, [sp, #28]
 800830a:	1ad3      	subs	r3, r2, r3
 800830c:	eba2 0901 	sub.w	r9, r2, r1
 8008310:	4599      	cmp	r9, r3
 8008312:	bfa8      	it	ge
 8008314:	4699      	movge	r9, r3
 8008316:	f1b9 0f00 	cmp.w	r9, #0
 800831a:	dc35      	bgt.n	8008388 <_printf_float+0x380>
 800831c:	f04f 0800 	mov.w	r8, #0
 8008320:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008324:	f104 0a1a 	add.w	sl, r4, #26
 8008328:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800832c:	1a9b      	subs	r3, r3, r2
 800832e:	eba3 0309 	sub.w	r3, r3, r9
 8008332:	4543      	cmp	r3, r8
 8008334:	f77f af75 	ble.w	8008222 <_printf_float+0x21a>
 8008338:	2301      	movs	r3, #1
 800833a:	4652      	mov	r2, sl
 800833c:	4631      	mov	r1, r6
 800833e:	4628      	mov	r0, r5
 8008340:	47b8      	blx	r7
 8008342:	3001      	adds	r0, #1
 8008344:	f43f aeae 	beq.w	80080a4 <_printf_float+0x9c>
 8008348:	f108 0801 	add.w	r8, r8, #1
 800834c:	e7ec      	b.n	8008328 <_printf_float+0x320>
 800834e:	4613      	mov	r3, r2
 8008350:	4631      	mov	r1, r6
 8008352:	4642      	mov	r2, r8
 8008354:	4628      	mov	r0, r5
 8008356:	47b8      	blx	r7
 8008358:	3001      	adds	r0, #1
 800835a:	d1bf      	bne.n	80082dc <_printf_float+0x2d4>
 800835c:	e6a2      	b.n	80080a4 <_printf_float+0x9c>
 800835e:	2301      	movs	r3, #1
 8008360:	4631      	mov	r1, r6
 8008362:	4628      	mov	r0, r5
 8008364:	9204      	str	r2, [sp, #16]
 8008366:	47b8      	blx	r7
 8008368:	3001      	adds	r0, #1
 800836a:	f43f ae9b 	beq.w	80080a4 <_printf_float+0x9c>
 800836e:	9b05      	ldr	r3, [sp, #20]
 8008370:	9a04      	ldr	r2, [sp, #16]
 8008372:	3301      	adds	r3, #1
 8008374:	9305      	str	r3, [sp, #20]
 8008376:	e7b7      	b.n	80082e8 <_printf_float+0x2e0>
 8008378:	4653      	mov	r3, sl
 800837a:	465a      	mov	r2, fp
 800837c:	4631      	mov	r1, r6
 800837e:	4628      	mov	r0, r5
 8008380:	47b8      	blx	r7
 8008382:	3001      	adds	r0, #1
 8008384:	d1be      	bne.n	8008304 <_printf_float+0x2fc>
 8008386:	e68d      	b.n	80080a4 <_printf_float+0x9c>
 8008388:	9a04      	ldr	r2, [sp, #16]
 800838a:	464b      	mov	r3, r9
 800838c:	4442      	add	r2, r8
 800838e:	4631      	mov	r1, r6
 8008390:	4628      	mov	r0, r5
 8008392:	47b8      	blx	r7
 8008394:	3001      	adds	r0, #1
 8008396:	d1c1      	bne.n	800831c <_printf_float+0x314>
 8008398:	e684      	b.n	80080a4 <_printf_float+0x9c>
 800839a:	9a08      	ldr	r2, [sp, #32]
 800839c:	2a01      	cmp	r2, #1
 800839e:	dc01      	bgt.n	80083a4 <_printf_float+0x39c>
 80083a0:	07db      	lsls	r3, r3, #31
 80083a2:	d537      	bpl.n	8008414 <_printf_float+0x40c>
 80083a4:	2301      	movs	r3, #1
 80083a6:	4642      	mov	r2, r8
 80083a8:	4631      	mov	r1, r6
 80083aa:	4628      	mov	r0, r5
 80083ac:	47b8      	blx	r7
 80083ae:	3001      	adds	r0, #1
 80083b0:	f43f ae78 	beq.w	80080a4 <_printf_float+0x9c>
 80083b4:	4653      	mov	r3, sl
 80083b6:	465a      	mov	r2, fp
 80083b8:	4631      	mov	r1, r6
 80083ba:	4628      	mov	r0, r5
 80083bc:	47b8      	blx	r7
 80083be:	3001      	adds	r0, #1
 80083c0:	f43f ae70 	beq.w	80080a4 <_printf_float+0x9c>
 80083c4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80083c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80083cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d0:	d01b      	beq.n	800840a <_printf_float+0x402>
 80083d2:	9b08      	ldr	r3, [sp, #32]
 80083d4:	f108 0201 	add.w	r2, r8, #1
 80083d8:	3b01      	subs	r3, #1
 80083da:	4631      	mov	r1, r6
 80083dc:	4628      	mov	r0, r5
 80083de:	47b8      	blx	r7
 80083e0:	3001      	adds	r0, #1
 80083e2:	d10e      	bne.n	8008402 <_printf_float+0x3fa>
 80083e4:	e65e      	b.n	80080a4 <_printf_float+0x9c>
 80083e6:	2301      	movs	r3, #1
 80083e8:	464a      	mov	r2, r9
 80083ea:	4631      	mov	r1, r6
 80083ec:	4628      	mov	r0, r5
 80083ee:	47b8      	blx	r7
 80083f0:	3001      	adds	r0, #1
 80083f2:	f43f ae57 	beq.w	80080a4 <_printf_float+0x9c>
 80083f6:	f108 0801 	add.w	r8, r8, #1
 80083fa:	9b08      	ldr	r3, [sp, #32]
 80083fc:	3b01      	subs	r3, #1
 80083fe:	4543      	cmp	r3, r8
 8008400:	dcf1      	bgt.n	80083e6 <_printf_float+0x3de>
 8008402:	9b04      	ldr	r3, [sp, #16]
 8008404:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008408:	e6db      	b.n	80081c2 <_printf_float+0x1ba>
 800840a:	f04f 0800 	mov.w	r8, #0
 800840e:	f104 091a 	add.w	r9, r4, #26
 8008412:	e7f2      	b.n	80083fa <_printf_float+0x3f2>
 8008414:	2301      	movs	r3, #1
 8008416:	4642      	mov	r2, r8
 8008418:	e7df      	b.n	80083da <_printf_float+0x3d2>
 800841a:	2301      	movs	r3, #1
 800841c:	464a      	mov	r2, r9
 800841e:	4631      	mov	r1, r6
 8008420:	4628      	mov	r0, r5
 8008422:	47b8      	blx	r7
 8008424:	3001      	adds	r0, #1
 8008426:	f43f ae3d 	beq.w	80080a4 <_printf_float+0x9c>
 800842a:	f108 0801 	add.w	r8, r8, #1
 800842e:	68e3      	ldr	r3, [r4, #12]
 8008430:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008432:	1a5b      	subs	r3, r3, r1
 8008434:	4543      	cmp	r3, r8
 8008436:	dcf0      	bgt.n	800841a <_printf_float+0x412>
 8008438:	e6f7      	b.n	800822a <_printf_float+0x222>
 800843a:	f04f 0800 	mov.w	r8, #0
 800843e:	f104 0919 	add.w	r9, r4, #25
 8008442:	e7f4      	b.n	800842e <_printf_float+0x426>

08008444 <_printf_common>:
 8008444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008448:	4616      	mov	r6, r2
 800844a:	4699      	mov	r9, r3
 800844c:	688a      	ldr	r2, [r1, #8]
 800844e:	690b      	ldr	r3, [r1, #16]
 8008450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008454:	4293      	cmp	r3, r2
 8008456:	bfb8      	it	lt
 8008458:	4613      	movlt	r3, r2
 800845a:	6033      	str	r3, [r6, #0]
 800845c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008460:	4607      	mov	r7, r0
 8008462:	460c      	mov	r4, r1
 8008464:	b10a      	cbz	r2, 800846a <_printf_common+0x26>
 8008466:	3301      	adds	r3, #1
 8008468:	6033      	str	r3, [r6, #0]
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	0699      	lsls	r1, r3, #26
 800846e:	bf42      	ittt	mi
 8008470:	6833      	ldrmi	r3, [r6, #0]
 8008472:	3302      	addmi	r3, #2
 8008474:	6033      	strmi	r3, [r6, #0]
 8008476:	6825      	ldr	r5, [r4, #0]
 8008478:	f015 0506 	ands.w	r5, r5, #6
 800847c:	d106      	bne.n	800848c <_printf_common+0x48>
 800847e:	f104 0a19 	add.w	sl, r4, #25
 8008482:	68e3      	ldr	r3, [r4, #12]
 8008484:	6832      	ldr	r2, [r6, #0]
 8008486:	1a9b      	subs	r3, r3, r2
 8008488:	42ab      	cmp	r3, r5
 800848a:	dc26      	bgt.n	80084da <_printf_common+0x96>
 800848c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008490:	1e13      	subs	r3, r2, #0
 8008492:	6822      	ldr	r2, [r4, #0]
 8008494:	bf18      	it	ne
 8008496:	2301      	movne	r3, #1
 8008498:	0692      	lsls	r2, r2, #26
 800849a:	d42b      	bmi.n	80084f4 <_printf_common+0xb0>
 800849c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80084a0:	4649      	mov	r1, r9
 80084a2:	4638      	mov	r0, r7
 80084a4:	47c0      	blx	r8
 80084a6:	3001      	adds	r0, #1
 80084a8:	d01e      	beq.n	80084e8 <_printf_common+0xa4>
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	68e5      	ldr	r5, [r4, #12]
 80084ae:	6832      	ldr	r2, [r6, #0]
 80084b0:	f003 0306 	and.w	r3, r3, #6
 80084b4:	2b04      	cmp	r3, #4
 80084b6:	bf08      	it	eq
 80084b8:	1aad      	subeq	r5, r5, r2
 80084ba:	68a3      	ldr	r3, [r4, #8]
 80084bc:	6922      	ldr	r2, [r4, #16]
 80084be:	bf0c      	ite	eq
 80084c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084c4:	2500      	movne	r5, #0
 80084c6:	4293      	cmp	r3, r2
 80084c8:	bfc4      	itt	gt
 80084ca:	1a9b      	subgt	r3, r3, r2
 80084cc:	18ed      	addgt	r5, r5, r3
 80084ce:	2600      	movs	r6, #0
 80084d0:	341a      	adds	r4, #26
 80084d2:	42b5      	cmp	r5, r6
 80084d4:	d11a      	bne.n	800850c <_printf_common+0xc8>
 80084d6:	2000      	movs	r0, #0
 80084d8:	e008      	b.n	80084ec <_printf_common+0xa8>
 80084da:	2301      	movs	r3, #1
 80084dc:	4652      	mov	r2, sl
 80084de:	4649      	mov	r1, r9
 80084e0:	4638      	mov	r0, r7
 80084e2:	47c0      	blx	r8
 80084e4:	3001      	adds	r0, #1
 80084e6:	d103      	bne.n	80084f0 <_printf_common+0xac>
 80084e8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f0:	3501      	adds	r5, #1
 80084f2:	e7c6      	b.n	8008482 <_printf_common+0x3e>
 80084f4:	18e1      	adds	r1, r4, r3
 80084f6:	1c5a      	adds	r2, r3, #1
 80084f8:	2030      	movs	r0, #48	; 0x30
 80084fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084fe:	4422      	add	r2, r4
 8008500:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008504:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008508:	3302      	adds	r3, #2
 800850a:	e7c7      	b.n	800849c <_printf_common+0x58>
 800850c:	2301      	movs	r3, #1
 800850e:	4622      	mov	r2, r4
 8008510:	4649      	mov	r1, r9
 8008512:	4638      	mov	r0, r7
 8008514:	47c0      	blx	r8
 8008516:	3001      	adds	r0, #1
 8008518:	d0e6      	beq.n	80084e8 <_printf_common+0xa4>
 800851a:	3601      	adds	r6, #1
 800851c:	e7d9      	b.n	80084d2 <_printf_common+0x8e>
	...

08008520 <_printf_i>:
 8008520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008524:	460c      	mov	r4, r1
 8008526:	4691      	mov	r9, r2
 8008528:	7e27      	ldrb	r7, [r4, #24]
 800852a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800852c:	2f78      	cmp	r7, #120	; 0x78
 800852e:	4680      	mov	r8, r0
 8008530:	469a      	mov	sl, r3
 8008532:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008536:	d807      	bhi.n	8008548 <_printf_i+0x28>
 8008538:	2f62      	cmp	r7, #98	; 0x62
 800853a:	d80a      	bhi.n	8008552 <_printf_i+0x32>
 800853c:	2f00      	cmp	r7, #0
 800853e:	f000 80d8 	beq.w	80086f2 <_printf_i+0x1d2>
 8008542:	2f58      	cmp	r7, #88	; 0x58
 8008544:	f000 80a3 	beq.w	800868e <_printf_i+0x16e>
 8008548:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800854c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008550:	e03a      	b.n	80085c8 <_printf_i+0xa8>
 8008552:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008556:	2b15      	cmp	r3, #21
 8008558:	d8f6      	bhi.n	8008548 <_printf_i+0x28>
 800855a:	a001      	add	r0, pc, #4	; (adr r0, 8008560 <_printf_i+0x40>)
 800855c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008560:	080085b9 	.word	0x080085b9
 8008564:	080085cd 	.word	0x080085cd
 8008568:	08008549 	.word	0x08008549
 800856c:	08008549 	.word	0x08008549
 8008570:	08008549 	.word	0x08008549
 8008574:	08008549 	.word	0x08008549
 8008578:	080085cd 	.word	0x080085cd
 800857c:	08008549 	.word	0x08008549
 8008580:	08008549 	.word	0x08008549
 8008584:	08008549 	.word	0x08008549
 8008588:	08008549 	.word	0x08008549
 800858c:	080086d9 	.word	0x080086d9
 8008590:	080085fd 	.word	0x080085fd
 8008594:	080086bb 	.word	0x080086bb
 8008598:	08008549 	.word	0x08008549
 800859c:	08008549 	.word	0x08008549
 80085a0:	080086fb 	.word	0x080086fb
 80085a4:	08008549 	.word	0x08008549
 80085a8:	080085fd 	.word	0x080085fd
 80085ac:	08008549 	.word	0x08008549
 80085b0:	08008549 	.word	0x08008549
 80085b4:	080086c3 	.word	0x080086c3
 80085b8:	680b      	ldr	r3, [r1, #0]
 80085ba:	1d1a      	adds	r2, r3, #4
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	600a      	str	r2, [r1, #0]
 80085c0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80085c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085c8:	2301      	movs	r3, #1
 80085ca:	e0a3      	b.n	8008714 <_printf_i+0x1f4>
 80085cc:	6825      	ldr	r5, [r4, #0]
 80085ce:	6808      	ldr	r0, [r1, #0]
 80085d0:	062e      	lsls	r6, r5, #24
 80085d2:	f100 0304 	add.w	r3, r0, #4
 80085d6:	d50a      	bpl.n	80085ee <_printf_i+0xce>
 80085d8:	6805      	ldr	r5, [r0, #0]
 80085da:	600b      	str	r3, [r1, #0]
 80085dc:	2d00      	cmp	r5, #0
 80085de:	da03      	bge.n	80085e8 <_printf_i+0xc8>
 80085e0:	232d      	movs	r3, #45	; 0x2d
 80085e2:	426d      	negs	r5, r5
 80085e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085e8:	485e      	ldr	r0, [pc, #376]	; (8008764 <_printf_i+0x244>)
 80085ea:	230a      	movs	r3, #10
 80085ec:	e019      	b.n	8008622 <_printf_i+0x102>
 80085ee:	f015 0f40 	tst.w	r5, #64	; 0x40
 80085f2:	6805      	ldr	r5, [r0, #0]
 80085f4:	600b      	str	r3, [r1, #0]
 80085f6:	bf18      	it	ne
 80085f8:	b22d      	sxthne	r5, r5
 80085fa:	e7ef      	b.n	80085dc <_printf_i+0xbc>
 80085fc:	680b      	ldr	r3, [r1, #0]
 80085fe:	6825      	ldr	r5, [r4, #0]
 8008600:	1d18      	adds	r0, r3, #4
 8008602:	6008      	str	r0, [r1, #0]
 8008604:	0628      	lsls	r0, r5, #24
 8008606:	d501      	bpl.n	800860c <_printf_i+0xec>
 8008608:	681d      	ldr	r5, [r3, #0]
 800860a:	e002      	b.n	8008612 <_printf_i+0xf2>
 800860c:	0669      	lsls	r1, r5, #25
 800860e:	d5fb      	bpl.n	8008608 <_printf_i+0xe8>
 8008610:	881d      	ldrh	r5, [r3, #0]
 8008612:	4854      	ldr	r0, [pc, #336]	; (8008764 <_printf_i+0x244>)
 8008614:	2f6f      	cmp	r7, #111	; 0x6f
 8008616:	bf0c      	ite	eq
 8008618:	2308      	moveq	r3, #8
 800861a:	230a      	movne	r3, #10
 800861c:	2100      	movs	r1, #0
 800861e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008622:	6866      	ldr	r6, [r4, #4]
 8008624:	60a6      	str	r6, [r4, #8]
 8008626:	2e00      	cmp	r6, #0
 8008628:	bfa2      	ittt	ge
 800862a:	6821      	ldrge	r1, [r4, #0]
 800862c:	f021 0104 	bicge.w	r1, r1, #4
 8008630:	6021      	strge	r1, [r4, #0]
 8008632:	b90d      	cbnz	r5, 8008638 <_printf_i+0x118>
 8008634:	2e00      	cmp	r6, #0
 8008636:	d04d      	beq.n	80086d4 <_printf_i+0x1b4>
 8008638:	4616      	mov	r6, r2
 800863a:	fbb5 f1f3 	udiv	r1, r5, r3
 800863e:	fb03 5711 	mls	r7, r3, r1, r5
 8008642:	5dc7      	ldrb	r7, [r0, r7]
 8008644:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008648:	462f      	mov	r7, r5
 800864a:	42bb      	cmp	r3, r7
 800864c:	460d      	mov	r5, r1
 800864e:	d9f4      	bls.n	800863a <_printf_i+0x11a>
 8008650:	2b08      	cmp	r3, #8
 8008652:	d10b      	bne.n	800866c <_printf_i+0x14c>
 8008654:	6823      	ldr	r3, [r4, #0]
 8008656:	07df      	lsls	r7, r3, #31
 8008658:	d508      	bpl.n	800866c <_printf_i+0x14c>
 800865a:	6923      	ldr	r3, [r4, #16]
 800865c:	6861      	ldr	r1, [r4, #4]
 800865e:	4299      	cmp	r1, r3
 8008660:	bfde      	ittt	le
 8008662:	2330      	movle	r3, #48	; 0x30
 8008664:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008668:	f106 36ff 	addle.w	r6, r6, #4294967295
 800866c:	1b92      	subs	r2, r2, r6
 800866e:	6122      	str	r2, [r4, #16]
 8008670:	f8cd a000 	str.w	sl, [sp]
 8008674:	464b      	mov	r3, r9
 8008676:	aa03      	add	r2, sp, #12
 8008678:	4621      	mov	r1, r4
 800867a:	4640      	mov	r0, r8
 800867c:	f7ff fee2 	bl	8008444 <_printf_common>
 8008680:	3001      	adds	r0, #1
 8008682:	d14c      	bne.n	800871e <_printf_i+0x1fe>
 8008684:	f04f 30ff 	mov.w	r0, #4294967295
 8008688:	b004      	add	sp, #16
 800868a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800868e:	4835      	ldr	r0, [pc, #212]	; (8008764 <_printf_i+0x244>)
 8008690:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	680e      	ldr	r6, [r1, #0]
 8008698:	061f      	lsls	r7, r3, #24
 800869a:	f856 5b04 	ldr.w	r5, [r6], #4
 800869e:	600e      	str	r6, [r1, #0]
 80086a0:	d514      	bpl.n	80086cc <_printf_i+0x1ac>
 80086a2:	07d9      	lsls	r1, r3, #31
 80086a4:	bf44      	itt	mi
 80086a6:	f043 0320 	orrmi.w	r3, r3, #32
 80086aa:	6023      	strmi	r3, [r4, #0]
 80086ac:	b91d      	cbnz	r5, 80086b6 <_printf_i+0x196>
 80086ae:	6823      	ldr	r3, [r4, #0]
 80086b0:	f023 0320 	bic.w	r3, r3, #32
 80086b4:	6023      	str	r3, [r4, #0]
 80086b6:	2310      	movs	r3, #16
 80086b8:	e7b0      	b.n	800861c <_printf_i+0xfc>
 80086ba:	6823      	ldr	r3, [r4, #0]
 80086bc:	f043 0320 	orr.w	r3, r3, #32
 80086c0:	6023      	str	r3, [r4, #0]
 80086c2:	2378      	movs	r3, #120	; 0x78
 80086c4:	4828      	ldr	r0, [pc, #160]	; (8008768 <_printf_i+0x248>)
 80086c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086ca:	e7e3      	b.n	8008694 <_printf_i+0x174>
 80086cc:	065e      	lsls	r6, r3, #25
 80086ce:	bf48      	it	mi
 80086d0:	b2ad      	uxthmi	r5, r5
 80086d2:	e7e6      	b.n	80086a2 <_printf_i+0x182>
 80086d4:	4616      	mov	r6, r2
 80086d6:	e7bb      	b.n	8008650 <_printf_i+0x130>
 80086d8:	680b      	ldr	r3, [r1, #0]
 80086da:	6826      	ldr	r6, [r4, #0]
 80086dc:	6960      	ldr	r0, [r4, #20]
 80086de:	1d1d      	adds	r5, r3, #4
 80086e0:	600d      	str	r5, [r1, #0]
 80086e2:	0635      	lsls	r5, r6, #24
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	d501      	bpl.n	80086ec <_printf_i+0x1cc>
 80086e8:	6018      	str	r0, [r3, #0]
 80086ea:	e002      	b.n	80086f2 <_printf_i+0x1d2>
 80086ec:	0671      	lsls	r1, r6, #25
 80086ee:	d5fb      	bpl.n	80086e8 <_printf_i+0x1c8>
 80086f0:	8018      	strh	r0, [r3, #0]
 80086f2:	2300      	movs	r3, #0
 80086f4:	6123      	str	r3, [r4, #16]
 80086f6:	4616      	mov	r6, r2
 80086f8:	e7ba      	b.n	8008670 <_printf_i+0x150>
 80086fa:	680b      	ldr	r3, [r1, #0]
 80086fc:	1d1a      	adds	r2, r3, #4
 80086fe:	600a      	str	r2, [r1, #0]
 8008700:	681e      	ldr	r6, [r3, #0]
 8008702:	6862      	ldr	r2, [r4, #4]
 8008704:	2100      	movs	r1, #0
 8008706:	4630      	mov	r0, r6
 8008708:	f7f7 fda2 	bl	8000250 <memchr>
 800870c:	b108      	cbz	r0, 8008712 <_printf_i+0x1f2>
 800870e:	1b80      	subs	r0, r0, r6
 8008710:	6060      	str	r0, [r4, #4]
 8008712:	6863      	ldr	r3, [r4, #4]
 8008714:	6123      	str	r3, [r4, #16]
 8008716:	2300      	movs	r3, #0
 8008718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800871c:	e7a8      	b.n	8008670 <_printf_i+0x150>
 800871e:	6923      	ldr	r3, [r4, #16]
 8008720:	4632      	mov	r2, r6
 8008722:	4649      	mov	r1, r9
 8008724:	4640      	mov	r0, r8
 8008726:	47d0      	blx	sl
 8008728:	3001      	adds	r0, #1
 800872a:	d0ab      	beq.n	8008684 <_printf_i+0x164>
 800872c:	6823      	ldr	r3, [r4, #0]
 800872e:	079b      	lsls	r3, r3, #30
 8008730:	d413      	bmi.n	800875a <_printf_i+0x23a>
 8008732:	68e0      	ldr	r0, [r4, #12]
 8008734:	9b03      	ldr	r3, [sp, #12]
 8008736:	4298      	cmp	r0, r3
 8008738:	bfb8      	it	lt
 800873a:	4618      	movlt	r0, r3
 800873c:	e7a4      	b.n	8008688 <_printf_i+0x168>
 800873e:	2301      	movs	r3, #1
 8008740:	4632      	mov	r2, r6
 8008742:	4649      	mov	r1, r9
 8008744:	4640      	mov	r0, r8
 8008746:	47d0      	blx	sl
 8008748:	3001      	adds	r0, #1
 800874a:	d09b      	beq.n	8008684 <_printf_i+0x164>
 800874c:	3501      	adds	r5, #1
 800874e:	68e3      	ldr	r3, [r4, #12]
 8008750:	9903      	ldr	r1, [sp, #12]
 8008752:	1a5b      	subs	r3, r3, r1
 8008754:	42ab      	cmp	r3, r5
 8008756:	dcf2      	bgt.n	800873e <_printf_i+0x21e>
 8008758:	e7eb      	b.n	8008732 <_printf_i+0x212>
 800875a:	2500      	movs	r5, #0
 800875c:	f104 0619 	add.w	r6, r4, #25
 8008760:	e7f5      	b.n	800874e <_printf_i+0x22e>
 8008762:	bf00      	nop
 8008764:	0800cd62 	.word	0x0800cd62
 8008768:	0800cd73 	.word	0x0800cd73

0800876c <_scanf_float>:
 800876c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008770:	b087      	sub	sp, #28
 8008772:	4617      	mov	r7, r2
 8008774:	9303      	str	r3, [sp, #12]
 8008776:	688b      	ldr	r3, [r1, #8]
 8008778:	1e5a      	subs	r2, r3, #1
 800877a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800877e:	bf83      	ittte	hi
 8008780:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008784:	195b      	addhi	r3, r3, r5
 8008786:	9302      	strhi	r3, [sp, #8]
 8008788:	2300      	movls	r3, #0
 800878a:	bf86      	itte	hi
 800878c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008790:	608b      	strhi	r3, [r1, #8]
 8008792:	9302      	strls	r3, [sp, #8]
 8008794:	680b      	ldr	r3, [r1, #0]
 8008796:	468b      	mov	fp, r1
 8008798:	2500      	movs	r5, #0
 800879a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800879e:	f84b 3b1c 	str.w	r3, [fp], #28
 80087a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80087a6:	4680      	mov	r8, r0
 80087a8:	460c      	mov	r4, r1
 80087aa:	465e      	mov	r6, fp
 80087ac:	46aa      	mov	sl, r5
 80087ae:	46a9      	mov	r9, r5
 80087b0:	9501      	str	r5, [sp, #4]
 80087b2:	68a2      	ldr	r2, [r4, #8]
 80087b4:	b152      	cbz	r2, 80087cc <_scanf_float+0x60>
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	2b4e      	cmp	r3, #78	; 0x4e
 80087bc:	d864      	bhi.n	8008888 <_scanf_float+0x11c>
 80087be:	2b40      	cmp	r3, #64	; 0x40
 80087c0:	d83c      	bhi.n	800883c <_scanf_float+0xd0>
 80087c2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80087c6:	b2c8      	uxtb	r0, r1
 80087c8:	280e      	cmp	r0, #14
 80087ca:	d93a      	bls.n	8008842 <_scanf_float+0xd6>
 80087cc:	f1b9 0f00 	cmp.w	r9, #0
 80087d0:	d003      	beq.n	80087da <_scanf_float+0x6e>
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087d8:	6023      	str	r3, [r4, #0]
 80087da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80087de:	f1ba 0f01 	cmp.w	sl, #1
 80087e2:	f200 8113 	bhi.w	8008a0c <_scanf_float+0x2a0>
 80087e6:	455e      	cmp	r6, fp
 80087e8:	f200 8105 	bhi.w	80089f6 <_scanf_float+0x28a>
 80087ec:	2501      	movs	r5, #1
 80087ee:	4628      	mov	r0, r5
 80087f0:	b007      	add	sp, #28
 80087f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80087fa:	2a0d      	cmp	r2, #13
 80087fc:	d8e6      	bhi.n	80087cc <_scanf_float+0x60>
 80087fe:	a101      	add	r1, pc, #4	; (adr r1, 8008804 <_scanf_float+0x98>)
 8008800:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008804:	08008943 	.word	0x08008943
 8008808:	080087cd 	.word	0x080087cd
 800880c:	080087cd 	.word	0x080087cd
 8008810:	080087cd 	.word	0x080087cd
 8008814:	080089a3 	.word	0x080089a3
 8008818:	0800897b 	.word	0x0800897b
 800881c:	080087cd 	.word	0x080087cd
 8008820:	080087cd 	.word	0x080087cd
 8008824:	08008951 	.word	0x08008951
 8008828:	080087cd 	.word	0x080087cd
 800882c:	080087cd 	.word	0x080087cd
 8008830:	080087cd 	.word	0x080087cd
 8008834:	080087cd 	.word	0x080087cd
 8008838:	08008909 	.word	0x08008909
 800883c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008840:	e7db      	b.n	80087fa <_scanf_float+0x8e>
 8008842:	290e      	cmp	r1, #14
 8008844:	d8c2      	bhi.n	80087cc <_scanf_float+0x60>
 8008846:	a001      	add	r0, pc, #4	; (adr r0, 800884c <_scanf_float+0xe0>)
 8008848:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800884c:	080088fb 	.word	0x080088fb
 8008850:	080087cd 	.word	0x080087cd
 8008854:	080088fb 	.word	0x080088fb
 8008858:	0800898f 	.word	0x0800898f
 800885c:	080087cd 	.word	0x080087cd
 8008860:	080088a9 	.word	0x080088a9
 8008864:	080088e5 	.word	0x080088e5
 8008868:	080088e5 	.word	0x080088e5
 800886c:	080088e5 	.word	0x080088e5
 8008870:	080088e5 	.word	0x080088e5
 8008874:	080088e5 	.word	0x080088e5
 8008878:	080088e5 	.word	0x080088e5
 800887c:	080088e5 	.word	0x080088e5
 8008880:	080088e5 	.word	0x080088e5
 8008884:	080088e5 	.word	0x080088e5
 8008888:	2b6e      	cmp	r3, #110	; 0x6e
 800888a:	d809      	bhi.n	80088a0 <_scanf_float+0x134>
 800888c:	2b60      	cmp	r3, #96	; 0x60
 800888e:	d8b2      	bhi.n	80087f6 <_scanf_float+0x8a>
 8008890:	2b54      	cmp	r3, #84	; 0x54
 8008892:	d077      	beq.n	8008984 <_scanf_float+0x218>
 8008894:	2b59      	cmp	r3, #89	; 0x59
 8008896:	d199      	bne.n	80087cc <_scanf_float+0x60>
 8008898:	2d07      	cmp	r5, #7
 800889a:	d197      	bne.n	80087cc <_scanf_float+0x60>
 800889c:	2508      	movs	r5, #8
 800889e:	e029      	b.n	80088f4 <_scanf_float+0x188>
 80088a0:	2b74      	cmp	r3, #116	; 0x74
 80088a2:	d06f      	beq.n	8008984 <_scanf_float+0x218>
 80088a4:	2b79      	cmp	r3, #121	; 0x79
 80088a6:	e7f6      	b.n	8008896 <_scanf_float+0x12a>
 80088a8:	6821      	ldr	r1, [r4, #0]
 80088aa:	05c8      	lsls	r0, r1, #23
 80088ac:	d51a      	bpl.n	80088e4 <_scanf_float+0x178>
 80088ae:	9b02      	ldr	r3, [sp, #8]
 80088b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80088b4:	6021      	str	r1, [r4, #0]
 80088b6:	f109 0901 	add.w	r9, r9, #1
 80088ba:	b11b      	cbz	r3, 80088c4 <_scanf_float+0x158>
 80088bc:	3b01      	subs	r3, #1
 80088be:	3201      	adds	r2, #1
 80088c0:	9302      	str	r3, [sp, #8]
 80088c2:	60a2      	str	r2, [r4, #8]
 80088c4:	68a3      	ldr	r3, [r4, #8]
 80088c6:	3b01      	subs	r3, #1
 80088c8:	60a3      	str	r3, [r4, #8]
 80088ca:	6923      	ldr	r3, [r4, #16]
 80088cc:	3301      	adds	r3, #1
 80088ce:	6123      	str	r3, [r4, #16]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	3b01      	subs	r3, #1
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	607b      	str	r3, [r7, #4]
 80088d8:	f340 8084 	ble.w	80089e4 <_scanf_float+0x278>
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	3301      	adds	r3, #1
 80088e0:	603b      	str	r3, [r7, #0]
 80088e2:	e766      	b.n	80087b2 <_scanf_float+0x46>
 80088e4:	eb1a 0f05 	cmn.w	sl, r5
 80088e8:	f47f af70 	bne.w	80087cc <_scanf_float+0x60>
 80088ec:	6822      	ldr	r2, [r4, #0]
 80088ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80088f2:	6022      	str	r2, [r4, #0]
 80088f4:	f806 3b01 	strb.w	r3, [r6], #1
 80088f8:	e7e4      	b.n	80088c4 <_scanf_float+0x158>
 80088fa:	6822      	ldr	r2, [r4, #0]
 80088fc:	0610      	lsls	r0, r2, #24
 80088fe:	f57f af65 	bpl.w	80087cc <_scanf_float+0x60>
 8008902:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008906:	e7f4      	b.n	80088f2 <_scanf_float+0x186>
 8008908:	f1ba 0f00 	cmp.w	sl, #0
 800890c:	d10e      	bne.n	800892c <_scanf_float+0x1c0>
 800890e:	f1b9 0f00 	cmp.w	r9, #0
 8008912:	d10e      	bne.n	8008932 <_scanf_float+0x1c6>
 8008914:	6822      	ldr	r2, [r4, #0]
 8008916:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800891a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800891e:	d108      	bne.n	8008932 <_scanf_float+0x1c6>
 8008920:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008924:	6022      	str	r2, [r4, #0]
 8008926:	f04f 0a01 	mov.w	sl, #1
 800892a:	e7e3      	b.n	80088f4 <_scanf_float+0x188>
 800892c:	f1ba 0f02 	cmp.w	sl, #2
 8008930:	d055      	beq.n	80089de <_scanf_float+0x272>
 8008932:	2d01      	cmp	r5, #1
 8008934:	d002      	beq.n	800893c <_scanf_float+0x1d0>
 8008936:	2d04      	cmp	r5, #4
 8008938:	f47f af48 	bne.w	80087cc <_scanf_float+0x60>
 800893c:	3501      	adds	r5, #1
 800893e:	b2ed      	uxtb	r5, r5
 8008940:	e7d8      	b.n	80088f4 <_scanf_float+0x188>
 8008942:	f1ba 0f01 	cmp.w	sl, #1
 8008946:	f47f af41 	bne.w	80087cc <_scanf_float+0x60>
 800894a:	f04f 0a02 	mov.w	sl, #2
 800894e:	e7d1      	b.n	80088f4 <_scanf_float+0x188>
 8008950:	b97d      	cbnz	r5, 8008972 <_scanf_float+0x206>
 8008952:	f1b9 0f00 	cmp.w	r9, #0
 8008956:	f47f af3c 	bne.w	80087d2 <_scanf_float+0x66>
 800895a:	6822      	ldr	r2, [r4, #0]
 800895c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008960:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008964:	f47f af39 	bne.w	80087da <_scanf_float+0x6e>
 8008968:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800896c:	6022      	str	r2, [r4, #0]
 800896e:	2501      	movs	r5, #1
 8008970:	e7c0      	b.n	80088f4 <_scanf_float+0x188>
 8008972:	2d03      	cmp	r5, #3
 8008974:	d0e2      	beq.n	800893c <_scanf_float+0x1d0>
 8008976:	2d05      	cmp	r5, #5
 8008978:	e7de      	b.n	8008938 <_scanf_float+0x1cc>
 800897a:	2d02      	cmp	r5, #2
 800897c:	f47f af26 	bne.w	80087cc <_scanf_float+0x60>
 8008980:	2503      	movs	r5, #3
 8008982:	e7b7      	b.n	80088f4 <_scanf_float+0x188>
 8008984:	2d06      	cmp	r5, #6
 8008986:	f47f af21 	bne.w	80087cc <_scanf_float+0x60>
 800898a:	2507      	movs	r5, #7
 800898c:	e7b2      	b.n	80088f4 <_scanf_float+0x188>
 800898e:	6822      	ldr	r2, [r4, #0]
 8008990:	0591      	lsls	r1, r2, #22
 8008992:	f57f af1b 	bpl.w	80087cc <_scanf_float+0x60>
 8008996:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800899a:	6022      	str	r2, [r4, #0]
 800899c:	f8cd 9004 	str.w	r9, [sp, #4]
 80089a0:	e7a8      	b.n	80088f4 <_scanf_float+0x188>
 80089a2:	6822      	ldr	r2, [r4, #0]
 80089a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80089a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80089ac:	d006      	beq.n	80089bc <_scanf_float+0x250>
 80089ae:	0550      	lsls	r0, r2, #21
 80089b0:	f57f af0c 	bpl.w	80087cc <_scanf_float+0x60>
 80089b4:	f1b9 0f00 	cmp.w	r9, #0
 80089b8:	f43f af0f 	beq.w	80087da <_scanf_float+0x6e>
 80089bc:	0591      	lsls	r1, r2, #22
 80089be:	bf58      	it	pl
 80089c0:	9901      	ldrpl	r1, [sp, #4]
 80089c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80089c6:	bf58      	it	pl
 80089c8:	eba9 0101 	subpl.w	r1, r9, r1
 80089cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80089d0:	bf58      	it	pl
 80089d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80089d6:	6022      	str	r2, [r4, #0]
 80089d8:	f04f 0900 	mov.w	r9, #0
 80089dc:	e78a      	b.n	80088f4 <_scanf_float+0x188>
 80089de:	f04f 0a03 	mov.w	sl, #3
 80089e2:	e787      	b.n	80088f4 <_scanf_float+0x188>
 80089e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80089e8:	4639      	mov	r1, r7
 80089ea:	4640      	mov	r0, r8
 80089ec:	4798      	blx	r3
 80089ee:	2800      	cmp	r0, #0
 80089f0:	f43f aedf 	beq.w	80087b2 <_scanf_float+0x46>
 80089f4:	e6ea      	b.n	80087cc <_scanf_float+0x60>
 80089f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80089fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80089fe:	463a      	mov	r2, r7
 8008a00:	4640      	mov	r0, r8
 8008a02:	4798      	blx	r3
 8008a04:	6923      	ldr	r3, [r4, #16]
 8008a06:	3b01      	subs	r3, #1
 8008a08:	6123      	str	r3, [r4, #16]
 8008a0a:	e6ec      	b.n	80087e6 <_scanf_float+0x7a>
 8008a0c:	1e6b      	subs	r3, r5, #1
 8008a0e:	2b06      	cmp	r3, #6
 8008a10:	d825      	bhi.n	8008a5e <_scanf_float+0x2f2>
 8008a12:	2d02      	cmp	r5, #2
 8008a14:	d836      	bhi.n	8008a84 <_scanf_float+0x318>
 8008a16:	455e      	cmp	r6, fp
 8008a18:	f67f aee8 	bls.w	80087ec <_scanf_float+0x80>
 8008a1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a20:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a24:	463a      	mov	r2, r7
 8008a26:	4640      	mov	r0, r8
 8008a28:	4798      	blx	r3
 8008a2a:	6923      	ldr	r3, [r4, #16]
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	6123      	str	r3, [r4, #16]
 8008a30:	e7f1      	b.n	8008a16 <_scanf_float+0x2aa>
 8008a32:	9802      	ldr	r0, [sp, #8]
 8008a34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a38:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008a3c:	9002      	str	r0, [sp, #8]
 8008a3e:	463a      	mov	r2, r7
 8008a40:	4640      	mov	r0, r8
 8008a42:	4798      	blx	r3
 8008a44:	6923      	ldr	r3, [r4, #16]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	6123      	str	r3, [r4, #16]
 8008a4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a4e:	fa5f fa8a 	uxtb.w	sl, sl
 8008a52:	f1ba 0f02 	cmp.w	sl, #2
 8008a56:	d1ec      	bne.n	8008a32 <_scanf_float+0x2c6>
 8008a58:	3d03      	subs	r5, #3
 8008a5a:	b2ed      	uxtb	r5, r5
 8008a5c:	1b76      	subs	r6, r6, r5
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	05da      	lsls	r2, r3, #23
 8008a62:	d52f      	bpl.n	8008ac4 <_scanf_float+0x358>
 8008a64:	055b      	lsls	r3, r3, #21
 8008a66:	d510      	bpl.n	8008a8a <_scanf_float+0x31e>
 8008a68:	455e      	cmp	r6, fp
 8008a6a:	f67f aebf 	bls.w	80087ec <_scanf_float+0x80>
 8008a6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008a76:	463a      	mov	r2, r7
 8008a78:	4640      	mov	r0, r8
 8008a7a:	4798      	blx	r3
 8008a7c:	6923      	ldr	r3, [r4, #16]
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	6123      	str	r3, [r4, #16]
 8008a82:	e7f1      	b.n	8008a68 <_scanf_float+0x2fc>
 8008a84:	46aa      	mov	sl, r5
 8008a86:	9602      	str	r6, [sp, #8]
 8008a88:	e7df      	b.n	8008a4a <_scanf_float+0x2de>
 8008a8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008a8e:	6923      	ldr	r3, [r4, #16]
 8008a90:	2965      	cmp	r1, #101	; 0x65
 8008a92:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a96:	f106 35ff 	add.w	r5, r6, #4294967295
 8008a9a:	6123      	str	r3, [r4, #16]
 8008a9c:	d00c      	beq.n	8008ab8 <_scanf_float+0x34c>
 8008a9e:	2945      	cmp	r1, #69	; 0x45
 8008aa0:	d00a      	beq.n	8008ab8 <_scanf_float+0x34c>
 8008aa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008aa6:	463a      	mov	r2, r7
 8008aa8:	4640      	mov	r0, r8
 8008aaa:	4798      	blx	r3
 8008aac:	6923      	ldr	r3, [r4, #16]
 8008aae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008ab2:	3b01      	subs	r3, #1
 8008ab4:	1eb5      	subs	r5, r6, #2
 8008ab6:	6123      	str	r3, [r4, #16]
 8008ab8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008abc:	463a      	mov	r2, r7
 8008abe:	4640      	mov	r0, r8
 8008ac0:	4798      	blx	r3
 8008ac2:	462e      	mov	r6, r5
 8008ac4:	6825      	ldr	r5, [r4, #0]
 8008ac6:	f015 0510 	ands.w	r5, r5, #16
 8008aca:	d14d      	bne.n	8008b68 <_scanf_float+0x3fc>
 8008acc:	7035      	strb	r5, [r6, #0]
 8008ace:	6823      	ldr	r3, [r4, #0]
 8008ad0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008ad4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ad8:	d11a      	bne.n	8008b10 <_scanf_float+0x3a4>
 8008ada:	9b01      	ldr	r3, [sp, #4]
 8008adc:	454b      	cmp	r3, r9
 8008ade:	eba3 0209 	sub.w	r2, r3, r9
 8008ae2:	d122      	bne.n	8008b2a <_scanf_float+0x3be>
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	4659      	mov	r1, fp
 8008ae8:	4640      	mov	r0, r8
 8008aea:	f000 feff 	bl	80098ec <_strtod_r>
 8008aee:	9b03      	ldr	r3, [sp, #12]
 8008af0:	6821      	ldr	r1, [r4, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f011 0f02 	tst.w	r1, #2
 8008af8:	f103 0204 	add.w	r2, r3, #4
 8008afc:	d020      	beq.n	8008b40 <_scanf_float+0x3d4>
 8008afe:	9903      	ldr	r1, [sp, #12]
 8008b00:	600a      	str	r2, [r1, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	ed83 0b00 	vstr	d0, [r3]
 8008b08:	68e3      	ldr	r3, [r4, #12]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	60e3      	str	r3, [r4, #12]
 8008b0e:	e66e      	b.n	80087ee <_scanf_float+0x82>
 8008b10:	9b04      	ldr	r3, [sp, #16]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d0e6      	beq.n	8008ae4 <_scanf_float+0x378>
 8008b16:	9905      	ldr	r1, [sp, #20]
 8008b18:	230a      	movs	r3, #10
 8008b1a:	462a      	mov	r2, r5
 8008b1c:	3101      	adds	r1, #1
 8008b1e:	4640      	mov	r0, r8
 8008b20:	f000 ff6e 	bl	8009a00 <_strtol_r>
 8008b24:	9b04      	ldr	r3, [sp, #16]
 8008b26:	9e05      	ldr	r6, [sp, #20]
 8008b28:	1ac2      	subs	r2, r0, r3
 8008b2a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008b2e:	429e      	cmp	r6, r3
 8008b30:	bf28      	it	cs
 8008b32:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008b36:	490d      	ldr	r1, [pc, #52]	; (8008b6c <_scanf_float+0x400>)
 8008b38:	4630      	mov	r0, r6
 8008b3a:	f000 f8c5 	bl	8008cc8 <siprintf>
 8008b3e:	e7d1      	b.n	8008ae4 <_scanf_float+0x378>
 8008b40:	f011 0f04 	tst.w	r1, #4
 8008b44:	9903      	ldr	r1, [sp, #12]
 8008b46:	600a      	str	r2, [r1, #0]
 8008b48:	d1db      	bne.n	8008b02 <_scanf_float+0x396>
 8008b4a:	eeb4 0b40 	vcmp.f64	d0, d0
 8008b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b52:	681e      	ldr	r6, [r3, #0]
 8008b54:	d705      	bvc.n	8008b62 <_scanf_float+0x3f6>
 8008b56:	4806      	ldr	r0, [pc, #24]	; (8008b70 <_scanf_float+0x404>)
 8008b58:	f000 f8b0 	bl	8008cbc <nanf>
 8008b5c:	ed86 0a00 	vstr	s0, [r6]
 8008b60:	e7d2      	b.n	8008b08 <_scanf_float+0x39c>
 8008b62:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008b66:	e7f9      	b.n	8008b5c <_scanf_float+0x3f0>
 8008b68:	2500      	movs	r5, #0
 8008b6a:	e640      	b.n	80087ee <_scanf_float+0x82>
 8008b6c:	0800cd84 	.word	0x0800cd84
 8008b70:	0800d200 	.word	0x0800d200

08008b74 <iprintf>:
 8008b74:	b40f      	push	{r0, r1, r2, r3}
 8008b76:	4b0a      	ldr	r3, [pc, #40]	; (8008ba0 <iprintf+0x2c>)
 8008b78:	b513      	push	{r0, r1, r4, lr}
 8008b7a:	681c      	ldr	r4, [r3, #0]
 8008b7c:	b124      	cbz	r4, 8008b88 <iprintf+0x14>
 8008b7e:	69a3      	ldr	r3, [r4, #24]
 8008b80:	b913      	cbnz	r3, 8008b88 <iprintf+0x14>
 8008b82:	4620      	mov	r0, r4
 8008b84:	f001 ff28 	bl	800a9d8 <__sinit>
 8008b88:	ab05      	add	r3, sp, #20
 8008b8a:	9a04      	ldr	r2, [sp, #16]
 8008b8c:	68a1      	ldr	r1, [r4, #8]
 8008b8e:	9301      	str	r3, [sp, #4]
 8008b90:	4620      	mov	r0, r4
 8008b92:	f003 fabd 	bl	800c110 <_vfiprintf_r>
 8008b96:	b002      	add	sp, #8
 8008b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b9c:	b004      	add	sp, #16
 8008b9e:	4770      	bx	lr
 8008ba0:	20000010 	.word	0x20000010

08008ba4 <putchar>:
 8008ba4:	4b09      	ldr	r3, [pc, #36]	; (8008bcc <putchar+0x28>)
 8008ba6:	b513      	push	{r0, r1, r4, lr}
 8008ba8:	681c      	ldr	r4, [r3, #0]
 8008baa:	4601      	mov	r1, r0
 8008bac:	b134      	cbz	r4, 8008bbc <putchar+0x18>
 8008bae:	69a3      	ldr	r3, [r4, #24]
 8008bb0:	b923      	cbnz	r3, 8008bbc <putchar+0x18>
 8008bb2:	9001      	str	r0, [sp, #4]
 8008bb4:	4620      	mov	r0, r4
 8008bb6:	f001 ff0f 	bl	800a9d8 <__sinit>
 8008bba:	9901      	ldr	r1, [sp, #4]
 8008bbc:	68a2      	ldr	r2, [r4, #8]
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	b002      	add	sp, #8
 8008bc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bc6:	f003 bbd3 	b.w	800c370 <_putc_r>
 8008bca:	bf00      	nop
 8008bcc:	20000010 	.word	0x20000010

08008bd0 <_puts_r>:
 8008bd0:	b570      	push	{r4, r5, r6, lr}
 8008bd2:	460e      	mov	r6, r1
 8008bd4:	4605      	mov	r5, r0
 8008bd6:	b118      	cbz	r0, 8008be0 <_puts_r+0x10>
 8008bd8:	6983      	ldr	r3, [r0, #24]
 8008bda:	b90b      	cbnz	r3, 8008be0 <_puts_r+0x10>
 8008bdc:	f001 fefc 	bl	800a9d8 <__sinit>
 8008be0:	69ab      	ldr	r3, [r5, #24]
 8008be2:	68ac      	ldr	r4, [r5, #8]
 8008be4:	b913      	cbnz	r3, 8008bec <_puts_r+0x1c>
 8008be6:	4628      	mov	r0, r5
 8008be8:	f001 fef6 	bl	800a9d8 <__sinit>
 8008bec:	4b2c      	ldr	r3, [pc, #176]	; (8008ca0 <_puts_r+0xd0>)
 8008bee:	429c      	cmp	r4, r3
 8008bf0:	d120      	bne.n	8008c34 <_puts_r+0x64>
 8008bf2:	686c      	ldr	r4, [r5, #4]
 8008bf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bf6:	07db      	lsls	r3, r3, #31
 8008bf8:	d405      	bmi.n	8008c06 <_puts_r+0x36>
 8008bfa:	89a3      	ldrh	r3, [r4, #12]
 8008bfc:	0598      	lsls	r0, r3, #22
 8008bfe:	d402      	bmi.n	8008c06 <_puts_r+0x36>
 8008c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c02:	f002 fafa 	bl	800b1fa <__retarget_lock_acquire_recursive>
 8008c06:	89a3      	ldrh	r3, [r4, #12]
 8008c08:	0719      	lsls	r1, r3, #28
 8008c0a:	d51d      	bpl.n	8008c48 <_puts_r+0x78>
 8008c0c:	6923      	ldr	r3, [r4, #16]
 8008c0e:	b1db      	cbz	r3, 8008c48 <_puts_r+0x78>
 8008c10:	3e01      	subs	r6, #1
 8008c12:	68a3      	ldr	r3, [r4, #8]
 8008c14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008c18:	3b01      	subs	r3, #1
 8008c1a:	60a3      	str	r3, [r4, #8]
 8008c1c:	bb39      	cbnz	r1, 8008c6e <_puts_r+0x9e>
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	da38      	bge.n	8008c94 <_puts_r+0xc4>
 8008c22:	4622      	mov	r2, r4
 8008c24:	210a      	movs	r1, #10
 8008c26:	4628      	mov	r0, r5
 8008c28:	f000 feec 	bl	8009a04 <__swbuf_r>
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d011      	beq.n	8008c54 <_puts_r+0x84>
 8008c30:	250a      	movs	r5, #10
 8008c32:	e011      	b.n	8008c58 <_puts_r+0x88>
 8008c34:	4b1b      	ldr	r3, [pc, #108]	; (8008ca4 <_puts_r+0xd4>)
 8008c36:	429c      	cmp	r4, r3
 8008c38:	d101      	bne.n	8008c3e <_puts_r+0x6e>
 8008c3a:	68ac      	ldr	r4, [r5, #8]
 8008c3c:	e7da      	b.n	8008bf4 <_puts_r+0x24>
 8008c3e:	4b1a      	ldr	r3, [pc, #104]	; (8008ca8 <_puts_r+0xd8>)
 8008c40:	429c      	cmp	r4, r3
 8008c42:	bf08      	it	eq
 8008c44:	68ec      	ldreq	r4, [r5, #12]
 8008c46:	e7d5      	b.n	8008bf4 <_puts_r+0x24>
 8008c48:	4621      	mov	r1, r4
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	f000 ff2c 	bl	8009aa8 <__swsetup_r>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	d0dd      	beq.n	8008c10 <_puts_r+0x40>
 8008c54:	f04f 35ff 	mov.w	r5, #4294967295
 8008c58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c5a:	07da      	lsls	r2, r3, #31
 8008c5c:	d405      	bmi.n	8008c6a <_puts_r+0x9a>
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	059b      	lsls	r3, r3, #22
 8008c62:	d402      	bmi.n	8008c6a <_puts_r+0x9a>
 8008c64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c66:	f002 fac9 	bl	800b1fc <__retarget_lock_release_recursive>
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	bd70      	pop	{r4, r5, r6, pc}
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	da04      	bge.n	8008c7c <_puts_r+0xac>
 8008c72:	69a2      	ldr	r2, [r4, #24]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	dc06      	bgt.n	8008c86 <_puts_r+0xb6>
 8008c78:	290a      	cmp	r1, #10
 8008c7a:	d004      	beq.n	8008c86 <_puts_r+0xb6>
 8008c7c:	6823      	ldr	r3, [r4, #0]
 8008c7e:	1c5a      	adds	r2, r3, #1
 8008c80:	6022      	str	r2, [r4, #0]
 8008c82:	7019      	strb	r1, [r3, #0]
 8008c84:	e7c5      	b.n	8008c12 <_puts_r+0x42>
 8008c86:	4622      	mov	r2, r4
 8008c88:	4628      	mov	r0, r5
 8008c8a:	f000 febb 	bl	8009a04 <__swbuf_r>
 8008c8e:	3001      	adds	r0, #1
 8008c90:	d1bf      	bne.n	8008c12 <_puts_r+0x42>
 8008c92:	e7df      	b.n	8008c54 <_puts_r+0x84>
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	250a      	movs	r5, #10
 8008c98:	1c5a      	adds	r2, r3, #1
 8008c9a:	6022      	str	r2, [r4, #0]
 8008c9c:	701d      	strb	r5, [r3, #0]
 8008c9e:	e7db      	b.n	8008c58 <_puts_r+0x88>
 8008ca0:	0800cf98 	.word	0x0800cf98
 8008ca4:	0800cfb8 	.word	0x0800cfb8
 8008ca8:	0800cf78 	.word	0x0800cf78

08008cac <puts>:
 8008cac:	4b02      	ldr	r3, [pc, #8]	; (8008cb8 <puts+0xc>)
 8008cae:	4601      	mov	r1, r0
 8008cb0:	6818      	ldr	r0, [r3, #0]
 8008cb2:	f7ff bf8d 	b.w	8008bd0 <_puts_r>
 8008cb6:	bf00      	nop
 8008cb8:	20000010 	.word	0x20000010

08008cbc <nanf>:
 8008cbc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008cc4 <nanf+0x8>
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	7fc00000 	.word	0x7fc00000

08008cc8 <siprintf>:
 8008cc8:	b40e      	push	{r1, r2, r3}
 8008cca:	b500      	push	{lr}
 8008ccc:	b09c      	sub	sp, #112	; 0x70
 8008cce:	ab1d      	add	r3, sp, #116	; 0x74
 8008cd0:	9002      	str	r0, [sp, #8]
 8008cd2:	9006      	str	r0, [sp, #24]
 8008cd4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cd8:	4809      	ldr	r0, [pc, #36]	; (8008d00 <siprintf+0x38>)
 8008cda:	9107      	str	r1, [sp, #28]
 8008cdc:	9104      	str	r1, [sp, #16]
 8008cde:	4909      	ldr	r1, [pc, #36]	; (8008d04 <siprintf+0x3c>)
 8008ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ce4:	9105      	str	r1, [sp, #20]
 8008ce6:	6800      	ldr	r0, [r0, #0]
 8008ce8:	9301      	str	r3, [sp, #4]
 8008cea:	a902      	add	r1, sp, #8
 8008cec:	f003 f8e6 	bl	800bebc <_svfiprintf_r>
 8008cf0:	9b02      	ldr	r3, [sp, #8]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	701a      	strb	r2, [r3, #0]
 8008cf6:	b01c      	add	sp, #112	; 0x70
 8008cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008cfc:	b003      	add	sp, #12
 8008cfe:	4770      	bx	lr
 8008d00:	20000010 	.word	0x20000010
 8008d04:	ffff0208 	.word	0xffff0208

08008d08 <sulp>:
 8008d08:	b570      	push	{r4, r5, r6, lr}
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	460d      	mov	r5, r1
 8008d0e:	4616      	mov	r6, r2
 8008d10:	ec45 4b10 	vmov	d0, r4, r5
 8008d14:	f002 fe6c 	bl	800b9f0 <__ulp>
 8008d18:	b17e      	cbz	r6, 8008d3a <sulp+0x32>
 8008d1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008d1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	dd09      	ble.n	8008d3a <sulp+0x32>
 8008d26:	051b      	lsls	r3, r3, #20
 8008d28:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8008d32:	ec41 0b17 	vmov	d7, r0, r1
 8008d36:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008d3a:	bd70      	pop	{r4, r5, r6, pc}
 8008d3c:	0000      	movs	r0, r0
	...

08008d40 <_strtod_l>:
 8008d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d44:	ed2d 8b0c 	vpush	{d8-d13}
 8008d48:	b09d      	sub	sp, #116	; 0x74
 8008d4a:	461f      	mov	r7, r3
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	9318      	str	r3, [sp, #96]	; 0x60
 8008d50:	4ba6      	ldr	r3, [pc, #664]	; (8008fec <_strtod_l+0x2ac>)
 8008d52:	9213      	str	r2, [sp, #76]	; 0x4c
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	9308      	str	r3, [sp, #32]
 8008d58:	4604      	mov	r4, r0
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	468a      	mov	sl, r1
 8008d5e:	f7f7 fa6f 	bl	8000240 <strlen>
 8008d62:	f04f 0800 	mov.w	r8, #0
 8008d66:	4605      	mov	r5, r0
 8008d68:	f04f 0900 	mov.w	r9, #0
 8008d6c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8008d70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008d72:	781a      	ldrb	r2, [r3, #0]
 8008d74:	2a2b      	cmp	r2, #43	; 0x2b
 8008d76:	d04d      	beq.n	8008e14 <_strtod_l+0xd4>
 8008d78:	d83a      	bhi.n	8008df0 <_strtod_l+0xb0>
 8008d7a:	2a0d      	cmp	r2, #13
 8008d7c:	d833      	bhi.n	8008de6 <_strtod_l+0xa6>
 8008d7e:	2a08      	cmp	r2, #8
 8008d80:	d833      	bhi.n	8008dea <_strtod_l+0xaa>
 8008d82:	2a00      	cmp	r2, #0
 8008d84:	d03d      	beq.n	8008e02 <_strtod_l+0xc2>
 8008d86:	2300      	movs	r3, #0
 8008d88:	930b      	str	r3, [sp, #44]	; 0x2c
 8008d8a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008d8c:	7833      	ldrb	r3, [r6, #0]
 8008d8e:	2b30      	cmp	r3, #48	; 0x30
 8008d90:	f040 80b6 	bne.w	8008f00 <_strtod_l+0x1c0>
 8008d94:	7873      	ldrb	r3, [r6, #1]
 8008d96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d9a:	2b58      	cmp	r3, #88	; 0x58
 8008d9c:	d16d      	bne.n	8008e7a <_strtod_l+0x13a>
 8008d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008da0:	9301      	str	r3, [sp, #4]
 8008da2:	ab18      	add	r3, sp, #96	; 0x60
 8008da4:	9702      	str	r7, [sp, #8]
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	4a91      	ldr	r2, [pc, #580]	; (8008ff0 <_strtod_l+0x2b0>)
 8008daa:	ab19      	add	r3, sp, #100	; 0x64
 8008dac:	a917      	add	r1, sp, #92	; 0x5c
 8008dae:	4620      	mov	r0, r4
 8008db0:	f001 ff16 	bl	800abe0 <__gethex>
 8008db4:	f010 0507 	ands.w	r5, r0, #7
 8008db8:	4607      	mov	r7, r0
 8008dba:	d005      	beq.n	8008dc8 <_strtod_l+0x88>
 8008dbc:	2d06      	cmp	r5, #6
 8008dbe:	d12b      	bne.n	8008e18 <_strtod_l+0xd8>
 8008dc0:	3601      	adds	r6, #1
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	9617      	str	r6, [sp, #92]	; 0x5c
 8008dc6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	f040 856e 	bne.w	80098ac <_strtod_l+0xb6c>
 8008dd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008dd2:	b1e3      	cbz	r3, 8008e0e <_strtod_l+0xce>
 8008dd4:	ec49 8b17 	vmov	d7, r8, r9
 8008dd8:	eeb1 0b47 	vneg.f64	d0, d7
 8008ddc:	b01d      	add	sp, #116	; 0x74
 8008dde:	ecbd 8b0c 	vpop	{d8-d13}
 8008de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de6:	2a20      	cmp	r2, #32
 8008de8:	d1cd      	bne.n	8008d86 <_strtod_l+0x46>
 8008dea:	3301      	adds	r3, #1
 8008dec:	9317      	str	r3, [sp, #92]	; 0x5c
 8008dee:	e7bf      	b.n	8008d70 <_strtod_l+0x30>
 8008df0:	2a2d      	cmp	r2, #45	; 0x2d
 8008df2:	d1c8      	bne.n	8008d86 <_strtod_l+0x46>
 8008df4:	2201      	movs	r2, #1
 8008df6:	920b      	str	r2, [sp, #44]	; 0x2c
 8008df8:	1c5a      	adds	r2, r3, #1
 8008dfa:	9217      	str	r2, [sp, #92]	; 0x5c
 8008dfc:	785b      	ldrb	r3, [r3, #1]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1c3      	bne.n	8008d8a <_strtod_l+0x4a>
 8008e02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e04:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f040 854d 	bne.w	80098a8 <_strtod_l+0xb68>
 8008e0e:	ec49 8b10 	vmov	d0, r8, r9
 8008e12:	e7e3      	b.n	8008ddc <_strtod_l+0x9c>
 8008e14:	2200      	movs	r2, #0
 8008e16:	e7ee      	b.n	8008df6 <_strtod_l+0xb6>
 8008e18:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008e1a:	b13a      	cbz	r2, 8008e2c <_strtod_l+0xec>
 8008e1c:	2135      	movs	r1, #53	; 0x35
 8008e1e:	a81a      	add	r0, sp, #104	; 0x68
 8008e20:	f002 fef2 	bl	800bc08 <__copybits>
 8008e24:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e26:	4620      	mov	r0, r4
 8008e28:	f002 fab6 	bl	800b398 <_Bfree>
 8008e2c:	3d01      	subs	r5, #1
 8008e2e:	2d05      	cmp	r5, #5
 8008e30:	d807      	bhi.n	8008e42 <_strtod_l+0x102>
 8008e32:	e8df f005 	tbb	[pc, r5]
 8008e36:	0b0e      	.short	0x0b0e
 8008e38:	030e1d18 	.word	0x030e1d18
 8008e3c:	f04f 0900 	mov.w	r9, #0
 8008e40:	46c8      	mov	r8, r9
 8008e42:	073b      	lsls	r3, r7, #28
 8008e44:	d5c0      	bpl.n	8008dc8 <_strtod_l+0x88>
 8008e46:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008e4a:	e7bd      	b.n	8008dc8 <_strtod_l+0x88>
 8008e4c:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8008e50:	e7f7      	b.n	8008e42 <_strtod_l+0x102>
 8008e52:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 8008e56:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008e58:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008e5c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008e60:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008e64:	e7ed      	b.n	8008e42 <_strtod_l+0x102>
 8008e66:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8008ff4 <_strtod_l+0x2b4>
 8008e6a:	f04f 0800 	mov.w	r8, #0
 8008e6e:	e7e8      	b.n	8008e42 <_strtod_l+0x102>
 8008e70:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008e74:	f04f 38ff 	mov.w	r8, #4294967295
 8008e78:	e7e3      	b.n	8008e42 <_strtod_l+0x102>
 8008e7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e7c:	1c5a      	adds	r2, r3, #1
 8008e7e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008e80:	785b      	ldrb	r3, [r3, #1]
 8008e82:	2b30      	cmp	r3, #48	; 0x30
 8008e84:	d0f9      	beq.n	8008e7a <_strtod_l+0x13a>
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d09e      	beq.n	8008dc8 <_strtod_l+0x88>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	9306      	str	r3, [sp, #24]
 8008e8e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e90:	930c      	str	r3, [sp, #48]	; 0x30
 8008e92:	2300      	movs	r3, #0
 8008e94:	9304      	str	r3, [sp, #16]
 8008e96:	930a      	str	r3, [sp, #40]	; 0x28
 8008e98:	461e      	mov	r6, r3
 8008e9a:	220a      	movs	r2, #10
 8008e9c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008e9e:	f890 b000 	ldrb.w	fp, [r0]
 8008ea2:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 8008ea6:	b2d9      	uxtb	r1, r3
 8008ea8:	2909      	cmp	r1, #9
 8008eaa:	d92b      	bls.n	8008f04 <_strtod_l+0x1c4>
 8008eac:	9908      	ldr	r1, [sp, #32]
 8008eae:	462a      	mov	r2, r5
 8008eb0:	f003 fb01 	bl	800c4b6 <strncmp>
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	d035      	beq.n	8008f24 <_strtod_l+0x1e4>
 8008eb8:	2000      	movs	r0, #0
 8008eba:	465a      	mov	r2, fp
 8008ebc:	4633      	mov	r3, r6
 8008ebe:	4683      	mov	fp, r0
 8008ec0:	4601      	mov	r1, r0
 8008ec2:	2a65      	cmp	r2, #101	; 0x65
 8008ec4:	d001      	beq.n	8008eca <_strtod_l+0x18a>
 8008ec6:	2a45      	cmp	r2, #69	; 0x45
 8008ec8:	d118      	bne.n	8008efc <_strtod_l+0x1bc>
 8008eca:	b91b      	cbnz	r3, 8008ed4 <_strtod_l+0x194>
 8008ecc:	9b06      	ldr	r3, [sp, #24]
 8008ece:	4303      	orrs	r3, r0
 8008ed0:	d097      	beq.n	8008e02 <_strtod_l+0xc2>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 8008ed8:	f10a 0201 	add.w	r2, sl, #1
 8008edc:	9217      	str	r2, [sp, #92]	; 0x5c
 8008ede:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8008ee2:	2a2b      	cmp	r2, #43	; 0x2b
 8008ee4:	d077      	beq.n	8008fd6 <_strtod_l+0x296>
 8008ee6:	2a2d      	cmp	r2, #45	; 0x2d
 8008ee8:	d07d      	beq.n	8008fe6 <_strtod_l+0x2a6>
 8008eea:	f04f 0e00 	mov.w	lr, #0
 8008eee:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008ef2:	2d09      	cmp	r5, #9
 8008ef4:	f240 8084 	bls.w	8009000 <_strtod_l+0x2c0>
 8008ef8:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8008efc:	2500      	movs	r5, #0
 8008efe:	e09f      	b.n	8009040 <_strtod_l+0x300>
 8008f00:	2300      	movs	r3, #0
 8008f02:	e7c3      	b.n	8008e8c <_strtod_l+0x14c>
 8008f04:	2e08      	cmp	r6, #8
 8008f06:	bfd5      	itete	le
 8008f08:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8008f0a:	9904      	ldrgt	r1, [sp, #16]
 8008f0c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008f10:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008f14:	f100 0001 	add.w	r0, r0, #1
 8008f18:	bfd4      	ite	le
 8008f1a:	930a      	strle	r3, [sp, #40]	; 0x28
 8008f1c:	9304      	strgt	r3, [sp, #16]
 8008f1e:	3601      	adds	r6, #1
 8008f20:	9017      	str	r0, [sp, #92]	; 0x5c
 8008f22:	e7bb      	b.n	8008e9c <_strtod_l+0x15c>
 8008f24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f26:	195a      	adds	r2, r3, r5
 8008f28:	9217      	str	r2, [sp, #92]	; 0x5c
 8008f2a:	5d5a      	ldrb	r2, [r3, r5]
 8008f2c:	b3ae      	cbz	r6, 8008f9a <_strtod_l+0x25a>
 8008f2e:	4683      	mov	fp, r0
 8008f30:	4633      	mov	r3, r6
 8008f32:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008f36:	2909      	cmp	r1, #9
 8008f38:	d912      	bls.n	8008f60 <_strtod_l+0x220>
 8008f3a:	2101      	movs	r1, #1
 8008f3c:	e7c1      	b.n	8008ec2 <_strtod_l+0x182>
 8008f3e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f40:	1c5a      	adds	r2, r3, #1
 8008f42:	9217      	str	r2, [sp, #92]	; 0x5c
 8008f44:	785a      	ldrb	r2, [r3, #1]
 8008f46:	3001      	adds	r0, #1
 8008f48:	2a30      	cmp	r2, #48	; 0x30
 8008f4a:	d0f8      	beq.n	8008f3e <_strtod_l+0x1fe>
 8008f4c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008f50:	2b08      	cmp	r3, #8
 8008f52:	f200 84b0 	bhi.w	80098b6 <_strtod_l+0xb76>
 8008f56:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f58:	930c      	str	r3, [sp, #48]	; 0x30
 8008f5a:	4683      	mov	fp, r0
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	4603      	mov	r3, r0
 8008f60:	3a30      	subs	r2, #48	; 0x30
 8008f62:	f100 0101 	add.w	r1, r0, #1
 8008f66:	d012      	beq.n	8008f8e <_strtod_l+0x24e>
 8008f68:	448b      	add	fp, r1
 8008f6a:	eb00 0c03 	add.w	ip, r0, r3
 8008f6e:	4619      	mov	r1, r3
 8008f70:	250a      	movs	r5, #10
 8008f72:	4561      	cmp	r1, ip
 8008f74:	d113      	bne.n	8008f9e <_strtod_l+0x25e>
 8008f76:	1819      	adds	r1, r3, r0
 8008f78:	2908      	cmp	r1, #8
 8008f7a:	f103 0301 	add.w	r3, r3, #1
 8008f7e:	4403      	add	r3, r0
 8008f80:	dc1d      	bgt.n	8008fbe <_strtod_l+0x27e>
 8008f82:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008f84:	210a      	movs	r1, #10
 8008f86:	fb01 2200 	mla	r2, r1, r0, r2
 8008f8a:	920a      	str	r2, [sp, #40]	; 0x28
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008f90:	1c50      	adds	r0, r2, #1
 8008f92:	9017      	str	r0, [sp, #92]	; 0x5c
 8008f94:	7852      	ldrb	r2, [r2, #1]
 8008f96:	4608      	mov	r0, r1
 8008f98:	e7cb      	b.n	8008f32 <_strtod_l+0x1f2>
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	e7d4      	b.n	8008f48 <_strtod_l+0x208>
 8008f9e:	2908      	cmp	r1, #8
 8008fa0:	dc04      	bgt.n	8008fac <_strtod_l+0x26c>
 8008fa2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008fa4:	436f      	muls	r7, r5
 8008fa6:	970a      	str	r7, [sp, #40]	; 0x28
 8008fa8:	3101      	adds	r1, #1
 8008faa:	e7e2      	b.n	8008f72 <_strtod_l+0x232>
 8008fac:	f101 0e01 	add.w	lr, r1, #1
 8008fb0:	f1be 0f10 	cmp.w	lr, #16
 8008fb4:	bfde      	ittt	le
 8008fb6:	9f04      	ldrle	r7, [sp, #16]
 8008fb8:	436f      	mulle	r7, r5
 8008fba:	9704      	strle	r7, [sp, #16]
 8008fbc:	e7f4      	b.n	8008fa8 <_strtod_l+0x268>
 8008fbe:	2b10      	cmp	r3, #16
 8008fc0:	bfdf      	itttt	le
 8008fc2:	9804      	ldrle	r0, [sp, #16]
 8008fc4:	210a      	movle	r1, #10
 8008fc6:	fb01 2200 	mlale	r2, r1, r0, r2
 8008fca:	9204      	strle	r2, [sp, #16]
 8008fcc:	e7de      	b.n	8008f8c <_strtod_l+0x24c>
 8008fce:	f04f 0b00 	mov.w	fp, #0
 8008fd2:	2101      	movs	r1, #1
 8008fd4:	e77a      	b.n	8008ecc <_strtod_l+0x18c>
 8008fd6:	f04f 0e00 	mov.w	lr, #0
 8008fda:	f10a 0202 	add.w	r2, sl, #2
 8008fde:	9217      	str	r2, [sp, #92]	; 0x5c
 8008fe0:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8008fe4:	e783      	b.n	8008eee <_strtod_l+0x1ae>
 8008fe6:	f04f 0e01 	mov.w	lr, #1
 8008fea:	e7f6      	b.n	8008fda <_strtod_l+0x29a>
 8008fec:	0800d044 	.word	0x0800d044
 8008ff0:	0800cd8c 	.word	0x0800cd8c
 8008ff4:	7ff00000 	.word	0x7ff00000
 8008ff8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008ffa:	1c55      	adds	r5, r2, #1
 8008ffc:	9517      	str	r5, [sp, #92]	; 0x5c
 8008ffe:	7852      	ldrb	r2, [r2, #1]
 8009000:	2a30      	cmp	r2, #48	; 0x30
 8009002:	d0f9      	beq.n	8008ff8 <_strtod_l+0x2b8>
 8009004:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8009008:	2d08      	cmp	r5, #8
 800900a:	f63f af77 	bhi.w	8008efc <_strtod_l+0x1bc>
 800900e:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8009012:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009014:	9208      	str	r2, [sp, #32]
 8009016:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009018:	1c55      	adds	r5, r2, #1
 800901a:	9517      	str	r5, [sp, #92]	; 0x5c
 800901c:	7852      	ldrb	r2, [r2, #1]
 800901e:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 8009022:	2f09      	cmp	r7, #9
 8009024:	d937      	bls.n	8009096 <_strtod_l+0x356>
 8009026:	9f08      	ldr	r7, [sp, #32]
 8009028:	1bed      	subs	r5, r5, r7
 800902a:	2d08      	cmp	r5, #8
 800902c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8009030:	dc02      	bgt.n	8009038 <_strtod_l+0x2f8>
 8009032:	4565      	cmp	r5, ip
 8009034:	bfa8      	it	ge
 8009036:	4665      	movge	r5, ip
 8009038:	f1be 0f00 	cmp.w	lr, #0
 800903c:	d000      	beq.n	8009040 <_strtod_l+0x300>
 800903e:	426d      	negs	r5, r5
 8009040:	2b00      	cmp	r3, #0
 8009042:	d14f      	bne.n	80090e4 <_strtod_l+0x3a4>
 8009044:	9b06      	ldr	r3, [sp, #24]
 8009046:	4303      	orrs	r3, r0
 8009048:	f47f aebe 	bne.w	8008dc8 <_strtod_l+0x88>
 800904c:	2900      	cmp	r1, #0
 800904e:	f47f aed8 	bne.w	8008e02 <_strtod_l+0xc2>
 8009052:	2a69      	cmp	r2, #105	; 0x69
 8009054:	d027      	beq.n	80090a6 <_strtod_l+0x366>
 8009056:	dc24      	bgt.n	80090a2 <_strtod_l+0x362>
 8009058:	2a49      	cmp	r2, #73	; 0x49
 800905a:	d024      	beq.n	80090a6 <_strtod_l+0x366>
 800905c:	2a4e      	cmp	r2, #78	; 0x4e
 800905e:	f47f aed0 	bne.w	8008e02 <_strtod_l+0xc2>
 8009062:	499b      	ldr	r1, [pc, #620]	; (80092d0 <_strtod_l+0x590>)
 8009064:	a817      	add	r0, sp, #92	; 0x5c
 8009066:	f002 f813 	bl	800b090 <__match>
 800906a:	2800      	cmp	r0, #0
 800906c:	f43f aec9 	beq.w	8008e02 <_strtod_l+0xc2>
 8009070:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009072:	781b      	ldrb	r3, [r3, #0]
 8009074:	2b28      	cmp	r3, #40	; 0x28
 8009076:	d12d      	bne.n	80090d4 <_strtod_l+0x394>
 8009078:	4996      	ldr	r1, [pc, #600]	; (80092d4 <_strtod_l+0x594>)
 800907a:	aa1a      	add	r2, sp, #104	; 0x68
 800907c:	a817      	add	r0, sp, #92	; 0x5c
 800907e:	f002 f81b 	bl	800b0b8 <__hexnan>
 8009082:	2805      	cmp	r0, #5
 8009084:	d126      	bne.n	80090d4 <_strtod_l+0x394>
 8009086:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009088:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800908c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009090:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009094:	e698      	b.n	8008dc8 <_strtod_l+0x88>
 8009096:	250a      	movs	r5, #10
 8009098:	fb05 250c 	mla	r5, r5, ip, r2
 800909c:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80090a0:	e7b9      	b.n	8009016 <_strtod_l+0x2d6>
 80090a2:	2a6e      	cmp	r2, #110	; 0x6e
 80090a4:	e7db      	b.n	800905e <_strtod_l+0x31e>
 80090a6:	498c      	ldr	r1, [pc, #560]	; (80092d8 <_strtod_l+0x598>)
 80090a8:	a817      	add	r0, sp, #92	; 0x5c
 80090aa:	f001 fff1 	bl	800b090 <__match>
 80090ae:	2800      	cmp	r0, #0
 80090b0:	f43f aea7 	beq.w	8008e02 <_strtod_l+0xc2>
 80090b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090b6:	4989      	ldr	r1, [pc, #548]	; (80092dc <_strtod_l+0x59c>)
 80090b8:	3b01      	subs	r3, #1
 80090ba:	a817      	add	r0, sp, #92	; 0x5c
 80090bc:	9317      	str	r3, [sp, #92]	; 0x5c
 80090be:	f001 ffe7 	bl	800b090 <__match>
 80090c2:	b910      	cbnz	r0, 80090ca <_strtod_l+0x38a>
 80090c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090c6:	3301      	adds	r3, #1
 80090c8:	9317      	str	r3, [sp, #92]	; 0x5c
 80090ca:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80092f0 <_strtod_l+0x5b0>
 80090ce:	f04f 0800 	mov.w	r8, #0
 80090d2:	e679      	b.n	8008dc8 <_strtod_l+0x88>
 80090d4:	4882      	ldr	r0, [pc, #520]	; (80092e0 <_strtod_l+0x5a0>)
 80090d6:	f003 f993 	bl	800c400 <nan>
 80090da:	ed8d 0b04 	vstr	d0, [sp, #16]
 80090de:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80090e2:	e671      	b.n	8008dc8 <_strtod_l+0x88>
 80090e4:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80090e8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80090ec:	eba5 020b 	sub.w	r2, r5, fp
 80090f0:	2e00      	cmp	r6, #0
 80090f2:	bf08      	it	eq
 80090f4:	461e      	moveq	r6, r3
 80090f6:	2b10      	cmp	r3, #16
 80090f8:	ed8d 7b08 	vstr	d7, [sp, #32]
 80090fc:	9206      	str	r2, [sp, #24]
 80090fe:	461a      	mov	r2, r3
 8009100:	bfa8      	it	ge
 8009102:	2210      	movge	r2, #16
 8009104:	2b09      	cmp	r3, #9
 8009106:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800910a:	dd0e      	ble.n	800912a <_strtod_l+0x3ea>
 800910c:	4975      	ldr	r1, [pc, #468]	; (80092e4 <_strtod_l+0x5a4>)
 800910e:	eddd 7a04 	vldr	s15, [sp, #16]
 8009112:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009116:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 800911a:	ed9d 5b08 	vldr	d5, [sp, #32]
 800911e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009122:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009126:	ec59 8b17 	vmov	r8, r9, d7
 800912a:	2b0f      	cmp	r3, #15
 800912c:	dc37      	bgt.n	800919e <_strtod_l+0x45e>
 800912e:	9906      	ldr	r1, [sp, #24]
 8009130:	2900      	cmp	r1, #0
 8009132:	f43f ae49 	beq.w	8008dc8 <_strtod_l+0x88>
 8009136:	dd23      	ble.n	8009180 <_strtod_l+0x440>
 8009138:	2916      	cmp	r1, #22
 800913a:	dc0b      	bgt.n	8009154 <_strtod_l+0x414>
 800913c:	4b69      	ldr	r3, [pc, #420]	; (80092e4 <_strtod_l+0x5a4>)
 800913e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8009142:	ed93 7b00 	vldr	d7, [r3]
 8009146:	ec49 8b16 	vmov	d6, r8, r9
 800914a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800914e:	ec59 8b17 	vmov	r8, r9, d7
 8009152:	e639      	b.n	8008dc8 <_strtod_l+0x88>
 8009154:	9806      	ldr	r0, [sp, #24]
 8009156:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800915a:	4281      	cmp	r1, r0
 800915c:	db1f      	blt.n	800919e <_strtod_l+0x45e>
 800915e:	4a61      	ldr	r2, [pc, #388]	; (80092e4 <_strtod_l+0x5a4>)
 8009160:	f1c3 030f 	rsb	r3, r3, #15
 8009164:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8009168:	ed91 7b00 	vldr	d7, [r1]
 800916c:	ec49 8b16 	vmov	d6, r8, r9
 8009170:	1ac3      	subs	r3, r0, r3
 8009172:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009176:	ee27 7b06 	vmul.f64	d7, d7, d6
 800917a:	ed92 6b00 	vldr	d6, [r2]
 800917e:	e7e4      	b.n	800914a <_strtod_l+0x40a>
 8009180:	9906      	ldr	r1, [sp, #24]
 8009182:	3116      	adds	r1, #22
 8009184:	db0b      	blt.n	800919e <_strtod_l+0x45e>
 8009186:	4b57      	ldr	r3, [pc, #348]	; (80092e4 <_strtod_l+0x5a4>)
 8009188:	ebab 0505 	sub.w	r5, fp, r5
 800918c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8009190:	ed95 7b00 	vldr	d7, [r5]
 8009194:	ec49 8b16 	vmov	d6, r8, r9
 8009198:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800919c:	e7d7      	b.n	800914e <_strtod_l+0x40e>
 800919e:	9906      	ldr	r1, [sp, #24]
 80091a0:	1a9a      	subs	r2, r3, r2
 80091a2:	440a      	add	r2, r1
 80091a4:	2a00      	cmp	r2, #0
 80091a6:	dd74      	ble.n	8009292 <_strtod_l+0x552>
 80091a8:	f012 000f 	ands.w	r0, r2, #15
 80091ac:	d00a      	beq.n	80091c4 <_strtod_l+0x484>
 80091ae:	494d      	ldr	r1, [pc, #308]	; (80092e4 <_strtod_l+0x5a4>)
 80091b0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80091b4:	ed91 7b00 	vldr	d7, [r1]
 80091b8:	ec49 8b16 	vmov	d6, r8, r9
 80091bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80091c0:	ec59 8b17 	vmov	r8, r9, d7
 80091c4:	f032 020f 	bics.w	r2, r2, #15
 80091c8:	d04f      	beq.n	800926a <_strtod_l+0x52a>
 80091ca:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80091ce:	dd22      	ble.n	8009216 <_strtod_l+0x4d6>
 80091d0:	2500      	movs	r5, #0
 80091d2:	462e      	mov	r6, r5
 80091d4:	950a      	str	r5, [sp, #40]	; 0x28
 80091d6:	462f      	mov	r7, r5
 80091d8:	2322      	movs	r3, #34	; 0x22
 80091da:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80092f0 <_strtod_l+0x5b0>
 80091de:	6023      	str	r3, [r4, #0]
 80091e0:	f04f 0800 	mov.w	r8, #0
 80091e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	f43f adee 	beq.w	8008dc8 <_strtod_l+0x88>
 80091ec:	9918      	ldr	r1, [sp, #96]	; 0x60
 80091ee:	4620      	mov	r0, r4
 80091f0:	f002 f8d2 	bl	800b398 <_Bfree>
 80091f4:	4639      	mov	r1, r7
 80091f6:	4620      	mov	r0, r4
 80091f8:	f002 f8ce 	bl	800b398 <_Bfree>
 80091fc:	4631      	mov	r1, r6
 80091fe:	4620      	mov	r0, r4
 8009200:	f002 f8ca 	bl	800b398 <_Bfree>
 8009204:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009206:	4620      	mov	r0, r4
 8009208:	f002 f8c6 	bl	800b398 <_Bfree>
 800920c:	4629      	mov	r1, r5
 800920e:	4620      	mov	r0, r4
 8009210:	f002 f8c2 	bl	800b398 <_Bfree>
 8009214:	e5d8      	b.n	8008dc8 <_strtod_l+0x88>
 8009216:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800921a:	2000      	movs	r0, #0
 800921c:	4f32      	ldr	r7, [pc, #200]	; (80092e8 <_strtod_l+0x5a8>)
 800921e:	1112      	asrs	r2, r2, #4
 8009220:	4601      	mov	r1, r0
 8009222:	2a01      	cmp	r2, #1
 8009224:	dc24      	bgt.n	8009270 <_strtod_l+0x530>
 8009226:	b108      	cbz	r0, 800922c <_strtod_l+0x4ec>
 8009228:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800922c:	4a2e      	ldr	r2, [pc, #184]	; (80092e8 <_strtod_l+0x5a8>)
 800922e:	482f      	ldr	r0, [pc, #188]	; (80092ec <_strtod_l+0x5ac>)
 8009230:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 8009234:	ed91 7b00 	vldr	d7, [r1]
 8009238:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800923c:	ec49 8b16 	vmov	d6, r8, r9
 8009240:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009244:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009248:	9905      	ldr	r1, [sp, #20]
 800924a:	4a29      	ldr	r2, [pc, #164]	; (80092f0 <_strtod_l+0x5b0>)
 800924c:	400a      	ands	r2, r1
 800924e:	4282      	cmp	r2, r0
 8009250:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009254:	d8bc      	bhi.n	80091d0 <_strtod_l+0x490>
 8009256:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800925a:	4282      	cmp	r2, r0
 800925c:	bf86      	itte	hi
 800925e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80092f4 <_strtod_l+0x5b4>
 8009262:	f04f 38ff 	movhi.w	r8, #4294967295
 8009266:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800926a:	2200      	movs	r2, #0
 800926c:	9204      	str	r2, [sp, #16]
 800926e:	e07f      	b.n	8009370 <_strtod_l+0x630>
 8009270:	f012 0f01 	tst.w	r2, #1
 8009274:	d00a      	beq.n	800928c <_strtod_l+0x54c>
 8009276:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 800927a:	ed90 7b00 	vldr	d7, [r0]
 800927e:	ed9d 6b04 	vldr	d6, [sp, #16]
 8009282:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009286:	ed8d 7b04 	vstr	d7, [sp, #16]
 800928a:	2001      	movs	r0, #1
 800928c:	3101      	adds	r1, #1
 800928e:	1052      	asrs	r2, r2, #1
 8009290:	e7c7      	b.n	8009222 <_strtod_l+0x4e2>
 8009292:	d0ea      	beq.n	800926a <_strtod_l+0x52a>
 8009294:	4252      	negs	r2, r2
 8009296:	f012 000f 	ands.w	r0, r2, #15
 800929a:	d00a      	beq.n	80092b2 <_strtod_l+0x572>
 800929c:	4911      	ldr	r1, [pc, #68]	; (80092e4 <_strtod_l+0x5a4>)
 800929e:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80092a2:	ed91 7b00 	vldr	d7, [r1]
 80092a6:	ec49 8b16 	vmov	d6, r8, r9
 80092aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80092ae:	ec59 8b17 	vmov	r8, r9, d7
 80092b2:	1112      	asrs	r2, r2, #4
 80092b4:	d0d9      	beq.n	800926a <_strtod_l+0x52a>
 80092b6:	2a1f      	cmp	r2, #31
 80092b8:	dd1e      	ble.n	80092f8 <_strtod_l+0x5b8>
 80092ba:	2500      	movs	r5, #0
 80092bc:	462e      	mov	r6, r5
 80092be:	950a      	str	r5, [sp, #40]	; 0x28
 80092c0:	462f      	mov	r7, r5
 80092c2:	2322      	movs	r3, #34	; 0x22
 80092c4:	f04f 0800 	mov.w	r8, #0
 80092c8:	f04f 0900 	mov.w	r9, #0
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	e789      	b.n	80091e4 <_strtod_l+0x4a4>
 80092d0:	0800cd5d 	.word	0x0800cd5d
 80092d4:	0800cda0 	.word	0x0800cda0
 80092d8:	0800cd55 	.word	0x0800cd55
 80092dc:	0800cee4 	.word	0x0800cee4
 80092e0:	0800d200 	.word	0x0800d200
 80092e4:	0800d0e0 	.word	0x0800d0e0
 80092e8:	0800d0b8 	.word	0x0800d0b8
 80092ec:	7ca00000 	.word	0x7ca00000
 80092f0:	7ff00000 	.word	0x7ff00000
 80092f4:	7fefffff 	.word	0x7fefffff
 80092f8:	f012 0110 	ands.w	r1, r2, #16
 80092fc:	bf18      	it	ne
 80092fe:	216a      	movne	r1, #106	; 0x6a
 8009300:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8009304:	9104      	str	r1, [sp, #16]
 8009306:	49c0      	ldr	r1, [pc, #768]	; (8009608 <_strtod_l+0x8c8>)
 8009308:	2000      	movs	r0, #0
 800930a:	07d7      	lsls	r7, r2, #31
 800930c:	d508      	bpl.n	8009320 <_strtod_l+0x5e0>
 800930e:	ed9d 6b08 	vldr	d6, [sp, #32]
 8009312:	ed91 7b00 	vldr	d7, [r1]
 8009316:	ee26 7b07 	vmul.f64	d7, d6, d7
 800931a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800931e:	2001      	movs	r0, #1
 8009320:	1052      	asrs	r2, r2, #1
 8009322:	f101 0108 	add.w	r1, r1, #8
 8009326:	d1f0      	bne.n	800930a <_strtod_l+0x5ca>
 8009328:	b108      	cbz	r0, 800932e <_strtod_l+0x5ee>
 800932a:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800932e:	9a04      	ldr	r2, [sp, #16]
 8009330:	b1ba      	cbz	r2, 8009362 <_strtod_l+0x622>
 8009332:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009336:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 800933a:	2a00      	cmp	r2, #0
 800933c:	4649      	mov	r1, r9
 800933e:	dd10      	ble.n	8009362 <_strtod_l+0x622>
 8009340:	2a1f      	cmp	r2, #31
 8009342:	f340 8132 	ble.w	80095aa <_strtod_l+0x86a>
 8009346:	2a34      	cmp	r2, #52	; 0x34
 8009348:	bfde      	ittt	le
 800934a:	3a20      	suble	r2, #32
 800934c:	f04f 30ff 	movle.w	r0, #4294967295
 8009350:	fa00 f202 	lslle.w	r2, r0, r2
 8009354:	f04f 0800 	mov.w	r8, #0
 8009358:	bfcc      	ite	gt
 800935a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800935e:	ea02 0901 	andle.w	r9, r2, r1
 8009362:	ec49 8b17 	vmov	d7, r8, r9
 8009366:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800936a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800936e:	d0a4      	beq.n	80092ba <_strtod_l+0x57a>
 8009370:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009372:	9200      	str	r2, [sp, #0]
 8009374:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009376:	4632      	mov	r2, r6
 8009378:	4620      	mov	r0, r4
 800937a:	f002 f879 	bl	800b470 <__s2b>
 800937e:	900a      	str	r0, [sp, #40]	; 0x28
 8009380:	2800      	cmp	r0, #0
 8009382:	f43f af25 	beq.w	80091d0 <_strtod_l+0x490>
 8009386:	9b06      	ldr	r3, [sp, #24]
 8009388:	ebab 0505 	sub.w	r5, fp, r5
 800938c:	2b00      	cmp	r3, #0
 800938e:	bfb4      	ite	lt
 8009390:	462b      	movlt	r3, r5
 8009392:	2300      	movge	r3, #0
 8009394:	930c      	str	r3, [sp, #48]	; 0x30
 8009396:	9b06      	ldr	r3, [sp, #24]
 8009398:	ed9f 9b95 	vldr	d9, [pc, #596]	; 80095f0 <_strtod_l+0x8b0>
 800939c:	ed9f ab96 	vldr	d10, [pc, #600]	; 80095f8 <_strtod_l+0x8b8>
 80093a0:	ed9f bb97 	vldr	d11, [pc, #604]	; 8009600 <_strtod_l+0x8c0>
 80093a4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80093a8:	2500      	movs	r5, #0
 80093aa:	9312      	str	r3, [sp, #72]	; 0x48
 80093ac:	462e      	mov	r6, r5
 80093ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b0:	4620      	mov	r0, r4
 80093b2:	6859      	ldr	r1, [r3, #4]
 80093b4:	f001 ffb0 	bl	800b318 <_Balloc>
 80093b8:	4607      	mov	r7, r0
 80093ba:	2800      	cmp	r0, #0
 80093bc:	f43f af0c 	beq.w	80091d8 <_strtod_l+0x498>
 80093c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093c2:	691a      	ldr	r2, [r3, #16]
 80093c4:	3202      	adds	r2, #2
 80093c6:	f103 010c 	add.w	r1, r3, #12
 80093ca:	0092      	lsls	r2, r2, #2
 80093cc:	300c      	adds	r0, #12
 80093ce:	f001 ff95 	bl	800b2fc <memcpy>
 80093d2:	ec49 8b10 	vmov	d0, r8, r9
 80093d6:	aa1a      	add	r2, sp, #104	; 0x68
 80093d8:	a919      	add	r1, sp, #100	; 0x64
 80093da:	4620      	mov	r0, r4
 80093dc:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80093e0:	f002 fb82 	bl	800bae8 <__d2b>
 80093e4:	9018      	str	r0, [sp, #96]	; 0x60
 80093e6:	2800      	cmp	r0, #0
 80093e8:	f43f aef6 	beq.w	80091d8 <_strtod_l+0x498>
 80093ec:	2101      	movs	r1, #1
 80093ee:	4620      	mov	r0, r4
 80093f0:	f002 f8d8 	bl	800b5a4 <__i2b>
 80093f4:	4606      	mov	r6, r0
 80093f6:	2800      	cmp	r0, #0
 80093f8:	f43f aeee 	beq.w	80091d8 <_strtod_l+0x498>
 80093fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80093fe:	991a      	ldr	r1, [sp, #104]	; 0x68
 8009400:	2b00      	cmp	r3, #0
 8009402:	bfab      	itete	ge
 8009404:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009406:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009408:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 800940c:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8009410:	bfac      	ite	ge
 8009412:	eb03 0b02 	addge.w	fp, r3, r2
 8009416:	eba2 0a03 	sublt.w	sl, r2, r3
 800941a:	9a04      	ldr	r2, [sp, #16]
 800941c:	1a9b      	subs	r3, r3, r2
 800941e:	440b      	add	r3, r1
 8009420:	4a7a      	ldr	r2, [pc, #488]	; (800960c <_strtod_l+0x8cc>)
 8009422:	3b01      	subs	r3, #1
 8009424:	4293      	cmp	r3, r2
 8009426:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800942a:	f280 80d1 	bge.w	80095d0 <_strtod_l+0x890>
 800942e:	1ad2      	subs	r2, r2, r3
 8009430:	2a1f      	cmp	r2, #31
 8009432:	eba1 0102 	sub.w	r1, r1, r2
 8009436:	f04f 0001 	mov.w	r0, #1
 800943a:	f300 80bd 	bgt.w	80095b8 <_strtod_l+0x878>
 800943e:	fa00 f302 	lsl.w	r3, r0, r2
 8009442:	930e      	str	r3, [sp, #56]	; 0x38
 8009444:	2300      	movs	r3, #0
 8009446:	930d      	str	r3, [sp, #52]	; 0x34
 8009448:	eb0b 0301 	add.w	r3, fp, r1
 800944c:	9a04      	ldr	r2, [sp, #16]
 800944e:	459b      	cmp	fp, r3
 8009450:	448a      	add	sl, r1
 8009452:	4492      	add	sl, r2
 8009454:	465a      	mov	r2, fp
 8009456:	bfa8      	it	ge
 8009458:	461a      	movge	r2, r3
 800945a:	4552      	cmp	r2, sl
 800945c:	bfa8      	it	ge
 800945e:	4652      	movge	r2, sl
 8009460:	2a00      	cmp	r2, #0
 8009462:	bfc2      	ittt	gt
 8009464:	1a9b      	subgt	r3, r3, r2
 8009466:	ebaa 0a02 	subgt.w	sl, sl, r2
 800946a:	ebab 0b02 	subgt.w	fp, fp, r2
 800946e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009470:	2a00      	cmp	r2, #0
 8009472:	dd18      	ble.n	80094a6 <_strtod_l+0x766>
 8009474:	4631      	mov	r1, r6
 8009476:	4620      	mov	r0, r4
 8009478:	9315      	str	r3, [sp, #84]	; 0x54
 800947a:	f002 f94f 	bl	800b71c <__pow5mult>
 800947e:	4606      	mov	r6, r0
 8009480:	2800      	cmp	r0, #0
 8009482:	f43f aea9 	beq.w	80091d8 <_strtod_l+0x498>
 8009486:	4601      	mov	r1, r0
 8009488:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800948a:	4620      	mov	r0, r4
 800948c:	f002 f8a0 	bl	800b5d0 <__multiply>
 8009490:	9014      	str	r0, [sp, #80]	; 0x50
 8009492:	2800      	cmp	r0, #0
 8009494:	f43f aea0 	beq.w	80091d8 <_strtod_l+0x498>
 8009498:	9918      	ldr	r1, [sp, #96]	; 0x60
 800949a:	4620      	mov	r0, r4
 800949c:	f001 ff7c 	bl	800b398 <_Bfree>
 80094a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80094a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80094a4:	9218      	str	r2, [sp, #96]	; 0x60
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f300 8097 	bgt.w	80095da <_strtod_l+0x89a>
 80094ac:	9b06      	ldr	r3, [sp, #24]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	dd08      	ble.n	80094c4 <_strtod_l+0x784>
 80094b2:	4639      	mov	r1, r7
 80094b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80094b6:	4620      	mov	r0, r4
 80094b8:	f002 f930 	bl	800b71c <__pow5mult>
 80094bc:	4607      	mov	r7, r0
 80094be:	2800      	cmp	r0, #0
 80094c0:	f43f ae8a 	beq.w	80091d8 <_strtod_l+0x498>
 80094c4:	f1ba 0f00 	cmp.w	sl, #0
 80094c8:	dd08      	ble.n	80094dc <_strtod_l+0x79c>
 80094ca:	4639      	mov	r1, r7
 80094cc:	4652      	mov	r2, sl
 80094ce:	4620      	mov	r0, r4
 80094d0:	f002 f97e 	bl	800b7d0 <__lshift>
 80094d4:	4607      	mov	r7, r0
 80094d6:	2800      	cmp	r0, #0
 80094d8:	f43f ae7e 	beq.w	80091d8 <_strtod_l+0x498>
 80094dc:	f1bb 0f00 	cmp.w	fp, #0
 80094e0:	dd08      	ble.n	80094f4 <_strtod_l+0x7b4>
 80094e2:	4631      	mov	r1, r6
 80094e4:	465a      	mov	r2, fp
 80094e6:	4620      	mov	r0, r4
 80094e8:	f002 f972 	bl	800b7d0 <__lshift>
 80094ec:	4606      	mov	r6, r0
 80094ee:	2800      	cmp	r0, #0
 80094f0:	f43f ae72 	beq.w	80091d8 <_strtod_l+0x498>
 80094f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80094f6:	463a      	mov	r2, r7
 80094f8:	4620      	mov	r0, r4
 80094fa:	f002 f9f1 	bl	800b8e0 <__mdiff>
 80094fe:	4605      	mov	r5, r0
 8009500:	2800      	cmp	r0, #0
 8009502:	f43f ae69 	beq.w	80091d8 <_strtod_l+0x498>
 8009506:	2300      	movs	r3, #0
 8009508:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800950c:	60c3      	str	r3, [r0, #12]
 800950e:	4631      	mov	r1, r6
 8009510:	f002 f9ca 	bl	800b8a8 <__mcmp>
 8009514:	2800      	cmp	r0, #0
 8009516:	da7f      	bge.n	8009618 <_strtod_l+0x8d8>
 8009518:	ea5a 0308 	orrs.w	r3, sl, r8
 800951c:	f040 80a5 	bne.w	800966a <_strtod_l+0x92a>
 8009520:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009524:	2b00      	cmp	r3, #0
 8009526:	f040 80a0 	bne.w	800966a <_strtod_l+0x92a>
 800952a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800952e:	0d1b      	lsrs	r3, r3, #20
 8009530:	051b      	lsls	r3, r3, #20
 8009532:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009536:	f240 8098 	bls.w	800966a <_strtod_l+0x92a>
 800953a:	696b      	ldr	r3, [r5, #20]
 800953c:	b91b      	cbnz	r3, 8009546 <_strtod_l+0x806>
 800953e:	692b      	ldr	r3, [r5, #16]
 8009540:	2b01      	cmp	r3, #1
 8009542:	f340 8092 	ble.w	800966a <_strtod_l+0x92a>
 8009546:	4629      	mov	r1, r5
 8009548:	2201      	movs	r2, #1
 800954a:	4620      	mov	r0, r4
 800954c:	f002 f940 	bl	800b7d0 <__lshift>
 8009550:	4631      	mov	r1, r6
 8009552:	4605      	mov	r5, r0
 8009554:	f002 f9a8 	bl	800b8a8 <__mcmp>
 8009558:	2800      	cmp	r0, #0
 800955a:	f340 8086 	ble.w	800966a <_strtod_l+0x92a>
 800955e:	9904      	ldr	r1, [sp, #16]
 8009560:	4a2b      	ldr	r2, [pc, #172]	; (8009610 <_strtod_l+0x8d0>)
 8009562:	464b      	mov	r3, r9
 8009564:	2900      	cmp	r1, #0
 8009566:	f000 80a1 	beq.w	80096ac <_strtod_l+0x96c>
 800956a:	ea02 0109 	and.w	r1, r2, r9
 800956e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009572:	f300 809b 	bgt.w	80096ac <_strtod_l+0x96c>
 8009576:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800957a:	f77f aea2 	ble.w	80092c2 <_strtod_l+0x582>
 800957e:	4a25      	ldr	r2, [pc, #148]	; (8009614 <_strtod_l+0x8d4>)
 8009580:	2300      	movs	r3, #0
 8009582:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8009586:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 800958a:	ec49 8b17 	vmov	d7, r8, r9
 800958e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009592:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009596:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800959a:	4313      	orrs	r3, r2
 800959c:	bf08      	it	eq
 800959e:	2322      	moveq	r3, #34	; 0x22
 80095a0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80095a4:	bf08      	it	eq
 80095a6:	6023      	streq	r3, [r4, #0]
 80095a8:	e620      	b.n	80091ec <_strtod_l+0x4ac>
 80095aa:	f04f 31ff 	mov.w	r1, #4294967295
 80095ae:	fa01 f202 	lsl.w	r2, r1, r2
 80095b2:	ea02 0808 	and.w	r8, r2, r8
 80095b6:	e6d4      	b.n	8009362 <_strtod_l+0x622>
 80095b8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80095bc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80095c0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80095c4:	33e2      	adds	r3, #226	; 0xe2
 80095c6:	fa00 f303 	lsl.w	r3, r0, r3
 80095ca:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 80095ce:	e73b      	b.n	8009448 <_strtod_l+0x708>
 80095d0:	2000      	movs	r0, #0
 80095d2:	2301      	movs	r3, #1
 80095d4:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 80095d8:	e736      	b.n	8009448 <_strtod_l+0x708>
 80095da:	9918      	ldr	r1, [sp, #96]	; 0x60
 80095dc:	461a      	mov	r2, r3
 80095de:	4620      	mov	r0, r4
 80095e0:	f002 f8f6 	bl	800b7d0 <__lshift>
 80095e4:	9018      	str	r0, [sp, #96]	; 0x60
 80095e6:	2800      	cmp	r0, #0
 80095e8:	f47f af60 	bne.w	80094ac <_strtod_l+0x76c>
 80095ec:	e5f4      	b.n	80091d8 <_strtod_l+0x498>
 80095ee:	bf00      	nop
 80095f0:	94a03595 	.word	0x94a03595
 80095f4:	3fcfffff 	.word	0x3fcfffff
 80095f8:	94a03595 	.word	0x94a03595
 80095fc:	3fdfffff 	.word	0x3fdfffff
 8009600:	35afe535 	.word	0x35afe535
 8009604:	3fe00000 	.word	0x3fe00000
 8009608:	0800cdb8 	.word	0x0800cdb8
 800960c:	fffffc02 	.word	0xfffffc02
 8009610:	7ff00000 	.word	0x7ff00000
 8009614:	39500000 	.word	0x39500000
 8009618:	46cb      	mov	fp, r9
 800961a:	d165      	bne.n	80096e8 <_strtod_l+0x9a8>
 800961c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009620:	f1ba 0f00 	cmp.w	sl, #0
 8009624:	d02a      	beq.n	800967c <_strtod_l+0x93c>
 8009626:	4aaa      	ldr	r2, [pc, #680]	; (80098d0 <_strtod_l+0xb90>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d12b      	bne.n	8009684 <_strtod_l+0x944>
 800962c:	9b04      	ldr	r3, [sp, #16]
 800962e:	4641      	mov	r1, r8
 8009630:	b1fb      	cbz	r3, 8009672 <_strtod_l+0x932>
 8009632:	4aa8      	ldr	r2, [pc, #672]	; (80098d4 <_strtod_l+0xb94>)
 8009634:	ea09 0202 	and.w	r2, r9, r2
 8009638:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800963c:	f04f 30ff 	mov.w	r0, #4294967295
 8009640:	d81a      	bhi.n	8009678 <_strtod_l+0x938>
 8009642:	0d12      	lsrs	r2, r2, #20
 8009644:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009648:	fa00 f303 	lsl.w	r3, r0, r3
 800964c:	4299      	cmp	r1, r3
 800964e:	d119      	bne.n	8009684 <_strtod_l+0x944>
 8009650:	4ba1      	ldr	r3, [pc, #644]	; (80098d8 <_strtod_l+0xb98>)
 8009652:	459b      	cmp	fp, r3
 8009654:	d102      	bne.n	800965c <_strtod_l+0x91c>
 8009656:	3101      	adds	r1, #1
 8009658:	f43f adbe 	beq.w	80091d8 <_strtod_l+0x498>
 800965c:	4b9d      	ldr	r3, [pc, #628]	; (80098d4 <_strtod_l+0xb94>)
 800965e:	ea0b 0303 	and.w	r3, fp, r3
 8009662:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009666:	f04f 0800 	mov.w	r8, #0
 800966a:	9b04      	ldr	r3, [sp, #16]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d186      	bne.n	800957e <_strtod_l+0x83e>
 8009670:	e5bc      	b.n	80091ec <_strtod_l+0x4ac>
 8009672:	f04f 33ff 	mov.w	r3, #4294967295
 8009676:	e7e9      	b.n	800964c <_strtod_l+0x90c>
 8009678:	4603      	mov	r3, r0
 800967a:	e7e7      	b.n	800964c <_strtod_l+0x90c>
 800967c:	ea53 0308 	orrs.w	r3, r3, r8
 8009680:	f43f af6d 	beq.w	800955e <_strtod_l+0x81e>
 8009684:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009686:	b1db      	cbz	r3, 80096c0 <_strtod_l+0x980>
 8009688:	ea13 0f0b 	tst.w	r3, fp
 800968c:	d0ed      	beq.n	800966a <_strtod_l+0x92a>
 800968e:	9a04      	ldr	r2, [sp, #16]
 8009690:	4640      	mov	r0, r8
 8009692:	4649      	mov	r1, r9
 8009694:	f1ba 0f00 	cmp.w	sl, #0
 8009698:	d016      	beq.n	80096c8 <_strtod_l+0x988>
 800969a:	f7ff fb35 	bl	8008d08 <sulp>
 800969e:	ed9d 7b08 	vldr	d7, [sp, #32]
 80096a2:	ee37 7b00 	vadd.f64	d7, d7, d0
 80096a6:	ec59 8b17 	vmov	r8, r9, d7
 80096aa:	e7de      	b.n	800966a <_strtod_l+0x92a>
 80096ac:	4013      	ands	r3, r2
 80096ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80096b2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80096b6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80096ba:	f04f 38ff 	mov.w	r8, #4294967295
 80096be:	e7d4      	b.n	800966a <_strtod_l+0x92a>
 80096c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096c2:	ea13 0f08 	tst.w	r3, r8
 80096c6:	e7e1      	b.n	800968c <_strtod_l+0x94c>
 80096c8:	f7ff fb1e 	bl	8008d08 <sulp>
 80096cc:	ed9d 7b08 	vldr	d7, [sp, #32]
 80096d0:	ee37 7b40 	vsub.f64	d7, d7, d0
 80096d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80096d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80096dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096e0:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80096e4:	d1c1      	bne.n	800966a <_strtod_l+0x92a>
 80096e6:	e5ec      	b.n	80092c2 <_strtod_l+0x582>
 80096e8:	4631      	mov	r1, r6
 80096ea:	4628      	mov	r0, r5
 80096ec:	f002 fa58 	bl	800bba0 <__ratio>
 80096f0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80096f4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80096f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096fc:	d867      	bhi.n	80097ce <_strtod_l+0xa8e>
 80096fe:	f1ba 0f00 	cmp.w	sl, #0
 8009702:	d044      	beq.n	800978e <_strtod_l+0xa4e>
 8009704:	4b75      	ldr	r3, [pc, #468]	; (80098dc <_strtod_l+0xb9c>)
 8009706:	2200      	movs	r2, #0
 8009708:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 800970c:	4971      	ldr	r1, [pc, #452]	; (80098d4 <_strtod_l+0xb94>)
 800970e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80098e8 <_strtod_l+0xba8>
 8009712:	ea0b 0001 	and.w	r0, fp, r1
 8009716:	4560      	cmp	r0, ip
 8009718:	900d      	str	r0, [sp, #52]	; 0x34
 800971a:	f040 808b 	bne.w	8009834 <_strtod_l+0xaf4>
 800971e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009722:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009726:	ec49 8b10 	vmov	d0, r8, r9
 800972a:	ec43 2b1c 	vmov	d12, r2, r3
 800972e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009732:	f002 f95d 	bl	800b9f0 <__ulp>
 8009736:	ec49 8b1d 	vmov	d13, r8, r9
 800973a:	eeac db00 	vfma.f64	d13, d12, d0
 800973e:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8009742:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009744:	4963      	ldr	r1, [pc, #396]	; (80098d4 <_strtod_l+0xb94>)
 8009746:	4a66      	ldr	r2, [pc, #408]	; (80098e0 <_strtod_l+0xba0>)
 8009748:	4019      	ands	r1, r3
 800974a:	4291      	cmp	r1, r2
 800974c:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8009750:	d947      	bls.n	80097e2 <_strtod_l+0xaa2>
 8009752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009754:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009758:	4293      	cmp	r3, r2
 800975a:	d103      	bne.n	8009764 <_strtod_l+0xa24>
 800975c:	9b08      	ldr	r3, [sp, #32]
 800975e:	3301      	adds	r3, #1
 8009760:	f43f ad3a 	beq.w	80091d8 <_strtod_l+0x498>
 8009764:	f8df 9170 	ldr.w	r9, [pc, #368]	; 80098d8 <_strtod_l+0xb98>
 8009768:	f04f 38ff 	mov.w	r8, #4294967295
 800976c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800976e:	4620      	mov	r0, r4
 8009770:	f001 fe12 	bl	800b398 <_Bfree>
 8009774:	4639      	mov	r1, r7
 8009776:	4620      	mov	r0, r4
 8009778:	f001 fe0e 	bl	800b398 <_Bfree>
 800977c:	4631      	mov	r1, r6
 800977e:	4620      	mov	r0, r4
 8009780:	f001 fe0a 	bl	800b398 <_Bfree>
 8009784:	4629      	mov	r1, r5
 8009786:	4620      	mov	r0, r4
 8009788:	f001 fe06 	bl	800b398 <_Bfree>
 800978c:	e60f      	b.n	80093ae <_strtod_l+0x66e>
 800978e:	f1b8 0f00 	cmp.w	r8, #0
 8009792:	d112      	bne.n	80097ba <_strtod_l+0xa7a>
 8009794:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009798:	b9b3      	cbnz	r3, 80097c8 <_strtod_l+0xa88>
 800979a:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800979e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80097a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097a6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80097aa:	d401      	bmi.n	80097b0 <_strtod_l+0xa70>
 80097ac:	ee20 8b08 	vmul.f64	d8, d0, d8
 80097b0:	eeb1 7b48 	vneg.f64	d7, d8
 80097b4:	ec53 2b17 	vmov	r2, r3, d7
 80097b8:	e7a8      	b.n	800970c <_strtod_l+0x9cc>
 80097ba:	f1b8 0f01 	cmp.w	r8, #1
 80097be:	d103      	bne.n	80097c8 <_strtod_l+0xa88>
 80097c0:	f1b9 0f00 	cmp.w	r9, #0
 80097c4:	f43f ad7d 	beq.w	80092c2 <_strtod_l+0x582>
 80097c8:	4b46      	ldr	r3, [pc, #280]	; (80098e4 <_strtod_l+0xba4>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	e79c      	b.n	8009708 <_strtod_l+0x9c8>
 80097ce:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 80097d2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80097d6:	f1ba 0f00 	cmp.w	sl, #0
 80097da:	d0e9      	beq.n	80097b0 <_strtod_l+0xa70>
 80097dc:	ec53 2b18 	vmov	r2, r3, d8
 80097e0:	e794      	b.n	800970c <_strtod_l+0x9cc>
 80097e2:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80097e6:	9b04      	ldr	r3, [sp, #16]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1bf      	bne.n	800976c <_strtod_l+0xa2c>
 80097ec:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80097f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80097f2:	0d1b      	lsrs	r3, r3, #20
 80097f4:	051b      	lsls	r3, r3, #20
 80097f6:	429a      	cmp	r2, r3
 80097f8:	d1b8      	bne.n	800976c <_strtod_l+0xa2c>
 80097fa:	ec51 0b18 	vmov	r0, r1, d8
 80097fe:	f7f6 ff4b 	bl	8000698 <__aeabi_d2lz>
 8009802:	f7f6 ff03 	bl	800060c <__aeabi_l2d>
 8009806:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800980a:	ec41 0b17 	vmov	d7, r0, r1
 800980e:	ea43 0308 	orr.w	r3, r3, r8
 8009812:	ea53 030a 	orrs.w	r3, r3, sl
 8009816:	ee38 8b47 	vsub.f64	d8, d8, d7
 800981a:	d03e      	beq.n	800989a <_strtod_l+0xb5a>
 800981c:	eeb4 8bca 	vcmpe.f64	d8, d10
 8009820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009824:	f53f ace2 	bmi.w	80091ec <_strtod_l+0x4ac>
 8009828:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800982c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009830:	dd9c      	ble.n	800976c <_strtod_l+0xa2c>
 8009832:	e4db      	b.n	80091ec <_strtod_l+0x4ac>
 8009834:	9904      	ldr	r1, [sp, #16]
 8009836:	b301      	cbz	r1, 800987a <_strtod_l+0xb3a>
 8009838:	990d      	ldr	r1, [sp, #52]	; 0x34
 800983a:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800983e:	d81c      	bhi.n	800987a <_strtod_l+0xb3a>
 8009840:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80098c8 <_strtod_l+0xb88>
 8009844:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800984c:	d811      	bhi.n	8009872 <_strtod_l+0xb32>
 800984e:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8009852:	ee18 3a10 	vmov	r3, s16
 8009856:	2b01      	cmp	r3, #1
 8009858:	bf38      	it	cc
 800985a:	2301      	movcc	r3, #1
 800985c:	ee08 3a10 	vmov	s16, r3
 8009860:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8009864:	f1ba 0f00 	cmp.w	sl, #0
 8009868:	d114      	bne.n	8009894 <_strtod_l+0xb54>
 800986a:	eeb1 7b48 	vneg.f64	d7, d8
 800986e:	ec53 2b17 	vmov	r2, r3, d7
 8009872:	980d      	ldr	r0, [sp, #52]	; 0x34
 8009874:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8009878:	1a0b      	subs	r3, r1, r0
 800987a:	ed9d 0b08 	vldr	d0, [sp, #32]
 800987e:	ec43 2b1c 	vmov	d12, r2, r3
 8009882:	f002 f8b5 	bl	800b9f0 <__ulp>
 8009886:	ed9d 7b08 	vldr	d7, [sp, #32]
 800988a:	eeac 7b00 	vfma.f64	d7, d12, d0
 800988e:	ec59 8b17 	vmov	r8, r9, d7
 8009892:	e7a8      	b.n	80097e6 <_strtod_l+0xaa6>
 8009894:	ec53 2b18 	vmov	r2, r3, d8
 8009898:	e7eb      	b.n	8009872 <_strtod_l+0xb32>
 800989a:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800989e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098a2:	f57f af63 	bpl.w	800976c <_strtod_l+0xa2c>
 80098a6:	e4a1      	b.n	80091ec <_strtod_l+0x4ac>
 80098a8:	2300      	movs	r3, #0
 80098aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80098ac:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80098ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098b0:	6013      	str	r3, [r2, #0]
 80098b2:	f7ff ba8d 	b.w	8008dd0 <_strtod_l+0x90>
 80098b6:	2a65      	cmp	r2, #101	; 0x65
 80098b8:	f43f ab89 	beq.w	8008fce <_strtod_l+0x28e>
 80098bc:	2a45      	cmp	r2, #69	; 0x45
 80098be:	f43f ab86 	beq.w	8008fce <_strtod_l+0x28e>
 80098c2:	2101      	movs	r1, #1
 80098c4:	f7ff bbbe 	b.w	8009044 <_strtod_l+0x304>
 80098c8:	ffc00000 	.word	0xffc00000
 80098cc:	41dfffff 	.word	0x41dfffff
 80098d0:	000fffff 	.word	0x000fffff
 80098d4:	7ff00000 	.word	0x7ff00000
 80098d8:	7fefffff 	.word	0x7fefffff
 80098dc:	3ff00000 	.word	0x3ff00000
 80098e0:	7c9fffff 	.word	0x7c9fffff
 80098e4:	bff00000 	.word	0xbff00000
 80098e8:	7fe00000 	.word	0x7fe00000

080098ec <_strtod_r>:
 80098ec:	4b01      	ldr	r3, [pc, #4]	; (80098f4 <_strtod_r+0x8>)
 80098ee:	f7ff ba27 	b.w	8008d40 <_strtod_l>
 80098f2:	bf00      	nop
 80098f4:	20000078 	.word	0x20000078

080098f8 <_strtol_l.isra.0>:
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098fe:	d001      	beq.n	8009904 <_strtol_l.isra.0+0xc>
 8009900:	2b24      	cmp	r3, #36	; 0x24
 8009902:	d906      	bls.n	8009912 <_strtol_l.isra.0+0x1a>
 8009904:	f7fe fabc 	bl	8007e80 <__errno>
 8009908:	2316      	movs	r3, #22
 800990a:	6003      	str	r3, [r0, #0]
 800990c:	2000      	movs	r0, #0
 800990e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009912:	4f3a      	ldr	r7, [pc, #232]	; (80099fc <_strtol_l.isra.0+0x104>)
 8009914:	468e      	mov	lr, r1
 8009916:	4676      	mov	r6, lr
 8009918:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800991c:	5de5      	ldrb	r5, [r4, r7]
 800991e:	f015 0508 	ands.w	r5, r5, #8
 8009922:	d1f8      	bne.n	8009916 <_strtol_l.isra.0+0x1e>
 8009924:	2c2d      	cmp	r4, #45	; 0x2d
 8009926:	d134      	bne.n	8009992 <_strtol_l.isra.0+0x9a>
 8009928:	f89e 4000 	ldrb.w	r4, [lr]
 800992c:	f04f 0801 	mov.w	r8, #1
 8009930:	f106 0e02 	add.w	lr, r6, #2
 8009934:	2b00      	cmp	r3, #0
 8009936:	d05c      	beq.n	80099f2 <_strtol_l.isra.0+0xfa>
 8009938:	2b10      	cmp	r3, #16
 800993a:	d10c      	bne.n	8009956 <_strtol_l.isra.0+0x5e>
 800993c:	2c30      	cmp	r4, #48	; 0x30
 800993e:	d10a      	bne.n	8009956 <_strtol_l.isra.0+0x5e>
 8009940:	f89e 4000 	ldrb.w	r4, [lr]
 8009944:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009948:	2c58      	cmp	r4, #88	; 0x58
 800994a:	d14d      	bne.n	80099e8 <_strtol_l.isra.0+0xf0>
 800994c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009950:	2310      	movs	r3, #16
 8009952:	f10e 0e02 	add.w	lr, lr, #2
 8009956:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800995a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800995e:	2600      	movs	r6, #0
 8009960:	fbbc f9f3 	udiv	r9, ip, r3
 8009964:	4635      	mov	r5, r6
 8009966:	fb03 ca19 	mls	sl, r3, r9, ip
 800996a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800996e:	2f09      	cmp	r7, #9
 8009970:	d818      	bhi.n	80099a4 <_strtol_l.isra.0+0xac>
 8009972:	463c      	mov	r4, r7
 8009974:	42a3      	cmp	r3, r4
 8009976:	dd24      	ble.n	80099c2 <_strtol_l.isra.0+0xca>
 8009978:	2e00      	cmp	r6, #0
 800997a:	db1f      	blt.n	80099bc <_strtol_l.isra.0+0xc4>
 800997c:	45a9      	cmp	r9, r5
 800997e:	d31d      	bcc.n	80099bc <_strtol_l.isra.0+0xc4>
 8009980:	d101      	bne.n	8009986 <_strtol_l.isra.0+0x8e>
 8009982:	45a2      	cmp	sl, r4
 8009984:	db1a      	blt.n	80099bc <_strtol_l.isra.0+0xc4>
 8009986:	fb05 4503 	mla	r5, r5, r3, r4
 800998a:	2601      	movs	r6, #1
 800998c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009990:	e7eb      	b.n	800996a <_strtol_l.isra.0+0x72>
 8009992:	2c2b      	cmp	r4, #43	; 0x2b
 8009994:	bf08      	it	eq
 8009996:	f89e 4000 	ldrbeq.w	r4, [lr]
 800999a:	46a8      	mov	r8, r5
 800999c:	bf08      	it	eq
 800999e:	f106 0e02 	addeq.w	lr, r6, #2
 80099a2:	e7c7      	b.n	8009934 <_strtol_l.isra.0+0x3c>
 80099a4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80099a8:	2f19      	cmp	r7, #25
 80099aa:	d801      	bhi.n	80099b0 <_strtol_l.isra.0+0xb8>
 80099ac:	3c37      	subs	r4, #55	; 0x37
 80099ae:	e7e1      	b.n	8009974 <_strtol_l.isra.0+0x7c>
 80099b0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80099b4:	2f19      	cmp	r7, #25
 80099b6:	d804      	bhi.n	80099c2 <_strtol_l.isra.0+0xca>
 80099b8:	3c57      	subs	r4, #87	; 0x57
 80099ba:	e7db      	b.n	8009974 <_strtol_l.isra.0+0x7c>
 80099bc:	f04f 36ff 	mov.w	r6, #4294967295
 80099c0:	e7e4      	b.n	800998c <_strtol_l.isra.0+0x94>
 80099c2:	2e00      	cmp	r6, #0
 80099c4:	da05      	bge.n	80099d2 <_strtol_l.isra.0+0xda>
 80099c6:	2322      	movs	r3, #34	; 0x22
 80099c8:	6003      	str	r3, [r0, #0]
 80099ca:	4665      	mov	r5, ip
 80099cc:	b942      	cbnz	r2, 80099e0 <_strtol_l.isra.0+0xe8>
 80099ce:	4628      	mov	r0, r5
 80099d0:	e79d      	b.n	800990e <_strtol_l.isra.0+0x16>
 80099d2:	f1b8 0f00 	cmp.w	r8, #0
 80099d6:	d000      	beq.n	80099da <_strtol_l.isra.0+0xe2>
 80099d8:	426d      	negs	r5, r5
 80099da:	2a00      	cmp	r2, #0
 80099dc:	d0f7      	beq.n	80099ce <_strtol_l.isra.0+0xd6>
 80099de:	b10e      	cbz	r6, 80099e4 <_strtol_l.isra.0+0xec>
 80099e0:	f10e 31ff 	add.w	r1, lr, #4294967295
 80099e4:	6011      	str	r1, [r2, #0]
 80099e6:	e7f2      	b.n	80099ce <_strtol_l.isra.0+0xd6>
 80099e8:	2430      	movs	r4, #48	; 0x30
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1b3      	bne.n	8009956 <_strtol_l.isra.0+0x5e>
 80099ee:	2308      	movs	r3, #8
 80099f0:	e7b1      	b.n	8009956 <_strtol_l.isra.0+0x5e>
 80099f2:	2c30      	cmp	r4, #48	; 0x30
 80099f4:	d0a4      	beq.n	8009940 <_strtol_l.isra.0+0x48>
 80099f6:	230a      	movs	r3, #10
 80099f8:	e7ad      	b.n	8009956 <_strtol_l.isra.0+0x5e>
 80099fa:	bf00      	nop
 80099fc:	0800cde1 	.word	0x0800cde1

08009a00 <_strtol_r>:
 8009a00:	f7ff bf7a 	b.w	80098f8 <_strtol_l.isra.0>

08009a04 <__swbuf_r>:
 8009a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a06:	460e      	mov	r6, r1
 8009a08:	4614      	mov	r4, r2
 8009a0a:	4605      	mov	r5, r0
 8009a0c:	b118      	cbz	r0, 8009a16 <__swbuf_r+0x12>
 8009a0e:	6983      	ldr	r3, [r0, #24]
 8009a10:	b90b      	cbnz	r3, 8009a16 <__swbuf_r+0x12>
 8009a12:	f000 ffe1 	bl	800a9d8 <__sinit>
 8009a16:	4b21      	ldr	r3, [pc, #132]	; (8009a9c <__swbuf_r+0x98>)
 8009a18:	429c      	cmp	r4, r3
 8009a1a:	d12b      	bne.n	8009a74 <__swbuf_r+0x70>
 8009a1c:	686c      	ldr	r4, [r5, #4]
 8009a1e:	69a3      	ldr	r3, [r4, #24]
 8009a20:	60a3      	str	r3, [r4, #8]
 8009a22:	89a3      	ldrh	r3, [r4, #12]
 8009a24:	071a      	lsls	r2, r3, #28
 8009a26:	d52f      	bpl.n	8009a88 <__swbuf_r+0x84>
 8009a28:	6923      	ldr	r3, [r4, #16]
 8009a2a:	b36b      	cbz	r3, 8009a88 <__swbuf_r+0x84>
 8009a2c:	6923      	ldr	r3, [r4, #16]
 8009a2e:	6820      	ldr	r0, [r4, #0]
 8009a30:	1ac0      	subs	r0, r0, r3
 8009a32:	6963      	ldr	r3, [r4, #20]
 8009a34:	b2f6      	uxtb	r6, r6
 8009a36:	4283      	cmp	r3, r0
 8009a38:	4637      	mov	r7, r6
 8009a3a:	dc04      	bgt.n	8009a46 <__swbuf_r+0x42>
 8009a3c:	4621      	mov	r1, r4
 8009a3e:	4628      	mov	r0, r5
 8009a40:	f000 ff36 	bl	800a8b0 <_fflush_r>
 8009a44:	bb30      	cbnz	r0, 8009a94 <__swbuf_r+0x90>
 8009a46:	68a3      	ldr	r3, [r4, #8]
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	60a3      	str	r3, [r4, #8]
 8009a4c:	6823      	ldr	r3, [r4, #0]
 8009a4e:	1c5a      	adds	r2, r3, #1
 8009a50:	6022      	str	r2, [r4, #0]
 8009a52:	701e      	strb	r6, [r3, #0]
 8009a54:	6963      	ldr	r3, [r4, #20]
 8009a56:	3001      	adds	r0, #1
 8009a58:	4283      	cmp	r3, r0
 8009a5a:	d004      	beq.n	8009a66 <__swbuf_r+0x62>
 8009a5c:	89a3      	ldrh	r3, [r4, #12]
 8009a5e:	07db      	lsls	r3, r3, #31
 8009a60:	d506      	bpl.n	8009a70 <__swbuf_r+0x6c>
 8009a62:	2e0a      	cmp	r6, #10
 8009a64:	d104      	bne.n	8009a70 <__swbuf_r+0x6c>
 8009a66:	4621      	mov	r1, r4
 8009a68:	4628      	mov	r0, r5
 8009a6a:	f000 ff21 	bl	800a8b0 <_fflush_r>
 8009a6e:	b988      	cbnz	r0, 8009a94 <__swbuf_r+0x90>
 8009a70:	4638      	mov	r0, r7
 8009a72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a74:	4b0a      	ldr	r3, [pc, #40]	; (8009aa0 <__swbuf_r+0x9c>)
 8009a76:	429c      	cmp	r4, r3
 8009a78:	d101      	bne.n	8009a7e <__swbuf_r+0x7a>
 8009a7a:	68ac      	ldr	r4, [r5, #8]
 8009a7c:	e7cf      	b.n	8009a1e <__swbuf_r+0x1a>
 8009a7e:	4b09      	ldr	r3, [pc, #36]	; (8009aa4 <__swbuf_r+0xa0>)
 8009a80:	429c      	cmp	r4, r3
 8009a82:	bf08      	it	eq
 8009a84:	68ec      	ldreq	r4, [r5, #12]
 8009a86:	e7ca      	b.n	8009a1e <__swbuf_r+0x1a>
 8009a88:	4621      	mov	r1, r4
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	f000 f80c 	bl	8009aa8 <__swsetup_r>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	d0cb      	beq.n	8009a2c <__swbuf_r+0x28>
 8009a94:	f04f 37ff 	mov.w	r7, #4294967295
 8009a98:	e7ea      	b.n	8009a70 <__swbuf_r+0x6c>
 8009a9a:	bf00      	nop
 8009a9c:	0800cf98 	.word	0x0800cf98
 8009aa0:	0800cfb8 	.word	0x0800cfb8
 8009aa4:	0800cf78 	.word	0x0800cf78

08009aa8 <__swsetup_r>:
 8009aa8:	4b32      	ldr	r3, [pc, #200]	; (8009b74 <__swsetup_r+0xcc>)
 8009aaa:	b570      	push	{r4, r5, r6, lr}
 8009aac:	681d      	ldr	r5, [r3, #0]
 8009aae:	4606      	mov	r6, r0
 8009ab0:	460c      	mov	r4, r1
 8009ab2:	b125      	cbz	r5, 8009abe <__swsetup_r+0x16>
 8009ab4:	69ab      	ldr	r3, [r5, #24]
 8009ab6:	b913      	cbnz	r3, 8009abe <__swsetup_r+0x16>
 8009ab8:	4628      	mov	r0, r5
 8009aba:	f000 ff8d 	bl	800a9d8 <__sinit>
 8009abe:	4b2e      	ldr	r3, [pc, #184]	; (8009b78 <__swsetup_r+0xd0>)
 8009ac0:	429c      	cmp	r4, r3
 8009ac2:	d10f      	bne.n	8009ae4 <__swsetup_r+0x3c>
 8009ac4:	686c      	ldr	r4, [r5, #4]
 8009ac6:	89a3      	ldrh	r3, [r4, #12]
 8009ac8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009acc:	0719      	lsls	r1, r3, #28
 8009ace:	d42c      	bmi.n	8009b2a <__swsetup_r+0x82>
 8009ad0:	06dd      	lsls	r5, r3, #27
 8009ad2:	d411      	bmi.n	8009af8 <__swsetup_r+0x50>
 8009ad4:	2309      	movs	r3, #9
 8009ad6:	6033      	str	r3, [r6, #0]
 8009ad8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009adc:	81a3      	strh	r3, [r4, #12]
 8009ade:	f04f 30ff 	mov.w	r0, #4294967295
 8009ae2:	e03e      	b.n	8009b62 <__swsetup_r+0xba>
 8009ae4:	4b25      	ldr	r3, [pc, #148]	; (8009b7c <__swsetup_r+0xd4>)
 8009ae6:	429c      	cmp	r4, r3
 8009ae8:	d101      	bne.n	8009aee <__swsetup_r+0x46>
 8009aea:	68ac      	ldr	r4, [r5, #8]
 8009aec:	e7eb      	b.n	8009ac6 <__swsetup_r+0x1e>
 8009aee:	4b24      	ldr	r3, [pc, #144]	; (8009b80 <__swsetup_r+0xd8>)
 8009af0:	429c      	cmp	r4, r3
 8009af2:	bf08      	it	eq
 8009af4:	68ec      	ldreq	r4, [r5, #12]
 8009af6:	e7e6      	b.n	8009ac6 <__swsetup_r+0x1e>
 8009af8:	0758      	lsls	r0, r3, #29
 8009afa:	d512      	bpl.n	8009b22 <__swsetup_r+0x7a>
 8009afc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009afe:	b141      	cbz	r1, 8009b12 <__swsetup_r+0x6a>
 8009b00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b04:	4299      	cmp	r1, r3
 8009b06:	d002      	beq.n	8009b0e <__swsetup_r+0x66>
 8009b08:	4630      	mov	r0, r6
 8009b0a:	f002 f8d1 	bl	800bcb0 <_free_r>
 8009b0e:	2300      	movs	r3, #0
 8009b10:	6363      	str	r3, [r4, #52]	; 0x34
 8009b12:	89a3      	ldrh	r3, [r4, #12]
 8009b14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009b18:	81a3      	strh	r3, [r4, #12]
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	6063      	str	r3, [r4, #4]
 8009b1e:	6923      	ldr	r3, [r4, #16]
 8009b20:	6023      	str	r3, [r4, #0]
 8009b22:	89a3      	ldrh	r3, [r4, #12]
 8009b24:	f043 0308 	orr.w	r3, r3, #8
 8009b28:	81a3      	strh	r3, [r4, #12]
 8009b2a:	6923      	ldr	r3, [r4, #16]
 8009b2c:	b94b      	cbnz	r3, 8009b42 <__swsetup_r+0x9a>
 8009b2e:	89a3      	ldrh	r3, [r4, #12]
 8009b30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009b34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009b38:	d003      	beq.n	8009b42 <__swsetup_r+0x9a>
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	4630      	mov	r0, r6
 8009b3e:	f001 fb83 	bl	800b248 <__smakebuf_r>
 8009b42:	89a0      	ldrh	r0, [r4, #12]
 8009b44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009b48:	f010 0301 	ands.w	r3, r0, #1
 8009b4c:	d00a      	beq.n	8009b64 <__swsetup_r+0xbc>
 8009b4e:	2300      	movs	r3, #0
 8009b50:	60a3      	str	r3, [r4, #8]
 8009b52:	6963      	ldr	r3, [r4, #20]
 8009b54:	425b      	negs	r3, r3
 8009b56:	61a3      	str	r3, [r4, #24]
 8009b58:	6923      	ldr	r3, [r4, #16]
 8009b5a:	b943      	cbnz	r3, 8009b6e <__swsetup_r+0xc6>
 8009b5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009b60:	d1ba      	bne.n	8009ad8 <__swsetup_r+0x30>
 8009b62:	bd70      	pop	{r4, r5, r6, pc}
 8009b64:	0781      	lsls	r1, r0, #30
 8009b66:	bf58      	it	pl
 8009b68:	6963      	ldrpl	r3, [r4, #20]
 8009b6a:	60a3      	str	r3, [r4, #8]
 8009b6c:	e7f4      	b.n	8009b58 <__swsetup_r+0xb0>
 8009b6e:	2000      	movs	r0, #0
 8009b70:	e7f7      	b.n	8009b62 <__swsetup_r+0xba>
 8009b72:	bf00      	nop
 8009b74:	20000010 	.word	0x20000010
 8009b78:	0800cf98 	.word	0x0800cf98
 8009b7c:	0800cfb8 	.word	0x0800cfb8
 8009b80:	0800cf78 	.word	0x0800cf78

08009b84 <quorem>:
 8009b84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b88:	6903      	ldr	r3, [r0, #16]
 8009b8a:	690c      	ldr	r4, [r1, #16]
 8009b8c:	42a3      	cmp	r3, r4
 8009b8e:	4607      	mov	r7, r0
 8009b90:	f2c0 8081 	blt.w	8009c96 <quorem+0x112>
 8009b94:	3c01      	subs	r4, #1
 8009b96:	f101 0814 	add.w	r8, r1, #20
 8009b9a:	f100 0514 	add.w	r5, r0, #20
 8009b9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ba2:	9301      	str	r3, [sp, #4]
 8009ba4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ba8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bac:	3301      	adds	r3, #1
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009bb4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009bb8:	fbb2 f6f3 	udiv	r6, r2, r3
 8009bbc:	d331      	bcc.n	8009c22 <quorem+0x9e>
 8009bbe:	f04f 0e00 	mov.w	lr, #0
 8009bc2:	4640      	mov	r0, r8
 8009bc4:	46ac      	mov	ip, r5
 8009bc6:	46f2      	mov	sl, lr
 8009bc8:	f850 2b04 	ldr.w	r2, [r0], #4
 8009bcc:	b293      	uxth	r3, r2
 8009bce:	fb06 e303 	mla	r3, r6, r3, lr
 8009bd2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	ebaa 0303 	sub.w	r3, sl, r3
 8009bdc:	0c12      	lsrs	r2, r2, #16
 8009bde:	f8dc a000 	ldr.w	sl, [ip]
 8009be2:	fb06 e202 	mla	r2, r6, r2, lr
 8009be6:	fa13 f38a 	uxtah	r3, r3, sl
 8009bea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009bee:	fa1f fa82 	uxth.w	sl, r2
 8009bf2:	f8dc 2000 	ldr.w	r2, [ip]
 8009bf6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009bfa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c04:	4581      	cmp	r9, r0
 8009c06:	f84c 3b04 	str.w	r3, [ip], #4
 8009c0a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009c0e:	d2db      	bcs.n	8009bc8 <quorem+0x44>
 8009c10:	f855 300b 	ldr.w	r3, [r5, fp]
 8009c14:	b92b      	cbnz	r3, 8009c22 <quorem+0x9e>
 8009c16:	9b01      	ldr	r3, [sp, #4]
 8009c18:	3b04      	subs	r3, #4
 8009c1a:	429d      	cmp	r5, r3
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	d32e      	bcc.n	8009c7e <quorem+0xfa>
 8009c20:	613c      	str	r4, [r7, #16]
 8009c22:	4638      	mov	r0, r7
 8009c24:	f001 fe40 	bl	800b8a8 <__mcmp>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	db24      	blt.n	8009c76 <quorem+0xf2>
 8009c2c:	3601      	adds	r6, #1
 8009c2e:	4628      	mov	r0, r5
 8009c30:	f04f 0c00 	mov.w	ip, #0
 8009c34:	f858 2b04 	ldr.w	r2, [r8], #4
 8009c38:	f8d0 e000 	ldr.w	lr, [r0]
 8009c3c:	b293      	uxth	r3, r2
 8009c3e:	ebac 0303 	sub.w	r3, ip, r3
 8009c42:	0c12      	lsrs	r2, r2, #16
 8009c44:	fa13 f38e 	uxtah	r3, r3, lr
 8009c48:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009c4c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c56:	45c1      	cmp	r9, r8
 8009c58:	f840 3b04 	str.w	r3, [r0], #4
 8009c5c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009c60:	d2e8      	bcs.n	8009c34 <quorem+0xb0>
 8009c62:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c6a:	b922      	cbnz	r2, 8009c76 <quorem+0xf2>
 8009c6c:	3b04      	subs	r3, #4
 8009c6e:	429d      	cmp	r5, r3
 8009c70:	461a      	mov	r2, r3
 8009c72:	d30a      	bcc.n	8009c8a <quorem+0x106>
 8009c74:	613c      	str	r4, [r7, #16]
 8009c76:	4630      	mov	r0, r6
 8009c78:	b003      	add	sp, #12
 8009c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c7e:	6812      	ldr	r2, [r2, #0]
 8009c80:	3b04      	subs	r3, #4
 8009c82:	2a00      	cmp	r2, #0
 8009c84:	d1cc      	bne.n	8009c20 <quorem+0x9c>
 8009c86:	3c01      	subs	r4, #1
 8009c88:	e7c7      	b.n	8009c1a <quorem+0x96>
 8009c8a:	6812      	ldr	r2, [r2, #0]
 8009c8c:	3b04      	subs	r3, #4
 8009c8e:	2a00      	cmp	r2, #0
 8009c90:	d1f0      	bne.n	8009c74 <quorem+0xf0>
 8009c92:	3c01      	subs	r4, #1
 8009c94:	e7eb      	b.n	8009c6e <quorem+0xea>
 8009c96:	2000      	movs	r0, #0
 8009c98:	e7ee      	b.n	8009c78 <quorem+0xf4>
 8009c9a:	0000      	movs	r0, r0
 8009c9c:	0000      	movs	r0, r0
	...

08009ca0 <_dtoa_r>:
 8009ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca4:	ec59 8b10 	vmov	r8, r9, d0
 8009ca8:	b095      	sub	sp, #84	; 0x54
 8009caa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009cac:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8009cae:	9107      	str	r1, [sp, #28]
 8009cb0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009cb4:	4606      	mov	r6, r0
 8009cb6:	9209      	str	r2, [sp, #36]	; 0x24
 8009cb8:	9310      	str	r3, [sp, #64]	; 0x40
 8009cba:	b975      	cbnz	r5, 8009cda <_dtoa_r+0x3a>
 8009cbc:	2010      	movs	r0, #16
 8009cbe:	f001 fb03 	bl	800b2c8 <malloc>
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	6270      	str	r0, [r6, #36]	; 0x24
 8009cc6:	b920      	cbnz	r0, 8009cd2 <_dtoa_r+0x32>
 8009cc8:	4bab      	ldr	r3, [pc, #684]	; (8009f78 <_dtoa_r+0x2d8>)
 8009cca:	21ea      	movs	r1, #234	; 0xea
 8009ccc:	48ab      	ldr	r0, [pc, #684]	; (8009f7c <_dtoa_r+0x2dc>)
 8009cce:	f002 fc23 	bl	800c518 <__assert_func>
 8009cd2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009cd6:	6005      	str	r5, [r0, #0]
 8009cd8:	60c5      	str	r5, [r0, #12]
 8009cda:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009cdc:	6819      	ldr	r1, [r3, #0]
 8009cde:	b151      	cbz	r1, 8009cf6 <_dtoa_r+0x56>
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	604a      	str	r2, [r1, #4]
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	4093      	lsls	r3, r2
 8009ce8:	608b      	str	r3, [r1, #8]
 8009cea:	4630      	mov	r0, r6
 8009cec:	f001 fb54 	bl	800b398 <_Bfree>
 8009cf0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	601a      	str	r2, [r3, #0]
 8009cf6:	f1b9 0300 	subs.w	r3, r9, #0
 8009cfa:	bfbb      	ittet	lt
 8009cfc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009d00:	9303      	strlt	r3, [sp, #12]
 8009d02:	2300      	movge	r3, #0
 8009d04:	2201      	movlt	r2, #1
 8009d06:	bfac      	ite	ge
 8009d08:	6023      	strge	r3, [r4, #0]
 8009d0a:	6022      	strlt	r2, [r4, #0]
 8009d0c:	4b9c      	ldr	r3, [pc, #624]	; (8009f80 <_dtoa_r+0x2e0>)
 8009d0e:	9c03      	ldr	r4, [sp, #12]
 8009d10:	43a3      	bics	r3, r4
 8009d12:	d11a      	bne.n	8009d4a <_dtoa_r+0xaa>
 8009d14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d16:	f242 730f 	movw	r3, #9999	; 0x270f
 8009d1a:	6013      	str	r3, [r2, #0]
 8009d1c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009d20:	ea53 0308 	orrs.w	r3, r3, r8
 8009d24:	f000 8512 	beq.w	800a74c <_dtoa_r+0xaac>
 8009d28:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d2a:	b953      	cbnz	r3, 8009d42 <_dtoa_r+0xa2>
 8009d2c:	4b95      	ldr	r3, [pc, #596]	; (8009f84 <_dtoa_r+0x2e4>)
 8009d2e:	e01f      	b.n	8009d70 <_dtoa_r+0xd0>
 8009d30:	4b95      	ldr	r3, [pc, #596]	; (8009f88 <_dtoa_r+0x2e8>)
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	3308      	adds	r3, #8
 8009d36:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8009d38:	6013      	str	r3, [r2, #0]
 8009d3a:	9800      	ldr	r0, [sp, #0]
 8009d3c:	b015      	add	sp, #84	; 0x54
 8009d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d42:	4b90      	ldr	r3, [pc, #576]	; (8009f84 <_dtoa_r+0x2e4>)
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	3303      	adds	r3, #3
 8009d48:	e7f5      	b.n	8009d36 <_dtoa_r+0x96>
 8009d4a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d4e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009d52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d56:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009d5a:	d10b      	bne.n	8009d74 <_dtoa_r+0xd4>
 8009d5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009d5e:	2301      	movs	r3, #1
 8009d60:	6013      	str	r3, [r2, #0]
 8009d62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	f000 84ee 	beq.w	800a746 <_dtoa_r+0xaa6>
 8009d6a:	4888      	ldr	r0, [pc, #544]	; (8009f8c <_dtoa_r+0x2ec>)
 8009d6c:	6018      	str	r0, [r3, #0]
 8009d6e:	1e43      	subs	r3, r0, #1
 8009d70:	9300      	str	r3, [sp, #0]
 8009d72:	e7e2      	b.n	8009d3a <_dtoa_r+0x9a>
 8009d74:	a913      	add	r1, sp, #76	; 0x4c
 8009d76:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009d7a:	aa12      	add	r2, sp, #72	; 0x48
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	f001 feb3 	bl	800bae8 <__d2b>
 8009d82:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8009d86:	4605      	mov	r5, r0
 8009d88:	9812      	ldr	r0, [sp, #72]	; 0x48
 8009d8a:	2900      	cmp	r1, #0
 8009d8c:	d047      	beq.n	8009e1e <_dtoa_r+0x17e>
 8009d8e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8009d90:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009d94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009d98:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009d9c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009da0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009da4:	2400      	movs	r4, #0
 8009da6:	ec43 2b16 	vmov	d6, r2, r3
 8009daa:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009dae:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8009f60 <_dtoa_r+0x2c0>
 8009db2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009db6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8009f68 <_dtoa_r+0x2c8>
 8009dba:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009dbe:	eeb0 7b46 	vmov.f64	d7, d6
 8009dc2:	ee06 1a90 	vmov	s13, r1
 8009dc6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8009dca:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8009f70 <_dtoa_r+0x2d0>
 8009dce:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009dd2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009dd6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009dda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dde:	ee16 ba90 	vmov	fp, s13
 8009de2:	9411      	str	r4, [sp, #68]	; 0x44
 8009de4:	d508      	bpl.n	8009df8 <_dtoa_r+0x158>
 8009de6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009dea:	eeb4 6b47 	vcmp.f64	d6, d7
 8009dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009df2:	bf18      	it	ne
 8009df4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009df8:	f1bb 0f16 	cmp.w	fp, #22
 8009dfc:	d832      	bhi.n	8009e64 <_dtoa_r+0x1c4>
 8009dfe:	4b64      	ldr	r3, [pc, #400]	; (8009f90 <_dtoa_r+0x2f0>)
 8009e00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009e04:	ed93 7b00 	vldr	d7, [r3]
 8009e08:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8009e0c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e14:	d501      	bpl.n	8009e1a <_dtoa_r+0x17a>
 8009e16:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	e023      	b.n	8009e66 <_dtoa_r+0x1c6>
 8009e1e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8009e20:	4401      	add	r1, r0
 8009e22:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009e26:	2b20      	cmp	r3, #32
 8009e28:	bfc3      	ittte	gt
 8009e2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009e2e:	fa04 f303 	lslgt.w	r3, r4, r3
 8009e32:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009e36:	f1c3 0320 	rsble	r3, r3, #32
 8009e3a:	bfc6      	itte	gt
 8009e3c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009e40:	ea43 0308 	orrgt.w	r3, r3, r8
 8009e44:	fa08 f303 	lslle.w	r3, r8, r3
 8009e48:	ee07 3a90 	vmov	s15, r3
 8009e4c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009e50:	3901      	subs	r1, #1
 8009e52:	ed8d 7b00 	vstr	d7, [sp]
 8009e56:	9c01      	ldr	r4, [sp, #4]
 8009e58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e5c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009e60:	2401      	movs	r4, #1
 8009e62:	e7a0      	b.n	8009da6 <_dtoa_r+0x106>
 8009e64:	2301      	movs	r3, #1
 8009e66:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e68:	1a43      	subs	r3, r0, r1
 8009e6a:	1e5a      	subs	r2, r3, #1
 8009e6c:	bf45      	ittet	mi
 8009e6e:	f1c3 0301 	rsbmi	r3, r3, #1
 8009e72:	9305      	strmi	r3, [sp, #20]
 8009e74:	2300      	movpl	r3, #0
 8009e76:	2300      	movmi	r3, #0
 8009e78:	9206      	str	r2, [sp, #24]
 8009e7a:	bf54      	ite	pl
 8009e7c:	9305      	strpl	r3, [sp, #20]
 8009e7e:	9306      	strmi	r3, [sp, #24]
 8009e80:	f1bb 0f00 	cmp.w	fp, #0
 8009e84:	db18      	blt.n	8009eb8 <_dtoa_r+0x218>
 8009e86:	9b06      	ldr	r3, [sp, #24]
 8009e88:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8009e8c:	445b      	add	r3, fp
 8009e8e:	9306      	str	r3, [sp, #24]
 8009e90:	2300      	movs	r3, #0
 8009e92:	9a07      	ldr	r2, [sp, #28]
 8009e94:	2a09      	cmp	r2, #9
 8009e96:	d849      	bhi.n	8009f2c <_dtoa_r+0x28c>
 8009e98:	2a05      	cmp	r2, #5
 8009e9a:	bfc4      	itt	gt
 8009e9c:	3a04      	subgt	r2, #4
 8009e9e:	9207      	strgt	r2, [sp, #28]
 8009ea0:	9a07      	ldr	r2, [sp, #28]
 8009ea2:	f1a2 0202 	sub.w	r2, r2, #2
 8009ea6:	bfcc      	ite	gt
 8009ea8:	2400      	movgt	r4, #0
 8009eaa:	2401      	movle	r4, #1
 8009eac:	2a03      	cmp	r2, #3
 8009eae:	d848      	bhi.n	8009f42 <_dtoa_r+0x2a2>
 8009eb0:	e8df f002 	tbb	[pc, r2]
 8009eb4:	3a2c2e0b 	.word	0x3a2c2e0b
 8009eb8:	9b05      	ldr	r3, [sp, #20]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	eba3 030b 	sub.w	r3, r3, fp
 8009ec0:	9305      	str	r3, [sp, #20]
 8009ec2:	920e      	str	r2, [sp, #56]	; 0x38
 8009ec4:	f1cb 0300 	rsb	r3, fp, #0
 8009ec8:	e7e3      	b.n	8009e92 <_dtoa_r+0x1f2>
 8009eca:	2200      	movs	r2, #0
 8009ecc:	9208      	str	r2, [sp, #32]
 8009ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ed0:	2a00      	cmp	r2, #0
 8009ed2:	dc39      	bgt.n	8009f48 <_dtoa_r+0x2a8>
 8009ed4:	f04f 0a01 	mov.w	sl, #1
 8009ed8:	46d1      	mov	r9, sl
 8009eda:	4652      	mov	r2, sl
 8009edc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009ee0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009ee2:	2100      	movs	r1, #0
 8009ee4:	6079      	str	r1, [r7, #4]
 8009ee6:	2004      	movs	r0, #4
 8009ee8:	f100 0c14 	add.w	ip, r0, #20
 8009eec:	4594      	cmp	ip, r2
 8009eee:	6879      	ldr	r1, [r7, #4]
 8009ef0:	d92f      	bls.n	8009f52 <_dtoa_r+0x2b2>
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	930c      	str	r3, [sp, #48]	; 0x30
 8009ef6:	f001 fa0f 	bl	800b318 <_Balloc>
 8009efa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009efc:	9000      	str	r0, [sp, #0]
 8009efe:	4602      	mov	r2, r0
 8009f00:	2800      	cmp	r0, #0
 8009f02:	d149      	bne.n	8009f98 <_dtoa_r+0x2f8>
 8009f04:	4b23      	ldr	r3, [pc, #140]	; (8009f94 <_dtoa_r+0x2f4>)
 8009f06:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009f0a:	e6df      	b.n	8009ccc <_dtoa_r+0x2c>
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	e7dd      	b.n	8009ecc <_dtoa_r+0x22c>
 8009f10:	2200      	movs	r2, #0
 8009f12:	9208      	str	r2, [sp, #32]
 8009f14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f16:	eb0b 0a02 	add.w	sl, fp, r2
 8009f1a:	f10a 0901 	add.w	r9, sl, #1
 8009f1e:	464a      	mov	r2, r9
 8009f20:	2a01      	cmp	r2, #1
 8009f22:	bfb8      	it	lt
 8009f24:	2201      	movlt	r2, #1
 8009f26:	e7db      	b.n	8009ee0 <_dtoa_r+0x240>
 8009f28:	2201      	movs	r2, #1
 8009f2a:	e7f2      	b.n	8009f12 <_dtoa_r+0x272>
 8009f2c:	2401      	movs	r4, #1
 8009f2e:	2200      	movs	r2, #0
 8009f30:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009f34:	f04f 3aff 	mov.w	sl, #4294967295
 8009f38:	2100      	movs	r1, #0
 8009f3a:	46d1      	mov	r9, sl
 8009f3c:	2212      	movs	r2, #18
 8009f3e:	9109      	str	r1, [sp, #36]	; 0x24
 8009f40:	e7ce      	b.n	8009ee0 <_dtoa_r+0x240>
 8009f42:	2201      	movs	r2, #1
 8009f44:	9208      	str	r2, [sp, #32]
 8009f46:	e7f5      	b.n	8009f34 <_dtoa_r+0x294>
 8009f48:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8009f4c:	46d1      	mov	r9, sl
 8009f4e:	4652      	mov	r2, sl
 8009f50:	e7c6      	b.n	8009ee0 <_dtoa_r+0x240>
 8009f52:	3101      	adds	r1, #1
 8009f54:	6079      	str	r1, [r7, #4]
 8009f56:	0040      	lsls	r0, r0, #1
 8009f58:	e7c6      	b.n	8009ee8 <_dtoa_r+0x248>
 8009f5a:	bf00      	nop
 8009f5c:	f3af 8000 	nop.w
 8009f60:	636f4361 	.word	0x636f4361
 8009f64:	3fd287a7 	.word	0x3fd287a7
 8009f68:	8b60c8b3 	.word	0x8b60c8b3
 8009f6c:	3fc68a28 	.word	0x3fc68a28
 8009f70:	509f79fb 	.word	0x509f79fb
 8009f74:	3fd34413 	.word	0x3fd34413
 8009f78:	0800ceee 	.word	0x0800ceee
 8009f7c:	0800cf05 	.word	0x0800cf05
 8009f80:	7ff00000 	.word	0x7ff00000
 8009f84:	0800ceea 	.word	0x0800ceea
 8009f88:	0800cee1 	.word	0x0800cee1
 8009f8c:	0800cd61 	.word	0x0800cd61
 8009f90:	0800d0e0 	.word	0x0800d0e0
 8009f94:	0800cf64 	.word	0x0800cf64
 8009f98:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009f9a:	9900      	ldr	r1, [sp, #0]
 8009f9c:	6011      	str	r1, [r2, #0]
 8009f9e:	f1b9 0f0e 	cmp.w	r9, #14
 8009fa2:	d872      	bhi.n	800a08a <_dtoa_r+0x3ea>
 8009fa4:	2c00      	cmp	r4, #0
 8009fa6:	d070      	beq.n	800a08a <_dtoa_r+0x3ea>
 8009fa8:	f1bb 0f00 	cmp.w	fp, #0
 8009fac:	f340 80a6 	ble.w	800a0fc <_dtoa_r+0x45c>
 8009fb0:	49ca      	ldr	r1, [pc, #808]	; (800a2dc <_dtoa_r+0x63c>)
 8009fb2:	f00b 020f 	and.w	r2, fp, #15
 8009fb6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009fba:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009fbe:	ed92 7b00 	vldr	d7, [r2]
 8009fc2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009fc6:	f000 808d 	beq.w	800a0e4 <_dtoa_r+0x444>
 8009fca:	4ac5      	ldr	r2, [pc, #788]	; (800a2e0 <_dtoa_r+0x640>)
 8009fcc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8009fd0:	ed92 6b08 	vldr	d6, [r2, #32]
 8009fd4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8009fd8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009fdc:	f001 010f 	and.w	r1, r1, #15
 8009fe0:	2203      	movs	r2, #3
 8009fe2:	48bf      	ldr	r0, [pc, #764]	; (800a2e0 <_dtoa_r+0x640>)
 8009fe4:	2900      	cmp	r1, #0
 8009fe6:	d17f      	bne.n	800a0e8 <_dtoa_r+0x448>
 8009fe8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009fec:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009ff0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ff4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009ff6:	2900      	cmp	r1, #0
 8009ff8:	f000 80b2 	beq.w	800a160 <_dtoa_r+0x4c0>
 8009ffc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a000:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a004:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a00c:	f140 80a8 	bpl.w	800a160 <_dtoa_r+0x4c0>
 800a010:	f1b9 0f00 	cmp.w	r9, #0
 800a014:	f000 80a4 	beq.w	800a160 <_dtoa_r+0x4c0>
 800a018:	f1ba 0f00 	cmp.w	sl, #0
 800a01c:	dd31      	ble.n	800a082 <_dtoa_r+0x3e2>
 800a01e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a022:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a026:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a02a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a02e:	3201      	adds	r2, #1
 800a030:	4650      	mov	r0, sl
 800a032:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a036:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a03a:	ee07 2a90 	vmov	s15, r2
 800a03e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a042:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a046:	ed8d 5b02 	vstr	d5, [sp, #8]
 800a04a:	9c03      	ldr	r4, [sp, #12]
 800a04c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800a050:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a054:	2800      	cmp	r0, #0
 800a056:	f040 8086 	bne.w	800a166 <_dtoa_r+0x4c6>
 800a05a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a05e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a062:	ec42 1b17 	vmov	d7, r1, r2
 800a066:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a06e:	f300 8272 	bgt.w	800a556 <_dtoa_r+0x8b6>
 800a072:	eeb1 7b47 	vneg.f64	d7, d7
 800a076:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a07e:	f100 8267 	bmi.w	800a550 <_dtoa_r+0x8b0>
 800a082:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800a086:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800a08a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a08c:	2a00      	cmp	r2, #0
 800a08e:	f2c0 8129 	blt.w	800a2e4 <_dtoa_r+0x644>
 800a092:	f1bb 0f0e 	cmp.w	fp, #14
 800a096:	f300 8125 	bgt.w	800a2e4 <_dtoa_r+0x644>
 800a09a:	4b90      	ldr	r3, [pc, #576]	; (800a2dc <_dtoa_r+0x63c>)
 800a09c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a0a0:	ed93 6b00 	vldr	d6, [r3]
 800a0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	f280 80c3 	bge.w	800a232 <_dtoa_r+0x592>
 800a0ac:	f1b9 0f00 	cmp.w	r9, #0
 800a0b0:	f300 80bf 	bgt.w	800a232 <_dtoa_r+0x592>
 800a0b4:	f040 824c 	bne.w	800a550 <_dtoa_r+0x8b0>
 800a0b8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a0bc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a0c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0cc:	464c      	mov	r4, r9
 800a0ce:	464f      	mov	r7, r9
 800a0d0:	f280 8222 	bge.w	800a518 <_dtoa_r+0x878>
 800a0d4:	f8dd 8000 	ldr.w	r8, [sp]
 800a0d8:	2331      	movs	r3, #49	; 0x31
 800a0da:	f808 3b01 	strb.w	r3, [r8], #1
 800a0de:	f10b 0b01 	add.w	fp, fp, #1
 800a0e2:	e21e      	b.n	800a522 <_dtoa_r+0x882>
 800a0e4:	2202      	movs	r2, #2
 800a0e6:	e77c      	b.n	8009fe2 <_dtoa_r+0x342>
 800a0e8:	07cc      	lsls	r4, r1, #31
 800a0ea:	d504      	bpl.n	800a0f6 <_dtoa_r+0x456>
 800a0ec:	ed90 6b00 	vldr	d6, [r0]
 800a0f0:	3201      	adds	r2, #1
 800a0f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a0f6:	1049      	asrs	r1, r1, #1
 800a0f8:	3008      	adds	r0, #8
 800a0fa:	e773      	b.n	8009fe4 <_dtoa_r+0x344>
 800a0fc:	d02e      	beq.n	800a15c <_dtoa_r+0x4bc>
 800a0fe:	f1cb 0100 	rsb	r1, fp, #0
 800a102:	4a76      	ldr	r2, [pc, #472]	; (800a2dc <_dtoa_r+0x63c>)
 800a104:	f001 000f 	and.w	r0, r1, #15
 800a108:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a10c:	ed92 7b00 	vldr	d7, [r2]
 800a110:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800a114:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a118:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a11c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800a120:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800a124:	486e      	ldr	r0, [pc, #440]	; (800a2e0 <_dtoa_r+0x640>)
 800a126:	1109      	asrs	r1, r1, #4
 800a128:	2400      	movs	r4, #0
 800a12a:	2202      	movs	r2, #2
 800a12c:	b939      	cbnz	r1, 800a13e <_dtoa_r+0x49e>
 800a12e:	2c00      	cmp	r4, #0
 800a130:	f43f af60 	beq.w	8009ff4 <_dtoa_r+0x354>
 800a134:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a13c:	e75a      	b.n	8009ff4 <_dtoa_r+0x354>
 800a13e:	07cf      	lsls	r7, r1, #31
 800a140:	d509      	bpl.n	800a156 <_dtoa_r+0x4b6>
 800a142:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800a146:	ed90 7b00 	vldr	d7, [r0]
 800a14a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800a14e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800a152:	3201      	adds	r2, #1
 800a154:	2401      	movs	r4, #1
 800a156:	1049      	asrs	r1, r1, #1
 800a158:	3008      	adds	r0, #8
 800a15a:	e7e7      	b.n	800a12c <_dtoa_r+0x48c>
 800a15c:	2202      	movs	r2, #2
 800a15e:	e749      	b.n	8009ff4 <_dtoa_r+0x354>
 800a160:	465f      	mov	r7, fp
 800a162:	4648      	mov	r0, r9
 800a164:	e765      	b.n	800a032 <_dtoa_r+0x392>
 800a166:	ec42 1b17 	vmov	d7, r1, r2
 800a16a:	4a5c      	ldr	r2, [pc, #368]	; (800a2dc <_dtoa_r+0x63c>)
 800a16c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a170:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a174:	9a00      	ldr	r2, [sp, #0]
 800a176:	1814      	adds	r4, r2, r0
 800a178:	9a08      	ldr	r2, [sp, #32]
 800a17a:	b352      	cbz	r2, 800a1d2 <_dtoa_r+0x532>
 800a17c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a180:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a184:	f8dd 8000 	ldr.w	r8, [sp]
 800a188:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a18c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a190:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a194:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a198:	ee14 2a90 	vmov	r2, s9
 800a19c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a1a0:	3230      	adds	r2, #48	; 0x30
 800a1a2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a1a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1ae:	f808 2b01 	strb.w	r2, [r8], #1
 800a1b2:	d439      	bmi.n	800a228 <_dtoa_r+0x588>
 800a1b4:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a1b8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1c0:	d472      	bmi.n	800a2a8 <_dtoa_r+0x608>
 800a1c2:	45a0      	cmp	r8, r4
 800a1c4:	f43f af5d 	beq.w	800a082 <_dtoa_r+0x3e2>
 800a1c8:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a1cc:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a1d0:	e7e0      	b.n	800a194 <_dtoa_r+0x4f4>
 800a1d2:	f8dd 8000 	ldr.w	r8, [sp]
 800a1d6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a1da:	4621      	mov	r1, r4
 800a1dc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a1e0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a1e4:	ee14 2a90 	vmov	r2, s9
 800a1e8:	3230      	adds	r2, #48	; 0x30
 800a1ea:	f808 2b01 	strb.w	r2, [r8], #1
 800a1ee:	45a0      	cmp	r8, r4
 800a1f0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a1f4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a1f8:	d118      	bne.n	800a22c <_dtoa_r+0x58c>
 800a1fa:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a1fe:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a202:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a20a:	dc4d      	bgt.n	800a2a8 <_dtoa_r+0x608>
 800a20c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a210:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a218:	f57f af33 	bpl.w	800a082 <_dtoa_r+0x3e2>
 800a21c:	4688      	mov	r8, r1
 800a21e:	3901      	subs	r1, #1
 800a220:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a224:	2b30      	cmp	r3, #48	; 0x30
 800a226:	d0f9      	beq.n	800a21c <_dtoa_r+0x57c>
 800a228:	46bb      	mov	fp, r7
 800a22a:	e02a      	b.n	800a282 <_dtoa_r+0x5e2>
 800a22c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a230:	e7d6      	b.n	800a1e0 <_dtoa_r+0x540>
 800a232:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a236:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a23a:	f8dd 8000 	ldr.w	r8, [sp]
 800a23e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a242:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a246:	ee15 3a10 	vmov	r3, s10
 800a24a:	3330      	adds	r3, #48	; 0x30
 800a24c:	f808 3b01 	strb.w	r3, [r8], #1
 800a250:	9b00      	ldr	r3, [sp, #0]
 800a252:	eba8 0303 	sub.w	r3, r8, r3
 800a256:	4599      	cmp	r9, r3
 800a258:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a25c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a260:	d133      	bne.n	800a2ca <_dtoa_r+0x62a>
 800a262:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a266:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a26a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a26e:	dc1a      	bgt.n	800a2a6 <_dtoa_r+0x606>
 800a270:	eeb4 7b46 	vcmp.f64	d7, d6
 800a274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a278:	d103      	bne.n	800a282 <_dtoa_r+0x5e2>
 800a27a:	ee15 3a10 	vmov	r3, s10
 800a27e:	07d9      	lsls	r1, r3, #31
 800a280:	d411      	bmi.n	800a2a6 <_dtoa_r+0x606>
 800a282:	4629      	mov	r1, r5
 800a284:	4630      	mov	r0, r6
 800a286:	f001 f887 	bl	800b398 <_Bfree>
 800a28a:	2300      	movs	r3, #0
 800a28c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a28e:	f888 3000 	strb.w	r3, [r8]
 800a292:	f10b 0301 	add.w	r3, fp, #1
 800a296:	6013      	str	r3, [r2, #0]
 800a298:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	f43f ad4d 	beq.w	8009d3a <_dtoa_r+0x9a>
 800a2a0:	f8c3 8000 	str.w	r8, [r3]
 800a2a4:	e549      	b.n	8009d3a <_dtoa_r+0x9a>
 800a2a6:	465f      	mov	r7, fp
 800a2a8:	4643      	mov	r3, r8
 800a2aa:	4698      	mov	r8, r3
 800a2ac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2b0:	2a39      	cmp	r2, #57	; 0x39
 800a2b2:	d106      	bne.n	800a2c2 <_dtoa_r+0x622>
 800a2b4:	9a00      	ldr	r2, [sp, #0]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d1f7      	bne.n	800a2aa <_dtoa_r+0x60a>
 800a2ba:	9900      	ldr	r1, [sp, #0]
 800a2bc:	2230      	movs	r2, #48	; 0x30
 800a2be:	3701      	adds	r7, #1
 800a2c0:	700a      	strb	r2, [r1, #0]
 800a2c2:	781a      	ldrb	r2, [r3, #0]
 800a2c4:	3201      	adds	r2, #1
 800a2c6:	701a      	strb	r2, [r3, #0]
 800a2c8:	e7ae      	b.n	800a228 <_dtoa_r+0x588>
 800a2ca:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a2ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a2d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2d6:	d1b2      	bne.n	800a23e <_dtoa_r+0x59e>
 800a2d8:	e7d3      	b.n	800a282 <_dtoa_r+0x5e2>
 800a2da:	bf00      	nop
 800a2dc:	0800d0e0 	.word	0x0800d0e0
 800a2e0:	0800d0b8 	.word	0x0800d0b8
 800a2e4:	9908      	ldr	r1, [sp, #32]
 800a2e6:	2900      	cmp	r1, #0
 800a2e8:	f000 80d1 	beq.w	800a48e <_dtoa_r+0x7ee>
 800a2ec:	9907      	ldr	r1, [sp, #28]
 800a2ee:	2901      	cmp	r1, #1
 800a2f0:	f300 80b4 	bgt.w	800a45c <_dtoa_r+0x7bc>
 800a2f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a2f6:	2900      	cmp	r1, #0
 800a2f8:	f000 80ac 	beq.w	800a454 <_dtoa_r+0x7b4>
 800a2fc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a300:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a304:	461c      	mov	r4, r3
 800a306:	930a      	str	r3, [sp, #40]	; 0x28
 800a308:	9b05      	ldr	r3, [sp, #20]
 800a30a:	4413      	add	r3, r2
 800a30c:	9305      	str	r3, [sp, #20]
 800a30e:	9b06      	ldr	r3, [sp, #24]
 800a310:	2101      	movs	r1, #1
 800a312:	4413      	add	r3, r2
 800a314:	4630      	mov	r0, r6
 800a316:	9306      	str	r3, [sp, #24]
 800a318:	f001 f944 	bl	800b5a4 <__i2b>
 800a31c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a31e:	4607      	mov	r7, r0
 800a320:	f1b8 0f00 	cmp.w	r8, #0
 800a324:	dd0d      	ble.n	800a342 <_dtoa_r+0x6a2>
 800a326:	9a06      	ldr	r2, [sp, #24]
 800a328:	2a00      	cmp	r2, #0
 800a32a:	dd0a      	ble.n	800a342 <_dtoa_r+0x6a2>
 800a32c:	4542      	cmp	r2, r8
 800a32e:	9905      	ldr	r1, [sp, #20]
 800a330:	bfa8      	it	ge
 800a332:	4642      	movge	r2, r8
 800a334:	1a89      	subs	r1, r1, r2
 800a336:	9105      	str	r1, [sp, #20]
 800a338:	9906      	ldr	r1, [sp, #24]
 800a33a:	eba8 0802 	sub.w	r8, r8, r2
 800a33e:	1a8a      	subs	r2, r1, r2
 800a340:	9206      	str	r2, [sp, #24]
 800a342:	b303      	cbz	r3, 800a386 <_dtoa_r+0x6e6>
 800a344:	9a08      	ldr	r2, [sp, #32]
 800a346:	2a00      	cmp	r2, #0
 800a348:	f000 80a6 	beq.w	800a498 <_dtoa_r+0x7f8>
 800a34c:	2c00      	cmp	r4, #0
 800a34e:	dd13      	ble.n	800a378 <_dtoa_r+0x6d8>
 800a350:	4639      	mov	r1, r7
 800a352:	4622      	mov	r2, r4
 800a354:	4630      	mov	r0, r6
 800a356:	930c      	str	r3, [sp, #48]	; 0x30
 800a358:	f001 f9e0 	bl	800b71c <__pow5mult>
 800a35c:	462a      	mov	r2, r5
 800a35e:	4601      	mov	r1, r0
 800a360:	4607      	mov	r7, r0
 800a362:	4630      	mov	r0, r6
 800a364:	f001 f934 	bl	800b5d0 <__multiply>
 800a368:	4629      	mov	r1, r5
 800a36a:	900a      	str	r0, [sp, #40]	; 0x28
 800a36c:	4630      	mov	r0, r6
 800a36e:	f001 f813 	bl	800b398 <_Bfree>
 800a372:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a374:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a376:	4615      	mov	r5, r2
 800a378:	1b1a      	subs	r2, r3, r4
 800a37a:	d004      	beq.n	800a386 <_dtoa_r+0x6e6>
 800a37c:	4629      	mov	r1, r5
 800a37e:	4630      	mov	r0, r6
 800a380:	f001 f9cc 	bl	800b71c <__pow5mult>
 800a384:	4605      	mov	r5, r0
 800a386:	2101      	movs	r1, #1
 800a388:	4630      	mov	r0, r6
 800a38a:	f001 f90b 	bl	800b5a4 <__i2b>
 800a38e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a390:	2b00      	cmp	r3, #0
 800a392:	4604      	mov	r4, r0
 800a394:	f340 8082 	ble.w	800a49c <_dtoa_r+0x7fc>
 800a398:	461a      	mov	r2, r3
 800a39a:	4601      	mov	r1, r0
 800a39c:	4630      	mov	r0, r6
 800a39e:	f001 f9bd 	bl	800b71c <__pow5mult>
 800a3a2:	9b07      	ldr	r3, [sp, #28]
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	dd7b      	ble.n	800a4a2 <_dtoa_r+0x802>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	930a      	str	r3, [sp, #40]	; 0x28
 800a3ae:	6922      	ldr	r2, [r4, #16]
 800a3b0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a3b4:	6910      	ldr	r0, [r2, #16]
 800a3b6:	f001 f8a5 	bl	800b504 <__hi0bits>
 800a3ba:	f1c0 0020 	rsb	r0, r0, #32
 800a3be:	9b06      	ldr	r3, [sp, #24]
 800a3c0:	4418      	add	r0, r3
 800a3c2:	f010 001f 	ands.w	r0, r0, #31
 800a3c6:	f000 808d 	beq.w	800a4e4 <_dtoa_r+0x844>
 800a3ca:	f1c0 0220 	rsb	r2, r0, #32
 800a3ce:	2a04      	cmp	r2, #4
 800a3d0:	f340 8086 	ble.w	800a4e0 <_dtoa_r+0x840>
 800a3d4:	f1c0 001c 	rsb	r0, r0, #28
 800a3d8:	9b05      	ldr	r3, [sp, #20]
 800a3da:	4403      	add	r3, r0
 800a3dc:	9305      	str	r3, [sp, #20]
 800a3de:	9b06      	ldr	r3, [sp, #24]
 800a3e0:	4403      	add	r3, r0
 800a3e2:	4480      	add	r8, r0
 800a3e4:	9306      	str	r3, [sp, #24]
 800a3e6:	9b05      	ldr	r3, [sp, #20]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	dd05      	ble.n	800a3f8 <_dtoa_r+0x758>
 800a3ec:	4629      	mov	r1, r5
 800a3ee:	461a      	mov	r2, r3
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	f001 f9ed 	bl	800b7d0 <__lshift>
 800a3f6:	4605      	mov	r5, r0
 800a3f8:	9b06      	ldr	r3, [sp, #24]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	dd05      	ble.n	800a40a <_dtoa_r+0x76a>
 800a3fe:	4621      	mov	r1, r4
 800a400:	461a      	mov	r2, r3
 800a402:	4630      	mov	r0, r6
 800a404:	f001 f9e4 	bl	800b7d0 <__lshift>
 800a408:	4604      	mov	r4, r0
 800a40a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d06b      	beq.n	800a4e8 <_dtoa_r+0x848>
 800a410:	4621      	mov	r1, r4
 800a412:	4628      	mov	r0, r5
 800a414:	f001 fa48 	bl	800b8a8 <__mcmp>
 800a418:	2800      	cmp	r0, #0
 800a41a:	da65      	bge.n	800a4e8 <_dtoa_r+0x848>
 800a41c:	2300      	movs	r3, #0
 800a41e:	4629      	mov	r1, r5
 800a420:	220a      	movs	r2, #10
 800a422:	4630      	mov	r0, r6
 800a424:	f000 ffda 	bl	800b3dc <__multadd>
 800a428:	9b08      	ldr	r3, [sp, #32]
 800a42a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a42e:	4605      	mov	r5, r0
 800a430:	2b00      	cmp	r3, #0
 800a432:	f000 8192 	beq.w	800a75a <_dtoa_r+0xaba>
 800a436:	4639      	mov	r1, r7
 800a438:	2300      	movs	r3, #0
 800a43a:	220a      	movs	r2, #10
 800a43c:	4630      	mov	r0, r6
 800a43e:	f000 ffcd 	bl	800b3dc <__multadd>
 800a442:	f1ba 0f00 	cmp.w	sl, #0
 800a446:	4607      	mov	r7, r0
 800a448:	f300 808e 	bgt.w	800a568 <_dtoa_r+0x8c8>
 800a44c:	9b07      	ldr	r3, [sp, #28]
 800a44e:	2b02      	cmp	r3, #2
 800a450:	dc51      	bgt.n	800a4f6 <_dtoa_r+0x856>
 800a452:	e089      	b.n	800a568 <_dtoa_r+0x8c8>
 800a454:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a456:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a45a:	e751      	b.n	800a300 <_dtoa_r+0x660>
 800a45c:	f109 34ff 	add.w	r4, r9, #4294967295
 800a460:	42a3      	cmp	r3, r4
 800a462:	bfbf      	itttt	lt
 800a464:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a466:	1ae3      	sublt	r3, r4, r3
 800a468:	18d2      	addlt	r2, r2, r3
 800a46a:	4613      	movlt	r3, r2
 800a46c:	bfb7      	itett	lt
 800a46e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a470:	1b1c      	subge	r4, r3, r4
 800a472:	4623      	movlt	r3, r4
 800a474:	2400      	movlt	r4, #0
 800a476:	f1b9 0f00 	cmp.w	r9, #0
 800a47a:	bfb5      	itete	lt
 800a47c:	9a05      	ldrlt	r2, [sp, #20]
 800a47e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800a482:	eba2 0809 	sublt.w	r8, r2, r9
 800a486:	464a      	movge	r2, r9
 800a488:	bfb8      	it	lt
 800a48a:	2200      	movlt	r2, #0
 800a48c:	e73b      	b.n	800a306 <_dtoa_r+0x666>
 800a48e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a492:	9f08      	ldr	r7, [sp, #32]
 800a494:	461c      	mov	r4, r3
 800a496:	e743      	b.n	800a320 <_dtoa_r+0x680>
 800a498:	461a      	mov	r2, r3
 800a49a:	e76f      	b.n	800a37c <_dtoa_r+0x6dc>
 800a49c:	9b07      	ldr	r3, [sp, #28]
 800a49e:	2b01      	cmp	r3, #1
 800a4a0:	dc18      	bgt.n	800a4d4 <_dtoa_r+0x834>
 800a4a2:	9b02      	ldr	r3, [sp, #8]
 800a4a4:	b9b3      	cbnz	r3, 800a4d4 <_dtoa_r+0x834>
 800a4a6:	9b03      	ldr	r3, [sp, #12]
 800a4a8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a4ac:	b9a2      	cbnz	r2, 800a4d8 <_dtoa_r+0x838>
 800a4ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a4b2:	0d12      	lsrs	r2, r2, #20
 800a4b4:	0512      	lsls	r2, r2, #20
 800a4b6:	b18a      	cbz	r2, 800a4dc <_dtoa_r+0x83c>
 800a4b8:	9b05      	ldr	r3, [sp, #20]
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	9305      	str	r3, [sp, #20]
 800a4be:	9b06      	ldr	r3, [sp, #24]
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	9306      	str	r3, [sp, #24]
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	930a      	str	r3, [sp, #40]	; 0x28
 800a4c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	f47f af6f 	bne.w	800a3ae <_dtoa_r+0x70e>
 800a4d0:	2001      	movs	r0, #1
 800a4d2:	e774      	b.n	800a3be <_dtoa_r+0x71e>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	e7f6      	b.n	800a4c6 <_dtoa_r+0x826>
 800a4d8:	9b02      	ldr	r3, [sp, #8]
 800a4da:	e7f4      	b.n	800a4c6 <_dtoa_r+0x826>
 800a4dc:	920a      	str	r2, [sp, #40]	; 0x28
 800a4de:	e7f3      	b.n	800a4c8 <_dtoa_r+0x828>
 800a4e0:	d081      	beq.n	800a3e6 <_dtoa_r+0x746>
 800a4e2:	4610      	mov	r0, r2
 800a4e4:	301c      	adds	r0, #28
 800a4e6:	e777      	b.n	800a3d8 <_dtoa_r+0x738>
 800a4e8:	f1b9 0f00 	cmp.w	r9, #0
 800a4ec:	dc37      	bgt.n	800a55e <_dtoa_r+0x8be>
 800a4ee:	9b07      	ldr	r3, [sp, #28]
 800a4f0:	2b02      	cmp	r3, #2
 800a4f2:	dd34      	ble.n	800a55e <_dtoa_r+0x8be>
 800a4f4:	46ca      	mov	sl, r9
 800a4f6:	f1ba 0f00 	cmp.w	sl, #0
 800a4fa:	d10d      	bne.n	800a518 <_dtoa_r+0x878>
 800a4fc:	4621      	mov	r1, r4
 800a4fe:	4653      	mov	r3, sl
 800a500:	2205      	movs	r2, #5
 800a502:	4630      	mov	r0, r6
 800a504:	f000 ff6a 	bl	800b3dc <__multadd>
 800a508:	4601      	mov	r1, r0
 800a50a:	4604      	mov	r4, r0
 800a50c:	4628      	mov	r0, r5
 800a50e:	f001 f9cb 	bl	800b8a8 <__mcmp>
 800a512:	2800      	cmp	r0, #0
 800a514:	f73f adde 	bgt.w	800a0d4 <_dtoa_r+0x434>
 800a518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a51a:	f8dd 8000 	ldr.w	r8, [sp]
 800a51e:	ea6f 0b03 	mvn.w	fp, r3
 800a522:	f04f 0900 	mov.w	r9, #0
 800a526:	4621      	mov	r1, r4
 800a528:	4630      	mov	r0, r6
 800a52a:	f000 ff35 	bl	800b398 <_Bfree>
 800a52e:	2f00      	cmp	r7, #0
 800a530:	f43f aea7 	beq.w	800a282 <_dtoa_r+0x5e2>
 800a534:	f1b9 0f00 	cmp.w	r9, #0
 800a538:	d005      	beq.n	800a546 <_dtoa_r+0x8a6>
 800a53a:	45b9      	cmp	r9, r7
 800a53c:	d003      	beq.n	800a546 <_dtoa_r+0x8a6>
 800a53e:	4649      	mov	r1, r9
 800a540:	4630      	mov	r0, r6
 800a542:	f000 ff29 	bl	800b398 <_Bfree>
 800a546:	4639      	mov	r1, r7
 800a548:	4630      	mov	r0, r6
 800a54a:	f000 ff25 	bl	800b398 <_Bfree>
 800a54e:	e698      	b.n	800a282 <_dtoa_r+0x5e2>
 800a550:	2400      	movs	r4, #0
 800a552:	4627      	mov	r7, r4
 800a554:	e7e0      	b.n	800a518 <_dtoa_r+0x878>
 800a556:	46bb      	mov	fp, r7
 800a558:	4604      	mov	r4, r0
 800a55a:	4607      	mov	r7, r0
 800a55c:	e5ba      	b.n	800a0d4 <_dtoa_r+0x434>
 800a55e:	9b08      	ldr	r3, [sp, #32]
 800a560:	46ca      	mov	sl, r9
 800a562:	2b00      	cmp	r3, #0
 800a564:	f000 8100 	beq.w	800a768 <_dtoa_r+0xac8>
 800a568:	f1b8 0f00 	cmp.w	r8, #0
 800a56c:	dd05      	ble.n	800a57a <_dtoa_r+0x8da>
 800a56e:	4639      	mov	r1, r7
 800a570:	4642      	mov	r2, r8
 800a572:	4630      	mov	r0, r6
 800a574:	f001 f92c 	bl	800b7d0 <__lshift>
 800a578:	4607      	mov	r7, r0
 800a57a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d05d      	beq.n	800a63c <_dtoa_r+0x99c>
 800a580:	6879      	ldr	r1, [r7, #4]
 800a582:	4630      	mov	r0, r6
 800a584:	f000 fec8 	bl	800b318 <_Balloc>
 800a588:	4680      	mov	r8, r0
 800a58a:	b928      	cbnz	r0, 800a598 <_dtoa_r+0x8f8>
 800a58c:	4b82      	ldr	r3, [pc, #520]	; (800a798 <_dtoa_r+0xaf8>)
 800a58e:	4602      	mov	r2, r0
 800a590:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a594:	f7ff bb9a 	b.w	8009ccc <_dtoa_r+0x2c>
 800a598:	693a      	ldr	r2, [r7, #16]
 800a59a:	3202      	adds	r2, #2
 800a59c:	0092      	lsls	r2, r2, #2
 800a59e:	f107 010c 	add.w	r1, r7, #12
 800a5a2:	300c      	adds	r0, #12
 800a5a4:	f000 feaa 	bl	800b2fc <memcpy>
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	4641      	mov	r1, r8
 800a5ac:	4630      	mov	r0, r6
 800a5ae:	f001 f90f 	bl	800b7d0 <__lshift>
 800a5b2:	9b00      	ldr	r3, [sp, #0]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	9305      	str	r3, [sp, #20]
 800a5b8:	9b00      	ldr	r3, [sp, #0]
 800a5ba:	4453      	add	r3, sl
 800a5bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a5be:	9b02      	ldr	r3, [sp, #8]
 800a5c0:	f003 0301 	and.w	r3, r3, #1
 800a5c4:	46b9      	mov	r9, r7
 800a5c6:	9308      	str	r3, [sp, #32]
 800a5c8:	4607      	mov	r7, r0
 800a5ca:	9b05      	ldr	r3, [sp, #20]
 800a5cc:	4621      	mov	r1, r4
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	9302      	str	r3, [sp, #8]
 800a5d4:	f7ff fad6 	bl	8009b84 <quorem>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	3330      	adds	r3, #48	; 0x30
 800a5dc:	9006      	str	r0, [sp, #24]
 800a5de:	4649      	mov	r1, r9
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	930a      	str	r3, [sp, #40]	; 0x28
 800a5e4:	f001 f960 	bl	800b8a8 <__mcmp>
 800a5e8:	463a      	mov	r2, r7
 800a5ea:	4682      	mov	sl, r0
 800a5ec:	4621      	mov	r1, r4
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	f001 f976 	bl	800b8e0 <__mdiff>
 800a5f4:	68c2      	ldr	r2, [r0, #12]
 800a5f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5f8:	4680      	mov	r8, r0
 800a5fa:	bb0a      	cbnz	r2, 800a640 <_dtoa_r+0x9a0>
 800a5fc:	4601      	mov	r1, r0
 800a5fe:	4628      	mov	r0, r5
 800a600:	f001 f952 	bl	800b8a8 <__mcmp>
 800a604:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a606:	4602      	mov	r2, r0
 800a608:	4641      	mov	r1, r8
 800a60a:	4630      	mov	r0, r6
 800a60c:	920e      	str	r2, [sp, #56]	; 0x38
 800a60e:	930a      	str	r3, [sp, #40]	; 0x28
 800a610:	f000 fec2 	bl	800b398 <_Bfree>
 800a614:	9b07      	ldr	r3, [sp, #28]
 800a616:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a618:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800a61c:	ea43 0102 	orr.w	r1, r3, r2
 800a620:	9b08      	ldr	r3, [sp, #32]
 800a622:	430b      	orrs	r3, r1
 800a624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a626:	d10d      	bne.n	800a644 <_dtoa_r+0x9a4>
 800a628:	2b39      	cmp	r3, #57	; 0x39
 800a62a:	d029      	beq.n	800a680 <_dtoa_r+0x9e0>
 800a62c:	f1ba 0f00 	cmp.w	sl, #0
 800a630:	dd01      	ble.n	800a636 <_dtoa_r+0x996>
 800a632:	9b06      	ldr	r3, [sp, #24]
 800a634:	3331      	adds	r3, #49	; 0x31
 800a636:	9a02      	ldr	r2, [sp, #8]
 800a638:	7013      	strb	r3, [r2, #0]
 800a63a:	e774      	b.n	800a526 <_dtoa_r+0x886>
 800a63c:	4638      	mov	r0, r7
 800a63e:	e7b8      	b.n	800a5b2 <_dtoa_r+0x912>
 800a640:	2201      	movs	r2, #1
 800a642:	e7e1      	b.n	800a608 <_dtoa_r+0x968>
 800a644:	f1ba 0f00 	cmp.w	sl, #0
 800a648:	db06      	blt.n	800a658 <_dtoa_r+0x9b8>
 800a64a:	9907      	ldr	r1, [sp, #28]
 800a64c:	ea41 0a0a 	orr.w	sl, r1, sl
 800a650:	9908      	ldr	r1, [sp, #32]
 800a652:	ea5a 0101 	orrs.w	r1, sl, r1
 800a656:	d120      	bne.n	800a69a <_dtoa_r+0x9fa>
 800a658:	2a00      	cmp	r2, #0
 800a65a:	ddec      	ble.n	800a636 <_dtoa_r+0x996>
 800a65c:	4629      	mov	r1, r5
 800a65e:	2201      	movs	r2, #1
 800a660:	4630      	mov	r0, r6
 800a662:	9305      	str	r3, [sp, #20]
 800a664:	f001 f8b4 	bl	800b7d0 <__lshift>
 800a668:	4621      	mov	r1, r4
 800a66a:	4605      	mov	r5, r0
 800a66c:	f001 f91c 	bl	800b8a8 <__mcmp>
 800a670:	2800      	cmp	r0, #0
 800a672:	9b05      	ldr	r3, [sp, #20]
 800a674:	dc02      	bgt.n	800a67c <_dtoa_r+0x9dc>
 800a676:	d1de      	bne.n	800a636 <_dtoa_r+0x996>
 800a678:	07da      	lsls	r2, r3, #31
 800a67a:	d5dc      	bpl.n	800a636 <_dtoa_r+0x996>
 800a67c:	2b39      	cmp	r3, #57	; 0x39
 800a67e:	d1d8      	bne.n	800a632 <_dtoa_r+0x992>
 800a680:	9a02      	ldr	r2, [sp, #8]
 800a682:	2339      	movs	r3, #57	; 0x39
 800a684:	7013      	strb	r3, [r2, #0]
 800a686:	4643      	mov	r3, r8
 800a688:	4698      	mov	r8, r3
 800a68a:	3b01      	subs	r3, #1
 800a68c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a690:	2a39      	cmp	r2, #57	; 0x39
 800a692:	d051      	beq.n	800a738 <_dtoa_r+0xa98>
 800a694:	3201      	adds	r2, #1
 800a696:	701a      	strb	r2, [r3, #0]
 800a698:	e745      	b.n	800a526 <_dtoa_r+0x886>
 800a69a:	2a00      	cmp	r2, #0
 800a69c:	dd03      	ble.n	800a6a6 <_dtoa_r+0xa06>
 800a69e:	2b39      	cmp	r3, #57	; 0x39
 800a6a0:	d0ee      	beq.n	800a680 <_dtoa_r+0x9e0>
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	e7c7      	b.n	800a636 <_dtoa_r+0x996>
 800a6a6:	9a05      	ldr	r2, [sp, #20]
 800a6a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a6aa:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a6ae:	428a      	cmp	r2, r1
 800a6b0:	d02b      	beq.n	800a70a <_dtoa_r+0xa6a>
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	220a      	movs	r2, #10
 800a6b8:	4630      	mov	r0, r6
 800a6ba:	f000 fe8f 	bl	800b3dc <__multadd>
 800a6be:	45b9      	cmp	r9, r7
 800a6c0:	4605      	mov	r5, r0
 800a6c2:	f04f 0300 	mov.w	r3, #0
 800a6c6:	f04f 020a 	mov.w	r2, #10
 800a6ca:	4649      	mov	r1, r9
 800a6cc:	4630      	mov	r0, r6
 800a6ce:	d107      	bne.n	800a6e0 <_dtoa_r+0xa40>
 800a6d0:	f000 fe84 	bl	800b3dc <__multadd>
 800a6d4:	4681      	mov	r9, r0
 800a6d6:	4607      	mov	r7, r0
 800a6d8:	9b05      	ldr	r3, [sp, #20]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	9305      	str	r3, [sp, #20]
 800a6de:	e774      	b.n	800a5ca <_dtoa_r+0x92a>
 800a6e0:	f000 fe7c 	bl	800b3dc <__multadd>
 800a6e4:	4639      	mov	r1, r7
 800a6e6:	4681      	mov	r9, r0
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	220a      	movs	r2, #10
 800a6ec:	4630      	mov	r0, r6
 800a6ee:	f000 fe75 	bl	800b3dc <__multadd>
 800a6f2:	4607      	mov	r7, r0
 800a6f4:	e7f0      	b.n	800a6d8 <_dtoa_r+0xa38>
 800a6f6:	f1ba 0f00 	cmp.w	sl, #0
 800a6fa:	9a00      	ldr	r2, [sp, #0]
 800a6fc:	bfcc      	ite	gt
 800a6fe:	46d0      	movgt	r8, sl
 800a700:	f04f 0801 	movle.w	r8, #1
 800a704:	4490      	add	r8, r2
 800a706:	f04f 0900 	mov.w	r9, #0
 800a70a:	4629      	mov	r1, r5
 800a70c:	2201      	movs	r2, #1
 800a70e:	4630      	mov	r0, r6
 800a710:	9302      	str	r3, [sp, #8]
 800a712:	f001 f85d 	bl	800b7d0 <__lshift>
 800a716:	4621      	mov	r1, r4
 800a718:	4605      	mov	r5, r0
 800a71a:	f001 f8c5 	bl	800b8a8 <__mcmp>
 800a71e:	2800      	cmp	r0, #0
 800a720:	dcb1      	bgt.n	800a686 <_dtoa_r+0x9e6>
 800a722:	d102      	bne.n	800a72a <_dtoa_r+0xa8a>
 800a724:	9b02      	ldr	r3, [sp, #8]
 800a726:	07db      	lsls	r3, r3, #31
 800a728:	d4ad      	bmi.n	800a686 <_dtoa_r+0x9e6>
 800a72a:	4643      	mov	r3, r8
 800a72c:	4698      	mov	r8, r3
 800a72e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a732:	2a30      	cmp	r2, #48	; 0x30
 800a734:	d0fa      	beq.n	800a72c <_dtoa_r+0xa8c>
 800a736:	e6f6      	b.n	800a526 <_dtoa_r+0x886>
 800a738:	9a00      	ldr	r2, [sp, #0]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d1a4      	bne.n	800a688 <_dtoa_r+0x9e8>
 800a73e:	f10b 0b01 	add.w	fp, fp, #1
 800a742:	2331      	movs	r3, #49	; 0x31
 800a744:	e778      	b.n	800a638 <_dtoa_r+0x998>
 800a746:	4b15      	ldr	r3, [pc, #84]	; (800a79c <_dtoa_r+0xafc>)
 800a748:	f7ff bb12 	b.w	8009d70 <_dtoa_r+0xd0>
 800a74c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f47f aaee 	bne.w	8009d30 <_dtoa_r+0x90>
 800a754:	4b12      	ldr	r3, [pc, #72]	; (800a7a0 <_dtoa_r+0xb00>)
 800a756:	f7ff bb0b 	b.w	8009d70 <_dtoa_r+0xd0>
 800a75a:	f1ba 0f00 	cmp.w	sl, #0
 800a75e:	dc03      	bgt.n	800a768 <_dtoa_r+0xac8>
 800a760:	9b07      	ldr	r3, [sp, #28]
 800a762:	2b02      	cmp	r3, #2
 800a764:	f73f aec7 	bgt.w	800a4f6 <_dtoa_r+0x856>
 800a768:	f8dd 8000 	ldr.w	r8, [sp]
 800a76c:	4621      	mov	r1, r4
 800a76e:	4628      	mov	r0, r5
 800a770:	f7ff fa08 	bl	8009b84 <quorem>
 800a774:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a778:	f808 3b01 	strb.w	r3, [r8], #1
 800a77c:	9a00      	ldr	r2, [sp, #0]
 800a77e:	eba8 0202 	sub.w	r2, r8, r2
 800a782:	4592      	cmp	sl, r2
 800a784:	ddb7      	ble.n	800a6f6 <_dtoa_r+0xa56>
 800a786:	4629      	mov	r1, r5
 800a788:	2300      	movs	r3, #0
 800a78a:	220a      	movs	r2, #10
 800a78c:	4630      	mov	r0, r6
 800a78e:	f000 fe25 	bl	800b3dc <__multadd>
 800a792:	4605      	mov	r5, r0
 800a794:	e7ea      	b.n	800a76c <_dtoa_r+0xacc>
 800a796:	bf00      	nop
 800a798:	0800cf64 	.word	0x0800cf64
 800a79c:	0800cd60 	.word	0x0800cd60
 800a7a0:	0800cee1 	.word	0x0800cee1

0800a7a4 <__sflush_r>:
 800a7a4:	898a      	ldrh	r2, [r1, #12]
 800a7a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7aa:	4605      	mov	r5, r0
 800a7ac:	0710      	lsls	r0, r2, #28
 800a7ae:	460c      	mov	r4, r1
 800a7b0:	d458      	bmi.n	800a864 <__sflush_r+0xc0>
 800a7b2:	684b      	ldr	r3, [r1, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	dc05      	bgt.n	800a7c4 <__sflush_r+0x20>
 800a7b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	dc02      	bgt.n	800a7c4 <__sflush_r+0x20>
 800a7be:	2000      	movs	r0, #0
 800a7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7c6:	2e00      	cmp	r6, #0
 800a7c8:	d0f9      	beq.n	800a7be <__sflush_r+0x1a>
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a7d0:	682f      	ldr	r7, [r5, #0]
 800a7d2:	602b      	str	r3, [r5, #0]
 800a7d4:	d032      	beq.n	800a83c <__sflush_r+0x98>
 800a7d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a7d8:	89a3      	ldrh	r3, [r4, #12]
 800a7da:	075a      	lsls	r2, r3, #29
 800a7dc:	d505      	bpl.n	800a7ea <__sflush_r+0x46>
 800a7de:	6863      	ldr	r3, [r4, #4]
 800a7e0:	1ac0      	subs	r0, r0, r3
 800a7e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7e4:	b10b      	cbz	r3, 800a7ea <__sflush_r+0x46>
 800a7e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a7e8:	1ac0      	subs	r0, r0, r3
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	4602      	mov	r2, r0
 800a7ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7f0:	6a21      	ldr	r1, [r4, #32]
 800a7f2:	4628      	mov	r0, r5
 800a7f4:	47b0      	blx	r6
 800a7f6:	1c43      	adds	r3, r0, #1
 800a7f8:	89a3      	ldrh	r3, [r4, #12]
 800a7fa:	d106      	bne.n	800a80a <__sflush_r+0x66>
 800a7fc:	6829      	ldr	r1, [r5, #0]
 800a7fe:	291d      	cmp	r1, #29
 800a800:	d82c      	bhi.n	800a85c <__sflush_r+0xb8>
 800a802:	4a2a      	ldr	r2, [pc, #168]	; (800a8ac <__sflush_r+0x108>)
 800a804:	40ca      	lsrs	r2, r1
 800a806:	07d6      	lsls	r6, r2, #31
 800a808:	d528      	bpl.n	800a85c <__sflush_r+0xb8>
 800a80a:	2200      	movs	r2, #0
 800a80c:	6062      	str	r2, [r4, #4]
 800a80e:	04d9      	lsls	r1, r3, #19
 800a810:	6922      	ldr	r2, [r4, #16]
 800a812:	6022      	str	r2, [r4, #0]
 800a814:	d504      	bpl.n	800a820 <__sflush_r+0x7c>
 800a816:	1c42      	adds	r2, r0, #1
 800a818:	d101      	bne.n	800a81e <__sflush_r+0x7a>
 800a81a:	682b      	ldr	r3, [r5, #0]
 800a81c:	b903      	cbnz	r3, 800a820 <__sflush_r+0x7c>
 800a81e:	6560      	str	r0, [r4, #84]	; 0x54
 800a820:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a822:	602f      	str	r7, [r5, #0]
 800a824:	2900      	cmp	r1, #0
 800a826:	d0ca      	beq.n	800a7be <__sflush_r+0x1a>
 800a828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a82c:	4299      	cmp	r1, r3
 800a82e:	d002      	beq.n	800a836 <__sflush_r+0x92>
 800a830:	4628      	mov	r0, r5
 800a832:	f001 fa3d 	bl	800bcb0 <_free_r>
 800a836:	2000      	movs	r0, #0
 800a838:	6360      	str	r0, [r4, #52]	; 0x34
 800a83a:	e7c1      	b.n	800a7c0 <__sflush_r+0x1c>
 800a83c:	6a21      	ldr	r1, [r4, #32]
 800a83e:	2301      	movs	r3, #1
 800a840:	4628      	mov	r0, r5
 800a842:	47b0      	blx	r6
 800a844:	1c41      	adds	r1, r0, #1
 800a846:	d1c7      	bne.n	800a7d8 <__sflush_r+0x34>
 800a848:	682b      	ldr	r3, [r5, #0]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d0c4      	beq.n	800a7d8 <__sflush_r+0x34>
 800a84e:	2b1d      	cmp	r3, #29
 800a850:	d001      	beq.n	800a856 <__sflush_r+0xb2>
 800a852:	2b16      	cmp	r3, #22
 800a854:	d101      	bne.n	800a85a <__sflush_r+0xb6>
 800a856:	602f      	str	r7, [r5, #0]
 800a858:	e7b1      	b.n	800a7be <__sflush_r+0x1a>
 800a85a:	89a3      	ldrh	r3, [r4, #12]
 800a85c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a860:	81a3      	strh	r3, [r4, #12]
 800a862:	e7ad      	b.n	800a7c0 <__sflush_r+0x1c>
 800a864:	690f      	ldr	r7, [r1, #16]
 800a866:	2f00      	cmp	r7, #0
 800a868:	d0a9      	beq.n	800a7be <__sflush_r+0x1a>
 800a86a:	0793      	lsls	r3, r2, #30
 800a86c:	680e      	ldr	r6, [r1, #0]
 800a86e:	bf08      	it	eq
 800a870:	694b      	ldreq	r3, [r1, #20]
 800a872:	600f      	str	r7, [r1, #0]
 800a874:	bf18      	it	ne
 800a876:	2300      	movne	r3, #0
 800a878:	eba6 0807 	sub.w	r8, r6, r7
 800a87c:	608b      	str	r3, [r1, #8]
 800a87e:	f1b8 0f00 	cmp.w	r8, #0
 800a882:	dd9c      	ble.n	800a7be <__sflush_r+0x1a>
 800a884:	6a21      	ldr	r1, [r4, #32]
 800a886:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a888:	4643      	mov	r3, r8
 800a88a:	463a      	mov	r2, r7
 800a88c:	4628      	mov	r0, r5
 800a88e:	47b0      	blx	r6
 800a890:	2800      	cmp	r0, #0
 800a892:	dc06      	bgt.n	800a8a2 <__sflush_r+0xfe>
 800a894:	89a3      	ldrh	r3, [r4, #12]
 800a896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a89a:	81a3      	strh	r3, [r4, #12]
 800a89c:	f04f 30ff 	mov.w	r0, #4294967295
 800a8a0:	e78e      	b.n	800a7c0 <__sflush_r+0x1c>
 800a8a2:	4407      	add	r7, r0
 800a8a4:	eba8 0800 	sub.w	r8, r8, r0
 800a8a8:	e7e9      	b.n	800a87e <__sflush_r+0xda>
 800a8aa:	bf00      	nop
 800a8ac:	20400001 	.word	0x20400001

0800a8b0 <_fflush_r>:
 800a8b0:	b538      	push	{r3, r4, r5, lr}
 800a8b2:	690b      	ldr	r3, [r1, #16]
 800a8b4:	4605      	mov	r5, r0
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	b913      	cbnz	r3, 800a8c0 <_fflush_r+0x10>
 800a8ba:	2500      	movs	r5, #0
 800a8bc:	4628      	mov	r0, r5
 800a8be:	bd38      	pop	{r3, r4, r5, pc}
 800a8c0:	b118      	cbz	r0, 800a8ca <_fflush_r+0x1a>
 800a8c2:	6983      	ldr	r3, [r0, #24]
 800a8c4:	b90b      	cbnz	r3, 800a8ca <_fflush_r+0x1a>
 800a8c6:	f000 f887 	bl	800a9d8 <__sinit>
 800a8ca:	4b14      	ldr	r3, [pc, #80]	; (800a91c <_fflush_r+0x6c>)
 800a8cc:	429c      	cmp	r4, r3
 800a8ce:	d11b      	bne.n	800a908 <_fflush_r+0x58>
 800a8d0:	686c      	ldr	r4, [r5, #4]
 800a8d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d0ef      	beq.n	800a8ba <_fflush_r+0xa>
 800a8da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a8dc:	07d0      	lsls	r0, r2, #31
 800a8de:	d404      	bmi.n	800a8ea <_fflush_r+0x3a>
 800a8e0:	0599      	lsls	r1, r3, #22
 800a8e2:	d402      	bmi.n	800a8ea <_fflush_r+0x3a>
 800a8e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a8e6:	f000 fc88 	bl	800b1fa <__retarget_lock_acquire_recursive>
 800a8ea:	4628      	mov	r0, r5
 800a8ec:	4621      	mov	r1, r4
 800a8ee:	f7ff ff59 	bl	800a7a4 <__sflush_r>
 800a8f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a8f4:	07da      	lsls	r2, r3, #31
 800a8f6:	4605      	mov	r5, r0
 800a8f8:	d4e0      	bmi.n	800a8bc <_fflush_r+0xc>
 800a8fa:	89a3      	ldrh	r3, [r4, #12]
 800a8fc:	059b      	lsls	r3, r3, #22
 800a8fe:	d4dd      	bmi.n	800a8bc <_fflush_r+0xc>
 800a900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a902:	f000 fc7b 	bl	800b1fc <__retarget_lock_release_recursive>
 800a906:	e7d9      	b.n	800a8bc <_fflush_r+0xc>
 800a908:	4b05      	ldr	r3, [pc, #20]	; (800a920 <_fflush_r+0x70>)
 800a90a:	429c      	cmp	r4, r3
 800a90c:	d101      	bne.n	800a912 <_fflush_r+0x62>
 800a90e:	68ac      	ldr	r4, [r5, #8]
 800a910:	e7df      	b.n	800a8d2 <_fflush_r+0x22>
 800a912:	4b04      	ldr	r3, [pc, #16]	; (800a924 <_fflush_r+0x74>)
 800a914:	429c      	cmp	r4, r3
 800a916:	bf08      	it	eq
 800a918:	68ec      	ldreq	r4, [r5, #12]
 800a91a:	e7da      	b.n	800a8d2 <_fflush_r+0x22>
 800a91c:	0800cf98 	.word	0x0800cf98
 800a920:	0800cfb8 	.word	0x0800cfb8
 800a924:	0800cf78 	.word	0x0800cf78

0800a928 <std>:
 800a928:	2300      	movs	r3, #0
 800a92a:	b510      	push	{r4, lr}
 800a92c:	4604      	mov	r4, r0
 800a92e:	e9c0 3300 	strd	r3, r3, [r0]
 800a932:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a936:	6083      	str	r3, [r0, #8]
 800a938:	8181      	strh	r1, [r0, #12]
 800a93a:	6643      	str	r3, [r0, #100]	; 0x64
 800a93c:	81c2      	strh	r2, [r0, #14]
 800a93e:	6183      	str	r3, [r0, #24]
 800a940:	4619      	mov	r1, r3
 800a942:	2208      	movs	r2, #8
 800a944:	305c      	adds	r0, #92	; 0x5c
 800a946:	f7fd fac5 	bl	8007ed4 <memset>
 800a94a:	4b05      	ldr	r3, [pc, #20]	; (800a960 <std+0x38>)
 800a94c:	6263      	str	r3, [r4, #36]	; 0x24
 800a94e:	4b05      	ldr	r3, [pc, #20]	; (800a964 <std+0x3c>)
 800a950:	62a3      	str	r3, [r4, #40]	; 0x28
 800a952:	4b05      	ldr	r3, [pc, #20]	; (800a968 <std+0x40>)
 800a954:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a956:	4b05      	ldr	r3, [pc, #20]	; (800a96c <std+0x44>)
 800a958:	6224      	str	r4, [r4, #32]
 800a95a:	6323      	str	r3, [r4, #48]	; 0x30
 800a95c:	bd10      	pop	{r4, pc}
 800a95e:	bf00      	nop
 800a960:	0800c431 	.word	0x0800c431
 800a964:	0800c453 	.word	0x0800c453
 800a968:	0800c48b 	.word	0x0800c48b
 800a96c:	0800c4af 	.word	0x0800c4af

0800a970 <_cleanup_r>:
 800a970:	4901      	ldr	r1, [pc, #4]	; (800a978 <_cleanup_r+0x8>)
 800a972:	f000 b8af 	b.w	800aad4 <_fwalk_reent>
 800a976:	bf00      	nop
 800a978:	0800a8b1 	.word	0x0800a8b1

0800a97c <__sfmoreglue>:
 800a97c:	b570      	push	{r4, r5, r6, lr}
 800a97e:	1e4a      	subs	r2, r1, #1
 800a980:	2568      	movs	r5, #104	; 0x68
 800a982:	4355      	muls	r5, r2
 800a984:	460e      	mov	r6, r1
 800a986:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a98a:	f001 f9e1 	bl	800bd50 <_malloc_r>
 800a98e:	4604      	mov	r4, r0
 800a990:	b140      	cbz	r0, 800a9a4 <__sfmoreglue+0x28>
 800a992:	2100      	movs	r1, #0
 800a994:	e9c0 1600 	strd	r1, r6, [r0]
 800a998:	300c      	adds	r0, #12
 800a99a:	60a0      	str	r0, [r4, #8]
 800a99c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a9a0:	f7fd fa98 	bl	8007ed4 <memset>
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	bd70      	pop	{r4, r5, r6, pc}

0800a9a8 <__sfp_lock_acquire>:
 800a9a8:	4801      	ldr	r0, [pc, #4]	; (800a9b0 <__sfp_lock_acquire+0x8>)
 800a9aa:	f000 bc26 	b.w	800b1fa <__retarget_lock_acquire_recursive>
 800a9ae:	bf00      	nop
 800a9b0:	200006f0 	.word	0x200006f0

0800a9b4 <__sfp_lock_release>:
 800a9b4:	4801      	ldr	r0, [pc, #4]	; (800a9bc <__sfp_lock_release+0x8>)
 800a9b6:	f000 bc21 	b.w	800b1fc <__retarget_lock_release_recursive>
 800a9ba:	bf00      	nop
 800a9bc:	200006f0 	.word	0x200006f0

0800a9c0 <__sinit_lock_acquire>:
 800a9c0:	4801      	ldr	r0, [pc, #4]	; (800a9c8 <__sinit_lock_acquire+0x8>)
 800a9c2:	f000 bc1a 	b.w	800b1fa <__retarget_lock_acquire_recursive>
 800a9c6:	bf00      	nop
 800a9c8:	200006eb 	.word	0x200006eb

0800a9cc <__sinit_lock_release>:
 800a9cc:	4801      	ldr	r0, [pc, #4]	; (800a9d4 <__sinit_lock_release+0x8>)
 800a9ce:	f000 bc15 	b.w	800b1fc <__retarget_lock_release_recursive>
 800a9d2:	bf00      	nop
 800a9d4:	200006eb 	.word	0x200006eb

0800a9d8 <__sinit>:
 800a9d8:	b510      	push	{r4, lr}
 800a9da:	4604      	mov	r4, r0
 800a9dc:	f7ff fff0 	bl	800a9c0 <__sinit_lock_acquire>
 800a9e0:	69a3      	ldr	r3, [r4, #24]
 800a9e2:	b11b      	cbz	r3, 800a9ec <__sinit+0x14>
 800a9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9e8:	f7ff bff0 	b.w	800a9cc <__sinit_lock_release>
 800a9ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a9f0:	6523      	str	r3, [r4, #80]	; 0x50
 800a9f2:	4b13      	ldr	r3, [pc, #76]	; (800aa40 <__sinit+0x68>)
 800a9f4:	4a13      	ldr	r2, [pc, #76]	; (800aa44 <__sinit+0x6c>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800a9fa:	42a3      	cmp	r3, r4
 800a9fc:	bf04      	itt	eq
 800a9fe:	2301      	moveq	r3, #1
 800aa00:	61a3      	streq	r3, [r4, #24]
 800aa02:	4620      	mov	r0, r4
 800aa04:	f000 f820 	bl	800aa48 <__sfp>
 800aa08:	6060      	str	r0, [r4, #4]
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	f000 f81c 	bl	800aa48 <__sfp>
 800aa10:	60a0      	str	r0, [r4, #8]
 800aa12:	4620      	mov	r0, r4
 800aa14:	f000 f818 	bl	800aa48 <__sfp>
 800aa18:	2200      	movs	r2, #0
 800aa1a:	60e0      	str	r0, [r4, #12]
 800aa1c:	2104      	movs	r1, #4
 800aa1e:	6860      	ldr	r0, [r4, #4]
 800aa20:	f7ff ff82 	bl	800a928 <std>
 800aa24:	68a0      	ldr	r0, [r4, #8]
 800aa26:	2201      	movs	r2, #1
 800aa28:	2109      	movs	r1, #9
 800aa2a:	f7ff ff7d 	bl	800a928 <std>
 800aa2e:	68e0      	ldr	r0, [r4, #12]
 800aa30:	2202      	movs	r2, #2
 800aa32:	2112      	movs	r1, #18
 800aa34:	f7ff ff78 	bl	800a928 <std>
 800aa38:	2301      	movs	r3, #1
 800aa3a:	61a3      	str	r3, [r4, #24]
 800aa3c:	e7d2      	b.n	800a9e4 <__sinit+0xc>
 800aa3e:	bf00      	nop
 800aa40:	0800cd4c 	.word	0x0800cd4c
 800aa44:	0800a971 	.word	0x0800a971

0800aa48 <__sfp>:
 800aa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa4a:	4607      	mov	r7, r0
 800aa4c:	f7ff ffac 	bl	800a9a8 <__sfp_lock_acquire>
 800aa50:	4b1e      	ldr	r3, [pc, #120]	; (800aacc <__sfp+0x84>)
 800aa52:	681e      	ldr	r6, [r3, #0]
 800aa54:	69b3      	ldr	r3, [r6, #24]
 800aa56:	b913      	cbnz	r3, 800aa5e <__sfp+0x16>
 800aa58:	4630      	mov	r0, r6
 800aa5a:	f7ff ffbd 	bl	800a9d8 <__sinit>
 800aa5e:	3648      	adds	r6, #72	; 0x48
 800aa60:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa64:	3b01      	subs	r3, #1
 800aa66:	d503      	bpl.n	800aa70 <__sfp+0x28>
 800aa68:	6833      	ldr	r3, [r6, #0]
 800aa6a:	b30b      	cbz	r3, 800aab0 <__sfp+0x68>
 800aa6c:	6836      	ldr	r6, [r6, #0]
 800aa6e:	e7f7      	b.n	800aa60 <__sfp+0x18>
 800aa70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa74:	b9d5      	cbnz	r5, 800aaac <__sfp+0x64>
 800aa76:	4b16      	ldr	r3, [pc, #88]	; (800aad0 <__sfp+0x88>)
 800aa78:	60e3      	str	r3, [r4, #12]
 800aa7a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa7e:	6665      	str	r5, [r4, #100]	; 0x64
 800aa80:	f000 fbba 	bl	800b1f8 <__retarget_lock_init_recursive>
 800aa84:	f7ff ff96 	bl	800a9b4 <__sfp_lock_release>
 800aa88:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aa8c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aa90:	6025      	str	r5, [r4, #0]
 800aa92:	61a5      	str	r5, [r4, #24]
 800aa94:	2208      	movs	r2, #8
 800aa96:	4629      	mov	r1, r5
 800aa98:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aa9c:	f7fd fa1a 	bl	8007ed4 <memset>
 800aaa0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aaa4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaac:	3468      	adds	r4, #104	; 0x68
 800aaae:	e7d9      	b.n	800aa64 <__sfp+0x1c>
 800aab0:	2104      	movs	r1, #4
 800aab2:	4638      	mov	r0, r7
 800aab4:	f7ff ff62 	bl	800a97c <__sfmoreglue>
 800aab8:	4604      	mov	r4, r0
 800aaba:	6030      	str	r0, [r6, #0]
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d1d5      	bne.n	800aa6c <__sfp+0x24>
 800aac0:	f7ff ff78 	bl	800a9b4 <__sfp_lock_release>
 800aac4:	230c      	movs	r3, #12
 800aac6:	603b      	str	r3, [r7, #0]
 800aac8:	e7ee      	b.n	800aaa8 <__sfp+0x60>
 800aaca:	bf00      	nop
 800aacc:	0800cd4c 	.word	0x0800cd4c
 800aad0:	ffff0001 	.word	0xffff0001

0800aad4 <_fwalk_reent>:
 800aad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aad8:	4606      	mov	r6, r0
 800aada:	4688      	mov	r8, r1
 800aadc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aae0:	2700      	movs	r7, #0
 800aae2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aae6:	f1b9 0901 	subs.w	r9, r9, #1
 800aaea:	d505      	bpl.n	800aaf8 <_fwalk_reent+0x24>
 800aaec:	6824      	ldr	r4, [r4, #0]
 800aaee:	2c00      	cmp	r4, #0
 800aaf0:	d1f7      	bne.n	800aae2 <_fwalk_reent+0xe>
 800aaf2:	4638      	mov	r0, r7
 800aaf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaf8:	89ab      	ldrh	r3, [r5, #12]
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	d907      	bls.n	800ab0e <_fwalk_reent+0x3a>
 800aafe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab02:	3301      	adds	r3, #1
 800ab04:	d003      	beq.n	800ab0e <_fwalk_reent+0x3a>
 800ab06:	4629      	mov	r1, r5
 800ab08:	4630      	mov	r0, r6
 800ab0a:	47c0      	blx	r8
 800ab0c:	4307      	orrs	r7, r0
 800ab0e:	3568      	adds	r5, #104	; 0x68
 800ab10:	e7e9      	b.n	800aae6 <_fwalk_reent+0x12>

0800ab12 <rshift>:
 800ab12:	6903      	ldr	r3, [r0, #16]
 800ab14:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ab18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ab1c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ab20:	f100 0414 	add.w	r4, r0, #20
 800ab24:	dd45      	ble.n	800abb2 <rshift+0xa0>
 800ab26:	f011 011f 	ands.w	r1, r1, #31
 800ab2a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ab2e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ab32:	d10c      	bne.n	800ab4e <rshift+0x3c>
 800ab34:	f100 0710 	add.w	r7, r0, #16
 800ab38:	4629      	mov	r1, r5
 800ab3a:	42b1      	cmp	r1, r6
 800ab3c:	d334      	bcc.n	800aba8 <rshift+0x96>
 800ab3e:	1a9b      	subs	r3, r3, r2
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	1eea      	subs	r2, r5, #3
 800ab44:	4296      	cmp	r6, r2
 800ab46:	bf38      	it	cc
 800ab48:	2300      	movcc	r3, #0
 800ab4a:	4423      	add	r3, r4
 800ab4c:	e015      	b.n	800ab7a <rshift+0x68>
 800ab4e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ab52:	f1c1 0820 	rsb	r8, r1, #32
 800ab56:	40cf      	lsrs	r7, r1
 800ab58:	f105 0e04 	add.w	lr, r5, #4
 800ab5c:	46a1      	mov	r9, r4
 800ab5e:	4576      	cmp	r6, lr
 800ab60:	46f4      	mov	ip, lr
 800ab62:	d815      	bhi.n	800ab90 <rshift+0x7e>
 800ab64:	1a9b      	subs	r3, r3, r2
 800ab66:	009a      	lsls	r2, r3, #2
 800ab68:	3a04      	subs	r2, #4
 800ab6a:	3501      	adds	r5, #1
 800ab6c:	42ae      	cmp	r6, r5
 800ab6e:	bf38      	it	cc
 800ab70:	2200      	movcc	r2, #0
 800ab72:	18a3      	adds	r3, r4, r2
 800ab74:	50a7      	str	r7, [r4, r2]
 800ab76:	b107      	cbz	r7, 800ab7a <rshift+0x68>
 800ab78:	3304      	adds	r3, #4
 800ab7a:	1b1a      	subs	r2, r3, r4
 800ab7c:	42a3      	cmp	r3, r4
 800ab7e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ab82:	bf08      	it	eq
 800ab84:	2300      	moveq	r3, #0
 800ab86:	6102      	str	r2, [r0, #16]
 800ab88:	bf08      	it	eq
 800ab8a:	6143      	streq	r3, [r0, #20]
 800ab8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab90:	f8dc c000 	ldr.w	ip, [ip]
 800ab94:	fa0c fc08 	lsl.w	ip, ip, r8
 800ab98:	ea4c 0707 	orr.w	r7, ip, r7
 800ab9c:	f849 7b04 	str.w	r7, [r9], #4
 800aba0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aba4:	40cf      	lsrs	r7, r1
 800aba6:	e7da      	b.n	800ab5e <rshift+0x4c>
 800aba8:	f851 cb04 	ldr.w	ip, [r1], #4
 800abac:	f847 cf04 	str.w	ip, [r7, #4]!
 800abb0:	e7c3      	b.n	800ab3a <rshift+0x28>
 800abb2:	4623      	mov	r3, r4
 800abb4:	e7e1      	b.n	800ab7a <rshift+0x68>

0800abb6 <__hexdig_fun>:
 800abb6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800abba:	2b09      	cmp	r3, #9
 800abbc:	d802      	bhi.n	800abc4 <__hexdig_fun+0xe>
 800abbe:	3820      	subs	r0, #32
 800abc0:	b2c0      	uxtb	r0, r0
 800abc2:	4770      	bx	lr
 800abc4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800abc8:	2b05      	cmp	r3, #5
 800abca:	d801      	bhi.n	800abd0 <__hexdig_fun+0x1a>
 800abcc:	3847      	subs	r0, #71	; 0x47
 800abce:	e7f7      	b.n	800abc0 <__hexdig_fun+0xa>
 800abd0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800abd4:	2b05      	cmp	r3, #5
 800abd6:	d801      	bhi.n	800abdc <__hexdig_fun+0x26>
 800abd8:	3827      	subs	r0, #39	; 0x27
 800abda:	e7f1      	b.n	800abc0 <__hexdig_fun+0xa>
 800abdc:	2000      	movs	r0, #0
 800abde:	4770      	bx	lr

0800abe0 <__gethex>:
 800abe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abe4:	ed2d 8b02 	vpush	{d8}
 800abe8:	b089      	sub	sp, #36	; 0x24
 800abea:	ee08 0a10 	vmov	s16, r0
 800abee:	9304      	str	r3, [sp, #16]
 800abf0:	4bbc      	ldr	r3, [pc, #752]	; (800aee4 <__gethex+0x304>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	9301      	str	r3, [sp, #4]
 800abf6:	4618      	mov	r0, r3
 800abf8:	468b      	mov	fp, r1
 800abfa:	4690      	mov	r8, r2
 800abfc:	f7f5 fb20 	bl	8000240 <strlen>
 800ac00:	9b01      	ldr	r3, [sp, #4]
 800ac02:	f8db 2000 	ldr.w	r2, [fp]
 800ac06:	4403      	add	r3, r0
 800ac08:	4682      	mov	sl, r0
 800ac0a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ac0e:	9305      	str	r3, [sp, #20]
 800ac10:	1c93      	adds	r3, r2, #2
 800ac12:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ac16:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ac1a:	32fe      	adds	r2, #254	; 0xfe
 800ac1c:	18d1      	adds	r1, r2, r3
 800ac1e:	461f      	mov	r7, r3
 800ac20:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ac24:	9100      	str	r1, [sp, #0]
 800ac26:	2830      	cmp	r0, #48	; 0x30
 800ac28:	d0f8      	beq.n	800ac1c <__gethex+0x3c>
 800ac2a:	f7ff ffc4 	bl	800abb6 <__hexdig_fun>
 800ac2e:	4604      	mov	r4, r0
 800ac30:	2800      	cmp	r0, #0
 800ac32:	d13a      	bne.n	800acaa <__gethex+0xca>
 800ac34:	9901      	ldr	r1, [sp, #4]
 800ac36:	4652      	mov	r2, sl
 800ac38:	4638      	mov	r0, r7
 800ac3a:	f001 fc3c 	bl	800c4b6 <strncmp>
 800ac3e:	4605      	mov	r5, r0
 800ac40:	2800      	cmp	r0, #0
 800ac42:	d168      	bne.n	800ad16 <__gethex+0x136>
 800ac44:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ac48:	eb07 060a 	add.w	r6, r7, sl
 800ac4c:	f7ff ffb3 	bl	800abb6 <__hexdig_fun>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d062      	beq.n	800ad1a <__gethex+0x13a>
 800ac54:	4633      	mov	r3, r6
 800ac56:	7818      	ldrb	r0, [r3, #0]
 800ac58:	2830      	cmp	r0, #48	; 0x30
 800ac5a:	461f      	mov	r7, r3
 800ac5c:	f103 0301 	add.w	r3, r3, #1
 800ac60:	d0f9      	beq.n	800ac56 <__gethex+0x76>
 800ac62:	f7ff ffa8 	bl	800abb6 <__hexdig_fun>
 800ac66:	2301      	movs	r3, #1
 800ac68:	fab0 f480 	clz	r4, r0
 800ac6c:	0964      	lsrs	r4, r4, #5
 800ac6e:	4635      	mov	r5, r6
 800ac70:	9300      	str	r3, [sp, #0]
 800ac72:	463a      	mov	r2, r7
 800ac74:	4616      	mov	r6, r2
 800ac76:	3201      	adds	r2, #1
 800ac78:	7830      	ldrb	r0, [r6, #0]
 800ac7a:	f7ff ff9c 	bl	800abb6 <__hexdig_fun>
 800ac7e:	2800      	cmp	r0, #0
 800ac80:	d1f8      	bne.n	800ac74 <__gethex+0x94>
 800ac82:	9901      	ldr	r1, [sp, #4]
 800ac84:	4652      	mov	r2, sl
 800ac86:	4630      	mov	r0, r6
 800ac88:	f001 fc15 	bl	800c4b6 <strncmp>
 800ac8c:	b980      	cbnz	r0, 800acb0 <__gethex+0xd0>
 800ac8e:	b94d      	cbnz	r5, 800aca4 <__gethex+0xc4>
 800ac90:	eb06 050a 	add.w	r5, r6, sl
 800ac94:	462a      	mov	r2, r5
 800ac96:	4616      	mov	r6, r2
 800ac98:	3201      	adds	r2, #1
 800ac9a:	7830      	ldrb	r0, [r6, #0]
 800ac9c:	f7ff ff8b 	bl	800abb6 <__hexdig_fun>
 800aca0:	2800      	cmp	r0, #0
 800aca2:	d1f8      	bne.n	800ac96 <__gethex+0xb6>
 800aca4:	1bad      	subs	r5, r5, r6
 800aca6:	00ad      	lsls	r5, r5, #2
 800aca8:	e004      	b.n	800acb4 <__gethex+0xd4>
 800acaa:	2400      	movs	r4, #0
 800acac:	4625      	mov	r5, r4
 800acae:	e7e0      	b.n	800ac72 <__gethex+0x92>
 800acb0:	2d00      	cmp	r5, #0
 800acb2:	d1f7      	bne.n	800aca4 <__gethex+0xc4>
 800acb4:	7833      	ldrb	r3, [r6, #0]
 800acb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800acba:	2b50      	cmp	r3, #80	; 0x50
 800acbc:	d13b      	bne.n	800ad36 <__gethex+0x156>
 800acbe:	7873      	ldrb	r3, [r6, #1]
 800acc0:	2b2b      	cmp	r3, #43	; 0x2b
 800acc2:	d02c      	beq.n	800ad1e <__gethex+0x13e>
 800acc4:	2b2d      	cmp	r3, #45	; 0x2d
 800acc6:	d02e      	beq.n	800ad26 <__gethex+0x146>
 800acc8:	1c71      	adds	r1, r6, #1
 800acca:	f04f 0900 	mov.w	r9, #0
 800acce:	7808      	ldrb	r0, [r1, #0]
 800acd0:	f7ff ff71 	bl	800abb6 <__hexdig_fun>
 800acd4:	1e43      	subs	r3, r0, #1
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	2b18      	cmp	r3, #24
 800acda:	d82c      	bhi.n	800ad36 <__gethex+0x156>
 800acdc:	f1a0 0210 	sub.w	r2, r0, #16
 800ace0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ace4:	f7ff ff67 	bl	800abb6 <__hexdig_fun>
 800ace8:	1e43      	subs	r3, r0, #1
 800acea:	b2db      	uxtb	r3, r3
 800acec:	2b18      	cmp	r3, #24
 800acee:	d91d      	bls.n	800ad2c <__gethex+0x14c>
 800acf0:	f1b9 0f00 	cmp.w	r9, #0
 800acf4:	d000      	beq.n	800acf8 <__gethex+0x118>
 800acf6:	4252      	negs	r2, r2
 800acf8:	4415      	add	r5, r2
 800acfa:	f8cb 1000 	str.w	r1, [fp]
 800acfe:	b1e4      	cbz	r4, 800ad3a <__gethex+0x15a>
 800ad00:	9b00      	ldr	r3, [sp, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	bf14      	ite	ne
 800ad06:	2700      	movne	r7, #0
 800ad08:	2706      	moveq	r7, #6
 800ad0a:	4638      	mov	r0, r7
 800ad0c:	b009      	add	sp, #36	; 0x24
 800ad0e:	ecbd 8b02 	vpop	{d8}
 800ad12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad16:	463e      	mov	r6, r7
 800ad18:	4625      	mov	r5, r4
 800ad1a:	2401      	movs	r4, #1
 800ad1c:	e7ca      	b.n	800acb4 <__gethex+0xd4>
 800ad1e:	f04f 0900 	mov.w	r9, #0
 800ad22:	1cb1      	adds	r1, r6, #2
 800ad24:	e7d3      	b.n	800acce <__gethex+0xee>
 800ad26:	f04f 0901 	mov.w	r9, #1
 800ad2a:	e7fa      	b.n	800ad22 <__gethex+0x142>
 800ad2c:	230a      	movs	r3, #10
 800ad2e:	fb03 0202 	mla	r2, r3, r2, r0
 800ad32:	3a10      	subs	r2, #16
 800ad34:	e7d4      	b.n	800ace0 <__gethex+0x100>
 800ad36:	4631      	mov	r1, r6
 800ad38:	e7df      	b.n	800acfa <__gethex+0x11a>
 800ad3a:	1bf3      	subs	r3, r6, r7
 800ad3c:	3b01      	subs	r3, #1
 800ad3e:	4621      	mov	r1, r4
 800ad40:	2b07      	cmp	r3, #7
 800ad42:	dc0b      	bgt.n	800ad5c <__gethex+0x17c>
 800ad44:	ee18 0a10 	vmov	r0, s16
 800ad48:	f000 fae6 	bl	800b318 <_Balloc>
 800ad4c:	4604      	mov	r4, r0
 800ad4e:	b940      	cbnz	r0, 800ad62 <__gethex+0x182>
 800ad50:	4b65      	ldr	r3, [pc, #404]	; (800aee8 <__gethex+0x308>)
 800ad52:	4602      	mov	r2, r0
 800ad54:	21de      	movs	r1, #222	; 0xde
 800ad56:	4865      	ldr	r0, [pc, #404]	; (800aeec <__gethex+0x30c>)
 800ad58:	f001 fbde 	bl	800c518 <__assert_func>
 800ad5c:	3101      	adds	r1, #1
 800ad5e:	105b      	asrs	r3, r3, #1
 800ad60:	e7ee      	b.n	800ad40 <__gethex+0x160>
 800ad62:	f100 0914 	add.w	r9, r0, #20
 800ad66:	f04f 0b00 	mov.w	fp, #0
 800ad6a:	f1ca 0301 	rsb	r3, sl, #1
 800ad6e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ad72:	f8cd b000 	str.w	fp, [sp]
 800ad76:	9306      	str	r3, [sp, #24]
 800ad78:	42b7      	cmp	r7, r6
 800ad7a:	d340      	bcc.n	800adfe <__gethex+0x21e>
 800ad7c:	9802      	ldr	r0, [sp, #8]
 800ad7e:	9b00      	ldr	r3, [sp, #0]
 800ad80:	f840 3b04 	str.w	r3, [r0], #4
 800ad84:	eba0 0009 	sub.w	r0, r0, r9
 800ad88:	1080      	asrs	r0, r0, #2
 800ad8a:	0146      	lsls	r6, r0, #5
 800ad8c:	6120      	str	r0, [r4, #16]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f000 fbb8 	bl	800b504 <__hi0bits>
 800ad94:	1a30      	subs	r0, r6, r0
 800ad96:	f8d8 6000 	ldr.w	r6, [r8]
 800ad9a:	42b0      	cmp	r0, r6
 800ad9c:	dd63      	ble.n	800ae66 <__gethex+0x286>
 800ad9e:	1b87      	subs	r7, r0, r6
 800ada0:	4639      	mov	r1, r7
 800ada2:	4620      	mov	r0, r4
 800ada4:	f000 ff53 	bl	800bc4e <__any_on>
 800ada8:	4682      	mov	sl, r0
 800adaa:	b1a8      	cbz	r0, 800add8 <__gethex+0x1f8>
 800adac:	1e7b      	subs	r3, r7, #1
 800adae:	1159      	asrs	r1, r3, #5
 800adb0:	f003 021f 	and.w	r2, r3, #31
 800adb4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800adb8:	f04f 0a01 	mov.w	sl, #1
 800adbc:	fa0a f202 	lsl.w	r2, sl, r2
 800adc0:	420a      	tst	r2, r1
 800adc2:	d009      	beq.n	800add8 <__gethex+0x1f8>
 800adc4:	4553      	cmp	r3, sl
 800adc6:	dd05      	ble.n	800add4 <__gethex+0x1f4>
 800adc8:	1eb9      	subs	r1, r7, #2
 800adca:	4620      	mov	r0, r4
 800adcc:	f000 ff3f 	bl	800bc4e <__any_on>
 800add0:	2800      	cmp	r0, #0
 800add2:	d145      	bne.n	800ae60 <__gethex+0x280>
 800add4:	f04f 0a02 	mov.w	sl, #2
 800add8:	4639      	mov	r1, r7
 800adda:	4620      	mov	r0, r4
 800addc:	f7ff fe99 	bl	800ab12 <rshift>
 800ade0:	443d      	add	r5, r7
 800ade2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ade6:	42ab      	cmp	r3, r5
 800ade8:	da4c      	bge.n	800ae84 <__gethex+0x2a4>
 800adea:	ee18 0a10 	vmov	r0, s16
 800adee:	4621      	mov	r1, r4
 800adf0:	f000 fad2 	bl	800b398 <_Bfree>
 800adf4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800adf6:	2300      	movs	r3, #0
 800adf8:	6013      	str	r3, [r2, #0]
 800adfa:	27a3      	movs	r7, #163	; 0xa3
 800adfc:	e785      	b.n	800ad0a <__gethex+0x12a>
 800adfe:	1e73      	subs	r3, r6, #1
 800ae00:	9a05      	ldr	r2, [sp, #20]
 800ae02:	9303      	str	r3, [sp, #12]
 800ae04:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d019      	beq.n	800ae40 <__gethex+0x260>
 800ae0c:	f1bb 0f20 	cmp.w	fp, #32
 800ae10:	d107      	bne.n	800ae22 <__gethex+0x242>
 800ae12:	9b02      	ldr	r3, [sp, #8]
 800ae14:	9a00      	ldr	r2, [sp, #0]
 800ae16:	f843 2b04 	str.w	r2, [r3], #4
 800ae1a:	9302      	str	r3, [sp, #8]
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	9300      	str	r3, [sp, #0]
 800ae20:	469b      	mov	fp, r3
 800ae22:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ae26:	f7ff fec6 	bl	800abb6 <__hexdig_fun>
 800ae2a:	9b00      	ldr	r3, [sp, #0]
 800ae2c:	f000 000f 	and.w	r0, r0, #15
 800ae30:	fa00 f00b 	lsl.w	r0, r0, fp
 800ae34:	4303      	orrs	r3, r0
 800ae36:	9300      	str	r3, [sp, #0]
 800ae38:	f10b 0b04 	add.w	fp, fp, #4
 800ae3c:	9b03      	ldr	r3, [sp, #12]
 800ae3e:	e00d      	b.n	800ae5c <__gethex+0x27c>
 800ae40:	9b03      	ldr	r3, [sp, #12]
 800ae42:	9a06      	ldr	r2, [sp, #24]
 800ae44:	4413      	add	r3, r2
 800ae46:	42bb      	cmp	r3, r7
 800ae48:	d3e0      	bcc.n	800ae0c <__gethex+0x22c>
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	9901      	ldr	r1, [sp, #4]
 800ae4e:	9307      	str	r3, [sp, #28]
 800ae50:	4652      	mov	r2, sl
 800ae52:	f001 fb30 	bl	800c4b6 <strncmp>
 800ae56:	9b07      	ldr	r3, [sp, #28]
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d1d7      	bne.n	800ae0c <__gethex+0x22c>
 800ae5c:	461e      	mov	r6, r3
 800ae5e:	e78b      	b.n	800ad78 <__gethex+0x198>
 800ae60:	f04f 0a03 	mov.w	sl, #3
 800ae64:	e7b8      	b.n	800add8 <__gethex+0x1f8>
 800ae66:	da0a      	bge.n	800ae7e <__gethex+0x29e>
 800ae68:	1a37      	subs	r7, r6, r0
 800ae6a:	4621      	mov	r1, r4
 800ae6c:	ee18 0a10 	vmov	r0, s16
 800ae70:	463a      	mov	r2, r7
 800ae72:	f000 fcad 	bl	800b7d0 <__lshift>
 800ae76:	1bed      	subs	r5, r5, r7
 800ae78:	4604      	mov	r4, r0
 800ae7a:	f100 0914 	add.w	r9, r0, #20
 800ae7e:	f04f 0a00 	mov.w	sl, #0
 800ae82:	e7ae      	b.n	800ade2 <__gethex+0x202>
 800ae84:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ae88:	42a8      	cmp	r0, r5
 800ae8a:	dd72      	ble.n	800af72 <__gethex+0x392>
 800ae8c:	1b45      	subs	r5, r0, r5
 800ae8e:	42ae      	cmp	r6, r5
 800ae90:	dc36      	bgt.n	800af00 <__gethex+0x320>
 800ae92:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae96:	2b02      	cmp	r3, #2
 800ae98:	d02a      	beq.n	800aef0 <__gethex+0x310>
 800ae9a:	2b03      	cmp	r3, #3
 800ae9c:	d02c      	beq.n	800aef8 <__gethex+0x318>
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d115      	bne.n	800aece <__gethex+0x2ee>
 800aea2:	42ae      	cmp	r6, r5
 800aea4:	d113      	bne.n	800aece <__gethex+0x2ee>
 800aea6:	2e01      	cmp	r6, #1
 800aea8:	d10b      	bne.n	800aec2 <__gethex+0x2e2>
 800aeaa:	9a04      	ldr	r2, [sp, #16]
 800aeac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aeb0:	6013      	str	r3, [r2, #0]
 800aeb2:	2301      	movs	r3, #1
 800aeb4:	6123      	str	r3, [r4, #16]
 800aeb6:	f8c9 3000 	str.w	r3, [r9]
 800aeba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aebc:	2762      	movs	r7, #98	; 0x62
 800aebe:	601c      	str	r4, [r3, #0]
 800aec0:	e723      	b.n	800ad0a <__gethex+0x12a>
 800aec2:	1e71      	subs	r1, r6, #1
 800aec4:	4620      	mov	r0, r4
 800aec6:	f000 fec2 	bl	800bc4e <__any_on>
 800aeca:	2800      	cmp	r0, #0
 800aecc:	d1ed      	bne.n	800aeaa <__gethex+0x2ca>
 800aece:	ee18 0a10 	vmov	r0, s16
 800aed2:	4621      	mov	r1, r4
 800aed4:	f000 fa60 	bl	800b398 <_Bfree>
 800aed8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aeda:	2300      	movs	r3, #0
 800aedc:	6013      	str	r3, [r2, #0]
 800aede:	2750      	movs	r7, #80	; 0x50
 800aee0:	e713      	b.n	800ad0a <__gethex+0x12a>
 800aee2:	bf00      	nop
 800aee4:	0800d044 	.word	0x0800d044
 800aee8:	0800cf64 	.word	0x0800cf64
 800aeec:	0800cfd8 	.word	0x0800cfd8
 800aef0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1eb      	bne.n	800aece <__gethex+0x2ee>
 800aef6:	e7d8      	b.n	800aeaa <__gethex+0x2ca>
 800aef8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d1d5      	bne.n	800aeaa <__gethex+0x2ca>
 800aefe:	e7e6      	b.n	800aece <__gethex+0x2ee>
 800af00:	1e6f      	subs	r7, r5, #1
 800af02:	f1ba 0f00 	cmp.w	sl, #0
 800af06:	d131      	bne.n	800af6c <__gethex+0x38c>
 800af08:	b127      	cbz	r7, 800af14 <__gethex+0x334>
 800af0a:	4639      	mov	r1, r7
 800af0c:	4620      	mov	r0, r4
 800af0e:	f000 fe9e 	bl	800bc4e <__any_on>
 800af12:	4682      	mov	sl, r0
 800af14:	117b      	asrs	r3, r7, #5
 800af16:	2101      	movs	r1, #1
 800af18:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800af1c:	f007 071f 	and.w	r7, r7, #31
 800af20:	fa01 f707 	lsl.w	r7, r1, r7
 800af24:	421f      	tst	r7, r3
 800af26:	4629      	mov	r1, r5
 800af28:	4620      	mov	r0, r4
 800af2a:	bf18      	it	ne
 800af2c:	f04a 0a02 	orrne.w	sl, sl, #2
 800af30:	1b76      	subs	r6, r6, r5
 800af32:	f7ff fdee 	bl	800ab12 <rshift>
 800af36:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800af3a:	2702      	movs	r7, #2
 800af3c:	f1ba 0f00 	cmp.w	sl, #0
 800af40:	d048      	beq.n	800afd4 <__gethex+0x3f4>
 800af42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800af46:	2b02      	cmp	r3, #2
 800af48:	d015      	beq.n	800af76 <__gethex+0x396>
 800af4a:	2b03      	cmp	r3, #3
 800af4c:	d017      	beq.n	800af7e <__gethex+0x39e>
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d109      	bne.n	800af66 <__gethex+0x386>
 800af52:	f01a 0f02 	tst.w	sl, #2
 800af56:	d006      	beq.n	800af66 <__gethex+0x386>
 800af58:	f8d9 0000 	ldr.w	r0, [r9]
 800af5c:	ea4a 0a00 	orr.w	sl, sl, r0
 800af60:	f01a 0f01 	tst.w	sl, #1
 800af64:	d10e      	bne.n	800af84 <__gethex+0x3a4>
 800af66:	f047 0710 	orr.w	r7, r7, #16
 800af6a:	e033      	b.n	800afd4 <__gethex+0x3f4>
 800af6c:	f04f 0a01 	mov.w	sl, #1
 800af70:	e7d0      	b.n	800af14 <__gethex+0x334>
 800af72:	2701      	movs	r7, #1
 800af74:	e7e2      	b.n	800af3c <__gethex+0x35c>
 800af76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af78:	f1c3 0301 	rsb	r3, r3, #1
 800af7c:	9315      	str	r3, [sp, #84]	; 0x54
 800af7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af80:	2b00      	cmp	r3, #0
 800af82:	d0f0      	beq.n	800af66 <__gethex+0x386>
 800af84:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af88:	f104 0314 	add.w	r3, r4, #20
 800af8c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800af90:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800af94:	f04f 0c00 	mov.w	ip, #0
 800af98:	4618      	mov	r0, r3
 800af9a:	f853 2b04 	ldr.w	r2, [r3], #4
 800af9e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800afa2:	d01c      	beq.n	800afde <__gethex+0x3fe>
 800afa4:	3201      	adds	r2, #1
 800afa6:	6002      	str	r2, [r0, #0]
 800afa8:	2f02      	cmp	r7, #2
 800afaa:	f104 0314 	add.w	r3, r4, #20
 800afae:	d13f      	bne.n	800b030 <__gethex+0x450>
 800afb0:	f8d8 2000 	ldr.w	r2, [r8]
 800afb4:	3a01      	subs	r2, #1
 800afb6:	42b2      	cmp	r2, r6
 800afb8:	d10a      	bne.n	800afd0 <__gethex+0x3f0>
 800afba:	1171      	asrs	r1, r6, #5
 800afbc:	2201      	movs	r2, #1
 800afbe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800afc2:	f006 061f 	and.w	r6, r6, #31
 800afc6:	fa02 f606 	lsl.w	r6, r2, r6
 800afca:	421e      	tst	r6, r3
 800afcc:	bf18      	it	ne
 800afce:	4617      	movne	r7, r2
 800afd0:	f047 0720 	orr.w	r7, r7, #32
 800afd4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800afd6:	601c      	str	r4, [r3, #0]
 800afd8:	9b04      	ldr	r3, [sp, #16]
 800afda:	601d      	str	r5, [r3, #0]
 800afdc:	e695      	b.n	800ad0a <__gethex+0x12a>
 800afde:	4299      	cmp	r1, r3
 800afe0:	f843 cc04 	str.w	ip, [r3, #-4]
 800afe4:	d8d8      	bhi.n	800af98 <__gethex+0x3b8>
 800afe6:	68a3      	ldr	r3, [r4, #8]
 800afe8:	459b      	cmp	fp, r3
 800afea:	db19      	blt.n	800b020 <__gethex+0x440>
 800afec:	6861      	ldr	r1, [r4, #4]
 800afee:	ee18 0a10 	vmov	r0, s16
 800aff2:	3101      	adds	r1, #1
 800aff4:	f000 f990 	bl	800b318 <_Balloc>
 800aff8:	4681      	mov	r9, r0
 800affa:	b918      	cbnz	r0, 800b004 <__gethex+0x424>
 800affc:	4b1a      	ldr	r3, [pc, #104]	; (800b068 <__gethex+0x488>)
 800affe:	4602      	mov	r2, r0
 800b000:	2184      	movs	r1, #132	; 0x84
 800b002:	e6a8      	b.n	800ad56 <__gethex+0x176>
 800b004:	6922      	ldr	r2, [r4, #16]
 800b006:	3202      	adds	r2, #2
 800b008:	f104 010c 	add.w	r1, r4, #12
 800b00c:	0092      	lsls	r2, r2, #2
 800b00e:	300c      	adds	r0, #12
 800b010:	f000 f974 	bl	800b2fc <memcpy>
 800b014:	4621      	mov	r1, r4
 800b016:	ee18 0a10 	vmov	r0, s16
 800b01a:	f000 f9bd 	bl	800b398 <_Bfree>
 800b01e:	464c      	mov	r4, r9
 800b020:	6923      	ldr	r3, [r4, #16]
 800b022:	1c5a      	adds	r2, r3, #1
 800b024:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b028:	6122      	str	r2, [r4, #16]
 800b02a:	2201      	movs	r2, #1
 800b02c:	615a      	str	r2, [r3, #20]
 800b02e:	e7bb      	b.n	800afa8 <__gethex+0x3c8>
 800b030:	6922      	ldr	r2, [r4, #16]
 800b032:	455a      	cmp	r2, fp
 800b034:	dd0b      	ble.n	800b04e <__gethex+0x46e>
 800b036:	2101      	movs	r1, #1
 800b038:	4620      	mov	r0, r4
 800b03a:	f7ff fd6a 	bl	800ab12 <rshift>
 800b03e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b042:	3501      	adds	r5, #1
 800b044:	42ab      	cmp	r3, r5
 800b046:	f6ff aed0 	blt.w	800adea <__gethex+0x20a>
 800b04a:	2701      	movs	r7, #1
 800b04c:	e7c0      	b.n	800afd0 <__gethex+0x3f0>
 800b04e:	f016 061f 	ands.w	r6, r6, #31
 800b052:	d0fa      	beq.n	800b04a <__gethex+0x46a>
 800b054:	449a      	add	sl, r3
 800b056:	f1c6 0620 	rsb	r6, r6, #32
 800b05a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b05e:	f000 fa51 	bl	800b504 <__hi0bits>
 800b062:	42b0      	cmp	r0, r6
 800b064:	dbe7      	blt.n	800b036 <__gethex+0x456>
 800b066:	e7f0      	b.n	800b04a <__gethex+0x46a>
 800b068:	0800cf64 	.word	0x0800cf64

0800b06c <L_shift>:
 800b06c:	f1c2 0208 	rsb	r2, r2, #8
 800b070:	0092      	lsls	r2, r2, #2
 800b072:	b570      	push	{r4, r5, r6, lr}
 800b074:	f1c2 0620 	rsb	r6, r2, #32
 800b078:	6843      	ldr	r3, [r0, #4]
 800b07a:	6804      	ldr	r4, [r0, #0]
 800b07c:	fa03 f506 	lsl.w	r5, r3, r6
 800b080:	432c      	orrs	r4, r5
 800b082:	40d3      	lsrs	r3, r2
 800b084:	6004      	str	r4, [r0, #0]
 800b086:	f840 3f04 	str.w	r3, [r0, #4]!
 800b08a:	4288      	cmp	r0, r1
 800b08c:	d3f4      	bcc.n	800b078 <L_shift+0xc>
 800b08e:	bd70      	pop	{r4, r5, r6, pc}

0800b090 <__match>:
 800b090:	b530      	push	{r4, r5, lr}
 800b092:	6803      	ldr	r3, [r0, #0]
 800b094:	3301      	adds	r3, #1
 800b096:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b09a:	b914      	cbnz	r4, 800b0a2 <__match+0x12>
 800b09c:	6003      	str	r3, [r0, #0]
 800b09e:	2001      	movs	r0, #1
 800b0a0:	bd30      	pop	{r4, r5, pc}
 800b0a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b0aa:	2d19      	cmp	r5, #25
 800b0ac:	bf98      	it	ls
 800b0ae:	3220      	addls	r2, #32
 800b0b0:	42a2      	cmp	r2, r4
 800b0b2:	d0f0      	beq.n	800b096 <__match+0x6>
 800b0b4:	2000      	movs	r0, #0
 800b0b6:	e7f3      	b.n	800b0a0 <__match+0x10>

0800b0b8 <__hexnan>:
 800b0b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0bc:	680b      	ldr	r3, [r1, #0]
 800b0be:	6801      	ldr	r1, [r0, #0]
 800b0c0:	115e      	asrs	r6, r3, #5
 800b0c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b0c6:	f013 031f 	ands.w	r3, r3, #31
 800b0ca:	b087      	sub	sp, #28
 800b0cc:	bf18      	it	ne
 800b0ce:	3604      	addne	r6, #4
 800b0d0:	2500      	movs	r5, #0
 800b0d2:	1f37      	subs	r7, r6, #4
 800b0d4:	4682      	mov	sl, r0
 800b0d6:	4690      	mov	r8, r2
 800b0d8:	9301      	str	r3, [sp, #4]
 800b0da:	f846 5c04 	str.w	r5, [r6, #-4]
 800b0de:	46b9      	mov	r9, r7
 800b0e0:	463c      	mov	r4, r7
 800b0e2:	9502      	str	r5, [sp, #8]
 800b0e4:	46ab      	mov	fp, r5
 800b0e6:	784a      	ldrb	r2, [r1, #1]
 800b0e8:	1c4b      	adds	r3, r1, #1
 800b0ea:	9303      	str	r3, [sp, #12]
 800b0ec:	b342      	cbz	r2, 800b140 <__hexnan+0x88>
 800b0ee:	4610      	mov	r0, r2
 800b0f0:	9105      	str	r1, [sp, #20]
 800b0f2:	9204      	str	r2, [sp, #16]
 800b0f4:	f7ff fd5f 	bl	800abb6 <__hexdig_fun>
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	d14f      	bne.n	800b19c <__hexnan+0xe4>
 800b0fc:	9a04      	ldr	r2, [sp, #16]
 800b0fe:	9905      	ldr	r1, [sp, #20]
 800b100:	2a20      	cmp	r2, #32
 800b102:	d818      	bhi.n	800b136 <__hexnan+0x7e>
 800b104:	9b02      	ldr	r3, [sp, #8]
 800b106:	459b      	cmp	fp, r3
 800b108:	dd13      	ble.n	800b132 <__hexnan+0x7a>
 800b10a:	454c      	cmp	r4, r9
 800b10c:	d206      	bcs.n	800b11c <__hexnan+0x64>
 800b10e:	2d07      	cmp	r5, #7
 800b110:	dc04      	bgt.n	800b11c <__hexnan+0x64>
 800b112:	462a      	mov	r2, r5
 800b114:	4649      	mov	r1, r9
 800b116:	4620      	mov	r0, r4
 800b118:	f7ff ffa8 	bl	800b06c <L_shift>
 800b11c:	4544      	cmp	r4, r8
 800b11e:	d950      	bls.n	800b1c2 <__hexnan+0x10a>
 800b120:	2300      	movs	r3, #0
 800b122:	f1a4 0904 	sub.w	r9, r4, #4
 800b126:	f844 3c04 	str.w	r3, [r4, #-4]
 800b12a:	f8cd b008 	str.w	fp, [sp, #8]
 800b12e:	464c      	mov	r4, r9
 800b130:	461d      	mov	r5, r3
 800b132:	9903      	ldr	r1, [sp, #12]
 800b134:	e7d7      	b.n	800b0e6 <__hexnan+0x2e>
 800b136:	2a29      	cmp	r2, #41	; 0x29
 800b138:	d156      	bne.n	800b1e8 <__hexnan+0x130>
 800b13a:	3102      	adds	r1, #2
 800b13c:	f8ca 1000 	str.w	r1, [sl]
 800b140:	f1bb 0f00 	cmp.w	fp, #0
 800b144:	d050      	beq.n	800b1e8 <__hexnan+0x130>
 800b146:	454c      	cmp	r4, r9
 800b148:	d206      	bcs.n	800b158 <__hexnan+0xa0>
 800b14a:	2d07      	cmp	r5, #7
 800b14c:	dc04      	bgt.n	800b158 <__hexnan+0xa0>
 800b14e:	462a      	mov	r2, r5
 800b150:	4649      	mov	r1, r9
 800b152:	4620      	mov	r0, r4
 800b154:	f7ff ff8a 	bl	800b06c <L_shift>
 800b158:	4544      	cmp	r4, r8
 800b15a:	d934      	bls.n	800b1c6 <__hexnan+0x10e>
 800b15c:	f1a8 0204 	sub.w	r2, r8, #4
 800b160:	4623      	mov	r3, r4
 800b162:	f853 1b04 	ldr.w	r1, [r3], #4
 800b166:	f842 1f04 	str.w	r1, [r2, #4]!
 800b16a:	429f      	cmp	r7, r3
 800b16c:	d2f9      	bcs.n	800b162 <__hexnan+0xaa>
 800b16e:	1b3b      	subs	r3, r7, r4
 800b170:	f023 0303 	bic.w	r3, r3, #3
 800b174:	3304      	adds	r3, #4
 800b176:	3401      	adds	r4, #1
 800b178:	3e03      	subs	r6, #3
 800b17a:	42b4      	cmp	r4, r6
 800b17c:	bf88      	it	hi
 800b17e:	2304      	movhi	r3, #4
 800b180:	4443      	add	r3, r8
 800b182:	2200      	movs	r2, #0
 800b184:	f843 2b04 	str.w	r2, [r3], #4
 800b188:	429f      	cmp	r7, r3
 800b18a:	d2fb      	bcs.n	800b184 <__hexnan+0xcc>
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	b91b      	cbnz	r3, 800b198 <__hexnan+0xe0>
 800b190:	4547      	cmp	r7, r8
 800b192:	d127      	bne.n	800b1e4 <__hexnan+0x12c>
 800b194:	2301      	movs	r3, #1
 800b196:	603b      	str	r3, [r7, #0]
 800b198:	2005      	movs	r0, #5
 800b19a:	e026      	b.n	800b1ea <__hexnan+0x132>
 800b19c:	3501      	adds	r5, #1
 800b19e:	2d08      	cmp	r5, #8
 800b1a0:	f10b 0b01 	add.w	fp, fp, #1
 800b1a4:	dd06      	ble.n	800b1b4 <__hexnan+0xfc>
 800b1a6:	4544      	cmp	r4, r8
 800b1a8:	d9c3      	bls.n	800b132 <__hexnan+0x7a>
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1b0:	2501      	movs	r5, #1
 800b1b2:	3c04      	subs	r4, #4
 800b1b4:	6822      	ldr	r2, [r4, #0]
 800b1b6:	f000 000f 	and.w	r0, r0, #15
 800b1ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b1be:	6022      	str	r2, [r4, #0]
 800b1c0:	e7b7      	b.n	800b132 <__hexnan+0x7a>
 800b1c2:	2508      	movs	r5, #8
 800b1c4:	e7b5      	b.n	800b132 <__hexnan+0x7a>
 800b1c6:	9b01      	ldr	r3, [sp, #4]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d0df      	beq.n	800b18c <__hexnan+0xd4>
 800b1cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b1d0:	f1c3 0320 	rsb	r3, r3, #32
 800b1d4:	fa22 f303 	lsr.w	r3, r2, r3
 800b1d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b1dc:	401a      	ands	r2, r3
 800b1de:	f846 2c04 	str.w	r2, [r6, #-4]
 800b1e2:	e7d3      	b.n	800b18c <__hexnan+0xd4>
 800b1e4:	3f04      	subs	r7, #4
 800b1e6:	e7d1      	b.n	800b18c <__hexnan+0xd4>
 800b1e8:	2004      	movs	r0, #4
 800b1ea:	b007      	add	sp, #28
 800b1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b1f0 <_localeconv_r>:
 800b1f0:	4800      	ldr	r0, [pc, #0]	; (800b1f4 <_localeconv_r+0x4>)
 800b1f2:	4770      	bx	lr
 800b1f4:	20000168 	.word	0x20000168

0800b1f8 <__retarget_lock_init_recursive>:
 800b1f8:	4770      	bx	lr

0800b1fa <__retarget_lock_acquire_recursive>:
 800b1fa:	4770      	bx	lr

0800b1fc <__retarget_lock_release_recursive>:
 800b1fc:	4770      	bx	lr

0800b1fe <__swhatbuf_r>:
 800b1fe:	b570      	push	{r4, r5, r6, lr}
 800b200:	460e      	mov	r6, r1
 800b202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b206:	2900      	cmp	r1, #0
 800b208:	b096      	sub	sp, #88	; 0x58
 800b20a:	4614      	mov	r4, r2
 800b20c:	461d      	mov	r5, r3
 800b20e:	da07      	bge.n	800b220 <__swhatbuf_r+0x22>
 800b210:	2300      	movs	r3, #0
 800b212:	602b      	str	r3, [r5, #0]
 800b214:	89b3      	ldrh	r3, [r6, #12]
 800b216:	061a      	lsls	r2, r3, #24
 800b218:	d410      	bmi.n	800b23c <__swhatbuf_r+0x3e>
 800b21a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b21e:	e00e      	b.n	800b23e <__swhatbuf_r+0x40>
 800b220:	466a      	mov	r2, sp
 800b222:	f001 f9b9 	bl	800c598 <_fstat_r>
 800b226:	2800      	cmp	r0, #0
 800b228:	dbf2      	blt.n	800b210 <__swhatbuf_r+0x12>
 800b22a:	9a01      	ldr	r2, [sp, #4]
 800b22c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b230:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b234:	425a      	negs	r2, r3
 800b236:	415a      	adcs	r2, r3
 800b238:	602a      	str	r2, [r5, #0]
 800b23a:	e7ee      	b.n	800b21a <__swhatbuf_r+0x1c>
 800b23c:	2340      	movs	r3, #64	; 0x40
 800b23e:	2000      	movs	r0, #0
 800b240:	6023      	str	r3, [r4, #0]
 800b242:	b016      	add	sp, #88	; 0x58
 800b244:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b248 <__smakebuf_r>:
 800b248:	898b      	ldrh	r3, [r1, #12]
 800b24a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b24c:	079d      	lsls	r5, r3, #30
 800b24e:	4606      	mov	r6, r0
 800b250:	460c      	mov	r4, r1
 800b252:	d507      	bpl.n	800b264 <__smakebuf_r+0x1c>
 800b254:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	6123      	str	r3, [r4, #16]
 800b25c:	2301      	movs	r3, #1
 800b25e:	6163      	str	r3, [r4, #20]
 800b260:	b002      	add	sp, #8
 800b262:	bd70      	pop	{r4, r5, r6, pc}
 800b264:	ab01      	add	r3, sp, #4
 800b266:	466a      	mov	r2, sp
 800b268:	f7ff ffc9 	bl	800b1fe <__swhatbuf_r>
 800b26c:	9900      	ldr	r1, [sp, #0]
 800b26e:	4605      	mov	r5, r0
 800b270:	4630      	mov	r0, r6
 800b272:	f000 fd6d 	bl	800bd50 <_malloc_r>
 800b276:	b948      	cbnz	r0, 800b28c <__smakebuf_r+0x44>
 800b278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b27c:	059a      	lsls	r2, r3, #22
 800b27e:	d4ef      	bmi.n	800b260 <__smakebuf_r+0x18>
 800b280:	f023 0303 	bic.w	r3, r3, #3
 800b284:	f043 0302 	orr.w	r3, r3, #2
 800b288:	81a3      	strh	r3, [r4, #12]
 800b28a:	e7e3      	b.n	800b254 <__smakebuf_r+0xc>
 800b28c:	4b0d      	ldr	r3, [pc, #52]	; (800b2c4 <__smakebuf_r+0x7c>)
 800b28e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b290:	89a3      	ldrh	r3, [r4, #12]
 800b292:	6020      	str	r0, [r4, #0]
 800b294:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b298:	81a3      	strh	r3, [r4, #12]
 800b29a:	9b00      	ldr	r3, [sp, #0]
 800b29c:	6163      	str	r3, [r4, #20]
 800b29e:	9b01      	ldr	r3, [sp, #4]
 800b2a0:	6120      	str	r0, [r4, #16]
 800b2a2:	b15b      	cbz	r3, 800b2bc <__smakebuf_r+0x74>
 800b2a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	f001 f987 	bl	800c5bc <_isatty_r>
 800b2ae:	b128      	cbz	r0, 800b2bc <__smakebuf_r+0x74>
 800b2b0:	89a3      	ldrh	r3, [r4, #12]
 800b2b2:	f023 0303 	bic.w	r3, r3, #3
 800b2b6:	f043 0301 	orr.w	r3, r3, #1
 800b2ba:	81a3      	strh	r3, [r4, #12]
 800b2bc:	89a0      	ldrh	r0, [r4, #12]
 800b2be:	4305      	orrs	r5, r0
 800b2c0:	81a5      	strh	r5, [r4, #12]
 800b2c2:	e7cd      	b.n	800b260 <__smakebuf_r+0x18>
 800b2c4:	0800a971 	.word	0x0800a971

0800b2c8 <malloc>:
 800b2c8:	4b02      	ldr	r3, [pc, #8]	; (800b2d4 <malloc+0xc>)
 800b2ca:	4601      	mov	r1, r0
 800b2cc:	6818      	ldr	r0, [r3, #0]
 800b2ce:	f000 bd3f 	b.w	800bd50 <_malloc_r>
 800b2d2:	bf00      	nop
 800b2d4:	20000010 	.word	0x20000010

0800b2d8 <__ascii_mbtowc>:
 800b2d8:	b082      	sub	sp, #8
 800b2da:	b901      	cbnz	r1, 800b2de <__ascii_mbtowc+0x6>
 800b2dc:	a901      	add	r1, sp, #4
 800b2de:	b142      	cbz	r2, 800b2f2 <__ascii_mbtowc+0x1a>
 800b2e0:	b14b      	cbz	r3, 800b2f6 <__ascii_mbtowc+0x1e>
 800b2e2:	7813      	ldrb	r3, [r2, #0]
 800b2e4:	600b      	str	r3, [r1, #0]
 800b2e6:	7812      	ldrb	r2, [r2, #0]
 800b2e8:	1e10      	subs	r0, r2, #0
 800b2ea:	bf18      	it	ne
 800b2ec:	2001      	movne	r0, #1
 800b2ee:	b002      	add	sp, #8
 800b2f0:	4770      	bx	lr
 800b2f2:	4610      	mov	r0, r2
 800b2f4:	e7fb      	b.n	800b2ee <__ascii_mbtowc+0x16>
 800b2f6:	f06f 0001 	mvn.w	r0, #1
 800b2fa:	e7f8      	b.n	800b2ee <__ascii_mbtowc+0x16>

0800b2fc <memcpy>:
 800b2fc:	440a      	add	r2, r1
 800b2fe:	4291      	cmp	r1, r2
 800b300:	f100 33ff 	add.w	r3, r0, #4294967295
 800b304:	d100      	bne.n	800b308 <memcpy+0xc>
 800b306:	4770      	bx	lr
 800b308:	b510      	push	{r4, lr}
 800b30a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b30e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b312:	4291      	cmp	r1, r2
 800b314:	d1f9      	bne.n	800b30a <memcpy+0xe>
 800b316:	bd10      	pop	{r4, pc}

0800b318 <_Balloc>:
 800b318:	b570      	push	{r4, r5, r6, lr}
 800b31a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b31c:	4604      	mov	r4, r0
 800b31e:	460d      	mov	r5, r1
 800b320:	b976      	cbnz	r6, 800b340 <_Balloc+0x28>
 800b322:	2010      	movs	r0, #16
 800b324:	f7ff ffd0 	bl	800b2c8 <malloc>
 800b328:	4602      	mov	r2, r0
 800b32a:	6260      	str	r0, [r4, #36]	; 0x24
 800b32c:	b920      	cbnz	r0, 800b338 <_Balloc+0x20>
 800b32e:	4b18      	ldr	r3, [pc, #96]	; (800b390 <_Balloc+0x78>)
 800b330:	4818      	ldr	r0, [pc, #96]	; (800b394 <_Balloc+0x7c>)
 800b332:	2166      	movs	r1, #102	; 0x66
 800b334:	f001 f8f0 	bl	800c518 <__assert_func>
 800b338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b33c:	6006      	str	r6, [r0, #0]
 800b33e:	60c6      	str	r6, [r0, #12]
 800b340:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b342:	68f3      	ldr	r3, [r6, #12]
 800b344:	b183      	cbz	r3, 800b368 <_Balloc+0x50>
 800b346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b34e:	b9b8      	cbnz	r0, 800b380 <_Balloc+0x68>
 800b350:	2101      	movs	r1, #1
 800b352:	fa01 f605 	lsl.w	r6, r1, r5
 800b356:	1d72      	adds	r2, r6, #5
 800b358:	0092      	lsls	r2, r2, #2
 800b35a:	4620      	mov	r0, r4
 800b35c:	f000 fc98 	bl	800bc90 <_calloc_r>
 800b360:	b160      	cbz	r0, 800b37c <_Balloc+0x64>
 800b362:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b366:	e00e      	b.n	800b386 <_Balloc+0x6e>
 800b368:	2221      	movs	r2, #33	; 0x21
 800b36a:	2104      	movs	r1, #4
 800b36c:	4620      	mov	r0, r4
 800b36e:	f000 fc8f 	bl	800bc90 <_calloc_r>
 800b372:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b374:	60f0      	str	r0, [r6, #12]
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d1e4      	bne.n	800b346 <_Balloc+0x2e>
 800b37c:	2000      	movs	r0, #0
 800b37e:	bd70      	pop	{r4, r5, r6, pc}
 800b380:	6802      	ldr	r2, [r0, #0]
 800b382:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b386:	2300      	movs	r3, #0
 800b388:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b38c:	e7f7      	b.n	800b37e <_Balloc+0x66>
 800b38e:	bf00      	nop
 800b390:	0800ceee 	.word	0x0800ceee
 800b394:	0800d058 	.word	0x0800d058

0800b398 <_Bfree>:
 800b398:	b570      	push	{r4, r5, r6, lr}
 800b39a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b39c:	4605      	mov	r5, r0
 800b39e:	460c      	mov	r4, r1
 800b3a0:	b976      	cbnz	r6, 800b3c0 <_Bfree+0x28>
 800b3a2:	2010      	movs	r0, #16
 800b3a4:	f7ff ff90 	bl	800b2c8 <malloc>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	6268      	str	r0, [r5, #36]	; 0x24
 800b3ac:	b920      	cbnz	r0, 800b3b8 <_Bfree+0x20>
 800b3ae:	4b09      	ldr	r3, [pc, #36]	; (800b3d4 <_Bfree+0x3c>)
 800b3b0:	4809      	ldr	r0, [pc, #36]	; (800b3d8 <_Bfree+0x40>)
 800b3b2:	218a      	movs	r1, #138	; 0x8a
 800b3b4:	f001 f8b0 	bl	800c518 <__assert_func>
 800b3b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3bc:	6006      	str	r6, [r0, #0]
 800b3be:	60c6      	str	r6, [r0, #12]
 800b3c0:	b13c      	cbz	r4, 800b3d2 <_Bfree+0x3a>
 800b3c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b3c4:	6862      	ldr	r2, [r4, #4]
 800b3c6:	68db      	ldr	r3, [r3, #12]
 800b3c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b3cc:	6021      	str	r1, [r4, #0]
 800b3ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b3d2:	bd70      	pop	{r4, r5, r6, pc}
 800b3d4:	0800ceee 	.word	0x0800ceee
 800b3d8:	0800d058 	.word	0x0800d058

0800b3dc <__multadd>:
 800b3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3e0:	690e      	ldr	r6, [r1, #16]
 800b3e2:	4607      	mov	r7, r0
 800b3e4:	4698      	mov	r8, r3
 800b3e6:	460c      	mov	r4, r1
 800b3e8:	f101 0014 	add.w	r0, r1, #20
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	6805      	ldr	r5, [r0, #0]
 800b3f0:	b2a9      	uxth	r1, r5
 800b3f2:	fb02 8101 	mla	r1, r2, r1, r8
 800b3f6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b3fa:	0c2d      	lsrs	r5, r5, #16
 800b3fc:	fb02 c505 	mla	r5, r2, r5, ip
 800b400:	b289      	uxth	r1, r1
 800b402:	3301      	adds	r3, #1
 800b404:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b408:	429e      	cmp	r6, r3
 800b40a:	f840 1b04 	str.w	r1, [r0], #4
 800b40e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b412:	dcec      	bgt.n	800b3ee <__multadd+0x12>
 800b414:	f1b8 0f00 	cmp.w	r8, #0
 800b418:	d022      	beq.n	800b460 <__multadd+0x84>
 800b41a:	68a3      	ldr	r3, [r4, #8]
 800b41c:	42b3      	cmp	r3, r6
 800b41e:	dc19      	bgt.n	800b454 <__multadd+0x78>
 800b420:	6861      	ldr	r1, [r4, #4]
 800b422:	4638      	mov	r0, r7
 800b424:	3101      	adds	r1, #1
 800b426:	f7ff ff77 	bl	800b318 <_Balloc>
 800b42a:	4605      	mov	r5, r0
 800b42c:	b928      	cbnz	r0, 800b43a <__multadd+0x5e>
 800b42e:	4602      	mov	r2, r0
 800b430:	4b0d      	ldr	r3, [pc, #52]	; (800b468 <__multadd+0x8c>)
 800b432:	480e      	ldr	r0, [pc, #56]	; (800b46c <__multadd+0x90>)
 800b434:	21b5      	movs	r1, #181	; 0xb5
 800b436:	f001 f86f 	bl	800c518 <__assert_func>
 800b43a:	6922      	ldr	r2, [r4, #16]
 800b43c:	3202      	adds	r2, #2
 800b43e:	f104 010c 	add.w	r1, r4, #12
 800b442:	0092      	lsls	r2, r2, #2
 800b444:	300c      	adds	r0, #12
 800b446:	f7ff ff59 	bl	800b2fc <memcpy>
 800b44a:	4621      	mov	r1, r4
 800b44c:	4638      	mov	r0, r7
 800b44e:	f7ff ffa3 	bl	800b398 <_Bfree>
 800b452:	462c      	mov	r4, r5
 800b454:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b458:	3601      	adds	r6, #1
 800b45a:	f8c3 8014 	str.w	r8, [r3, #20]
 800b45e:	6126      	str	r6, [r4, #16]
 800b460:	4620      	mov	r0, r4
 800b462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b466:	bf00      	nop
 800b468:	0800cf64 	.word	0x0800cf64
 800b46c:	0800d058 	.word	0x0800d058

0800b470 <__s2b>:
 800b470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b474:	460c      	mov	r4, r1
 800b476:	4615      	mov	r5, r2
 800b478:	461f      	mov	r7, r3
 800b47a:	2209      	movs	r2, #9
 800b47c:	3308      	adds	r3, #8
 800b47e:	4606      	mov	r6, r0
 800b480:	fb93 f3f2 	sdiv	r3, r3, r2
 800b484:	2100      	movs	r1, #0
 800b486:	2201      	movs	r2, #1
 800b488:	429a      	cmp	r2, r3
 800b48a:	db09      	blt.n	800b4a0 <__s2b+0x30>
 800b48c:	4630      	mov	r0, r6
 800b48e:	f7ff ff43 	bl	800b318 <_Balloc>
 800b492:	b940      	cbnz	r0, 800b4a6 <__s2b+0x36>
 800b494:	4602      	mov	r2, r0
 800b496:	4b19      	ldr	r3, [pc, #100]	; (800b4fc <__s2b+0x8c>)
 800b498:	4819      	ldr	r0, [pc, #100]	; (800b500 <__s2b+0x90>)
 800b49a:	21ce      	movs	r1, #206	; 0xce
 800b49c:	f001 f83c 	bl	800c518 <__assert_func>
 800b4a0:	0052      	lsls	r2, r2, #1
 800b4a2:	3101      	adds	r1, #1
 800b4a4:	e7f0      	b.n	800b488 <__s2b+0x18>
 800b4a6:	9b08      	ldr	r3, [sp, #32]
 800b4a8:	6143      	str	r3, [r0, #20]
 800b4aa:	2d09      	cmp	r5, #9
 800b4ac:	f04f 0301 	mov.w	r3, #1
 800b4b0:	6103      	str	r3, [r0, #16]
 800b4b2:	dd16      	ble.n	800b4e2 <__s2b+0x72>
 800b4b4:	f104 0909 	add.w	r9, r4, #9
 800b4b8:	46c8      	mov	r8, r9
 800b4ba:	442c      	add	r4, r5
 800b4bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b4c0:	4601      	mov	r1, r0
 800b4c2:	3b30      	subs	r3, #48	; 0x30
 800b4c4:	220a      	movs	r2, #10
 800b4c6:	4630      	mov	r0, r6
 800b4c8:	f7ff ff88 	bl	800b3dc <__multadd>
 800b4cc:	45a0      	cmp	r8, r4
 800b4ce:	d1f5      	bne.n	800b4bc <__s2b+0x4c>
 800b4d0:	f1a5 0408 	sub.w	r4, r5, #8
 800b4d4:	444c      	add	r4, r9
 800b4d6:	1b2d      	subs	r5, r5, r4
 800b4d8:	1963      	adds	r3, r4, r5
 800b4da:	42bb      	cmp	r3, r7
 800b4dc:	db04      	blt.n	800b4e8 <__s2b+0x78>
 800b4de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4e2:	340a      	adds	r4, #10
 800b4e4:	2509      	movs	r5, #9
 800b4e6:	e7f6      	b.n	800b4d6 <__s2b+0x66>
 800b4e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b4ec:	4601      	mov	r1, r0
 800b4ee:	3b30      	subs	r3, #48	; 0x30
 800b4f0:	220a      	movs	r2, #10
 800b4f2:	4630      	mov	r0, r6
 800b4f4:	f7ff ff72 	bl	800b3dc <__multadd>
 800b4f8:	e7ee      	b.n	800b4d8 <__s2b+0x68>
 800b4fa:	bf00      	nop
 800b4fc:	0800cf64 	.word	0x0800cf64
 800b500:	0800d058 	.word	0x0800d058

0800b504 <__hi0bits>:
 800b504:	0c03      	lsrs	r3, r0, #16
 800b506:	041b      	lsls	r3, r3, #16
 800b508:	b9d3      	cbnz	r3, 800b540 <__hi0bits+0x3c>
 800b50a:	0400      	lsls	r0, r0, #16
 800b50c:	2310      	movs	r3, #16
 800b50e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b512:	bf04      	itt	eq
 800b514:	0200      	lsleq	r0, r0, #8
 800b516:	3308      	addeq	r3, #8
 800b518:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b51c:	bf04      	itt	eq
 800b51e:	0100      	lsleq	r0, r0, #4
 800b520:	3304      	addeq	r3, #4
 800b522:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b526:	bf04      	itt	eq
 800b528:	0080      	lsleq	r0, r0, #2
 800b52a:	3302      	addeq	r3, #2
 800b52c:	2800      	cmp	r0, #0
 800b52e:	db05      	blt.n	800b53c <__hi0bits+0x38>
 800b530:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b534:	f103 0301 	add.w	r3, r3, #1
 800b538:	bf08      	it	eq
 800b53a:	2320      	moveq	r3, #32
 800b53c:	4618      	mov	r0, r3
 800b53e:	4770      	bx	lr
 800b540:	2300      	movs	r3, #0
 800b542:	e7e4      	b.n	800b50e <__hi0bits+0xa>

0800b544 <__lo0bits>:
 800b544:	6803      	ldr	r3, [r0, #0]
 800b546:	f013 0207 	ands.w	r2, r3, #7
 800b54a:	4601      	mov	r1, r0
 800b54c:	d00b      	beq.n	800b566 <__lo0bits+0x22>
 800b54e:	07da      	lsls	r2, r3, #31
 800b550:	d424      	bmi.n	800b59c <__lo0bits+0x58>
 800b552:	0798      	lsls	r0, r3, #30
 800b554:	bf49      	itett	mi
 800b556:	085b      	lsrmi	r3, r3, #1
 800b558:	089b      	lsrpl	r3, r3, #2
 800b55a:	2001      	movmi	r0, #1
 800b55c:	600b      	strmi	r3, [r1, #0]
 800b55e:	bf5c      	itt	pl
 800b560:	600b      	strpl	r3, [r1, #0]
 800b562:	2002      	movpl	r0, #2
 800b564:	4770      	bx	lr
 800b566:	b298      	uxth	r0, r3
 800b568:	b9b0      	cbnz	r0, 800b598 <__lo0bits+0x54>
 800b56a:	0c1b      	lsrs	r3, r3, #16
 800b56c:	2010      	movs	r0, #16
 800b56e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b572:	bf04      	itt	eq
 800b574:	0a1b      	lsreq	r3, r3, #8
 800b576:	3008      	addeq	r0, #8
 800b578:	071a      	lsls	r2, r3, #28
 800b57a:	bf04      	itt	eq
 800b57c:	091b      	lsreq	r3, r3, #4
 800b57e:	3004      	addeq	r0, #4
 800b580:	079a      	lsls	r2, r3, #30
 800b582:	bf04      	itt	eq
 800b584:	089b      	lsreq	r3, r3, #2
 800b586:	3002      	addeq	r0, #2
 800b588:	07da      	lsls	r2, r3, #31
 800b58a:	d403      	bmi.n	800b594 <__lo0bits+0x50>
 800b58c:	085b      	lsrs	r3, r3, #1
 800b58e:	f100 0001 	add.w	r0, r0, #1
 800b592:	d005      	beq.n	800b5a0 <__lo0bits+0x5c>
 800b594:	600b      	str	r3, [r1, #0]
 800b596:	4770      	bx	lr
 800b598:	4610      	mov	r0, r2
 800b59a:	e7e8      	b.n	800b56e <__lo0bits+0x2a>
 800b59c:	2000      	movs	r0, #0
 800b59e:	4770      	bx	lr
 800b5a0:	2020      	movs	r0, #32
 800b5a2:	4770      	bx	lr

0800b5a4 <__i2b>:
 800b5a4:	b510      	push	{r4, lr}
 800b5a6:	460c      	mov	r4, r1
 800b5a8:	2101      	movs	r1, #1
 800b5aa:	f7ff feb5 	bl	800b318 <_Balloc>
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	b928      	cbnz	r0, 800b5be <__i2b+0x1a>
 800b5b2:	4b05      	ldr	r3, [pc, #20]	; (800b5c8 <__i2b+0x24>)
 800b5b4:	4805      	ldr	r0, [pc, #20]	; (800b5cc <__i2b+0x28>)
 800b5b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b5ba:	f000 ffad 	bl	800c518 <__assert_func>
 800b5be:	2301      	movs	r3, #1
 800b5c0:	6144      	str	r4, [r0, #20]
 800b5c2:	6103      	str	r3, [r0, #16]
 800b5c4:	bd10      	pop	{r4, pc}
 800b5c6:	bf00      	nop
 800b5c8:	0800cf64 	.word	0x0800cf64
 800b5cc:	0800d058 	.word	0x0800d058

0800b5d0 <__multiply>:
 800b5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d4:	4614      	mov	r4, r2
 800b5d6:	690a      	ldr	r2, [r1, #16]
 800b5d8:	6923      	ldr	r3, [r4, #16]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	bfb8      	it	lt
 800b5de:	460b      	movlt	r3, r1
 800b5e0:	460d      	mov	r5, r1
 800b5e2:	bfbc      	itt	lt
 800b5e4:	4625      	movlt	r5, r4
 800b5e6:	461c      	movlt	r4, r3
 800b5e8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b5ec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b5f0:	68ab      	ldr	r3, [r5, #8]
 800b5f2:	6869      	ldr	r1, [r5, #4]
 800b5f4:	eb0a 0709 	add.w	r7, sl, r9
 800b5f8:	42bb      	cmp	r3, r7
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	bfb8      	it	lt
 800b5fe:	3101      	addlt	r1, #1
 800b600:	f7ff fe8a 	bl	800b318 <_Balloc>
 800b604:	b930      	cbnz	r0, 800b614 <__multiply+0x44>
 800b606:	4602      	mov	r2, r0
 800b608:	4b42      	ldr	r3, [pc, #264]	; (800b714 <__multiply+0x144>)
 800b60a:	4843      	ldr	r0, [pc, #268]	; (800b718 <__multiply+0x148>)
 800b60c:	f240 115d 	movw	r1, #349	; 0x15d
 800b610:	f000 ff82 	bl	800c518 <__assert_func>
 800b614:	f100 0614 	add.w	r6, r0, #20
 800b618:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b61c:	4633      	mov	r3, r6
 800b61e:	2200      	movs	r2, #0
 800b620:	4543      	cmp	r3, r8
 800b622:	d31e      	bcc.n	800b662 <__multiply+0x92>
 800b624:	f105 0c14 	add.w	ip, r5, #20
 800b628:	f104 0314 	add.w	r3, r4, #20
 800b62c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b630:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b634:	9202      	str	r2, [sp, #8]
 800b636:	ebac 0205 	sub.w	r2, ip, r5
 800b63a:	3a15      	subs	r2, #21
 800b63c:	f022 0203 	bic.w	r2, r2, #3
 800b640:	3204      	adds	r2, #4
 800b642:	f105 0115 	add.w	r1, r5, #21
 800b646:	458c      	cmp	ip, r1
 800b648:	bf38      	it	cc
 800b64a:	2204      	movcc	r2, #4
 800b64c:	9201      	str	r2, [sp, #4]
 800b64e:	9a02      	ldr	r2, [sp, #8]
 800b650:	9303      	str	r3, [sp, #12]
 800b652:	429a      	cmp	r2, r3
 800b654:	d808      	bhi.n	800b668 <__multiply+0x98>
 800b656:	2f00      	cmp	r7, #0
 800b658:	dc55      	bgt.n	800b706 <__multiply+0x136>
 800b65a:	6107      	str	r7, [r0, #16]
 800b65c:	b005      	add	sp, #20
 800b65e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b662:	f843 2b04 	str.w	r2, [r3], #4
 800b666:	e7db      	b.n	800b620 <__multiply+0x50>
 800b668:	f8b3 a000 	ldrh.w	sl, [r3]
 800b66c:	f1ba 0f00 	cmp.w	sl, #0
 800b670:	d020      	beq.n	800b6b4 <__multiply+0xe4>
 800b672:	f105 0e14 	add.w	lr, r5, #20
 800b676:	46b1      	mov	r9, r6
 800b678:	2200      	movs	r2, #0
 800b67a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b67e:	f8d9 b000 	ldr.w	fp, [r9]
 800b682:	b2a1      	uxth	r1, r4
 800b684:	fa1f fb8b 	uxth.w	fp, fp
 800b688:	fb0a b101 	mla	r1, sl, r1, fp
 800b68c:	4411      	add	r1, r2
 800b68e:	f8d9 2000 	ldr.w	r2, [r9]
 800b692:	0c24      	lsrs	r4, r4, #16
 800b694:	0c12      	lsrs	r2, r2, #16
 800b696:	fb0a 2404 	mla	r4, sl, r4, r2
 800b69a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b69e:	b289      	uxth	r1, r1
 800b6a0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b6a4:	45f4      	cmp	ip, lr
 800b6a6:	f849 1b04 	str.w	r1, [r9], #4
 800b6aa:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b6ae:	d8e4      	bhi.n	800b67a <__multiply+0xaa>
 800b6b0:	9901      	ldr	r1, [sp, #4]
 800b6b2:	5072      	str	r2, [r6, r1]
 800b6b4:	9a03      	ldr	r2, [sp, #12]
 800b6b6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b6ba:	3304      	adds	r3, #4
 800b6bc:	f1b9 0f00 	cmp.w	r9, #0
 800b6c0:	d01f      	beq.n	800b702 <__multiply+0x132>
 800b6c2:	6834      	ldr	r4, [r6, #0]
 800b6c4:	f105 0114 	add.w	r1, r5, #20
 800b6c8:	46b6      	mov	lr, r6
 800b6ca:	f04f 0a00 	mov.w	sl, #0
 800b6ce:	880a      	ldrh	r2, [r1, #0]
 800b6d0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b6d4:	fb09 b202 	mla	r2, r9, r2, fp
 800b6d8:	4492      	add	sl, r2
 800b6da:	b2a4      	uxth	r4, r4
 800b6dc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b6e0:	f84e 4b04 	str.w	r4, [lr], #4
 800b6e4:	f851 4b04 	ldr.w	r4, [r1], #4
 800b6e8:	f8be 2000 	ldrh.w	r2, [lr]
 800b6ec:	0c24      	lsrs	r4, r4, #16
 800b6ee:	fb09 2404 	mla	r4, r9, r4, r2
 800b6f2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b6f6:	458c      	cmp	ip, r1
 800b6f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b6fc:	d8e7      	bhi.n	800b6ce <__multiply+0xfe>
 800b6fe:	9a01      	ldr	r2, [sp, #4]
 800b700:	50b4      	str	r4, [r6, r2]
 800b702:	3604      	adds	r6, #4
 800b704:	e7a3      	b.n	800b64e <__multiply+0x7e>
 800b706:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d1a5      	bne.n	800b65a <__multiply+0x8a>
 800b70e:	3f01      	subs	r7, #1
 800b710:	e7a1      	b.n	800b656 <__multiply+0x86>
 800b712:	bf00      	nop
 800b714:	0800cf64 	.word	0x0800cf64
 800b718:	0800d058 	.word	0x0800d058

0800b71c <__pow5mult>:
 800b71c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b720:	4615      	mov	r5, r2
 800b722:	f012 0203 	ands.w	r2, r2, #3
 800b726:	4606      	mov	r6, r0
 800b728:	460f      	mov	r7, r1
 800b72a:	d007      	beq.n	800b73c <__pow5mult+0x20>
 800b72c:	4c25      	ldr	r4, [pc, #148]	; (800b7c4 <__pow5mult+0xa8>)
 800b72e:	3a01      	subs	r2, #1
 800b730:	2300      	movs	r3, #0
 800b732:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b736:	f7ff fe51 	bl	800b3dc <__multadd>
 800b73a:	4607      	mov	r7, r0
 800b73c:	10ad      	asrs	r5, r5, #2
 800b73e:	d03d      	beq.n	800b7bc <__pow5mult+0xa0>
 800b740:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b742:	b97c      	cbnz	r4, 800b764 <__pow5mult+0x48>
 800b744:	2010      	movs	r0, #16
 800b746:	f7ff fdbf 	bl	800b2c8 <malloc>
 800b74a:	4602      	mov	r2, r0
 800b74c:	6270      	str	r0, [r6, #36]	; 0x24
 800b74e:	b928      	cbnz	r0, 800b75c <__pow5mult+0x40>
 800b750:	4b1d      	ldr	r3, [pc, #116]	; (800b7c8 <__pow5mult+0xac>)
 800b752:	481e      	ldr	r0, [pc, #120]	; (800b7cc <__pow5mult+0xb0>)
 800b754:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b758:	f000 fede 	bl	800c518 <__assert_func>
 800b75c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b760:	6004      	str	r4, [r0, #0]
 800b762:	60c4      	str	r4, [r0, #12]
 800b764:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b768:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b76c:	b94c      	cbnz	r4, 800b782 <__pow5mult+0x66>
 800b76e:	f240 2171 	movw	r1, #625	; 0x271
 800b772:	4630      	mov	r0, r6
 800b774:	f7ff ff16 	bl	800b5a4 <__i2b>
 800b778:	2300      	movs	r3, #0
 800b77a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b77e:	4604      	mov	r4, r0
 800b780:	6003      	str	r3, [r0, #0]
 800b782:	f04f 0900 	mov.w	r9, #0
 800b786:	07eb      	lsls	r3, r5, #31
 800b788:	d50a      	bpl.n	800b7a0 <__pow5mult+0x84>
 800b78a:	4639      	mov	r1, r7
 800b78c:	4622      	mov	r2, r4
 800b78e:	4630      	mov	r0, r6
 800b790:	f7ff ff1e 	bl	800b5d0 <__multiply>
 800b794:	4639      	mov	r1, r7
 800b796:	4680      	mov	r8, r0
 800b798:	4630      	mov	r0, r6
 800b79a:	f7ff fdfd 	bl	800b398 <_Bfree>
 800b79e:	4647      	mov	r7, r8
 800b7a0:	106d      	asrs	r5, r5, #1
 800b7a2:	d00b      	beq.n	800b7bc <__pow5mult+0xa0>
 800b7a4:	6820      	ldr	r0, [r4, #0]
 800b7a6:	b938      	cbnz	r0, 800b7b8 <__pow5mult+0x9c>
 800b7a8:	4622      	mov	r2, r4
 800b7aa:	4621      	mov	r1, r4
 800b7ac:	4630      	mov	r0, r6
 800b7ae:	f7ff ff0f 	bl	800b5d0 <__multiply>
 800b7b2:	6020      	str	r0, [r4, #0]
 800b7b4:	f8c0 9000 	str.w	r9, [r0]
 800b7b8:	4604      	mov	r4, r0
 800b7ba:	e7e4      	b.n	800b786 <__pow5mult+0x6a>
 800b7bc:	4638      	mov	r0, r7
 800b7be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7c2:	bf00      	nop
 800b7c4:	0800d1a8 	.word	0x0800d1a8
 800b7c8:	0800ceee 	.word	0x0800ceee
 800b7cc:	0800d058 	.word	0x0800d058

0800b7d0 <__lshift>:
 800b7d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7d4:	460c      	mov	r4, r1
 800b7d6:	6849      	ldr	r1, [r1, #4]
 800b7d8:	6923      	ldr	r3, [r4, #16]
 800b7da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b7de:	68a3      	ldr	r3, [r4, #8]
 800b7e0:	4607      	mov	r7, r0
 800b7e2:	4691      	mov	r9, r2
 800b7e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7e8:	f108 0601 	add.w	r6, r8, #1
 800b7ec:	42b3      	cmp	r3, r6
 800b7ee:	db0b      	blt.n	800b808 <__lshift+0x38>
 800b7f0:	4638      	mov	r0, r7
 800b7f2:	f7ff fd91 	bl	800b318 <_Balloc>
 800b7f6:	4605      	mov	r5, r0
 800b7f8:	b948      	cbnz	r0, 800b80e <__lshift+0x3e>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	4b28      	ldr	r3, [pc, #160]	; (800b8a0 <__lshift+0xd0>)
 800b7fe:	4829      	ldr	r0, [pc, #164]	; (800b8a4 <__lshift+0xd4>)
 800b800:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b804:	f000 fe88 	bl	800c518 <__assert_func>
 800b808:	3101      	adds	r1, #1
 800b80a:	005b      	lsls	r3, r3, #1
 800b80c:	e7ee      	b.n	800b7ec <__lshift+0x1c>
 800b80e:	2300      	movs	r3, #0
 800b810:	f100 0114 	add.w	r1, r0, #20
 800b814:	f100 0210 	add.w	r2, r0, #16
 800b818:	4618      	mov	r0, r3
 800b81a:	4553      	cmp	r3, sl
 800b81c:	db33      	blt.n	800b886 <__lshift+0xb6>
 800b81e:	6920      	ldr	r0, [r4, #16]
 800b820:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b824:	f104 0314 	add.w	r3, r4, #20
 800b828:	f019 091f 	ands.w	r9, r9, #31
 800b82c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b830:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b834:	d02b      	beq.n	800b88e <__lshift+0xbe>
 800b836:	f1c9 0e20 	rsb	lr, r9, #32
 800b83a:	468a      	mov	sl, r1
 800b83c:	2200      	movs	r2, #0
 800b83e:	6818      	ldr	r0, [r3, #0]
 800b840:	fa00 f009 	lsl.w	r0, r0, r9
 800b844:	4302      	orrs	r2, r0
 800b846:	f84a 2b04 	str.w	r2, [sl], #4
 800b84a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b84e:	459c      	cmp	ip, r3
 800b850:	fa22 f20e 	lsr.w	r2, r2, lr
 800b854:	d8f3      	bhi.n	800b83e <__lshift+0x6e>
 800b856:	ebac 0304 	sub.w	r3, ip, r4
 800b85a:	3b15      	subs	r3, #21
 800b85c:	f023 0303 	bic.w	r3, r3, #3
 800b860:	3304      	adds	r3, #4
 800b862:	f104 0015 	add.w	r0, r4, #21
 800b866:	4584      	cmp	ip, r0
 800b868:	bf38      	it	cc
 800b86a:	2304      	movcc	r3, #4
 800b86c:	50ca      	str	r2, [r1, r3]
 800b86e:	b10a      	cbz	r2, 800b874 <__lshift+0xa4>
 800b870:	f108 0602 	add.w	r6, r8, #2
 800b874:	3e01      	subs	r6, #1
 800b876:	4638      	mov	r0, r7
 800b878:	612e      	str	r6, [r5, #16]
 800b87a:	4621      	mov	r1, r4
 800b87c:	f7ff fd8c 	bl	800b398 <_Bfree>
 800b880:	4628      	mov	r0, r5
 800b882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b886:	f842 0f04 	str.w	r0, [r2, #4]!
 800b88a:	3301      	adds	r3, #1
 800b88c:	e7c5      	b.n	800b81a <__lshift+0x4a>
 800b88e:	3904      	subs	r1, #4
 800b890:	f853 2b04 	ldr.w	r2, [r3], #4
 800b894:	f841 2f04 	str.w	r2, [r1, #4]!
 800b898:	459c      	cmp	ip, r3
 800b89a:	d8f9      	bhi.n	800b890 <__lshift+0xc0>
 800b89c:	e7ea      	b.n	800b874 <__lshift+0xa4>
 800b89e:	bf00      	nop
 800b8a0:	0800cf64 	.word	0x0800cf64
 800b8a4:	0800d058 	.word	0x0800d058

0800b8a8 <__mcmp>:
 800b8a8:	b530      	push	{r4, r5, lr}
 800b8aa:	6902      	ldr	r2, [r0, #16]
 800b8ac:	690c      	ldr	r4, [r1, #16]
 800b8ae:	1b12      	subs	r2, r2, r4
 800b8b0:	d10e      	bne.n	800b8d0 <__mcmp+0x28>
 800b8b2:	f100 0314 	add.w	r3, r0, #20
 800b8b6:	3114      	adds	r1, #20
 800b8b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b8bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b8c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b8c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b8c8:	42a5      	cmp	r5, r4
 800b8ca:	d003      	beq.n	800b8d4 <__mcmp+0x2c>
 800b8cc:	d305      	bcc.n	800b8da <__mcmp+0x32>
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	4610      	mov	r0, r2
 800b8d2:	bd30      	pop	{r4, r5, pc}
 800b8d4:	4283      	cmp	r3, r0
 800b8d6:	d3f3      	bcc.n	800b8c0 <__mcmp+0x18>
 800b8d8:	e7fa      	b.n	800b8d0 <__mcmp+0x28>
 800b8da:	f04f 32ff 	mov.w	r2, #4294967295
 800b8de:	e7f7      	b.n	800b8d0 <__mcmp+0x28>

0800b8e0 <__mdiff>:
 800b8e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8e4:	460c      	mov	r4, r1
 800b8e6:	4606      	mov	r6, r0
 800b8e8:	4611      	mov	r1, r2
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	4617      	mov	r7, r2
 800b8ee:	f7ff ffdb 	bl	800b8a8 <__mcmp>
 800b8f2:	1e05      	subs	r5, r0, #0
 800b8f4:	d110      	bne.n	800b918 <__mdiff+0x38>
 800b8f6:	4629      	mov	r1, r5
 800b8f8:	4630      	mov	r0, r6
 800b8fa:	f7ff fd0d 	bl	800b318 <_Balloc>
 800b8fe:	b930      	cbnz	r0, 800b90e <__mdiff+0x2e>
 800b900:	4b39      	ldr	r3, [pc, #228]	; (800b9e8 <__mdiff+0x108>)
 800b902:	4602      	mov	r2, r0
 800b904:	f240 2132 	movw	r1, #562	; 0x232
 800b908:	4838      	ldr	r0, [pc, #224]	; (800b9ec <__mdiff+0x10c>)
 800b90a:	f000 fe05 	bl	800c518 <__assert_func>
 800b90e:	2301      	movs	r3, #1
 800b910:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b914:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b918:	bfa4      	itt	ge
 800b91a:	463b      	movge	r3, r7
 800b91c:	4627      	movge	r7, r4
 800b91e:	4630      	mov	r0, r6
 800b920:	6879      	ldr	r1, [r7, #4]
 800b922:	bfa6      	itte	ge
 800b924:	461c      	movge	r4, r3
 800b926:	2500      	movge	r5, #0
 800b928:	2501      	movlt	r5, #1
 800b92a:	f7ff fcf5 	bl	800b318 <_Balloc>
 800b92e:	b920      	cbnz	r0, 800b93a <__mdiff+0x5a>
 800b930:	4b2d      	ldr	r3, [pc, #180]	; (800b9e8 <__mdiff+0x108>)
 800b932:	4602      	mov	r2, r0
 800b934:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b938:	e7e6      	b.n	800b908 <__mdiff+0x28>
 800b93a:	693e      	ldr	r6, [r7, #16]
 800b93c:	60c5      	str	r5, [r0, #12]
 800b93e:	6925      	ldr	r5, [r4, #16]
 800b940:	f107 0114 	add.w	r1, r7, #20
 800b944:	f104 0914 	add.w	r9, r4, #20
 800b948:	f100 0e14 	add.w	lr, r0, #20
 800b94c:	f107 0210 	add.w	r2, r7, #16
 800b950:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b954:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b958:	46f2      	mov	sl, lr
 800b95a:	2700      	movs	r7, #0
 800b95c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b960:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b964:	fa1f f883 	uxth.w	r8, r3
 800b968:	fa17 f78b 	uxtah	r7, r7, fp
 800b96c:	0c1b      	lsrs	r3, r3, #16
 800b96e:	eba7 0808 	sub.w	r8, r7, r8
 800b972:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b976:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b97a:	fa1f f888 	uxth.w	r8, r8
 800b97e:	141f      	asrs	r7, r3, #16
 800b980:	454d      	cmp	r5, r9
 800b982:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b986:	f84a 3b04 	str.w	r3, [sl], #4
 800b98a:	d8e7      	bhi.n	800b95c <__mdiff+0x7c>
 800b98c:	1b2b      	subs	r3, r5, r4
 800b98e:	3b15      	subs	r3, #21
 800b990:	f023 0303 	bic.w	r3, r3, #3
 800b994:	3304      	adds	r3, #4
 800b996:	3415      	adds	r4, #21
 800b998:	42a5      	cmp	r5, r4
 800b99a:	bf38      	it	cc
 800b99c:	2304      	movcc	r3, #4
 800b99e:	4419      	add	r1, r3
 800b9a0:	4473      	add	r3, lr
 800b9a2:	469e      	mov	lr, r3
 800b9a4:	460d      	mov	r5, r1
 800b9a6:	4565      	cmp	r5, ip
 800b9a8:	d30e      	bcc.n	800b9c8 <__mdiff+0xe8>
 800b9aa:	f10c 0203 	add.w	r2, ip, #3
 800b9ae:	1a52      	subs	r2, r2, r1
 800b9b0:	f022 0203 	bic.w	r2, r2, #3
 800b9b4:	3903      	subs	r1, #3
 800b9b6:	458c      	cmp	ip, r1
 800b9b8:	bf38      	it	cc
 800b9ba:	2200      	movcc	r2, #0
 800b9bc:	441a      	add	r2, r3
 800b9be:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b9c2:	b17b      	cbz	r3, 800b9e4 <__mdiff+0x104>
 800b9c4:	6106      	str	r6, [r0, #16]
 800b9c6:	e7a5      	b.n	800b914 <__mdiff+0x34>
 800b9c8:	f855 8b04 	ldr.w	r8, [r5], #4
 800b9cc:	fa17 f488 	uxtah	r4, r7, r8
 800b9d0:	1422      	asrs	r2, r4, #16
 800b9d2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b9d6:	b2a4      	uxth	r4, r4
 800b9d8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b9dc:	f84e 4b04 	str.w	r4, [lr], #4
 800b9e0:	1417      	asrs	r7, r2, #16
 800b9e2:	e7e0      	b.n	800b9a6 <__mdiff+0xc6>
 800b9e4:	3e01      	subs	r6, #1
 800b9e6:	e7ea      	b.n	800b9be <__mdiff+0xde>
 800b9e8:	0800cf64 	.word	0x0800cf64
 800b9ec:	0800d058 	.word	0x0800d058

0800b9f0 <__ulp>:
 800b9f0:	b082      	sub	sp, #8
 800b9f2:	ed8d 0b00 	vstr	d0, [sp]
 800b9f6:	9b01      	ldr	r3, [sp, #4]
 800b9f8:	4912      	ldr	r1, [pc, #72]	; (800ba44 <__ulp+0x54>)
 800b9fa:	4019      	ands	r1, r3
 800b9fc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ba00:	2900      	cmp	r1, #0
 800ba02:	dd05      	ble.n	800ba10 <__ulp+0x20>
 800ba04:	2200      	movs	r2, #0
 800ba06:	460b      	mov	r3, r1
 800ba08:	ec43 2b10 	vmov	d0, r2, r3
 800ba0c:	b002      	add	sp, #8
 800ba0e:	4770      	bx	lr
 800ba10:	4249      	negs	r1, r1
 800ba12:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ba16:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ba1a:	f04f 0200 	mov.w	r2, #0
 800ba1e:	f04f 0300 	mov.w	r3, #0
 800ba22:	da04      	bge.n	800ba2e <__ulp+0x3e>
 800ba24:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ba28:	fa41 f300 	asr.w	r3, r1, r0
 800ba2c:	e7ec      	b.n	800ba08 <__ulp+0x18>
 800ba2e:	f1a0 0114 	sub.w	r1, r0, #20
 800ba32:	291e      	cmp	r1, #30
 800ba34:	bfda      	itte	le
 800ba36:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ba3a:	fa20 f101 	lsrle.w	r1, r0, r1
 800ba3e:	2101      	movgt	r1, #1
 800ba40:	460a      	mov	r2, r1
 800ba42:	e7e1      	b.n	800ba08 <__ulp+0x18>
 800ba44:	7ff00000 	.word	0x7ff00000

0800ba48 <__b2d>:
 800ba48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4a:	6905      	ldr	r5, [r0, #16]
 800ba4c:	f100 0714 	add.w	r7, r0, #20
 800ba50:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ba54:	1f2e      	subs	r6, r5, #4
 800ba56:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	f7ff fd52 	bl	800b504 <__hi0bits>
 800ba60:	f1c0 0320 	rsb	r3, r0, #32
 800ba64:	280a      	cmp	r0, #10
 800ba66:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bae4 <__b2d+0x9c>
 800ba6a:	600b      	str	r3, [r1, #0]
 800ba6c:	dc14      	bgt.n	800ba98 <__b2d+0x50>
 800ba6e:	f1c0 0e0b 	rsb	lr, r0, #11
 800ba72:	fa24 f10e 	lsr.w	r1, r4, lr
 800ba76:	42b7      	cmp	r7, r6
 800ba78:	ea41 030c 	orr.w	r3, r1, ip
 800ba7c:	bf34      	ite	cc
 800ba7e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ba82:	2100      	movcs	r1, #0
 800ba84:	3015      	adds	r0, #21
 800ba86:	fa04 f000 	lsl.w	r0, r4, r0
 800ba8a:	fa21 f10e 	lsr.w	r1, r1, lr
 800ba8e:	ea40 0201 	orr.w	r2, r0, r1
 800ba92:	ec43 2b10 	vmov	d0, r2, r3
 800ba96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba98:	42b7      	cmp	r7, r6
 800ba9a:	bf3a      	itte	cc
 800ba9c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800baa0:	f1a5 0608 	subcc.w	r6, r5, #8
 800baa4:	2100      	movcs	r1, #0
 800baa6:	380b      	subs	r0, #11
 800baa8:	d017      	beq.n	800bada <__b2d+0x92>
 800baaa:	f1c0 0c20 	rsb	ip, r0, #32
 800baae:	fa04 f500 	lsl.w	r5, r4, r0
 800bab2:	42be      	cmp	r6, r7
 800bab4:	fa21 f40c 	lsr.w	r4, r1, ip
 800bab8:	ea45 0504 	orr.w	r5, r5, r4
 800babc:	bf8c      	ite	hi
 800babe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bac2:	2400      	movls	r4, #0
 800bac4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bac8:	fa01 f000 	lsl.w	r0, r1, r0
 800bacc:	fa24 f40c 	lsr.w	r4, r4, ip
 800bad0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bad4:	ea40 0204 	orr.w	r2, r0, r4
 800bad8:	e7db      	b.n	800ba92 <__b2d+0x4a>
 800bada:	ea44 030c 	orr.w	r3, r4, ip
 800bade:	460a      	mov	r2, r1
 800bae0:	e7d7      	b.n	800ba92 <__b2d+0x4a>
 800bae2:	bf00      	nop
 800bae4:	3ff00000 	.word	0x3ff00000

0800bae8 <__d2b>:
 800bae8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800baec:	4689      	mov	r9, r1
 800baee:	2101      	movs	r1, #1
 800baf0:	ec57 6b10 	vmov	r6, r7, d0
 800baf4:	4690      	mov	r8, r2
 800baf6:	f7ff fc0f 	bl	800b318 <_Balloc>
 800bafa:	4604      	mov	r4, r0
 800bafc:	b930      	cbnz	r0, 800bb0c <__d2b+0x24>
 800bafe:	4602      	mov	r2, r0
 800bb00:	4b25      	ldr	r3, [pc, #148]	; (800bb98 <__d2b+0xb0>)
 800bb02:	4826      	ldr	r0, [pc, #152]	; (800bb9c <__d2b+0xb4>)
 800bb04:	f240 310a 	movw	r1, #778	; 0x30a
 800bb08:	f000 fd06 	bl	800c518 <__assert_func>
 800bb0c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bb10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bb14:	bb35      	cbnz	r5, 800bb64 <__d2b+0x7c>
 800bb16:	2e00      	cmp	r6, #0
 800bb18:	9301      	str	r3, [sp, #4]
 800bb1a:	d028      	beq.n	800bb6e <__d2b+0x86>
 800bb1c:	4668      	mov	r0, sp
 800bb1e:	9600      	str	r6, [sp, #0]
 800bb20:	f7ff fd10 	bl	800b544 <__lo0bits>
 800bb24:	9900      	ldr	r1, [sp, #0]
 800bb26:	b300      	cbz	r0, 800bb6a <__d2b+0x82>
 800bb28:	9a01      	ldr	r2, [sp, #4]
 800bb2a:	f1c0 0320 	rsb	r3, r0, #32
 800bb2e:	fa02 f303 	lsl.w	r3, r2, r3
 800bb32:	430b      	orrs	r3, r1
 800bb34:	40c2      	lsrs	r2, r0
 800bb36:	6163      	str	r3, [r4, #20]
 800bb38:	9201      	str	r2, [sp, #4]
 800bb3a:	9b01      	ldr	r3, [sp, #4]
 800bb3c:	61a3      	str	r3, [r4, #24]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	bf14      	ite	ne
 800bb42:	2202      	movne	r2, #2
 800bb44:	2201      	moveq	r2, #1
 800bb46:	6122      	str	r2, [r4, #16]
 800bb48:	b1d5      	cbz	r5, 800bb80 <__d2b+0x98>
 800bb4a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bb4e:	4405      	add	r5, r0
 800bb50:	f8c9 5000 	str.w	r5, [r9]
 800bb54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bb58:	f8c8 0000 	str.w	r0, [r8]
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	b003      	add	sp, #12
 800bb60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bb68:	e7d5      	b.n	800bb16 <__d2b+0x2e>
 800bb6a:	6161      	str	r1, [r4, #20]
 800bb6c:	e7e5      	b.n	800bb3a <__d2b+0x52>
 800bb6e:	a801      	add	r0, sp, #4
 800bb70:	f7ff fce8 	bl	800b544 <__lo0bits>
 800bb74:	9b01      	ldr	r3, [sp, #4]
 800bb76:	6163      	str	r3, [r4, #20]
 800bb78:	2201      	movs	r2, #1
 800bb7a:	6122      	str	r2, [r4, #16]
 800bb7c:	3020      	adds	r0, #32
 800bb7e:	e7e3      	b.n	800bb48 <__d2b+0x60>
 800bb80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bb84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bb88:	f8c9 0000 	str.w	r0, [r9]
 800bb8c:	6918      	ldr	r0, [r3, #16]
 800bb8e:	f7ff fcb9 	bl	800b504 <__hi0bits>
 800bb92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bb96:	e7df      	b.n	800bb58 <__d2b+0x70>
 800bb98:	0800cf64 	.word	0x0800cf64
 800bb9c:	0800d058 	.word	0x0800d058

0800bba0 <__ratio>:
 800bba0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba4:	468a      	mov	sl, r1
 800bba6:	4669      	mov	r1, sp
 800bba8:	4683      	mov	fp, r0
 800bbaa:	f7ff ff4d 	bl	800ba48 <__b2d>
 800bbae:	a901      	add	r1, sp, #4
 800bbb0:	4650      	mov	r0, sl
 800bbb2:	ec59 8b10 	vmov	r8, r9, d0
 800bbb6:	ee10 6a10 	vmov	r6, s0
 800bbba:	f7ff ff45 	bl	800ba48 <__b2d>
 800bbbe:	f8db 3010 	ldr.w	r3, [fp, #16]
 800bbc2:	f8da 2010 	ldr.w	r2, [sl, #16]
 800bbc6:	eba3 0c02 	sub.w	ip, r3, r2
 800bbca:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bbce:	1a9b      	subs	r3, r3, r2
 800bbd0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bbd4:	ec55 4b10 	vmov	r4, r5, d0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	ee10 0a10 	vmov	r0, s0
 800bbde:	bfce      	itee	gt
 800bbe0:	464a      	movgt	r2, r9
 800bbe2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bbe6:	462a      	movle	r2, r5
 800bbe8:	464f      	mov	r7, r9
 800bbea:	4629      	mov	r1, r5
 800bbec:	bfcc      	ite	gt
 800bbee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bbf2:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800bbf6:	ec47 6b17 	vmov	d7, r6, r7
 800bbfa:	ec41 0b16 	vmov	d6, r0, r1
 800bbfe:	ee87 0b06 	vdiv.f64	d0, d7, d6
 800bc02:	b003      	add	sp, #12
 800bc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc08 <__copybits>:
 800bc08:	3901      	subs	r1, #1
 800bc0a:	b570      	push	{r4, r5, r6, lr}
 800bc0c:	1149      	asrs	r1, r1, #5
 800bc0e:	6914      	ldr	r4, [r2, #16]
 800bc10:	3101      	adds	r1, #1
 800bc12:	f102 0314 	add.w	r3, r2, #20
 800bc16:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc1a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bc1e:	1f05      	subs	r5, r0, #4
 800bc20:	42a3      	cmp	r3, r4
 800bc22:	d30c      	bcc.n	800bc3e <__copybits+0x36>
 800bc24:	1aa3      	subs	r3, r4, r2
 800bc26:	3b11      	subs	r3, #17
 800bc28:	f023 0303 	bic.w	r3, r3, #3
 800bc2c:	3211      	adds	r2, #17
 800bc2e:	42a2      	cmp	r2, r4
 800bc30:	bf88      	it	hi
 800bc32:	2300      	movhi	r3, #0
 800bc34:	4418      	add	r0, r3
 800bc36:	2300      	movs	r3, #0
 800bc38:	4288      	cmp	r0, r1
 800bc3a:	d305      	bcc.n	800bc48 <__copybits+0x40>
 800bc3c:	bd70      	pop	{r4, r5, r6, pc}
 800bc3e:	f853 6b04 	ldr.w	r6, [r3], #4
 800bc42:	f845 6f04 	str.w	r6, [r5, #4]!
 800bc46:	e7eb      	b.n	800bc20 <__copybits+0x18>
 800bc48:	f840 3b04 	str.w	r3, [r0], #4
 800bc4c:	e7f4      	b.n	800bc38 <__copybits+0x30>

0800bc4e <__any_on>:
 800bc4e:	f100 0214 	add.w	r2, r0, #20
 800bc52:	6900      	ldr	r0, [r0, #16]
 800bc54:	114b      	asrs	r3, r1, #5
 800bc56:	4298      	cmp	r0, r3
 800bc58:	b510      	push	{r4, lr}
 800bc5a:	db11      	blt.n	800bc80 <__any_on+0x32>
 800bc5c:	dd0a      	ble.n	800bc74 <__any_on+0x26>
 800bc5e:	f011 011f 	ands.w	r1, r1, #31
 800bc62:	d007      	beq.n	800bc74 <__any_on+0x26>
 800bc64:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bc68:	fa24 f001 	lsr.w	r0, r4, r1
 800bc6c:	fa00 f101 	lsl.w	r1, r0, r1
 800bc70:	428c      	cmp	r4, r1
 800bc72:	d10b      	bne.n	800bc8c <__any_on+0x3e>
 800bc74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d803      	bhi.n	800bc84 <__any_on+0x36>
 800bc7c:	2000      	movs	r0, #0
 800bc7e:	bd10      	pop	{r4, pc}
 800bc80:	4603      	mov	r3, r0
 800bc82:	e7f7      	b.n	800bc74 <__any_on+0x26>
 800bc84:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bc88:	2900      	cmp	r1, #0
 800bc8a:	d0f5      	beq.n	800bc78 <__any_on+0x2a>
 800bc8c:	2001      	movs	r0, #1
 800bc8e:	e7f6      	b.n	800bc7e <__any_on+0x30>

0800bc90 <_calloc_r>:
 800bc90:	b513      	push	{r0, r1, r4, lr}
 800bc92:	434a      	muls	r2, r1
 800bc94:	4611      	mov	r1, r2
 800bc96:	9201      	str	r2, [sp, #4]
 800bc98:	f000 f85a 	bl	800bd50 <_malloc_r>
 800bc9c:	4604      	mov	r4, r0
 800bc9e:	b118      	cbz	r0, 800bca8 <_calloc_r+0x18>
 800bca0:	9a01      	ldr	r2, [sp, #4]
 800bca2:	2100      	movs	r1, #0
 800bca4:	f7fc f916 	bl	8007ed4 <memset>
 800bca8:	4620      	mov	r0, r4
 800bcaa:	b002      	add	sp, #8
 800bcac:	bd10      	pop	{r4, pc}
	...

0800bcb0 <_free_r>:
 800bcb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcb2:	2900      	cmp	r1, #0
 800bcb4:	d048      	beq.n	800bd48 <_free_r+0x98>
 800bcb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcba:	9001      	str	r0, [sp, #4]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	f1a1 0404 	sub.w	r4, r1, #4
 800bcc2:	bfb8      	it	lt
 800bcc4:	18e4      	addlt	r4, r4, r3
 800bcc6:	f000 fcb5 	bl	800c634 <__malloc_lock>
 800bcca:	4a20      	ldr	r2, [pc, #128]	; (800bd4c <_free_r+0x9c>)
 800bccc:	9801      	ldr	r0, [sp, #4]
 800bcce:	6813      	ldr	r3, [r2, #0]
 800bcd0:	4615      	mov	r5, r2
 800bcd2:	b933      	cbnz	r3, 800bce2 <_free_r+0x32>
 800bcd4:	6063      	str	r3, [r4, #4]
 800bcd6:	6014      	str	r4, [r2, #0]
 800bcd8:	b003      	add	sp, #12
 800bcda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bcde:	f000 bcaf 	b.w	800c640 <__malloc_unlock>
 800bce2:	42a3      	cmp	r3, r4
 800bce4:	d90b      	bls.n	800bcfe <_free_r+0x4e>
 800bce6:	6821      	ldr	r1, [r4, #0]
 800bce8:	1862      	adds	r2, r4, r1
 800bcea:	4293      	cmp	r3, r2
 800bcec:	bf04      	itt	eq
 800bcee:	681a      	ldreq	r2, [r3, #0]
 800bcf0:	685b      	ldreq	r3, [r3, #4]
 800bcf2:	6063      	str	r3, [r4, #4]
 800bcf4:	bf04      	itt	eq
 800bcf6:	1852      	addeq	r2, r2, r1
 800bcf8:	6022      	streq	r2, [r4, #0]
 800bcfa:	602c      	str	r4, [r5, #0]
 800bcfc:	e7ec      	b.n	800bcd8 <_free_r+0x28>
 800bcfe:	461a      	mov	r2, r3
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	b10b      	cbz	r3, 800bd08 <_free_r+0x58>
 800bd04:	42a3      	cmp	r3, r4
 800bd06:	d9fa      	bls.n	800bcfe <_free_r+0x4e>
 800bd08:	6811      	ldr	r1, [r2, #0]
 800bd0a:	1855      	adds	r5, r2, r1
 800bd0c:	42a5      	cmp	r5, r4
 800bd0e:	d10b      	bne.n	800bd28 <_free_r+0x78>
 800bd10:	6824      	ldr	r4, [r4, #0]
 800bd12:	4421      	add	r1, r4
 800bd14:	1854      	adds	r4, r2, r1
 800bd16:	42a3      	cmp	r3, r4
 800bd18:	6011      	str	r1, [r2, #0]
 800bd1a:	d1dd      	bne.n	800bcd8 <_free_r+0x28>
 800bd1c:	681c      	ldr	r4, [r3, #0]
 800bd1e:	685b      	ldr	r3, [r3, #4]
 800bd20:	6053      	str	r3, [r2, #4]
 800bd22:	4421      	add	r1, r4
 800bd24:	6011      	str	r1, [r2, #0]
 800bd26:	e7d7      	b.n	800bcd8 <_free_r+0x28>
 800bd28:	d902      	bls.n	800bd30 <_free_r+0x80>
 800bd2a:	230c      	movs	r3, #12
 800bd2c:	6003      	str	r3, [r0, #0]
 800bd2e:	e7d3      	b.n	800bcd8 <_free_r+0x28>
 800bd30:	6825      	ldr	r5, [r4, #0]
 800bd32:	1961      	adds	r1, r4, r5
 800bd34:	428b      	cmp	r3, r1
 800bd36:	bf04      	itt	eq
 800bd38:	6819      	ldreq	r1, [r3, #0]
 800bd3a:	685b      	ldreq	r3, [r3, #4]
 800bd3c:	6063      	str	r3, [r4, #4]
 800bd3e:	bf04      	itt	eq
 800bd40:	1949      	addeq	r1, r1, r5
 800bd42:	6021      	streq	r1, [r4, #0]
 800bd44:	6054      	str	r4, [r2, #4]
 800bd46:	e7c7      	b.n	800bcd8 <_free_r+0x28>
 800bd48:	b003      	add	sp, #12
 800bd4a:	bd30      	pop	{r4, r5, pc}
 800bd4c:	20000354 	.word	0x20000354

0800bd50 <_malloc_r>:
 800bd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd52:	1ccd      	adds	r5, r1, #3
 800bd54:	f025 0503 	bic.w	r5, r5, #3
 800bd58:	3508      	adds	r5, #8
 800bd5a:	2d0c      	cmp	r5, #12
 800bd5c:	bf38      	it	cc
 800bd5e:	250c      	movcc	r5, #12
 800bd60:	2d00      	cmp	r5, #0
 800bd62:	4606      	mov	r6, r0
 800bd64:	db01      	blt.n	800bd6a <_malloc_r+0x1a>
 800bd66:	42a9      	cmp	r1, r5
 800bd68:	d903      	bls.n	800bd72 <_malloc_r+0x22>
 800bd6a:	230c      	movs	r3, #12
 800bd6c:	6033      	str	r3, [r6, #0]
 800bd6e:	2000      	movs	r0, #0
 800bd70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd72:	f000 fc5f 	bl	800c634 <__malloc_lock>
 800bd76:	4921      	ldr	r1, [pc, #132]	; (800bdfc <_malloc_r+0xac>)
 800bd78:	680a      	ldr	r2, [r1, #0]
 800bd7a:	4614      	mov	r4, r2
 800bd7c:	b99c      	cbnz	r4, 800bda6 <_malloc_r+0x56>
 800bd7e:	4f20      	ldr	r7, [pc, #128]	; (800be00 <_malloc_r+0xb0>)
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	b923      	cbnz	r3, 800bd8e <_malloc_r+0x3e>
 800bd84:	4621      	mov	r1, r4
 800bd86:	4630      	mov	r0, r6
 800bd88:	f000 fb42 	bl	800c410 <_sbrk_r>
 800bd8c:	6038      	str	r0, [r7, #0]
 800bd8e:	4629      	mov	r1, r5
 800bd90:	4630      	mov	r0, r6
 800bd92:	f000 fb3d 	bl	800c410 <_sbrk_r>
 800bd96:	1c43      	adds	r3, r0, #1
 800bd98:	d123      	bne.n	800bde2 <_malloc_r+0x92>
 800bd9a:	230c      	movs	r3, #12
 800bd9c:	6033      	str	r3, [r6, #0]
 800bd9e:	4630      	mov	r0, r6
 800bda0:	f000 fc4e 	bl	800c640 <__malloc_unlock>
 800bda4:	e7e3      	b.n	800bd6e <_malloc_r+0x1e>
 800bda6:	6823      	ldr	r3, [r4, #0]
 800bda8:	1b5b      	subs	r3, r3, r5
 800bdaa:	d417      	bmi.n	800bddc <_malloc_r+0x8c>
 800bdac:	2b0b      	cmp	r3, #11
 800bdae:	d903      	bls.n	800bdb8 <_malloc_r+0x68>
 800bdb0:	6023      	str	r3, [r4, #0]
 800bdb2:	441c      	add	r4, r3
 800bdb4:	6025      	str	r5, [r4, #0]
 800bdb6:	e004      	b.n	800bdc2 <_malloc_r+0x72>
 800bdb8:	6863      	ldr	r3, [r4, #4]
 800bdba:	42a2      	cmp	r2, r4
 800bdbc:	bf0c      	ite	eq
 800bdbe:	600b      	streq	r3, [r1, #0]
 800bdc0:	6053      	strne	r3, [r2, #4]
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	f000 fc3c 	bl	800c640 <__malloc_unlock>
 800bdc8:	f104 000b 	add.w	r0, r4, #11
 800bdcc:	1d23      	adds	r3, r4, #4
 800bdce:	f020 0007 	bic.w	r0, r0, #7
 800bdd2:	1ac2      	subs	r2, r0, r3
 800bdd4:	d0cc      	beq.n	800bd70 <_malloc_r+0x20>
 800bdd6:	1a1b      	subs	r3, r3, r0
 800bdd8:	50a3      	str	r3, [r4, r2]
 800bdda:	e7c9      	b.n	800bd70 <_malloc_r+0x20>
 800bddc:	4622      	mov	r2, r4
 800bdde:	6864      	ldr	r4, [r4, #4]
 800bde0:	e7cc      	b.n	800bd7c <_malloc_r+0x2c>
 800bde2:	1cc4      	adds	r4, r0, #3
 800bde4:	f024 0403 	bic.w	r4, r4, #3
 800bde8:	42a0      	cmp	r0, r4
 800bdea:	d0e3      	beq.n	800bdb4 <_malloc_r+0x64>
 800bdec:	1a21      	subs	r1, r4, r0
 800bdee:	4630      	mov	r0, r6
 800bdf0:	f000 fb0e 	bl	800c410 <_sbrk_r>
 800bdf4:	3001      	adds	r0, #1
 800bdf6:	d1dd      	bne.n	800bdb4 <_malloc_r+0x64>
 800bdf8:	e7cf      	b.n	800bd9a <_malloc_r+0x4a>
 800bdfa:	bf00      	nop
 800bdfc:	20000354 	.word	0x20000354
 800be00:	20000358 	.word	0x20000358

0800be04 <__ssputs_r>:
 800be04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be08:	688e      	ldr	r6, [r1, #8]
 800be0a:	429e      	cmp	r6, r3
 800be0c:	4682      	mov	sl, r0
 800be0e:	460c      	mov	r4, r1
 800be10:	4690      	mov	r8, r2
 800be12:	461f      	mov	r7, r3
 800be14:	d838      	bhi.n	800be88 <__ssputs_r+0x84>
 800be16:	898a      	ldrh	r2, [r1, #12]
 800be18:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800be1c:	d032      	beq.n	800be84 <__ssputs_r+0x80>
 800be1e:	6825      	ldr	r5, [r4, #0]
 800be20:	6909      	ldr	r1, [r1, #16]
 800be22:	eba5 0901 	sub.w	r9, r5, r1
 800be26:	6965      	ldr	r5, [r4, #20]
 800be28:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800be2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800be30:	3301      	adds	r3, #1
 800be32:	444b      	add	r3, r9
 800be34:	106d      	asrs	r5, r5, #1
 800be36:	429d      	cmp	r5, r3
 800be38:	bf38      	it	cc
 800be3a:	461d      	movcc	r5, r3
 800be3c:	0553      	lsls	r3, r2, #21
 800be3e:	d531      	bpl.n	800bea4 <__ssputs_r+0xa0>
 800be40:	4629      	mov	r1, r5
 800be42:	f7ff ff85 	bl	800bd50 <_malloc_r>
 800be46:	4606      	mov	r6, r0
 800be48:	b950      	cbnz	r0, 800be60 <__ssputs_r+0x5c>
 800be4a:	230c      	movs	r3, #12
 800be4c:	f8ca 3000 	str.w	r3, [sl]
 800be50:	89a3      	ldrh	r3, [r4, #12]
 800be52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be56:	81a3      	strh	r3, [r4, #12]
 800be58:	f04f 30ff 	mov.w	r0, #4294967295
 800be5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be60:	6921      	ldr	r1, [r4, #16]
 800be62:	464a      	mov	r2, r9
 800be64:	f7ff fa4a 	bl	800b2fc <memcpy>
 800be68:	89a3      	ldrh	r3, [r4, #12]
 800be6a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800be6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be72:	81a3      	strh	r3, [r4, #12]
 800be74:	6126      	str	r6, [r4, #16]
 800be76:	6165      	str	r5, [r4, #20]
 800be78:	444e      	add	r6, r9
 800be7a:	eba5 0509 	sub.w	r5, r5, r9
 800be7e:	6026      	str	r6, [r4, #0]
 800be80:	60a5      	str	r5, [r4, #8]
 800be82:	463e      	mov	r6, r7
 800be84:	42be      	cmp	r6, r7
 800be86:	d900      	bls.n	800be8a <__ssputs_r+0x86>
 800be88:	463e      	mov	r6, r7
 800be8a:	4632      	mov	r2, r6
 800be8c:	6820      	ldr	r0, [r4, #0]
 800be8e:	4641      	mov	r1, r8
 800be90:	f000 fbb6 	bl	800c600 <memmove>
 800be94:	68a3      	ldr	r3, [r4, #8]
 800be96:	6822      	ldr	r2, [r4, #0]
 800be98:	1b9b      	subs	r3, r3, r6
 800be9a:	4432      	add	r2, r6
 800be9c:	60a3      	str	r3, [r4, #8]
 800be9e:	6022      	str	r2, [r4, #0]
 800bea0:	2000      	movs	r0, #0
 800bea2:	e7db      	b.n	800be5c <__ssputs_r+0x58>
 800bea4:	462a      	mov	r2, r5
 800bea6:	f000 fbd1 	bl	800c64c <_realloc_r>
 800beaa:	4606      	mov	r6, r0
 800beac:	2800      	cmp	r0, #0
 800beae:	d1e1      	bne.n	800be74 <__ssputs_r+0x70>
 800beb0:	6921      	ldr	r1, [r4, #16]
 800beb2:	4650      	mov	r0, sl
 800beb4:	f7ff fefc 	bl	800bcb0 <_free_r>
 800beb8:	e7c7      	b.n	800be4a <__ssputs_r+0x46>
	...

0800bebc <_svfiprintf_r>:
 800bebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bec0:	4698      	mov	r8, r3
 800bec2:	898b      	ldrh	r3, [r1, #12]
 800bec4:	061b      	lsls	r3, r3, #24
 800bec6:	b09d      	sub	sp, #116	; 0x74
 800bec8:	4607      	mov	r7, r0
 800beca:	460d      	mov	r5, r1
 800becc:	4614      	mov	r4, r2
 800bece:	d50e      	bpl.n	800beee <_svfiprintf_r+0x32>
 800bed0:	690b      	ldr	r3, [r1, #16]
 800bed2:	b963      	cbnz	r3, 800beee <_svfiprintf_r+0x32>
 800bed4:	2140      	movs	r1, #64	; 0x40
 800bed6:	f7ff ff3b 	bl	800bd50 <_malloc_r>
 800beda:	6028      	str	r0, [r5, #0]
 800bedc:	6128      	str	r0, [r5, #16]
 800bede:	b920      	cbnz	r0, 800beea <_svfiprintf_r+0x2e>
 800bee0:	230c      	movs	r3, #12
 800bee2:	603b      	str	r3, [r7, #0]
 800bee4:	f04f 30ff 	mov.w	r0, #4294967295
 800bee8:	e0d1      	b.n	800c08e <_svfiprintf_r+0x1d2>
 800beea:	2340      	movs	r3, #64	; 0x40
 800beec:	616b      	str	r3, [r5, #20]
 800beee:	2300      	movs	r3, #0
 800bef0:	9309      	str	r3, [sp, #36]	; 0x24
 800bef2:	2320      	movs	r3, #32
 800bef4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bef8:	f8cd 800c 	str.w	r8, [sp, #12]
 800befc:	2330      	movs	r3, #48	; 0x30
 800befe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c0a8 <_svfiprintf_r+0x1ec>
 800bf02:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bf06:	f04f 0901 	mov.w	r9, #1
 800bf0a:	4623      	mov	r3, r4
 800bf0c:	469a      	mov	sl, r3
 800bf0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bf12:	b10a      	cbz	r2, 800bf18 <_svfiprintf_r+0x5c>
 800bf14:	2a25      	cmp	r2, #37	; 0x25
 800bf16:	d1f9      	bne.n	800bf0c <_svfiprintf_r+0x50>
 800bf18:	ebba 0b04 	subs.w	fp, sl, r4
 800bf1c:	d00b      	beq.n	800bf36 <_svfiprintf_r+0x7a>
 800bf1e:	465b      	mov	r3, fp
 800bf20:	4622      	mov	r2, r4
 800bf22:	4629      	mov	r1, r5
 800bf24:	4638      	mov	r0, r7
 800bf26:	f7ff ff6d 	bl	800be04 <__ssputs_r>
 800bf2a:	3001      	adds	r0, #1
 800bf2c:	f000 80aa 	beq.w	800c084 <_svfiprintf_r+0x1c8>
 800bf30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bf32:	445a      	add	r2, fp
 800bf34:	9209      	str	r2, [sp, #36]	; 0x24
 800bf36:	f89a 3000 	ldrb.w	r3, [sl]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	f000 80a2 	beq.w	800c084 <_svfiprintf_r+0x1c8>
 800bf40:	2300      	movs	r3, #0
 800bf42:	f04f 32ff 	mov.w	r2, #4294967295
 800bf46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf4a:	f10a 0a01 	add.w	sl, sl, #1
 800bf4e:	9304      	str	r3, [sp, #16]
 800bf50:	9307      	str	r3, [sp, #28]
 800bf52:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bf56:	931a      	str	r3, [sp, #104]	; 0x68
 800bf58:	4654      	mov	r4, sl
 800bf5a:	2205      	movs	r2, #5
 800bf5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf60:	4851      	ldr	r0, [pc, #324]	; (800c0a8 <_svfiprintf_r+0x1ec>)
 800bf62:	f7f4 f975 	bl	8000250 <memchr>
 800bf66:	9a04      	ldr	r2, [sp, #16]
 800bf68:	b9d8      	cbnz	r0, 800bfa2 <_svfiprintf_r+0xe6>
 800bf6a:	06d0      	lsls	r0, r2, #27
 800bf6c:	bf44      	itt	mi
 800bf6e:	2320      	movmi	r3, #32
 800bf70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf74:	0711      	lsls	r1, r2, #28
 800bf76:	bf44      	itt	mi
 800bf78:	232b      	movmi	r3, #43	; 0x2b
 800bf7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bf7e:	f89a 3000 	ldrb.w	r3, [sl]
 800bf82:	2b2a      	cmp	r3, #42	; 0x2a
 800bf84:	d015      	beq.n	800bfb2 <_svfiprintf_r+0xf6>
 800bf86:	9a07      	ldr	r2, [sp, #28]
 800bf88:	4654      	mov	r4, sl
 800bf8a:	2000      	movs	r0, #0
 800bf8c:	f04f 0c0a 	mov.w	ip, #10
 800bf90:	4621      	mov	r1, r4
 800bf92:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf96:	3b30      	subs	r3, #48	; 0x30
 800bf98:	2b09      	cmp	r3, #9
 800bf9a:	d94e      	bls.n	800c03a <_svfiprintf_r+0x17e>
 800bf9c:	b1b0      	cbz	r0, 800bfcc <_svfiprintf_r+0x110>
 800bf9e:	9207      	str	r2, [sp, #28]
 800bfa0:	e014      	b.n	800bfcc <_svfiprintf_r+0x110>
 800bfa2:	eba0 0308 	sub.w	r3, r0, r8
 800bfa6:	fa09 f303 	lsl.w	r3, r9, r3
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	9304      	str	r3, [sp, #16]
 800bfae:	46a2      	mov	sl, r4
 800bfb0:	e7d2      	b.n	800bf58 <_svfiprintf_r+0x9c>
 800bfb2:	9b03      	ldr	r3, [sp, #12]
 800bfb4:	1d19      	adds	r1, r3, #4
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	9103      	str	r1, [sp, #12]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	bfbb      	ittet	lt
 800bfbe:	425b      	neglt	r3, r3
 800bfc0:	f042 0202 	orrlt.w	r2, r2, #2
 800bfc4:	9307      	strge	r3, [sp, #28]
 800bfc6:	9307      	strlt	r3, [sp, #28]
 800bfc8:	bfb8      	it	lt
 800bfca:	9204      	strlt	r2, [sp, #16]
 800bfcc:	7823      	ldrb	r3, [r4, #0]
 800bfce:	2b2e      	cmp	r3, #46	; 0x2e
 800bfd0:	d10c      	bne.n	800bfec <_svfiprintf_r+0x130>
 800bfd2:	7863      	ldrb	r3, [r4, #1]
 800bfd4:	2b2a      	cmp	r3, #42	; 0x2a
 800bfd6:	d135      	bne.n	800c044 <_svfiprintf_r+0x188>
 800bfd8:	9b03      	ldr	r3, [sp, #12]
 800bfda:	1d1a      	adds	r2, r3, #4
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	9203      	str	r2, [sp, #12]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	bfb8      	it	lt
 800bfe4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bfe8:	3402      	adds	r4, #2
 800bfea:	9305      	str	r3, [sp, #20]
 800bfec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c0b8 <_svfiprintf_r+0x1fc>
 800bff0:	7821      	ldrb	r1, [r4, #0]
 800bff2:	2203      	movs	r2, #3
 800bff4:	4650      	mov	r0, sl
 800bff6:	f7f4 f92b 	bl	8000250 <memchr>
 800bffa:	b140      	cbz	r0, 800c00e <_svfiprintf_r+0x152>
 800bffc:	2340      	movs	r3, #64	; 0x40
 800bffe:	eba0 000a 	sub.w	r0, r0, sl
 800c002:	fa03 f000 	lsl.w	r0, r3, r0
 800c006:	9b04      	ldr	r3, [sp, #16]
 800c008:	4303      	orrs	r3, r0
 800c00a:	3401      	adds	r4, #1
 800c00c:	9304      	str	r3, [sp, #16]
 800c00e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c012:	4826      	ldr	r0, [pc, #152]	; (800c0ac <_svfiprintf_r+0x1f0>)
 800c014:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c018:	2206      	movs	r2, #6
 800c01a:	f7f4 f919 	bl	8000250 <memchr>
 800c01e:	2800      	cmp	r0, #0
 800c020:	d038      	beq.n	800c094 <_svfiprintf_r+0x1d8>
 800c022:	4b23      	ldr	r3, [pc, #140]	; (800c0b0 <_svfiprintf_r+0x1f4>)
 800c024:	bb1b      	cbnz	r3, 800c06e <_svfiprintf_r+0x1b2>
 800c026:	9b03      	ldr	r3, [sp, #12]
 800c028:	3307      	adds	r3, #7
 800c02a:	f023 0307 	bic.w	r3, r3, #7
 800c02e:	3308      	adds	r3, #8
 800c030:	9303      	str	r3, [sp, #12]
 800c032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c034:	4433      	add	r3, r6
 800c036:	9309      	str	r3, [sp, #36]	; 0x24
 800c038:	e767      	b.n	800bf0a <_svfiprintf_r+0x4e>
 800c03a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c03e:	460c      	mov	r4, r1
 800c040:	2001      	movs	r0, #1
 800c042:	e7a5      	b.n	800bf90 <_svfiprintf_r+0xd4>
 800c044:	2300      	movs	r3, #0
 800c046:	3401      	adds	r4, #1
 800c048:	9305      	str	r3, [sp, #20]
 800c04a:	4619      	mov	r1, r3
 800c04c:	f04f 0c0a 	mov.w	ip, #10
 800c050:	4620      	mov	r0, r4
 800c052:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c056:	3a30      	subs	r2, #48	; 0x30
 800c058:	2a09      	cmp	r2, #9
 800c05a:	d903      	bls.n	800c064 <_svfiprintf_r+0x1a8>
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d0c5      	beq.n	800bfec <_svfiprintf_r+0x130>
 800c060:	9105      	str	r1, [sp, #20]
 800c062:	e7c3      	b.n	800bfec <_svfiprintf_r+0x130>
 800c064:	fb0c 2101 	mla	r1, ip, r1, r2
 800c068:	4604      	mov	r4, r0
 800c06a:	2301      	movs	r3, #1
 800c06c:	e7f0      	b.n	800c050 <_svfiprintf_r+0x194>
 800c06e:	ab03      	add	r3, sp, #12
 800c070:	9300      	str	r3, [sp, #0]
 800c072:	462a      	mov	r2, r5
 800c074:	4b0f      	ldr	r3, [pc, #60]	; (800c0b4 <_svfiprintf_r+0x1f8>)
 800c076:	a904      	add	r1, sp, #16
 800c078:	4638      	mov	r0, r7
 800c07a:	f7fb ffc5 	bl	8008008 <_printf_float>
 800c07e:	1c42      	adds	r2, r0, #1
 800c080:	4606      	mov	r6, r0
 800c082:	d1d6      	bne.n	800c032 <_svfiprintf_r+0x176>
 800c084:	89ab      	ldrh	r3, [r5, #12]
 800c086:	065b      	lsls	r3, r3, #25
 800c088:	f53f af2c 	bmi.w	800bee4 <_svfiprintf_r+0x28>
 800c08c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c08e:	b01d      	add	sp, #116	; 0x74
 800c090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c094:	ab03      	add	r3, sp, #12
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	462a      	mov	r2, r5
 800c09a:	4b06      	ldr	r3, [pc, #24]	; (800c0b4 <_svfiprintf_r+0x1f8>)
 800c09c:	a904      	add	r1, sp, #16
 800c09e:	4638      	mov	r0, r7
 800c0a0:	f7fc fa3e 	bl	8008520 <_printf_i>
 800c0a4:	e7eb      	b.n	800c07e <_svfiprintf_r+0x1c2>
 800c0a6:	bf00      	nop
 800c0a8:	0800d1b4 	.word	0x0800d1b4
 800c0ac:	0800d1be 	.word	0x0800d1be
 800c0b0:	08008009 	.word	0x08008009
 800c0b4:	0800be05 	.word	0x0800be05
 800c0b8:	0800d1ba 	.word	0x0800d1ba

0800c0bc <__sfputc_r>:
 800c0bc:	6893      	ldr	r3, [r2, #8]
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	b410      	push	{r4}
 800c0c4:	6093      	str	r3, [r2, #8]
 800c0c6:	da08      	bge.n	800c0da <__sfputc_r+0x1e>
 800c0c8:	6994      	ldr	r4, [r2, #24]
 800c0ca:	42a3      	cmp	r3, r4
 800c0cc:	db01      	blt.n	800c0d2 <__sfputc_r+0x16>
 800c0ce:	290a      	cmp	r1, #10
 800c0d0:	d103      	bne.n	800c0da <__sfputc_r+0x1e>
 800c0d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0d6:	f7fd bc95 	b.w	8009a04 <__swbuf_r>
 800c0da:	6813      	ldr	r3, [r2, #0]
 800c0dc:	1c58      	adds	r0, r3, #1
 800c0de:	6010      	str	r0, [r2, #0]
 800c0e0:	7019      	strb	r1, [r3, #0]
 800c0e2:	4608      	mov	r0, r1
 800c0e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c0e8:	4770      	bx	lr

0800c0ea <__sfputs_r>:
 800c0ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ec:	4606      	mov	r6, r0
 800c0ee:	460f      	mov	r7, r1
 800c0f0:	4614      	mov	r4, r2
 800c0f2:	18d5      	adds	r5, r2, r3
 800c0f4:	42ac      	cmp	r4, r5
 800c0f6:	d101      	bne.n	800c0fc <__sfputs_r+0x12>
 800c0f8:	2000      	movs	r0, #0
 800c0fa:	e007      	b.n	800c10c <__sfputs_r+0x22>
 800c0fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c100:	463a      	mov	r2, r7
 800c102:	4630      	mov	r0, r6
 800c104:	f7ff ffda 	bl	800c0bc <__sfputc_r>
 800c108:	1c43      	adds	r3, r0, #1
 800c10a:	d1f3      	bne.n	800c0f4 <__sfputs_r+0xa>
 800c10c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c110 <_vfiprintf_r>:
 800c110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c114:	460d      	mov	r5, r1
 800c116:	b09d      	sub	sp, #116	; 0x74
 800c118:	4614      	mov	r4, r2
 800c11a:	4698      	mov	r8, r3
 800c11c:	4606      	mov	r6, r0
 800c11e:	b118      	cbz	r0, 800c128 <_vfiprintf_r+0x18>
 800c120:	6983      	ldr	r3, [r0, #24]
 800c122:	b90b      	cbnz	r3, 800c128 <_vfiprintf_r+0x18>
 800c124:	f7fe fc58 	bl	800a9d8 <__sinit>
 800c128:	4b89      	ldr	r3, [pc, #548]	; (800c350 <_vfiprintf_r+0x240>)
 800c12a:	429d      	cmp	r5, r3
 800c12c:	d11b      	bne.n	800c166 <_vfiprintf_r+0x56>
 800c12e:	6875      	ldr	r5, [r6, #4]
 800c130:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c132:	07d9      	lsls	r1, r3, #31
 800c134:	d405      	bmi.n	800c142 <_vfiprintf_r+0x32>
 800c136:	89ab      	ldrh	r3, [r5, #12]
 800c138:	059a      	lsls	r2, r3, #22
 800c13a:	d402      	bmi.n	800c142 <_vfiprintf_r+0x32>
 800c13c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c13e:	f7ff f85c 	bl	800b1fa <__retarget_lock_acquire_recursive>
 800c142:	89ab      	ldrh	r3, [r5, #12]
 800c144:	071b      	lsls	r3, r3, #28
 800c146:	d501      	bpl.n	800c14c <_vfiprintf_r+0x3c>
 800c148:	692b      	ldr	r3, [r5, #16]
 800c14a:	b9eb      	cbnz	r3, 800c188 <_vfiprintf_r+0x78>
 800c14c:	4629      	mov	r1, r5
 800c14e:	4630      	mov	r0, r6
 800c150:	f7fd fcaa 	bl	8009aa8 <__swsetup_r>
 800c154:	b1c0      	cbz	r0, 800c188 <_vfiprintf_r+0x78>
 800c156:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c158:	07dc      	lsls	r4, r3, #31
 800c15a:	d50e      	bpl.n	800c17a <_vfiprintf_r+0x6a>
 800c15c:	f04f 30ff 	mov.w	r0, #4294967295
 800c160:	b01d      	add	sp, #116	; 0x74
 800c162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c166:	4b7b      	ldr	r3, [pc, #492]	; (800c354 <_vfiprintf_r+0x244>)
 800c168:	429d      	cmp	r5, r3
 800c16a:	d101      	bne.n	800c170 <_vfiprintf_r+0x60>
 800c16c:	68b5      	ldr	r5, [r6, #8]
 800c16e:	e7df      	b.n	800c130 <_vfiprintf_r+0x20>
 800c170:	4b79      	ldr	r3, [pc, #484]	; (800c358 <_vfiprintf_r+0x248>)
 800c172:	429d      	cmp	r5, r3
 800c174:	bf08      	it	eq
 800c176:	68f5      	ldreq	r5, [r6, #12]
 800c178:	e7da      	b.n	800c130 <_vfiprintf_r+0x20>
 800c17a:	89ab      	ldrh	r3, [r5, #12]
 800c17c:	0598      	lsls	r0, r3, #22
 800c17e:	d4ed      	bmi.n	800c15c <_vfiprintf_r+0x4c>
 800c180:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c182:	f7ff f83b 	bl	800b1fc <__retarget_lock_release_recursive>
 800c186:	e7e9      	b.n	800c15c <_vfiprintf_r+0x4c>
 800c188:	2300      	movs	r3, #0
 800c18a:	9309      	str	r3, [sp, #36]	; 0x24
 800c18c:	2320      	movs	r3, #32
 800c18e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c192:	f8cd 800c 	str.w	r8, [sp, #12]
 800c196:	2330      	movs	r3, #48	; 0x30
 800c198:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c35c <_vfiprintf_r+0x24c>
 800c19c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c1a0:	f04f 0901 	mov.w	r9, #1
 800c1a4:	4623      	mov	r3, r4
 800c1a6:	469a      	mov	sl, r3
 800c1a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c1ac:	b10a      	cbz	r2, 800c1b2 <_vfiprintf_r+0xa2>
 800c1ae:	2a25      	cmp	r2, #37	; 0x25
 800c1b0:	d1f9      	bne.n	800c1a6 <_vfiprintf_r+0x96>
 800c1b2:	ebba 0b04 	subs.w	fp, sl, r4
 800c1b6:	d00b      	beq.n	800c1d0 <_vfiprintf_r+0xc0>
 800c1b8:	465b      	mov	r3, fp
 800c1ba:	4622      	mov	r2, r4
 800c1bc:	4629      	mov	r1, r5
 800c1be:	4630      	mov	r0, r6
 800c1c0:	f7ff ff93 	bl	800c0ea <__sfputs_r>
 800c1c4:	3001      	adds	r0, #1
 800c1c6:	f000 80aa 	beq.w	800c31e <_vfiprintf_r+0x20e>
 800c1ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1cc:	445a      	add	r2, fp
 800c1ce:	9209      	str	r2, [sp, #36]	; 0x24
 800c1d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	f000 80a2 	beq.w	800c31e <_vfiprintf_r+0x20e>
 800c1da:	2300      	movs	r3, #0
 800c1dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c1e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c1e4:	f10a 0a01 	add.w	sl, sl, #1
 800c1e8:	9304      	str	r3, [sp, #16]
 800c1ea:	9307      	str	r3, [sp, #28]
 800c1ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c1f0:	931a      	str	r3, [sp, #104]	; 0x68
 800c1f2:	4654      	mov	r4, sl
 800c1f4:	2205      	movs	r2, #5
 800c1f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1fa:	4858      	ldr	r0, [pc, #352]	; (800c35c <_vfiprintf_r+0x24c>)
 800c1fc:	f7f4 f828 	bl	8000250 <memchr>
 800c200:	9a04      	ldr	r2, [sp, #16]
 800c202:	b9d8      	cbnz	r0, 800c23c <_vfiprintf_r+0x12c>
 800c204:	06d1      	lsls	r1, r2, #27
 800c206:	bf44      	itt	mi
 800c208:	2320      	movmi	r3, #32
 800c20a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c20e:	0713      	lsls	r3, r2, #28
 800c210:	bf44      	itt	mi
 800c212:	232b      	movmi	r3, #43	; 0x2b
 800c214:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c218:	f89a 3000 	ldrb.w	r3, [sl]
 800c21c:	2b2a      	cmp	r3, #42	; 0x2a
 800c21e:	d015      	beq.n	800c24c <_vfiprintf_r+0x13c>
 800c220:	9a07      	ldr	r2, [sp, #28]
 800c222:	4654      	mov	r4, sl
 800c224:	2000      	movs	r0, #0
 800c226:	f04f 0c0a 	mov.w	ip, #10
 800c22a:	4621      	mov	r1, r4
 800c22c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c230:	3b30      	subs	r3, #48	; 0x30
 800c232:	2b09      	cmp	r3, #9
 800c234:	d94e      	bls.n	800c2d4 <_vfiprintf_r+0x1c4>
 800c236:	b1b0      	cbz	r0, 800c266 <_vfiprintf_r+0x156>
 800c238:	9207      	str	r2, [sp, #28]
 800c23a:	e014      	b.n	800c266 <_vfiprintf_r+0x156>
 800c23c:	eba0 0308 	sub.w	r3, r0, r8
 800c240:	fa09 f303 	lsl.w	r3, r9, r3
 800c244:	4313      	orrs	r3, r2
 800c246:	9304      	str	r3, [sp, #16]
 800c248:	46a2      	mov	sl, r4
 800c24a:	e7d2      	b.n	800c1f2 <_vfiprintf_r+0xe2>
 800c24c:	9b03      	ldr	r3, [sp, #12]
 800c24e:	1d19      	adds	r1, r3, #4
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	9103      	str	r1, [sp, #12]
 800c254:	2b00      	cmp	r3, #0
 800c256:	bfbb      	ittet	lt
 800c258:	425b      	neglt	r3, r3
 800c25a:	f042 0202 	orrlt.w	r2, r2, #2
 800c25e:	9307      	strge	r3, [sp, #28]
 800c260:	9307      	strlt	r3, [sp, #28]
 800c262:	bfb8      	it	lt
 800c264:	9204      	strlt	r2, [sp, #16]
 800c266:	7823      	ldrb	r3, [r4, #0]
 800c268:	2b2e      	cmp	r3, #46	; 0x2e
 800c26a:	d10c      	bne.n	800c286 <_vfiprintf_r+0x176>
 800c26c:	7863      	ldrb	r3, [r4, #1]
 800c26e:	2b2a      	cmp	r3, #42	; 0x2a
 800c270:	d135      	bne.n	800c2de <_vfiprintf_r+0x1ce>
 800c272:	9b03      	ldr	r3, [sp, #12]
 800c274:	1d1a      	adds	r2, r3, #4
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	9203      	str	r2, [sp, #12]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	bfb8      	it	lt
 800c27e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c282:	3402      	adds	r4, #2
 800c284:	9305      	str	r3, [sp, #20]
 800c286:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c36c <_vfiprintf_r+0x25c>
 800c28a:	7821      	ldrb	r1, [r4, #0]
 800c28c:	2203      	movs	r2, #3
 800c28e:	4650      	mov	r0, sl
 800c290:	f7f3 ffde 	bl	8000250 <memchr>
 800c294:	b140      	cbz	r0, 800c2a8 <_vfiprintf_r+0x198>
 800c296:	2340      	movs	r3, #64	; 0x40
 800c298:	eba0 000a 	sub.w	r0, r0, sl
 800c29c:	fa03 f000 	lsl.w	r0, r3, r0
 800c2a0:	9b04      	ldr	r3, [sp, #16]
 800c2a2:	4303      	orrs	r3, r0
 800c2a4:	3401      	adds	r4, #1
 800c2a6:	9304      	str	r3, [sp, #16]
 800c2a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ac:	482c      	ldr	r0, [pc, #176]	; (800c360 <_vfiprintf_r+0x250>)
 800c2ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c2b2:	2206      	movs	r2, #6
 800c2b4:	f7f3 ffcc 	bl	8000250 <memchr>
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	d03f      	beq.n	800c33c <_vfiprintf_r+0x22c>
 800c2bc:	4b29      	ldr	r3, [pc, #164]	; (800c364 <_vfiprintf_r+0x254>)
 800c2be:	bb1b      	cbnz	r3, 800c308 <_vfiprintf_r+0x1f8>
 800c2c0:	9b03      	ldr	r3, [sp, #12]
 800c2c2:	3307      	adds	r3, #7
 800c2c4:	f023 0307 	bic.w	r3, r3, #7
 800c2c8:	3308      	adds	r3, #8
 800c2ca:	9303      	str	r3, [sp, #12]
 800c2cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2ce:	443b      	add	r3, r7
 800c2d0:	9309      	str	r3, [sp, #36]	; 0x24
 800c2d2:	e767      	b.n	800c1a4 <_vfiprintf_r+0x94>
 800c2d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c2d8:	460c      	mov	r4, r1
 800c2da:	2001      	movs	r0, #1
 800c2dc:	e7a5      	b.n	800c22a <_vfiprintf_r+0x11a>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	3401      	adds	r4, #1
 800c2e2:	9305      	str	r3, [sp, #20]
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	f04f 0c0a 	mov.w	ip, #10
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c2f0:	3a30      	subs	r2, #48	; 0x30
 800c2f2:	2a09      	cmp	r2, #9
 800c2f4:	d903      	bls.n	800c2fe <_vfiprintf_r+0x1ee>
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d0c5      	beq.n	800c286 <_vfiprintf_r+0x176>
 800c2fa:	9105      	str	r1, [sp, #20]
 800c2fc:	e7c3      	b.n	800c286 <_vfiprintf_r+0x176>
 800c2fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800c302:	4604      	mov	r4, r0
 800c304:	2301      	movs	r3, #1
 800c306:	e7f0      	b.n	800c2ea <_vfiprintf_r+0x1da>
 800c308:	ab03      	add	r3, sp, #12
 800c30a:	9300      	str	r3, [sp, #0]
 800c30c:	462a      	mov	r2, r5
 800c30e:	4b16      	ldr	r3, [pc, #88]	; (800c368 <_vfiprintf_r+0x258>)
 800c310:	a904      	add	r1, sp, #16
 800c312:	4630      	mov	r0, r6
 800c314:	f7fb fe78 	bl	8008008 <_printf_float>
 800c318:	4607      	mov	r7, r0
 800c31a:	1c78      	adds	r0, r7, #1
 800c31c:	d1d6      	bne.n	800c2cc <_vfiprintf_r+0x1bc>
 800c31e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c320:	07d9      	lsls	r1, r3, #31
 800c322:	d405      	bmi.n	800c330 <_vfiprintf_r+0x220>
 800c324:	89ab      	ldrh	r3, [r5, #12]
 800c326:	059a      	lsls	r2, r3, #22
 800c328:	d402      	bmi.n	800c330 <_vfiprintf_r+0x220>
 800c32a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c32c:	f7fe ff66 	bl	800b1fc <__retarget_lock_release_recursive>
 800c330:	89ab      	ldrh	r3, [r5, #12]
 800c332:	065b      	lsls	r3, r3, #25
 800c334:	f53f af12 	bmi.w	800c15c <_vfiprintf_r+0x4c>
 800c338:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c33a:	e711      	b.n	800c160 <_vfiprintf_r+0x50>
 800c33c:	ab03      	add	r3, sp, #12
 800c33e:	9300      	str	r3, [sp, #0]
 800c340:	462a      	mov	r2, r5
 800c342:	4b09      	ldr	r3, [pc, #36]	; (800c368 <_vfiprintf_r+0x258>)
 800c344:	a904      	add	r1, sp, #16
 800c346:	4630      	mov	r0, r6
 800c348:	f7fc f8ea 	bl	8008520 <_printf_i>
 800c34c:	e7e4      	b.n	800c318 <_vfiprintf_r+0x208>
 800c34e:	bf00      	nop
 800c350:	0800cf98 	.word	0x0800cf98
 800c354:	0800cfb8 	.word	0x0800cfb8
 800c358:	0800cf78 	.word	0x0800cf78
 800c35c:	0800d1b4 	.word	0x0800d1b4
 800c360:	0800d1be 	.word	0x0800d1be
 800c364:	08008009 	.word	0x08008009
 800c368:	0800c0eb 	.word	0x0800c0eb
 800c36c:	0800d1ba 	.word	0x0800d1ba

0800c370 <_putc_r>:
 800c370:	b570      	push	{r4, r5, r6, lr}
 800c372:	460d      	mov	r5, r1
 800c374:	4614      	mov	r4, r2
 800c376:	4606      	mov	r6, r0
 800c378:	b118      	cbz	r0, 800c382 <_putc_r+0x12>
 800c37a:	6983      	ldr	r3, [r0, #24]
 800c37c:	b90b      	cbnz	r3, 800c382 <_putc_r+0x12>
 800c37e:	f7fe fb2b 	bl	800a9d8 <__sinit>
 800c382:	4b1c      	ldr	r3, [pc, #112]	; (800c3f4 <_putc_r+0x84>)
 800c384:	429c      	cmp	r4, r3
 800c386:	d124      	bne.n	800c3d2 <_putc_r+0x62>
 800c388:	6874      	ldr	r4, [r6, #4]
 800c38a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c38c:	07d8      	lsls	r0, r3, #31
 800c38e:	d405      	bmi.n	800c39c <_putc_r+0x2c>
 800c390:	89a3      	ldrh	r3, [r4, #12]
 800c392:	0599      	lsls	r1, r3, #22
 800c394:	d402      	bmi.n	800c39c <_putc_r+0x2c>
 800c396:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c398:	f7fe ff2f 	bl	800b1fa <__retarget_lock_acquire_recursive>
 800c39c:	68a3      	ldr	r3, [r4, #8]
 800c39e:	3b01      	subs	r3, #1
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	60a3      	str	r3, [r4, #8]
 800c3a4:	da05      	bge.n	800c3b2 <_putc_r+0x42>
 800c3a6:	69a2      	ldr	r2, [r4, #24]
 800c3a8:	4293      	cmp	r3, r2
 800c3aa:	db1c      	blt.n	800c3e6 <_putc_r+0x76>
 800c3ac:	b2eb      	uxtb	r3, r5
 800c3ae:	2b0a      	cmp	r3, #10
 800c3b0:	d019      	beq.n	800c3e6 <_putc_r+0x76>
 800c3b2:	6823      	ldr	r3, [r4, #0]
 800c3b4:	1c5a      	adds	r2, r3, #1
 800c3b6:	6022      	str	r2, [r4, #0]
 800c3b8:	701d      	strb	r5, [r3, #0]
 800c3ba:	b2ed      	uxtb	r5, r5
 800c3bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c3be:	07da      	lsls	r2, r3, #31
 800c3c0:	d405      	bmi.n	800c3ce <_putc_r+0x5e>
 800c3c2:	89a3      	ldrh	r3, [r4, #12]
 800c3c4:	059b      	lsls	r3, r3, #22
 800c3c6:	d402      	bmi.n	800c3ce <_putc_r+0x5e>
 800c3c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c3ca:	f7fe ff17 	bl	800b1fc <__retarget_lock_release_recursive>
 800c3ce:	4628      	mov	r0, r5
 800c3d0:	bd70      	pop	{r4, r5, r6, pc}
 800c3d2:	4b09      	ldr	r3, [pc, #36]	; (800c3f8 <_putc_r+0x88>)
 800c3d4:	429c      	cmp	r4, r3
 800c3d6:	d101      	bne.n	800c3dc <_putc_r+0x6c>
 800c3d8:	68b4      	ldr	r4, [r6, #8]
 800c3da:	e7d6      	b.n	800c38a <_putc_r+0x1a>
 800c3dc:	4b07      	ldr	r3, [pc, #28]	; (800c3fc <_putc_r+0x8c>)
 800c3de:	429c      	cmp	r4, r3
 800c3e0:	bf08      	it	eq
 800c3e2:	68f4      	ldreq	r4, [r6, #12]
 800c3e4:	e7d1      	b.n	800c38a <_putc_r+0x1a>
 800c3e6:	4629      	mov	r1, r5
 800c3e8:	4622      	mov	r2, r4
 800c3ea:	4630      	mov	r0, r6
 800c3ec:	f7fd fb0a 	bl	8009a04 <__swbuf_r>
 800c3f0:	4605      	mov	r5, r0
 800c3f2:	e7e3      	b.n	800c3bc <_putc_r+0x4c>
 800c3f4:	0800cf98 	.word	0x0800cf98
 800c3f8:	0800cfb8 	.word	0x0800cfb8
 800c3fc:	0800cf78 	.word	0x0800cf78

0800c400 <nan>:
 800c400:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c408 <nan+0x8>
 800c404:	4770      	bx	lr
 800c406:	bf00      	nop
 800c408:	00000000 	.word	0x00000000
 800c40c:	7ff80000 	.word	0x7ff80000

0800c410 <_sbrk_r>:
 800c410:	b538      	push	{r3, r4, r5, lr}
 800c412:	4d06      	ldr	r5, [pc, #24]	; (800c42c <_sbrk_r+0x1c>)
 800c414:	2300      	movs	r3, #0
 800c416:	4604      	mov	r4, r0
 800c418:	4608      	mov	r0, r1
 800c41a:	602b      	str	r3, [r5, #0]
 800c41c:	f7f6 fd8e 	bl	8002f3c <_sbrk>
 800c420:	1c43      	adds	r3, r0, #1
 800c422:	d102      	bne.n	800c42a <_sbrk_r+0x1a>
 800c424:	682b      	ldr	r3, [r5, #0]
 800c426:	b103      	cbz	r3, 800c42a <_sbrk_r+0x1a>
 800c428:	6023      	str	r3, [r4, #0]
 800c42a:	bd38      	pop	{r3, r4, r5, pc}
 800c42c:	200006f4 	.word	0x200006f4

0800c430 <__sread>:
 800c430:	b510      	push	{r4, lr}
 800c432:	460c      	mov	r4, r1
 800c434:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c438:	f000 f92e 	bl	800c698 <_read_r>
 800c43c:	2800      	cmp	r0, #0
 800c43e:	bfab      	itete	ge
 800c440:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c442:	89a3      	ldrhlt	r3, [r4, #12]
 800c444:	181b      	addge	r3, r3, r0
 800c446:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c44a:	bfac      	ite	ge
 800c44c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c44e:	81a3      	strhlt	r3, [r4, #12]
 800c450:	bd10      	pop	{r4, pc}

0800c452 <__swrite>:
 800c452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c456:	461f      	mov	r7, r3
 800c458:	898b      	ldrh	r3, [r1, #12]
 800c45a:	05db      	lsls	r3, r3, #23
 800c45c:	4605      	mov	r5, r0
 800c45e:	460c      	mov	r4, r1
 800c460:	4616      	mov	r6, r2
 800c462:	d505      	bpl.n	800c470 <__swrite+0x1e>
 800c464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c468:	2302      	movs	r3, #2
 800c46a:	2200      	movs	r2, #0
 800c46c:	f000 f8b6 	bl	800c5dc <_lseek_r>
 800c470:	89a3      	ldrh	r3, [r4, #12]
 800c472:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c476:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c47a:	81a3      	strh	r3, [r4, #12]
 800c47c:	4632      	mov	r2, r6
 800c47e:	463b      	mov	r3, r7
 800c480:	4628      	mov	r0, r5
 800c482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c486:	f000 b835 	b.w	800c4f4 <_write_r>

0800c48a <__sseek>:
 800c48a:	b510      	push	{r4, lr}
 800c48c:	460c      	mov	r4, r1
 800c48e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c492:	f000 f8a3 	bl	800c5dc <_lseek_r>
 800c496:	1c43      	adds	r3, r0, #1
 800c498:	89a3      	ldrh	r3, [r4, #12]
 800c49a:	bf15      	itete	ne
 800c49c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c49e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c4a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c4a6:	81a3      	strheq	r3, [r4, #12]
 800c4a8:	bf18      	it	ne
 800c4aa:	81a3      	strhne	r3, [r4, #12]
 800c4ac:	bd10      	pop	{r4, pc}

0800c4ae <__sclose>:
 800c4ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4b2:	f000 b84f 	b.w	800c554 <_close_r>

0800c4b6 <strncmp>:
 800c4b6:	b510      	push	{r4, lr}
 800c4b8:	b16a      	cbz	r2, 800c4d6 <strncmp+0x20>
 800c4ba:	3901      	subs	r1, #1
 800c4bc:	1884      	adds	r4, r0, r2
 800c4be:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c4c2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	d103      	bne.n	800c4d2 <strncmp+0x1c>
 800c4ca:	42a0      	cmp	r0, r4
 800c4cc:	d001      	beq.n	800c4d2 <strncmp+0x1c>
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d1f5      	bne.n	800c4be <strncmp+0x8>
 800c4d2:	1a98      	subs	r0, r3, r2
 800c4d4:	bd10      	pop	{r4, pc}
 800c4d6:	4610      	mov	r0, r2
 800c4d8:	e7fc      	b.n	800c4d4 <strncmp+0x1e>

0800c4da <__ascii_wctomb>:
 800c4da:	b149      	cbz	r1, 800c4f0 <__ascii_wctomb+0x16>
 800c4dc:	2aff      	cmp	r2, #255	; 0xff
 800c4de:	bf85      	ittet	hi
 800c4e0:	238a      	movhi	r3, #138	; 0x8a
 800c4e2:	6003      	strhi	r3, [r0, #0]
 800c4e4:	700a      	strbls	r2, [r1, #0]
 800c4e6:	f04f 30ff 	movhi.w	r0, #4294967295
 800c4ea:	bf98      	it	ls
 800c4ec:	2001      	movls	r0, #1
 800c4ee:	4770      	bx	lr
 800c4f0:	4608      	mov	r0, r1
 800c4f2:	4770      	bx	lr

0800c4f4 <_write_r>:
 800c4f4:	b538      	push	{r3, r4, r5, lr}
 800c4f6:	4d07      	ldr	r5, [pc, #28]	; (800c514 <_write_r+0x20>)
 800c4f8:	4604      	mov	r4, r0
 800c4fa:	4608      	mov	r0, r1
 800c4fc:	4611      	mov	r1, r2
 800c4fe:	2200      	movs	r2, #0
 800c500:	602a      	str	r2, [r5, #0]
 800c502:	461a      	mov	r2, r3
 800c504:	f7f6 fcc9 	bl	8002e9a <_write>
 800c508:	1c43      	adds	r3, r0, #1
 800c50a:	d102      	bne.n	800c512 <_write_r+0x1e>
 800c50c:	682b      	ldr	r3, [r5, #0]
 800c50e:	b103      	cbz	r3, 800c512 <_write_r+0x1e>
 800c510:	6023      	str	r3, [r4, #0]
 800c512:	bd38      	pop	{r3, r4, r5, pc}
 800c514:	200006f4 	.word	0x200006f4

0800c518 <__assert_func>:
 800c518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c51a:	4614      	mov	r4, r2
 800c51c:	461a      	mov	r2, r3
 800c51e:	4b09      	ldr	r3, [pc, #36]	; (800c544 <__assert_func+0x2c>)
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4605      	mov	r5, r0
 800c524:	68d8      	ldr	r0, [r3, #12]
 800c526:	b14c      	cbz	r4, 800c53c <__assert_func+0x24>
 800c528:	4b07      	ldr	r3, [pc, #28]	; (800c548 <__assert_func+0x30>)
 800c52a:	9100      	str	r1, [sp, #0]
 800c52c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c530:	4906      	ldr	r1, [pc, #24]	; (800c54c <__assert_func+0x34>)
 800c532:	462b      	mov	r3, r5
 800c534:	f000 f81e 	bl	800c574 <fiprintf>
 800c538:	f000 f8c0 	bl	800c6bc <abort>
 800c53c:	4b04      	ldr	r3, [pc, #16]	; (800c550 <__assert_func+0x38>)
 800c53e:	461c      	mov	r4, r3
 800c540:	e7f3      	b.n	800c52a <__assert_func+0x12>
 800c542:	bf00      	nop
 800c544:	20000010 	.word	0x20000010
 800c548:	0800d1c5 	.word	0x0800d1c5
 800c54c:	0800d1d2 	.word	0x0800d1d2
 800c550:	0800d200 	.word	0x0800d200

0800c554 <_close_r>:
 800c554:	b538      	push	{r3, r4, r5, lr}
 800c556:	4d06      	ldr	r5, [pc, #24]	; (800c570 <_close_r+0x1c>)
 800c558:	2300      	movs	r3, #0
 800c55a:	4604      	mov	r4, r0
 800c55c:	4608      	mov	r0, r1
 800c55e:	602b      	str	r3, [r5, #0]
 800c560:	f7f6 fcb7 	bl	8002ed2 <_close>
 800c564:	1c43      	adds	r3, r0, #1
 800c566:	d102      	bne.n	800c56e <_close_r+0x1a>
 800c568:	682b      	ldr	r3, [r5, #0]
 800c56a:	b103      	cbz	r3, 800c56e <_close_r+0x1a>
 800c56c:	6023      	str	r3, [r4, #0]
 800c56e:	bd38      	pop	{r3, r4, r5, pc}
 800c570:	200006f4 	.word	0x200006f4

0800c574 <fiprintf>:
 800c574:	b40e      	push	{r1, r2, r3}
 800c576:	b503      	push	{r0, r1, lr}
 800c578:	4601      	mov	r1, r0
 800c57a:	ab03      	add	r3, sp, #12
 800c57c:	4805      	ldr	r0, [pc, #20]	; (800c594 <fiprintf+0x20>)
 800c57e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c582:	6800      	ldr	r0, [r0, #0]
 800c584:	9301      	str	r3, [sp, #4]
 800c586:	f7ff fdc3 	bl	800c110 <_vfiprintf_r>
 800c58a:	b002      	add	sp, #8
 800c58c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c590:	b003      	add	sp, #12
 800c592:	4770      	bx	lr
 800c594:	20000010 	.word	0x20000010

0800c598 <_fstat_r>:
 800c598:	b538      	push	{r3, r4, r5, lr}
 800c59a:	4d07      	ldr	r5, [pc, #28]	; (800c5b8 <_fstat_r+0x20>)
 800c59c:	2300      	movs	r3, #0
 800c59e:	4604      	mov	r4, r0
 800c5a0:	4608      	mov	r0, r1
 800c5a2:	4611      	mov	r1, r2
 800c5a4:	602b      	str	r3, [r5, #0]
 800c5a6:	f7f6 fca0 	bl	8002eea <_fstat>
 800c5aa:	1c43      	adds	r3, r0, #1
 800c5ac:	d102      	bne.n	800c5b4 <_fstat_r+0x1c>
 800c5ae:	682b      	ldr	r3, [r5, #0]
 800c5b0:	b103      	cbz	r3, 800c5b4 <_fstat_r+0x1c>
 800c5b2:	6023      	str	r3, [r4, #0]
 800c5b4:	bd38      	pop	{r3, r4, r5, pc}
 800c5b6:	bf00      	nop
 800c5b8:	200006f4 	.word	0x200006f4

0800c5bc <_isatty_r>:
 800c5bc:	b538      	push	{r3, r4, r5, lr}
 800c5be:	4d06      	ldr	r5, [pc, #24]	; (800c5d8 <_isatty_r+0x1c>)
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	4604      	mov	r4, r0
 800c5c4:	4608      	mov	r0, r1
 800c5c6:	602b      	str	r3, [r5, #0]
 800c5c8:	f7f6 fc9f 	bl	8002f0a <_isatty>
 800c5cc:	1c43      	adds	r3, r0, #1
 800c5ce:	d102      	bne.n	800c5d6 <_isatty_r+0x1a>
 800c5d0:	682b      	ldr	r3, [r5, #0]
 800c5d2:	b103      	cbz	r3, 800c5d6 <_isatty_r+0x1a>
 800c5d4:	6023      	str	r3, [r4, #0]
 800c5d6:	bd38      	pop	{r3, r4, r5, pc}
 800c5d8:	200006f4 	.word	0x200006f4

0800c5dc <_lseek_r>:
 800c5dc:	b538      	push	{r3, r4, r5, lr}
 800c5de:	4d07      	ldr	r5, [pc, #28]	; (800c5fc <_lseek_r+0x20>)
 800c5e0:	4604      	mov	r4, r0
 800c5e2:	4608      	mov	r0, r1
 800c5e4:	4611      	mov	r1, r2
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	602a      	str	r2, [r5, #0]
 800c5ea:	461a      	mov	r2, r3
 800c5ec:	f7f6 fc98 	bl	8002f20 <_lseek>
 800c5f0:	1c43      	adds	r3, r0, #1
 800c5f2:	d102      	bne.n	800c5fa <_lseek_r+0x1e>
 800c5f4:	682b      	ldr	r3, [r5, #0]
 800c5f6:	b103      	cbz	r3, 800c5fa <_lseek_r+0x1e>
 800c5f8:	6023      	str	r3, [r4, #0]
 800c5fa:	bd38      	pop	{r3, r4, r5, pc}
 800c5fc:	200006f4 	.word	0x200006f4

0800c600 <memmove>:
 800c600:	4288      	cmp	r0, r1
 800c602:	b510      	push	{r4, lr}
 800c604:	eb01 0402 	add.w	r4, r1, r2
 800c608:	d902      	bls.n	800c610 <memmove+0x10>
 800c60a:	4284      	cmp	r4, r0
 800c60c:	4623      	mov	r3, r4
 800c60e:	d807      	bhi.n	800c620 <memmove+0x20>
 800c610:	1e43      	subs	r3, r0, #1
 800c612:	42a1      	cmp	r1, r4
 800c614:	d008      	beq.n	800c628 <memmove+0x28>
 800c616:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c61a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c61e:	e7f8      	b.n	800c612 <memmove+0x12>
 800c620:	4402      	add	r2, r0
 800c622:	4601      	mov	r1, r0
 800c624:	428a      	cmp	r2, r1
 800c626:	d100      	bne.n	800c62a <memmove+0x2a>
 800c628:	bd10      	pop	{r4, pc}
 800c62a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c62e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c632:	e7f7      	b.n	800c624 <memmove+0x24>

0800c634 <__malloc_lock>:
 800c634:	4801      	ldr	r0, [pc, #4]	; (800c63c <__malloc_lock+0x8>)
 800c636:	f7fe bde0 	b.w	800b1fa <__retarget_lock_acquire_recursive>
 800c63a:	bf00      	nop
 800c63c:	200006ec 	.word	0x200006ec

0800c640 <__malloc_unlock>:
 800c640:	4801      	ldr	r0, [pc, #4]	; (800c648 <__malloc_unlock+0x8>)
 800c642:	f7fe bddb 	b.w	800b1fc <__retarget_lock_release_recursive>
 800c646:	bf00      	nop
 800c648:	200006ec 	.word	0x200006ec

0800c64c <_realloc_r>:
 800c64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c64e:	4607      	mov	r7, r0
 800c650:	4614      	mov	r4, r2
 800c652:	460e      	mov	r6, r1
 800c654:	b921      	cbnz	r1, 800c660 <_realloc_r+0x14>
 800c656:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c65a:	4611      	mov	r1, r2
 800c65c:	f7ff bb78 	b.w	800bd50 <_malloc_r>
 800c660:	b922      	cbnz	r2, 800c66c <_realloc_r+0x20>
 800c662:	f7ff fb25 	bl	800bcb0 <_free_r>
 800c666:	4625      	mov	r5, r4
 800c668:	4628      	mov	r0, r5
 800c66a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c66c:	f000 f82d 	bl	800c6ca <_malloc_usable_size_r>
 800c670:	42a0      	cmp	r0, r4
 800c672:	d20f      	bcs.n	800c694 <_realloc_r+0x48>
 800c674:	4621      	mov	r1, r4
 800c676:	4638      	mov	r0, r7
 800c678:	f7ff fb6a 	bl	800bd50 <_malloc_r>
 800c67c:	4605      	mov	r5, r0
 800c67e:	2800      	cmp	r0, #0
 800c680:	d0f2      	beq.n	800c668 <_realloc_r+0x1c>
 800c682:	4631      	mov	r1, r6
 800c684:	4622      	mov	r2, r4
 800c686:	f7fe fe39 	bl	800b2fc <memcpy>
 800c68a:	4631      	mov	r1, r6
 800c68c:	4638      	mov	r0, r7
 800c68e:	f7ff fb0f 	bl	800bcb0 <_free_r>
 800c692:	e7e9      	b.n	800c668 <_realloc_r+0x1c>
 800c694:	4635      	mov	r5, r6
 800c696:	e7e7      	b.n	800c668 <_realloc_r+0x1c>

0800c698 <_read_r>:
 800c698:	b538      	push	{r3, r4, r5, lr}
 800c69a:	4d07      	ldr	r5, [pc, #28]	; (800c6b8 <_read_r+0x20>)
 800c69c:	4604      	mov	r4, r0
 800c69e:	4608      	mov	r0, r1
 800c6a0:	4611      	mov	r1, r2
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	602a      	str	r2, [r5, #0]
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	f7f6 fbda 	bl	8002e60 <_read>
 800c6ac:	1c43      	adds	r3, r0, #1
 800c6ae:	d102      	bne.n	800c6b6 <_read_r+0x1e>
 800c6b0:	682b      	ldr	r3, [r5, #0]
 800c6b2:	b103      	cbz	r3, 800c6b6 <_read_r+0x1e>
 800c6b4:	6023      	str	r3, [r4, #0]
 800c6b6:	bd38      	pop	{r3, r4, r5, pc}
 800c6b8:	200006f4 	.word	0x200006f4

0800c6bc <abort>:
 800c6bc:	b508      	push	{r3, lr}
 800c6be:	2006      	movs	r0, #6
 800c6c0:	f000 f834 	bl	800c72c <raise>
 800c6c4:	2001      	movs	r0, #1
 800c6c6:	f7f6 fbc1 	bl	8002e4c <_exit>

0800c6ca <_malloc_usable_size_r>:
 800c6ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6ce:	1f18      	subs	r0, r3, #4
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	bfbc      	itt	lt
 800c6d4:	580b      	ldrlt	r3, [r1, r0]
 800c6d6:	18c0      	addlt	r0, r0, r3
 800c6d8:	4770      	bx	lr

0800c6da <_raise_r>:
 800c6da:	291f      	cmp	r1, #31
 800c6dc:	b538      	push	{r3, r4, r5, lr}
 800c6de:	4604      	mov	r4, r0
 800c6e0:	460d      	mov	r5, r1
 800c6e2:	d904      	bls.n	800c6ee <_raise_r+0x14>
 800c6e4:	2316      	movs	r3, #22
 800c6e6:	6003      	str	r3, [r0, #0]
 800c6e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ec:	bd38      	pop	{r3, r4, r5, pc}
 800c6ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c6f0:	b112      	cbz	r2, 800c6f8 <_raise_r+0x1e>
 800c6f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c6f6:	b94b      	cbnz	r3, 800c70c <_raise_r+0x32>
 800c6f8:	4620      	mov	r0, r4
 800c6fa:	f000 f831 	bl	800c760 <_getpid_r>
 800c6fe:	462a      	mov	r2, r5
 800c700:	4601      	mov	r1, r0
 800c702:	4620      	mov	r0, r4
 800c704:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c708:	f000 b818 	b.w	800c73c <_kill_r>
 800c70c:	2b01      	cmp	r3, #1
 800c70e:	d00a      	beq.n	800c726 <_raise_r+0x4c>
 800c710:	1c59      	adds	r1, r3, #1
 800c712:	d103      	bne.n	800c71c <_raise_r+0x42>
 800c714:	2316      	movs	r3, #22
 800c716:	6003      	str	r3, [r0, #0]
 800c718:	2001      	movs	r0, #1
 800c71a:	e7e7      	b.n	800c6ec <_raise_r+0x12>
 800c71c:	2400      	movs	r4, #0
 800c71e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c722:	4628      	mov	r0, r5
 800c724:	4798      	blx	r3
 800c726:	2000      	movs	r0, #0
 800c728:	e7e0      	b.n	800c6ec <_raise_r+0x12>
	...

0800c72c <raise>:
 800c72c:	4b02      	ldr	r3, [pc, #8]	; (800c738 <raise+0xc>)
 800c72e:	4601      	mov	r1, r0
 800c730:	6818      	ldr	r0, [r3, #0]
 800c732:	f7ff bfd2 	b.w	800c6da <_raise_r>
 800c736:	bf00      	nop
 800c738:	20000010 	.word	0x20000010

0800c73c <_kill_r>:
 800c73c:	b538      	push	{r3, r4, r5, lr}
 800c73e:	4d07      	ldr	r5, [pc, #28]	; (800c75c <_kill_r+0x20>)
 800c740:	2300      	movs	r3, #0
 800c742:	4604      	mov	r4, r0
 800c744:	4608      	mov	r0, r1
 800c746:	4611      	mov	r1, r2
 800c748:	602b      	str	r3, [r5, #0]
 800c74a:	f7f6 fb6f 	bl	8002e2c <_kill>
 800c74e:	1c43      	adds	r3, r0, #1
 800c750:	d102      	bne.n	800c758 <_kill_r+0x1c>
 800c752:	682b      	ldr	r3, [r5, #0]
 800c754:	b103      	cbz	r3, 800c758 <_kill_r+0x1c>
 800c756:	6023      	str	r3, [r4, #0]
 800c758:	bd38      	pop	{r3, r4, r5, pc}
 800c75a:	bf00      	nop
 800c75c:	200006f4 	.word	0x200006f4

0800c760 <_getpid_r>:
 800c760:	f7f6 bb5c 	b.w	8002e1c <_getpid>

0800c764 <logf>:
 800c764:	ee10 3a10 	vmov	r3, s0
 800c768:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c76c:	b410      	push	{r4}
 800c76e:	d055      	beq.n	800c81c <logf+0xb8>
 800c770:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 800c774:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800c778:	d31a      	bcc.n	800c7b0 <logf+0x4c>
 800c77a:	005a      	lsls	r2, r3, #1
 800c77c:	d104      	bne.n	800c788 <logf+0x24>
 800c77e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c782:	2001      	movs	r0, #1
 800c784:	f000 b860 	b.w	800c848 <__math_divzerof>
 800c788:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c78c:	d043      	beq.n	800c816 <logf+0xb2>
 800c78e:	2b00      	cmp	r3, #0
 800c790:	db02      	blt.n	800c798 <logf+0x34>
 800c792:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800c796:	d303      	bcc.n	800c7a0 <logf+0x3c>
 800c798:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c79c:	f000 b864 	b.w	800c868 <__math_invalidf>
 800c7a0:	eddf 7a20 	vldr	s15, [pc, #128]	; 800c824 <logf+0xc0>
 800c7a4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c7a8:	ee10 3a10 	vmov	r3, s0
 800c7ac:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 800c7b0:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 800c7b4:	491c      	ldr	r1, [pc, #112]	; (800c828 <logf+0xc4>)
 800c7b6:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 800c7ba:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800c7be:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 800c7c2:	0dd4      	lsrs	r4, r2, #23
 800c7c4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800c7c8:	05e4      	lsls	r4, r4, #23
 800c7ca:	ed90 6b00 	vldr	d6, [r0]
 800c7ce:	1b1b      	subs	r3, r3, r4
 800c7d0:	ee07 3a90 	vmov	s15, r3
 800c7d4:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 800c7d8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c7dc:	15d2      	asrs	r2, r2, #23
 800c7de:	eea6 0b07 	vfma.f64	d0, d6, d7
 800c7e2:	ed90 6b02 	vldr	d6, [r0, #8]
 800c7e6:	ee07 2a90 	vmov	s15, r2
 800c7ea:	ed91 4b44 	vldr	d4, [r1, #272]	; 0x110
 800c7ee:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c7f2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c7f6:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 800c7fa:	ee20 5b00 	vmul.f64	d5, d0, d0
 800c7fe:	eea4 7b00 	vfma.f64	d7, d4, d0
 800c802:	ed91 4b42 	vldr	d4, [r1, #264]	; 0x108
 800c806:	ee30 0b06 	vadd.f64	d0, d0, d6
 800c80a:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c80e:	eea5 0b07 	vfma.f64	d0, d5, d7
 800c812:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c81a:	4770      	bx	lr
 800c81c:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800c82c <logf+0xc8>
 800c820:	e7f9      	b.n	800c816 <logf+0xb2>
 800c822:	bf00      	nop
 800c824:	4b000000 	.word	0x4b000000
 800c828:	0800d208 	.word	0x0800d208
 800c82c:	00000000 	.word	0x00000000

0800c830 <with_errnof>:
 800c830:	b513      	push	{r0, r1, r4, lr}
 800c832:	4604      	mov	r4, r0
 800c834:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c838:	f7fb fb22 	bl	8007e80 <__errno>
 800c83c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c840:	6004      	str	r4, [r0, #0]
 800c842:	b002      	add	sp, #8
 800c844:	bd10      	pop	{r4, pc}
	...

0800c848 <__math_divzerof>:
 800c848:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c84c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800c850:	2800      	cmp	r0, #0
 800c852:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800c856:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800c864 <__math_divzerof+0x1c>
 800c85a:	2022      	movs	r0, #34	; 0x22
 800c85c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800c860:	f7ff bfe6 	b.w	800c830 <with_errnof>
 800c864:	00000000 	.word	0x00000000

0800c868 <__math_invalidf>:
 800c868:	eef0 7a40 	vmov.f32	s15, s0
 800c86c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c870:	eef4 7a67 	vcmp.f32	s15, s15
 800c874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c878:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800c87c:	d602      	bvs.n	800c884 <__math_invalidf+0x1c>
 800c87e:	2021      	movs	r0, #33	; 0x21
 800c880:	f7ff bfd6 	b.w	800c830 <with_errnof>
 800c884:	4770      	bx	lr
	...

0800c888 <_init>:
 800c888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c88a:	bf00      	nop
 800c88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c88e:	bc08      	pop	{r3}
 800c890:	469e      	mov	lr, r3
 800c892:	4770      	bx	lr

0800c894 <_fini>:
 800c894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c896:	bf00      	nop
 800c898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c89a:	bc08      	pop	{r3}
 800c89c:	469e      	mov	lr, r3
 800c89e:	4770      	bx	lr
