
Vending_machine.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a884  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000089c  0800aa88  0800aa88  0001aa88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b324  0800b324  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b324  0800b324  0001b324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b32c  0800b32c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b32c  0800b32c  0001b32c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b330  0800b330  0001b330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800b334  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  200001e8  0800b518  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000588  0800b518  00020588  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019441  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ad  00000000  00000000  00039653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  0003c800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d90  00000000  00000000  0003d6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a006  00000000  00000000  0003e468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000151ad  00000000  00000000  0006846e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f65f7  00000000  00000000  0007d61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00173c12  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005080  00000000  00000000  00173c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e8 	.word	0x200001e8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800aa6c 	.word	0x0800aa6c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ec 	.word	0x200001ec
 800023c:	0800aa6c 	.word	0x0800aa6c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a6 	b.w	80009cc <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468c      	mov	ip, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8083 	bne.w	800081e <__udivmoddi4+0x116>
 8000718:	428a      	cmp	r2, r1
 800071a:	4617      	mov	r7, r2
 800071c:	d947      	bls.n	80007ae <__udivmoddi4+0xa6>
 800071e:	fab2 f282 	clz	r2, r2
 8000722:	b142      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000724:	f1c2 0020 	rsb	r0, r2, #32
 8000728:	fa24 f000 	lsr.w	r0, r4, r0
 800072c:	4091      	lsls	r1, r2
 800072e:	4097      	lsls	r7, r2
 8000730:	ea40 0c01 	orr.w	ip, r0, r1
 8000734:	4094      	lsls	r4, r2
 8000736:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800073a:	0c23      	lsrs	r3, r4, #16
 800073c:	fbbc f6f8 	udiv	r6, ip, r8
 8000740:	fa1f fe87 	uxth.w	lr, r7
 8000744:	fb08 c116 	mls	r1, r8, r6, ip
 8000748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074c:	fb06 f10e 	mul.w	r1, r6, lr
 8000750:	4299      	cmp	r1, r3
 8000752:	d909      	bls.n	8000768 <__udivmoddi4+0x60>
 8000754:	18fb      	adds	r3, r7, r3
 8000756:	f106 30ff 	add.w	r0, r6, #4294967295
 800075a:	f080 8119 	bcs.w	8000990 <__udivmoddi4+0x288>
 800075e:	4299      	cmp	r1, r3
 8000760:	f240 8116 	bls.w	8000990 <__udivmoddi4+0x288>
 8000764:	3e02      	subs	r6, #2
 8000766:	443b      	add	r3, r7
 8000768:	1a5b      	subs	r3, r3, r1
 800076a:	b2a4      	uxth	r4, r4
 800076c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000770:	fb08 3310 	mls	r3, r8, r0, r3
 8000774:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000778:	fb00 fe0e 	mul.w	lr, r0, lr
 800077c:	45a6      	cmp	lr, r4
 800077e:	d909      	bls.n	8000794 <__udivmoddi4+0x8c>
 8000780:	193c      	adds	r4, r7, r4
 8000782:	f100 33ff 	add.w	r3, r0, #4294967295
 8000786:	f080 8105 	bcs.w	8000994 <__udivmoddi4+0x28c>
 800078a:	45a6      	cmp	lr, r4
 800078c:	f240 8102 	bls.w	8000994 <__udivmoddi4+0x28c>
 8000790:	3802      	subs	r0, #2
 8000792:	443c      	add	r4, r7
 8000794:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000798:	eba4 040e 	sub.w	r4, r4, lr
 800079c:	2600      	movs	r6, #0
 800079e:	b11d      	cbz	r5, 80007a8 <__udivmoddi4+0xa0>
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	2300      	movs	r3, #0
 80007a4:	e9c5 4300 	strd	r4, r3, [r5]
 80007a8:	4631      	mov	r1, r6
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	b902      	cbnz	r2, 80007b2 <__udivmoddi4+0xaa>
 80007b0:	deff      	udf	#255	; 0xff
 80007b2:	fab2 f282 	clz	r2, r2
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d150      	bne.n	800085c <__udivmoddi4+0x154>
 80007ba:	1bcb      	subs	r3, r1, r7
 80007bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007c0:	fa1f f887 	uxth.w	r8, r7
 80007c4:	2601      	movs	r6, #1
 80007c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80007ca:	0c21      	lsrs	r1, r4, #16
 80007cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80007d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80007d4:	fb08 f30c 	mul.w	r3, r8, ip
 80007d8:	428b      	cmp	r3, r1
 80007da:	d907      	bls.n	80007ec <__udivmoddi4+0xe4>
 80007dc:	1879      	adds	r1, r7, r1
 80007de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80007e2:	d202      	bcs.n	80007ea <__udivmoddi4+0xe2>
 80007e4:	428b      	cmp	r3, r1
 80007e6:	f200 80e9 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 80007ea:	4684      	mov	ip, r0
 80007ec:	1ac9      	subs	r1, r1, r3
 80007ee:	b2a3      	uxth	r3, r4
 80007f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80007f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80007f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80007fc:	fb08 f800 	mul.w	r8, r8, r0
 8000800:	45a0      	cmp	r8, r4
 8000802:	d907      	bls.n	8000814 <__udivmoddi4+0x10c>
 8000804:	193c      	adds	r4, r7, r4
 8000806:	f100 33ff 	add.w	r3, r0, #4294967295
 800080a:	d202      	bcs.n	8000812 <__udivmoddi4+0x10a>
 800080c:	45a0      	cmp	r8, r4
 800080e:	f200 80d9 	bhi.w	80009c4 <__udivmoddi4+0x2bc>
 8000812:	4618      	mov	r0, r3
 8000814:	eba4 0408 	sub.w	r4, r4, r8
 8000818:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800081c:	e7bf      	b.n	800079e <__udivmoddi4+0x96>
 800081e:	428b      	cmp	r3, r1
 8000820:	d909      	bls.n	8000836 <__udivmoddi4+0x12e>
 8000822:	2d00      	cmp	r5, #0
 8000824:	f000 80b1 	beq.w	800098a <__udivmoddi4+0x282>
 8000828:	2600      	movs	r6, #0
 800082a:	e9c5 0100 	strd	r0, r1, [r5]
 800082e:	4630      	mov	r0, r6
 8000830:	4631      	mov	r1, r6
 8000832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000836:	fab3 f683 	clz	r6, r3
 800083a:	2e00      	cmp	r6, #0
 800083c:	d14a      	bne.n	80008d4 <__udivmoddi4+0x1cc>
 800083e:	428b      	cmp	r3, r1
 8000840:	d302      	bcc.n	8000848 <__udivmoddi4+0x140>
 8000842:	4282      	cmp	r2, r0
 8000844:	f200 80b8 	bhi.w	80009b8 <__udivmoddi4+0x2b0>
 8000848:	1a84      	subs	r4, r0, r2
 800084a:	eb61 0103 	sbc.w	r1, r1, r3
 800084e:	2001      	movs	r0, #1
 8000850:	468c      	mov	ip, r1
 8000852:	2d00      	cmp	r5, #0
 8000854:	d0a8      	beq.n	80007a8 <__udivmoddi4+0xa0>
 8000856:	e9c5 4c00 	strd	r4, ip, [r5]
 800085a:	e7a5      	b.n	80007a8 <__udivmoddi4+0xa0>
 800085c:	f1c2 0320 	rsb	r3, r2, #32
 8000860:	fa20 f603 	lsr.w	r6, r0, r3
 8000864:	4097      	lsls	r7, r2
 8000866:	fa01 f002 	lsl.w	r0, r1, r2
 800086a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086e:	40d9      	lsrs	r1, r3
 8000870:	4330      	orrs	r0, r6
 8000872:	0c03      	lsrs	r3, r0, #16
 8000874:	fbb1 f6fe 	udiv	r6, r1, lr
 8000878:	fa1f f887 	uxth.w	r8, r7
 800087c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000880:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000884:	fb06 f108 	mul.w	r1, r6, r8
 8000888:	4299      	cmp	r1, r3
 800088a:	fa04 f402 	lsl.w	r4, r4, r2
 800088e:	d909      	bls.n	80008a4 <__udivmoddi4+0x19c>
 8000890:	18fb      	adds	r3, r7, r3
 8000892:	f106 3cff 	add.w	ip, r6, #4294967295
 8000896:	f080 808d 	bcs.w	80009b4 <__udivmoddi4+0x2ac>
 800089a:	4299      	cmp	r1, r3
 800089c:	f240 808a 	bls.w	80009b4 <__udivmoddi4+0x2ac>
 80008a0:	3e02      	subs	r6, #2
 80008a2:	443b      	add	r3, r7
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	b281      	uxth	r1, r0
 80008a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80008ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80008b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008b4:	fb00 f308 	mul.w	r3, r0, r8
 80008b8:	428b      	cmp	r3, r1
 80008ba:	d907      	bls.n	80008cc <__udivmoddi4+0x1c4>
 80008bc:	1879      	adds	r1, r7, r1
 80008be:	f100 3cff 	add.w	ip, r0, #4294967295
 80008c2:	d273      	bcs.n	80009ac <__udivmoddi4+0x2a4>
 80008c4:	428b      	cmp	r3, r1
 80008c6:	d971      	bls.n	80009ac <__udivmoddi4+0x2a4>
 80008c8:	3802      	subs	r0, #2
 80008ca:	4439      	add	r1, r7
 80008cc:	1acb      	subs	r3, r1, r3
 80008ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80008d2:	e778      	b.n	80007c6 <__udivmoddi4+0xbe>
 80008d4:	f1c6 0c20 	rsb	ip, r6, #32
 80008d8:	fa03 f406 	lsl.w	r4, r3, r6
 80008dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80008e0:	431c      	orrs	r4, r3
 80008e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80008e6:	fa01 f306 	lsl.w	r3, r1, r6
 80008ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80008ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80008f2:	431f      	orrs	r7, r3
 80008f4:	0c3b      	lsrs	r3, r7, #16
 80008f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008fa:	fa1f f884 	uxth.w	r8, r4
 80008fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000902:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000906:	fb09 fa08 	mul.w	sl, r9, r8
 800090a:	458a      	cmp	sl, r1
 800090c:	fa02 f206 	lsl.w	r2, r2, r6
 8000910:	fa00 f306 	lsl.w	r3, r0, r6
 8000914:	d908      	bls.n	8000928 <__udivmoddi4+0x220>
 8000916:	1861      	adds	r1, r4, r1
 8000918:	f109 30ff 	add.w	r0, r9, #4294967295
 800091c:	d248      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 800091e:	458a      	cmp	sl, r1
 8000920:	d946      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000922:	f1a9 0902 	sub.w	r9, r9, #2
 8000926:	4421      	add	r1, r4
 8000928:	eba1 010a 	sub.w	r1, r1, sl
 800092c:	b2bf      	uxth	r7, r7
 800092e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000932:	fb0e 1110 	mls	r1, lr, r0, r1
 8000936:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800093a:	fb00 f808 	mul.w	r8, r0, r8
 800093e:	45b8      	cmp	r8, r7
 8000940:	d907      	bls.n	8000952 <__udivmoddi4+0x24a>
 8000942:	19e7      	adds	r7, r4, r7
 8000944:	f100 31ff 	add.w	r1, r0, #4294967295
 8000948:	d22e      	bcs.n	80009a8 <__udivmoddi4+0x2a0>
 800094a:	45b8      	cmp	r8, r7
 800094c:	d92c      	bls.n	80009a8 <__udivmoddi4+0x2a0>
 800094e:	3802      	subs	r0, #2
 8000950:	4427      	add	r7, r4
 8000952:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000956:	eba7 0708 	sub.w	r7, r7, r8
 800095a:	fba0 8902 	umull	r8, r9, r0, r2
 800095e:	454f      	cmp	r7, r9
 8000960:	46c6      	mov	lr, r8
 8000962:	4649      	mov	r1, r9
 8000964:	d31a      	bcc.n	800099c <__udivmoddi4+0x294>
 8000966:	d017      	beq.n	8000998 <__udivmoddi4+0x290>
 8000968:	b15d      	cbz	r5, 8000982 <__udivmoddi4+0x27a>
 800096a:	ebb3 020e 	subs.w	r2, r3, lr
 800096e:	eb67 0701 	sbc.w	r7, r7, r1
 8000972:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000976:	40f2      	lsrs	r2, r6
 8000978:	ea4c 0202 	orr.w	r2, ip, r2
 800097c:	40f7      	lsrs	r7, r6
 800097e:	e9c5 2700 	strd	r2, r7, [r5]
 8000982:	2600      	movs	r6, #0
 8000984:	4631      	mov	r1, r6
 8000986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800098a:	462e      	mov	r6, r5
 800098c:	4628      	mov	r0, r5
 800098e:	e70b      	b.n	80007a8 <__udivmoddi4+0xa0>
 8000990:	4606      	mov	r6, r0
 8000992:	e6e9      	b.n	8000768 <__udivmoddi4+0x60>
 8000994:	4618      	mov	r0, r3
 8000996:	e6fd      	b.n	8000794 <__udivmoddi4+0x8c>
 8000998:	4543      	cmp	r3, r8
 800099a:	d2e5      	bcs.n	8000968 <__udivmoddi4+0x260>
 800099c:	ebb8 0e02 	subs.w	lr, r8, r2
 80009a0:	eb69 0104 	sbc.w	r1, r9, r4
 80009a4:	3801      	subs	r0, #1
 80009a6:	e7df      	b.n	8000968 <__udivmoddi4+0x260>
 80009a8:	4608      	mov	r0, r1
 80009aa:	e7d2      	b.n	8000952 <__udivmoddi4+0x24a>
 80009ac:	4660      	mov	r0, ip
 80009ae:	e78d      	b.n	80008cc <__udivmoddi4+0x1c4>
 80009b0:	4681      	mov	r9, r0
 80009b2:	e7b9      	b.n	8000928 <__udivmoddi4+0x220>
 80009b4:	4666      	mov	r6, ip
 80009b6:	e775      	b.n	80008a4 <__udivmoddi4+0x19c>
 80009b8:	4630      	mov	r0, r6
 80009ba:	e74a      	b.n	8000852 <__udivmoddi4+0x14a>
 80009bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80009c0:	4439      	add	r1, r7
 80009c2:	e713      	b.n	80007ec <__udivmoddi4+0xe4>
 80009c4:	3802      	subs	r0, #2
 80009c6:	443c      	add	r4, r7
 80009c8:	e724      	b.n	8000814 <__udivmoddi4+0x10c>
 80009ca:	bf00      	nop

080009cc <__aeabi_idiv0>:
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop

080009d0 <CheckTemperature>:
static bool tempSensFailed = false;
static bool tempBelowZero = false;


// Periodic temperature check
void CheckTemperature(void) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af02      	add	r7, sp, #8

//	for (int i =0; i<8; i++){
//		AHT20_ReadData_PCA9548A(&hi2c2, PCA9548A_ADDRESS, sensors[i]);
//	}
    float temperature, humidity;
    if (AHT20_ReadData_PCA9548A(&hi2c2, PCA9548A_ADDRESS, CHANNEL_2_MASK, &temperature, &humidity) == HAL_OK) {
 80009d6:	1d3a      	adds	r2, r7, #4
 80009d8:	463b      	mov	r3, r7
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	4613      	mov	r3, r2
 80009de:	2204      	movs	r2, #4
 80009e0:	2170      	movs	r1, #112	; 0x70
 80009e2:	4844      	ldr	r0, [pc, #272]	; (8000af4 <CheckTemperature+0x124>)
 80009e4:	f000 f8fc 	bl	8000be0 <AHT20_ReadData_PCA9548A>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d141      	bne.n	8000a72 <CheckTemperature+0xa2>
        printf("Temperature: %.2f C\r\n", temperature);
 80009ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80009f2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009f6:	ec53 2b17 	vmov	r2, r3, d7
 80009fa:	483f      	ldr	r0, [pc, #252]	; (8000af8 <CheckTemperature+0x128>)
 80009fc:	f006 fa3e 	bl	8006e7c <iprintf>
        printf("Humidity: %.2f %%RH\r\n", humidity);
 8000a00:	edd7 7a00 	vldr	s15, [r7]
 8000a04:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a08:	ec53 2b17 	vmov	r2, r3, d7
 8000a0c:	483b      	ldr	r0, [pc, #236]	; (8000afc <CheckTemperature+0x12c>)
 8000a0e:	f006 fa35 	bl	8006e7c <iprintf>

        int16_t tRaw = (int16_t)(temperature * 100.0f);
 8000a12:	edd7 7a01 	vldr	s15, [r7, #4]
 8000a16:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8000b00 <CheckTemperature+0x130>
 8000a1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a1e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a22:	ee17 3a90 	vmov	r3, s15
 8000a26:	81fb      	strh	r3, [r7, #14]
        int16_t hRaw = (int16_t)(humidity * 100.0f);
 8000a28:	edd7 7a00 	vldr	s15, [r7]
 8000a2c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8000b00 <CheckTemperature+0x130>
 8000a30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a38:	ee17 3a90 	vmov	r3, s15
 8000a3c:	81bb      	strh	r3, [r7, #12]
        uint8_t tHigh = (uint8_t)((tRaw >> 8) & 0xFF);
 8000a3e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a42:	121b      	asrs	r3, r3, #8
 8000a44:	b21b      	sxth	r3, r3
 8000a46:	72fb      	strb	r3, [r7, #11]
        uint8_t tLow  = (uint8_t)( tRaw       & 0xFF);
 8000a48:	89fb      	ldrh	r3, [r7, #14]
 8000a4a:	72bb      	strb	r3, [r7, #10]
        uint8_t hHigh = (uint8_t)((hRaw >> 8) & 0xFF);
 8000a4c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000a50:	121b      	asrs	r3, r3, #8
 8000a52:	b21b      	sxth	r3, r3
 8000a54:	727b      	strb	r3, [r7, #9]
        uint8_t hLow  = (uint8_t)( hRaw       & 0xFF);
 8000a56:	89bb      	ldrh	r3, [r7, #12]
 8000a58:	723b      	strb	r3, [r7, #8]
        SPI_SendMessage(0xF4, 3, tHigh, tLow, hHigh, hLow);
 8000a5a:	7ab9      	ldrb	r1, [r7, #10]
 8000a5c:	7afa      	ldrb	r2, [r7, #11]
 8000a5e:	7a3b      	ldrb	r3, [r7, #8]
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	7a7b      	ldrb	r3, [r7, #9]
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	460b      	mov	r3, r1
 8000a68:	2103      	movs	r1, #3
 8000a6a:	20f4      	movs	r0, #244	; 0xf4
 8000a6c:	f001 f89e 	bl	8001bac <SPI_SendMessage>
 8000a70:	e015      	b.n	8000a9e <CheckTemperature+0xce>

    } else {
        printf("Failed to read data from AHT20 sensor.\r\n");
 8000a72:	4824      	ldr	r0, [pc, #144]	; (8000b04 <CheckTemperature+0x134>)
 8000a74:	f006 fa9e 	bl	8006fb4 <puts>
        if (!tempSensFailed) {
 8000a78:	4b23      	ldr	r3, [pc, #140]	; (8000b08 <CheckTemperature+0x138>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	f083 0301 	eor.w	r3, r3, #1
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d00b      	beq.n	8000a9e <CheckTemperature+0xce>
        	setErrorState(STATE_SENSOR);
 8000a86:	2007      	movs	r0, #7
 8000a88:	f000 f976 	bl	8000d78 <setErrorState>
            error_locker = 3;
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <CheckTemperature+0x13c>)
 8000a8e:	2203      	movs	r2, #3
 8000a90:	701a      	strb	r2, [r3, #0]
            error_flag = true;
 8000a92:	4b1f      	ldr	r3, [pc, #124]	; (8000b10 <CheckTemperature+0x140>)
 8000a94:	2201      	movs	r2, #1
 8000a96:	701a      	strb	r2, [r3, #0]
            tempSensFailed = true;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <CheckTemperature+0x138>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
        }
    }

    if (temperature < 0.0 && !tempBelowZero) {
 8000a9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000aa2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aaa:	d513      	bpl.n	8000ad4 <CheckTemperature+0x104>
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <CheckTemperature+0x144>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	f083 0301 	eor.w	r3, r3, #1
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d00c      	beq.n	8000ad4 <CheckTemperature+0x104>
        tempBelowZero = true;
 8000aba:	4b16      	ldr	r3, [pc, #88]	; (8000b14 <CheckTemperature+0x144>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	701a      	strb	r2, [r3, #0]
        setErrorState(STATE_TEMPERATURE);
 8000ac0:	2006      	movs	r0, #6
 8000ac2:	f000 f959 	bl	8000d78 <setErrorState>
        error_locker = 3;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <CheckTemperature+0x13c>)
 8000ac8:	2203      	movs	r2, #3
 8000aca:	701a      	strb	r2, [r3, #0]
        error_flag = true;
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <CheckTemperature+0x140>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
    } else if (temperature >= 0.0) {
        tempBelowZero = false;
    }
}
 8000ad2:	e00a      	b.n	8000aea <CheckTemperature+0x11a>
    } else if (temperature >= 0.0) {
 8000ad4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ad8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae0:	da00      	bge.n	8000ae4 <CheckTemperature+0x114>
}
 8000ae2:	e002      	b.n	8000aea <CheckTemperature+0x11a>
        tempBelowZero = false;
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <CheckTemperature+0x144>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
}
 8000aea:	bf00      	nop
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000430 	.word	0x20000430
 8000af8:	0800aa88 	.word	0x0800aa88
 8000afc:	0800aaa0 	.word	0x0800aaa0
 8000b00:	42c80000 	.word	0x42c80000
 8000b04:	0800aab8 	.word	0x0800aab8
 8000b08:	20000204 	.word	0x20000204
 8000b0c:	20000206 	.word	0x20000206
 8000b10:	20000207 	.word	0x20000207
 8000b14:	20000205 	.word	0x20000205

08000b18 <AHT20_CalculateValues>:
    AHT20_CalculateValues(raw_data, temperature, humidity);
    return HAL_OK;
}

// Function to calculate temperature and humidity from raw data
void AHT20_CalculateValues(uint8_t *data, float *temperature, float *humidity) {
 8000b18:	b480      	push	{r7}
 8000b1a:	b087      	sub	sp, #28
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
    uint32_t raw_humidity = (data[1] << 12) | (data[2] << 4) | (data[3] >> 4);
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	3301      	adds	r3, #1
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	031a      	lsls	r2, r3, #12
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3302      	adds	r3, #2
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	011b      	lsls	r3, r3, #4
 8000b34:	4313      	orrs	r3, r2
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	3203      	adds	r2, #3
 8000b3a:	7812      	ldrb	r2, [r2, #0]
 8000b3c:	0912      	lsrs	r2, r2, #4
 8000b3e:	b2d2      	uxtb	r2, r2
 8000b40:	4313      	orrs	r3, r2
 8000b42:	617b      	str	r3, [r7, #20]
    uint32_t raw_temperature = ((data[3] & 0xF) << 16) | (data[4] << 8) | data[5];
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	3303      	adds	r3, #3
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	041b      	lsls	r3, r3, #16
 8000b4c:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	3304      	adds	r3, #4
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	021b      	lsls	r3, r3, #8
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	3205      	adds	r2, #5
 8000b5e:	7812      	ldrb	r2, [r2, #0]
 8000b60:	4313      	orrs	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
    *humidity = (raw_humidity * 100.0) / 1048576;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	ee07 3a90 	vmov	s15, r3
 8000b6a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000b6e:	ed9f 6b14 	vldr	d6, [pc, #80]	; 8000bc0 <AHT20_CalculateValues+0xa8>
 8000b72:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b76:	ed9f 5b14 	vldr	d5, [pc, #80]	; 8000bc8 <AHT20_CalculateValues+0xb0>
 8000b7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b7e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	edc3 7a00 	vstr	s15, [r3]
    *temperature = ((raw_temperature * 200.0) / 1048576) - 50.0;
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	ee07 3a90 	vmov	s15, r3
 8000b8e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000b92:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 8000bd0 <AHT20_CalculateValues+0xb8>
 8000b96:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b9a:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000bc8 <AHT20_CalculateValues+0xb0>
 8000b9e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000ba2:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8000bd8 <AHT20_CalculateValues+0xc0>
 8000ba6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000baa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	edc3 7a00 	vstr	s15, [r3]
}
 8000bb4:	bf00      	nop
 8000bb6:	371c      	adds	r7, #28
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	00000000 	.word	0x00000000
 8000bc4:	40590000 	.word	0x40590000
 8000bc8:	00000000 	.word	0x00000000
 8000bcc:	41300000 	.word	0x41300000
 8000bd0:	00000000 	.word	0x00000000
 8000bd4:	40690000 	.word	0x40690000
 8000bd8:	00000000 	.word	0x00000000
 8000bdc:	40490000 	.word	0x40490000

08000be0 <AHT20_ReadData_PCA9548A>:


// Read data from AHT20 via PCA9548A
HAL_StatusTypeDef AHT20_ReadData_PCA9548A(I2C_HandleTypeDef *hi2c, uint8_t pca9548a_address, uint8_t channel, float *temperature, float *humidity) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08c      	sub	sp, #48	; 0x30
 8000be4:	af02      	add	r7, sp, #8
 8000be6:	60f8      	str	r0, [r7, #12]
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	460b      	mov	r3, r1
 8000bec:	72fb      	strb	r3, [r7, #11]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	72bb      	strb	r3, [r7, #10]
    uint8_t cmd_measure[] = {0xAC, 0x33, 0x00};
 8000bf2:	4a53      	ldr	r2, [pc, #332]	; (8000d40 <AHT20_ReadData_PCA9548A+0x160>)
 8000bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf8:	6812      	ldr	r2, [r2, #0]
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	8019      	strh	r1, [r3, #0]
 8000bfe:	3302      	adds	r3, #2
 8000c00:	0c12      	lsrs	r2, r2, #16
 8000c02:	701a      	strb	r2, [r3, #0]
    uint8_t raw_data[6];
    uint8_t status;

    // Select the appropriate channel on PCA9548A
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(hi2c, pca9548a_address << 1, &channel, 1, HAL_MAX_DELAY);
 8000c04:	7afb      	ldrb	r3, [r7, #11]
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	b299      	uxth	r1, r3
 8000c0c:	f107 020a 	add.w	r2, r7, #10
 8000c10:	f04f 33ff 	mov.w	r3, #4294967295
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	2301      	movs	r3, #1
 8000c18:	68f8      	ldr	r0, [r7, #12]
 8000c1a:	f001 fecb 	bl	80029b4 <HAL_I2C_Master_Transmit>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (ret != HAL_OK) return ret;
 8000c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d002      	beq.n	8000c32 <AHT20_ReadData_PCA9548A+0x52>
 8000c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c30:	e081      	b.n	8000d36 <AHT20_ReadData_PCA9548A+0x156>

    // Check status of AHT20
    ret = HAL_I2C_Master_Transmit(hi2c, AHT20_ADDRESS, (uint8_t[]){0x71}, 1, HAL_MAX_DELAY);
 8000c32:	2371      	movs	r3, #113	; 0x71
 8000c34:	763b      	strb	r3, [r7, #24]
 8000c36:	f107 0218 	add.w	r2, r7, #24
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	9300      	str	r3, [sp, #0]
 8000c40:	2301      	movs	r3, #1
 8000c42:	2170      	movs	r1, #112	; 0x70
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f001 feb5 	bl	80029b4 <HAL_I2C_Master_Transmit>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (ret != HAL_OK) return ret;
 8000c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d002      	beq.n	8000c5e <AHT20_ReadData_PCA9548A+0x7e>
 8000c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c5c:	e06b      	b.n	8000d36 <AHT20_ReadData_PCA9548A+0x156>

    ret = HAL_I2C_Master_Receive(hi2c, AHT20_ADDRESS, &status, 1, HAL_MAX_DELAY);
 8000c5e:	f107 021b 	add.w	r2, r7, #27
 8000c62:	f04f 33ff 	mov.w	r3, #4294967295
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	2170      	movs	r1, #112	; 0x70
 8000c6c:	68f8      	ldr	r0, [r7, #12]
 8000c6e:	f001 ff95 	bl	8002b9c <HAL_I2C_Master_Receive>
 8000c72:	4603      	mov	r3, r0
 8000c74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (ret != HAL_OK) return ret;
 8000c78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d002      	beq.n	8000c86 <AHT20_ReadData_PCA9548A+0xa6>
 8000c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c84:	e057      	b.n	8000d36 <AHT20_ReadData_PCA9548A+0x156>

    // Check if the sensor is calibrated
    if ((status & 0x18) != 0x18) {
 8000c86:	7efb      	ldrb	r3, [r7, #27]
 8000c88:	f003 0318 	and.w	r3, r3, #24
 8000c8c:	2b18      	cmp	r3, #24
 8000c8e:	d01f      	beq.n	8000cd0 <AHT20_ReadData_PCA9548A+0xf0>
        uint8_t init_cmd[] = {0xBE, 0x08, 0x00};
 8000c90:	4a2c      	ldr	r2, [pc, #176]	; (8000d44 <AHT20_ReadData_PCA9548A+0x164>)
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	6812      	ldr	r2, [r2, #0]
 8000c98:	4611      	mov	r1, r2
 8000c9a:	8019      	strh	r1, [r3, #0]
 8000c9c:	3302      	adds	r3, #2
 8000c9e:	0c12      	lsrs	r2, r2, #16
 8000ca0:	701a      	strb	r2, [r3, #0]
        ret = HAL_I2C_Master_Transmit(hi2c, AHT20_ADDRESS, init_cmd, 3, HAL_MAX_DELAY);
 8000ca2:	f107 0214 	add.w	r2, r7, #20
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	2303      	movs	r3, #3
 8000cae:	2170      	movs	r1, #112	; 0x70
 8000cb0:	68f8      	ldr	r0, [r7, #12]
 8000cb2:	f001 fe7f 	bl	80029b4 <HAL_I2C_Master_Transmit>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (ret != HAL_OK) return ret;
 8000cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d002      	beq.n	8000cca <AHT20_ReadData_PCA9548A+0xea>
 8000cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cc8:	e035      	b.n	8000d36 <AHT20_ReadData_PCA9548A+0x156>
        HAL_Delay(10);
 8000cca:	200a      	movs	r0, #10
 8000ccc:	f001 fac4 	bl	8002258 <HAL_Delay>
    }

    // Trigger measurement
    ret = HAL_I2C_Master_Transmit(hi2c, AHT20_ADDRESS, cmd_measure, sizeof(cmd_measure), HAL_MAX_DELAY);
 8000cd0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd8:	9300      	str	r3, [sp, #0]
 8000cda:	2303      	movs	r3, #3
 8000cdc:	2170      	movs	r1, #112	; 0x70
 8000cde:	68f8      	ldr	r0, [r7, #12]
 8000ce0:	f001 fe68 	bl	80029b4 <HAL_I2C_Master_Transmit>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (ret != HAL_OK) return ret;
 8000cea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d002      	beq.n	8000cf8 <AHT20_ReadData_PCA9548A+0x118>
 8000cf2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cf6:	e01e      	b.n	8000d36 <AHT20_ReadData_PCA9548A+0x156>

    // Wait for measurement
    HAL_Delay(80);
 8000cf8:	2050      	movs	r0, #80	; 0x50
 8000cfa:	f001 faad 	bl	8002258 <HAL_Delay>

    // Read measurement data
    ret = HAL_I2C_Master_Receive(hi2c, AHT20_ADDRESS, raw_data, sizeof(raw_data), HAL_MAX_DELAY);
 8000cfe:	f107 021c 	add.w	r2, r7, #28
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2306      	movs	r3, #6
 8000d0a:	2170      	movs	r1, #112	; 0x70
 8000d0c:	68f8      	ldr	r0, [r7, #12]
 8000d0e:	f001 ff45 	bl	8002b9c <HAL_I2C_Master_Receive>
 8000d12:	4603      	mov	r3, r0
 8000d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (ret != HAL_OK) return ret;
 8000d18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d002      	beq.n	8000d26 <AHT20_ReadData_PCA9548A+0x146>
 8000d20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000d24:	e007      	b.n	8000d36 <AHT20_ReadData_PCA9548A+0x156>

    // Calculate temperature and humidity
    AHT20_CalculateValues(raw_data, temperature, humidity);
 8000d26:	f107 031c 	add.w	r3, r7, #28
 8000d2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f7ff fef2 	bl	8000b18 <AHT20_CalculateValues>
    return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3728      	adds	r7, #40	; 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	0800aae0 	.word	0x0800aae0
 8000d44:	0800aae4 	.word	0x0800aae4

08000d48 <get_error_flag>:
bool checkPending[24] = { false };
uint64_t openTimestamp[24] = { 0 };



bool get_error_flag(){
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
	return error_flag;
 8000d4c:	4b03      	ldr	r3, [pc, #12]	; (8000d5c <get_error_flag+0x14>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	20000207 	.word	0x20000207

08000d60 <get_locker_flag>:
bool get_locker_flag(){
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
	return lockerFlag;
 8000d64:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <get_locker_flag+0x14>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	20000208 	.word	0x20000208

08000d78 <setErrorState>:

void setErrorState(SystemErrorState state) {
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
	errorState = state;
 8000d82:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <setErrorState+0x1c>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	7013      	strb	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	370c      	adds	r7, #12
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	20000000 	.word	0x20000000

08000d98 <HandleState>:

// Handle error states
void HandleState() {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af02      	add	r7, sp, #8
	SystemErrorState state = errorState;
 8000d9e:	4b5a      	ldr	r3, [pc, #360]	; (8000f08 <HandleState+0x170>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	2b06      	cmp	r3, #6
 8000daa:	f200 80a5 	bhi.w	8000ef8 <HandleState+0x160>
 8000dae:	a201      	add	r2, pc, #4	; (adr r2, 8000db4 <HandleState+0x1c>)
 8000db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db4:	08000dd1 	.word	0x08000dd1
 8000db8:	08000e01 	.word	0x08000e01
 8000dbc:	08000e31 	.word	0x08000e31
 8000dc0:	08000e39 	.word	0x08000e39
 8000dc4:	08000e69 	.word	0x08000e69
 8000dc8:	08000e99 	.word	0x08000e99
 8000dcc:	08000ec9 	.word	0x08000ec9
        case STATE_JAMMED:
            printf("Case 1: JAMMED\n");
 8000dd0:	484e      	ldr	r0, [pc, #312]	; (8000f0c <HandleState+0x174>)
 8000dd2:	f006 f8ef 	bl	8006fb4 <puts>
            SPI_SendMessage(0xF1, error_locker, 150, 0xFF, 0xFF, 0xFF);
 8000dd6:	4b4e      	ldr	r3, [pc, #312]	; (8000f10 <HandleState+0x178>)
 8000dd8:	7819      	ldrb	r1, [r3, #0]
 8000dda:	23ff      	movs	r3, #255	; 0xff
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	23ff      	movs	r3, #255	; 0xff
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	23ff      	movs	r3, #255	; 0xff
 8000de4:	2296      	movs	r2, #150	; 0x96
 8000de6:	20f1      	movs	r0, #241	; 0xf1
 8000de8:	f000 fee0 	bl	8001bac <SPI_SendMessage>
            errorState = NO_ERROR;
 8000dec:	4b46      	ldr	r3, [pc, #280]	; (8000f08 <HandleState+0x170>)
 8000dee:	2208      	movs	r2, #8
 8000df0:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8000df2:	4b47      	ldr	r3, [pc, #284]	; (8000f10 <HandleState+0x178>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 8000df8:	4b46      	ldr	r3, [pc, #280]	; (8000f14 <HandleState+0x17c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
            break;
 8000dfe:	e07f      	b.n	8000f00 <HandleState+0x168>
        case STATE_OPENED:
            printf("Case 2: OPENED\n");
 8000e00:	4845      	ldr	r0, [pc, #276]	; (8000f18 <HandleState+0x180>)
 8000e02:	f006 f8d7 	bl	8006fb4 <puts>
            SPI_SendMessage(0xF1, error_locker, 50, 0xFF, 0xFF, 0xFF);
 8000e06:	4b42      	ldr	r3, [pc, #264]	; (8000f10 <HandleState+0x178>)
 8000e08:	7819      	ldrb	r1, [r3, #0]
 8000e0a:	23ff      	movs	r3, #255	; 0xff
 8000e0c:	9301      	str	r3, [sp, #4]
 8000e0e:	23ff      	movs	r3, #255	; 0xff
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	23ff      	movs	r3, #255	; 0xff
 8000e14:	2232      	movs	r2, #50	; 0x32
 8000e16:	20f1      	movs	r0, #241	; 0xf1
 8000e18:	f000 fec8 	bl	8001bac <SPI_SendMessage>
            errorState = NO_ERROR;
 8000e1c:	4b3a      	ldr	r3, [pc, #232]	; (8000f08 <HandleState+0x170>)
 8000e1e:	2208      	movs	r2, #8
 8000e20:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8000e22:	4b3b      	ldr	r3, [pc, #236]	; (8000f10 <HandleState+0x178>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 8000e28:	4b3a      	ldr	r3, [pc, #232]	; (8000f14 <HandleState+0x17c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
            break;
 8000e2e:	e067      	b.n	8000f00 <HandleState+0x168>
        case STATE_CLOSED:
            printf("Case 3: CLOSED\n");
 8000e30:	483a      	ldr	r0, [pc, #232]	; (8000f1c <HandleState+0x184>)
 8000e32:	f006 f8bf 	bl	8006fb4 <puts>
            break;
 8000e36:	e063      	b.n	8000f00 <HandleState+0x168>
        case STATE_PRICE_TAG:
            printf("Case 4: PRICE_TAG\n");
 8000e38:	4839      	ldr	r0, [pc, #228]	; (8000f20 <HandleState+0x188>)
 8000e3a:	f006 f8bb 	bl	8006fb4 <puts>
            SPI_SendMessage(0xF2, error_locker, 50, 0xFF, 0xFF, 0xFF);
 8000e3e:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <HandleState+0x178>)
 8000e40:	7819      	ldrb	r1, [r3, #0]
 8000e42:	23ff      	movs	r3, #255	; 0xff
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	23ff      	movs	r3, #255	; 0xff
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	23ff      	movs	r3, #255	; 0xff
 8000e4c:	2232      	movs	r2, #50	; 0x32
 8000e4e:	20f2      	movs	r0, #242	; 0xf2
 8000e50:	f000 feac 	bl	8001bac <SPI_SendMessage>
            errorState = NO_ERROR;
 8000e54:	4b2c      	ldr	r3, [pc, #176]	; (8000f08 <HandleState+0x170>)
 8000e56:	2208      	movs	r2, #8
 8000e58:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8000e5a:	4b2d      	ldr	r3, [pc, #180]	; (8000f10 <HandleState+0x178>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 8000e60:	4b2c      	ldr	r3, [pc, #176]	; (8000f14 <HandleState+0x17c>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
            break;
 8000e66:	e04b      	b.n	8000f00 <HandleState+0x168>
        case STATE_LED_DRIVER:
            printf("Case 5: LED_DRIVER\n");
 8000e68:	482e      	ldr	r0, [pc, #184]	; (8000f24 <HandleState+0x18c>)
 8000e6a:	f006 f8a3 	bl	8006fb4 <puts>
            SPI_SendMessage(0xF2, error_locker, 100, 0xFF, 0xFF, 0xFF);
 8000e6e:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <HandleState+0x178>)
 8000e70:	7819      	ldrb	r1, [r3, #0]
 8000e72:	23ff      	movs	r3, #255	; 0xff
 8000e74:	9301      	str	r3, [sp, #4]
 8000e76:	23ff      	movs	r3, #255	; 0xff
 8000e78:	9300      	str	r3, [sp, #0]
 8000e7a:	23ff      	movs	r3, #255	; 0xff
 8000e7c:	2264      	movs	r2, #100	; 0x64
 8000e7e:	20f2      	movs	r0, #242	; 0xf2
 8000e80:	f000 fe94 	bl	8001bac <SPI_SendMessage>
            errorState = NO_ERROR;
 8000e84:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <HandleState+0x170>)
 8000e86:	2208      	movs	r2, #8
 8000e88:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <HandleState+0x178>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 8000e90:	4b20      	ldr	r3, [pc, #128]	; (8000f14 <HandleState+0x17c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	701a      	strb	r2, [r3, #0]
            break;
 8000e96:	e033      	b.n	8000f00 <HandleState+0x168>
        case STATE_TEMPERATURE:
            printf("Case 6: TEMPERATURE\n");
 8000e98:	4823      	ldr	r0, [pc, #140]	; (8000f28 <HandleState+0x190>)
 8000e9a:	f006 f88b 	bl	8006fb4 <puts>
            SPI_SendMessage(0xF3, error_locker, 50, 0xFF, 0xFF, 0xFF);
 8000e9e:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <HandleState+0x178>)
 8000ea0:	7819      	ldrb	r1, [r3, #0]
 8000ea2:	23ff      	movs	r3, #255	; 0xff
 8000ea4:	9301      	str	r3, [sp, #4]
 8000ea6:	23ff      	movs	r3, #255	; 0xff
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	23ff      	movs	r3, #255	; 0xff
 8000eac:	2232      	movs	r2, #50	; 0x32
 8000eae:	20f3      	movs	r0, #243	; 0xf3
 8000eb0:	f000 fe7c 	bl	8001bac <SPI_SendMessage>
            errorState = NO_ERROR;
 8000eb4:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <HandleState+0x170>)
 8000eb6:	2208      	movs	r2, #8
 8000eb8:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HandleState+0x178>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <HandleState+0x17c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	701a      	strb	r2, [r3, #0]
            break;
 8000ec6:	e01b      	b.n	8000f00 <HandleState+0x168>
        case STATE_SENSOR:
            printf("Case 7: SENSOR\n");
 8000ec8:	4818      	ldr	r0, [pc, #96]	; (8000f2c <HandleState+0x194>)
 8000eca:	f006 f873 	bl	8006fb4 <puts>
            SPI_SendMessage(0xF3, error_locker, 100, 0xFF, 0xFF, 0xFF);
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <HandleState+0x178>)
 8000ed0:	7819      	ldrb	r1, [r3, #0]
 8000ed2:	23ff      	movs	r3, #255	; 0xff
 8000ed4:	9301      	str	r3, [sp, #4]
 8000ed6:	23ff      	movs	r3, #255	; 0xff
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	23ff      	movs	r3, #255	; 0xff
 8000edc:	2264      	movs	r2, #100	; 0x64
 8000ede:	20f3      	movs	r0, #243	; 0xf3
 8000ee0:	f000 fe64 	bl	8001bac <SPI_SendMessage>
            errorState = NO_ERROR;
 8000ee4:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HandleState+0x170>)
 8000ee6:	2208      	movs	r2, #8
 8000ee8:	701a      	strb	r2, [r3, #0]
            error_locker = 0;
 8000eea:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HandleState+0x178>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
            error_flag = false;
 8000ef0:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <HandleState+0x17c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
            break;
 8000ef6:	e003      	b.n	8000f00 <HandleState+0x168>
        default:
            printf("Invalid state\n");
 8000ef8:	480d      	ldr	r0, [pc, #52]	; (8000f30 <HandleState+0x198>)
 8000efa:	f006 f85b 	bl	8006fb4 <puts>
            break;
 8000efe:	bf00      	nop
    }
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	0800aae8 	.word	0x0800aae8
 8000f10:	20000206 	.word	0x20000206
 8000f14:	20000207 	.word	0x20000207
 8000f18:	0800aaf8 	.word	0x0800aaf8
 8000f1c:	0800ab08 	.word	0x0800ab08
 8000f20:	0800ab18 	.word	0x0800ab18
 8000f24:	0800ab2c 	.word	0x0800ab2c
 8000f28:	0800ab40 	.word	0x0800ab40
 8000f2c:	0800ab54 	.word	0x0800ab54
 8000f30:	0800ab64 	.word	0x0800ab64

08000f34 <CheckAllLockersAfterDelay>:

// Check all lockers after delay (5 minutes) to see if they remain open
void CheckAllLockersAfterDelay(void) {
 8000f34:	b5b0      	push	{r4, r5, r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
    bool anyOpenedOrPending = false;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	73fb      	strb	r3, [r7, #15]
    uint32_t currentTime = HAL_GetTick();
 8000f3e:	f001 f97f 	bl	8002240 <HAL_GetTick>
 8000f42:	6078      	str	r0, [r7, #4]

    for (int i = 0; i < 24; i++) {
 8000f44:	2300      	movs	r3, #0
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	e053      	b.n	8000ff2 <CheckAllLockersAfterDelay+0xbe>
        // If we had marked a locker for a re-check
        if (checkPending[i]) {
 8000f4a:	4a2f      	ldr	r2, [pc, #188]	; (8001008 <CheckAllLockersAfterDelay+0xd4>)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4413      	add	r3, r2
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d042      	beq.n	8000fdc <CheckAllLockersAfterDelay+0xa8>
            anyOpenedOrPending = true;
 8000f56:	2301      	movs	r3, #1
 8000f58:	73fb      	strb	r3, [r7, #15]
            // Has 5 minutes passed since we opened it?
            if ((currentTime - openTimestamp[i]) >= LOCKER_CHECK_DELAY) {
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f04f 0100 	mov.w	r1, #0
 8000f62:	4a2a      	ldr	r2, [pc, #168]	; (800100c <CheckAllLockersAfterDelay+0xd8>)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	4413      	add	r3, r2
 8000f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6e:	1a84      	subs	r4, r0, r2
 8000f70:	eb61 0503 	sbc.w	r5, r1, r3
 8000f74:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	42ab      	cmp	r3, r5
 8000f7e:	bf08      	it	eq
 8000f80:	42a2      	cmpeq	r2, r4
 8000f82:	d233      	bcs.n	8000fec <CheckAllLockersAfterDelay+0xb8>
                int status = read_cabinet_status(i + 1);
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	3301      	adds	r3, #1
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 f979 	bl	8001284 <read_cabinet_status>
 8000f92:	6038      	str	r0, [r7, #0]
                if (status == 1) {
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d112      	bne.n	8000fc0 <CheckAllLockersAfterDelay+0x8c>
                    errorState = STATE_OPENED;
 8000f9a:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <CheckAllLockersAfterDelay+0xdc>)
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	701a      	strb	r2, [r3, #0]
                    error_locker = i + 1;
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <CheckAllLockersAfterDelay+0xe0>)
 8000faa:	701a      	strb	r2, [r3, #0]
                    error_flag = true;
 8000fac:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <CheckAllLockersAfterDelay+0xe4>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
                    printf("Locker %d is still open after 5 minutes!\n", i + 1);
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4818      	ldr	r0, [pc, #96]	; (800101c <CheckAllLockersAfterDelay+0xe8>)
 8000fba:	f005 ff5f 	bl	8006e7c <iprintf>
 8000fbe:	e007      	b.n	8000fd0 <CheckAllLockersAfterDelay+0x9c>
                } else if (status == 0) {
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d104      	bne.n	8000fd0 <CheckAllLockersAfterDelay+0x9c>
                    // It's now closed
                    lockerOpened[i] = false;
 8000fc6:	4a16      	ldr	r2, [pc, #88]	; (8001020 <CheckAllLockersAfterDelay+0xec>)
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4413      	add	r3, r2
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
                }
                checkPending[i] = false;
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <CheckAllLockersAfterDelay+0xd4>)
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
 8000fda:	e007      	b.n	8000fec <CheckAllLockersAfterDelay+0xb8>
            }
        } else {
            if (lockerOpened[i]) {
 8000fdc:	4a10      	ldr	r2, [pc, #64]	; (8001020 <CheckAllLockersAfterDelay+0xec>)
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <CheckAllLockersAfterDelay+0xb8>
                anyOpenedOrPending = true;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	73fb      	strb	r3, [r7, #15]
    for (int i = 0; i < 24; i++) {
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	60bb      	str	r3, [r7, #8]
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	2b17      	cmp	r3, #23
 8000ff6:	dda8      	ble.n	8000f4a <CheckAllLockersAfterDelay+0x16>
            }
        }
    }
    lockerFlag = anyOpenedOrPending;
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	; (8001024 <CheckAllLockersAfterDelay+0xf0>)
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	7013      	strb	r3, [r2, #0]
}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bdb0      	pop	{r4, r5, r7, pc}
 8001006:	bf00      	nop
 8001008:	20000224 	.word	0x20000224
 800100c:	20000240 	.word	0x20000240
 8001010:	20000000 	.word	0x20000000
 8001014:	20000206 	.word	0x20000206
 8001018:	20000207 	.word	0x20000207
 800101c:	0800ab74 	.word	0x0800ab74
 8001020:	2000020c 	.word	0x2000020c
 8001024:	20000208 	.word	0x20000208

08001028 <Send_RGB>:
        // Could handle error here
    }
}

// Send RGB data over I2C
void Send_RGB(uint16_t address, uint8_t red, uint8_t green, uint8_t blue, uint8_t mode) {
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b087      	sub	sp, #28
 800102c:	af02      	add	r7, sp, #8
 800102e:	4604      	mov	r4, r0
 8001030:	4608      	mov	r0, r1
 8001032:	4611      	mov	r1, r2
 8001034:	461a      	mov	r2, r3
 8001036:	4623      	mov	r3, r4
 8001038:	80fb      	strh	r3, [r7, #6]
 800103a:	4603      	mov	r3, r0
 800103c:	717b      	strb	r3, [r7, #5]
 800103e:	460b      	mov	r3, r1
 8001040:	713b      	strb	r3, [r7, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	70fb      	strb	r3, [r7, #3]
    uint8_t RGB_Buffer[4];
    RGB_Buffer[0] = red;
 8001046:	797b      	ldrb	r3, [r7, #5]
 8001048:	733b      	strb	r3, [r7, #12]
    RGB_Buffer[1] = green;
 800104a:	793b      	ldrb	r3, [r7, #4]
 800104c:	737b      	strb	r3, [r7, #13]
    RGB_Buffer[2] = blue;
 800104e:	78fb      	ldrb	r3, [r7, #3]
 8001050:	73bb      	strb	r3, [r7, #14]
    RGB_Buffer[3] = mode;
 8001052:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001056:	73fb      	strb	r3, [r7, #15]

    // Transmit RGB values to the slave
    if (HAL_I2C_Master_Transmit(&hi2c1, (address << 1), RGB_Buffer, 4, HAL_MAX_DELAY) != HAL_OK) {
 8001058:	88fb      	ldrh	r3, [r7, #6]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	b299      	uxth	r1, r3
 800105e:	f107 020c 	add.w	r2, r7, #12
 8001062:	f04f 33ff 	mov.w	r3, #4294967295
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2304      	movs	r3, #4
 800106a:	4803      	ldr	r0, [pc, #12]	; (8001078 <Send_RGB+0x50>)
 800106c:	f001 fca2 	bl	80029b4 <HAL_I2C_Master_Transmit>
        //setErrorState(STATE_LED_DRIVER);
        //error_locker = address - 100;
        //error_flag = true;
    }
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	bd90      	pop	{r4, r7, pc}
 8001078:	200003e4 	.word	0x200003e4

0800107c <Send_Price>:

// Send price values to the slave
void Send_Price(uint16_t address, uint8_t byte1, uint8_t byte2) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af02      	add	r7, sp, #8
 8001082:	4603      	mov	r3, r0
 8001084:	80fb      	strh	r3, [r7, #6]
 8001086:	460b      	mov	r3, r1
 8001088:	717b      	strb	r3, [r7, #5]
 800108a:	4613      	mov	r3, r2
 800108c:	713b      	strb	r3, [r7, #4]
    uint8_t Price_Buffer[2];
    Price_Buffer[0] = byte1;
 800108e:	797b      	ldrb	r3, [r7, #5]
 8001090:	733b      	strb	r3, [r7, #12]
    Price_Buffer[1] = byte2;
 8001092:	793b      	ldrb	r3, [r7, #4]
 8001094:	737b      	strb	r3, [r7, #13]

    // Transmit price values to the slave
    if (HAL_I2C_Master_Transmit(&hi2c1, (address << 1), Price_Buffer, 2, HAL_MAX_DELAY) != HAL_OK) {
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	b299      	uxth	r1, r3
 800109c:	f107 020c 	add.w	r2, r7, #12
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	9300      	str	r3, [sp, #0]
 80010a6:	2302      	movs	r3, #2
 80010a8:	4803      	ldr	r0, [pc, #12]	; (80010b8 <Send_Price+0x3c>)
 80010aa:	f001 fc83 	bl	80029b4 <HAL_I2C_Master_Transmit>
        //setErrorState(STATE_PRICE_TAG);
        //error_locker = address;
        //error_flag = true;
    }
}
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	200003e4 	.word	0x200003e4

080010bc <calculate_checksum>:
#include "locker.h"

extern UART_HandleTypeDef huart2;

// Function to calculate XOR checksum
uint8_t calculate_checksum(uint8_t byte0, uint8_t byte1, uint8_t byte2, uint8_t byte3) {
 80010bc:	b490      	push	{r4, r7}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4604      	mov	r4, r0
 80010c4:	4608      	mov	r0, r1
 80010c6:	4611      	mov	r1, r2
 80010c8:	461a      	mov	r2, r3
 80010ca:	4623      	mov	r3, r4
 80010cc:	71fb      	strb	r3, [r7, #7]
 80010ce:	4603      	mov	r3, r0
 80010d0:	71bb      	strb	r3, [r7, #6]
 80010d2:	460b      	mov	r3, r1
 80010d4:	717b      	strb	r3, [r7, #5]
 80010d6:	4613      	mov	r3, r2
 80010d8:	713b      	strb	r3, [r7, #4]
    return byte0 ^ byte1 ^ byte2 ^ byte3;
 80010da:	79fa      	ldrb	r2, [r7, #7]
 80010dc:	79bb      	ldrb	r3, [r7, #6]
 80010de:	4053      	eors	r3, r2
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	797b      	ldrb	r3, [r7, #5]
 80010e4:	4053      	eors	r3, r2
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	793b      	ldrb	r3, [r7, #4]
 80010ea:	4053      	eors	r3, r2
 80010ec:	b2db      	uxtb	r3, r3
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc90      	pop	{r4, r7}
 80010f6:	4770      	bx	lr

080010f8 <open_cabinet>:

// Function to open a cabinet
void open_cabinet(uint8_t locker_id) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
    if (locker_id < 1 || locker_id > 24) {
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d002      	beq.n	800110e <open_cabinet+0x16>
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	2b18      	cmp	r3, #24
 800110c:	d903      	bls.n	8001116 <open_cabinet+0x1e>
        printf("Invalid locker ID. Must be between 1 and 24.\n");
 800110e:	484d      	ldr	r0, [pc, #308]	; (8001244 <open_cabinet+0x14c>)
 8001110:	f005 ff50 	bl	8006fb4 <puts>
        return;
 8001114:	e093      	b.n	800123e <open_cabinet+0x146>
    }

    // Check the cabinet status first
    int status = read_cabinet_status(locker_id);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	4618      	mov	r0, r3
 800111a:	f000 f8b3 	bl	8001284 <read_cabinet_status>
 800111e:	61b8      	str	r0, [r7, #24]
    if (status == 1) {
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d105      	bne.n	8001132 <open_cabinet+0x3a>
        printf("Locker %d is already open. No action required.\n", locker_id);
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	4619      	mov	r1, r3
 800112a:	4847      	ldr	r0, [pc, #284]	; (8001248 <open_cabinet+0x150>)
 800112c:	f005 fea6 	bl	8006e7c <iprintf>
        return;
 8001130:	e085      	b.n	800123e <open_cabinet+0x146>
    } else if (status == 0) {
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d17d      	bne.n	8001234 <open_cabinet+0x13c>
        uint8_t command[5];
        uint8_t response[5];

        // Build the command to open the cabinet
        command[0] = 0x8A;
 8001138:	238a      	movs	r3, #138	; 0x8a
 800113a:	743b      	strb	r3, [r7, #16]
        command[1] = 0x01;
 800113c:	2301      	movs	r3, #1
 800113e:	747b      	strb	r3, [r7, #17]
        command[2] = locker_id;
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	74bb      	strb	r3, [r7, #18]
        command[3] = 0x11;
 8001144:	2311      	movs	r3, #17
 8001146:	74fb      	strb	r3, [r7, #19]
        command[4] = calculate_checksum(command[0], command[1], command[2], command[3]);
 8001148:	7c38      	ldrb	r0, [r7, #16]
 800114a:	7c79      	ldrb	r1, [r7, #17]
 800114c:	7cba      	ldrb	r2, [r7, #18]
 800114e:	7cfb      	ldrb	r3, [r7, #19]
 8001150:	f7ff ffb4 	bl	80010bc <calculate_checksum>
 8001154:	4603      	mov	r3, r0
 8001156:	753b      	strb	r3, [r7, #20]

        // Transmit the command
        RS485_Transmit(command, sizeof(command));
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	2105      	movs	r1, #5
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f948 	bl	80013f4 <RS485_Transmit>

        // Wait for the response
        if (HAL_UART_Receive(&huart2, response, sizeof(response), 1000) == HAL_OK) {
 8001164:	f107 0108 	add.w	r1, r7, #8
 8001168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116c:	2205      	movs	r2, #5
 800116e:	4837      	ldr	r0, [pc, #220]	; (800124c <open_cabinet+0x154>)
 8001170:	f004 fb29 	bl	80057c6 <HAL_UART_Receive>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d158      	bne.n	800122c <open_cabinet+0x134>
            printf("Response received: ");
 800117a:	4835      	ldr	r0, [pc, #212]	; (8001250 <open_cabinet+0x158>)
 800117c:	f005 fe7e 	bl	8006e7c <iprintf>
            for (int i = 0; i < sizeof(response); i++) {
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
 8001184:	e00b      	b.n	800119e <open_cabinet+0xa6>
                printf("0x%02X ", response[i]);
 8001186:	f107 0208 	add.w	r2, r7, #8
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	4413      	add	r3, r2
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	4619      	mov	r1, r3
 8001192:	4830      	ldr	r0, [pc, #192]	; (8001254 <open_cabinet+0x15c>)
 8001194:	f005 fe72 	bl	8006e7c <iprintf>
            for (int i = 0; i < sizeof(response); i++) {
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	3301      	adds	r3, #1
 800119c:	61fb      	str	r3, [r7, #28]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	2b04      	cmp	r3, #4
 80011a2:	d9f0      	bls.n	8001186 <open_cabinet+0x8e>
            }
            printf("\n");
 80011a4:	200a      	movs	r0, #10
 80011a6:	f005 fe81 	bl	8006eac <putchar>

            uint8_t expected_checksum = calculate_checksum(response[0], response[1], response[2], response[3]);
 80011aa:	7a38      	ldrb	r0, [r7, #8]
 80011ac:	7a79      	ldrb	r1, [r7, #9]
 80011ae:	7aba      	ldrb	r2, [r7, #10]
 80011b0:	7afb      	ldrb	r3, [r7, #11]
 80011b2:	f7ff ff83 	bl	80010bc <calculate_checksum>
 80011b6:	4603      	mov	r3, r0
 80011b8:	75fb      	strb	r3, [r7, #23]
            if (response[4] != expected_checksum) {
 80011ba:	7b3b      	ldrb	r3, [r7, #12]
 80011bc:	7dfa      	ldrb	r2, [r7, #23]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d003      	beq.n	80011ca <open_cabinet+0xd2>
                printf("Response checksum error.\n");
 80011c2:	4825      	ldr	r0, [pc, #148]	; (8001258 <open_cabinet+0x160>)
 80011c4:	f005 fef6 	bl	8006fb4 <puts>
 80011c8:	e039      	b.n	800123e <open_cabinet+0x146>
                return;
            }

            if (response[3] == 0x11) {
 80011ca:	7afb      	ldrb	r3, [r7, #11]
 80011cc:	2b11      	cmp	r3, #17
 80011ce:	d11e      	bne.n	800120e <open_cabinet+0x116>
                printf("Locker %d opened successfully.\n", locker_id);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	4619      	mov	r1, r3
 80011d4:	4821      	ldr	r0, [pc, #132]	; (800125c <open_cabinet+0x164>)
 80011d6:	f005 fe51 	bl	8006e7c <iprintf>
                lockerOpened[locker_id - 1] = true;
 80011da:	79fb      	ldrb	r3, [r7, #7]
 80011dc:	3b01      	subs	r3, #1
 80011de:	4a20      	ldr	r2, [pc, #128]	; (8001260 <open_cabinet+0x168>)
 80011e0:	2101      	movs	r1, #1
 80011e2:	54d1      	strb	r1, [r2, r3]
                openTimestamp[locker_id - 1] = HAL_GetTick();
 80011e4:	f001 f82c 	bl	8002240 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	1e59      	subs	r1, r3, #1
 80011ee:	f04f 0300 	mov.w	r3, #0
 80011f2:	481c      	ldr	r0, [pc, #112]	; (8001264 <open_cabinet+0x16c>)
 80011f4:	00c9      	lsls	r1, r1, #3
 80011f6:	4401      	add	r1, r0
 80011f8:	e9c1 2300 	strd	r2, r3, [r1]
                checkPending[locker_id - 1] = true;
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	3b01      	subs	r3, #1
 8001200:	4a19      	ldr	r2, [pc, #100]	; (8001268 <open_cabinet+0x170>)
 8001202:	2101      	movs	r1, #1
 8001204:	54d1      	strb	r1, [r2, r3]
                lockerFlag = true;
 8001206:	4b19      	ldr	r3, [pc, #100]	; (800126c <open_cabinet+0x174>)
 8001208:	2201      	movs	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
 800120c:	e017      	b.n	800123e <open_cabinet+0x146>
            } else {
                printf("Unexpected response when opening locker %d.\n", locker_id);
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	4619      	mov	r1, r3
 8001212:	4817      	ldr	r0, [pc, #92]	; (8001270 <open_cabinet+0x178>)
 8001214:	f005 fe32 	bl	8006e7c <iprintf>
                setErrorState(STATE_JAMMED);
 8001218:	2001      	movs	r0, #1
 800121a:	f7ff fdad 	bl	8000d78 <setErrorState>
                error_locker = locker_id;
 800121e:	4a15      	ldr	r2, [pc, #84]	; (8001274 <open_cabinet+0x17c>)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	7013      	strb	r3, [r2, #0]
                error_flag = true;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <open_cabinet+0x180>)
 8001226:	2201      	movs	r2, #1
 8001228:	701a      	strb	r2, [r3, #0]
 800122a:	e008      	b.n	800123e <open_cabinet+0x146>
            }
        } else {
            printf("No response received when opening the cabinet.\n");
 800122c:	4813      	ldr	r0, [pc, #76]	; (800127c <open_cabinet+0x184>)
 800122e:	f005 fec1 	bl	8006fb4 <puts>
 8001232:	e004      	b.n	800123e <open_cabinet+0x146>
        }
    } else {
        printf("Failed to determine the status of locker %d. Aborting open operation.\n", locker_id);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4619      	mov	r1, r3
 8001238:	4811      	ldr	r0, [pc, #68]	; (8001280 <open_cabinet+0x188>)
 800123a:	f005 fe1f 	bl	8006e7c <iprintf>
    }
}
 800123e:	3720      	adds	r7, #32
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	0800aba0 	.word	0x0800aba0
 8001248:	0800abd0 	.word	0x0800abd0
 800124c:	200004e0 	.word	0x200004e0
 8001250:	0800ac00 	.word	0x0800ac00
 8001254:	0800ac14 	.word	0x0800ac14
 8001258:	0800ac1c 	.word	0x0800ac1c
 800125c:	0800ac38 	.word	0x0800ac38
 8001260:	2000020c 	.word	0x2000020c
 8001264:	20000240 	.word	0x20000240
 8001268:	20000224 	.word	0x20000224
 800126c:	20000208 	.word	0x20000208
 8001270:	0800ac58 	.word	0x0800ac58
 8001274:	20000206 	.word	0x20000206
 8001278:	20000207 	.word	0x20000207
 800127c:	0800ac88 	.word	0x0800ac88
 8001280:	0800acb8 	.word	0x0800acb8

08001284 <read_cabinet_status>:

// Function to read the cabinet status
int read_cabinet_status(uint8_t locker_id) {
 8001284:	b580      	push	{r7, lr}
 8001286:	b088      	sub	sp, #32
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
    if (locker_id < 1 || locker_id > 24) {
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <read_cabinet_status+0x16>
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	2b18      	cmp	r3, #24
 8001298:	d905      	bls.n	80012a6 <read_cabinet_status+0x22>
        printf("Invalid locker ID. Must be between 1 and 24.\n");
 800129a:	483b      	ldr	r0, [pc, #236]	; (8001388 <read_cabinet_status+0x104>)
 800129c:	f005 fe8a 	bl	8006fb4 <puts>
        return -1;
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
 80012a4:	e06b      	b.n	800137e <read_cabinet_status+0xfa>

    uint8_t command[5];
    uint8_t response[5];

    // Build the command to read the cabinet status
    command[0] = 0x80;
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	753b      	strb	r3, [r7, #20]
    command[1] = 0x01;
 80012aa:	2301      	movs	r3, #1
 80012ac:	757b      	strb	r3, [r7, #21]
    command[2] = locker_id;
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	75bb      	strb	r3, [r7, #22]
    command[3] = 0x33;
 80012b2:	2333      	movs	r3, #51	; 0x33
 80012b4:	75fb      	strb	r3, [r7, #23]
    command[4] = calculate_checksum(command[0], command[1], command[2], command[3]);
 80012b6:	7d38      	ldrb	r0, [r7, #20]
 80012b8:	7d79      	ldrb	r1, [r7, #21]
 80012ba:	7dba      	ldrb	r2, [r7, #22]
 80012bc:	7dfb      	ldrb	r3, [r7, #23]
 80012be:	f7ff fefd 	bl	80010bc <calculate_checksum>
 80012c2:	4603      	mov	r3, r0
 80012c4:	763b      	strb	r3, [r7, #24]

    // Transmit the command
    RS485_Transmit(command, sizeof(command));
 80012c6:	f107 0314 	add.w	r3, r7, #20
 80012ca:	2105      	movs	r1, #5
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 f891 	bl	80013f4 <RS485_Transmit>

    // Wait for the response
    if (HAL_UART_Receive(&huart2, response, sizeof(response), 1000) == HAL_OK) {
 80012d2:	f107 010c 	add.w	r1, r7, #12
 80012d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012da:	2205      	movs	r2, #5
 80012dc:	482b      	ldr	r0, [pc, #172]	; (800138c <read_cabinet_status+0x108>)
 80012de:	f004 fa72 	bl	80057c6 <HAL_UART_Receive>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d145      	bne.n	8001374 <read_cabinet_status+0xf0>
        // Print the raw response
        printf("Response received: ");
 80012e8:	4829      	ldr	r0, [pc, #164]	; (8001390 <read_cabinet_status+0x10c>)
 80012ea:	f005 fdc7 	bl	8006e7c <iprintf>
        for (int i = 0; i < sizeof(response); i++) {
 80012ee:	2300      	movs	r3, #0
 80012f0:	61fb      	str	r3, [r7, #28]
 80012f2:	e00b      	b.n	800130c <read_cabinet_status+0x88>
            printf("0x%02X ", response[i]);
 80012f4:	f107 020c 	add.w	r2, r7, #12
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	4413      	add	r3, r2
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	4619      	mov	r1, r3
 8001300:	4824      	ldr	r0, [pc, #144]	; (8001394 <read_cabinet_status+0x110>)
 8001302:	f005 fdbb 	bl	8006e7c <iprintf>
        for (int i = 0; i < sizeof(response); i++) {
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	3301      	adds	r3, #1
 800130a:	61fb      	str	r3, [r7, #28]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	2b04      	cmp	r3, #4
 8001310:	d9f0      	bls.n	80012f4 <read_cabinet_status+0x70>
        }
        printf("\n");
 8001312:	200a      	movs	r0, #10
 8001314:	f005 fdca 	bl	8006eac <putchar>

        // Validate the response
        uint8_t expected_checksum = calculate_checksum(response[0], response[1], response[2], response[3]);
 8001318:	7b38      	ldrb	r0, [r7, #12]
 800131a:	7b79      	ldrb	r1, [r7, #13]
 800131c:	7bba      	ldrb	r2, [r7, #14]
 800131e:	7bfb      	ldrb	r3, [r7, #15]
 8001320:	f7ff fecc 	bl	80010bc <calculate_checksum>
 8001324:	4603      	mov	r3, r0
 8001326:	76fb      	strb	r3, [r7, #27]
        if (response[4] != expected_checksum) {
 8001328:	7c3b      	ldrb	r3, [r7, #16]
 800132a:	7efa      	ldrb	r2, [r7, #27]
 800132c:	429a      	cmp	r2, r3
 800132e:	d005      	beq.n	800133c <read_cabinet_status+0xb8>
            printf("Response checksum error.\n");
 8001330:	4819      	ldr	r0, [pc, #100]	; (8001398 <read_cabinet_status+0x114>)
 8001332:	f005 fe3f 	bl	8006fb4 <puts>
            return -1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
 800133a:	e020      	b.n	800137e <read_cabinet_status+0xfa>
        }

        // Interpret the response
        if (response[3] == 0x11) {
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	2b11      	cmp	r3, #17
 8001340:	d106      	bne.n	8001350 <read_cabinet_status+0xcc>
            printf("Locker %d is open.\n", locker_id);
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	4619      	mov	r1, r3
 8001346:	4815      	ldr	r0, [pc, #84]	; (800139c <read_cabinet_status+0x118>)
 8001348:	f005 fd98 	bl	8006e7c <iprintf>
            return 1; // Locker is open
 800134c:	2301      	movs	r3, #1
 800134e:	e016      	b.n	800137e <read_cabinet_status+0xfa>
        } else if (response[3] == 0x00) {
 8001350:	7bfb      	ldrb	r3, [r7, #15]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d106      	bne.n	8001364 <read_cabinet_status+0xe0>
            printf("Locker %d is closed.\n", locker_id);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	4619      	mov	r1, r3
 800135a:	4811      	ldr	r0, [pc, #68]	; (80013a0 <read_cabinet_status+0x11c>)
 800135c:	f005 fd8e 	bl	8006e7c <iprintf>
            return 0; // Locker is closed
 8001360:	2300      	movs	r3, #0
 8001362:	e00c      	b.n	800137e <read_cabinet_status+0xfa>
        } else {
            printf("Unexpected response for locker %d.\n", locker_id);
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	4619      	mov	r1, r3
 8001368:	480e      	ldr	r0, [pc, #56]	; (80013a4 <read_cabinet_status+0x120>)
 800136a:	f005 fd87 	bl	8006e7c <iprintf>
            return -1; // Error or unexpected
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	e004      	b.n	800137e <read_cabinet_status+0xfa>
        }
    } else {
        printf("No response received when reading the cabinet status.\n");
 8001374:	480c      	ldr	r0, [pc, #48]	; (80013a8 <read_cabinet_status+0x124>)
 8001376:	f005 fe1d 	bl	8006fb4 <puts>
        return -1;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800137e:	4618      	mov	r0, r3
 8001380:	3720      	adds	r7, #32
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	0800aba0 	.word	0x0800aba0
 800138c:	200004e0 	.word	0x200004e0
 8001390:	0800ac00 	.word	0x0800ac00
 8001394:	0800ac14 	.word	0x0800ac14
 8001398:	0800ac1c 	.word	0x0800ac1c
 800139c:	0800ad00 	.word	0x0800ad00
 80013a0:	0800ad14 	.word	0x0800ad14
 80013a4:	0800ad2c 	.word	0x0800ad2c
 80013a8:	0800ad50 	.word	0x0800ad50

080013ac <RS485_SetTransmitMode>:

// Set RS485 to transmit mode
void RS485_SetTransmitMode(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_SET);
 80013b0:	2201      	movs	r2, #1
 80013b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <RS485_SetTransmitMode+0x20>)
 80013b8:	f001 fa52 	bl	8002860 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013c2:	4802      	ldr	r0, [pc, #8]	; (80013cc <RS485_SetTransmitMode+0x20>)
 80013c4:	f001 fa4c 	bl	8002860 <HAL_GPIO_WritePin>
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40021800 	.word	0x40021800

080013d0 <RS485_SetReceiveMode>:

// Set RS485 to receive mode
void RS485_SetReceiveMode(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013da:	4805      	ldr	r0, [pc, #20]	; (80013f0 <RS485_SetReceiveMode+0x20>)
 80013dc:	f001 fa40 	bl	8002860 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013e6:	4802      	ldr	r0, [pc, #8]	; (80013f0 <RS485_SetReceiveMode+0x20>)
 80013e8:	f001 fa3a 	bl	8002860 <HAL_GPIO_WritePin>
}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40021800 	.word	0x40021800

080013f4 <RS485_Transmit>:

// Transmit data via RS485
void RS485_Transmit(uint8_t *data, uint16_t size) {
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	460b      	mov	r3, r1
 80013fe:	807b      	strh	r3, [r7, #2]
    RS485_SetTransmitMode();
 8001400:	f7ff ffd4 	bl	80013ac <RS485_SetTransmitMode>
    HAL_UART_Transmit(&huart2, data, size, HAL_MAX_DELAY);
 8001404:	887a      	ldrh	r2, [r7, #2]
 8001406:	f04f 33ff 	mov.w	r3, #4294967295
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	4804      	ldr	r0, [pc, #16]	; (8001420 <RS485_Transmit+0x2c>)
 800140e:	f004 f947 	bl	80056a0 <HAL_UART_Transmit>
    RS485_SetReceiveMode();
 8001412:	f7ff ffdd 	bl	80013d0 <RS485_SetReceiveMode>
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200004e0 	.word	0x200004e0

08001424 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001424:	b5b0      	push	{r4, r5, r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001428:	f000 feb9 	bl	800219e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800142c:	f000 f84c 	bl	80014c8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001430:	f000 fa28 	bl	8001884 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001434:	f000 f98e 	bl	8001754 <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8001438:	f000 f9f4 	bl	8001824 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800143c:	f000 f8ca 	bl	80015d4 <MX_I2C1_Init>
  MX_I2C4_Init();
 8001440:	f000 f948 	bl	80016d4 <MX_I2C4_Init>
  MX_I2C2_Init();
 8001444:	f000 f906 	bl	8001654 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 8001448:	f000 f9bc 	bl	80017c4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("STM32 SPI Slave Ready\r\n"); // Print ready message
 800144c:	481a      	ldr	r0, [pc, #104]	; (80014b8 <main+0x94>)
 800144e:	f005 fdb1 	bl	8006fb4 <puts>
  HAL_SPI_Receive_IT(&hspi1, spi_rx_buffer, SPI_BUFFER_SIZE);
 8001452:	2206      	movs	r2, #6
 8001454:	4919      	ldr	r1, [pc, #100]	; (80014bc <main+0x98>)
 8001456:	481a      	ldr	r0, [pc, #104]	; (80014c0 <main+0x9c>)
 8001458:	f003 fa7c 	bl	8004954 <HAL_SPI_Receive_IT>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    if(get_error_flag()) HandleState();
 800145c:	f7ff fc74 	bl	8000d48 <get_error_flag>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <main+0x46>
 8001466:	f7ff fc97 	bl	8000d98 <HandleState>

    if(get_locker_flag()) CheckAllLockersAfterDelay();
 800146a:	f7ff fc79 	bl	8000d60 <get_locker_flag>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <main+0x54>
 8001474:	f7ff fd5e 	bl	8000f34 <CheckAllLockersAfterDelay>

    if(HAL_GetTick() - lastTime >= 5000) {
 8001478:	f000 fee2 	bl	8002240 <HAL_GetTick>
 800147c:	4603      	mov	r3, r0
 800147e:	4618      	mov	r0, r3
 8001480:	f04f 0100 	mov.w	r1, #0
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <main+0xa0>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	1a84      	subs	r4, r0, r2
 800148c:	eb61 0503 	sbc.w	r5, r1, r3
 8001490:	f241 3287 	movw	r2, #4999	; 0x1387
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	42ab      	cmp	r3, r5
 800149a:	bf08      	it	eq
 800149c:	42a2      	cmpeq	r2, r4
 800149e:	d2dd      	bcs.n	800145c <main+0x38>
      lastTime = HAL_GetTick();
 80014a0:	f000 fece 	bl	8002240 <HAL_GetTick>
 80014a4:	4603      	mov	r3, r0
 80014a6:	461a      	mov	r2, r3
 80014a8:	f04f 0300 	mov.w	r3, #0
 80014ac:	4905      	ldr	r1, [pc, #20]	; (80014c4 <main+0xa0>)
 80014ae:	e9c1 2300 	strd	r2, r3, [r1]
      CheckTemperature();
 80014b2:	f7ff fa8d 	bl	80009d0 <CheckTemperature>
    if(get_error_flag()) HandleState();
 80014b6:	e7d1      	b.n	800145c <main+0x38>
 80014b8:	0800ad88 	.word	0x0800ad88
 80014bc:	20000564 	.word	0x20000564
 80014c0:	2000047c 	.word	0x2000047c
 80014c4:	20000300 	.word	0x20000300

080014c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0b8      	sub	sp, #224	; 0xe0
 80014cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ce:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014d2:	2234      	movs	r2, #52	; 0x34
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f004 fe82 	bl	80061e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014dc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014ec:	f107 0308 	add.w	r3, r7, #8
 80014f0:	2290      	movs	r2, #144	; 0x90
 80014f2:	2100      	movs	r1, #0
 80014f4:	4618      	mov	r0, r3
 80014f6:	f004 fe73 	bl	80061e0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014fa:	f001 ff55 	bl	80033a8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	4b32      	ldr	r3, [pc, #200]	; (80015c8 <SystemClock_Config+0x100>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a31      	ldr	r2, [pc, #196]	; (80015c8 <SystemClock_Config+0x100>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	4b2f      	ldr	r3, [pc, #188]	; (80015c8 <SystemClock_Config+0x100>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001516:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <SystemClock_Config+0x104>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800151e:	4a2b      	ldr	r2, [pc, #172]	; (80015cc <SystemClock_Config+0x104>)
 8001520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	4b29      	ldr	r3, [pc, #164]	; (80015cc <SystemClock_Config+0x104>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001532:	2302      	movs	r3, #2
 8001534:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001538:	2301      	movs	r3, #1
 800153a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800153e:	2310      	movs	r3, #16
 8001540:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001544:	2300      	movs	r3, #0
 8001546:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800154e:	4618      	mov	r0, r3
 8001550:	f001 ff3a 	bl	80033c8 <HAL_RCC_OscConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800155a:	f000 fa27 	bl	80019ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155e:	230f      	movs	r3, #15
 8001560:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001564:	2300      	movs	r3, #0
 8001566:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800156a:	2300      	movs	r3, #0
 800156c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001576:	2300      	movs	r3, #0
 8001578:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800157c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f002 f9ce 	bl	8003924 <HAL_RCC_ClockConfig>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800158e:	f000 fa0d 	bl	80019ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <SystemClock_Config+0x108>)
 8001594:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C2
                              |RCC_PERIPHCLK_I2C4;
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001596:	2300      	movs	r3, #0
 8001598:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800159a:	2300      	movs	r3, #0
 800159c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800159e:	2300      	movs	r3, #0
 80015a0:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015aa:	f107 0308 	add.w	r3, r7, #8
 80015ae:	4618      	mov	r0, r3
 80015b0:	f002 fb8e 	bl	8003cd0 <HAL_RCCEx_PeriphCLKConfig>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <SystemClock_Config+0xf6>
  {
    Error_Handler();
 80015ba:	f000 f9f7 	bl	80019ac <Error_Handler>
  }
}
 80015be:	bf00      	nop
 80015c0:	37e0      	adds	r7, #224	; 0xe0
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40007000 	.word	0x40007000
 80015d0:	0002c180 	.word	0x0002c180

080015d4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d8:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <MX_I2C1_Init+0x74>)
 80015da:	4a1c      	ldr	r2, [pc, #112]	; (800164c <MX_I2C1_Init+0x78>)
 80015dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80015de:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <MX_I2C1_Init+0x74>)
 80015e0:	4a1b      	ldr	r2, [pc, #108]	; (8001650 <MX_I2C1_Init+0x7c>)
 80015e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015e4:	4b18      	ldr	r3, [pc, #96]	; (8001648 <MX_I2C1_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ea:	4b17      	ldr	r3, [pc, #92]	; (8001648 <MX_I2C1_Init+0x74>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <MX_I2C1_Init+0x74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015f6:	4b14      	ldr	r3, [pc, #80]	; (8001648 <MX_I2C1_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015fc:	4b12      	ldr	r3, [pc, #72]	; (8001648 <MX_I2C1_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001602:	4b11      	ldr	r3, [pc, #68]	; (8001648 <MX_I2C1_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001608:	4b0f      	ldr	r3, [pc, #60]	; (8001648 <MX_I2C1_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800160e:	480e      	ldr	r0, [pc, #56]	; (8001648 <MX_I2C1_Init+0x74>)
 8001610:	f001 f940 	bl	8002894 <HAL_I2C_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800161a:	f000 f9c7 	bl	80019ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800161e:	2100      	movs	r1, #0
 8001620:	4809      	ldr	r0, [pc, #36]	; (8001648 <MX_I2C1_Init+0x74>)
 8001622:	f001 fe29 	bl	8003278 <HAL_I2CEx_ConfigAnalogFilter>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800162c:	f000 f9be 	bl	80019ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001630:	2100      	movs	r1, #0
 8001632:	4805      	ldr	r0, [pc, #20]	; (8001648 <MX_I2C1_Init+0x74>)
 8001634:	f001 fe6b 	bl	800330e <HAL_I2CEx_ConfigDigitalFilter>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800163e:	f000 f9b5 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200003e4 	.word	0x200003e4
 800164c:	40005400 	.word	0x40005400
 8001650:	00303d5b 	.word	0x00303d5b

08001654 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001658:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <MX_I2C2_Init+0x74>)
 800165a:	4a1c      	ldr	r2, [pc, #112]	; (80016cc <MX_I2C2_Init+0x78>)
 800165c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800165e:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <MX_I2C2_Init+0x74>)
 8001660:	4a1b      	ldr	r2, [pc, #108]	; (80016d0 <MX_I2C2_Init+0x7c>)
 8001662:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <MX_I2C2_Init+0x74>)
 8001666:	2200      	movs	r2, #0
 8001668:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800166a:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <MX_I2C2_Init+0x74>)
 800166c:	2201      	movs	r2, #1
 800166e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001670:	4b15      	ldr	r3, [pc, #84]	; (80016c8 <MX_I2C2_Init+0x74>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001676:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MX_I2C2_Init+0x74>)
 8001678:	2200      	movs	r2, #0
 800167a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800167c:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <MX_I2C2_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001682:	4b11      	ldr	r3, [pc, #68]	; (80016c8 <MX_I2C2_Init+0x74>)
 8001684:	2200      	movs	r2, #0
 8001686:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001688:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <MX_I2C2_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800168e:	480e      	ldr	r0, [pc, #56]	; (80016c8 <MX_I2C2_Init+0x74>)
 8001690:	f001 f900 	bl	8002894 <HAL_I2C_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800169a:	f000 f987 	bl	80019ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800169e:	2100      	movs	r1, #0
 80016a0:	4809      	ldr	r0, [pc, #36]	; (80016c8 <MX_I2C2_Init+0x74>)
 80016a2:	f001 fde9 	bl	8003278 <HAL_I2CEx_ConfigAnalogFilter>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80016ac:	f000 f97e 	bl	80019ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80016b0:	2100      	movs	r1, #0
 80016b2:	4805      	ldr	r0, [pc, #20]	; (80016c8 <MX_I2C2_Init+0x74>)
 80016b4:	f001 fe2b 	bl	800330e <HAL_I2CEx_ConfigDigitalFilter>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80016be:	f000 f975 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000430 	.word	0x20000430
 80016cc:	40005800 	.word	0x40005800
 80016d0:	00303d5b 	.word	0x00303d5b

080016d4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	; (8001748 <MX_I2C4_Init+0x74>)
 80016da:	4a1c      	ldr	r2, [pc, #112]	; (800174c <MX_I2C4_Init+0x78>)
 80016dc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00303D5B;
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <MX_I2C4_Init+0x74>)
 80016e0:	4a1b      	ldr	r2, [pc, #108]	; (8001750 <MX_I2C4_Init+0x7c>)
 80016e2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <MX_I2C4_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <MX_I2C4_Init+0x74>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <MX_I2C4_Init+0x74>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_I2C4_Init+0x74>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <MX_I2C4_Init+0x74>)
 80016fe:	2200      	movs	r2, #0
 8001700:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_I2C4_Init+0x74>)
 8001704:	2200      	movs	r2, #0
 8001706:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_I2C4_Init+0x74>)
 800170a:	2200      	movs	r2, #0
 800170c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800170e:	480e      	ldr	r0, [pc, #56]	; (8001748 <MX_I2C4_Init+0x74>)
 8001710:	f001 f8c0 	bl	8002894 <HAL_I2C_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800171a:	f000 f947 	bl	80019ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800171e:	2100      	movs	r1, #0
 8001720:	4809      	ldr	r0, [pc, #36]	; (8001748 <MX_I2C4_Init+0x74>)
 8001722:	f001 fda9 	bl	8003278 <HAL_I2CEx_ConfigAnalogFilter>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 800172c:	f000 f93e 	bl	80019ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8001730:	2100      	movs	r1, #0
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_I2C4_Init+0x74>)
 8001734:	f001 fdeb 	bl	800330e <HAL_I2CEx_ConfigDigitalFilter>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800173e:	f000 f935 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000314 	.word	0x20000314
 800174c:	40006000 	.word	0x40006000
 8001750:	00303d5b 	.word	0x00303d5b

08001754 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001758:	4b18      	ldr	r3, [pc, #96]	; (80017bc <MX_SPI1_Init+0x68>)
 800175a:	4a19      	ldr	r2, [pc, #100]	; (80017c0 <MX_SPI1_Init+0x6c>)
 800175c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_SPI1_Init+0x68>)
 8001760:	2200      	movs	r2, #0
 8001762:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <MX_SPI1_Init+0x68>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_SPI1_Init+0x68>)
 800176c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001770:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <MX_SPI1_Init+0x68>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001778:	4b10      	ldr	r3, [pc, #64]	; (80017bc <MX_SPI1_Init+0x68>)
 800177a:	2200      	movs	r2, #0
 800177c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800177e:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_SPI1_Init+0x68>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <MX_SPI1_Init+0x68>)
 8001786:	2200      	movs	r2, #0
 8001788:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_SPI1_Init+0x68>)
 800178c:	2200      	movs	r2, #0
 800178e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <MX_SPI1_Init+0x68>)
 8001792:	2200      	movs	r2, #0
 8001794:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_SPI1_Init+0x68>)
 8001798:	2207      	movs	r2, #7
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <MX_SPI1_Init+0x68>)
 800179e:	2200      	movs	r2, #0
 80017a0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_SPI1_Init+0x68>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <MX_SPI1_Init+0x68>)
 80017aa:	f002 feb9 	bl	8004520 <HAL_SPI_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80017b4:	f000 f8fa 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	2000047c 	.word	0x2000047c
 80017c0:	40013000 	.word	0x40013000

080017c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <MX_USART2_UART_Init+0x58>)
 80017ca:	4a15      	ldr	r2, [pc, #84]	; (8001820 <MX_USART2_UART_Init+0x5c>)
 80017cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <MX_USART2_UART_Init+0x58>)
 80017d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017d6:	4b11      	ldr	r3, [pc, #68]	; (800181c <MX_USART2_UART_Init+0x58>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <MX_USART2_UART_Init+0x58>)
 80017de:	2200      	movs	r2, #0
 80017e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	; (800181c <MX_USART2_UART_Init+0x58>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <MX_USART2_UART_Init+0x58>)
 80017ea:	220c      	movs	r2, #12
 80017ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <MX_USART2_UART_Init+0x58>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f4:	4b09      	ldr	r3, [pc, #36]	; (800181c <MX_USART2_UART_Init+0x58>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017fa:	4b08      	ldr	r3, [pc, #32]	; (800181c <MX_USART2_UART_Init+0x58>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <MX_USART2_UART_Init+0x58>)
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001806:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_USART2_UART_Init+0x58>)
 8001808:	f003 fefc 	bl	8005604 <HAL_UART_Init>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001812:	f000 f8cb 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200004e0 	.word	0x200004e0
 8001820:	40004400 	.word	0x40004400

08001824 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <MX_USART3_UART_Init+0x58>)
 800182a:	4a15      	ldr	r2, [pc, #84]	; (8001880 <MX_USART3_UART_Init+0x5c>)
 800182c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800182e:	4b13      	ldr	r3, [pc, #76]	; (800187c <MX_USART3_UART_Init+0x58>)
 8001830:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001834:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <MX_USART3_UART_Init+0x58>)
 8001838:	2200      	movs	r2, #0
 800183a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800183c:	4b0f      	ldr	r3, [pc, #60]	; (800187c <MX_USART3_UART_Init+0x58>)
 800183e:	2200      	movs	r2, #0
 8001840:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <MX_USART3_UART_Init+0x58>)
 8001844:	2200      	movs	r2, #0
 8001846:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <MX_USART3_UART_Init+0x58>)
 800184a:	220c      	movs	r2, #12
 800184c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <MX_USART3_UART_Init+0x58>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001854:	4b09      	ldr	r3, [pc, #36]	; (800187c <MX_USART3_UART_Init+0x58>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800185a:	4b08      	ldr	r3, [pc, #32]	; (800187c <MX_USART3_UART_Init+0x58>)
 800185c:	2200      	movs	r2, #0
 800185e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <MX_USART3_UART_Init+0x58>)
 8001862:	2200      	movs	r2, #0
 8001864:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <MX_USART3_UART_Init+0x58>)
 8001868:	f003 fecc 	bl	8005604 <HAL_UART_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001872:	f000 f89b 	bl	80019ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000360 	.word	0x20000360
 8001880:	40004800 	.word	0x40004800

08001884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08c      	sub	sp, #48	; 0x30
 8001888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800189a:	4b41      	ldr	r3, [pc, #260]	; (80019a0 <MX_GPIO_Init+0x11c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a40      	ldr	r2, [pc, #256]	; (80019a0 <MX_GPIO_Init+0x11c>)
 80018a0:	f043 0304 	orr.w	r3, r3, #4
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b3e      	ldr	r3, [pc, #248]	; (80019a0 <MX_GPIO_Init+0x11c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0304 	and.w	r3, r3, #4
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018b2:	4b3b      	ldr	r3, [pc, #236]	; (80019a0 <MX_GPIO_Init+0x11c>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a3a      	ldr	r2, [pc, #232]	; (80019a0 <MX_GPIO_Init+0x11c>)
 80018b8:	f043 0320 	orr.w	r3, r3, #32
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b38      	ldr	r3, [pc, #224]	; (80019a0 <MX_GPIO_Init+0x11c>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0320 	and.w	r3, r3, #32
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ca:	4b35      	ldr	r3, [pc, #212]	; (80019a0 <MX_GPIO_Init+0x11c>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a34      	ldr	r2, [pc, #208]	; (80019a0 <MX_GPIO_Init+0x11c>)
 80018d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b32      	ldr	r3, [pc, #200]	; (80019a0 <MX_GPIO_Init+0x11c>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	4b2f      	ldr	r3, [pc, #188]	; (80019a0 <MX_GPIO_Init+0x11c>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	4a2e      	ldr	r2, [pc, #184]	; (80019a0 <MX_GPIO_Init+0x11c>)
 80018e8:	f043 0301 	orr.w	r3, r3, #1
 80018ec:	6313      	str	r3, [r2, #48]	; 0x30
 80018ee:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <MX_GPIO_Init+0x11c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	60fb      	str	r3, [r7, #12]
 80018f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fa:	4b29      	ldr	r3, [pc, #164]	; (80019a0 <MX_GPIO_Init+0x11c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a28      	ldr	r2, [pc, #160]	; (80019a0 <MX_GPIO_Init+0x11c>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b26      	ldr	r3, [pc, #152]	; (80019a0 <MX_GPIO_Init+0x11c>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001912:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <MX_GPIO_Init+0x11c>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	4a22      	ldr	r2, [pc, #136]	; (80019a0 <MX_GPIO_Init+0x11c>)
 8001918:	f043 0308 	orr.w	r3, r3, #8
 800191c:	6313      	str	r3, [r2, #48]	; 0x30
 800191e:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <MX_GPIO_Init+0x11c>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	607b      	str	r3, [r7, #4]
 8001928:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800192a:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <MX_GPIO_Init+0x11c>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a1c      	ldr	r2, [pc, #112]	; (80019a0 <MX_GPIO_Init+0x11c>)
 8001930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <MX_GPIO_Init+0x11c>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800193e:	603b      	str	r3, [r7, #0]
 8001940:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001948:	4816      	ldr	r0, [pc, #88]	; (80019a4 <MX_GPIO_Init+0x120>)
 800194a:	f000 ff89 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13, GPIO_PIN_RESET);
 800194e:	2200      	movs	r2, #0
 8001950:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8001954:	4814      	ldr	r0, [pc, #80]	; (80019a8 <MX_GPIO_Init+0x124>)
 8001956:	f000 ff83 	bl	8002860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800195a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800195e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	4619      	mov	r1, r3
 8001972:	480c      	ldr	r0, [pc, #48]	; (80019a4 <MX_GPIO_Init+0x120>)
 8001974:	f000 fdc8 	bl	8002508 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG10 PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_13;
 8001978:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 800197c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197e:	2301      	movs	r3, #1
 8001980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_GPIO_Init+0x124>)
 8001992:	f000 fdb9 	bl	8002508 <HAL_GPIO_Init>

}
 8001996:	bf00      	nop
 8001998:	3730      	adds	r7, #48	; 0x30
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	40020400 	.word	0x40020400
 80019a8:	40021800 	.word	0x40021800

080019ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b0:	b672      	cpsid	i
}
 80019b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1) {
 80019b4:	e7fe      	b.n	80019b4 <Error_Handler+0x8>
	...

080019b8 <__io_putchar>:

extern UART_HandleTypeDef huart3;


#ifdef __GNUC__
int __io_putchar(int ch) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80019c0:	1d39      	adds	r1, r7, #4
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
 80019c6:	2201      	movs	r2, #1
 80019c8:	4803      	ldr	r0, [pc, #12]	; (80019d8 <__io_putchar+0x20>)
 80019ca:	f003 fe69 	bl	80056a0 <HAL_UART_Transmit>
    return ch;
 80019ce:	687b      	ldr	r3, [r7, #4]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000360 	.word	0x20000360

080019dc <HAL_SPI_RxCpltCallback>:


extern SPI_HandleTypeDef hspi1;

// SPI receive complete callback
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1) {
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a07      	ldr	r2, [pc, #28]	; (8001a08 <HAL_SPI_RxCpltCallback+0x2c>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d108      	bne.n	8001a00 <HAL_SPI_RxCpltCallback+0x24>
        Process_SPI_Command(spi_rx_buffer, SPI_BUFFER_SIZE);
 80019ee:	2106      	movs	r1, #6
 80019f0:	4806      	ldr	r0, [pc, #24]	; (8001a0c <HAL_SPI_RxCpltCallback+0x30>)
 80019f2:	f000 f80f 	bl	8001a14 <Process_SPI_Command>
        HAL_SPI_Receive_IT(&hspi1, spi_rx_buffer, SPI_BUFFER_SIZE);
 80019f6:	2206      	movs	r2, #6
 80019f8:	4904      	ldr	r1, [pc, #16]	; (8001a0c <HAL_SPI_RxCpltCallback+0x30>)
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <HAL_SPI_RxCpltCallback+0x34>)
 80019fc:	f002 ffaa 	bl	8004954 <HAL_SPI_Receive_IT>
    }
}
 8001a00:	bf00      	nop
 8001a02:	3708      	adds	r7, #8
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40013000 	.word	0x40013000
 8001a0c:	20000564 	.word	0x20000564
 8001a10:	2000047c 	.word	0x2000047c

08001a14 <Process_SPI_Command>:

// Function to handle received SPI data
void Process_SPI_Command(uint8_t *data, uint16_t size) {
 8001a14:	b590      	push	{r4, r7, lr}
 8001a16:	b08b      	sub	sp, #44	; 0x2c
 8001a18:	af02      	add	r7, sp, #8
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	807b      	strh	r3, [r7, #2]
	uint8_t red = 255;
 8001a20:	23ff      	movs	r3, #255	; 0xff
 8001a22:	75fb      	strb	r3, [r7, #23]
	uint8_t green = 255;
 8001a24:	23ff      	movs	r3, #255	; 0xff
 8001a26:	75bb      	strb	r3, [r7, #22]
	uint8_t blue = 255;
 8001a28:	23ff      	movs	r3, #255	; 0xff
 8001a2a:	757b      	strb	r3, [r7, #21]
	uint8_t mode = 0xFF;
 8001a2c:	23ff      	movs	r3, #255	; 0xff
 8001a2e:	753b      	strb	r3, [r7, #20]

    printf("SPI Data Received: ");
 8001a30:	4855      	ldr	r0, [pc, #340]	; (8001b88 <Process_SPI_Command+0x174>)
 8001a32:	f005 fa23 	bl	8006e7c <iprintf>
    for (uint16_t i = 0; i < size; i++) {
 8001a36:	2300      	movs	r3, #0
 8001a38:	83fb      	strh	r3, [r7, #30]
 8001a3a:	e00a      	b.n	8001a52 <Process_SPI_Command+0x3e>
        printf("0x%02X ", data[i]);
 8001a3c:	8bfb      	ldrh	r3, [r7, #30]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	4413      	add	r3, r2
 8001a42:	781b      	ldrb	r3, [r3, #0]
 8001a44:	4619      	mov	r1, r3
 8001a46:	4851      	ldr	r0, [pc, #324]	; (8001b8c <Process_SPI_Command+0x178>)
 8001a48:	f005 fa18 	bl	8006e7c <iprintf>
    for (uint16_t i = 0; i < size; i++) {
 8001a4c:	8bfb      	ldrh	r3, [r7, #30]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	83fb      	strh	r3, [r7, #30]
 8001a52:	8bfa      	ldrh	r2, [r7, #30]
 8001a54:	887b      	ldrh	r3, [r7, #2]
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d3f0      	bcc.n	8001a3c <Process_SPI_Command+0x28>
    }
    printf("\r\n");
 8001a5a:	484d      	ldr	r0, [pc, #308]	; (8001b90 <Process_SPI_Command+0x17c>)
 8001a5c:	f005 faaa 	bl	8006fb4 <puts>

    // Example: Handle LED color command (0x01)
    if (data[0] == 0x01) {
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d142      	bne.n	8001aee <Process_SPI_Command+0xda>
        uint8_t locker_id = data[1];
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	785b      	ldrb	r3, [r3, #1]
 8001a6c:	74fb      	strb	r3, [r7, #19]
        red = data[2];
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	789b      	ldrb	r3, [r3, #2]
 8001a72:	75fb      	strb	r3, [r7, #23]
        green = data[3];
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	78db      	ldrb	r3, [r3, #3]
 8001a78:	75bb      	strb	r3, [r7, #22]
        blue = data[4];
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	791b      	ldrb	r3, [r3, #4]
 8001a7e:	757b      	strb	r3, [r7, #21]
        mode = data[5];  // single space around '='
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	795b      	ldrb	r3, [r3, #5]
 8001a84:	753b      	strb	r3, [r7, #20]

        if(locker_id == 255) {
 8001a86:	7cfb      	ldrb	r3, [r7, #19]
 8001a88:	2bff      	cmp	r3, #255	; 0xff
 8001a8a:	d11b      	bne.n	8001ac4 <Process_SPI_Command+0xb0>
            printf("Set all LED to Color: R=%d, G=%d, B=%d\r\n", red, green, blue);
 8001a8c:	7df9      	ldrb	r1, [r7, #23]
 8001a8e:	7dba      	ldrb	r2, [r7, #22]
 8001a90:	7d7b      	ldrb	r3, [r7, #21]
 8001a92:	4840      	ldr	r0, [pc, #256]	; (8001b94 <Process_SPI_Command+0x180>)
 8001a94:	f005 f9f2 	bl	8006e7c <iprintf>
            for(int i = 1; i <= 14; i++) {
 8001a98:	2301      	movs	r3, #1
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	e00e      	b.n	8001abc <Process_SPI_Command+0xa8>
                Send_RGB(i + 100, red, green, blue, mode);
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	3364      	adds	r3, #100	; 0x64
 8001aa4:	b298      	uxth	r0, r3
 8001aa6:	7d7c      	ldrb	r4, [r7, #21]
 8001aa8:	7dba      	ldrb	r2, [r7, #22]
 8001aaa:	7df9      	ldrb	r1, [r7, #23]
 8001aac:	7d3b      	ldrb	r3, [r7, #20]
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	4623      	mov	r3, r4
 8001ab2:	f7ff fab9 	bl	8001028 <Send_RGB>
            for(int i = 1; i <= 14; i++) {
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	3301      	adds	r3, #1
 8001aba:	61bb      	str	r3, [r7, #24]
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	2b0e      	cmp	r3, #14
 8001ac0:	dded      	ble.n	8001a9e <Process_SPI_Command+0x8a>
 8001ac2:	e014      	b.n	8001aee <Process_SPI_Command+0xda>
            }
        } else {
            Send_RGB(locker_id + 100, red, green, blue, mode);
 8001ac4:	7cfb      	ldrb	r3, [r7, #19]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	3364      	adds	r3, #100	; 0x64
 8001aca:	b298      	uxth	r0, r3
 8001acc:	7d7c      	ldrb	r4, [r7, #21]
 8001ace:	7dba      	ldrb	r2, [r7, #22]
 8001ad0:	7df9      	ldrb	r1, [r7, #23]
 8001ad2:	7d3b      	ldrb	r3, [r7, #20]
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	4623      	mov	r3, r4
 8001ad8:	f7ff faa6 	bl	8001028 <Send_RGB>
            printf("Set LED Color: Locker %d, R=%d, G=%d, B=%d\r\n", locker_id, red, green, blue);
 8001adc:	7cf9      	ldrb	r1, [r7, #19]
 8001ade:	7dfa      	ldrb	r2, [r7, #23]
 8001ae0:	7db8      	ldrb	r0, [r7, #22]
 8001ae2:	7d7b      	ldrb	r3, [r7, #21]
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	482b      	ldr	r0, [pc, #172]	; (8001b98 <Process_SPI_Command+0x184>)
 8001aea:	f005 f9c7 	bl	8006e7c <iprintf>
        }
    }

    // Example: Handle price command (0x02)
    if (data[0] == 0x02) {
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d11f      	bne.n	8001b36 <Process_SPI_Command+0x122>
        uint8_t locker_id = data[1];
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	785b      	ldrb	r3, [r3, #1]
 8001afa:	74bb      	strb	r3, [r7, #18]
        uint16_t price = (data[2] << 8) | data[3];
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3302      	adds	r3, #2
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	021b      	lsls	r3, r3, #8
 8001b04:	b21a      	sxth	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3303      	adds	r3, #3
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	b21b      	sxth	r3, r3
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	b21b      	sxth	r3, r3
 8001b12:	823b      	strh	r3, [r7, #16]
        printf("Set Price: Locker %d, Price=%d euro\r\n", locker_id, price);
 8001b14:	7cbb      	ldrb	r3, [r7, #18]
 8001b16:	8a3a      	ldrh	r2, [r7, #16]
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4820      	ldr	r0, [pc, #128]	; (8001b9c <Process_SPI_Command+0x188>)
 8001b1c:	f005 f9ae 	bl	8006e7c <iprintf>
        Send_Price(locker_id, data[2], data[3]);
 8001b20:	7cbb      	ldrb	r3, [r7, #18]
 8001b22:	b298      	uxth	r0, r3
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3302      	adds	r3, #2
 8001b28:	7819      	ldrb	r1, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3303      	adds	r3, #3
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	f7ff faa3 	bl	800107c <Send_Price>
    }

    // Example: Handle unlock command (0x03)
    if (data[0] == 0x03) {
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d116      	bne.n	8001b6c <Process_SPI_Command+0x158>
        uint8_t locker_id = data[1];
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	785b      	ldrb	r3, [r3, #1]
 8001b42:	73fb      	strb	r3, [r7, #15]
        printf("Unlock: Locker %d\r\n", locker_id);
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	4619      	mov	r1, r3
 8001b48:	4815      	ldr	r0, [pc, #84]	; (8001ba0 <Process_SPI_Command+0x18c>)
 8001b4a:	f005 f997 	bl	8006e7c <iprintf>
        open_cabinet(locker_id);
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fad1 	bl	80010f8 <open_cabinet>
        Send_RGB(locker_id + 100, 0, 0, 0, 0);
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	3364      	adds	r3, #100	; 0x64
 8001b5c:	b298      	uxth	r0, r3
 8001b5e:	2300      	movs	r3, #0
 8001b60:	9300      	str	r3, [sp, #0]
 8001b62:	2300      	movs	r3, #0
 8001b64:	2200      	movs	r2, #0
 8001b66:	2100      	movs	r1, #0
 8001b68:	f7ff fa5e 	bl	8001028 <Send_RGB>
    }

    // Example: Echo command (0xFF)
    if (data[0] == 0xFF) {
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2bff      	cmp	r3, #255	; 0xff
 8001b72:	d105      	bne.n	8001b80 <Process_SPI_Command+0x16c>
        HAL_SPI_Transmit(&hspi1, spi_tx_buffer, SPI_BUFFER_SIZE, 100);
 8001b74:	2364      	movs	r3, #100	; 0x64
 8001b76:	2206      	movs	r2, #6
 8001b78:	490a      	ldr	r1, [pc, #40]	; (8001ba4 <Process_SPI_Command+0x190>)
 8001b7a:	480b      	ldr	r0, [pc, #44]	; (8001ba8 <Process_SPI_Command+0x194>)
 8001b7c:	f002 fd7b 	bl	8004676 <HAL_SPI_Transmit>
    }
}
 8001b80:	bf00      	nop
 8001b82:	3724      	adds	r7, #36	; 0x24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd90      	pop	{r4, r7, pc}
 8001b88:	0800ada0 	.word	0x0800ada0
 8001b8c:	0800adb4 	.word	0x0800adb4
 8001b90:	0800adbc 	.word	0x0800adbc
 8001b94:	0800adc0 	.word	0x0800adc0
 8001b98:	0800adec 	.word	0x0800adec
 8001b9c:	0800ae1c 	.word	0x0800ae1c
 8001ba0:	0800ae44 	.word	0x0800ae44
 8001ba4:	2000056c 	.word	0x2000056c
 8001ba8:	2000047c 	.word	0x2000047c

08001bac <SPI_SendMessage>:

// Send a message over SPI to the master
void SPI_SendMessage(uint8_t command, uint8_t locker_id, uint8_t data1, uint8_t data2, uint8_t data3, uint8_t data4) {
 8001bac:	b590      	push	{r4, r7, lr}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4604      	mov	r4, r0
 8001bb4:	4608      	mov	r0, r1
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4623      	mov	r3, r4
 8001bbc:	71fb      	strb	r3, [r7, #7]
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71bb      	strb	r3, [r7, #6]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	717b      	strb	r3, [r7, #5]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	713b      	strb	r3, [r7, #4]
    spi_tx_buffer[0] = command;
 8001bca:	4a12      	ldr	r2, [pc, #72]	; (8001c14 <SPI_SendMessage+0x68>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	7013      	strb	r3, [r2, #0]
    spi_tx_buffer[1] = locker_id;
 8001bd0:	4a10      	ldr	r2, [pc, #64]	; (8001c14 <SPI_SendMessage+0x68>)
 8001bd2:	79bb      	ldrb	r3, [r7, #6]
 8001bd4:	7053      	strb	r3, [r2, #1]
    spi_tx_buffer[2] = data1;
 8001bd6:	4a0f      	ldr	r2, [pc, #60]	; (8001c14 <SPI_SendMessage+0x68>)
 8001bd8:	797b      	ldrb	r3, [r7, #5]
 8001bda:	7093      	strb	r3, [r2, #2]
    spi_tx_buffer[3] = data2;
 8001bdc:	4a0d      	ldr	r2, [pc, #52]	; (8001c14 <SPI_SendMessage+0x68>)
 8001bde:	793b      	ldrb	r3, [r7, #4]
 8001be0:	70d3      	strb	r3, [r2, #3]
    spi_tx_buffer[4] = data3;
 8001be2:	4a0c      	ldr	r2, [pc, #48]	; (8001c14 <SPI_SendMessage+0x68>)
 8001be4:	7e3b      	ldrb	r3, [r7, #24]
 8001be6:	7113      	strb	r3, [r2, #4]
    spi_tx_buffer[5] = data4;
 8001be8:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <SPI_SendMessage+0x68>)
 8001bea:	7f3b      	ldrb	r3, [r7, #28]
 8001bec:	7153      	strb	r3, [r2, #5]

    // Trigger the interrupt pin (PG10) to signal the Raspberry Pi
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_SET);
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bf4:	4808      	ldr	r0, [pc, #32]	; (8001c18 <SPI_SendMessage+0x6c>)
 8001bf6:	f000 fe33 	bl	8002860 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 8001bfa:	2064      	movs	r0, #100	; 0x64
 8001bfc:	f000 fb2c 	bl	8002258 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c06:	4804      	ldr	r0, [pc, #16]	; (8001c18 <SPI_SendMessage+0x6c>)
 8001c08:	f000 fe2a 	bl	8002860 <HAL_GPIO_WritePin>
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd90      	pop	{r4, r7, pc}
 8001c14:	2000056c 	.word	0x2000056c
 8001c18:	40021800 	.word	0x40021800

08001c1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <HAL_MspInit+0x44>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	4a0e      	ldr	r2, [pc, #56]	; (8001c60 <HAL_MspInit+0x44>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <HAL_MspInit+0x44>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	607b      	str	r3, [r7, #4]
 8001c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_MspInit+0x44>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	4a08      	ldr	r2, [pc, #32]	; (8001c60 <HAL_MspInit+0x44>)
 8001c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c44:	6453      	str	r3, [r2, #68]	; 0x44
 8001c46:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <HAL_MspInit+0x44>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800

08001c64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08e      	sub	sp, #56	; 0x38
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a45      	ldr	r2, [pc, #276]	; (8001d98 <HAL_I2C_MspInit+0x134>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d128      	bne.n	8001cd8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c86:	4b45      	ldr	r3, [pc, #276]	; (8001d9c <HAL_I2C_MspInit+0x138>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a44      	ldr	r2, [pc, #272]	; (8001d9c <HAL_I2C_MspInit+0x138>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b42      	ldr	r3, [pc, #264]	; (8001d9c <HAL_I2C_MspInit+0x138>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	623b      	str	r3, [r7, #32]
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001c9e:	23c0      	movs	r3, #192	; 0xc0
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ca2:	2312      	movs	r3, #18
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cae:	2304      	movs	r3, #4
 8001cb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4839      	ldr	r0, [pc, #228]	; (8001da0 <HAL_I2C_MspInit+0x13c>)
 8001cba:	f000 fc25 	bl	8002508 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cbe:	4b37      	ldr	r3, [pc, #220]	; (8001d9c <HAL_I2C_MspInit+0x138>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	4a36      	ldr	r2, [pc, #216]	; (8001d9c <HAL_I2C_MspInit+0x138>)
 8001cc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cca:	4b34      	ldr	r3, [pc, #208]	; (8001d9c <HAL_I2C_MspInit+0x138>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001cd6:	e05b      	b.n	8001d90 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a31      	ldr	r2, [pc, #196]	; (8001da4 <HAL_I2C_MspInit+0x140>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d128      	bne.n	8001d34 <HAL_I2C_MspInit+0xd0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ce2:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <HAL_I2C_MspInit+0x138>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a2d      	ldr	r2, [pc, #180]	; (8001d9c <HAL_I2C_MspInit+0x138>)
 8001ce8:	f043 0320 	orr.w	r3, r3, #32
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <HAL_I2C_MspInit+0x138>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f003 0320 	and.w	r3, r3, #32
 8001cf6:	61bb      	str	r3, [r7, #24]
 8001cf8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cfe:	2312      	movs	r3, #18
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d02:	2301      	movs	r3, #1
 8001d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d06:	2303      	movs	r3, #3
 8001d08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d12:	4619      	mov	r1, r3
 8001d14:	4824      	ldr	r0, [pc, #144]	; (8001da8 <HAL_I2C_MspInit+0x144>)
 8001d16:	f000 fbf7 	bl	8002508 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d1a:	4b20      	ldr	r3, [pc, #128]	; (8001d9c <HAL_I2C_MspInit+0x138>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a1f      	ldr	r2, [pc, #124]	; (8001d9c <HAL_I2C_MspInit+0x138>)
 8001d20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <HAL_I2C_MspInit+0x138>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697b      	ldr	r3, [r7, #20]
}
 8001d32:	e02d      	b.n	8001d90 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C4)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a1c      	ldr	r2, [pc, #112]	; (8001dac <HAL_I2C_MspInit+0x148>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d128      	bne.n	8001d90 <HAL_I2C_MspInit+0x12c>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d3e:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <HAL_I2C_MspInit+0x138>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a16      	ldr	r2, [pc, #88]	; (8001d9c <HAL_I2C_MspInit+0x138>)
 8001d44:	f043 0320 	orr.w	r3, r3, #32
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <HAL_I2C_MspInit+0x138>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0320 	and.w	r3, r3, #32
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001d56:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d5c:	2312      	movs	r3, #18
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d60:	2301      	movs	r3, #1
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d64:	2303      	movs	r3, #3
 8001d66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001d68:	2304      	movs	r3, #4
 8001d6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d70:	4619      	mov	r1, r3
 8001d72:	480d      	ldr	r0, [pc, #52]	; (8001da8 <HAL_I2C_MspInit+0x144>)
 8001d74:	f000 fbc8 	bl	8002508 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_I2C_MspInit+0x138>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <HAL_I2C_MspInit+0x138>)
 8001d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d82:	6413      	str	r3, [r2, #64]	; 0x40
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_I2C_MspInit+0x138>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
}
 8001d90:	bf00      	nop
 8001d92:	3738      	adds	r7, #56	; 0x38
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40005400 	.word	0x40005400
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020400 	.word	0x40020400
 8001da4:	40005800 	.word	0x40005800
 8001da8:	40021400 	.word	0x40021400
 8001dac:	40006000 	.word	0x40006000

08001db0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1b      	ldr	r2, [pc, #108]	; (8001e3c <HAL_SPI_MspInit+0x8c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d12f      	bne.n	8001e32 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <HAL_SPI_MspInit+0x90>)
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	4a1a      	ldr	r2, [pc, #104]	; (8001e40 <HAL_SPI_MspInit+0x90>)
 8001dd8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <HAL_SPI_MspInit+0x90>)
 8001de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <HAL_SPI_MspInit+0x90>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	4a14      	ldr	r2, [pc, #80]	; (8001e40 <HAL_SPI_MspInit+0x90>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6313      	str	r3, [r2, #48]	; 0x30
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <HAL_SPI_MspInit+0x90>)
 8001df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e02:	23f0      	movs	r3, #240	; 0xf0
 8001e04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e06:	2302      	movs	r3, #2
 8001e08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e12:	2305      	movs	r3, #5
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e16:	f107 0314 	add.w	r3, r7, #20
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4809      	ldr	r0, [pc, #36]	; (8001e44 <HAL_SPI_MspInit+0x94>)
 8001e1e:	f000 fb73 	bl	8002508 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	2023      	movs	r0, #35	; 0x23
 8001e28:	f000 fb15 	bl	8002456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001e2c:	2023      	movs	r0, #35	; 0x23
 8001e2e:	f000 fb2e 	bl	800248e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e32:	bf00      	nop
 8001e34:	3728      	adds	r7, #40	; 0x28
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	40013000 	.word	0x40013000
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40020000 	.word	0x40020000

08001e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	; 0x30
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 031c 	add.w	r3, r7, #28
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a2e      	ldr	r2, [pc, #184]	; (8001f20 <HAL_UART_MspInit+0xd8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d128      	bne.n	8001ebc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e6a:	4b2e      	ldr	r3, [pc, #184]	; (8001f24 <HAL_UART_MspInit+0xdc>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a2d      	ldr	r2, [pc, #180]	; (8001f24 <HAL_UART_MspInit+0xdc>)
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
 8001e76:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <HAL_UART_MspInit+0xdc>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	61bb      	str	r3, [r7, #24]
 8001e80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	4b28      	ldr	r3, [pc, #160]	; (8001f24 <HAL_UART_MspInit+0xdc>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a27      	ldr	r2, [pc, #156]	; (8001f24 <HAL_UART_MspInit+0xdc>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <HAL_UART_MspInit+0xdc>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e9a:	230c      	movs	r3, #12
 8001e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eaa:	2307      	movs	r3, #7
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	481c      	ldr	r0, [pc, #112]	; (8001f28 <HAL_UART_MspInit+0xe0>)
 8001eb6:	f000 fb27 	bl	8002508 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001eba:	e02d      	b.n	8001f18 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a1a      	ldr	r2, [pc, #104]	; (8001f2c <HAL_UART_MspInit+0xe4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d128      	bne.n	8001f18 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <HAL_UART_MspInit+0xdc>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a16      	ldr	r2, [pc, #88]	; (8001f24 <HAL_UART_MspInit+0xdc>)
 8001ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <HAL_UART_MspInit+0xdc>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ede:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_UART_MspInit+0xdc>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <HAL_UART_MspInit+0xdc>)
 8001ee4:	f043 0308 	orr.w	r3, r3, #8
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <HAL_UART_MspInit+0xdc>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ef6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f04:	2303      	movs	r3, #3
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f08:	2307      	movs	r3, #7
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f0c:	f107 031c 	add.w	r3, r7, #28
 8001f10:	4619      	mov	r1, r3
 8001f12:	4807      	ldr	r0, [pc, #28]	; (8001f30 <HAL_UART_MspInit+0xe8>)
 8001f14:	f000 faf8 	bl	8002508 <HAL_GPIO_Init>
}
 8001f18:	bf00      	nop
 8001f1a:	3730      	adds	r7, #48	; 0x30
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40004400 	.word	0x40004400
 8001f24:	40023800 	.word	0x40023800
 8001f28:	40020000 	.word	0x40020000
 8001f2c:	40004800 	.word	0x40004800
 8001f30:	40020c00 	.word	0x40020c00

08001f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <NMI_Handler+0x4>

08001f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <HardFault_Handler+0x4>

08001f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <MemManage_Handler+0x4>

08001f46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <BusFault_Handler+0x4>

08001f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <UsageFault_Handler+0x4>

08001f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f80:	f000 f94a 	bl	8002218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001f8c:	4802      	ldr	r0, [pc, #8]	; (8001f98 <SPI1_IRQHandler+0x10>)
 8001f8e:	f002 fe41 	bl	8004c14 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	2000047c 	.word	0x2000047c

08001f9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	af00      	add	r7, sp, #0
	return 1;
 8001fa0:	2301      	movs	r3, #1
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <_kill>:

int _kill(int pid, int sig)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fb6:	f004 f8e9 	bl	800618c <__errno>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2216      	movs	r2, #22
 8001fbe:	601a      	str	r2, [r3, #0]
	return -1;
 8001fc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <_exit>:

void _exit (int status)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f7ff ffe7 	bl	8001fac <_kill>
	while (1) {}		/* Make sure we hang here */
 8001fde:	e7fe      	b.n	8001fde <_exit+0x12>

08001fe0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	e00a      	b.n	8002008 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ff2:	f3af 8000 	nop.w
 8001ff6:	4601      	mov	r1, r0
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	1c5a      	adds	r2, r3, #1
 8001ffc:	60ba      	str	r2, [r7, #8]
 8001ffe:	b2ca      	uxtb	r2, r1
 8002000:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	3301      	adds	r3, #1
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	429a      	cmp	r2, r3
 800200e:	dbf0      	blt.n	8001ff2 <_read+0x12>
	}

return len;
 8002010:	687b      	ldr	r3, [r7, #4]
}
 8002012:	4618      	mov	r0, r3
 8002014:	3718      	adds	r7, #24
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	e009      	b.n	8002040 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	1c5a      	adds	r2, r3, #1
 8002030:	60ba      	str	r2, [r7, #8]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fcbf 	bl	80019b8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	3301      	adds	r3, #1
 800203e:	617b      	str	r3, [r7, #20]
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	429a      	cmp	r2, r3
 8002046:	dbf1      	blt.n	800202c <_write+0x12>
	}
	return len;
 8002048:	687b      	ldr	r3, [r7, #4]
}
 800204a:	4618      	mov	r0, r3
 800204c:	3718      	adds	r7, #24
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}

08002052 <_close>:

int _close(int file)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
	return -1;
 800205a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800205e:	4618      	mov	r0, r3
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
 8002072:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800207a:	605a      	str	r2, [r3, #4]
	return 0;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <_isatty>:

int _isatty(int file)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
	return 1;
 8002092:	2301      	movs	r3, #1
}
 8002094:	4618      	mov	r0, r3
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
	return 0;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
	...

080020bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020c4:	4a14      	ldr	r2, [pc, #80]	; (8002118 <_sbrk+0x5c>)
 80020c6:	4b15      	ldr	r3, [pc, #84]	; (800211c <_sbrk+0x60>)
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020d0:	4b13      	ldr	r3, [pc, #76]	; (8002120 <_sbrk+0x64>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d8:	4b11      	ldr	r3, [pc, #68]	; (8002120 <_sbrk+0x64>)
 80020da:	4a12      	ldr	r2, [pc, #72]	; (8002124 <_sbrk+0x68>)
 80020dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020de:	4b10      	ldr	r3, [pc, #64]	; (8002120 <_sbrk+0x64>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d207      	bcs.n	80020fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020ec:	f004 f84e 	bl	800618c <__errno>
 80020f0:	4603      	mov	r3, r0
 80020f2:	220c      	movs	r2, #12
 80020f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295
 80020fa:	e009      	b.n	8002110 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <_sbrk+0x64>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002102:	4b07      	ldr	r3, [pc, #28]	; (8002120 <_sbrk+0x64>)
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4413      	add	r3, r2
 800210a:	4a05      	ldr	r2, [pc, #20]	; (8002120 <_sbrk+0x64>)
 800210c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800210e:	68fb      	ldr	r3, [r7, #12]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20080000 	.word	0x20080000
 800211c:	00000400 	.word	0x00000400
 8002120:	20000308 	.word	0x20000308
 8002124:	20000588 	.word	0x20000588

08002128 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800212c:	4b06      	ldr	r3, [pc, #24]	; (8002148 <SystemInit+0x20>)
 800212e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002132:	4a05      	ldr	r2, [pc, #20]	; (8002148 <SystemInit+0x20>)
 8002134:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002138:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800214c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002184 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002150:	480d      	ldr	r0, [pc, #52]	; (8002188 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002152:	490e      	ldr	r1, [pc, #56]	; (800218c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002154:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002158:	e002      	b.n	8002160 <LoopCopyDataInit>

0800215a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800215a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800215c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800215e:	3304      	adds	r3, #4

08002160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002164:	d3f9      	bcc.n	800215a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002166:	4a0b      	ldr	r2, [pc, #44]	; (8002194 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002168:	4c0b      	ldr	r4, [pc, #44]	; (8002198 <LoopFillZerobss+0x26>)
  movs r3, #0
 800216a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800216c:	e001      	b.n	8002172 <LoopFillZerobss>

0800216e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800216e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002170:	3204      	adds	r2, #4

08002172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002174:	d3fb      	bcc.n	800216e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002176:	f7ff ffd7 	bl	8002128 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800217a:	f004 f80d 	bl	8006198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800217e:	f7ff f951 	bl	8001424 <main>
  bx  lr    
 8002182:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002184:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800218c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002190:	0800b334 	.word	0x0800b334
  ldr r2, =_sbss
 8002194:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002198:	20000588 	.word	0x20000588

0800219c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800219c:	e7fe      	b.n	800219c <ADC_IRQHandler>

0800219e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a2:	2003      	movs	r0, #3
 80021a4:	f000 f94c 	bl	8002440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021a8:	2000      	movs	r0, #0
 80021aa:	f000 f805 	bl	80021b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021ae:	f7ff fd35 	bl	8001c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_InitTick+0x54>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_InitTick+0x58>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
 80021ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80021d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f967 	bl	80024aa <HAL_SYSTICK_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e00e      	b.n	8002204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b0f      	cmp	r3, #15
 80021ea:	d80a      	bhi.n	8002202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ec:	2200      	movs	r2, #0
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	f000 f92f 	bl	8002456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021f8:	4a06      	ldr	r2, [pc, #24]	; (8002214 <HAL_InitTick+0x5c>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
 8002200:	e000      	b.n	8002204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
}
 8002204:	4618      	mov	r0, r3
 8002206:	3708      	adds	r7, #8
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000004 	.word	0x20000004
 8002210:	2000000c 	.word	0x2000000c
 8002214:	20000008 	.word	0x20000008

08002218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_IncTick+0x20>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4b06      	ldr	r3, [pc, #24]	; (800223c <HAL_IncTick+0x24>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4413      	add	r3, r2
 8002228:	4a04      	ldr	r2, [pc, #16]	; (800223c <HAL_IncTick+0x24>)
 800222a:	6013      	str	r3, [r2, #0]
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	2000000c 	.word	0x2000000c
 800223c:	20000574 	.word	0x20000574

08002240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return uwTick;
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <HAL_GetTick+0x14>)
 8002246:	681b      	ldr	r3, [r3, #0]
}
 8002248:	4618      	mov	r0, r3
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000574 	.word	0x20000574

08002258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002260:	f7ff ffee 	bl	8002240 <HAL_GetTick>
 8002264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002270:	d005      	beq.n	800227e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002272:	4b0a      	ldr	r3, [pc, #40]	; (800229c <HAL_Delay+0x44>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	461a      	mov	r2, r3
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	4413      	add	r3, r2
 800227c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800227e:	bf00      	nop
 8002280:	f7ff ffde 	bl	8002240 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	429a      	cmp	r2, r3
 800228e:	d8f7      	bhi.n	8002280 <HAL_Delay+0x28>
  {
  }
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	2000000c 	.word	0x2000000c

080022a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f003 0307 	and.w	r3, r3, #7
 80022ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <__NVIC_SetPriorityGrouping+0x40>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022bc:	4013      	ands	r3, r2
 80022be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <__NVIC_SetPriorityGrouping+0x44>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ce:	4a04      	ldr	r2, [pc, #16]	; (80022e0 <__NVIC_SetPriorityGrouping+0x40>)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	60d3      	str	r3, [r2, #12]
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000ed00 	.word	0xe000ed00
 80022e4:	05fa0000 	.word	0x05fa0000

080022e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <__NVIC_GetPriorityGrouping+0x18>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	0a1b      	lsrs	r3, r3, #8
 80022f2:	f003 0307 	and.w	r3, r3, #7
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	2b00      	cmp	r3, #0
 8002314:	db0b      	blt.n	800232e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	f003 021f 	and.w	r2, r3, #31
 800231c:	4907      	ldr	r1, [pc, #28]	; (800233c <__NVIC_EnableIRQ+0x38>)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	095b      	lsrs	r3, r3, #5
 8002324:	2001      	movs	r0, #1
 8002326:	fa00 f202 	lsl.w	r2, r0, r2
 800232a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	e000e100 	.word	0xe000e100

08002340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	6039      	str	r1, [r7, #0]
 800234a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800234c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002350:	2b00      	cmp	r3, #0
 8002352:	db0a      	blt.n	800236a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	b2da      	uxtb	r2, r3
 8002358:	490c      	ldr	r1, [pc, #48]	; (800238c <__NVIC_SetPriority+0x4c>)
 800235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235e:	0112      	lsls	r2, r2, #4
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	440b      	add	r3, r1
 8002364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002368:	e00a      	b.n	8002380 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	b2da      	uxtb	r2, r3
 800236e:	4908      	ldr	r1, [pc, #32]	; (8002390 <__NVIC_SetPriority+0x50>)
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	3b04      	subs	r3, #4
 8002378:	0112      	lsls	r2, r2, #4
 800237a:	b2d2      	uxtb	r2, r2
 800237c:	440b      	add	r3, r1
 800237e:	761a      	strb	r2, [r3, #24]
}
 8002380:	bf00      	nop
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000e100 	.word	0xe000e100
 8002390:	e000ed00 	.word	0xe000ed00

08002394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002394:	b480      	push	{r7}
 8002396:	b089      	sub	sp, #36	; 0x24
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f003 0307 	and.w	r3, r3, #7
 80023a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f1c3 0307 	rsb	r3, r3, #7
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	bf28      	it	cs
 80023b2:	2304      	movcs	r3, #4
 80023b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3304      	adds	r3, #4
 80023ba:	2b06      	cmp	r3, #6
 80023bc:	d902      	bls.n	80023c4 <NVIC_EncodePriority+0x30>
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3b03      	subs	r3, #3
 80023c2:	e000      	b.n	80023c6 <NVIC_EncodePriority+0x32>
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c8:	f04f 32ff 	mov.w	r2, #4294967295
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43da      	mvns	r2, r3
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	401a      	ands	r2, r3
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023dc:	f04f 31ff 	mov.w	r1, #4294967295
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	fa01 f303 	lsl.w	r3, r1, r3
 80023e6:	43d9      	mvns	r1, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ec:	4313      	orrs	r3, r2
         );
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3724      	adds	r7, #36	; 0x24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
	...

080023fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800240c:	d301      	bcc.n	8002412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800240e:	2301      	movs	r3, #1
 8002410:	e00f      	b.n	8002432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002412:	4a0a      	ldr	r2, [pc, #40]	; (800243c <SysTick_Config+0x40>)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3b01      	subs	r3, #1
 8002418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800241a:	210f      	movs	r1, #15
 800241c:	f04f 30ff 	mov.w	r0, #4294967295
 8002420:	f7ff ff8e 	bl	8002340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002424:	4b05      	ldr	r3, [pc, #20]	; (800243c <SysTick_Config+0x40>)
 8002426:	2200      	movs	r2, #0
 8002428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800242a:	4b04      	ldr	r3, [pc, #16]	; (800243c <SysTick_Config+0x40>)
 800242c:	2207      	movs	r2, #7
 800242e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	e000e010 	.word	0xe000e010

08002440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f7ff ff29 	bl	80022a0 <__NVIC_SetPriorityGrouping>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002456:	b580      	push	{r7, lr}
 8002458:	b086      	sub	sp, #24
 800245a:	af00      	add	r7, sp, #0
 800245c:	4603      	mov	r3, r0
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002468:	f7ff ff3e 	bl	80022e8 <__NVIC_GetPriorityGrouping>
 800246c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	68b9      	ldr	r1, [r7, #8]
 8002472:	6978      	ldr	r0, [r7, #20]
 8002474:	f7ff ff8e 	bl	8002394 <NVIC_EncodePriority>
 8002478:	4602      	mov	r2, r0
 800247a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff ff5d 	bl	8002340 <__NVIC_SetPriority>
}
 8002486:	bf00      	nop
 8002488:	3718      	adds	r7, #24
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b082      	sub	sp, #8
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff ff31 	bl	8002304 <__NVIC_EnableIRQ>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b082      	sub	sp, #8
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff ffa2 	bl	80023fc <SysTick_Config>
 80024b8:	4603      	mov	r3, r0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d004      	beq.n	80024e0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2280      	movs	r2, #128	; 0x80
 80024da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e00c      	b.n	80024fa <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2205      	movs	r2, #5
 80024e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f022 0201 	bic.w	r2, r2, #1
 80024f6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	; 0x24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002512:	2300      	movs	r3, #0
 8002514:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002516:	2300      	movs	r3, #0
 8002518:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800251e:	2300      	movs	r3, #0
 8002520:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
 8002526:	e175      	b.n	8002814 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002528:	2201      	movs	r2, #1
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	429a      	cmp	r2, r3
 8002542:	f040 8164 	bne.w	800280e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	2b01      	cmp	r3, #1
 8002550:	d005      	beq.n	800255e <HAL_GPIO_Init+0x56>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d130      	bne.n	80025c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	2203      	movs	r2, #3
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002594:	2201      	movs	r2, #1
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	f003 0201 	and.w	r2, r3, #1
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0303 	and.w	r3, r3, #3
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d017      	beq.n	80025fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	005b      	lsls	r3, r3, #1
 80025d6:	2203      	movs	r2, #3
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d123      	bne.n	8002650 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	08da      	lsrs	r2, r3, #3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3208      	adds	r2, #8
 8002610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	220f      	movs	r2, #15
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	691a      	ldr	r2, [r3, #16]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	08da      	lsrs	r2, r3, #3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3208      	adds	r2, #8
 800264a:	69b9      	ldr	r1, [r7, #24]
 800264c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	2203      	movs	r2, #3
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	43db      	mvns	r3, r3
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4013      	ands	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f003 0203 	and.w	r2, r3, #3
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 80be 	beq.w	800280e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002692:	4b66      	ldr	r3, [pc, #408]	; (800282c <HAL_GPIO_Init+0x324>)
 8002694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002696:	4a65      	ldr	r2, [pc, #404]	; (800282c <HAL_GPIO_Init+0x324>)
 8002698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800269c:	6453      	str	r3, [r2, #68]	; 0x44
 800269e:	4b63      	ldr	r3, [pc, #396]	; (800282c <HAL_GPIO_Init+0x324>)
 80026a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026aa:	4a61      	ldr	r2, [pc, #388]	; (8002830 <HAL_GPIO_Init+0x328>)
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	089b      	lsrs	r3, r3, #2
 80026b0:	3302      	adds	r3, #2
 80026b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	220f      	movs	r2, #15
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	43db      	mvns	r3, r3
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	4013      	ands	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a58      	ldr	r2, [pc, #352]	; (8002834 <HAL_GPIO_Init+0x32c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d037      	beq.n	8002746 <HAL_GPIO_Init+0x23e>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a57      	ldr	r2, [pc, #348]	; (8002838 <HAL_GPIO_Init+0x330>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d031      	beq.n	8002742 <HAL_GPIO_Init+0x23a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a56      	ldr	r2, [pc, #344]	; (800283c <HAL_GPIO_Init+0x334>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d02b      	beq.n	800273e <HAL_GPIO_Init+0x236>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a55      	ldr	r2, [pc, #340]	; (8002840 <HAL_GPIO_Init+0x338>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d025      	beq.n	800273a <HAL_GPIO_Init+0x232>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a54      	ldr	r2, [pc, #336]	; (8002844 <HAL_GPIO_Init+0x33c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d01f      	beq.n	8002736 <HAL_GPIO_Init+0x22e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a53      	ldr	r2, [pc, #332]	; (8002848 <HAL_GPIO_Init+0x340>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d019      	beq.n	8002732 <HAL_GPIO_Init+0x22a>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a52      	ldr	r2, [pc, #328]	; (800284c <HAL_GPIO_Init+0x344>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d013      	beq.n	800272e <HAL_GPIO_Init+0x226>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a51      	ldr	r2, [pc, #324]	; (8002850 <HAL_GPIO_Init+0x348>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00d      	beq.n	800272a <HAL_GPIO_Init+0x222>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a50      	ldr	r2, [pc, #320]	; (8002854 <HAL_GPIO_Init+0x34c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d007      	beq.n	8002726 <HAL_GPIO_Init+0x21e>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a4f      	ldr	r2, [pc, #316]	; (8002858 <HAL_GPIO_Init+0x350>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d101      	bne.n	8002722 <HAL_GPIO_Init+0x21a>
 800271e:	2309      	movs	r3, #9
 8002720:	e012      	b.n	8002748 <HAL_GPIO_Init+0x240>
 8002722:	230a      	movs	r3, #10
 8002724:	e010      	b.n	8002748 <HAL_GPIO_Init+0x240>
 8002726:	2308      	movs	r3, #8
 8002728:	e00e      	b.n	8002748 <HAL_GPIO_Init+0x240>
 800272a:	2307      	movs	r3, #7
 800272c:	e00c      	b.n	8002748 <HAL_GPIO_Init+0x240>
 800272e:	2306      	movs	r3, #6
 8002730:	e00a      	b.n	8002748 <HAL_GPIO_Init+0x240>
 8002732:	2305      	movs	r3, #5
 8002734:	e008      	b.n	8002748 <HAL_GPIO_Init+0x240>
 8002736:	2304      	movs	r3, #4
 8002738:	e006      	b.n	8002748 <HAL_GPIO_Init+0x240>
 800273a:	2303      	movs	r3, #3
 800273c:	e004      	b.n	8002748 <HAL_GPIO_Init+0x240>
 800273e:	2302      	movs	r3, #2
 8002740:	e002      	b.n	8002748 <HAL_GPIO_Init+0x240>
 8002742:	2301      	movs	r3, #1
 8002744:	e000      	b.n	8002748 <HAL_GPIO_Init+0x240>
 8002746:	2300      	movs	r3, #0
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	f002 0203 	and.w	r2, r2, #3
 800274e:	0092      	lsls	r2, r2, #2
 8002750:	4093      	lsls	r3, r2
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002758:	4935      	ldr	r1, [pc, #212]	; (8002830 <HAL_GPIO_Init+0x328>)
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	089b      	lsrs	r3, r3, #2
 800275e:	3302      	adds	r3, #2
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002766:	4b3d      	ldr	r3, [pc, #244]	; (800285c <HAL_GPIO_Init+0x354>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	43db      	mvns	r3, r3
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	4013      	ands	r3, r2
 8002774:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002782:	69ba      	ldr	r2, [r7, #24]
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800278a:	4a34      	ldr	r2, [pc, #208]	; (800285c <HAL_GPIO_Init+0x354>)
 800278c:	69bb      	ldr	r3, [r7, #24]
 800278e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002790:	4b32      	ldr	r3, [pc, #200]	; (800285c <HAL_GPIO_Init+0x354>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d003      	beq.n	80027b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027b4:	4a29      	ldr	r2, [pc, #164]	; (800285c <HAL_GPIO_Init+0x354>)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ba:	4b28      	ldr	r3, [pc, #160]	; (800285c <HAL_GPIO_Init+0x354>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	43db      	mvns	r3, r3
 80027c4:	69ba      	ldr	r2, [r7, #24]
 80027c6:	4013      	ands	r3, r2
 80027c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d003      	beq.n	80027de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	4313      	orrs	r3, r2
 80027dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027de:	4a1f      	ldr	r2, [pc, #124]	; (800285c <HAL_GPIO_Init+0x354>)
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027e4:	4b1d      	ldr	r3, [pc, #116]	; (800285c <HAL_GPIO_Init+0x354>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d003      	beq.n	8002808 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002808:	4a14      	ldr	r2, [pc, #80]	; (800285c <HAL_GPIO_Init+0x354>)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	3301      	adds	r3, #1
 8002812:	61fb      	str	r3, [r7, #28]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	2b0f      	cmp	r3, #15
 8002818:	f67f ae86 	bls.w	8002528 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	3724      	adds	r7, #36	; 0x24
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	40013800 	.word	0x40013800
 8002834:	40020000 	.word	0x40020000
 8002838:	40020400 	.word	0x40020400
 800283c:	40020800 	.word	0x40020800
 8002840:	40020c00 	.word	0x40020c00
 8002844:	40021000 	.word	0x40021000
 8002848:	40021400 	.word	0x40021400
 800284c:	40021800 	.word	0x40021800
 8002850:	40021c00 	.word	0x40021c00
 8002854:	40022000 	.word	0x40022000
 8002858:	40022400 	.word	0x40022400
 800285c:	40013c00 	.word	0x40013c00

08002860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
 800286c:	4613      	mov	r3, r2
 800286e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002870:	787b      	ldrb	r3, [r7, #1]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800287c:	e003      	b.n	8002886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800287e:	887b      	ldrh	r3, [r7, #2]
 8002880:	041a      	lsls	r2, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	619a      	str	r2, [r3, #24]
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr
	...

08002894 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e07f      	b.n	80029a6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7ff f9d2 	bl	8001c64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2224      	movs	r2, #36	; 0x24
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d107      	bne.n	800290e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800290a:	609a      	str	r2, [r3, #8]
 800290c:	e006      	b.n	800291c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689a      	ldr	r2, [r3, #8]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800291a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d104      	bne.n	800292e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800292c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6859      	ldr	r1, [r3, #4]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b1d      	ldr	r3, [pc, #116]	; (80029b0 <HAL_I2C_Init+0x11c>)
 800293a:	430b      	orrs	r3, r1
 800293c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68da      	ldr	r2, [r3, #12]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800294c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	69d9      	ldr	r1, [r3, #28]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1a      	ldr	r2, [r3, #32]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	430a      	orrs	r2, r1
 8002976:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 0201 	orr.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2220      	movs	r2, #32
 8002992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	02008000 	.word	0x02008000

080029b4 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b088      	sub	sp, #32
 80029b8:	af02      	add	r7, sp, #8
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	461a      	mov	r2, r3
 80029c0:	460b      	mov	r3, r1
 80029c2:	817b      	strh	r3, [r7, #10]
 80029c4:	4613      	mov	r3, r2
 80029c6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	f040 80da 	bne.w	8002b8a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_I2C_Master_Transmit+0x30>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e0d3      	b.n	8002b8c <HAL_I2C_Master_Transmit+0x1d8>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80029ec:	f7ff fc28 	bl	8002240 <HAL_GetTick>
 80029f0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	2319      	movs	r3, #25
 80029f8:	2201      	movs	r2, #1
 80029fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 f9e6 	bl	8002dd0 <I2C_WaitOnFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e0be      	b.n	8002b8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2221      	movs	r2, #33	; 0x21
 8002a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2210      	movs	r2, #16
 8002a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	893a      	ldrh	r2, [r7, #8]
 8002a2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	2bff      	cmp	r3, #255	; 0xff
 8002a3e:	d90e      	bls.n	8002a5e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	22ff      	movs	r2, #255	; 0xff
 8002a44:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	8979      	ldrh	r1, [r7, #10]
 8002a4e:	4b51      	ldr	r3, [pc, #324]	; (8002b94 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a50:	9300      	str	r3, [sp, #0]
 8002a52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 fbdc 	bl	8003214 <I2C_TransferConfig>
 8002a5c:	e06c      	b.n	8002b38 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a6c:	b2da      	uxtb	r2, r3
 8002a6e:	8979      	ldrh	r1, [r7, #10]
 8002a70:	4b48      	ldr	r3, [pc, #288]	; (8002b94 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fbcb 	bl	8003214 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002a7e:	e05b      	b.n	8002b38 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a80:	697a      	ldr	r2, [r7, #20]
 8002a82:	6a39      	ldr	r1, [r7, #32]
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f9e3 	bl	8002e50 <I2C_WaitOnTXISFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e07b      	b.n	8002b8c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a98:	781a      	ldrb	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	1c5a      	adds	r2, r3, #1
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	b29a      	uxth	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d034      	beq.n	8002b38 <HAL_I2C_Master_Transmit+0x184>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d130      	bne.n	8002b38 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	2200      	movs	r2, #0
 8002ade:	2180      	movs	r1, #128	; 0x80
 8002ae0:	68f8      	ldr	r0, [r7, #12]
 8002ae2:	f000 f975 	bl	8002dd0 <I2C_WaitOnFlagUntilTimeout>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d001      	beq.n	8002af0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e04d      	b.n	8002b8c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	2bff      	cmp	r3, #255	; 0xff
 8002af8:	d90e      	bls.n	8002b18 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	22ff      	movs	r2, #255	; 0xff
 8002afe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	8979      	ldrh	r1, [r7, #10]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fb7f 	bl	8003214 <I2C_TransferConfig>
 8002b16:	e00f      	b.n	8002b38 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	8979      	ldrh	r1, [r7, #10]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	9300      	str	r3, [sp, #0]
 8002b2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fb6e 	bl	8003214 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d19e      	bne.n	8002a80 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	6a39      	ldr	r1, [r7, #32]
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 f9c2 	bl	8002ed0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e01a      	b.n	8002b8c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b0b      	ldr	r3, [pc, #44]	; (8002b98 <HAL_I2C_Master_Transmit+0x1e4>)
 8002b6a:	400b      	ands	r3, r1
 8002b6c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2220      	movs	r2, #32
 8002b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	e000      	b.n	8002b8c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002b8a:	2302      	movs	r3, #2
  }
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	80002000 	.word	0x80002000
 8002b98:	fe00e800 	.word	0xfe00e800

08002b9c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	607a      	str	r2, [r7, #4]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	460b      	mov	r3, r1
 8002baa:	817b      	strh	r3, [r7, #10]
 8002bac:	4613      	mov	r3, r2
 8002bae:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	f040 80db 	bne.w	8002d74 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <HAL_I2C_Master_Receive+0x30>
 8002bc8:	2302      	movs	r3, #2
 8002bca:	e0d4      	b.n	8002d76 <HAL_I2C_Master_Receive+0x1da>
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002bd4:	f7ff fb34 	bl	8002240 <HAL_GetTick>
 8002bd8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	9300      	str	r3, [sp, #0]
 8002bde:	2319      	movs	r3, #25
 8002be0:	2201      	movs	r2, #1
 8002be2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f8f2 	bl	8002dd0 <I2C_WaitOnFlagUntilTimeout>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e0bf      	b.n	8002d76 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2222      	movs	r2, #34	; 0x22
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2210      	movs	r2, #16
 8002c02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	893a      	ldrh	r2, [r7, #8]
 8002c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2bff      	cmp	r3, #255	; 0xff
 8002c26:	d90e      	bls.n	8002c46 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	22ff      	movs	r2, #255	; 0xff
 8002c2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	8979      	ldrh	r1, [r7, #10]
 8002c36:	4b52      	ldr	r3, [pc, #328]	; (8002d80 <HAL_I2C_Master_Receive+0x1e4>)
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c3e:	68f8      	ldr	r0, [r7, #12]
 8002c40:	f000 fae8 	bl	8003214 <I2C_TransferConfig>
 8002c44:	e06d      	b.n	8002d22 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	8979      	ldrh	r1, [r7, #10]
 8002c58:	4b49      	ldr	r3, [pc, #292]	; (8002d80 <HAL_I2C_Master_Receive+0x1e4>)
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 fad7 	bl	8003214 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002c66:	e05c      	b.n	8002d22 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c68:	697a      	ldr	r2, [r7, #20]
 8002c6a:	6a39      	ldr	r1, [r7, #32]
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f96b 	bl	8002f48 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e07c      	b.n	8002d76 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	1c5a      	adds	r2, r3, #1
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c98:	3b01      	subs	r3, #1
 8002c9a:	b29a      	uxth	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	b29a      	uxth	r2, r3
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d034      	beq.n	8002d22 <HAL_I2C_Master_Receive+0x186>
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d130      	bne.n	8002d22 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	9300      	str	r3, [sp, #0]
 8002cc4:	6a3b      	ldr	r3, [r7, #32]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	2180      	movs	r1, #128	; 0x80
 8002cca:	68f8      	ldr	r0, [r7, #12]
 8002ccc:	f000 f880 	bl	8002dd0 <I2C_WaitOnFlagUntilTimeout>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e04d      	b.n	8002d76 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	2bff      	cmp	r3, #255	; 0xff
 8002ce2:	d90e      	bls.n	8002d02 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	22ff      	movs	r2, #255	; 0xff
 8002ce8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	8979      	ldrh	r1, [r7, #10]
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 fa8a 	bl	8003214 <I2C_TransferConfig>
 8002d00:	e00f      	b.n	8002d22 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	8979      	ldrh	r1, [r7, #10]
 8002d14:	2300      	movs	r3, #0
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 fa79 	bl	8003214 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d19d      	bne.n	8002c68 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	6a39      	ldr	r1, [r7, #32]
 8002d30:	68f8      	ldr	r0, [r7, #12]
 8002d32:	f000 f8cd 	bl	8002ed0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d001      	beq.n	8002d40 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	e01a      	b.n	8002d76 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2220      	movs	r2, #32
 8002d46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6859      	ldr	r1, [r3, #4]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <HAL_I2C_Master_Receive+0x1e8>)
 8002d54:	400b      	ands	r3, r1
 8002d56:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e000      	b.n	8002d76 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002d74:	2302      	movs	r3, #2
  }
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	80002400 	.word	0x80002400
 8002d84:	fe00e800 	.word	0xfe00e800

08002d88 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d103      	bne.n	8002da6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2200      	movs	r2, #0
 8002da4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d007      	beq.n	8002dc4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699a      	ldr	r2, [r3, #24]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	619a      	str	r2, [r3, #24]
  }
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	603b      	str	r3, [r7, #0]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002de0:	e022      	b.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d01e      	beq.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dea:	f7ff fa29 	bl	8002240 <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d302      	bcc.n	8002e00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d113      	bne.n	8002e28 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e04:	f043 0220 	orr.w	r2, r3, #32
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e00f      	b.n	8002e48 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4013      	ands	r3, r2
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d0cd      	beq.n	8002de2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e5c:	e02c      	b.n	8002eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	68b9      	ldr	r1, [r7, #8]
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 f8ea 	bl	800303c <I2C_IsErrorOccurred>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e02a      	b.n	8002ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d01e      	beq.n	8002eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7a:	f7ff f9e1 	bl	8002240 <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d302      	bcc.n	8002e90 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d113      	bne.n	8002eb8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e94:	f043 0220 	orr.w	r2, r3, #32
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e007      	b.n	8002ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d1cb      	bne.n	8002e5e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3710      	adds	r7, #16
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	60f8      	str	r0, [r7, #12]
 8002ed8:	60b9      	str	r1, [r7, #8]
 8002eda:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002edc:	e028      	b.n	8002f30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f000 f8aa 	bl	800303c <I2C_IsErrorOccurred>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e026      	b.n	8002f40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ef2:	f7ff f9a5 	bl	8002240 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d302      	bcc.n	8002f08 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d113      	bne.n	8002f30 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0c:	f043 0220 	orr.w	r2, r3, #32
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e007      	b.n	8002f40 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	f003 0320 	and.w	r3, r3, #32
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	d1cf      	bne.n	8002ede <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f54:	e064      	b.n	8003020 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	68b9      	ldr	r1, [r7, #8]
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f000 f86e 	bl	800303c <I2C_IsErrorOccurred>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e062      	b.n	8003030 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 0320 	and.w	r3, r3, #32
 8002f74:	2b20      	cmp	r3, #32
 8002f76:	d138      	bne.n	8002fea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	f003 0304 	and.w	r3, r3, #4
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d105      	bne.n	8002f92 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e04e      	b.n	8003030 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b10      	cmp	r3, #16
 8002f9e:	d107      	bne.n	8002fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2210      	movs	r2, #16
 8002fa6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2204      	movs	r2, #4
 8002fac:	645a      	str	r2, [r3, #68]	; 0x44
 8002fae:	e002      	b.n	8002fb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	6859      	ldr	r1, [r3, #4]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	4b1b      	ldr	r3, [pc, #108]	; (8003038 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002fca:	400b      	ands	r3, r1
 8002fcc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e022      	b.n	8003030 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fea:	f7ff f929 	bl	8002240 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d302      	bcc.n	8003000 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10f      	bne.n	8003020 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	f043 0220 	orr.w	r2, r3, #32
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e007      	b.n	8003030 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	2b04      	cmp	r3, #4
 800302c:	d193      	bne.n	8002f56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	fe00e800 	.word	0xfe00e800

0800303c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003056:	2300      	movs	r3, #0
 8003058:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b00      	cmp	r3, #0
 8003066:	d075      	beq.n	8003154 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2210      	movs	r2, #16
 800306e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003070:	e056      	b.n	8003120 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003078:	d052      	beq.n	8003120 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800307a:	f7ff f8e1 	bl	8002240 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	68ba      	ldr	r2, [r7, #8]
 8003086:	429a      	cmp	r2, r3
 8003088:	d302      	bcc.n	8003090 <I2C_IsErrorOccurred+0x54>
 800308a:	68bb      	ldr	r3, [r7, #8]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d147      	bne.n	8003120 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030b2:	d12e      	bne.n	8003112 <I2C_IsErrorOccurred+0xd6>
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030ba:	d02a      	beq.n	8003112 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80030bc:	7cfb      	ldrb	r3, [r7, #19]
 80030be:	2b20      	cmp	r3, #32
 80030c0:	d027      	beq.n	8003112 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030d0:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80030d2:	f7ff f8b5 	bl	8002240 <HAL_GetTick>
 80030d6:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030d8:	e01b      	b.n	8003112 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80030da:	f7ff f8b1 	bl	8002240 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b19      	cmp	r3, #25
 80030e6:	d914      	bls.n	8003112 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ec:	f043 0220 	orr.w	r2, r3, #32
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2220      	movs	r2, #32
 80030f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f003 0320 	and.w	r3, r3, #32
 800311c:	2b20      	cmp	r3, #32
 800311e:	d1dc      	bne.n	80030da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f003 0320 	and.w	r3, r3, #32
 800312a:	2b20      	cmp	r3, #32
 800312c:	d003      	beq.n	8003136 <I2C_IsErrorOccurred+0xfa>
 800312e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003132:	2b00      	cmp	r3, #0
 8003134:	d09d      	beq.n	8003072 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003136:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800313a:	2b00      	cmp	r3, #0
 800313c:	d103      	bne.n	8003146 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2220      	movs	r2, #32
 8003144:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	f043 0304 	orr.w	r3, r3, #4
 800314c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003176:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00b      	beq.n	80031a0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	f043 0308 	orr.w	r3, r3, #8
 800318e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003198:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	f043 0302 	orr.w	r3, r3, #2
 80031b0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80031c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d01c      	beq.n	8003204 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f7ff fddc 	bl	8002d88 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6859      	ldr	r1, [r3, #4]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4b0d      	ldr	r3, [pc, #52]	; (8003210 <I2C_IsErrorOccurred+0x1d4>)
 80031dc:	400b      	ands	r3, r1
 80031de:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	431a      	orrs	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2200      	movs	r2, #0
 80031f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003208:	4618      	mov	r0, r3
 800320a:	3728      	adds	r7, #40	; 0x28
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	fe00e800 	.word	0xfe00e800

08003214 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	607b      	str	r3, [r7, #4]
 800321e:	460b      	mov	r3, r1
 8003220:	817b      	strh	r3, [r7, #10]
 8003222:	4613      	mov	r3, r2
 8003224:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003226:	897b      	ldrh	r3, [r7, #10]
 8003228:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800322c:	7a7b      	ldrb	r3, [r7, #9]
 800322e:	041b      	lsls	r3, r3, #16
 8003230:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003234:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800323a:	6a3b      	ldr	r3, [r7, #32]
 800323c:	4313      	orrs	r3, r2
 800323e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003242:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	0d5b      	lsrs	r3, r3, #21
 800324e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003252:	4b08      	ldr	r3, [pc, #32]	; (8003274 <I2C_TransferConfig+0x60>)
 8003254:	430b      	orrs	r3, r1
 8003256:	43db      	mvns	r3, r3
 8003258:	ea02 0103 	and.w	r1, r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	430a      	orrs	r2, r1
 8003264:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003266:	bf00      	nop
 8003268:	371c      	adds	r7, #28
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	03ff63ff 	.word	0x03ff63ff

08003278 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b20      	cmp	r3, #32
 800328c:	d138      	bne.n	8003300 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003294:	2b01      	cmp	r3, #1
 8003296:	d101      	bne.n	800329c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003298:	2302      	movs	r3, #2
 800329a:	e032      	b.n	8003302 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2224      	movs	r2, #36	; 0x24
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0201 	bic.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032ca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6819      	ldr	r1, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2220      	movs	r2, #32
 80032f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032fc:	2300      	movs	r3, #0
 80032fe:	e000      	b.n	8003302 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003300:	2302      	movs	r3, #2
  }
}
 8003302:	4618      	mov	r0, r3
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr

0800330e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800330e:	b480      	push	{r7}
 8003310:	b085      	sub	sp, #20
 8003312:	af00      	add	r7, sp, #0
 8003314:	6078      	str	r0, [r7, #4]
 8003316:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b20      	cmp	r3, #32
 8003322:	d139      	bne.n	8003398 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800332e:	2302      	movs	r3, #2
 8003330:	e033      	b.n	800339a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2224      	movs	r2, #36	; 0x24
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 0201 	bic.w	r2, r2, #1
 8003350:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003360:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f042 0201 	orr.w	r2, r2, #1
 8003382:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	e000      	b.n	800339a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003398:	2302      	movs	r3, #2
  }
}
 800339a:	4618      	mov	r0, r3
 800339c:	3714      	adds	r7, #20
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033ac:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a04      	ldr	r2, [pc, #16]	; (80033c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80033b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b6:	6013      	str	r3, [r2, #0]
}
 80033b8:	bf00      	nop
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40007000 	.word	0x40007000

080033c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033d0:	2300      	movs	r3, #0
 80033d2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e29b      	b.n	8003916 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 8087 	beq.w	80034fa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033ec:	4b96      	ldr	r3, [pc, #600]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	2b04      	cmp	r3, #4
 80033f6:	d00c      	beq.n	8003412 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033f8:	4b93      	ldr	r3, [pc, #588]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	f003 030c 	and.w	r3, r3, #12
 8003400:	2b08      	cmp	r3, #8
 8003402:	d112      	bne.n	800342a <HAL_RCC_OscConfig+0x62>
 8003404:	4b90      	ldr	r3, [pc, #576]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003410:	d10b      	bne.n	800342a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003412:	4b8d      	ldr	r3, [pc, #564]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d06c      	beq.n	80034f8 <HAL_RCC_OscConfig+0x130>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d168      	bne.n	80034f8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e275      	b.n	8003916 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003432:	d106      	bne.n	8003442 <HAL_RCC_OscConfig+0x7a>
 8003434:	4b84      	ldr	r3, [pc, #528]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a83      	ldr	r2, [pc, #524]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 800343a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800343e:	6013      	str	r3, [r2, #0]
 8003440:	e02e      	b.n	80034a0 <HAL_RCC_OscConfig+0xd8>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10c      	bne.n	8003464 <HAL_RCC_OscConfig+0x9c>
 800344a:	4b7f      	ldr	r3, [pc, #508]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a7e      	ldr	r2, [pc, #504]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 8003450:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003454:	6013      	str	r3, [r2, #0]
 8003456:	4b7c      	ldr	r3, [pc, #496]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a7b      	ldr	r2, [pc, #492]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 800345c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003460:	6013      	str	r3, [r2, #0]
 8003462:	e01d      	b.n	80034a0 <HAL_RCC_OscConfig+0xd8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800346c:	d10c      	bne.n	8003488 <HAL_RCC_OscConfig+0xc0>
 800346e:	4b76      	ldr	r3, [pc, #472]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a75      	ldr	r2, [pc, #468]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 8003474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	4b73      	ldr	r3, [pc, #460]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a72      	ldr	r2, [pc, #456]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 8003480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	e00b      	b.n	80034a0 <HAL_RCC_OscConfig+0xd8>
 8003488:	4b6f      	ldr	r3, [pc, #444]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a6e      	ldr	r2, [pc, #440]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 800348e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003492:	6013      	str	r3, [r2, #0]
 8003494:	4b6c      	ldr	r3, [pc, #432]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a6b      	ldr	r2, [pc, #428]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 800349a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800349e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d013      	beq.n	80034d0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a8:	f7fe feca 	bl	8002240 <HAL_GetTick>
 80034ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ae:	e008      	b.n	80034c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b0:	f7fe fec6 	bl	8002240 <HAL_GetTick>
 80034b4:	4602      	mov	r2, r0
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	1ad3      	subs	r3, r2, r3
 80034ba:	2b64      	cmp	r3, #100	; 0x64
 80034bc:	d901      	bls.n	80034c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e229      	b.n	8003916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c2:	4b61      	ldr	r3, [pc, #388]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d0f0      	beq.n	80034b0 <HAL_RCC_OscConfig+0xe8>
 80034ce:	e014      	b.n	80034fa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fe feb6 	bl	8002240 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d8:	f7fe feb2 	bl	8002240 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b64      	cmp	r3, #100	; 0x64
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e215      	b.n	8003916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ea:	4b57      	ldr	r3, [pc, #348]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1f0      	bne.n	80034d8 <HAL_RCC_OscConfig+0x110>
 80034f6:	e000      	b.n	80034fa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d069      	beq.n	80035da <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003506:	4b50      	ldr	r3, [pc, #320]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00b      	beq.n	800352a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003512:	4b4d      	ldr	r3, [pc, #308]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b08      	cmp	r3, #8
 800351c:	d11c      	bne.n	8003558 <HAL_RCC_OscConfig+0x190>
 800351e:	4b4a      	ldr	r3, [pc, #296]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d116      	bne.n	8003558 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352a:	4b47      	ldr	r3, [pc, #284]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <HAL_RCC_OscConfig+0x17a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d001      	beq.n	8003542 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e1e9      	b.n	8003916 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003542:	4b41      	ldr	r3, [pc, #260]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	493d      	ldr	r1, [pc, #244]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 8003552:	4313      	orrs	r3, r2
 8003554:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003556:	e040      	b.n	80035da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d023      	beq.n	80035a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003560:	4b39      	ldr	r3, [pc, #228]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a38      	ldr	r2, [pc, #224]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 8003566:	f043 0301 	orr.w	r3, r3, #1
 800356a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356c:	f7fe fe68 	bl	8002240 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003574:	f7fe fe64 	bl	8002240 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e1c7      	b.n	8003916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003586:	4b30      	ldr	r3, [pc, #192]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003592:	4b2d      	ldr	r3, [pc, #180]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4929      	ldr	r1, [pc, #164]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	600b      	str	r3, [r1, #0]
 80035a6:	e018      	b.n	80035da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a8:	4b27      	ldr	r3, [pc, #156]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a26      	ldr	r2, [pc, #152]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 80035ae:	f023 0301 	bic.w	r3, r3, #1
 80035b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fe fe44 	bl	8002240 <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035bc:	f7fe fe40 	bl	8002240 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e1a3      	b.n	8003916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ce:	4b1e      	ldr	r3, [pc, #120]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1f0      	bne.n	80035bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d038      	beq.n	8003658 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d019      	beq.n	8003622 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ee:	4b16      	ldr	r3, [pc, #88]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 80035f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035f2:	4a15      	ldr	r2, [pc, #84]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fa:	f7fe fe21 	bl	8002240 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003600:	e008      	b.n	8003614 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003602:	f7fe fe1d 	bl	8002240 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e180      	b.n	8003916 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003614:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 8003616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003618:	f003 0302 	and.w	r3, r3, #2
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0f0      	beq.n	8003602 <HAL_RCC_OscConfig+0x23a>
 8003620:	e01a      	b.n	8003658 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003622:	4b09      	ldr	r3, [pc, #36]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 8003624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003626:	4a08      	ldr	r2, [pc, #32]	; (8003648 <HAL_RCC_OscConfig+0x280>)
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800362e:	f7fe fe07 	bl	8002240 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003634:	e00a      	b.n	800364c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003636:	f7fe fe03 	bl	8002240 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d903      	bls.n	800364c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e166      	b.n	8003916 <HAL_RCC_OscConfig+0x54e>
 8003648:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800364c:	4b92      	ldr	r3, [pc, #584]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 800364e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1ee      	bne.n	8003636 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80a4 	beq.w	80037ae <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003666:	4b8c      	ldr	r3, [pc, #560]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10d      	bne.n	800368e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003672:	4b89      	ldr	r3, [pc, #548]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	4a88      	ldr	r2, [pc, #544]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 8003678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800367c:	6413      	str	r3, [r2, #64]	; 0x40
 800367e:	4b86      	ldr	r3, [pc, #536]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800368a:	2301      	movs	r3, #1
 800368c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800368e:	4b83      	ldr	r3, [pc, #524]	; (800389c <HAL_RCC_OscConfig+0x4d4>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003696:	2b00      	cmp	r3, #0
 8003698:	d118      	bne.n	80036cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800369a:	4b80      	ldr	r3, [pc, #512]	; (800389c <HAL_RCC_OscConfig+0x4d4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a7f      	ldr	r2, [pc, #508]	; (800389c <HAL_RCC_OscConfig+0x4d4>)
 80036a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a6:	f7fe fdcb 	bl	8002240 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ae:	f7fe fdc7 	bl	8002240 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b64      	cmp	r3, #100	; 0x64
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e12a      	b.n	8003916 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036c0:	4b76      	ldr	r3, [pc, #472]	; (800389c <HAL_RCC_OscConfig+0x4d4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d106      	bne.n	80036e2 <HAL_RCC_OscConfig+0x31a>
 80036d4:	4b70      	ldr	r3, [pc, #448]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 80036d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d8:	4a6f      	ldr	r2, [pc, #444]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	6713      	str	r3, [r2, #112]	; 0x70
 80036e0:	e02d      	b.n	800373e <HAL_RCC_OscConfig+0x376>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10c      	bne.n	8003704 <HAL_RCC_OscConfig+0x33c>
 80036ea:	4b6b      	ldr	r3, [pc, #428]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ee:	4a6a      	ldr	r2, [pc, #424]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 80036f0:	f023 0301 	bic.w	r3, r3, #1
 80036f4:	6713      	str	r3, [r2, #112]	; 0x70
 80036f6:	4b68      	ldr	r3, [pc, #416]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	4a67      	ldr	r2, [pc, #412]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 80036fc:	f023 0304 	bic.w	r3, r3, #4
 8003700:	6713      	str	r3, [r2, #112]	; 0x70
 8003702:	e01c      	b.n	800373e <HAL_RCC_OscConfig+0x376>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b05      	cmp	r3, #5
 800370a:	d10c      	bne.n	8003726 <HAL_RCC_OscConfig+0x35e>
 800370c:	4b62      	ldr	r3, [pc, #392]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003710:	4a61      	ldr	r2, [pc, #388]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 8003712:	f043 0304 	orr.w	r3, r3, #4
 8003716:	6713      	str	r3, [r2, #112]	; 0x70
 8003718:	4b5f      	ldr	r3, [pc, #380]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 800371a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371c:	4a5e      	ldr	r2, [pc, #376]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 800371e:	f043 0301 	orr.w	r3, r3, #1
 8003722:	6713      	str	r3, [r2, #112]	; 0x70
 8003724:	e00b      	b.n	800373e <HAL_RCC_OscConfig+0x376>
 8003726:	4b5c      	ldr	r3, [pc, #368]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	4a5b      	ldr	r2, [pc, #364]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	6713      	str	r3, [r2, #112]	; 0x70
 8003732:	4b59      	ldr	r3, [pc, #356]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	4a58      	ldr	r2, [pc, #352]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 8003738:	f023 0304 	bic.w	r3, r3, #4
 800373c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d015      	beq.n	8003772 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003746:	f7fe fd7b 	bl	8002240 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374c:	e00a      	b.n	8003764 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374e:	f7fe fd77 	bl	8002240 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	f241 3288 	movw	r2, #5000	; 0x1388
 800375c:	4293      	cmp	r3, r2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e0d8      	b.n	8003916 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003764:	4b4c      	ldr	r3, [pc, #304]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 8003766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0ee      	beq.n	800374e <HAL_RCC_OscConfig+0x386>
 8003770:	e014      	b.n	800379c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003772:	f7fe fd65 	bl	8002240 <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003778:	e00a      	b.n	8003790 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377a:	f7fe fd61 	bl	8002240 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	f241 3288 	movw	r2, #5000	; 0x1388
 8003788:	4293      	cmp	r3, r2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e0c2      	b.n	8003916 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003790:	4b41      	ldr	r3, [pc, #260]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 8003792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1ee      	bne.n	800377a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800379c:	7dfb      	ldrb	r3, [r7, #23]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d105      	bne.n	80037ae <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a2:	4b3d      	ldr	r3, [pc, #244]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	4a3c      	ldr	r2, [pc, #240]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 80037a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 80ae 	beq.w	8003914 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b8:	4b37      	ldr	r3, [pc, #220]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 030c 	and.w	r3, r3, #12
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d06d      	beq.n	80038a0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d14b      	bne.n	8003864 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037cc:	4b32      	ldr	r3, [pc, #200]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a31      	ldr	r2, [pc, #196]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 80037d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fe fd32 	bl	8002240 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e0:	f7fe fd2e 	bl	8002240 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e091      	b.n	8003916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f2:	4b29      	ldr	r3, [pc, #164]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69da      	ldr	r2, [r3, #28]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1b      	ldr	r3, [r3, #32]
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380c:	019b      	lsls	r3, r3, #6
 800380e:	431a      	orrs	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003814:	085b      	lsrs	r3, r3, #1
 8003816:	3b01      	subs	r3, #1
 8003818:	041b      	lsls	r3, r3, #16
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003820:	061b      	lsls	r3, r3, #24
 8003822:	431a      	orrs	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	071b      	lsls	r3, r3, #28
 800382a:	491b      	ldr	r1, [pc, #108]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 800382c:	4313      	orrs	r3, r2
 800382e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003830:	4b19      	ldr	r3, [pc, #100]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a18      	ldr	r2, [pc, #96]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 8003836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800383a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800383c:	f7fe fd00 	bl	8002240 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003844:	f7fe fcfc 	bl	8002240 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e05f      	b.n	8003916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003856:	4b10      	ldr	r3, [pc, #64]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d0f0      	beq.n	8003844 <HAL_RCC_OscConfig+0x47c>
 8003862:	e057      	b.n	8003914 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003864:	4b0c      	ldr	r3, [pc, #48]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a0b      	ldr	r2, [pc, #44]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 800386a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800386e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003870:	f7fe fce6 	bl	8002240 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003878:	f7fe fce2 	bl	8002240 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b02      	cmp	r3, #2
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e045      	b.n	8003916 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800388a:	4b03      	ldr	r3, [pc, #12]	; (8003898 <HAL_RCC_OscConfig+0x4d0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1f0      	bne.n	8003878 <HAL_RCC_OscConfig+0x4b0>
 8003896:	e03d      	b.n	8003914 <HAL_RCC_OscConfig+0x54c>
 8003898:	40023800 	.word	0x40023800
 800389c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80038a0:	4b1f      	ldr	r3, [pc, #124]	; (8003920 <HAL_RCC_OscConfig+0x558>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b01      	cmp	r3, #1
 80038ac:	d030      	beq.n	8003910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d129      	bne.n	8003910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d122      	bne.n	8003910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038d0:	4013      	ands	r3, r2
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038d8:	4293      	cmp	r3, r2
 80038da:	d119      	bne.n	8003910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	3b01      	subs	r3, #1
 80038ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d10f      	bne.n	8003910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d107      	bne.n	8003910 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e000      	b.n	8003916 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	40023800 	.word	0x40023800

08003924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800392e:	2300      	movs	r3, #0
 8003930:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e0d0      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800393c:	4b6a      	ldr	r3, [pc, #424]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d910      	bls.n	800396c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b67      	ldr	r3, [pc, #412]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 020f 	bic.w	r2, r3, #15
 8003952:	4965      	ldr	r1, [pc, #404]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	4b63      	ldr	r3, [pc, #396]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 030f 	and.w	r3, r3, #15
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e0b8      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0302 	and.w	r3, r3, #2
 8003974:	2b00      	cmp	r3, #0
 8003976:	d020      	beq.n	80039ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003984:	4b59      	ldr	r3, [pc, #356]	; (8003aec <HAL_RCC_ClockConfig+0x1c8>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	4a58      	ldr	r2, [pc, #352]	; (8003aec <HAL_RCC_ClockConfig+0x1c8>)
 800398a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800398e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0308 	and.w	r3, r3, #8
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800399c:	4b53      	ldr	r3, [pc, #332]	; (8003aec <HAL_RCC_ClockConfig+0x1c8>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	4a52      	ldr	r2, [pc, #328]	; (8003aec <HAL_RCC_ClockConfig+0x1c8>)
 80039a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039a8:	4b50      	ldr	r3, [pc, #320]	; (8003aec <HAL_RCC_ClockConfig+0x1c8>)
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	494d      	ldr	r1, [pc, #308]	; (8003aec <HAL_RCC_ClockConfig+0x1c8>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d040      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d107      	bne.n	80039de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ce:	4b47      	ldr	r3, [pc, #284]	; (8003aec <HAL_RCC_ClockConfig+0x1c8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d115      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e07f      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b02      	cmp	r3, #2
 80039e4:	d107      	bne.n	80039f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e6:	4b41      	ldr	r3, [pc, #260]	; (8003aec <HAL_RCC_ClockConfig+0x1c8>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d109      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e073      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039f6:	4b3d      	ldr	r3, [pc, #244]	; (8003aec <HAL_RCC_ClockConfig+0x1c8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e06b      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a06:	4b39      	ldr	r3, [pc, #228]	; (8003aec <HAL_RCC_ClockConfig+0x1c8>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f023 0203 	bic.w	r2, r3, #3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	4936      	ldr	r1, [pc, #216]	; (8003aec <HAL_RCC_ClockConfig+0x1c8>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a18:	f7fe fc12 	bl	8002240 <HAL_GetTick>
 8003a1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1e:	e00a      	b.n	8003a36 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a20:	f7fe fc0e 	bl	8002240 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e053      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a36:	4b2d      	ldr	r3, [pc, #180]	; (8003aec <HAL_RCC_ClockConfig+0x1c8>)
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f003 020c 	and.w	r2, r3, #12
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d1eb      	bne.n	8003a20 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a48:	4b27      	ldr	r3, [pc, #156]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d210      	bcs.n	8003a78 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b24      	ldr	r3, [pc, #144]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 020f 	bic.w	r2, r3, #15
 8003a5e:	4922      	ldr	r1, [pc, #136]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e032      	b.n	8003ade <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a84:	4b19      	ldr	r3, [pc, #100]	; (8003aec <HAL_RCC_ClockConfig+0x1c8>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4916      	ldr	r1, [pc, #88]	; (8003aec <HAL_RCC_ClockConfig+0x1c8>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003aa2:	4b12      	ldr	r3, [pc, #72]	; (8003aec <HAL_RCC_ClockConfig+0x1c8>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	490e      	ldr	r1, [pc, #56]	; (8003aec <HAL_RCC_ClockConfig+0x1c8>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ab6:	f000 f821 	bl	8003afc <HAL_RCC_GetSysClockFreq>
 8003aba:	4602      	mov	r2, r0
 8003abc:	4b0b      	ldr	r3, [pc, #44]	; (8003aec <HAL_RCC_ClockConfig+0x1c8>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	091b      	lsrs	r3, r3, #4
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	490a      	ldr	r1, [pc, #40]	; (8003af0 <HAL_RCC_ClockConfig+0x1cc>)
 8003ac8:	5ccb      	ldrb	r3, [r1, r3]
 8003aca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ace:	4a09      	ldr	r2, [pc, #36]	; (8003af4 <HAL_RCC_ClockConfig+0x1d0>)
 8003ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ad2:	4b09      	ldr	r3, [pc, #36]	; (8003af8 <HAL_RCC_ClockConfig+0x1d4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe fb6e 	bl	80021b8 <HAL_InitTick>

  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	40023c00 	.word	0x40023c00
 8003aec:	40023800 	.word	0x40023800
 8003af0:	0800ae58 	.word	0x0800ae58
 8003af4:	20000004 	.word	0x20000004
 8003af8:	20000008 	.word	0x20000008

08003afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003afc:	b5b0      	push	{r4, r5, r7, lr}
 8003afe:	b084      	sub	sp, #16
 8003b00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b02:	2100      	movs	r1, #0
 8003b04:	6079      	str	r1, [r7, #4]
 8003b06:	2100      	movs	r1, #0
 8003b08:	60f9      	str	r1, [r7, #12]
 8003b0a:	2100      	movs	r1, #0
 8003b0c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003b0e:	2100      	movs	r1, #0
 8003b10:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b12:	4952      	ldr	r1, [pc, #328]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b14:	6889      	ldr	r1, [r1, #8]
 8003b16:	f001 010c 	and.w	r1, r1, #12
 8003b1a:	2908      	cmp	r1, #8
 8003b1c:	d00d      	beq.n	8003b3a <HAL_RCC_GetSysClockFreq+0x3e>
 8003b1e:	2908      	cmp	r1, #8
 8003b20:	f200 8094 	bhi.w	8003c4c <HAL_RCC_GetSysClockFreq+0x150>
 8003b24:	2900      	cmp	r1, #0
 8003b26:	d002      	beq.n	8003b2e <HAL_RCC_GetSysClockFreq+0x32>
 8003b28:	2904      	cmp	r1, #4
 8003b2a:	d003      	beq.n	8003b34 <HAL_RCC_GetSysClockFreq+0x38>
 8003b2c:	e08e      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b2e:	4b4c      	ldr	r3, [pc, #304]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b30:	60bb      	str	r3, [r7, #8]
      break;
 8003b32:	e08e      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b34:	4b4b      	ldr	r3, [pc, #300]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x168>)
 8003b36:	60bb      	str	r3, [r7, #8]
      break;
 8003b38:	e08b      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b3a:	4948      	ldr	r1, [pc, #288]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b3c:	6849      	ldr	r1, [r1, #4]
 8003b3e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003b42:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b44:	4945      	ldr	r1, [pc, #276]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b46:	6849      	ldr	r1, [r1, #4]
 8003b48:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003b4c:	2900      	cmp	r1, #0
 8003b4e:	d024      	beq.n	8003b9a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b50:	4942      	ldr	r1, [pc, #264]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b52:	6849      	ldr	r1, [r1, #4]
 8003b54:	0989      	lsrs	r1, r1, #6
 8003b56:	4608      	mov	r0, r1
 8003b58:	f04f 0100 	mov.w	r1, #0
 8003b5c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003b60:	f04f 0500 	mov.w	r5, #0
 8003b64:	ea00 0204 	and.w	r2, r0, r4
 8003b68:	ea01 0305 	and.w	r3, r1, r5
 8003b6c:	493d      	ldr	r1, [pc, #244]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x168>)
 8003b6e:	fb01 f003 	mul.w	r0, r1, r3
 8003b72:	2100      	movs	r1, #0
 8003b74:	fb01 f102 	mul.w	r1, r1, r2
 8003b78:	1844      	adds	r4, r0, r1
 8003b7a:	493a      	ldr	r1, [pc, #232]	; (8003c64 <HAL_RCC_GetSysClockFreq+0x168>)
 8003b7c:	fba2 0101 	umull	r0, r1, r2, r1
 8003b80:	1863      	adds	r3, r4, r1
 8003b82:	4619      	mov	r1, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	461a      	mov	r2, r3
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	f7fc fd6c 	bl	8000668 <__aeabi_uldivmod>
 8003b90:	4602      	mov	r2, r0
 8003b92:	460b      	mov	r3, r1
 8003b94:	4613      	mov	r3, r2
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	e04a      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b9a:	4b30      	ldr	r3, [pc, #192]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	099b      	lsrs	r3, r3, #6
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003baa:	f04f 0100 	mov.w	r1, #0
 8003bae:	ea02 0400 	and.w	r4, r2, r0
 8003bb2:	ea03 0501 	and.w	r5, r3, r1
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	4629      	mov	r1, r5
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	014b      	lsls	r3, r1, #5
 8003bc4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bc8:	0142      	lsls	r2, r0, #5
 8003bca:	4610      	mov	r0, r2
 8003bcc:	4619      	mov	r1, r3
 8003bce:	1b00      	subs	r0, r0, r4
 8003bd0:	eb61 0105 	sbc.w	r1, r1, r5
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	018b      	lsls	r3, r1, #6
 8003bde:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003be2:	0182      	lsls	r2, r0, #6
 8003be4:	1a12      	subs	r2, r2, r0
 8003be6:	eb63 0301 	sbc.w	r3, r3, r1
 8003bea:	f04f 0000 	mov.w	r0, #0
 8003bee:	f04f 0100 	mov.w	r1, #0
 8003bf2:	00d9      	lsls	r1, r3, #3
 8003bf4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bf8:	00d0      	lsls	r0, r2, #3
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	1912      	adds	r2, r2, r4
 8003c00:	eb45 0303 	adc.w	r3, r5, r3
 8003c04:	f04f 0000 	mov.w	r0, #0
 8003c08:	f04f 0100 	mov.w	r1, #0
 8003c0c:	0299      	lsls	r1, r3, #10
 8003c0e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c12:	0290      	lsls	r0, r2, #10
 8003c14:	4602      	mov	r2, r0
 8003c16:	460b      	mov	r3, r1
 8003c18:	4610      	mov	r0, r2
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f04f 0300 	mov.w	r3, #0
 8003c24:	f7fc fd20 	bl	8000668 <__aeabi_uldivmod>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c30:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x160>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	0c1b      	lsrs	r3, r3, #16
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c48:	60bb      	str	r3, [r7, #8]
      break;
 8003c4a:	e002      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c4c:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x164>)
 8003c4e:	60bb      	str	r3, [r7, #8]
      break;
 8003c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c52:	68bb      	ldr	r3, [r7, #8]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bdb0      	pop	{r4, r5, r7, pc}
 8003c5c:	40023800 	.word	0x40023800
 8003c60:	00f42400 	.word	0x00f42400
 8003c64:	017d7840 	.word	0x017d7840

08003c68 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c6c:	4b03      	ldr	r3, [pc, #12]	; (8003c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	20000004 	.word	0x20000004

08003c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c84:	f7ff fff0 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	0a9b      	lsrs	r3, r3, #10
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	4903      	ldr	r1, [pc, #12]	; (8003ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c96:	5ccb      	ldrb	r3, [r1, r3]
 8003c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	0800ae68 	.word	0x0800ae68

08003ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cac:	f7ff ffdc 	bl	8003c68 <HAL_RCC_GetHCLKFreq>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	0b5b      	lsrs	r3, r3, #13
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	4903      	ldr	r1, [pc, #12]	; (8003ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cbe:	5ccb      	ldrb	r3, [r1, r3]
 8003cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40023800 	.word	0x40023800
 8003ccc:	0800ae68 	.word	0x0800ae68

08003cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0301 	and.w	r3, r3, #1
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d012      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cf8:	4b69      	ldr	r3, [pc, #420]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	4a68      	ldr	r2, [pc, #416]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d02:	6093      	str	r3, [r2, #8]
 8003d04:	4b66      	ldr	r3, [pc, #408]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0c:	4964      	ldr	r1, [pc, #400]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d017      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d2a:	4b5d      	ldr	r3, [pc, #372]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d38:	4959      	ldr	r1, [pc, #356]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d48:	d101      	bne.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d56:	2301      	movs	r3, #1
 8003d58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d017      	beq.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d66:	4b4e      	ldr	r3, [pc, #312]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d74:	494a      	ldr	r1, [pc, #296]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d84:	d101      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d86:	2301      	movs	r3, #1
 8003d88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d92:	2301      	movs	r3, #1
 8003d94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003da2:	2301      	movs	r3, #1
 8003da4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f000 808b 	beq.w	8003eca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003db4:	4b3a      	ldr	r3, [pc, #232]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	4a39      	ldr	r2, [pc, #228]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8003dc0:	4b37      	ldr	r3, [pc, #220]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003dcc:	4b35      	ldr	r3, [pc, #212]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a34      	ldr	r2, [pc, #208]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dd8:	f7fe fa32 	bl	8002240 <HAL_GetTick>
 8003ddc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dde:	e008      	b.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003de0:	f7fe fa2e 	bl	8002240 <HAL_GetTick>
 8003de4:	4602      	mov	r2, r0
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	1ad3      	subs	r3, r2, r3
 8003dea:	2b64      	cmp	r3, #100	; 0x64
 8003dec:	d901      	bls.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e38f      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003df2:	4b2c      	ldr	r3, [pc, #176]	; (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d0f0      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dfe:	4b28      	ldr	r3, [pc, #160]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d035      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d02e      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e1c:	4b20      	ldr	r3, [pc, #128]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e26:	4b1e      	ldr	r3, [pc, #120]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2a:	4a1d      	ldr	r2, [pc, #116]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e32:	4b1b      	ldr	r3, [pc, #108]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e36:	4a1a      	ldr	r2, [pc, #104]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e3e:	4a18      	ldr	r2, [pc, #96]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e44:	4b16      	ldr	r3, [pc, #88]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d114      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e50:	f7fe f9f6 	bl	8002240 <HAL_GetTick>
 8003e54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e56:	e00a      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e58:	f7fe f9f2 	bl	8002240 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e351      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0ee      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e86:	d111      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e88:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e94:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e96:	400b      	ands	r3, r1
 8003e98:	4901      	ldr	r1, [pc, #4]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	608b      	str	r3, [r1, #8]
 8003e9e:	e00b      	b.n	8003eb8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	40007000 	.word	0x40007000
 8003ea8:	0ffffcff 	.word	0x0ffffcff
 8003eac:	4bb3      	ldr	r3, [pc, #716]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	4ab2      	ldr	r2, [pc, #712]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eb2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003eb6:	6093      	str	r3, [r2, #8]
 8003eb8:	4bb0      	ldr	r3, [pc, #704]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003eba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ec4:	49ad      	ldr	r1, [pc, #692]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0310 	and.w	r3, r3, #16
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d010      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ed6:	4ba9      	ldr	r3, [pc, #676]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ed8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003edc:	4aa7      	ldr	r2, [pc, #668]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ede:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ee2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003ee6:	4ba5      	ldr	r3, [pc, #660]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ee8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef0:	49a2      	ldr	r1, [pc, #648]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d00a      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f04:	4b9d      	ldr	r3, [pc, #628]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f12:	499a      	ldr	r1, [pc, #616]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00a      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f26:	4b95      	ldr	r3, [pc, #596]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f34:	4991      	ldr	r1, [pc, #580]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f48:	4b8c      	ldr	r3, [pc, #560]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f56:	4989      	ldr	r1, [pc, #548]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f6a:	4b84      	ldr	r3, [pc, #528]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f78:	4980      	ldr	r1, [pc, #512]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00a      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f8c:	4b7b      	ldr	r3, [pc, #492]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f92:	f023 0203 	bic.w	r2, r3, #3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	4978      	ldr	r1, [pc, #480]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fae:	4b73      	ldr	r3, [pc, #460]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fb4:	f023 020c 	bic.w	r2, r3, #12
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fbc:	496f      	ldr	r1, [pc, #444]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d00a      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fd0:	4b6a      	ldr	r3, [pc, #424]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fde:	4967      	ldr	r1, [pc, #412]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00a      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ff2:	4b62      	ldr	r3, [pc, #392]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004000:	495e      	ldr	r1, [pc, #376]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004002:	4313      	orrs	r3, r2
 8004004:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004014:	4b59      	ldr	r3, [pc, #356]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004022:	4956      	ldr	r1, [pc, #344]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004036:	4b51      	ldr	r3, [pc, #324]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004044:	494d      	ldr	r1, [pc, #308]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004046:	4313      	orrs	r3, r2
 8004048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004058:	4b48      	ldr	r3, [pc, #288]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800405a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004066:	4945      	ldr	r1, [pc, #276]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004068:	4313      	orrs	r3, r2
 800406a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800407a:	4b40      	ldr	r3, [pc, #256]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004080:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004088:	493c      	ldr	r1, [pc, #240]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800408a:	4313      	orrs	r3, r2
 800408c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800409c:	4b37      	ldr	r3, [pc, #220]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040aa:	4934      	ldr	r1, [pc, #208]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d011      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040be:	4b2f      	ldr	r3, [pc, #188]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040cc:	492b      	ldr	r1, [pc, #172]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040dc:	d101      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80040de:	2301      	movs	r3, #1
 80040e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80040ee:	2301      	movs	r3, #1
 80040f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040fe:	4b1f      	ldr	r3, [pc, #124]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004104:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800410c:	491b      	ldr	r1, [pc, #108]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00b      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004120:	4b16      	ldr	r3, [pc, #88]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004126:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004130:	4912      	ldr	r1, [pc, #72]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004132:	4313      	orrs	r3, r2
 8004134:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00b      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004144:	4b0d      	ldr	r3, [pc, #52]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004154:	4909      	ldr	r1, [pc, #36]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00f      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004168:	4b04      	ldr	r3, [pc, #16]	; (800417c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800416a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800416e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004178:	e002      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800417a:	bf00      	nop
 800417c:	40023800 	.word	0x40023800
 8004180:	4986      	ldr	r1, [pc, #536]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004182:	4313      	orrs	r3, r2
 8004184:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00b      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004194:	4b81      	ldr	r3, [pc, #516]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800419a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041a4:	497d      	ldr	r1, [pc, #500]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d006      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 80d6 	beq.w	800436c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041c0:	4b76      	ldr	r3, [pc, #472]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a75      	ldr	r2, [pc, #468]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041cc:	f7fe f838 	bl	8002240 <HAL_GetTick>
 80041d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041d4:	f7fe f834 	bl	8002240 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b64      	cmp	r3, #100	; 0x64
 80041e0:	d901      	bls.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e195      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041e6:	4b6d      	ldr	r3, [pc, #436]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d021      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004202:	2b00      	cmp	r3, #0
 8004204:	d11d      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004206:	4b65      	ldr	r3, [pc, #404]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800420c:	0c1b      	lsrs	r3, r3, #16
 800420e:	f003 0303 	and.w	r3, r3, #3
 8004212:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004214:	4b61      	ldr	r3, [pc, #388]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004216:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800421a:	0e1b      	lsrs	r3, r3, #24
 800421c:	f003 030f 	and.w	r3, r3, #15
 8004220:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	019a      	lsls	r2, r3, #6
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	041b      	lsls	r3, r3, #16
 800422c:	431a      	orrs	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	061b      	lsls	r3, r3, #24
 8004232:	431a      	orrs	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	071b      	lsls	r3, r3, #28
 800423a:	4958      	ldr	r1, [pc, #352]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800423c:	4313      	orrs	r3, r2
 800423e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d004      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004252:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004256:	d00a      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004260:	2b00      	cmp	r3, #0
 8004262:	d02e      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800426c:	d129      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800426e:	4b4b      	ldr	r3, [pc, #300]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004274:	0c1b      	lsrs	r3, r3, #16
 8004276:	f003 0303 	and.w	r3, r3, #3
 800427a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800427c:	4b47      	ldr	r3, [pc, #284]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800427e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004282:	0f1b      	lsrs	r3, r3, #28
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	019a      	lsls	r2, r3, #6
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	041b      	lsls	r3, r3, #16
 8004294:	431a      	orrs	r2, r3
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	061b      	lsls	r3, r3, #24
 800429c:	431a      	orrs	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	071b      	lsls	r3, r3, #28
 80042a2:	493e      	ldr	r1, [pc, #248]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042aa:	4b3c      	ldr	r3, [pc, #240]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042b0:	f023 021f 	bic.w	r2, r3, #31
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b8:	3b01      	subs	r3, #1
 80042ba:	4938      	ldr	r1, [pc, #224]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d01d      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042ce:	4b33      	ldr	r3, [pc, #204]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042d4:	0e1b      	lsrs	r3, r3, #24
 80042d6:	f003 030f 	and.w	r3, r3, #15
 80042da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042dc:	4b2f      	ldr	r3, [pc, #188]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042e2:	0f1b      	lsrs	r3, r3, #28
 80042e4:	f003 0307 	and.w	r3, r3, #7
 80042e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	019a      	lsls	r2, r3, #6
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	041b      	lsls	r3, r3, #16
 80042f6:	431a      	orrs	r2, r3
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	061b      	lsls	r3, r3, #24
 80042fc:	431a      	orrs	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	071b      	lsls	r3, r3, #28
 8004302:	4926      	ldr	r1, [pc, #152]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d011      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	019a      	lsls	r2, r3, #6
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	041b      	lsls	r3, r3, #16
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	061b      	lsls	r3, r3, #24
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	071b      	lsls	r3, r3, #28
 8004332:	491a      	ldr	r1, [pc, #104]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800433a:	4b18      	ldr	r3, [pc, #96]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a17      	ldr	r2, [pc, #92]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004340:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004346:	f7fd ff7b 	bl	8002240 <HAL_GetTick>
 800434a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800434c:	e008      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800434e:	f7fd ff77 	bl	8002240 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b64      	cmp	r3, #100	; 0x64
 800435a:	d901      	bls.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e0d8      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004360:	4b0e      	ldr	r3, [pc, #56]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0f0      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	2b01      	cmp	r3, #1
 8004370:	f040 80ce 	bne.w	8004510 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004374:	4b09      	ldr	r3, [pc, #36]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a08      	ldr	r2, [pc, #32]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800437a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800437e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004380:	f7fd ff5e 	bl	8002240 <HAL_GetTick>
 8004384:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004386:	e00b      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004388:	f7fd ff5a 	bl	8002240 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b64      	cmp	r3, #100	; 0x64
 8004394:	d904      	bls.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e0bb      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800439a:	bf00      	nop
 800439c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043a0:	4b5e      	ldr	r3, [pc, #376]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043ac:	d0ec      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d02e      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d12a      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043d6:	4b51      	ldr	r3, [pc, #324]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043dc:	0c1b      	lsrs	r3, r3, #16
 80043de:	f003 0303 	and.w	r3, r3, #3
 80043e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043e4:	4b4d      	ldr	r3, [pc, #308]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ea:	0f1b      	lsrs	r3, r3, #28
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	019a      	lsls	r2, r3, #6
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	041b      	lsls	r3, r3, #16
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	061b      	lsls	r3, r3, #24
 8004404:	431a      	orrs	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	071b      	lsls	r3, r3, #28
 800440a:	4944      	ldr	r1, [pc, #272]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800440c:	4313      	orrs	r3, r2
 800440e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004412:	4b42      	ldr	r3, [pc, #264]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004418:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004420:	3b01      	subs	r3, #1
 8004422:	021b      	lsls	r3, r3, #8
 8004424:	493d      	ldr	r1, [pc, #244]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004434:	2b00      	cmp	r3, #0
 8004436:	d022      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800443c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004440:	d11d      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004442:	4b36      	ldr	r3, [pc, #216]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004448:	0e1b      	lsrs	r3, r3, #24
 800444a:	f003 030f 	and.w	r3, r3, #15
 800444e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004450:	4b32      	ldr	r3, [pc, #200]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004456:	0f1b      	lsrs	r3, r3, #28
 8004458:	f003 0307 	and.w	r3, r3, #7
 800445c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	019a      	lsls	r2, r3, #6
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6a1b      	ldr	r3, [r3, #32]
 8004468:	041b      	lsls	r3, r3, #16
 800446a:	431a      	orrs	r2, r3
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	061b      	lsls	r3, r3, #24
 8004470:	431a      	orrs	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	071b      	lsls	r3, r3, #28
 8004476:	4929      	ldr	r1, [pc, #164]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004478:	4313      	orrs	r3, r2
 800447a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0308 	and.w	r3, r3, #8
 8004486:	2b00      	cmp	r3, #0
 8004488:	d028      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800448a:	4b24      	ldr	r3, [pc, #144]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004490:	0e1b      	lsrs	r3, r3, #24
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004498:	4b20      	ldr	r3, [pc, #128]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800449a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800449e:	0c1b      	lsrs	r3, r3, #16
 80044a0:	f003 0303 	and.w	r3, r3, #3
 80044a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	019a      	lsls	r2, r3, #6
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	041b      	lsls	r3, r3, #16
 80044b0:	431a      	orrs	r2, r3
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	061b      	lsls	r3, r3, #24
 80044b6:	431a      	orrs	r2, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	071b      	lsls	r3, r3, #28
 80044be:	4917      	ldr	r1, [pc, #92]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044c6:	4b15      	ldr	r3, [pc, #84]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	4911      	ldr	r1, [pc, #68]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044dc:	4b0f      	ldr	r3, [pc, #60]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a0e      	ldr	r2, [pc, #56]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044e8:	f7fd feaa 	bl	8002240 <HAL_GetTick>
 80044ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044ee:	e008      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044f0:	f7fd fea6 	bl	8002240 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	2b64      	cmp	r3, #100	; 0x64
 80044fc:	d901      	bls.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e007      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004502:	4b06      	ldr	r3, [pc, #24]	; (800451c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800450a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800450e:	d1ef      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3720      	adds	r7, #32
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	40023800 	.word	0x40023800

08004520 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e09d      	b.n	800466e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004536:	2b00      	cmp	r3, #0
 8004538:	d108      	bne.n	800454c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004542:	d009      	beq.n	8004558 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	61da      	str	r2, [r3, #28]
 800454a:	e005      	b.n	8004558 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d106      	bne.n	8004578 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f7fd fc1c 	bl	8001db0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800458e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004598:	d902      	bls.n	80045a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800459a:	2300      	movs	r3, #0
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	e002      	b.n	80045a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80045a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80045ae:	d007      	beq.n	80045c0 <HAL_SPI_Init+0xa0>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80045b8:	d002      	beq.n	80045c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045d0:	431a      	orrs	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	431a      	orrs	r2, r3
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045ee:	431a      	orrs	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045f8:	431a      	orrs	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004602:	ea42 0103 	orr.w	r1, r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800460a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	0c1b      	lsrs	r3, r3, #16
 800461c:	f003 0204 	and.w	r2, r3, #4
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	f003 0310 	and.w	r3, r3, #16
 8004628:	431a      	orrs	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800463c:	ea42 0103 	orr.w	r1, r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	69da      	ldr	r2, [r3, #28]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800465c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b088      	sub	sp, #32
 800467a:	af00      	add	r7, sp, #0
 800467c:	60f8      	str	r0, [r7, #12]
 800467e:	60b9      	str	r1, [r7, #8]
 8004680:	603b      	str	r3, [r7, #0]
 8004682:	4613      	mov	r3, r2
 8004684:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004690:	2b01      	cmp	r3, #1
 8004692:	d101      	bne.n	8004698 <HAL_SPI_Transmit+0x22>
 8004694:	2302      	movs	r3, #2
 8004696:	e158      	b.n	800494a <HAL_SPI_Transmit+0x2d4>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046a0:	f7fd fdce 	bl	8002240 <HAL_GetTick>
 80046a4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80046a6:	88fb      	ldrh	r3, [r7, #6]
 80046a8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d002      	beq.n	80046bc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80046b6:	2302      	movs	r3, #2
 80046b8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046ba:	e13d      	b.n	8004938 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <HAL_SPI_Transmit+0x52>
 80046c2:	88fb      	ldrh	r3, [r7, #6]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d102      	bne.n	80046ce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046cc:	e134      	b.n	8004938 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2203      	movs	r2, #3
 80046d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	88fa      	ldrh	r2, [r7, #6]
 80046e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	88fa      	ldrh	r2, [r7, #6]
 80046ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2200      	movs	r2, #0
 800470e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004718:	d10f      	bne.n	800473a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004728:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004738:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004744:	2b40      	cmp	r3, #64	; 0x40
 8004746:	d007      	beq.n	8004758 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004756:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004760:	d94b      	bls.n	80047fa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_SPI_Transmit+0xfa>
 800476a:	8afb      	ldrh	r3, [r7, #22]
 800476c:	2b01      	cmp	r3, #1
 800476e:	d13e      	bne.n	80047ee <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004774:	881a      	ldrh	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	1c9a      	adds	r2, r3, #2
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800478a:	b29b      	uxth	r3, r3
 800478c:	3b01      	subs	r3, #1
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004794:	e02b      	b.n	80047ee <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d112      	bne.n	80047ca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	881a      	ldrh	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047b4:	1c9a      	adds	r2, r3, #2
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047be:	b29b      	uxth	r3, r3
 80047c0:	3b01      	subs	r3, #1
 80047c2:	b29a      	uxth	r2, r3
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047c8:	e011      	b.n	80047ee <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047ca:	f7fd fd39 	bl	8002240 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	683a      	ldr	r2, [r7, #0]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d803      	bhi.n	80047e2 <HAL_SPI_Transmit+0x16c>
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047e0:	d102      	bne.n	80047e8 <HAL_SPI_Transmit+0x172>
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d102      	bne.n	80047ee <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047ec:	e0a4      	b.n	8004938 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1ce      	bne.n	8004796 <HAL_SPI_Transmit+0x120>
 80047f8:	e07c      	b.n	80048f4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_SPI_Transmit+0x192>
 8004802:	8afb      	ldrh	r3, [r7, #22]
 8004804:	2b01      	cmp	r3, #1
 8004806:	d170      	bne.n	80048ea <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800480c:	b29b      	uxth	r3, r3
 800480e:	2b01      	cmp	r3, #1
 8004810:	d912      	bls.n	8004838 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004816:	881a      	ldrh	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	1c9a      	adds	r2, r3, #2
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800482c:	b29b      	uxth	r3, r3
 800482e:	3b02      	subs	r3, #2
 8004830:	b29a      	uxth	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004836:	e058      	b.n	80048ea <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	330c      	adds	r3, #12
 8004842:	7812      	ldrb	r2, [r2, #0]
 8004844:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004854:	b29b      	uxth	r3, r3
 8004856:	3b01      	subs	r3, #1
 8004858:	b29a      	uxth	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800485e:	e044      	b.n	80048ea <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 0302 	and.w	r3, r3, #2
 800486a:	2b02      	cmp	r3, #2
 800486c:	d12b      	bne.n	80048c6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b01      	cmp	r3, #1
 8004876:	d912      	bls.n	800489e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487c:	881a      	ldrh	r2, [r3, #0]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004888:	1c9a      	adds	r2, r3, #2
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004892:	b29b      	uxth	r3, r3
 8004894:	3b02      	subs	r3, #2
 8004896:	b29a      	uxth	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800489c:	e025      	b.n	80048ea <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	330c      	adds	r3, #12
 80048a8:	7812      	ldrb	r2, [r2, #0]
 80048aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048c4:	e011      	b.n	80048ea <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048c6:	f7fd fcbb 	bl	8002240 <HAL_GetTick>
 80048ca:	4602      	mov	r2, r0
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	1ad3      	subs	r3, r2, r3
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d803      	bhi.n	80048de <HAL_SPI_Transmit+0x268>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048dc:	d102      	bne.n	80048e4 <HAL_SPI_Transmit+0x26e>
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d102      	bne.n	80048ea <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048e8:	e026      	b.n	8004938 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1b5      	bne.n	8004860 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	6839      	ldr	r1, [r7, #0]
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 fda7 	bl	800544c <SPI_EndRxTxTransaction>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2220      	movs	r2, #32
 8004908:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10a      	bne.n	8004928 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004912:	2300      	movs	r3, #0
 8004914:	613b      	str	r3, [r7, #16]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	613b      	str	r3, [r7, #16]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	613b      	str	r3, [r7, #16]
 8004926:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	77fb      	strb	r3, [r7, #31]
 8004934:	e000      	b.n	8004938 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004936:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2200      	movs	r2, #0
 8004944:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004948:	7ffb      	ldrb	r3, [r7, #31]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3720      	adds	r7, #32
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
	...

08004954 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b086      	sub	sp, #24
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	4613      	mov	r3, r2
 8004960:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004962:	2300      	movs	r3, #0
 8004964:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d110      	bne.n	8004990 <HAL_SPI_Receive_IT+0x3c>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004976:	d10b      	bne.n	8004990 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2204      	movs	r2, #4
 800497c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8004980:	88fb      	ldrh	r3, [r7, #6]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	68b9      	ldr	r1, [r7, #8]
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 f894 	bl	8004ab4 <HAL_SPI_TransmitReceive_IT>
 800498c:	4603      	mov	r3, r0
 800498e:	e089      	b.n	8004aa4 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <HAL_SPI_Receive_IT+0x4a>
 800499a:	2302      	movs	r3, #2
 800499c:	e082      	b.n	8004aa4 <HAL_SPI_Receive_IT+0x150>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d002      	beq.n	80049b8 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80049b2:	2302      	movs	r3, #2
 80049b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049b6:	e070      	b.n	8004a9a <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <HAL_SPI_Receive_IT+0x70>
 80049be:	88fb      	ldrh	r3, [r7, #6]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d102      	bne.n	80049ca <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049c8:	e067      	b.n	8004a9a <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2204      	movs	r2, #4
 80049ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2200      	movs	r2, #0
 80049d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	88fa      	ldrh	r2, [r7, #6]
 80049e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	88fa      	ldrh	r2, [r7, #6]
 80049ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a0e:	d90b      	bls.n	8004a28 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a1e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4a22      	ldr	r2, [pc, #136]	; (8004aac <HAL_SPI_Receive_IT+0x158>)
 8004a24:	64da      	str	r2, [r3, #76]	; 0x4c
 8004a26:	e00a      	b.n	8004a3e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	685a      	ldr	r2, [r3, #4]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a36:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	4a1d      	ldr	r2, [pc, #116]	; (8004ab0 <HAL_SPI_Receive_IT+0x15c>)
 8004a3c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a46:	d10f      	bne.n	8004a68 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a66:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8004a76:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a82:	2b40      	cmp	r3, #64	; 0x40
 8004a84:	d008      	beq.n	8004a98 <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a94:	601a      	str	r2, [r3, #0]
 8004a96:	e000      	b.n	8004a9a <HAL_SPI_Receive_IT+0x146>
  }

error :
 8004a98:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004aa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3718      	adds	r7, #24
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	080050cd 	.word	0x080050cd
 8004ab0:	0800507d 	.word	0x0800507d

08004ab4 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b087      	sub	sp, #28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
 8004ac0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_SPI_TransmitReceive_IT+0x20>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e091      	b.n	8004bf8 <HAL_SPI_TransmitReceive_IT+0x144>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004ae2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004aea:	7dbb      	ldrb	r3, [r7, #22]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d00d      	beq.n	8004b0c <HAL_SPI_TransmitReceive_IT+0x58>
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004af6:	d106      	bne.n	8004b06 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d102      	bne.n	8004b06 <HAL_SPI_TransmitReceive_IT+0x52>
 8004b00:	7dbb      	ldrb	r3, [r7, #22]
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d002      	beq.n	8004b0c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8004b06:	2302      	movs	r3, #2
 8004b08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b0a:	e070      	b.n	8004bee <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d005      	beq.n	8004b1e <HAL_SPI_TransmitReceive_IT+0x6a>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d002      	beq.n	8004b1e <HAL_SPI_TransmitReceive_IT+0x6a>
 8004b18:	887b      	ldrh	r3, [r7, #2]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d102      	bne.n	8004b24 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b22:	e064      	b.n	8004bee <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d003      	beq.n	8004b38 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2205      	movs	r2, #5
 8004b34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	887a      	ldrh	r2, [r7, #2]
 8004b48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	887a      	ldrh	r2, [r7, #2]
 8004b4e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	887a      	ldrh	r2, [r7, #2]
 8004b5a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	887a      	ldrh	r2, [r7, #2]
 8004b62:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b6e:	d906      	bls.n	8004b7e <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4a24      	ldr	r2, [pc, #144]	; (8004c04 <HAL_SPI_TransmitReceive_IT+0x150>)
 8004b74:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4a23      	ldr	r2, [pc, #140]	; (8004c08 <HAL_SPI_TransmitReceive_IT+0x154>)
 8004b7a:	651a      	str	r2, [r3, #80]	; 0x50
 8004b7c:	e005      	b.n	8004b8a <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	4a22      	ldr	r2, [pc, #136]	; (8004c0c <HAL_SPI_TransmitReceive_IT+0x158>)
 8004b82:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	4a22      	ldr	r2, [pc, #136]	; (8004c10 <HAL_SPI_TransmitReceive_IT+0x15c>)
 8004b88:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b92:	d802      	bhi.n	8004b9a <HAL_SPI_TransmitReceive_IT+0xe6>
 8004b94:	887b      	ldrh	r3, [r7, #2]
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d908      	bls.n	8004bac <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ba8:	605a      	str	r2, [r3, #4]
 8004baa:	e007      	b.n	8004bbc <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bba:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8004bca:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bd6:	2b40      	cmp	r3, #64	; 0x40
 8004bd8:	d008      	beq.n	8004bec <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004be8:	601a      	str	r2, [r3, #0]
 8004bea:	e000      	b.n	8004bee <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8004bec:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	371c      	adds	r7, #28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	08004fb7 	.word	0x08004fb7
 8004c08:	0800501d 	.word	0x0800501d
 8004c0c:	08004e67 	.word	0x08004e67
 8004c10:	08004f25 	.word	0x08004f25

08004c14 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b088      	sub	sp, #32
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	099b      	lsrs	r3, r3, #6
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d10f      	bne.n	8004c58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	099b      	lsrs	r3, r3, #6
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d004      	beq.n	8004c58 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	4798      	blx	r3
    return;
 8004c56:	e0d7      	b.n	8004e08 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	085b      	lsrs	r3, r3, #1
 8004c5c:	f003 0301 	and.w	r3, r3, #1
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <HAL_SPI_IRQHandler+0x66>
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	09db      	lsrs	r3, r3, #7
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d004      	beq.n	8004c7a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	4798      	blx	r3
    return;
 8004c78:	e0c6      	b.n	8004e08 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	095b      	lsrs	r3, r3, #5
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10c      	bne.n	8004ca0 <HAL_SPI_IRQHandler+0x8c>
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	099b      	lsrs	r3, r3, #6
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	0a1b      	lsrs	r3, r3, #8
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 80b4 	beq.w	8004e08 <HAL_SPI_IRQHandler+0x1f4>
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 80ad 	beq.w	8004e08 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004cae:	69bb      	ldr	r3, [r7, #24]
 8004cb0:	099b      	lsrs	r3, r3, #6
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d023      	beq.n	8004d02 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b03      	cmp	r3, #3
 8004cc4:	d011      	beq.n	8004cea <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cca:	f043 0204 	orr.w	r2, r3, #4
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	617b      	str	r3, [r7, #20]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	e00b      	b.n	8004d02 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	613b      	str	r3, [r7, #16]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	613b      	str	r3, [r7, #16]
 8004cfe:	693b      	ldr	r3, [r7, #16]
        return;
 8004d00:	e082      	b.n	8004e08 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	095b      	lsrs	r3, r3, #5
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d014      	beq.n	8004d38 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d12:	f043 0201 	orr.w	r2, r3, #1
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	0a1b      	lsrs	r3, r3, #8
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00c      	beq.n	8004d5e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d48:	f043 0208 	orr.w	r2, r3, #8
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004d50:	2300      	movs	r3, #0
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d04f      	beq.n	8004e06 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685a      	ldr	r2, [r3, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d74:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d104      	bne.n	8004d92 <HAL_SPI_IRQHandler+0x17e>
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d034      	beq.n	8004dfc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 0203 	bic.w	r2, r2, #3
 8004da0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d011      	beq.n	8004dce <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dae:	4a18      	ldr	r2, [pc, #96]	; (8004e10 <HAL_SPI_IRQHandler+0x1fc>)
 8004db0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fd fb83 	bl	80024c2 <HAL_DMA_Abort_IT>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d016      	beq.n	8004e04 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dda:	4a0d      	ldr	r2, [pc, #52]	; (8004e10 <HAL_SPI_IRQHandler+0x1fc>)
 8004ddc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fd fb6d 	bl	80024c2 <HAL_DMA_Abort_IT>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8004dfa:	e003      	b.n	8004e04 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f000 f813 	bl	8004e28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004e02:	e000      	b.n	8004e06 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004e04:	bf00      	nop
    return;
 8004e06:	bf00      	nop
  }
}
 8004e08:	3720      	adds	r7, #32
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	08004e3d 	.word	0x08004e3d

08004e14 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004e14:	b480      	push	{r7}
 8004e16:	b083      	sub	sp, #12
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004e1c:	bf00      	nop
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b083      	sub	sp, #12
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004e30:	bf00      	nop
 8004e32:	370c      	adds	r7, #12
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e48:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f7ff ffe5 	bl	8004e28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004e5e:	bf00      	nop
 8004e60:	3710      	adds	r7, #16
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004e66:	b580      	push	{r7, lr}
 8004e68:	b082      	sub	sp, #8
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d923      	bls.n	8004ec2 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e84:	b292      	uxth	r2, r2
 8004e86:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	1c9a      	adds	r2, r3, #2
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b02      	subs	r3, #2
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d11f      	bne.n	8004ef0 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685a      	ldr	r2, [r3, #4]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ebe:	605a      	str	r2, [r3, #4]
 8004ec0:	e016      	b.n	8004ef0 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f103 020c 	add.w	r2, r3, #12
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	7812      	ldrb	r2, [r2, #0]
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed8:	1c5a      	adds	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10f      	bne.n	8004f1c <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685a      	ldr	r2, [r3, #4]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f0a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d102      	bne.n	8004f1c <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fb02 	bl	8005520 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004f1c:	bf00      	nop
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b082      	sub	sp, #8
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d912      	bls.n	8004f5c <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f3a:	881a      	ldrh	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f46:	1c9a      	adds	r2, r3, #2
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	3b02      	subs	r3, #2
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f5a:	e012      	b.n	8004f82 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	330c      	adds	r3, #12
 8004f66:	7812      	ldrb	r2, [r2, #0]
 8004f68:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6e:	1c5a      	adds	r2, r3, #1
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d110      	bne.n	8004fae <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f9a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d102      	bne.n	8004fae <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f000 fab9 	bl	8005520 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004fae:	bf00      	nop
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b082      	sub	sp, #8
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc8:	b292      	uxth	r2, r2
 8004fca:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	1c9a      	adds	r2, r3, #2
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d10f      	bne.n	8005014 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005002:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d102      	bne.n	8005014 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 fa86 	bl	8005520 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005014:	bf00      	nop
 8005016:	3708      	adds	r7, #8
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005028:	881a      	ldrh	r2, [r3, #0]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	1c9a      	adds	r2, r3, #2
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800503e:	b29b      	uxth	r3, r3
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800504c:	b29b      	uxth	r3, r3
 800504e:	2b00      	cmp	r3, #0
 8005050:	d110      	bne.n	8005074 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005060:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005068:	b29b      	uxth	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d102      	bne.n	8005074 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fa56 	bl	8005520 <SPI_CloseRxTx_ISR>
    }
  }
}
 8005074:	bf00      	nop
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b082      	sub	sp, #8
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f103 020c 	add.w	r2, r3, #12
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	7812      	ldrb	r2, [r2, #0]
 8005092:	b2d2      	uxtb	r2, r2
 8005094:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	1c5a      	adds	r2, r3, #1
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d102      	bne.n	80050c4 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 fa70 	bl	80055a4 <SPI_CloseRx_ISR>
  }
}
 80050c4:	bf00      	nop
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	b292      	uxth	r2, r2
 80050e0:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e6:	1c9a      	adds	r2, r3, #2
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	3b01      	subs	r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005104:	b29b      	uxth	r3, r3
 8005106:	2b00      	cmp	r3, #0
 8005108:	d102      	bne.n	8005110 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fa4a 	bl	80055a4 <SPI_CloseRx_ISR>
  }
}
 8005110:	bf00      	nop
 8005112:	3708      	adds	r7, #8
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b088      	sub	sp, #32
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	603b      	str	r3, [r7, #0]
 8005124:	4613      	mov	r3, r2
 8005126:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005128:	f7fd f88a 	bl	8002240 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005130:	1a9b      	subs	r3, r3, r2
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	4413      	add	r3, r2
 8005136:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005138:	f7fd f882 	bl	8002240 <HAL_GetTick>
 800513c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800513e:	4b39      	ldr	r3, [pc, #228]	; (8005224 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	015b      	lsls	r3, r3, #5
 8005144:	0d1b      	lsrs	r3, r3, #20
 8005146:	69fa      	ldr	r2, [r7, #28]
 8005148:	fb02 f303 	mul.w	r3, r2, r3
 800514c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800514e:	e054      	b.n	80051fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005156:	d050      	beq.n	80051fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005158:	f7fd f872 	bl	8002240 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	69fa      	ldr	r2, [r7, #28]
 8005164:	429a      	cmp	r2, r3
 8005166:	d902      	bls.n	800516e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d13d      	bne.n	80051ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800517c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005186:	d111      	bne.n	80051ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005190:	d004      	beq.n	800519c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800519a:	d107      	bne.n	80051ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051b4:	d10f      	bne.n	80051d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e017      	b.n	800521a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	689a      	ldr	r2, [r3, #8]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	4013      	ands	r3, r2
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	429a      	cmp	r2, r3
 8005208:	bf0c      	ite	eq
 800520a:	2301      	moveq	r3, #1
 800520c:	2300      	movne	r3, #0
 800520e:	b2db      	uxtb	r3, r3
 8005210:	461a      	mov	r2, r3
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	429a      	cmp	r2, r3
 8005216:	d19b      	bne.n	8005150 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3720      	adds	r7, #32
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	20000004 	.word	0x20000004

08005228 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b08a      	sub	sp, #40	; 0x28
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
 8005234:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005236:	2300      	movs	r3, #0
 8005238:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800523a:	f7fd f801 	bl	8002240 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	1a9b      	subs	r3, r3, r2
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	4413      	add	r3, r2
 8005248:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800524a:	f7fc fff9 	bl	8002240 <HAL_GetTick>
 800524e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005258:	4b3d      	ldr	r3, [pc, #244]	; (8005350 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	4613      	mov	r3, r2
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4413      	add	r3, r2
 8005262:	00da      	lsls	r2, r3, #3
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	0d1b      	lsrs	r3, r3, #20
 8005268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526a:	fb02 f303 	mul.w	r3, r2, r3
 800526e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005270:	e060      	b.n	8005334 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005278:	d107      	bne.n	800528a <SPI_WaitFifoStateUntilTimeout+0x62>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d104      	bne.n	800528a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	b2db      	uxtb	r3, r3
 8005286:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005288:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005290:	d050      	beq.n	8005334 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005292:	f7fc ffd5 	bl	8002240 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800529e:	429a      	cmp	r2, r3
 80052a0:	d902      	bls.n	80052a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d13d      	bne.n	8005324 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80052b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052c0:	d111      	bne.n	80052e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ca:	d004      	beq.n	80052d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052d4:	d107      	bne.n	80052e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ee:	d10f      	bne.n	8005310 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800530e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e010      	b.n	8005346 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800532a:	2300      	movs	r3, #0
 800532c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	3b01      	subs	r3, #1
 8005332:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	4013      	ands	r3, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	429a      	cmp	r2, r3
 8005342:	d196      	bne.n	8005272 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3728      	adds	r7, #40	; 0x28
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20000004 	.word	0x20000004

08005354 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b088      	sub	sp, #32
 8005358:	af02      	add	r7, sp, #8
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005368:	d111      	bne.n	800538e <SPI_EndRxTransaction+0x3a>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005372:	d004      	beq.n	800537e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800537c:	d107      	bne.n	800538e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800538c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005396:	d112      	bne.n	80053be <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	9300      	str	r3, [sp, #0]
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	2200      	movs	r2, #0
 80053a0:	2180      	movs	r1, #128	; 0x80
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f7ff feb8 	bl	8005118 <SPI_WaitFlagStateUntilTimeout>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d021      	beq.n	80053f2 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053b2:	f043 0220 	orr.w	r2, r3, #32
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e03d      	b.n	800543a <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80053be:	4b21      	ldr	r3, [pc, #132]	; (8005444 <SPI_EndRxTransaction+0xf0>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a21      	ldr	r2, [pc, #132]	; (8005448 <SPI_EndRxTransaction+0xf4>)
 80053c4:	fba2 2303 	umull	r2, r3, r2, r3
 80053c8:	0d5b      	lsrs	r3, r3, #21
 80053ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80053ce:	fb02 f303 	mul.w	r3, r2, r3
 80053d2:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	3b01      	subs	r3, #1
 80053de:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ea:	2b80      	cmp	r3, #128	; 0x80
 80053ec:	d0f2      	beq.n	80053d4 <SPI_EndRxTransaction+0x80>
 80053ee:	e000      	b.n	80053f2 <SPI_EndRxTransaction+0x9e>
        break;
 80053f0:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053fa:	d11d      	bne.n	8005438 <SPI_EndRxTransaction+0xe4>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005404:	d004      	beq.n	8005410 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800540e:	d113      	bne.n	8005438 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	2200      	movs	r2, #0
 8005418:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f7ff ff03 	bl	8005228 <SPI_WaitFifoStateUntilTimeout>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d007      	beq.n	8005438 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800542c:	f043 0220 	orr.w	r2, r3, #32
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e000      	b.n	800543a <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
 8005442:	bf00      	nop
 8005444:	20000004 	.word	0x20000004
 8005448:	165e9f81 	.word	0x165e9f81

0800544c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b088      	sub	sp, #32
 8005450:	af02      	add	r7, sp, #8
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	2200      	movs	r2, #0
 8005460:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f7ff fedf 	bl	8005228 <SPI_WaitFifoStateUntilTimeout>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d007      	beq.n	8005480 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005474:	f043 0220 	orr.w	r2, r3, #32
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e046      	b.n	800550e <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005480:	4b25      	ldr	r3, [pc, #148]	; (8005518 <SPI_EndRxTxTransaction+0xcc>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a25      	ldr	r2, [pc, #148]	; (800551c <SPI_EndRxTxTransaction+0xd0>)
 8005486:	fba2 2303 	umull	r2, r3, r2, r3
 800548a:	0d5b      	lsrs	r3, r3, #21
 800548c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005490:	fb02 f303 	mul.w	r3, r2, r3
 8005494:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800549e:	d112      	bne.n	80054c6 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2200      	movs	r2, #0
 80054a8:	2180      	movs	r1, #128	; 0x80
 80054aa:	68f8      	ldr	r0, [r7, #12]
 80054ac:	f7ff fe34 	bl	8005118 <SPI_WaitFlagStateUntilTimeout>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d016      	beq.n	80054e4 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ba:	f043 0220 	orr.w	r2, r3, #32
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e023      	b.n	800550e <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054dc:	2b80      	cmp	r3, #128	; 0x80
 80054de:	d0f2      	beq.n	80054c6 <SPI_EndRxTxTransaction+0x7a>
 80054e0:	e000      	b.n	80054e4 <SPI_EndRxTxTransaction+0x98>
        break;
 80054e2:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f7ff fe99 	bl	8005228 <SPI_WaitFifoStateUntilTimeout>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d007      	beq.n	800550c <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005500:	f043 0220 	orr.w	r2, r3, #32
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e000      	b.n	800550e <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3718      	adds	r7, #24
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	20000004 	.word	0x20000004
 800551c:	165e9f81 	.word	0x165e9f81

08005520 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005528:	f7fc fe8a 	bl	8002240 <HAL_GetTick>
 800552c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f022 0220 	bic.w	r2, r2, #32
 800553c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	2164      	movs	r1, #100	; 0x64
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff ff82 	bl	800544c <SPI_EndRxTxTransaction>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d005      	beq.n	800555a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005552:	f043 0220 	orr.w	r2, r3, #32
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800555e:	2b00      	cmp	r3, #0
 8005560:	d115      	bne.n	800558e <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b04      	cmp	r3, #4
 800556c:	d107      	bne.n	800557e <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7fc fa30 	bl	80019dc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800557c:	e00e      	b.n	800559c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f7ff fc44 	bl	8004e14 <HAL_SPI_TxRxCpltCallback>
}
 800558c:	e006      	b.n	800559c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7ff fc46 	bl	8004e28 <HAL_SPI_ErrorCallback>
}
 800559c:	bf00      	nop
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055ba:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80055bc:	f7fc fe40 	bl	8002240 <HAL_GetTick>
 80055c0:	4603      	mov	r3, r0
 80055c2:	461a      	mov	r2, r3
 80055c4:	2164      	movs	r1, #100	; 0x64
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7ff fec4 	bl	8005354 <SPI_EndRxTransaction>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d6:	f043 0220 	orr.w	r2, r3, #32
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d103      	bne.n	80055f6 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7fc f9f4 	bl	80019dc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80055f4:	e002      	b.n	80055fc <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff fc16 	bl	8004e28 <HAL_SPI_ErrorCallback>
}
 80055fc:	bf00      	nop
 80055fe:	3708      	adds	r7, #8
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e040      	b.n	8005698 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fc fc0e 	bl	8001e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2224      	movs	r2, #36	; 0x24
 8005630:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0201 	bic.w	r2, r2, #1
 8005640:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f990 	bl	8005968 <UART_SetConfig>
 8005648:	4603      	mov	r3, r0
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e022      	b.n	8005698 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005656:	2b00      	cmp	r3, #0
 8005658:	d002      	beq.n	8005660 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fbe6 	bl	8005e2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	685a      	ldr	r2, [r3, #4]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800566e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689a      	ldr	r2, [r3, #8]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800567e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0201 	orr.w	r2, r2, #1
 800568e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fc6d 	bl	8005f70 <UART_CheckIdleState>
 8005696:	4603      	mov	r3, r0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08a      	sub	sp, #40	; 0x28
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	603b      	str	r3, [r7, #0]
 80056ac:	4613      	mov	r3, r2
 80056ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056b4:	2b20      	cmp	r3, #32
 80056b6:	f040 8081 	bne.w	80057bc <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <HAL_UART_Transmit+0x26>
 80056c0:	88fb      	ldrh	r3, [r7, #6]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e079      	b.n	80057be <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_UART_Transmit+0x38>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e072      	b.n	80057be <HAL_UART_Transmit+0x11e>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2221      	movs	r2, #33	; 0x21
 80056ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80056ee:	f7fc fda7 	bl	8002240 <HAL_GetTick>
 80056f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	88fa      	ldrh	r2, [r7, #6]
 80056f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	88fa      	ldrh	r2, [r7, #6]
 8005700:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800570c:	d108      	bne.n	8005720 <HAL_UART_Transmit+0x80>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	691b      	ldr	r3, [r3, #16]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d104      	bne.n	8005720 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005716:	2300      	movs	r3, #0
 8005718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	e003      	b.n	8005728 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005724:	2300      	movs	r3, #0
 8005726:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005730:	e02c      	b.n	800578c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2200      	movs	r2, #0
 800573a:	2180      	movs	r1, #128	; 0x80
 800573c:	68f8      	ldr	r0, [r7, #12]
 800573e:	f000 fc60 	bl	8006002 <UART_WaitOnFlagUntilTimeout>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e038      	b.n	80057be <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10b      	bne.n	800576a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005752:	69bb      	ldr	r3, [r7, #24]
 8005754:	881b      	ldrh	r3, [r3, #0]
 8005756:	461a      	mov	r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005760:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	3302      	adds	r3, #2
 8005766:	61bb      	str	r3, [r7, #24]
 8005768:	e007      	b.n	800577a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	781a      	ldrb	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	3301      	adds	r3, #1
 8005778:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005780:	b29b      	uxth	r3, r3
 8005782:	3b01      	subs	r3, #1
 8005784:	b29a      	uxth	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005792:	b29b      	uxth	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1cc      	bne.n	8005732 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	9300      	str	r3, [sp, #0]
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2200      	movs	r2, #0
 80057a0:	2140      	movs	r1, #64	; 0x40
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 fc2d 	bl	8006002 <UART_WaitOnFlagUntilTimeout>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d001      	beq.n	80057b2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e005      	b.n	80057be <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2220      	movs	r2, #32
 80057b6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80057b8:	2300      	movs	r3, #0
 80057ba:	e000      	b.n	80057be <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80057bc:	2302      	movs	r3, #2
  }
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3720      	adds	r7, #32
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b08a      	sub	sp, #40	; 0x28
 80057ca:	af02      	add	r7, sp, #8
 80057cc:	60f8      	str	r0, [r7, #12]
 80057ce:	60b9      	str	r1, [r7, #8]
 80057d0:	603b      	str	r3, [r7, #0]
 80057d2:	4613      	mov	r3, r2
 80057d4:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057da:	2b20      	cmp	r3, #32
 80057dc:	f040 80be 	bne.w	800595c <HAL_UART_Receive+0x196>
  {
    if ((pData == NULL) || (Size == 0U))
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <HAL_UART_Receive+0x26>
 80057e6:	88fb      	ldrh	r3, [r7, #6]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d101      	bne.n	80057f0 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e0b6      	b.n	800595e <HAL_UART_Receive+0x198>
    }

    __HAL_LOCK(huart);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d101      	bne.n	80057fe <HAL_UART_Receive+0x38>
 80057fa:	2302      	movs	r3, #2
 80057fc:	e0af      	b.n	800595e <HAL_UART_Receive+0x198>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2201      	movs	r2, #1
 8005802:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	2200      	movs	r2, #0
 800580a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	2222      	movs	r2, #34	; 0x22
 8005812:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800581a:	f7fc fd11 	bl	8002240 <HAL_GetTick>
 800581e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	88fa      	ldrh	r2, [r7, #6]
 8005824:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	88fa      	ldrh	r2, [r7, #6]
 800582c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005838:	d10e      	bne.n	8005858 <HAL_UART_Receive+0x92>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d105      	bne.n	800584e <HAL_UART_Receive+0x88>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005848:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800584c:	e02d      	b.n	80058aa <HAL_UART_Receive+0xe4>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	22ff      	movs	r2, #255	; 0xff
 8005852:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005856:	e028      	b.n	80058aa <HAL_UART_Receive+0xe4>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10d      	bne.n	800587c <HAL_UART_Receive+0xb6>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d104      	bne.n	8005872 <HAL_UART_Receive+0xac>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	22ff      	movs	r2, #255	; 0xff
 800586c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005870:	e01b      	b.n	80058aa <HAL_UART_Receive+0xe4>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	227f      	movs	r2, #127	; 0x7f
 8005876:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800587a:	e016      	b.n	80058aa <HAL_UART_Receive+0xe4>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005884:	d10d      	bne.n	80058a2 <HAL_UART_Receive+0xdc>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d104      	bne.n	8005898 <HAL_UART_Receive+0xd2>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	227f      	movs	r2, #127	; 0x7f
 8005892:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005896:	e008      	b.n	80058aa <HAL_UART_Receive+0xe4>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	223f      	movs	r2, #63	; 0x3f
 800589c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80058a0:	e003      	b.n	80058aa <HAL_UART_Receive+0xe4>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058b0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058ba:	d108      	bne.n	80058ce <HAL_UART_Receive+0x108>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d104      	bne.n	80058ce <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80058c4:	2300      	movs	r3, #0
 80058c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	61bb      	str	r3, [r7, #24]
 80058cc:	e003      	b.n	80058d6 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80058de:	e032      	b.n	8005946 <HAL_UART_Receive+0x180>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	9300      	str	r3, [sp, #0]
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	2200      	movs	r2, #0
 80058e8:	2120      	movs	r1, #32
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 fb89 	bl	8006002 <UART_WaitOnFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e031      	b.n	800595e <HAL_UART_Receive+0x198>
      }
      if (pdata8bits == NULL)
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10c      	bne.n	800591a <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	b29a      	uxth	r2, r3
 8005908:	8a7b      	ldrh	r3, [r7, #18]
 800590a:	4013      	ands	r3, r2
 800590c:	b29a      	uxth	r2, r3
 800590e:	69bb      	ldr	r3, [r7, #24]
 8005910:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	3302      	adds	r3, #2
 8005916:	61bb      	str	r3, [r7, #24]
 8005918:	e00c      	b.n	8005934 <HAL_UART_Receive+0x16e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005920:	b2da      	uxtb	r2, r3
 8005922:	8a7b      	ldrh	r3, [r7, #18]
 8005924:	b2db      	uxtb	r3, r3
 8005926:	4013      	ands	r3, r2
 8005928:	b2da      	uxtb	r2, r3
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	3301      	adds	r3, #1
 8005932:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800593a:	b29b      	uxth	r3, r3
 800593c:	3b01      	subs	r3, #1
 800593e:	b29a      	uxth	r2, r3
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1c6      	bne.n	80058e0 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2220      	movs	r2, #32
 8005956:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	e000      	b.n	800595e <HAL_UART_Receive+0x198>
  }
  else
  {
    return HAL_BUSY;
 800595c:	2302      	movs	r3, #2
  }
}
 800595e:	4618      	mov	r0, r3
 8005960:	3720      	adds	r7, #32
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b088      	sub	sp, #32
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005970:	2300      	movs	r3, #0
 8005972:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	689a      	ldr	r2, [r3, #8]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	431a      	orrs	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	69db      	ldr	r3, [r3, #28]
 8005988:	4313      	orrs	r3, r2
 800598a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	4ba7      	ldr	r3, [pc, #668]	; (8005c30 <UART_SetConfig+0x2c8>)
 8005994:	4013      	ands	r3, r2
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	6812      	ldr	r2, [r2, #0]
 800599a:	6979      	ldr	r1, [r7, #20]
 800599c:	430b      	orrs	r3, r1
 800599e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68da      	ldr	r2, [r3, #12]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	430a      	orrs	r2, r1
 80059b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	697a      	ldr	r2, [r7, #20]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a95      	ldr	r2, [pc, #596]	; (8005c34 <UART_SetConfig+0x2cc>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d120      	bne.n	8005a26 <UART_SetConfig+0xbe>
 80059e4:	4b94      	ldr	r3, [pc, #592]	; (8005c38 <UART_SetConfig+0x2d0>)
 80059e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ea:	f003 0303 	and.w	r3, r3, #3
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	d816      	bhi.n	8005a20 <UART_SetConfig+0xb8>
 80059f2:	a201      	add	r2, pc, #4	; (adr r2, 80059f8 <UART_SetConfig+0x90>)
 80059f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f8:	08005a09 	.word	0x08005a09
 80059fc:	08005a15 	.word	0x08005a15
 8005a00:	08005a0f 	.word	0x08005a0f
 8005a04:	08005a1b 	.word	0x08005a1b
 8005a08:	2301      	movs	r3, #1
 8005a0a:	77fb      	strb	r3, [r7, #31]
 8005a0c:	e14f      	b.n	8005cae <UART_SetConfig+0x346>
 8005a0e:	2302      	movs	r3, #2
 8005a10:	77fb      	strb	r3, [r7, #31]
 8005a12:	e14c      	b.n	8005cae <UART_SetConfig+0x346>
 8005a14:	2304      	movs	r3, #4
 8005a16:	77fb      	strb	r3, [r7, #31]
 8005a18:	e149      	b.n	8005cae <UART_SetConfig+0x346>
 8005a1a:	2308      	movs	r3, #8
 8005a1c:	77fb      	strb	r3, [r7, #31]
 8005a1e:	e146      	b.n	8005cae <UART_SetConfig+0x346>
 8005a20:	2310      	movs	r3, #16
 8005a22:	77fb      	strb	r3, [r7, #31]
 8005a24:	e143      	b.n	8005cae <UART_SetConfig+0x346>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a84      	ldr	r2, [pc, #528]	; (8005c3c <UART_SetConfig+0x2d4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d132      	bne.n	8005a96 <UART_SetConfig+0x12e>
 8005a30:	4b81      	ldr	r3, [pc, #516]	; (8005c38 <UART_SetConfig+0x2d0>)
 8005a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a36:	f003 030c 	and.w	r3, r3, #12
 8005a3a:	2b0c      	cmp	r3, #12
 8005a3c:	d828      	bhi.n	8005a90 <UART_SetConfig+0x128>
 8005a3e:	a201      	add	r2, pc, #4	; (adr r2, 8005a44 <UART_SetConfig+0xdc>)
 8005a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a44:	08005a79 	.word	0x08005a79
 8005a48:	08005a91 	.word	0x08005a91
 8005a4c:	08005a91 	.word	0x08005a91
 8005a50:	08005a91 	.word	0x08005a91
 8005a54:	08005a85 	.word	0x08005a85
 8005a58:	08005a91 	.word	0x08005a91
 8005a5c:	08005a91 	.word	0x08005a91
 8005a60:	08005a91 	.word	0x08005a91
 8005a64:	08005a7f 	.word	0x08005a7f
 8005a68:	08005a91 	.word	0x08005a91
 8005a6c:	08005a91 	.word	0x08005a91
 8005a70:	08005a91 	.word	0x08005a91
 8005a74:	08005a8b 	.word	0x08005a8b
 8005a78:	2300      	movs	r3, #0
 8005a7a:	77fb      	strb	r3, [r7, #31]
 8005a7c:	e117      	b.n	8005cae <UART_SetConfig+0x346>
 8005a7e:	2302      	movs	r3, #2
 8005a80:	77fb      	strb	r3, [r7, #31]
 8005a82:	e114      	b.n	8005cae <UART_SetConfig+0x346>
 8005a84:	2304      	movs	r3, #4
 8005a86:	77fb      	strb	r3, [r7, #31]
 8005a88:	e111      	b.n	8005cae <UART_SetConfig+0x346>
 8005a8a:	2308      	movs	r3, #8
 8005a8c:	77fb      	strb	r3, [r7, #31]
 8005a8e:	e10e      	b.n	8005cae <UART_SetConfig+0x346>
 8005a90:	2310      	movs	r3, #16
 8005a92:	77fb      	strb	r3, [r7, #31]
 8005a94:	e10b      	b.n	8005cae <UART_SetConfig+0x346>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a69      	ldr	r2, [pc, #420]	; (8005c40 <UART_SetConfig+0x2d8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d120      	bne.n	8005ae2 <UART_SetConfig+0x17a>
 8005aa0:	4b65      	ldr	r3, [pc, #404]	; (8005c38 <UART_SetConfig+0x2d0>)
 8005aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005aaa:	2b30      	cmp	r3, #48	; 0x30
 8005aac:	d013      	beq.n	8005ad6 <UART_SetConfig+0x16e>
 8005aae:	2b30      	cmp	r3, #48	; 0x30
 8005ab0:	d814      	bhi.n	8005adc <UART_SetConfig+0x174>
 8005ab2:	2b20      	cmp	r3, #32
 8005ab4:	d009      	beq.n	8005aca <UART_SetConfig+0x162>
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	d810      	bhi.n	8005adc <UART_SetConfig+0x174>
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d002      	beq.n	8005ac4 <UART_SetConfig+0x15c>
 8005abe:	2b10      	cmp	r3, #16
 8005ac0:	d006      	beq.n	8005ad0 <UART_SetConfig+0x168>
 8005ac2:	e00b      	b.n	8005adc <UART_SetConfig+0x174>
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	77fb      	strb	r3, [r7, #31]
 8005ac8:	e0f1      	b.n	8005cae <UART_SetConfig+0x346>
 8005aca:	2302      	movs	r3, #2
 8005acc:	77fb      	strb	r3, [r7, #31]
 8005ace:	e0ee      	b.n	8005cae <UART_SetConfig+0x346>
 8005ad0:	2304      	movs	r3, #4
 8005ad2:	77fb      	strb	r3, [r7, #31]
 8005ad4:	e0eb      	b.n	8005cae <UART_SetConfig+0x346>
 8005ad6:	2308      	movs	r3, #8
 8005ad8:	77fb      	strb	r3, [r7, #31]
 8005ada:	e0e8      	b.n	8005cae <UART_SetConfig+0x346>
 8005adc:	2310      	movs	r3, #16
 8005ade:	77fb      	strb	r3, [r7, #31]
 8005ae0:	e0e5      	b.n	8005cae <UART_SetConfig+0x346>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a57      	ldr	r2, [pc, #348]	; (8005c44 <UART_SetConfig+0x2dc>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d120      	bne.n	8005b2e <UART_SetConfig+0x1c6>
 8005aec:	4b52      	ldr	r3, [pc, #328]	; (8005c38 <UART_SetConfig+0x2d0>)
 8005aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005af6:	2bc0      	cmp	r3, #192	; 0xc0
 8005af8:	d013      	beq.n	8005b22 <UART_SetConfig+0x1ba>
 8005afa:	2bc0      	cmp	r3, #192	; 0xc0
 8005afc:	d814      	bhi.n	8005b28 <UART_SetConfig+0x1c0>
 8005afe:	2b80      	cmp	r3, #128	; 0x80
 8005b00:	d009      	beq.n	8005b16 <UART_SetConfig+0x1ae>
 8005b02:	2b80      	cmp	r3, #128	; 0x80
 8005b04:	d810      	bhi.n	8005b28 <UART_SetConfig+0x1c0>
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <UART_SetConfig+0x1a8>
 8005b0a:	2b40      	cmp	r3, #64	; 0x40
 8005b0c:	d006      	beq.n	8005b1c <UART_SetConfig+0x1b4>
 8005b0e:	e00b      	b.n	8005b28 <UART_SetConfig+0x1c0>
 8005b10:	2300      	movs	r3, #0
 8005b12:	77fb      	strb	r3, [r7, #31]
 8005b14:	e0cb      	b.n	8005cae <UART_SetConfig+0x346>
 8005b16:	2302      	movs	r3, #2
 8005b18:	77fb      	strb	r3, [r7, #31]
 8005b1a:	e0c8      	b.n	8005cae <UART_SetConfig+0x346>
 8005b1c:	2304      	movs	r3, #4
 8005b1e:	77fb      	strb	r3, [r7, #31]
 8005b20:	e0c5      	b.n	8005cae <UART_SetConfig+0x346>
 8005b22:	2308      	movs	r3, #8
 8005b24:	77fb      	strb	r3, [r7, #31]
 8005b26:	e0c2      	b.n	8005cae <UART_SetConfig+0x346>
 8005b28:	2310      	movs	r3, #16
 8005b2a:	77fb      	strb	r3, [r7, #31]
 8005b2c:	e0bf      	b.n	8005cae <UART_SetConfig+0x346>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a45      	ldr	r2, [pc, #276]	; (8005c48 <UART_SetConfig+0x2e0>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d125      	bne.n	8005b84 <UART_SetConfig+0x21c>
 8005b38:	4b3f      	ldr	r3, [pc, #252]	; (8005c38 <UART_SetConfig+0x2d0>)
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b46:	d017      	beq.n	8005b78 <UART_SetConfig+0x210>
 8005b48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b4c:	d817      	bhi.n	8005b7e <UART_SetConfig+0x216>
 8005b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b52:	d00b      	beq.n	8005b6c <UART_SetConfig+0x204>
 8005b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b58:	d811      	bhi.n	8005b7e <UART_SetConfig+0x216>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <UART_SetConfig+0x1fe>
 8005b5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b62:	d006      	beq.n	8005b72 <UART_SetConfig+0x20a>
 8005b64:	e00b      	b.n	8005b7e <UART_SetConfig+0x216>
 8005b66:	2300      	movs	r3, #0
 8005b68:	77fb      	strb	r3, [r7, #31]
 8005b6a:	e0a0      	b.n	8005cae <UART_SetConfig+0x346>
 8005b6c:	2302      	movs	r3, #2
 8005b6e:	77fb      	strb	r3, [r7, #31]
 8005b70:	e09d      	b.n	8005cae <UART_SetConfig+0x346>
 8005b72:	2304      	movs	r3, #4
 8005b74:	77fb      	strb	r3, [r7, #31]
 8005b76:	e09a      	b.n	8005cae <UART_SetConfig+0x346>
 8005b78:	2308      	movs	r3, #8
 8005b7a:	77fb      	strb	r3, [r7, #31]
 8005b7c:	e097      	b.n	8005cae <UART_SetConfig+0x346>
 8005b7e:	2310      	movs	r3, #16
 8005b80:	77fb      	strb	r3, [r7, #31]
 8005b82:	e094      	b.n	8005cae <UART_SetConfig+0x346>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a30      	ldr	r2, [pc, #192]	; (8005c4c <UART_SetConfig+0x2e4>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d125      	bne.n	8005bda <UART_SetConfig+0x272>
 8005b8e:	4b2a      	ldr	r3, [pc, #168]	; (8005c38 <UART_SetConfig+0x2d0>)
 8005b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b9c:	d017      	beq.n	8005bce <UART_SetConfig+0x266>
 8005b9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ba2:	d817      	bhi.n	8005bd4 <UART_SetConfig+0x26c>
 8005ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ba8:	d00b      	beq.n	8005bc2 <UART_SetConfig+0x25a>
 8005baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bae:	d811      	bhi.n	8005bd4 <UART_SetConfig+0x26c>
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <UART_SetConfig+0x254>
 8005bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb8:	d006      	beq.n	8005bc8 <UART_SetConfig+0x260>
 8005bba:	e00b      	b.n	8005bd4 <UART_SetConfig+0x26c>
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	77fb      	strb	r3, [r7, #31]
 8005bc0:	e075      	b.n	8005cae <UART_SetConfig+0x346>
 8005bc2:	2302      	movs	r3, #2
 8005bc4:	77fb      	strb	r3, [r7, #31]
 8005bc6:	e072      	b.n	8005cae <UART_SetConfig+0x346>
 8005bc8:	2304      	movs	r3, #4
 8005bca:	77fb      	strb	r3, [r7, #31]
 8005bcc:	e06f      	b.n	8005cae <UART_SetConfig+0x346>
 8005bce:	2308      	movs	r3, #8
 8005bd0:	77fb      	strb	r3, [r7, #31]
 8005bd2:	e06c      	b.n	8005cae <UART_SetConfig+0x346>
 8005bd4:	2310      	movs	r3, #16
 8005bd6:	77fb      	strb	r3, [r7, #31]
 8005bd8:	e069      	b.n	8005cae <UART_SetConfig+0x346>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a1c      	ldr	r2, [pc, #112]	; (8005c50 <UART_SetConfig+0x2e8>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d137      	bne.n	8005c54 <UART_SetConfig+0x2ec>
 8005be4:	4b14      	ldr	r3, [pc, #80]	; (8005c38 <UART_SetConfig+0x2d0>)
 8005be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005bee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bf2:	d017      	beq.n	8005c24 <UART_SetConfig+0x2bc>
 8005bf4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005bf8:	d817      	bhi.n	8005c2a <UART_SetConfig+0x2c2>
 8005bfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bfe:	d00b      	beq.n	8005c18 <UART_SetConfig+0x2b0>
 8005c00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c04:	d811      	bhi.n	8005c2a <UART_SetConfig+0x2c2>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <UART_SetConfig+0x2aa>
 8005c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0e:	d006      	beq.n	8005c1e <UART_SetConfig+0x2b6>
 8005c10:	e00b      	b.n	8005c2a <UART_SetConfig+0x2c2>
 8005c12:	2300      	movs	r3, #0
 8005c14:	77fb      	strb	r3, [r7, #31]
 8005c16:	e04a      	b.n	8005cae <UART_SetConfig+0x346>
 8005c18:	2302      	movs	r3, #2
 8005c1a:	77fb      	strb	r3, [r7, #31]
 8005c1c:	e047      	b.n	8005cae <UART_SetConfig+0x346>
 8005c1e:	2304      	movs	r3, #4
 8005c20:	77fb      	strb	r3, [r7, #31]
 8005c22:	e044      	b.n	8005cae <UART_SetConfig+0x346>
 8005c24:	2308      	movs	r3, #8
 8005c26:	77fb      	strb	r3, [r7, #31]
 8005c28:	e041      	b.n	8005cae <UART_SetConfig+0x346>
 8005c2a:	2310      	movs	r3, #16
 8005c2c:	77fb      	strb	r3, [r7, #31]
 8005c2e:	e03e      	b.n	8005cae <UART_SetConfig+0x346>
 8005c30:	efff69f3 	.word	0xefff69f3
 8005c34:	40011000 	.word	0x40011000
 8005c38:	40023800 	.word	0x40023800
 8005c3c:	40004400 	.word	0x40004400
 8005c40:	40004800 	.word	0x40004800
 8005c44:	40004c00 	.word	0x40004c00
 8005c48:	40005000 	.word	0x40005000
 8005c4c:	40011400 	.word	0x40011400
 8005c50:	40007800 	.word	0x40007800
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a71      	ldr	r2, [pc, #452]	; (8005e20 <UART_SetConfig+0x4b8>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d125      	bne.n	8005caa <UART_SetConfig+0x342>
 8005c5e:	4b71      	ldr	r3, [pc, #452]	; (8005e24 <UART_SetConfig+0x4bc>)
 8005c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c68:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c6c:	d017      	beq.n	8005c9e <UART_SetConfig+0x336>
 8005c6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c72:	d817      	bhi.n	8005ca4 <UART_SetConfig+0x33c>
 8005c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c78:	d00b      	beq.n	8005c92 <UART_SetConfig+0x32a>
 8005c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c7e:	d811      	bhi.n	8005ca4 <UART_SetConfig+0x33c>
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d003      	beq.n	8005c8c <UART_SetConfig+0x324>
 8005c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c88:	d006      	beq.n	8005c98 <UART_SetConfig+0x330>
 8005c8a:	e00b      	b.n	8005ca4 <UART_SetConfig+0x33c>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	77fb      	strb	r3, [r7, #31]
 8005c90:	e00d      	b.n	8005cae <UART_SetConfig+0x346>
 8005c92:	2302      	movs	r3, #2
 8005c94:	77fb      	strb	r3, [r7, #31]
 8005c96:	e00a      	b.n	8005cae <UART_SetConfig+0x346>
 8005c98:	2304      	movs	r3, #4
 8005c9a:	77fb      	strb	r3, [r7, #31]
 8005c9c:	e007      	b.n	8005cae <UART_SetConfig+0x346>
 8005c9e:	2308      	movs	r3, #8
 8005ca0:	77fb      	strb	r3, [r7, #31]
 8005ca2:	e004      	b.n	8005cae <UART_SetConfig+0x346>
 8005ca4:	2310      	movs	r3, #16
 8005ca6:	77fb      	strb	r3, [r7, #31]
 8005ca8:	e001      	b.n	8005cae <UART_SetConfig+0x346>
 8005caa:	2310      	movs	r3, #16
 8005cac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69db      	ldr	r3, [r3, #28]
 8005cb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cb6:	d15a      	bne.n	8005d6e <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8005cb8:	7ffb      	ldrb	r3, [r7, #31]
 8005cba:	2b08      	cmp	r3, #8
 8005cbc:	d827      	bhi.n	8005d0e <UART_SetConfig+0x3a6>
 8005cbe:	a201      	add	r2, pc, #4	; (adr r2, 8005cc4 <UART_SetConfig+0x35c>)
 8005cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc4:	08005ce9 	.word	0x08005ce9
 8005cc8:	08005cf1 	.word	0x08005cf1
 8005ccc:	08005cf9 	.word	0x08005cf9
 8005cd0:	08005d0f 	.word	0x08005d0f
 8005cd4:	08005cff 	.word	0x08005cff
 8005cd8:	08005d0f 	.word	0x08005d0f
 8005cdc:	08005d0f 	.word	0x08005d0f
 8005ce0:	08005d0f 	.word	0x08005d0f
 8005ce4:	08005d07 	.word	0x08005d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ce8:	f7fd ffca 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 8005cec:	61b8      	str	r0, [r7, #24]
        break;
 8005cee:	e013      	b.n	8005d18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cf0:	f7fd ffda 	bl	8003ca8 <HAL_RCC_GetPCLK2Freq>
 8005cf4:	61b8      	str	r0, [r7, #24]
        break;
 8005cf6:	e00f      	b.n	8005d18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cf8:	4b4b      	ldr	r3, [pc, #300]	; (8005e28 <UART_SetConfig+0x4c0>)
 8005cfa:	61bb      	str	r3, [r7, #24]
        break;
 8005cfc:	e00c      	b.n	8005d18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cfe:	f7fd fefd 	bl	8003afc <HAL_RCC_GetSysClockFreq>
 8005d02:	61b8      	str	r0, [r7, #24]
        break;
 8005d04:	e008      	b.n	8005d18 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d0a:	61bb      	str	r3, [r7, #24]
        break;
 8005d0c:	e004      	b.n	8005d18 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	77bb      	strb	r3, [r7, #30]
        break;
 8005d16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d18:	69bb      	ldr	r3, [r7, #24]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d074      	beq.n	8005e08 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	005a      	lsls	r2, r3, #1
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	085b      	lsrs	r3, r3, #1
 8005d28:	441a      	add	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	685b      	ldr	r3, [r3, #4]
 8005d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d32:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	2b0f      	cmp	r3, #15
 8005d38:	d916      	bls.n	8005d68 <UART_SetConfig+0x400>
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d40:	d212      	bcs.n	8005d68 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	f023 030f 	bic.w	r3, r3, #15
 8005d4a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	085b      	lsrs	r3, r3, #1
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	89fb      	ldrh	r3, [r7, #14]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	89fa      	ldrh	r2, [r7, #14]
 8005d64:	60da      	str	r2, [r3, #12]
 8005d66:	e04f      	b.n	8005e08 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	77bb      	strb	r3, [r7, #30]
 8005d6c:	e04c      	b.n	8005e08 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d6e:	7ffb      	ldrb	r3, [r7, #31]
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d828      	bhi.n	8005dc6 <UART_SetConfig+0x45e>
 8005d74:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <UART_SetConfig+0x414>)
 8005d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7a:	bf00      	nop
 8005d7c:	08005da1 	.word	0x08005da1
 8005d80:	08005da9 	.word	0x08005da9
 8005d84:	08005db1 	.word	0x08005db1
 8005d88:	08005dc7 	.word	0x08005dc7
 8005d8c:	08005db7 	.word	0x08005db7
 8005d90:	08005dc7 	.word	0x08005dc7
 8005d94:	08005dc7 	.word	0x08005dc7
 8005d98:	08005dc7 	.word	0x08005dc7
 8005d9c:	08005dbf 	.word	0x08005dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005da0:	f7fd ff6e 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 8005da4:	61b8      	str	r0, [r7, #24]
        break;
 8005da6:	e013      	b.n	8005dd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005da8:	f7fd ff7e 	bl	8003ca8 <HAL_RCC_GetPCLK2Freq>
 8005dac:	61b8      	str	r0, [r7, #24]
        break;
 8005dae:	e00f      	b.n	8005dd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005db0:	4b1d      	ldr	r3, [pc, #116]	; (8005e28 <UART_SetConfig+0x4c0>)
 8005db2:	61bb      	str	r3, [r7, #24]
        break;
 8005db4:	e00c      	b.n	8005dd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005db6:	f7fd fea1 	bl	8003afc <HAL_RCC_GetSysClockFreq>
 8005dba:	61b8      	str	r0, [r7, #24]
        break;
 8005dbc:	e008      	b.n	8005dd0 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dc2:	61bb      	str	r3, [r7, #24]
        break;
 8005dc4:	e004      	b.n	8005dd0 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	77bb      	strb	r3, [r7, #30]
        break;
 8005dce:	bf00      	nop
    }

    if (pclk != 0U)
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d018      	beq.n	8005e08 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	085a      	lsrs	r2, r3, #1
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	441a      	add	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	2b0f      	cmp	r3, #15
 8005dee:	d909      	bls.n	8005e04 <UART_SetConfig+0x49c>
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005df6:	d205      	bcs.n	8005e04 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	60da      	str	r2, [r3, #12]
 8005e02:	e001      	b.n	8005e08 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e14:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3720      	adds	r7, #32
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	40007c00 	.word	0x40007c00
 8005e24:	40023800 	.word	0x40023800
 8005e28:	00f42400 	.word	0x00f42400

08005e2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00a      	beq.n	8005e56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00a      	beq.n	8005e78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	430a      	orrs	r2, r1
 8005e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7c:	f003 0304 	and.w	r3, r3, #4
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00a      	beq.n	8005e9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	f003 0308 	and.w	r3, r3, #8
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	430a      	orrs	r2, r1
 8005eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00a      	beq.n	8005ede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	430a      	orrs	r2, r1
 8005edc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	430a      	orrs	r2, r1
 8005efe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d01a      	beq.n	8005f42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	430a      	orrs	r2, r1
 8005f20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f2a:	d10a      	bne.n	8005f42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00a      	beq.n	8005f64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	605a      	str	r2, [r3, #4]
  }
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f80:	f7fc f95e 	bl	8002240 <HAL_GetTick>
 8005f84:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b08      	cmp	r3, #8
 8005f92:	d10e      	bne.n	8005fb2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f82d 	bl	8006002 <UART_WaitOnFlagUntilTimeout>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d001      	beq.n	8005fb2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fae:	2303      	movs	r3, #3
 8005fb0:	e023      	b.n	8005ffa <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f003 0304 	and.w	r3, r3, #4
 8005fbc:	2b04      	cmp	r3, #4
 8005fbe:	d10e      	bne.n	8005fde <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f817 	bl	8006002 <UART_WaitOnFlagUntilTimeout>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d001      	beq.n	8005fde <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	e00d      	b.n	8005ffa <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2220      	movs	r2, #32
 8005fe2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005ff8:	2300      	movs	r3, #0
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3710      	adds	r7, #16
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}

08006002 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006002:	b580      	push	{r7, lr}
 8006004:	b09c      	sub	sp, #112	; 0x70
 8006006:	af00      	add	r7, sp, #0
 8006008:	60f8      	str	r0, [r7, #12]
 800600a:	60b9      	str	r1, [r7, #8]
 800600c:	603b      	str	r3, [r7, #0]
 800600e:	4613      	mov	r3, r2
 8006010:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006012:	e0a5      	b.n	8006160 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601a:	f000 80a1 	beq.w	8006160 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800601e:	f7fc f90f 	bl	8002240 <HAL_GetTick>
 8006022:	4602      	mov	r2, r0
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	1ad3      	subs	r3, r2, r3
 8006028:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800602a:	429a      	cmp	r2, r3
 800602c:	d302      	bcc.n	8006034 <UART_WaitOnFlagUntilTimeout+0x32>
 800602e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006030:	2b00      	cmp	r3, #0
 8006032:	d13e      	bne.n	80060b2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800603c:	e853 3f00 	ldrex	r3, [r3]
 8006040:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006044:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006048:	667b      	str	r3, [r7, #100]	; 0x64
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006052:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006054:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006056:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006058:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800605a:	e841 2300 	strex	r3, r2, [r1]
 800605e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006060:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1e6      	bne.n	8006034 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3308      	adds	r3, #8
 800606c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006070:	e853 3f00 	ldrex	r3, [r3]
 8006074:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006078:	f023 0301 	bic.w	r3, r3, #1
 800607c:	663b      	str	r3, [r7, #96]	; 0x60
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3308      	adds	r3, #8
 8006084:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006086:	64ba      	str	r2, [r7, #72]	; 0x48
 8006088:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800608c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800608e:	e841 2300 	strex	r3, r2, [r1]
 8006092:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1e5      	bne.n	8006066 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2220      	movs	r2, #32
 800609e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2220      	movs	r2, #32
 80060a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e067      	b.n	8006182 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d04f      	beq.n	8006160 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060ce:	d147      	bne.n	8006160 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	e853 3f00 	ldrex	r3, [r3]
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	461a      	mov	r2, r3
 80060f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f8:	637b      	str	r3, [r7, #52]	; 0x34
 80060fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006100:	e841 2300 	strex	r3, r2, [r1]
 8006104:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1e6      	bne.n	80060da <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3308      	adds	r3, #8
 8006112:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	e853 3f00 	ldrex	r3, [r3]
 800611a:	613b      	str	r3, [r7, #16]
   return(result);
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f023 0301 	bic.w	r3, r3, #1
 8006122:	66bb      	str	r3, [r7, #104]	; 0x68
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	3308      	adds	r3, #8
 800612a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800612c:	623a      	str	r2, [r7, #32]
 800612e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006130:	69f9      	ldr	r1, [r7, #28]
 8006132:	6a3a      	ldr	r2, [r7, #32]
 8006134:	e841 2300 	strex	r3, r2, [r1]
 8006138:	61bb      	str	r3, [r7, #24]
   return(result);
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1e5      	bne.n	800610c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2220      	movs	r2, #32
 8006144:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2220      	movs	r2, #32
 800614a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e010      	b.n	8006182 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	69da      	ldr	r2, [r3, #28]
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	4013      	ands	r3, r2
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	429a      	cmp	r2, r3
 800616e:	bf0c      	ite	eq
 8006170:	2301      	moveq	r3, #1
 8006172:	2300      	movne	r3, #0
 8006174:	b2db      	uxtb	r3, r3
 8006176:	461a      	mov	r2, r3
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	429a      	cmp	r2, r3
 800617c:	f43f af4a 	beq.w	8006014 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3770      	adds	r7, #112	; 0x70
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
	...

0800618c <__errno>:
 800618c:	4b01      	ldr	r3, [pc, #4]	; (8006194 <__errno+0x8>)
 800618e:	6818      	ldr	r0, [r3, #0]
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	20000010 	.word	0x20000010

08006198 <__libc_init_array>:
 8006198:	b570      	push	{r4, r5, r6, lr}
 800619a:	4d0d      	ldr	r5, [pc, #52]	; (80061d0 <__libc_init_array+0x38>)
 800619c:	4c0d      	ldr	r4, [pc, #52]	; (80061d4 <__libc_init_array+0x3c>)
 800619e:	1b64      	subs	r4, r4, r5
 80061a0:	10a4      	asrs	r4, r4, #2
 80061a2:	2600      	movs	r6, #0
 80061a4:	42a6      	cmp	r6, r4
 80061a6:	d109      	bne.n	80061bc <__libc_init_array+0x24>
 80061a8:	4d0b      	ldr	r5, [pc, #44]	; (80061d8 <__libc_init_array+0x40>)
 80061aa:	4c0c      	ldr	r4, [pc, #48]	; (80061dc <__libc_init_array+0x44>)
 80061ac:	f004 fc5e 	bl	800aa6c <_init>
 80061b0:	1b64      	subs	r4, r4, r5
 80061b2:	10a4      	asrs	r4, r4, #2
 80061b4:	2600      	movs	r6, #0
 80061b6:	42a6      	cmp	r6, r4
 80061b8:	d105      	bne.n	80061c6 <__libc_init_array+0x2e>
 80061ba:	bd70      	pop	{r4, r5, r6, pc}
 80061bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80061c0:	4798      	blx	r3
 80061c2:	3601      	adds	r6, #1
 80061c4:	e7ee      	b.n	80061a4 <__libc_init_array+0xc>
 80061c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ca:	4798      	blx	r3
 80061cc:	3601      	adds	r6, #1
 80061ce:	e7f2      	b.n	80061b6 <__libc_init_array+0x1e>
 80061d0:	0800b32c 	.word	0x0800b32c
 80061d4:	0800b32c 	.word	0x0800b32c
 80061d8:	0800b32c 	.word	0x0800b32c
 80061dc:	0800b330 	.word	0x0800b330

080061e0 <memset>:
 80061e0:	4402      	add	r2, r0
 80061e2:	4603      	mov	r3, r0
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d100      	bne.n	80061ea <memset+0xa>
 80061e8:	4770      	bx	lr
 80061ea:	f803 1b01 	strb.w	r1, [r3], #1
 80061ee:	e7f9      	b.n	80061e4 <memset+0x4>

080061f0 <__cvt>:
 80061f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061f2:	ed2d 8b02 	vpush	{d8}
 80061f6:	eeb0 8b40 	vmov.f64	d8, d0
 80061fa:	b085      	sub	sp, #20
 80061fc:	4617      	mov	r7, r2
 80061fe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006200:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8006202:	ee18 2a90 	vmov	r2, s17
 8006206:	f025 0520 	bic.w	r5, r5, #32
 800620a:	2a00      	cmp	r2, #0
 800620c:	bfb6      	itet	lt
 800620e:	222d      	movlt	r2, #45	; 0x2d
 8006210:	2200      	movge	r2, #0
 8006212:	eeb1 8b40 	vneglt.f64	d8, d0
 8006216:	2d46      	cmp	r5, #70	; 0x46
 8006218:	460c      	mov	r4, r1
 800621a:	701a      	strb	r2, [r3, #0]
 800621c:	d004      	beq.n	8006228 <__cvt+0x38>
 800621e:	2d45      	cmp	r5, #69	; 0x45
 8006220:	d100      	bne.n	8006224 <__cvt+0x34>
 8006222:	3401      	adds	r4, #1
 8006224:	2102      	movs	r1, #2
 8006226:	e000      	b.n	800622a <__cvt+0x3a>
 8006228:	2103      	movs	r1, #3
 800622a:	ab03      	add	r3, sp, #12
 800622c:	9301      	str	r3, [sp, #4]
 800622e:	ab02      	add	r3, sp, #8
 8006230:	9300      	str	r3, [sp, #0]
 8006232:	4622      	mov	r2, r4
 8006234:	4633      	mov	r3, r6
 8006236:	eeb0 0b48 	vmov.f64	d0, d8
 800623a:	f001 feb5 	bl	8007fa8 <_dtoa_r>
 800623e:	2d47      	cmp	r5, #71	; 0x47
 8006240:	d109      	bne.n	8006256 <__cvt+0x66>
 8006242:	07fb      	lsls	r3, r7, #31
 8006244:	d407      	bmi.n	8006256 <__cvt+0x66>
 8006246:	9b03      	ldr	r3, [sp, #12]
 8006248:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800624a:	1a1b      	subs	r3, r3, r0
 800624c:	6013      	str	r3, [r2, #0]
 800624e:	b005      	add	sp, #20
 8006250:	ecbd 8b02 	vpop	{d8}
 8006254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006256:	2d46      	cmp	r5, #70	; 0x46
 8006258:	eb00 0204 	add.w	r2, r0, r4
 800625c:	d10c      	bne.n	8006278 <__cvt+0x88>
 800625e:	7803      	ldrb	r3, [r0, #0]
 8006260:	2b30      	cmp	r3, #48	; 0x30
 8006262:	d107      	bne.n	8006274 <__cvt+0x84>
 8006264:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800626c:	bf1c      	itt	ne
 800626e:	f1c4 0401 	rsbne	r4, r4, #1
 8006272:	6034      	strne	r4, [r6, #0]
 8006274:	6833      	ldr	r3, [r6, #0]
 8006276:	441a      	add	r2, r3
 8006278:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800627c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006280:	bf08      	it	eq
 8006282:	9203      	streq	r2, [sp, #12]
 8006284:	2130      	movs	r1, #48	; 0x30
 8006286:	9b03      	ldr	r3, [sp, #12]
 8006288:	4293      	cmp	r3, r2
 800628a:	d2dc      	bcs.n	8006246 <__cvt+0x56>
 800628c:	1c5c      	adds	r4, r3, #1
 800628e:	9403      	str	r4, [sp, #12]
 8006290:	7019      	strb	r1, [r3, #0]
 8006292:	e7f8      	b.n	8006286 <__cvt+0x96>

08006294 <__exponent>:
 8006294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006296:	4603      	mov	r3, r0
 8006298:	2900      	cmp	r1, #0
 800629a:	bfb8      	it	lt
 800629c:	4249      	neglt	r1, r1
 800629e:	f803 2b02 	strb.w	r2, [r3], #2
 80062a2:	bfb4      	ite	lt
 80062a4:	222d      	movlt	r2, #45	; 0x2d
 80062a6:	222b      	movge	r2, #43	; 0x2b
 80062a8:	2909      	cmp	r1, #9
 80062aa:	7042      	strb	r2, [r0, #1]
 80062ac:	dd2a      	ble.n	8006304 <__exponent+0x70>
 80062ae:	f10d 0407 	add.w	r4, sp, #7
 80062b2:	46a4      	mov	ip, r4
 80062b4:	270a      	movs	r7, #10
 80062b6:	46a6      	mov	lr, r4
 80062b8:	460a      	mov	r2, r1
 80062ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80062be:	fb07 1516 	mls	r5, r7, r6, r1
 80062c2:	3530      	adds	r5, #48	; 0x30
 80062c4:	2a63      	cmp	r2, #99	; 0x63
 80062c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80062ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80062ce:	4631      	mov	r1, r6
 80062d0:	dcf1      	bgt.n	80062b6 <__exponent+0x22>
 80062d2:	3130      	adds	r1, #48	; 0x30
 80062d4:	f1ae 0502 	sub.w	r5, lr, #2
 80062d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80062dc:	1c44      	adds	r4, r0, #1
 80062de:	4629      	mov	r1, r5
 80062e0:	4561      	cmp	r1, ip
 80062e2:	d30a      	bcc.n	80062fa <__exponent+0x66>
 80062e4:	f10d 0209 	add.w	r2, sp, #9
 80062e8:	eba2 020e 	sub.w	r2, r2, lr
 80062ec:	4565      	cmp	r5, ip
 80062ee:	bf88      	it	hi
 80062f0:	2200      	movhi	r2, #0
 80062f2:	4413      	add	r3, r2
 80062f4:	1a18      	subs	r0, r3, r0
 80062f6:	b003      	add	sp, #12
 80062f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8006302:	e7ed      	b.n	80062e0 <__exponent+0x4c>
 8006304:	2330      	movs	r3, #48	; 0x30
 8006306:	3130      	adds	r1, #48	; 0x30
 8006308:	7083      	strb	r3, [r0, #2]
 800630a:	70c1      	strb	r1, [r0, #3]
 800630c:	1d03      	adds	r3, r0, #4
 800630e:	e7f1      	b.n	80062f4 <__exponent+0x60>

08006310 <_printf_float>:
 8006310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006314:	b08b      	sub	sp, #44	; 0x2c
 8006316:	460c      	mov	r4, r1
 8006318:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800631c:	4616      	mov	r6, r2
 800631e:	461f      	mov	r7, r3
 8006320:	4605      	mov	r5, r0
 8006322:	f003 f8e9 	bl	80094f8 <_localeconv_r>
 8006326:	f8d0 b000 	ldr.w	fp, [r0]
 800632a:	4658      	mov	r0, fp
 800632c:	f7f9 ff88 	bl	8000240 <strlen>
 8006330:	2300      	movs	r3, #0
 8006332:	9308      	str	r3, [sp, #32]
 8006334:	f8d8 3000 	ldr.w	r3, [r8]
 8006338:	f894 9018 	ldrb.w	r9, [r4, #24]
 800633c:	6822      	ldr	r2, [r4, #0]
 800633e:	3307      	adds	r3, #7
 8006340:	f023 0307 	bic.w	r3, r3, #7
 8006344:	f103 0108 	add.w	r1, r3, #8
 8006348:	f8c8 1000 	str.w	r1, [r8]
 800634c:	4682      	mov	sl, r0
 800634e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006352:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8006356:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80065b8 <_printf_float+0x2a8>
 800635a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800635e:	eeb0 6bc0 	vabs.f64	d6, d0
 8006362:	eeb4 6b47 	vcmp.f64	d6, d7
 8006366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800636a:	dd24      	ble.n	80063b6 <_printf_float+0xa6>
 800636c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006374:	d502      	bpl.n	800637c <_printf_float+0x6c>
 8006376:	232d      	movs	r3, #45	; 0x2d
 8006378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800637c:	4b90      	ldr	r3, [pc, #576]	; (80065c0 <_printf_float+0x2b0>)
 800637e:	4891      	ldr	r0, [pc, #580]	; (80065c4 <_printf_float+0x2b4>)
 8006380:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006384:	bf94      	ite	ls
 8006386:	4698      	movls	r8, r3
 8006388:	4680      	movhi	r8, r0
 800638a:	2303      	movs	r3, #3
 800638c:	6123      	str	r3, [r4, #16]
 800638e:	f022 0204 	bic.w	r2, r2, #4
 8006392:	2300      	movs	r3, #0
 8006394:	6022      	str	r2, [r4, #0]
 8006396:	9304      	str	r3, [sp, #16]
 8006398:	9700      	str	r7, [sp, #0]
 800639a:	4633      	mov	r3, r6
 800639c:	aa09      	add	r2, sp, #36	; 0x24
 800639e:	4621      	mov	r1, r4
 80063a0:	4628      	mov	r0, r5
 80063a2:	f000 f9d3 	bl	800674c <_printf_common>
 80063a6:	3001      	adds	r0, #1
 80063a8:	f040 808a 	bne.w	80064c0 <_printf_float+0x1b0>
 80063ac:	f04f 30ff 	mov.w	r0, #4294967295
 80063b0:	b00b      	add	sp, #44	; 0x2c
 80063b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b6:	eeb4 0b40 	vcmp.f64	d0, d0
 80063ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063be:	d709      	bvc.n	80063d4 <_printf_float+0xc4>
 80063c0:	ee10 3a90 	vmov	r3, s1
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	bfbc      	itt	lt
 80063c8:	232d      	movlt	r3, #45	; 0x2d
 80063ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80063ce:	487e      	ldr	r0, [pc, #504]	; (80065c8 <_printf_float+0x2b8>)
 80063d0:	4b7e      	ldr	r3, [pc, #504]	; (80065cc <_printf_float+0x2bc>)
 80063d2:	e7d5      	b.n	8006380 <_printf_float+0x70>
 80063d4:	6863      	ldr	r3, [r4, #4]
 80063d6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80063da:	9104      	str	r1, [sp, #16]
 80063dc:	1c59      	adds	r1, r3, #1
 80063de:	d13c      	bne.n	800645a <_printf_float+0x14a>
 80063e0:	2306      	movs	r3, #6
 80063e2:	6063      	str	r3, [r4, #4]
 80063e4:	2300      	movs	r3, #0
 80063e6:	9303      	str	r3, [sp, #12]
 80063e8:	ab08      	add	r3, sp, #32
 80063ea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80063ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80063f2:	ab07      	add	r3, sp, #28
 80063f4:	6861      	ldr	r1, [r4, #4]
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	6022      	str	r2, [r4, #0]
 80063fa:	f10d 031b 	add.w	r3, sp, #27
 80063fe:	4628      	mov	r0, r5
 8006400:	f7ff fef6 	bl	80061f0 <__cvt>
 8006404:	9b04      	ldr	r3, [sp, #16]
 8006406:	9907      	ldr	r1, [sp, #28]
 8006408:	2b47      	cmp	r3, #71	; 0x47
 800640a:	4680      	mov	r8, r0
 800640c:	d108      	bne.n	8006420 <_printf_float+0x110>
 800640e:	1cc8      	adds	r0, r1, #3
 8006410:	db02      	blt.n	8006418 <_printf_float+0x108>
 8006412:	6863      	ldr	r3, [r4, #4]
 8006414:	4299      	cmp	r1, r3
 8006416:	dd41      	ble.n	800649c <_printf_float+0x18c>
 8006418:	f1a9 0902 	sub.w	r9, r9, #2
 800641c:	fa5f f989 	uxtb.w	r9, r9
 8006420:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006424:	d820      	bhi.n	8006468 <_printf_float+0x158>
 8006426:	3901      	subs	r1, #1
 8006428:	464a      	mov	r2, r9
 800642a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800642e:	9107      	str	r1, [sp, #28]
 8006430:	f7ff ff30 	bl	8006294 <__exponent>
 8006434:	9a08      	ldr	r2, [sp, #32]
 8006436:	9004      	str	r0, [sp, #16]
 8006438:	1813      	adds	r3, r2, r0
 800643a:	2a01      	cmp	r2, #1
 800643c:	6123      	str	r3, [r4, #16]
 800643e:	dc02      	bgt.n	8006446 <_printf_float+0x136>
 8006440:	6822      	ldr	r2, [r4, #0]
 8006442:	07d2      	lsls	r2, r2, #31
 8006444:	d501      	bpl.n	800644a <_printf_float+0x13a>
 8006446:	3301      	adds	r3, #1
 8006448:	6123      	str	r3, [r4, #16]
 800644a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d0a2      	beq.n	8006398 <_printf_float+0x88>
 8006452:	232d      	movs	r3, #45	; 0x2d
 8006454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006458:	e79e      	b.n	8006398 <_printf_float+0x88>
 800645a:	9904      	ldr	r1, [sp, #16]
 800645c:	2947      	cmp	r1, #71	; 0x47
 800645e:	d1c1      	bne.n	80063e4 <_printf_float+0xd4>
 8006460:	2b00      	cmp	r3, #0
 8006462:	d1bf      	bne.n	80063e4 <_printf_float+0xd4>
 8006464:	2301      	movs	r3, #1
 8006466:	e7bc      	b.n	80063e2 <_printf_float+0xd2>
 8006468:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800646c:	d118      	bne.n	80064a0 <_printf_float+0x190>
 800646e:	2900      	cmp	r1, #0
 8006470:	6863      	ldr	r3, [r4, #4]
 8006472:	dd0b      	ble.n	800648c <_printf_float+0x17c>
 8006474:	6121      	str	r1, [r4, #16]
 8006476:	b913      	cbnz	r3, 800647e <_printf_float+0x16e>
 8006478:	6822      	ldr	r2, [r4, #0]
 800647a:	07d0      	lsls	r0, r2, #31
 800647c:	d502      	bpl.n	8006484 <_printf_float+0x174>
 800647e:	3301      	adds	r3, #1
 8006480:	440b      	add	r3, r1
 8006482:	6123      	str	r3, [r4, #16]
 8006484:	2300      	movs	r3, #0
 8006486:	65a1      	str	r1, [r4, #88]	; 0x58
 8006488:	9304      	str	r3, [sp, #16]
 800648a:	e7de      	b.n	800644a <_printf_float+0x13a>
 800648c:	b913      	cbnz	r3, 8006494 <_printf_float+0x184>
 800648e:	6822      	ldr	r2, [r4, #0]
 8006490:	07d2      	lsls	r2, r2, #31
 8006492:	d501      	bpl.n	8006498 <_printf_float+0x188>
 8006494:	3302      	adds	r3, #2
 8006496:	e7f4      	b.n	8006482 <_printf_float+0x172>
 8006498:	2301      	movs	r3, #1
 800649a:	e7f2      	b.n	8006482 <_printf_float+0x172>
 800649c:	f04f 0967 	mov.w	r9, #103	; 0x67
 80064a0:	9b08      	ldr	r3, [sp, #32]
 80064a2:	4299      	cmp	r1, r3
 80064a4:	db05      	blt.n	80064b2 <_printf_float+0x1a2>
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	6121      	str	r1, [r4, #16]
 80064aa:	07d8      	lsls	r0, r3, #31
 80064ac:	d5ea      	bpl.n	8006484 <_printf_float+0x174>
 80064ae:	1c4b      	adds	r3, r1, #1
 80064b0:	e7e7      	b.n	8006482 <_printf_float+0x172>
 80064b2:	2900      	cmp	r1, #0
 80064b4:	bfd4      	ite	le
 80064b6:	f1c1 0202 	rsble	r2, r1, #2
 80064ba:	2201      	movgt	r2, #1
 80064bc:	4413      	add	r3, r2
 80064be:	e7e0      	b.n	8006482 <_printf_float+0x172>
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	055a      	lsls	r2, r3, #21
 80064c4:	d407      	bmi.n	80064d6 <_printf_float+0x1c6>
 80064c6:	6923      	ldr	r3, [r4, #16]
 80064c8:	4642      	mov	r2, r8
 80064ca:	4631      	mov	r1, r6
 80064cc:	4628      	mov	r0, r5
 80064ce:	47b8      	blx	r7
 80064d0:	3001      	adds	r0, #1
 80064d2:	d12a      	bne.n	800652a <_printf_float+0x21a>
 80064d4:	e76a      	b.n	80063ac <_printf_float+0x9c>
 80064d6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80064da:	f240 80e2 	bls.w	80066a2 <_printf_float+0x392>
 80064de:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80064e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80064e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064ea:	d133      	bne.n	8006554 <_printf_float+0x244>
 80064ec:	4a38      	ldr	r2, [pc, #224]	; (80065d0 <_printf_float+0x2c0>)
 80064ee:	2301      	movs	r3, #1
 80064f0:	4631      	mov	r1, r6
 80064f2:	4628      	mov	r0, r5
 80064f4:	47b8      	blx	r7
 80064f6:	3001      	adds	r0, #1
 80064f8:	f43f af58 	beq.w	80063ac <_printf_float+0x9c>
 80064fc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006500:	429a      	cmp	r2, r3
 8006502:	db02      	blt.n	800650a <_printf_float+0x1fa>
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	07d8      	lsls	r0, r3, #31
 8006508:	d50f      	bpl.n	800652a <_printf_float+0x21a>
 800650a:	4653      	mov	r3, sl
 800650c:	465a      	mov	r2, fp
 800650e:	4631      	mov	r1, r6
 8006510:	4628      	mov	r0, r5
 8006512:	47b8      	blx	r7
 8006514:	3001      	adds	r0, #1
 8006516:	f43f af49 	beq.w	80063ac <_printf_float+0x9c>
 800651a:	f04f 0800 	mov.w	r8, #0
 800651e:	f104 091a 	add.w	r9, r4, #26
 8006522:	9b08      	ldr	r3, [sp, #32]
 8006524:	3b01      	subs	r3, #1
 8006526:	4543      	cmp	r3, r8
 8006528:	dc09      	bgt.n	800653e <_printf_float+0x22e>
 800652a:	6823      	ldr	r3, [r4, #0]
 800652c:	079b      	lsls	r3, r3, #30
 800652e:	f100 8108 	bmi.w	8006742 <_printf_float+0x432>
 8006532:	68e0      	ldr	r0, [r4, #12]
 8006534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006536:	4298      	cmp	r0, r3
 8006538:	bfb8      	it	lt
 800653a:	4618      	movlt	r0, r3
 800653c:	e738      	b.n	80063b0 <_printf_float+0xa0>
 800653e:	2301      	movs	r3, #1
 8006540:	464a      	mov	r2, r9
 8006542:	4631      	mov	r1, r6
 8006544:	4628      	mov	r0, r5
 8006546:	47b8      	blx	r7
 8006548:	3001      	adds	r0, #1
 800654a:	f43f af2f 	beq.w	80063ac <_printf_float+0x9c>
 800654e:	f108 0801 	add.w	r8, r8, #1
 8006552:	e7e6      	b.n	8006522 <_printf_float+0x212>
 8006554:	9b07      	ldr	r3, [sp, #28]
 8006556:	2b00      	cmp	r3, #0
 8006558:	dc3c      	bgt.n	80065d4 <_printf_float+0x2c4>
 800655a:	4a1d      	ldr	r2, [pc, #116]	; (80065d0 <_printf_float+0x2c0>)
 800655c:	2301      	movs	r3, #1
 800655e:	4631      	mov	r1, r6
 8006560:	4628      	mov	r0, r5
 8006562:	47b8      	blx	r7
 8006564:	3001      	adds	r0, #1
 8006566:	f43f af21 	beq.w	80063ac <_printf_float+0x9c>
 800656a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800656e:	4313      	orrs	r3, r2
 8006570:	d102      	bne.n	8006578 <_printf_float+0x268>
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	07d9      	lsls	r1, r3, #31
 8006576:	d5d8      	bpl.n	800652a <_printf_float+0x21a>
 8006578:	4653      	mov	r3, sl
 800657a:	465a      	mov	r2, fp
 800657c:	4631      	mov	r1, r6
 800657e:	4628      	mov	r0, r5
 8006580:	47b8      	blx	r7
 8006582:	3001      	adds	r0, #1
 8006584:	f43f af12 	beq.w	80063ac <_printf_float+0x9c>
 8006588:	f04f 0900 	mov.w	r9, #0
 800658c:	f104 0a1a 	add.w	sl, r4, #26
 8006590:	9b07      	ldr	r3, [sp, #28]
 8006592:	425b      	negs	r3, r3
 8006594:	454b      	cmp	r3, r9
 8006596:	dc01      	bgt.n	800659c <_printf_float+0x28c>
 8006598:	9b08      	ldr	r3, [sp, #32]
 800659a:	e795      	b.n	80064c8 <_printf_float+0x1b8>
 800659c:	2301      	movs	r3, #1
 800659e:	4652      	mov	r2, sl
 80065a0:	4631      	mov	r1, r6
 80065a2:	4628      	mov	r0, r5
 80065a4:	47b8      	blx	r7
 80065a6:	3001      	adds	r0, #1
 80065a8:	f43f af00 	beq.w	80063ac <_printf_float+0x9c>
 80065ac:	f109 0901 	add.w	r9, r9, #1
 80065b0:	e7ee      	b.n	8006590 <_printf_float+0x280>
 80065b2:	bf00      	nop
 80065b4:	f3af 8000 	nop.w
 80065b8:	ffffffff 	.word	0xffffffff
 80065bc:	7fefffff 	.word	0x7fefffff
 80065c0:	0800ae74 	.word	0x0800ae74
 80065c4:	0800ae78 	.word	0x0800ae78
 80065c8:	0800ae80 	.word	0x0800ae80
 80065cc:	0800ae7c 	.word	0x0800ae7c
 80065d0:	0800ae84 	.word	0x0800ae84
 80065d4:	9a08      	ldr	r2, [sp, #32]
 80065d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065d8:	429a      	cmp	r2, r3
 80065da:	bfa8      	it	ge
 80065dc:	461a      	movge	r2, r3
 80065de:	2a00      	cmp	r2, #0
 80065e0:	4691      	mov	r9, r2
 80065e2:	dc38      	bgt.n	8006656 <_printf_float+0x346>
 80065e4:	2300      	movs	r3, #0
 80065e6:	9305      	str	r3, [sp, #20]
 80065e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065ec:	f104 021a 	add.w	r2, r4, #26
 80065f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80065f2:	9905      	ldr	r1, [sp, #20]
 80065f4:	9304      	str	r3, [sp, #16]
 80065f6:	eba3 0309 	sub.w	r3, r3, r9
 80065fa:	428b      	cmp	r3, r1
 80065fc:	dc33      	bgt.n	8006666 <_printf_float+0x356>
 80065fe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006602:	429a      	cmp	r2, r3
 8006604:	db3c      	blt.n	8006680 <_printf_float+0x370>
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	07da      	lsls	r2, r3, #31
 800660a:	d439      	bmi.n	8006680 <_printf_float+0x370>
 800660c:	9a08      	ldr	r2, [sp, #32]
 800660e:	9b04      	ldr	r3, [sp, #16]
 8006610:	9907      	ldr	r1, [sp, #28]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	eba2 0901 	sub.w	r9, r2, r1
 8006618:	4599      	cmp	r9, r3
 800661a:	bfa8      	it	ge
 800661c:	4699      	movge	r9, r3
 800661e:	f1b9 0f00 	cmp.w	r9, #0
 8006622:	dc35      	bgt.n	8006690 <_printf_float+0x380>
 8006624:	f04f 0800 	mov.w	r8, #0
 8006628:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800662c:	f104 0a1a 	add.w	sl, r4, #26
 8006630:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006634:	1a9b      	subs	r3, r3, r2
 8006636:	eba3 0309 	sub.w	r3, r3, r9
 800663a:	4543      	cmp	r3, r8
 800663c:	f77f af75 	ble.w	800652a <_printf_float+0x21a>
 8006640:	2301      	movs	r3, #1
 8006642:	4652      	mov	r2, sl
 8006644:	4631      	mov	r1, r6
 8006646:	4628      	mov	r0, r5
 8006648:	47b8      	blx	r7
 800664a:	3001      	adds	r0, #1
 800664c:	f43f aeae 	beq.w	80063ac <_printf_float+0x9c>
 8006650:	f108 0801 	add.w	r8, r8, #1
 8006654:	e7ec      	b.n	8006630 <_printf_float+0x320>
 8006656:	4613      	mov	r3, r2
 8006658:	4631      	mov	r1, r6
 800665a:	4642      	mov	r2, r8
 800665c:	4628      	mov	r0, r5
 800665e:	47b8      	blx	r7
 8006660:	3001      	adds	r0, #1
 8006662:	d1bf      	bne.n	80065e4 <_printf_float+0x2d4>
 8006664:	e6a2      	b.n	80063ac <_printf_float+0x9c>
 8006666:	2301      	movs	r3, #1
 8006668:	4631      	mov	r1, r6
 800666a:	4628      	mov	r0, r5
 800666c:	9204      	str	r2, [sp, #16]
 800666e:	47b8      	blx	r7
 8006670:	3001      	adds	r0, #1
 8006672:	f43f ae9b 	beq.w	80063ac <_printf_float+0x9c>
 8006676:	9b05      	ldr	r3, [sp, #20]
 8006678:	9a04      	ldr	r2, [sp, #16]
 800667a:	3301      	adds	r3, #1
 800667c:	9305      	str	r3, [sp, #20]
 800667e:	e7b7      	b.n	80065f0 <_printf_float+0x2e0>
 8006680:	4653      	mov	r3, sl
 8006682:	465a      	mov	r2, fp
 8006684:	4631      	mov	r1, r6
 8006686:	4628      	mov	r0, r5
 8006688:	47b8      	blx	r7
 800668a:	3001      	adds	r0, #1
 800668c:	d1be      	bne.n	800660c <_printf_float+0x2fc>
 800668e:	e68d      	b.n	80063ac <_printf_float+0x9c>
 8006690:	9a04      	ldr	r2, [sp, #16]
 8006692:	464b      	mov	r3, r9
 8006694:	4442      	add	r2, r8
 8006696:	4631      	mov	r1, r6
 8006698:	4628      	mov	r0, r5
 800669a:	47b8      	blx	r7
 800669c:	3001      	adds	r0, #1
 800669e:	d1c1      	bne.n	8006624 <_printf_float+0x314>
 80066a0:	e684      	b.n	80063ac <_printf_float+0x9c>
 80066a2:	9a08      	ldr	r2, [sp, #32]
 80066a4:	2a01      	cmp	r2, #1
 80066a6:	dc01      	bgt.n	80066ac <_printf_float+0x39c>
 80066a8:	07db      	lsls	r3, r3, #31
 80066aa:	d537      	bpl.n	800671c <_printf_float+0x40c>
 80066ac:	2301      	movs	r3, #1
 80066ae:	4642      	mov	r2, r8
 80066b0:	4631      	mov	r1, r6
 80066b2:	4628      	mov	r0, r5
 80066b4:	47b8      	blx	r7
 80066b6:	3001      	adds	r0, #1
 80066b8:	f43f ae78 	beq.w	80063ac <_printf_float+0x9c>
 80066bc:	4653      	mov	r3, sl
 80066be:	465a      	mov	r2, fp
 80066c0:	4631      	mov	r1, r6
 80066c2:	4628      	mov	r0, r5
 80066c4:	47b8      	blx	r7
 80066c6:	3001      	adds	r0, #1
 80066c8:	f43f ae70 	beq.w	80063ac <_printf_float+0x9c>
 80066cc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80066d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80066d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d8:	d01b      	beq.n	8006712 <_printf_float+0x402>
 80066da:	9b08      	ldr	r3, [sp, #32]
 80066dc:	f108 0201 	add.w	r2, r8, #1
 80066e0:	3b01      	subs	r3, #1
 80066e2:	4631      	mov	r1, r6
 80066e4:	4628      	mov	r0, r5
 80066e6:	47b8      	blx	r7
 80066e8:	3001      	adds	r0, #1
 80066ea:	d10e      	bne.n	800670a <_printf_float+0x3fa>
 80066ec:	e65e      	b.n	80063ac <_printf_float+0x9c>
 80066ee:	2301      	movs	r3, #1
 80066f0:	464a      	mov	r2, r9
 80066f2:	4631      	mov	r1, r6
 80066f4:	4628      	mov	r0, r5
 80066f6:	47b8      	blx	r7
 80066f8:	3001      	adds	r0, #1
 80066fa:	f43f ae57 	beq.w	80063ac <_printf_float+0x9c>
 80066fe:	f108 0801 	add.w	r8, r8, #1
 8006702:	9b08      	ldr	r3, [sp, #32]
 8006704:	3b01      	subs	r3, #1
 8006706:	4543      	cmp	r3, r8
 8006708:	dcf1      	bgt.n	80066ee <_printf_float+0x3de>
 800670a:	9b04      	ldr	r3, [sp, #16]
 800670c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006710:	e6db      	b.n	80064ca <_printf_float+0x1ba>
 8006712:	f04f 0800 	mov.w	r8, #0
 8006716:	f104 091a 	add.w	r9, r4, #26
 800671a:	e7f2      	b.n	8006702 <_printf_float+0x3f2>
 800671c:	2301      	movs	r3, #1
 800671e:	4642      	mov	r2, r8
 8006720:	e7df      	b.n	80066e2 <_printf_float+0x3d2>
 8006722:	2301      	movs	r3, #1
 8006724:	464a      	mov	r2, r9
 8006726:	4631      	mov	r1, r6
 8006728:	4628      	mov	r0, r5
 800672a:	47b8      	blx	r7
 800672c:	3001      	adds	r0, #1
 800672e:	f43f ae3d 	beq.w	80063ac <_printf_float+0x9c>
 8006732:	f108 0801 	add.w	r8, r8, #1
 8006736:	68e3      	ldr	r3, [r4, #12]
 8006738:	9909      	ldr	r1, [sp, #36]	; 0x24
 800673a:	1a5b      	subs	r3, r3, r1
 800673c:	4543      	cmp	r3, r8
 800673e:	dcf0      	bgt.n	8006722 <_printf_float+0x412>
 8006740:	e6f7      	b.n	8006532 <_printf_float+0x222>
 8006742:	f04f 0800 	mov.w	r8, #0
 8006746:	f104 0919 	add.w	r9, r4, #25
 800674a:	e7f4      	b.n	8006736 <_printf_float+0x426>

0800674c <_printf_common>:
 800674c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006750:	4616      	mov	r6, r2
 8006752:	4699      	mov	r9, r3
 8006754:	688a      	ldr	r2, [r1, #8]
 8006756:	690b      	ldr	r3, [r1, #16]
 8006758:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800675c:	4293      	cmp	r3, r2
 800675e:	bfb8      	it	lt
 8006760:	4613      	movlt	r3, r2
 8006762:	6033      	str	r3, [r6, #0]
 8006764:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006768:	4607      	mov	r7, r0
 800676a:	460c      	mov	r4, r1
 800676c:	b10a      	cbz	r2, 8006772 <_printf_common+0x26>
 800676e:	3301      	adds	r3, #1
 8006770:	6033      	str	r3, [r6, #0]
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	0699      	lsls	r1, r3, #26
 8006776:	bf42      	ittt	mi
 8006778:	6833      	ldrmi	r3, [r6, #0]
 800677a:	3302      	addmi	r3, #2
 800677c:	6033      	strmi	r3, [r6, #0]
 800677e:	6825      	ldr	r5, [r4, #0]
 8006780:	f015 0506 	ands.w	r5, r5, #6
 8006784:	d106      	bne.n	8006794 <_printf_common+0x48>
 8006786:	f104 0a19 	add.w	sl, r4, #25
 800678a:	68e3      	ldr	r3, [r4, #12]
 800678c:	6832      	ldr	r2, [r6, #0]
 800678e:	1a9b      	subs	r3, r3, r2
 8006790:	42ab      	cmp	r3, r5
 8006792:	dc26      	bgt.n	80067e2 <_printf_common+0x96>
 8006794:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006798:	1e13      	subs	r3, r2, #0
 800679a:	6822      	ldr	r2, [r4, #0]
 800679c:	bf18      	it	ne
 800679e:	2301      	movne	r3, #1
 80067a0:	0692      	lsls	r2, r2, #26
 80067a2:	d42b      	bmi.n	80067fc <_printf_common+0xb0>
 80067a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80067a8:	4649      	mov	r1, r9
 80067aa:	4638      	mov	r0, r7
 80067ac:	47c0      	blx	r8
 80067ae:	3001      	adds	r0, #1
 80067b0:	d01e      	beq.n	80067f0 <_printf_common+0xa4>
 80067b2:	6823      	ldr	r3, [r4, #0]
 80067b4:	68e5      	ldr	r5, [r4, #12]
 80067b6:	6832      	ldr	r2, [r6, #0]
 80067b8:	f003 0306 	and.w	r3, r3, #6
 80067bc:	2b04      	cmp	r3, #4
 80067be:	bf08      	it	eq
 80067c0:	1aad      	subeq	r5, r5, r2
 80067c2:	68a3      	ldr	r3, [r4, #8]
 80067c4:	6922      	ldr	r2, [r4, #16]
 80067c6:	bf0c      	ite	eq
 80067c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067cc:	2500      	movne	r5, #0
 80067ce:	4293      	cmp	r3, r2
 80067d0:	bfc4      	itt	gt
 80067d2:	1a9b      	subgt	r3, r3, r2
 80067d4:	18ed      	addgt	r5, r5, r3
 80067d6:	2600      	movs	r6, #0
 80067d8:	341a      	adds	r4, #26
 80067da:	42b5      	cmp	r5, r6
 80067dc:	d11a      	bne.n	8006814 <_printf_common+0xc8>
 80067de:	2000      	movs	r0, #0
 80067e0:	e008      	b.n	80067f4 <_printf_common+0xa8>
 80067e2:	2301      	movs	r3, #1
 80067e4:	4652      	mov	r2, sl
 80067e6:	4649      	mov	r1, r9
 80067e8:	4638      	mov	r0, r7
 80067ea:	47c0      	blx	r8
 80067ec:	3001      	adds	r0, #1
 80067ee:	d103      	bne.n	80067f8 <_printf_common+0xac>
 80067f0:	f04f 30ff 	mov.w	r0, #4294967295
 80067f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f8:	3501      	adds	r5, #1
 80067fa:	e7c6      	b.n	800678a <_printf_common+0x3e>
 80067fc:	18e1      	adds	r1, r4, r3
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	2030      	movs	r0, #48	; 0x30
 8006802:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006806:	4422      	add	r2, r4
 8006808:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800680c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006810:	3302      	adds	r3, #2
 8006812:	e7c7      	b.n	80067a4 <_printf_common+0x58>
 8006814:	2301      	movs	r3, #1
 8006816:	4622      	mov	r2, r4
 8006818:	4649      	mov	r1, r9
 800681a:	4638      	mov	r0, r7
 800681c:	47c0      	blx	r8
 800681e:	3001      	adds	r0, #1
 8006820:	d0e6      	beq.n	80067f0 <_printf_common+0xa4>
 8006822:	3601      	adds	r6, #1
 8006824:	e7d9      	b.n	80067da <_printf_common+0x8e>
	...

08006828 <_printf_i>:
 8006828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800682c:	460c      	mov	r4, r1
 800682e:	4691      	mov	r9, r2
 8006830:	7e27      	ldrb	r7, [r4, #24]
 8006832:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006834:	2f78      	cmp	r7, #120	; 0x78
 8006836:	4680      	mov	r8, r0
 8006838:	469a      	mov	sl, r3
 800683a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800683e:	d807      	bhi.n	8006850 <_printf_i+0x28>
 8006840:	2f62      	cmp	r7, #98	; 0x62
 8006842:	d80a      	bhi.n	800685a <_printf_i+0x32>
 8006844:	2f00      	cmp	r7, #0
 8006846:	f000 80d8 	beq.w	80069fa <_printf_i+0x1d2>
 800684a:	2f58      	cmp	r7, #88	; 0x58
 800684c:	f000 80a3 	beq.w	8006996 <_printf_i+0x16e>
 8006850:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006854:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006858:	e03a      	b.n	80068d0 <_printf_i+0xa8>
 800685a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800685e:	2b15      	cmp	r3, #21
 8006860:	d8f6      	bhi.n	8006850 <_printf_i+0x28>
 8006862:	a001      	add	r0, pc, #4	; (adr r0, 8006868 <_printf_i+0x40>)
 8006864:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006868:	080068c1 	.word	0x080068c1
 800686c:	080068d5 	.word	0x080068d5
 8006870:	08006851 	.word	0x08006851
 8006874:	08006851 	.word	0x08006851
 8006878:	08006851 	.word	0x08006851
 800687c:	08006851 	.word	0x08006851
 8006880:	080068d5 	.word	0x080068d5
 8006884:	08006851 	.word	0x08006851
 8006888:	08006851 	.word	0x08006851
 800688c:	08006851 	.word	0x08006851
 8006890:	08006851 	.word	0x08006851
 8006894:	080069e1 	.word	0x080069e1
 8006898:	08006905 	.word	0x08006905
 800689c:	080069c3 	.word	0x080069c3
 80068a0:	08006851 	.word	0x08006851
 80068a4:	08006851 	.word	0x08006851
 80068a8:	08006a03 	.word	0x08006a03
 80068ac:	08006851 	.word	0x08006851
 80068b0:	08006905 	.word	0x08006905
 80068b4:	08006851 	.word	0x08006851
 80068b8:	08006851 	.word	0x08006851
 80068bc:	080069cb 	.word	0x080069cb
 80068c0:	680b      	ldr	r3, [r1, #0]
 80068c2:	1d1a      	adds	r2, r3, #4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	600a      	str	r2, [r1, #0]
 80068c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80068cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80068d0:	2301      	movs	r3, #1
 80068d2:	e0a3      	b.n	8006a1c <_printf_i+0x1f4>
 80068d4:	6825      	ldr	r5, [r4, #0]
 80068d6:	6808      	ldr	r0, [r1, #0]
 80068d8:	062e      	lsls	r6, r5, #24
 80068da:	f100 0304 	add.w	r3, r0, #4
 80068de:	d50a      	bpl.n	80068f6 <_printf_i+0xce>
 80068e0:	6805      	ldr	r5, [r0, #0]
 80068e2:	600b      	str	r3, [r1, #0]
 80068e4:	2d00      	cmp	r5, #0
 80068e6:	da03      	bge.n	80068f0 <_printf_i+0xc8>
 80068e8:	232d      	movs	r3, #45	; 0x2d
 80068ea:	426d      	negs	r5, r5
 80068ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068f0:	485e      	ldr	r0, [pc, #376]	; (8006a6c <_printf_i+0x244>)
 80068f2:	230a      	movs	r3, #10
 80068f4:	e019      	b.n	800692a <_printf_i+0x102>
 80068f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80068fa:	6805      	ldr	r5, [r0, #0]
 80068fc:	600b      	str	r3, [r1, #0]
 80068fe:	bf18      	it	ne
 8006900:	b22d      	sxthne	r5, r5
 8006902:	e7ef      	b.n	80068e4 <_printf_i+0xbc>
 8006904:	680b      	ldr	r3, [r1, #0]
 8006906:	6825      	ldr	r5, [r4, #0]
 8006908:	1d18      	adds	r0, r3, #4
 800690a:	6008      	str	r0, [r1, #0]
 800690c:	0628      	lsls	r0, r5, #24
 800690e:	d501      	bpl.n	8006914 <_printf_i+0xec>
 8006910:	681d      	ldr	r5, [r3, #0]
 8006912:	e002      	b.n	800691a <_printf_i+0xf2>
 8006914:	0669      	lsls	r1, r5, #25
 8006916:	d5fb      	bpl.n	8006910 <_printf_i+0xe8>
 8006918:	881d      	ldrh	r5, [r3, #0]
 800691a:	4854      	ldr	r0, [pc, #336]	; (8006a6c <_printf_i+0x244>)
 800691c:	2f6f      	cmp	r7, #111	; 0x6f
 800691e:	bf0c      	ite	eq
 8006920:	2308      	moveq	r3, #8
 8006922:	230a      	movne	r3, #10
 8006924:	2100      	movs	r1, #0
 8006926:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800692a:	6866      	ldr	r6, [r4, #4]
 800692c:	60a6      	str	r6, [r4, #8]
 800692e:	2e00      	cmp	r6, #0
 8006930:	bfa2      	ittt	ge
 8006932:	6821      	ldrge	r1, [r4, #0]
 8006934:	f021 0104 	bicge.w	r1, r1, #4
 8006938:	6021      	strge	r1, [r4, #0]
 800693a:	b90d      	cbnz	r5, 8006940 <_printf_i+0x118>
 800693c:	2e00      	cmp	r6, #0
 800693e:	d04d      	beq.n	80069dc <_printf_i+0x1b4>
 8006940:	4616      	mov	r6, r2
 8006942:	fbb5 f1f3 	udiv	r1, r5, r3
 8006946:	fb03 5711 	mls	r7, r3, r1, r5
 800694a:	5dc7      	ldrb	r7, [r0, r7]
 800694c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006950:	462f      	mov	r7, r5
 8006952:	42bb      	cmp	r3, r7
 8006954:	460d      	mov	r5, r1
 8006956:	d9f4      	bls.n	8006942 <_printf_i+0x11a>
 8006958:	2b08      	cmp	r3, #8
 800695a:	d10b      	bne.n	8006974 <_printf_i+0x14c>
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	07df      	lsls	r7, r3, #31
 8006960:	d508      	bpl.n	8006974 <_printf_i+0x14c>
 8006962:	6923      	ldr	r3, [r4, #16]
 8006964:	6861      	ldr	r1, [r4, #4]
 8006966:	4299      	cmp	r1, r3
 8006968:	bfde      	ittt	le
 800696a:	2330      	movle	r3, #48	; 0x30
 800696c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006970:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006974:	1b92      	subs	r2, r2, r6
 8006976:	6122      	str	r2, [r4, #16]
 8006978:	f8cd a000 	str.w	sl, [sp]
 800697c:	464b      	mov	r3, r9
 800697e:	aa03      	add	r2, sp, #12
 8006980:	4621      	mov	r1, r4
 8006982:	4640      	mov	r0, r8
 8006984:	f7ff fee2 	bl	800674c <_printf_common>
 8006988:	3001      	adds	r0, #1
 800698a:	d14c      	bne.n	8006a26 <_printf_i+0x1fe>
 800698c:	f04f 30ff 	mov.w	r0, #4294967295
 8006990:	b004      	add	sp, #16
 8006992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006996:	4835      	ldr	r0, [pc, #212]	; (8006a6c <_printf_i+0x244>)
 8006998:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	680e      	ldr	r6, [r1, #0]
 80069a0:	061f      	lsls	r7, r3, #24
 80069a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80069a6:	600e      	str	r6, [r1, #0]
 80069a8:	d514      	bpl.n	80069d4 <_printf_i+0x1ac>
 80069aa:	07d9      	lsls	r1, r3, #31
 80069ac:	bf44      	itt	mi
 80069ae:	f043 0320 	orrmi.w	r3, r3, #32
 80069b2:	6023      	strmi	r3, [r4, #0]
 80069b4:	b91d      	cbnz	r5, 80069be <_printf_i+0x196>
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	f023 0320 	bic.w	r3, r3, #32
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	2310      	movs	r3, #16
 80069c0:	e7b0      	b.n	8006924 <_printf_i+0xfc>
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	f043 0320 	orr.w	r3, r3, #32
 80069c8:	6023      	str	r3, [r4, #0]
 80069ca:	2378      	movs	r3, #120	; 0x78
 80069cc:	4828      	ldr	r0, [pc, #160]	; (8006a70 <_printf_i+0x248>)
 80069ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069d2:	e7e3      	b.n	800699c <_printf_i+0x174>
 80069d4:	065e      	lsls	r6, r3, #25
 80069d6:	bf48      	it	mi
 80069d8:	b2ad      	uxthmi	r5, r5
 80069da:	e7e6      	b.n	80069aa <_printf_i+0x182>
 80069dc:	4616      	mov	r6, r2
 80069de:	e7bb      	b.n	8006958 <_printf_i+0x130>
 80069e0:	680b      	ldr	r3, [r1, #0]
 80069e2:	6826      	ldr	r6, [r4, #0]
 80069e4:	6960      	ldr	r0, [r4, #20]
 80069e6:	1d1d      	adds	r5, r3, #4
 80069e8:	600d      	str	r5, [r1, #0]
 80069ea:	0635      	lsls	r5, r6, #24
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	d501      	bpl.n	80069f4 <_printf_i+0x1cc>
 80069f0:	6018      	str	r0, [r3, #0]
 80069f2:	e002      	b.n	80069fa <_printf_i+0x1d2>
 80069f4:	0671      	lsls	r1, r6, #25
 80069f6:	d5fb      	bpl.n	80069f0 <_printf_i+0x1c8>
 80069f8:	8018      	strh	r0, [r3, #0]
 80069fa:	2300      	movs	r3, #0
 80069fc:	6123      	str	r3, [r4, #16]
 80069fe:	4616      	mov	r6, r2
 8006a00:	e7ba      	b.n	8006978 <_printf_i+0x150>
 8006a02:	680b      	ldr	r3, [r1, #0]
 8006a04:	1d1a      	adds	r2, r3, #4
 8006a06:	600a      	str	r2, [r1, #0]
 8006a08:	681e      	ldr	r6, [r3, #0]
 8006a0a:	6862      	ldr	r2, [r4, #4]
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	4630      	mov	r0, r6
 8006a10:	f7f9 fc1e 	bl	8000250 <memchr>
 8006a14:	b108      	cbz	r0, 8006a1a <_printf_i+0x1f2>
 8006a16:	1b80      	subs	r0, r0, r6
 8006a18:	6060      	str	r0, [r4, #4]
 8006a1a:	6863      	ldr	r3, [r4, #4]
 8006a1c:	6123      	str	r3, [r4, #16]
 8006a1e:	2300      	movs	r3, #0
 8006a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a24:	e7a8      	b.n	8006978 <_printf_i+0x150>
 8006a26:	6923      	ldr	r3, [r4, #16]
 8006a28:	4632      	mov	r2, r6
 8006a2a:	4649      	mov	r1, r9
 8006a2c:	4640      	mov	r0, r8
 8006a2e:	47d0      	blx	sl
 8006a30:	3001      	adds	r0, #1
 8006a32:	d0ab      	beq.n	800698c <_printf_i+0x164>
 8006a34:	6823      	ldr	r3, [r4, #0]
 8006a36:	079b      	lsls	r3, r3, #30
 8006a38:	d413      	bmi.n	8006a62 <_printf_i+0x23a>
 8006a3a:	68e0      	ldr	r0, [r4, #12]
 8006a3c:	9b03      	ldr	r3, [sp, #12]
 8006a3e:	4298      	cmp	r0, r3
 8006a40:	bfb8      	it	lt
 8006a42:	4618      	movlt	r0, r3
 8006a44:	e7a4      	b.n	8006990 <_printf_i+0x168>
 8006a46:	2301      	movs	r3, #1
 8006a48:	4632      	mov	r2, r6
 8006a4a:	4649      	mov	r1, r9
 8006a4c:	4640      	mov	r0, r8
 8006a4e:	47d0      	blx	sl
 8006a50:	3001      	adds	r0, #1
 8006a52:	d09b      	beq.n	800698c <_printf_i+0x164>
 8006a54:	3501      	adds	r5, #1
 8006a56:	68e3      	ldr	r3, [r4, #12]
 8006a58:	9903      	ldr	r1, [sp, #12]
 8006a5a:	1a5b      	subs	r3, r3, r1
 8006a5c:	42ab      	cmp	r3, r5
 8006a5e:	dcf2      	bgt.n	8006a46 <_printf_i+0x21e>
 8006a60:	e7eb      	b.n	8006a3a <_printf_i+0x212>
 8006a62:	2500      	movs	r5, #0
 8006a64:	f104 0619 	add.w	r6, r4, #25
 8006a68:	e7f5      	b.n	8006a56 <_printf_i+0x22e>
 8006a6a:	bf00      	nop
 8006a6c:	0800ae86 	.word	0x0800ae86
 8006a70:	0800ae97 	.word	0x0800ae97

08006a74 <_scanf_float>:
 8006a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a78:	b087      	sub	sp, #28
 8006a7a:	4617      	mov	r7, r2
 8006a7c:	9303      	str	r3, [sp, #12]
 8006a7e:	688b      	ldr	r3, [r1, #8]
 8006a80:	1e5a      	subs	r2, r3, #1
 8006a82:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006a86:	bf83      	ittte	hi
 8006a88:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006a8c:	195b      	addhi	r3, r3, r5
 8006a8e:	9302      	strhi	r3, [sp, #8]
 8006a90:	2300      	movls	r3, #0
 8006a92:	bf86      	itte	hi
 8006a94:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006a98:	608b      	strhi	r3, [r1, #8]
 8006a9a:	9302      	strls	r3, [sp, #8]
 8006a9c:	680b      	ldr	r3, [r1, #0]
 8006a9e:	468b      	mov	fp, r1
 8006aa0:	2500      	movs	r5, #0
 8006aa2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006aa6:	f84b 3b1c 	str.w	r3, [fp], #28
 8006aaa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006aae:	4680      	mov	r8, r0
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	465e      	mov	r6, fp
 8006ab4:	46aa      	mov	sl, r5
 8006ab6:	46a9      	mov	r9, r5
 8006ab8:	9501      	str	r5, [sp, #4]
 8006aba:	68a2      	ldr	r2, [r4, #8]
 8006abc:	b152      	cbz	r2, 8006ad4 <_scanf_float+0x60>
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	2b4e      	cmp	r3, #78	; 0x4e
 8006ac4:	d864      	bhi.n	8006b90 <_scanf_float+0x11c>
 8006ac6:	2b40      	cmp	r3, #64	; 0x40
 8006ac8:	d83c      	bhi.n	8006b44 <_scanf_float+0xd0>
 8006aca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006ace:	b2c8      	uxtb	r0, r1
 8006ad0:	280e      	cmp	r0, #14
 8006ad2:	d93a      	bls.n	8006b4a <_scanf_float+0xd6>
 8006ad4:	f1b9 0f00 	cmp.w	r9, #0
 8006ad8:	d003      	beq.n	8006ae2 <_scanf_float+0x6e>
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006ae6:	f1ba 0f01 	cmp.w	sl, #1
 8006aea:	f200 8113 	bhi.w	8006d14 <_scanf_float+0x2a0>
 8006aee:	455e      	cmp	r6, fp
 8006af0:	f200 8105 	bhi.w	8006cfe <_scanf_float+0x28a>
 8006af4:	2501      	movs	r5, #1
 8006af6:	4628      	mov	r0, r5
 8006af8:	b007      	add	sp, #28
 8006afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006afe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006b02:	2a0d      	cmp	r2, #13
 8006b04:	d8e6      	bhi.n	8006ad4 <_scanf_float+0x60>
 8006b06:	a101      	add	r1, pc, #4	; (adr r1, 8006b0c <_scanf_float+0x98>)
 8006b08:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006b0c:	08006c4b 	.word	0x08006c4b
 8006b10:	08006ad5 	.word	0x08006ad5
 8006b14:	08006ad5 	.word	0x08006ad5
 8006b18:	08006ad5 	.word	0x08006ad5
 8006b1c:	08006cab 	.word	0x08006cab
 8006b20:	08006c83 	.word	0x08006c83
 8006b24:	08006ad5 	.word	0x08006ad5
 8006b28:	08006ad5 	.word	0x08006ad5
 8006b2c:	08006c59 	.word	0x08006c59
 8006b30:	08006ad5 	.word	0x08006ad5
 8006b34:	08006ad5 	.word	0x08006ad5
 8006b38:	08006ad5 	.word	0x08006ad5
 8006b3c:	08006ad5 	.word	0x08006ad5
 8006b40:	08006c11 	.word	0x08006c11
 8006b44:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006b48:	e7db      	b.n	8006b02 <_scanf_float+0x8e>
 8006b4a:	290e      	cmp	r1, #14
 8006b4c:	d8c2      	bhi.n	8006ad4 <_scanf_float+0x60>
 8006b4e:	a001      	add	r0, pc, #4	; (adr r0, 8006b54 <_scanf_float+0xe0>)
 8006b50:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006b54:	08006c03 	.word	0x08006c03
 8006b58:	08006ad5 	.word	0x08006ad5
 8006b5c:	08006c03 	.word	0x08006c03
 8006b60:	08006c97 	.word	0x08006c97
 8006b64:	08006ad5 	.word	0x08006ad5
 8006b68:	08006bb1 	.word	0x08006bb1
 8006b6c:	08006bed 	.word	0x08006bed
 8006b70:	08006bed 	.word	0x08006bed
 8006b74:	08006bed 	.word	0x08006bed
 8006b78:	08006bed 	.word	0x08006bed
 8006b7c:	08006bed 	.word	0x08006bed
 8006b80:	08006bed 	.word	0x08006bed
 8006b84:	08006bed 	.word	0x08006bed
 8006b88:	08006bed 	.word	0x08006bed
 8006b8c:	08006bed 	.word	0x08006bed
 8006b90:	2b6e      	cmp	r3, #110	; 0x6e
 8006b92:	d809      	bhi.n	8006ba8 <_scanf_float+0x134>
 8006b94:	2b60      	cmp	r3, #96	; 0x60
 8006b96:	d8b2      	bhi.n	8006afe <_scanf_float+0x8a>
 8006b98:	2b54      	cmp	r3, #84	; 0x54
 8006b9a:	d077      	beq.n	8006c8c <_scanf_float+0x218>
 8006b9c:	2b59      	cmp	r3, #89	; 0x59
 8006b9e:	d199      	bne.n	8006ad4 <_scanf_float+0x60>
 8006ba0:	2d07      	cmp	r5, #7
 8006ba2:	d197      	bne.n	8006ad4 <_scanf_float+0x60>
 8006ba4:	2508      	movs	r5, #8
 8006ba6:	e029      	b.n	8006bfc <_scanf_float+0x188>
 8006ba8:	2b74      	cmp	r3, #116	; 0x74
 8006baa:	d06f      	beq.n	8006c8c <_scanf_float+0x218>
 8006bac:	2b79      	cmp	r3, #121	; 0x79
 8006bae:	e7f6      	b.n	8006b9e <_scanf_float+0x12a>
 8006bb0:	6821      	ldr	r1, [r4, #0]
 8006bb2:	05c8      	lsls	r0, r1, #23
 8006bb4:	d51a      	bpl.n	8006bec <_scanf_float+0x178>
 8006bb6:	9b02      	ldr	r3, [sp, #8]
 8006bb8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006bbc:	6021      	str	r1, [r4, #0]
 8006bbe:	f109 0901 	add.w	r9, r9, #1
 8006bc2:	b11b      	cbz	r3, 8006bcc <_scanf_float+0x158>
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	3201      	adds	r2, #1
 8006bc8:	9302      	str	r3, [sp, #8]
 8006bca:	60a2      	str	r2, [r4, #8]
 8006bcc:	68a3      	ldr	r3, [r4, #8]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	60a3      	str	r3, [r4, #8]
 8006bd2:	6923      	ldr	r3, [r4, #16]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	6123      	str	r3, [r4, #16]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	607b      	str	r3, [r7, #4]
 8006be0:	f340 8084 	ble.w	8006cec <_scanf_float+0x278>
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	3301      	adds	r3, #1
 8006be8:	603b      	str	r3, [r7, #0]
 8006bea:	e766      	b.n	8006aba <_scanf_float+0x46>
 8006bec:	eb1a 0f05 	cmn.w	sl, r5
 8006bf0:	f47f af70 	bne.w	8006ad4 <_scanf_float+0x60>
 8006bf4:	6822      	ldr	r2, [r4, #0]
 8006bf6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006bfa:	6022      	str	r2, [r4, #0]
 8006bfc:	f806 3b01 	strb.w	r3, [r6], #1
 8006c00:	e7e4      	b.n	8006bcc <_scanf_float+0x158>
 8006c02:	6822      	ldr	r2, [r4, #0]
 8006c04:	0610      	lsls	r0, r2, #24
 8006c06:	f57f af65 	bpl.w	8006ad4 <_scanf_float+0x60>
 8006c0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006c0e:	e7f4      	b.n	8006bfa <_scanf_float+0x186>
 8006c10:	f1ba 0f00 	cmp.w	sl, #0
 8006c14:	d10e      	bne.n	8006c34 <_scanf_float+0x1c0>
 8006c16:	f1b9 0f00 	cmp.w	r9, #0
 8006c1a:	d10e      	bne.n	8006c3a <_scanf_float+0x1c6>
 8006c1c:	6822      	ldr	r2, [r4, #0]
 8006c1e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c22:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c26:	d108      	bne.n	8006c3a <_scanf_float+0x1c6>
 8006c28:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c2c:	6022      	str	r2, [r4, #0]
 8006c2e:	f04f 0a01 	mov.w	sl, #1
 8006c32:	e7e3      	b.n	8006bfc <_scanf_float+0x188>
 8006c34:	f1ba 0f02 	cmp.w	sl, #2
 8006c38:	d055      	beq.n	8006ce6 <_scanf_float+0x272>
 8006c3a:	2d01      	cmp	r5, #1
 8006c3c:	d002      	beq.n	8006c44 <_scanf_float+0x1d0>
 8006c3e:	2d04      	cmp	r5, #4
 8006c40:	f47f af48 	bne.w	8006ad4 <_scanf_float+0x60>
 8006c44:	3501      	adds	r5, #1
 8006c46:	b2ed      	uxtb	r5, r5
 8006c48:	e7d8      	b.n	8006bfc <_scanf_float+0x188>
 8006c4a:	f1ba 0f01 	cmp.w	sl, #1
 8006c4e:	f47f af41 	bne.w	8006ad4 <_scanf_float+0x60>
 8006c52:	f04f 0a02 	mov.w	sl, #2
 8006c56:	e7d1      	b.n	8006bfc <_scanf_float+0x188>
 8006c58:	b97d      	cbnz	r5, 8006c7a <_scanf_float+0x206>
 8006c5a:	f1b9 0f00 	cmp.w	r9, #0
 8006c5e:	f47f af3c 	bne.w	8006ada <_scanf_float+0x66>
 8006c62:	6822      	ldr	r2, [r4, #0]
 8006c64:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006c68:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006c6c:	f47f af39 	bne.w	8006ae2 <_scanf_float+0x6e>
 8006c70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c74:	6022      	str	r2, [r4, #0]
 8006c76:	2501      	movs	r5, #1
 8006c78:	e7c0      	b.n	8006bfc <_scanf_float+0x188>
 8006c7a:	2d03      	cmp	r5, #3
 8006c7c:	d0e2      	beq.n	8006c44 <_scanf_float+0x1d0>
 8006c7e:	2d05      	cmp	r5, #5
 8006c80:	e7de      	b.n	8006c40 <_scanf_float+0x1cc>
 8006c82:	2d02      	cmp	r5, #2
 8006c84:	f47f af26 	bne.w	8006ad4 <_scanf_float+0x60>
 8006c88:	2503      	movs	r5, #3
 8006c8a:	e7b7      	b.n	8006bfc <_scanf_float+0x188>
 8006c8c:	2d06      	cmp	r5, #6
 8006c8e:	f47f af21 	bne.w	8006ad4 <_scanf_float+0x60>
 8006c92:	2507      	movs	r5, #7
 8006c94:	e7b2      	b.n	8006bfc <_scanf_float+0x188>
 8006c96:	6822      	ldr	r2, [r4, #0]
 8006c98:	0591      	lsls	r1, r2, #22
 8006c9a:	f57f af1b 	bpl.w	8006ad4 <_scanf_float+0x60>
 8006c9e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006ca2:	6022      	str	r2, [r4, #0]
 8006ca4:	f8cd 9004 	str.w	r9, [sp, #4]
 8006ca8:	e7a8      	b.n	8006bfc <_scanf_float+0x188>
 8006caa:	6822      	ldr	r2, [r4, #0]
 8006cac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006cb0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006cb4:	d006      	beq.n	8006cc4 <_scanf_float+0x250>
 8006cb6:	0550      	lsls	r0, r2, #21
 8006cb8:	f57f af0c 	bpl.w	8006ad4 <_scanf_float+0x60>
 8006cbc:	f1b9 0f00 	cmp.w	r9, #0
 8006cc0:	f43f af0f 	beq.w	8006ae2 <_scanf_float+0x6e>
 8006cc4:	0591      	lsls	r1, r2, #22
 8006cc6:	bf58      	it	pl
 8006cc8:	9901      	ldrpl	r1, [sp, #4]
 8006cca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006cce:	bf58      	it	pl
 8006cd0:	eba9 0101 	subpl.w	r1, r9, r1
 8006cd4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006cd8:	bf58      	it	pl
 8006cda:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006cde:	6022      	str	r2, [r4, #0]
 8006ce0:	f04f 0900 	mov.w	r9, #0
 8006ce4:	e78a      	b.n	8006bfc <_scanf_float+0x188>
 8006ce6:	f04f 0a03 	mov.w	sl, #3
 8006cea:	e787      	b.n	8006bfc <_scanf_float+0x188>
 8006cec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006cf0:	4639      	mov	r1, r7
 8006cf2:	4640      	mov	r0, r8
 8006cf4:	4798      	blx	r3
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f43f aedf 	beq.w	8006aba <_scanf_float+0x46>
 8006cfc:	e6ea      	b.n	8006ad4 <_scanf_float+0x60>
 8006cfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d06:	463a      	mov	r2, r7
 8006d08:	4640      	mov	r0, r8
 8006d0a:	4798      	blx	r3
 8006d0c:	6923      	ldr	r3, [r4, #16]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	6123      	str	r3, [r4, #16]
 8006d12:	e6ec      	b.n	8006aee <_scanf_float+0x7a>
 8006d14:	1e6b      	subs	r3, r5, #1
 8006d16:	2b06      	cmp	r3, #6
 8006d18:	d825      	bhi.n	8006d66 <_scanf_float+0x2f2>
 8006d1a:	2d02      	cmp	r5, #2
 8006d1c:	d836      	bhi.n	8006d8c <_scanf_float+0x318>
 8006d1e:	455e      	cmp	r6, fp
 8006d20:	f67f aee8 	bls.w	8006af4 <_scanf_float+0x80>
 8006d24:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d28:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d2c:	463a      	mov	r2, r7
 8006d2e:	4640      	mov	r0, r8
 8006d30:	4798      	blx	r3
 8006d32:	6923      	ldr	r3, [r4, #16]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	6123      	str	r3, [r4, #16]
 8006d38:	e7f1      	b.n	8006d1e <_scanf_float+0x2aa>
 8006d3a:	9802      	ldr	r0, [sp, #8]
 8006d3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d40:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006d44:	9002      	str	r0, [sp, #8]
 8006d46:	463a      	mov	r2, r7
 8006d48:	4640      	mov	r0, r8
 8006d4a:	4798      	blx	r3
 8006d4c:	6923      	ldr	r3, [r4, #16]
 8006d4e:	3b01      	subs	r3, #1
 8006d50:	6123      	str	r3, [r4, #16]
 8006d52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d56:	fa5f fa8a 	uxtb.w	sl, sl
 8006d5a:	f1ba 0f02 	cmp.w	sl, #2
 8006d5e:	d1ec      	bne.n	8006d3a <_scanf_float+0x2c6>
 8006d60:	3d03      	subs	r5, #3
 8006d62:	b2ed      	uxtb	r5, r5
 8006d64:	1b76      	subs	r6, r6, r5
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	05da      	lsls	r2, r3, #23
 8006d6a:	d52f      	bpl.n	8006dcc <_scanf_float+0x358>
 8006d6c:	055b      	lsls	r3, r3, #21
 8006d6e:	d510      	bpl.n	8006d92 <_scanf_float+0x31e>
 8006d70:	455e      	cmp	r6, fp
 8006d72:	f67f aebf 	bls.w	8006af4 <_scanf_float+0x80>
 8006d76:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d7e:	463a      	mov	r2, r7
 8006d80:	4640      	mov	r0, r8
 8006d82:	4798      	blx	r3
 8006d84:	6923      	ldr	r3, [r4, #16]
 8006d86:	3b01      	subs	r3, #1
 8006d88:	6123      	str	r3, [r4, #16]
 8006d8a:	e7f1      	b.n	8006d70 <_scanf_float+0x2fc>
 8006d8c:	46aa      	mov	sl, r5
 8006d8e:	9602      	str	r6, [sp, #8]
 8006d90:	e7df      	b.n	8006d52 <_scanf_float+0x2de>
 8006d92:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006d96:	6923      	ldr	r3, [r4, #16]
 8006d98:	2965      	cmp	r1, #101	; 0x65
 8006d9a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006d9e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006da2:	6123      	str	r3, [r4, #16]
 8006da4:	d00c      	beq.n	8006dc0 <_scanf_float+0x34c>
 8006da6:	2945      	cmp	r1, #69	; 0x45
 8006da8:	d00a      	beq.n	8006dc0 <_scanf_float+0x34c>
 8006daa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dae:	463a      	mov	r2, r7
 8006db0:	4640      	mov	r0, r8
 8006db2:	4798      	blx	r3
 8006db4:	6923      	ldr	r3, [r4, #16]
 8006db6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	1eb5      	subs	r5, r6, #2
 8006dbe:	6123      	str	r3, [r4, #16]
 8006dc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dc4:	463a      	mov	r2, r7
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	4798      	blx	r3
 8006dca:	462e      	mov	r6, r5
 8006dcc:	6825      	ldr	r5, [r4, #0]
 8006dce:	f015 0510 	ands.w	r5, r5, #16
 8006dd2:	d14d      	bne.n	8006e70 <_scanf_float+0x3fc>
 8006dd4:	7035      	strb	r5, [r6, #0]
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006ddc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006de0:	d11a      	bne.n	8006e18 <_scanf_float+0x3a4>
 8006de2:	9b01      	ldr	r3, [sp, #4]
 8006de4:	454b      	cmp	r3, r9
 8006de6:	eba3 0209 	sub.w	r2, r3, r9
 8006dea:	d122      	bne.n	8006e32 <_scanf_float+0x3be>
 8006dec:	2200      	movs	r2, #0
 8006dee:	4659      	mov	r1, fp
 8006df0:	4640      	mov	r0, r8
 8006df2:	f000 feff 	bl	8007bf4 <_strtod_r>
 8006df6:	9b03      	ldr	r3, [sp, #12]
 8006df8:	6821      	ldr	r1, [r4, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f011 0f02 	tst.w	r1, #2
 8006e00:	f103 0204 	add.w	r2, r3, #4
 8006e04:	d020      	beq.n	8006e48 <_scanf_float+0x3d4>
 8006e06:	9903      	ldr	r1, [sp, #12]
 8006e08:	600a      	str	r2, [r1, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	ed83 0b00 	vstr	d0, [r3]
 8006e10:	68e3      	ldr	r3, [r4, #12]
 8006e12:	3301      	adds	r3, #1
 8006e14:	60e3      	str	r3, [r4, #12]
 8006e16:	e66e      	b.n	8006af6 <_scanf_float+0x82>
 8006e18:	9b04      	ldr	r3, [sp, #16]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d0e6      	beq.n	8006dec <_scanf_float+0x378>
 8006e1e:	9905      	ldr	r1, [sp, #20]
 8006e20:	230a      	movs	r3, #10
 8006e22:	462a      	mov	r2, r5
 8006e24:	3101      	adds	r1, #1
 8006e26:	4640      	mov	r0, r8
 8006e28:	f000 ff6e 	bl	8007d08 <_strtol_r>
 8006e2c:	9b04      	ldr	r3, [sp, #16]
 8006e2e:	9e05      	ldr	r6, [sp, #20]
 8006e30:	1ac2      	subs	r2, r0, r3
 8006e32:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006e36:	429e      	cmp	r6, r3
 8006e38:	bf28      	it	cs
 8006e3a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006e3e:	490d      	ldr	r1, [pc, #52]	; (8006e74 <_scanf_float+0x400>)
 8006e40:	4630      	mov	r0, r6
 8006e42:	f000 f8c5 	bl	8006fd0 <siprintf>
 8006e46:	e7d1      	b.n	8006dec <_scanf_float+0x378>
 8006e48:	f011 0f04 	tst.w	r1, #4
 8006e4c:	9903      	ldr	r1, [sp, #12]
 8006e4e:	600a      	str	r2, [r1, #0]
 8006e50:	d1db      	bne.n	8006e0a <_scanf_float+0x396>
 8006e52:	eeb4 0b40 	vcmp.f64	d0, d0
 8006e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e5a:	681e      	ldr	r6, [r3, #0]
 8006e5c:	d705      	bvc.n	8006e6a <_scanf_float+0x3f6>
 8006e5e:	4806      	ldr	r0, [pc, #24]	; (8006e78 <_scanf_float+0x404>)
 8006e60:	f000 f8b0 	bl	8006fc4 <nanf>
 8006e64:	ed86 0a00 	vstr	s0, [r6]
 8006e68:	e7d2      	b.n	8006e10 <_scanf_float+0x39c>
 8006e6a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8006e6e:	e7f9      	b.n	8006e64 <_scanf_float+0x3f0>
 8006e70:	2500      	movs	r5, #0
 8006e72:	e640      	b.n	8006af6 <_scanf_float+0x82>
 8006e74:	0800aea8 	.word	0x0800aea8
 8006e78:	0800b320 	.word	0x0800b320

08006e7c <iprintf>:
 8006e7c:	b40f      	push	{r0, r1, r2, r3}
 8006e7e:	4b0a      	ldr	r3, [pc, #40]	; (8006ea8 <iprintf+0x2c>)
 8006e80:	b513      	push	{r0, r1, r4, lr}
 8006e82:	681c      	ldr	r4, [r3, #0]
 8006e84:	b124      	cbz	r4, 8006e90 <iprintf+0x14>
 8006e86:	69a3      	ldr	r3, [r4, #24]
 8006e88:	b913      	cbnz	r3, 8006e90 <iprintf+0x14>
 8006e8a:	4620      	mov	r0, r4
 8006e8c:	f001 ff28 	bl	8008ce0 <__sinit>
 8006e90:	ab05      	add	r3, sp, #20
 8006e92:	9a04      	ldr	r2, [sp, #16]
 8006e94:	68a1      	ldr	r1, [r4, #8]
 8006e96:	9301      	str	r3, [sp, #4]
 8006e98:	4620      	mov	r0, r4
 8006e9a:	f003 fabd 	bl	800a418 <_vfiprintf_r>
 8006e9e:	b002      	add	sp, #8
 8006ea0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ea4:	b004      	add	sp, #16
 8006ea6:	4770      	bx	lr
 8006ea8:	20000010 	.word	0x20000010

08006eac <putchar>:
 8006eac:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <putchar+0x28>)
 8006eae:	b513      	push	{r0, r1, r4, lr}
 8006eb0:	681c      	ldr	r4, [r3, #0]
 8006eb2:	4601      	mov	r1, r0
 8006eb4:	b134      	cbz	r4, 8006ec4 <putchar+0x18>
 8006eb6:	69a3      	ldr	r3, [r4, #24]
 8006eb8:	b923      	cbnz	r3, 8006ec4 <putchar+0x18>
 8006eba:	9001      	str	r0, [sp, #4]
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f001 ff0f 	bl	8008ce0 <__sinit>
 8006ec2:	9901      	ldr	r1, [sp, #4]
 8006ec4:	68a2      	ldr	r2, [r4, #8]
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	b002      	add	sp, #8
 8006eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ece:	f003 bbd3 	b.w	800a678 <_putc_r>
 8006ed2:	bf00      	nop
 8006ed4:	20000010 	.word	0x20000010

08006ed8 <_puts_r>:
 8006ed8:	b570      	push	{r4, r5, r6, lr}
 8006eda:	460e      	mov	r6, r1
 8006edc:	4605      	mov	r5, r0
 8006ede:	b118      	cbz	r0, 8006ee8 <_puts_r+0x10>
 8006ee0:	6983      	ldr	r3, [r0, #24]
 8006ee2:	b90b      	cbnz	r3, 8006ee8 <_puts_r+0x10>
 8006ee4:	f001 fefc 	bl	8008ce0 <__sinit>
 8006ee8:	69ab      	ldr	r3, [r5, #24]
 8006eea:	68ac      	ldr	r4, [r5, #8]
 8006eec:	b913      	cbnz	r3, 8006ef4 <_puts_r+0x1c>
 8006eee:	4628      	mov	r0, r5
 8006ef0:	f001 fef6 	bl	8008ce0 <__sinit>
 8006ef4:	4b2c      	ldr	r3, [pc, #176]	; (8006fa8 <_puts_r+0xd0>)
 8006ef6:	429c      	cmp	r4, r3
 8006ef8:	d120      	bne.n	8006f3c <_puts_r+0x64>
 8006efa:	686c      	ldr	r4, [r5, #4]
 8006efc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006efe:	07db      	lsls	r3, r3, #31
 8006f00:	d405      	bmi.n	8006f0e <_puts_r+0x36>
 8006f02:	89a3      	ldrh	r3, [r4, #12]
 8006f04:	0598      	lsls	r0, r3, #22
 8006f06:	d402      	bmi.n	8006f0e <_puts_r+0x36>
 8006f08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f0a:	f002 fafa 	bl	8009502 <__retarget_lock_acquire_recursive>
 8006f0e:	89a3      	ldrh	r3, [r4, #12]
 8006f10:	0719      	lsls	r1, r3, #28
 8006f12:	d51d      	bpl.n	8006f50 <_puts_r+0x78>
 8006f14:	6923      	ldr	r3, [r4, #16]
 8006f16:	b1db      	cbz	r3, 8006f50 <_puts_r+0x78>
 8006f18:	3e01      	subs	r6, #1
 8006f1a:	68a3      	ldr	r3, [r4, #8]
 8006f1c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006f20:	3b01      	subs	r3, #1
 8006f22:	60a3      	str	r3, [r4, #8]
 8006f24:	bb39      	cbnz	r1, 8006f76 <_puts_r+0x9e>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	da38      	bge.n	8006f9c <_puts_r+0xc4>
 8006f2a:	4622      	mov	r2, r4
 8006f2c:	210a      	movs	r1, #10
 8006f2e:	4628      	mov	r0, r5
 8006f30:	f000 feec 	bl	8007d0c <__swbuf_r>
 8006f34:	3001      	adds	r0, #1
 8006f36:	d011      	beq.n	8006f5c <_puts_r+0x84>
 8006f38:	250a      	movs	r5, #10
 8006f3a:	e011      	b.n	8006f60 <_puts_r+0x88>
 8006f3c:	4b1b      	ldr	r3, [pc, #108]	; (8006fac <_puts_r+0xd4>)
 8006f3e:	429c      	cmp	r4, r3
 8006f40:	d101      	bne.n	8006f46 <_puts_r+0x6e>
 8006f42:	68ac      	ldr	r4, [r5, #8]
 8006f44:	e7da      	b.n	8006efc <_puts_r+0x24>
 8006f46:	4b1a      	ldr	r3, [pc, #104]	; (8006fb0 <_puts_r+0xd8>)
 8006f48:	429c      	cmp	r4, r3
 8006f4a:	bf08      	it	eq
 8006f4c:	68ec      	ldreq	r4, [r5, #12]
 8006f4e:	e7d5      	b.n	8006efc <_puts_r+0x24>
 8006f50:	4621      	mov	r1, r4
 8006f52:	4628      	mov	r0, r5
 8006f54:	f000 ff2c 	bl	8007db0 <__swsetup_r>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d0dd      	beq.n	8006f18 <_puts_r+0x40>
 8006f5c:	f04f 35ff 	mov.w	r5, #4294967295
 8006f60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f62:	07da      	lsls	r2, r3, #31
 8006f64:	d405      	bmi.n	8006f72 <_puts_r+0x9a>
 8006f66:	89a3      	ldrh	r3, [r4, #12]
 8006f68:	059b      	lsls	r3, r3, #22
 8006f6a:	d402      	bmi.n	8006f72 <_puts_r+0x9a>
 8006f6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f6e:	f002 fac9 	bl	8009504 <__retarget_lock_release_recursive>
 8006f72:	4628      	mov	r0, r5
 8006f74:	bd70      	pop	{r4, r5, r6, pc}
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	da04      	bge.n	8006f84 <_puts_r+0xac>
 8006f7a:	69a2      	ldr	r2, [r4, #24]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	dc06      	bgt.n	8006f8e <_puts_r+0xb6>
 8006f80:	290a      	cmp	r1, #10
 8006f82:	d004      	beq.n	8006f8e <_puts_r+0xb6>
 8006f84:	6823      	ldr	r3, [r4, #0]
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	6022      	str	r2, [r4, #0]
 8006f8a:	7019      	strb	r1, [r3, #0]
 8006f8c:	e7c5      	b.n	8006f1a <_puts_r+0x42>
 8006f8e:	4622      	mov	r2, r4
 8006f90:	4628      	mov	r0, r5
 8006f92:	f000 febb 	bl	8007d0c <__swbuf_r>
 8006f96:	3001      	adds	r0, #1
 8006f98:	d1bf      	bne.n	8006f1a <_puts_r+0x42>
 8006f9a:	e7df      	b.n	8006f5c <_puts_r+0x84>
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	250a      	movs	r5, #10
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	6022      	str	r2, [r4, #0]
 8006fa4:	701d      	strb	r5, [r3, #0]
 8006fa6:	e7db      	b.n	8006f60 <_puts_r+0x88>
 8006fa8:	0800b0b8 	.word	0x0800b0b8
 8006fac:	0800b0d8 	.word	0x0800b0d8
 8006fb0:	0800b098 	.word	0x0800b098

08006fb4 <puts>:
 8006fb4:	4b02      	ldr	r3, [pc, #8]	; (8006fc0 <puts+0xc>)
 8006fb6:	4601      	mov	r1, r0
 8006fb8:	6818      	ldr	r0, [r3, #0]
 8006fba:	f7ff bf8d 	b.w	8006ed8 <_puts_r>
 8006fbe:	bf00      	nop
 8006fc0:	20000010 	.word	0x20000010

08006fc4 <nanf>:
 8006fc4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006fcc <nanf+0x8>
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	7fc00000 	.word	0x7fc00000

08006fd0 <siprintf>:
 8006fd0:	b40e      	push	{r1, r2, r3}
 8006fd2:	b500      	push	{lr}
 8006fd4:	b09c      	sub	sp, #112	; 0x70
 8006fd6:	ab1d      	add	r3, sp, #116	; 0x74
 8006fd8:	9002      	str	r0, [sp, #8]
 8006fda:	9006      	str	r0, [sp, #24]
 8006fdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fe0:	4809      	ldr	r0, [pc, #36]	; (8007008 <siprintf+0x38>)
 8006fe2:	9107      	str	r1, [sp, #28]
 8006fe4:	9104      	str	r1, [sp, #16]
 8006fe6:	4909      	ldr	r1, [pc, #36]	; (800700c <siprintf+0x3c>)
 8006fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fec:	9105      	str	r1, [sp, #20]
 8006fee:	6800      	ldr	r0, [r0, #0]
 8006ff0:	9301      	str	r3, [sp, #4]
 8006ff2:	a902      	add	r1, sp, #8
 8006ff4:	f003 f8e6 	bl	800a1c4 <_svfiprintf_r>
 8006ff8:	9b02      	ldr	r3, [sp, #8]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	701a      	strb	r2, [r3, #0]
 8006ffe:	b01c      	add	sp, #112	; 0x70
 8007000:	f85d eb04 	ldr.w	lr, [sp], #4
 8007004:	b003      	add	sp, #12
 8007006:	4770      	bx	lr
 8007008:	20000010 	.word	0x20000010
 800700c:	ffff0208 	.word	0xffff0208

08007010 <sulp>:
 8007010:	b570      	push	{r4, r5, r6, lr}
 8007012:	4604      	mov	r4, r0
 8007014:	460d      	mov	r5, r1
 8007016:	4616      	mov	r6, r2
 8007018:	ec45 4b10 	vmov	d0, r4, r5
 800701c:	f002 fe6c 	bl	8009cf8 <__ulp>
 8007020:	b17e      	cbz	r6, 8007042 <sulp+0x32>
 8007022:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007026:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800702a:	2b00      	cmp	r3, #0
 800702c:	dd09      	ble.n	8007042 <sulp+0x32>
 800702e:	051b      	lsls	r3, r3, #20
 8007030:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8007034:	2000      	movs	r0, #0
 8007036:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800703a:	ec41 0b17 	vmov	d7, r0, r1
 800703e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007042:	bd70      	pop	{r4, r5, r6, pc}
 8007044:	0000      	movs	r0, r0
	...

08007048 <_strtod_l>:
 8007048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800704c:	ed2d 8b0c 	vpush	{d8-d13}
 8007050:	b09d      	sub	sp, #116	; 0x74
 8007052:	461f      	mov	r7, r3
 8007054:	2300      	movs	r3, #0
 8007056:	9318      	str	r3, [sp, #96]	; 0x60
 8007058:	4ba6      	ldr	r3, [pc, #664]	; (80072f4 <_strtod_l+0x2ac>)
 800705a:	9213      	str	r2, [sp, #76]	; 0x4c
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	9308      	str	r3, [sp, #32]
 8007060:	4604      	mov	r4, r0
 8007062:	4618      	mov	r0, r3
 8007064:	468a      	mov	sl, r1
 8007066:	f7f9 f8eb 	bl	8000240 <strlen>
 800706a:	f04f 0800 	mov.w	r8, #0
 800706e:	4605      	mov	r5, r0
 8007070:	f04f 0900 	mov.w	r9, #0
 8007074:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8007078:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800707a:	781a      	ldrb	r2, [r3, #0]
 800707c:	2a2b      	cmp	r2, #43	; 0x2b
 800707e:	d04d      	beq.n	800711c <_strtod_l+0xd4>
 8007080:	d83a      	bhi.n	80070f8 <_strtod_l+0xb0>
 8007082:	2a0d      	cmp	r2, #13
 8007084:	d833      	bhi.n	80070ee <_strtod_l+0xa6>
 8007086:	2a08      	cmp	r2, #8
 8007088:	d833      	bhi.n	80070f2 <_strtod_l+0xaa>
 800708a:	2a00      	cmp	r2, #0
 800708c:	d03d      	beq.n	800710a <_strtod_l+0xc2>
 800708e:	2300      	movs	r3, #0
 8007090:	930b      	str	r3, [sp, #44]	; 0x2c
 8007092:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007094:	7833      	ldrb	r3, [r6, #0]
 8007096:	2b30      	cmp	r3, #48	; 0x30
 8007098:	f040 80b6 	bne.w	8007208 <_strtod_l+0x1c0>
 800709c:	7873      	ldrb	r3, [r6, #1]
 800709e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80070a2:	2b58      	cmp	r3, #88	; 0x58
 80070a4:	d16d      	bne.n	8007182 <_strtod_l+0x13a>
 80070a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070a8:	9301      	str	r3, [sp, #4]
 80070aa:	ab18      	add	r3, sp, #96	; 0x60
 80070ac:	9702      	str	r7, [sp, #8]
 80070ae:	9300      	str	r3, [sp, #0]
 80070b0:	4a91      	ldr	r2, [pc, #580]	; (80072f8 <_strtod_l+0x2b0>)
 80070b2:	ab19      	add	r3, sp, #100	; 0x64
 80070b4:	a917      	add	r1, sp, #92	; 0x5c
 80070b6:	4620      	mov	r0, r4
 80070b8:	f001 ff16 	bl	8008ee8 <__gethex>
 80070bc:	f010 0507 	ands.w	r5, r0, #7
 80070c0:	4607      	mov	r7, r0
 80070c2:	d005      	beq.n	80070d0 <_strtod_l+0x88>
 80070c4:	2d06      	cmp	r5, #6
 80070c6:	d12b      	bne.n	8007120 <_strtod_l+0xd8>
 80070c8:	3601      	adds	r6, #1
 80070ca:	2300      	movs	r3, #0
 80070cc:	9617      	str	r6, [sp, #92]	; 0x5c
 80070ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80070d0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f040 856e 	bne.w	8007bb4 <_strtod_l+0xb6c>
 80070d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070da:	b1e3      	cbz	r3, 8007116 <_strtod_l+0xce>
 80070dc:	ec49 8b17 	vmov	d7, r8, r9
 80070e0:	eeb1 0b47 	vneg.f64	d0, d7
 80070e4:	b01d      	add	sp, #116	; 0x74
 80070e6:	ecbd 8b0c 	vpop	{d8-d13}
 80070ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ee:	2a20      	cmp	r2, #32
 80070f0:	d1cd      	bne.n	800708e <_strtod_l+0x46>
 80070f2:	3301      	adds	r3, #1
 80070f4:	9317      	str	r3, [sp, #92]	; 0x5c
 80070f6:	e7bf      	b.n	8007078 <_strtod_l+0x30>
 80070f8:	2a2d      	cmp	r2, #45	; 0x2d
 80070fa:	d1c8      	bne.n	800708e <_strtod_l+0x46>
 80070fc:	2201      	movs	r2, #1
 80070fe:	920b      	str	r2, [sp, #44]	; 0x2c
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	9217      	str	r2, [sp, #92]	; 0x5c
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1c3      	bne.n	8007092 <_strtod_l+0x4a>
 800710a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800710c:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8007110:	2b00      	cmp	r3, #0
 8007112:	f040 854d 	bne.w	8007bb0 <_strtod_l+0xb68>
 8007116:	ec49 8b10 	vmov	d0, r8, r9
 800711a:	e7e3      	b.n	80070e4 <_strtod_l+0x9c>
 800711c:	2200      	movs	r2, #0
 800711e:	e7ee      	b.n	80070fe <_strtod_l+0xb6>
 8007120:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007122:	b13a      	cbz	r2, 8007134 <_strtod_l+0xec>
 8007124:	2135      	movs	r1, #53	; 0x35
 8007126:	a81a      	add	r0, sp, #104	; 0x68
 8007128:	f002 fef2 	bl	8009f10 <__copybits>
 800712c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800712e:	4620      	mov	r0, r4
 8007130:	f002 fab6 	bl	80096a0 <_Bfree>
 8007134:	3d01      	subs	r5, #1
 8007136:	2d05      	cmp	r5, #5
 8007138:	d807      	bhi.n	800714a <_strtod_l+0x102>
 800713a:	e8df f005 	tbb	[pc, r5]
 800713e:	0b0e      	.short	0x0b0e
 8007140:	030e1d18 	.word	0x030e1d18
 8007144:	f04f 0900 	mov.w	r9, #0
 8007148:	46c8      	mov	r8, r9
 800714a:	073b      	lsls	r3, r7, #28
 800714c:	d5c0      	bpl.n	80070d0 <_strtod_l+0x88>
 800714e:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8007152:	e7bd      	b.n	80070d0 <_strtod_l+0x88>
 8007154:	e9dd 891a 	ldrd	r8, r9, [sp, #104]	; 0x68
 8007158:	e7f7      	b.n	800714a <_strtod_l+0x102>
 800715a:	e9dd 831a 	ldrd	r8, r3, [sp, #104]	; 0x68
 800715e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007160:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007164:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007168:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800716c:	e7ed      	b.n	800714a <_strtod_l+0x102>
 800716e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 80072fc <_strtod_l+0x2b4>
 8007172:	f04f 0800 	mov.w	r8, #0
 8007176:	e7e8      	b.n	800714a <_strtod_l+0x102>
 8007178:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800717c:	f04f 38ff 	mov.w	r8, #4294967295
 8007180:	e7e3      	b.n	800714a <_strtod_l+0x102>
 8007182:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	9217      	str	r2, [sp, #92]	; 0x5c
 8007188:	785b      	ldrb	r3, [r3, #1]
 800718a:	2b30      	cmp	r3, #48	; 0x30
 800718c:	d0f9      	beq.n	8007182 <_strtod_l+0x13a>
 800718e:	2b00      	cmp	r3, #0
 8007190:	d09e      	beq.n	80070d0 <_strtod_l+0x88>
 8007192:	2301      	movs	r3, #1
 8007194:	9306      	str	r3, [sp, #24]
 8007196:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007198:	930c      	str	r3, [sp, #48]	; 0x30
 800719a:	2300      	movs	r3, #0
 800719c:	9304      	str	r3, [sp, #16]
 800719e:	930a      	str	r3, [sp, #40]	; 0x28
 80071a0:	461e      	mov	r6, r3
 80071a2:	220a      	movs	r2, #10
 80071a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80071a6:	f890 b000 	ldrb.w	fp, [r0]
 80071aa:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
 80071ae:	b2d9      	uxtb	r1, r3
 80071b0:	2909      	cmp	r1, #9
 80071b2:	d92b      	bls.n	800720c <_strtod_l+0x1c4>
 80071b4:	9908      	ldr	r1, [sp, #32]
 80071b6:	462a      	mov	r2, r5
 80071b8:	f003 fb01 	bl	800a7be <strncmp>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d035      	beq.n	800722c <_strtod_l+0x1e4>
 80071c0:	2000      	movs	r0, #0
 80071c2:	465a      	mov	r2, fp
 80071c4:	4633      	mov	r3, r6
 80071c6:	4683      	mov	fp, r0
 80071c8:	4601      	mov	r1, r0
 80071ca:	2a65      	cmp	r2, #101	; 0x65
 80071cc:	d001      	beq.n	80071d2 <_strtod_l+0x18a>
 80071ce:	2a45      	cmp	r2, #69	; 0x45
 80071d0:	d118      	bne.n	8007204 <_strtod_l+0x1bc>
 80071d2:	b91b      	cbnz	r3, 80071dc <_strtod_l+0x194>
 80071d4:	9b06      	ldr	r3, [sp, #24]
 80071d6:	4303      	orrs	r3, r0
 80071d8:	d097      	beq.n	800710a <_strtod_l+0xc2>
 80071da:	2300      	movs	r3, #0
 80071dc:	f8dd a05c 	ldr.w	sl, [sp, #92]	; 0x5c
 80071e0:	f10a 0201 	add.w	r2, sl, #1
 80071e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80071e6:	f89a 2001 	ldrb.w	r2, [sl, #1]
 80071ea:	2a2b      	cmp	r2, #43	; 0x2b
 80071ec:	d077      	beq.n	80072de <_strtod_l+0x296>
 80071ee:	2a2d      	cmp	r2, #45	; 0x2d
 80071f0:	d07d      	beq.n	80072ee <_strtod_l+0x2a6>
 80071f2:	f04f 0e00 	mov.w	lr, #0
 80071f6:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80071fa:	2d09      	cmp	r5, #9
 80071fc:	f240 8084 	bls.w	8007308 <_strtod_l+0x2c0>
 8007200:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8007204:	2500      	movs	r5, #0
 8007206:	e09f      	b.n	8007348 <_strtod_l+0x300>
 8007208:	2300      	movs	r3, #0
 800720a:	e7c3      	b.n	8007194 <_strtod_l+0x14c>
 800720c:	2e08      	cmp	r6, #8
 800720e:	bfd5      	itete	le
 8007210:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007212:	9904      	ldrgt	r1, [sp, #16]
 8007214:	fb02 3301 	mlale	r3, r2, r1, r3
 8007218:	fb02 3301 	mlagt	r3, r2, r1, r3
 800721c:	f100 0001 	add.w	r0, r0, #1
 8007220:	bfd4      	ite	le
 8007222:	930a      	strle	r3, [sp, #40]	; 0x28
 8007224:	9304      	strgt	r3, [sp, #16]
 8007226:	3601      	adds	r6, #1
 8007228:	9017      	str	r0, [sp, #92]	; 0x5c
 800722a:	e7bb      	b.n	80071a4 <_strtod_l+0x15c>
 800722c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800722e:	195a      	adds	r2, r3, r5
 8007230:	9217      	str	r2, [sp, #92]	; 0x5c
 8007232:	5d5a      	ldrb	r2, [r3, r5]
 8007234:	b3ae      	cbz	r6, 80072a2 <_strtod_l+0x25a>
 8007236:	4683      	mov	fp, r0
 8007238:	4633      	mov	r3, r6
 800723a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800723e:	2909      	cmp	r1, #9
 8007240:	d912      	bls.n	8007268 <_strtod_l+0x220>
 8007242:	2101      	movs	r1, #1
 8007244:	e7c1      	b.n	80071ca <_strtod_l+0x182>
 8007246:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	9217      	str	r2, [sp, #92]	; 0x5c
 800724c:	785a      	ldrb	r2, [r3, #1]
 800724e:	3001      	adds	r0, #1
 8007250:	2a30      	cmp	r2, #48	; 0x30
 8007252:	d0f8      	beq.n	8007246 <_strtod_l+0x1fe>
 8007254:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007258:	2b08      	cmp	r3, #8
 800725a:	f200 84b0 	bhi.w	8007bbe <_strtod_l+0xb76>
 800725e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007260:	930c      	str	r3, [sp, #48]	; 0x30
 8007262:	4683      	mov	fp, r0
 8007264:	2000      	movs	r0, #0
 8007266:	4603      	mov	r3, r0
 8007268:	3a30      	subs	r2, #48	; 0x30
 800726a:	f100 0101 	add.w	r1, r0, #1
 800726e:	d012      	beq.n	8007296 <_strtod_l+0x24e>
 8007270:	448b      	add	fp, r1
 8007272:	eb00 0c03 	add.w	ip, r0, r3
 8007276:	4619      	mov	r1, r3
 8007278:	250a      	movs	r5, #10
 800727a:	4561      	cmp	r1, ip
 800727c:	d113      	bne.n	80072a6 <_strtod_l+0x25e>
 800727e:	1819      	adds	r1, r3, r0
 8007280:	2908      	cmp	r1, #8
 8007282:	f103 0301 	add.w	r3, r3, #1
 8007286:	4403      	add	r3, r0
 8007288:	dc1d      	bgt.n	80072c6 <_strtod_l+0x27e>
 800728a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800728c:	210a      	movs	r1, #10
 800728e:	fb01 2200 	mla	r2, r1, r0, r2
 8007292:	920a      	str	r2, [sp, #40]	; 0x28
 8007294:	2100      	movs	r1, #0
 8007296:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007298:	1c50      	adds	r0, r2, #1
 800729a:	9017      	str	r0, [sp, #92]	; 0x5c
 800729c:	7852      	ldrb	r2, [r2, #1]
 800729e:	4608      	mov	r0, r1
 80072a0:	e7cb      	b.n	800723a <_strtod_l+0x1f2>
 80072a2:	4630      	mov	r0, r6
 80072a4:	e7d4      	b.n	8007250 <_strtod_l+0x208>
 80072a6:	2908      	cmp	r1, #8
 80072a8:	dc04      	bgt.n	80072b4 <_strtod_l+0x26c>
 80072aa:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80072ac:	436f      	muls	r7, r5
 80072ae:	970a      	str	r7, [sp, #40]	; 0x28
 80072b0:	3101      	adds	r1, #1
 80072b2:	e7e2      	b.n	800727a <_strtod_l+0x232>
 80072b4:	f101 0e01 	add.w	lr, r1, #1
 80072b8:	f1be 0f10 	cmp.w	lr, #16
 80072bc:	bfde      	ittt	le
 80072be:	9f04      	ldrle	r7, [sp, #16]
 80072c0:	436f      	mulle	r7, r5
 80072c2:	9704      	strle	r7, [sp, #16]
 80072c4:	e7f4      	b.n	80072b0 <_strtod_l+0x268>
 80072c6:	2b10      	cmp	r3, #16
 80072c8:	bfdf      	itttt	le
 80072ca:	9804      	ldrle	r0, [sp, #16]
 80072cc:	210a      	movle	r1, #10
 80072ce:	fb01 2200 	mlale	r2, r1, r0, r2
 80072d2:	9204      	strle	r2, [sp, #16]
 80072d4:	e7de      	b.n	8007294 <_strtod_l+0x24c>
 80072d6:	f04f 0b00 	mov.w	fp, #0
 80072da:	2101      	movs	r1, #1
 80072dc:	e77a      	b.n	80071d4 <_strtod_l+0x18c>
 80072de:	f04f 0e00 	mov.w	lr, #0
 80072e2:	f10a 0202 	add.w	r2, sl, #2
 80072e6:	9217      	str	r2, [sp, #92]	; 0x5c
 80072e8:	f89a 2002 	ldrb.w	r2, [sl, #2]
 80072ec:	e783      	b.n	80071f6 <_strtod_l+0x1ae>
 80072ee:	f04f 0e01 	mov.w	lr, #1
 80072f2:	e7f6      	b.n	80072e2 <_strtod_l+0x29a>
 80072f4:	0800b164 	.word	0x0800b164
 80072f8:	0800aeb0 	.word	0x0800aeb0
 80072fc:	7ff00000 	.word	0x7ff00000
 8007300:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007302:	1c55      	adds	r5, r2, #1
 8007304:	9517      	str	r5, [sp, #92]	; 0x5c
 8007306:	7852      	ldrb	r2, [r2, #1]
 8007308:	2a30      	cmp	r2, #48	; 0x30
 800730a:	d0f9      	beq.n	8007300 <_strtod_l+0x2b8>
 800730c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8007310:	2d08      	cmp	r5, #8
 8007312:	f63f af77 	bhi.w	8007204 <_strtod_l+0x1bc>
 8007316:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800731a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800731c:	9208      	str	r2, [sp, #32]
 800731e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007320:	1c55      	adds	r5, r2, #1
 8007322:	9517      	str	r5, [sp, #92]	; 0x5c
 8007324:	7852      	ldrb	r2, [r2, #1]
 8007326:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800732a:	2f09      	cmp	r7, #9
 800732c:	d937      	bls.n	800739e <_strtod_l+0x356>
 800732e:	9f08      	ldr	r7, [sp, #32]
 8007330:	1bed      	subs	r5, r5, r7
 8007332:	2d08      	cmp	r5, #8
 8007334:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8007338:	dc02      	bgt.n	8007340 <_strtod_l+0x2f8>
 800733a:	4565      	cmp	r5, ip
 800733c:	bfa8      	it	ge
 800733e:	4665      	movge	r5, ip
 8007340:	f1be 0f00 	cmp.w	lr, #0
 8007344:	d000      	beq.n	8007348 <_strtod_l+0x300>
 8007346:	426d      	negs	r5, r5
 8007348:	2b00      	cmp	r3, #0
 800734a:	d14f      	bne.n	80073ec <_strtod_l+0x3a4>
 800734c:	9b06      	ldr	r3, [sp, #24]
 800734e:	4303      	orrs	r3, r0
 8007350:	f47f aebe 	bne.w	80070d0 <_strtod_l+0x88>
 8007354:	2900      	cmp	r1, #0
 8007356:	f47f aed8 	bne.w	800710a <_strtod_l+0xc2>
 800735a:	2a69      	cmp	r2, #105	; 0x69
 800735c:	d027      	beq.n	80073ae <_strtod_l+0x366>
 800735e:	dc24      	bgt.n	80073aa <_strtod_l+0x362>
 8007360:	2a49      	cmp	r2, #73	; 0x49
 8007362:	d024      	beq.n	80073ae <_strtod_l+0x366>
 8007364:	2a4e      	cmp	r2, #78	; 0x4e
 8007366:	f47f aed0 	bne.w	800710a <_strtod_l+0xc2>
 800736a:	499b      	ldr	r1, [pc, #620]	; (80075d8 <_strtod_l+0x590>)
 800736c:	a817      	add	r0, sp, #92	; 0x5c
 800736e:	f002 f813 	bl	8009398 <__match>
 8007372:	2800      	cmp	r0, #0
 8007374:	f43f aec9 	beq.w	800710a <_strtod_l+0xc2>
 8007378:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	2b28      	cmp	r3, #40	; 0x28
 800737e:	d12d      	bne.n	80073dc <_strtod_l+0x394>
 8007380:	4996      	ldr	r1, [pc, #600]	; (80075dc <_strtod_l+0x594>)
 8007382:	aa1a      	add	r2, sp, #104	; 0x68
 8007384:	a817      	add	r0, sp, #92	; 0x5c
 8007386:	f002 f81b 	bl	80093c0 <__hexnan>
 800738a:	2805      	cmp	r0, #5
 800738c:	d126      	bne.n	80073dc <_strtod_l+0x394>
 800738e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007390:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007394:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007398:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800739c:	e698      	b.n	80070d0 <_strtod_l+0x88>
 800739e:	250a      	movs	r5, #10
 80073a0:	fb05 250c 	mla	r5, r5, ip, r2
 80073a4:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 80073a8:	e7b9      	b.n	800731e <_strtod_l+0x2d6>
 80073aa:	2a6e      	cmp	r2, #110	; 0x6e
 80073ac:	e7db      	b.n	8007366 <_strtod_l+0x31e>
 80073ae:	498c      	ldr	r1, [pc, #560]	; (80075e0 <_strtod_l+0x598>)
 80073b0:	a817      	add	r0, sp, #92	; 0x5c
 80073b2:	f001 fff1 	bl	8009398 <__match>
 80073b6:	2800      	cmp	r0, #0
 80073b8:	f43f aea7 	beq.w	800710a <_strtod_l+0xc2>
 80073bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073be:	4989      	ldr	r1, [pc, #548]	; (80075e4 <_strtod_l+0x59c>)
 80073c0:	3b01      	subs	r3, #1
 80073c2:	a817      	add	r0, sp, #92	; 0x5c
 80073c4:	9317      	str	r3, [sp, #92]	; 0x5c
 80073c6:	f001 ffe7 	bl	8009398 <__match>
 80073ca:	b910      	cbnz	r0, 80073d2 <_strtod_l+0x38a>
 80073cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80073ce:	3301      	adds	r3, #1
 80073d0:	9317      	str	r3, [sp, #92]	; 0x5c
 80073d2:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80075f8 <_strtod_l+0x5b0>
 80073d6:	f04f 0800 	mov.w	r8, #0
 80073da:	e679      	b.n	80070d0 <_strtod_l+0x88>
 80073dc:	4882      	ldr	r0, [pc, #520]	; (80075e8 <_strtod_l+0x5a0>)
 80073de:	f003 f993 	bl	800a708 <nan>
 80073e2:	ed8d 0b04 	vstr	d0, [sp, #16]
 80073e6:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80073ea:	e671      	b.n	80070d0 <_strtod_l+0x88>
 80073ec:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
 80073f0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80073f4:	eba5 020b 	sub.w	r2, r5, fp
 80073f8:	2e00      	cmp	r6, #0
 80073fa:	bf08      	it	eq
 80073fc:	461e      	moveq	r6, r3
 80073fe:	2b10      	cmp	r3, #16
 8007400:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007404:	9206      	str	r2, [sp, #24]
 8007406:	461a      	mov	r2, r3
 8007408:	bfa8      	it	ge
 800740a:	2210      	movge	r2, #16
 800740c:	2b09      	cmp	r3, #9
 800740e:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8007412:	dd0e      	ble.n	8007432 <_strtod_l+0x3ea>
 8007414:	4975      	ldr	r1, [pc, #468]	; (80075ec <_strtod_l+0x5a4>)
 8007416:	eddd 7a04 	vldr	s15, [sp, #16]
 800741a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800741e:	ed11 6b12 	vldr	d6, [r1, #-72]	; 0xffffffb8
 8007422:	ed9d 5b08 	vldr	d5, [sp, #32]
 8007426:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800742a:	eea5 7b06 	vfma.f64	d7, d5, d6
 800742e:	ec59 8b17 	vmov	r8, r9, d7
 8007432:	2b0f      	cmp	r3, #15
 8007434:	dc37      	bgt.n	80074a6 <_strtod_l+0x45e>
 8007436:	9906      	ldr	r1, [sp, #24]
 8007438:	2900      	cmp	r1, #0
 800743a:	f43f ae49 	beq.w	80070d0 <_strtod_l+0x88>
 800743e:	dd23      	ble.n	8007488 <_strtod_l+0x440>
 8007440:	2916      	cmp	r1, #22
 8007442:	dc0b      	bgt.n	800745c <_strtod_l+0x414>
 8007444:	4b69      	ldr	r3, [pc, #420]	; (80075ec <_strtod_l+0x5a4>)
 8007446:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800744a:	ed93 7b00 	vldr	d7, [r3]
 800744e:	ec49 8b16 	vmov	d6, r8, r9
 8007452:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007456:	ec59 8b17 	vmov	r8, r9, d7
 800745a:	e639      	b.n	80070d0 <_strtod_l+0x88>
 800745c:	9806      	ldr	r0, [sp, #24]
 800745e:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8007462:	4281      	cmp	r1, r0
 8007464:	db1f      	blt.n	80074a6 <_strtod_l+0x45e>
 8007466:	4a61      	ldr	r2, [pc, #388]	; (80075ec <_strtod_l+0x5a4>)
 8007468:	f1c3 030f 	rsb	r3, r3, #15
 800746c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007470:	ed91 7b00 	vldr	d7, [r1]
 8007474:	ec49 8b16 	vmov	d6, r8, r9
 8007478:	1ac3      	subs	r3, r0, r3
 800747a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800747e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007482:	ed92 6b00 	vldr	d6, [r2]
 8007486:	e7e4      	b.n	8007452 <_strtod_l+0x40a>
 8007488:	9906      	ldr	r1, [sp, #24]
 800748a:	3116      	adds	r1, #22
 800748c:	db0b      	blt.n	80074a6 <_strtod_l+0x45e>
 800748e:	4b57      	ldr	r3, [pc, #348]	; (80075ec <_strtod_l+0x5a4>)
 8007490:	ebab 0505 	sub.w	r5, fp, r5
 8007494:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007498:	ed95 7b00 	vldr	d7, [r5]
 800749c:	ec49 8b16 	vmov	d6, r8, r9
 80074a0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80074a4:	e7d7      	b.n	8007456 <_strtod_l+0x40e>
 80074a6:	9906      	ldr	r1, [sp, #24]
 80074a8:	1a9a      	subs	r2, r3, r2
 80074aa:	440a      	add	r2, r1
 80074ac:	2a00      	cmp	r2, #0
 80074ae:	dd74      	ble.n	800759a <_strtod_l+0x552>
 80074b0:	f012 000f 	ands.w	r0, r2, #15
 80074b4:	d00a      	beq.n	80074cc <_strtod_l+0x484>
 80074b6:	494d      	ldr	r1, [pc, #308]	; (80075ec <_strtod_l+0x5a4>)
 80074b8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80074bc:	ed91 7b00 	vldr	d7, [r1]
 80074c0:	ec49 8b16 	vmov	d6, r8, r9
 80074c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80074c8:	ec59 8b17 	vmov	r8, r9, d7
 80074cc:	f032 020f 	bics.w	r2, r2, #15
 80074d0:	d04f      	beq.n	8007572 <_strtod_l+0x52a>
 80074d2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80074d6:	dd22      	ble.n	800751e <_strtod_l+0x4d6>
 80074d8:	2500      	movs	r5, #0
 80074da:	462e      	mov	r6, r5
 80074dc:	950a      	str	r5, [sp, #40]	; 0x28
 80074de:	462f      	mov	r7, r5
 80074e0:	2322      	movs	r3, #34	; 0x22
 80074e2:	f8df 9114 	ldr.w	r9, [pc, #276]	; 80075f8 <_strtod_l+0x5b0>
 80074e6:	6023      	str	r3, [r4, #0]
 80074e8:	f04f 0800 	mov.w	r8, #0
 80074ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f43f adee 	beq.w	80070d0 <_strtod_l+0x88>
 80074f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 80074f6:	4620      	mov	r0, r4
 80074f8:	f002 f8d2 	bl	80096a0 <_Bfree>
 80074fc:	4639      	mov	r1, r7
 80074fe:	4620      	mov	r0, r4
 8007500:	f002 f8ce 	bl	80096a0 <_Bfree>
 8007504:	4631      	mov	r1, r6
 8007506:	4620      	mov	r0, r4
 8007508:	f002 f8ca 	bl	80096a0 <_Bfree>
 800750c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800750e:	4620      	mov	r0, r4
 8007510:	f002 f8c6 	bl	80096a0 <_Bfree>
 8007514:	4629      	mov	r1, r5
 8007516:	4620      	mov	r0, r4
 8007518:	f002 f8c2 	bl	80096a0 <_Bfree>
 800751c:	e5d8      	b.n	80070d0 <_strtod_l+0x88>
 800751e:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8007522:	2000      	movs	r0, #0
 8007524:	4f32      	ldr	r7, [pc, #200]	; (80075f0 <_strtod_l+0x5a8>)
 8007526:	1112      	asrs	r2, r2, #4
 8007528:	4601      	mov	r1, r0
 800752a:	2a01      	cmp	r2, #1
 800752c:	dc24      	bgt.n	8007578 <_strtod_l+0x530>
 800752e:	b108      	cbz	r0, 8007534 <_strtod_l+0x4ec>
 8007530:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007534:	4a2e      	ldr	r2, [pc, #184]	; (80075f0 <_strtod_l+0x5a8>)
 8007536:	482f      	ldr	r0, [pc, #188]	; (80075f4 <_strtod_l+0x5ac>)
 8007538:	eb02 01c1 	add.w	r1, r2, r1, lsl #3
 800753c:	ed91 7b00 	vldr	d7, [r1]
 8007540:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007544:	ec49 8b16 	vmov	d6, r8, r9
 8007548:	ee27 7b06 	vmul.f64	d7, d7, d6
 800754c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007550:	9905      	ldr	r1, [sp, #20]
 8007552:	4a29      	ldr	r2, [pc, #164]	; (80075f8 <_strtod_l+0x5b0>)
 8007554:	400a      	ands	r2, r1
 8007556:	4282      	cmp	r2, r0
 8007558:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800755c:	d8bc      	bhi.n	80074d8 <_strtod_l+0x490>
 800755e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8007562:	4282      	cmp	r2, r0
 8007564:	bf86      	itte	hi
 8007566:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80075fc <_strtod_l+0x5b4>
 800756a:	f04f 38ff 	movhi.w	r8, #4294967295
 800756e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8007572:	2200      	movs	r2, #0
 8007574:	9204      	str	r2, [sp, #16]
 8007576:	e07f      	b.n	8007678 <_strtod_l+0x630>
 8007578:	f012 0f01 	tst.w	r2, #1
 800757c:	d00a      	beq.n	8007594 <_strtod_l+0x54c>
 800757e:	eb07 00c1 	add.w	r0, r7, r1, lsl #3
 8007582:	ed90 7b00 	vldr	d7, [r0]
 8007586:	ed9d 6b04 	vldr	d6, [sp, #16]
 800758a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800758e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007592:	2001      	movs	r0, #1
 8007594:	3101      	adds	r1, #1
 8007596:	1052      	asrs	r2, r2, #1
 8007598:	e7c7      	b.n	800752a <_strtod_l+0x4e2>
 800759a:	d0ea      	beq.n	8007572 <_strtod_l+0x52a>
 800759c:	4252      	negs	r2, r2
 800759e:	f012 000f 	ands.w	r0, r2, #15
 80075a2:	d00a      	beq.n	80075ba <_strtod_l+0x572>
 80075a4:	4911      	ldr	r1, [pc, #68]	; (80075ec <_strtod_l+0x5a4>)
 80075a6:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80075aa:	ed91 7b00 	vldr	d7, [r1]
 80075ae:	ec49 8b16 	vmov	d6, r8, r9
 80075b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80075b6:	ec59 8b17 	vmov	r8, r9, d7
 80075ba:	1112      	asrs	r2, r2, #4
 80075bc:	d0d9      	beq.n	8007572 <_strtod_l+0x52a>
 80075be:	2a1f      	cmp	r2, #31
 80075c0:	dd1e      	ble.n	8007600 <_strtod_l+0x5b8>
 80075c2:	2500      	movs	r5, #0
 80075c4:	462e      	mov	r6, r5
 80075c6:	950a      	str	r5, [sp, #40]	; 0x28
 80075c8:	462f      	mov	r7, r5
 80075ca:	2322      	movs	r3, #34	; 0x22
 80075cc:	f04f 0800 	mov.w	r8, #0
 80075d0:	f04f 0900 	mov.w	r9, #0
 80075d4:	6023      	str	r3, [r4, #0]
 80075d6:	e789      	b.n	80074ec <_strtod_l+0x4a4>
 80075d8:	0800ae81 	.word	0x0800ae81
 80075dc:	0800aec4 	.word	0x0800aec4
 80075e0:	0800ae79 	.word	0x0800ae79
 80075e4:	0800b004 	.word	0x0800b004
 80075e8:	0800b320 	.word	0x0800b320
 80075ec:	0800b200 	.word	0x0800b200
 80075f0:	0800b1d8 	.word	0x0800b1d8
 80075f4:	7ca00000 	.word	0x7ca00000
 80075f8:	7ff00000 	.word	0x7ff00000
 80075fc:	7fefffff 	.word	0x7fefffff
 8007600:	f012 0110 	ands.w	r1, r2, #16
 8007604:	bf18      	it	ne
 8007606:	216a      	movne	r1, #106	; 0x6a
 8007608:	e9cd 8908 	strd	r8, r9, [sp, #32]
 800760c:	9104      	str	r1, [sp, #16]
 800760e:	49c0      	ldr	r1, [pc, #768]	; (8007910 <_strtod_l+0x8c8>)
 8007610:	2000      	movs	r0, #0
 8007612:	07d7      	lsls	r7, r2, #31
 8007614:	d508      	bpl.n	8007628 <_strtod_l+0x5e0>
 8007616:	ed9d 6b08 	vldr	d6, [sp, #32]
 800761a:	ed91 7b00 	vldr	d7, [r1]
 800761e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007622:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007626:	2001      	movs	r0, #1
 8007628:	1052      	asrs	r2, r2, #1
 800762a:	f101 0108 	add.w	r1, r1, #8
 800762e:	d1f0      	bne.n	8007612 <_strtod_l+0x5ca>
 8007630:	b108      	cbz	r0, 8007636 <_strtod_l+0x5ee>
 8007632:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8007636:	9a04      	ldr	r2, [sp, #16]
 8007638:	b1ba      	cbz	r2, 800766a <_strtod_l+0x622>
 800763a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800763e:	f1c2 026b 	rsb	r2, r2, #107	; 0x6b
 8007642:	2a00      	cmp	r2, #0
 8007644:	4649      	mov	r1, r9
 8007646:	dd10      	ble.n	800766a <_strtod_l+0x622>
 8007648:	2a1f      	cmp	r2, #31
 800764a:	f340 8132 	ble.w	80078b2 <_strtod_l+0x86a>
 800764e:	2a34      	cmp	r2, #52	; 0x34
 8007650:	bfde      	ittt	le
 8007652:	3a20      	suble	r2, #32
 8007654:	f04f 30ff 	movle.w	r0, #4294967295
 8007658:	fa00 f202 	lslle.w	r2, r0, r2
 800765c:	f04f 0800 	mov.w	r8, #0
 8007660:	bfcc      	ite	gt
 8007662:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007666:	ea02 0901 	andle.w	r9, r2, r1
 800766a:	ec49 8b17 	vmov	d7, r8, r9
 800766e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007676:	d0a4      	beq.n	80075c2 <_strtod_l+0x57a>
 8007678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800767a:	9200      	str	r2, [sp, #0]
 800767c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800767e:	4632      	mov	r2, r6
 8007680:	4620      	mov	r0, r4
 8007682:	f002 f879 	bl	8009778 <__s2b>
 8007686:	900a      	str	r0, [sp, #40]	; 0x28
 8007688:	2800      	cmp	r0, #0
 800768a:	f43f af25 	beq.w	80074d8 <_strtod_l+0x490>
 800768e:	9b06      	ldr	r3, [sp, #24]
 8007690:	ebab 0505 	sub.w	r5, fp, r5
 8007694:	2b00      	cmp	r3, #0
 8007696:	bfb4      	ite	lt
 8007698:	462b      	movlt	r3, r5
 800769a:	2300      	movge	r3, #0
 800769c:	930c      	str	r3, [sp, #48]	; 0x30
 800769e:	9b06      	ldr	r3, [sp, #24]
 80076a0:	ed9f 9b95 	vldr	d9, [pc, #596]	; 80078f8 <_strtod_l+0x8b0>
 80076a4:	ed9f ab96 	vldr	d10, [pc, #600]	; 8007900 <_strtod_l+0x8b8>
 80076a8:	ed9f bb97 	vldr	d11, [pc, #604]	; 8007908 <_strtod_l+0x8c0>
 80076ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80076b0:	2500      	movs	r5, #0
 80076b2:	9312      	str	r3, [sp, #72]	; 0x48
 80076b4:	462e      	mov	r6, r5
 80076b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076b8:	4620      	mov	r0, r4
 80076ba:	6859      	ldr	r1, [r3, #4]
 80076bc:	f001 ffb0 	bl	8009620 <_Balloc>
 80076c0:	4607      	mov	r7, r0
 80076c2:	2800      	cmp	r0, #0
 80076c4:	f43f af0c 	beq.w	80074e0 <_strtod_l+0x498>
 80076c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ca:	691a      	ldr	r2, [r3, #16]
 80076cc:	3202      	adds	r2, #2
 80076ce:	f103 010c 	add.w	r1, r3, #12
 80076d2:	0092      	lsls	r2, r2, #2
 80076d4:	300c      	adds	r0, #12
 80076d6:	f001 ff95 	bl	8009604 <memcpy>
 80076da:	ec49 8b10 	vmov	d0, r8, r9
 80076de:	aa1a      	add	r2, sp, #104	; 0x68
 80076e0:	a919      	add	r1, sp, #100	; 0x64
 80076e2:	4620      	mov	r0, r4
 80076e4:	e9cd 8908 	strd	r8, r9, [sp, #32]
 80076e8:	f002 fb82 	bl	8009df0 <__d2b>
 80076ec:	9018      	str	r0, [sp, #96]	; 0x60
 80076ee:	2800      	cmp	r0, #0
 80076f0:	f43f aef6 	beq.w	80074e0 <_strtod_l+0x498>
 80076f4:	2101      	movs	r1, #1
 80076f6:	4620      	mov	r0, r4
 80076f8:	f002 f8d8 	bl	80098ac <__i2b>
 80076fc:	4606      	mov	r6, r0
 80076fe:	2800      	cmp	r0, #0
 8007700:	f43f aeee 	beq.w	80074e0 <_strtod_l+0x498>
 8007704:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007706:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007708:	2b00      	cmp	r3, #0
 800770a:	bfab      	itete	ge
 800770c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800770e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007710:	f8dd a048 	ldrge.w	sl, [sp, #72]	; 0x48
 8007714:	f8dd b030 	ldrlt.w	fp, [sp, #48]	; 0x30
 8007718:	bfac      	ite	ge
 800771a:	eb03 0b02 	addge.w	fp, r3, r2
 800771e:	eba2 0a03 	sublt.w	sl, r2, r3
 8007722:	9a04      	ldr	r2, [sp, #16]
 8007724:	1a9b      	subs	r3, r3, r2
 8007726:	440b      	add	r3, r1
 8007728:	4a7a      	ldr	r2, [pc, #488]	; (8007914 <_strtod_l+0x8cc>)
 800772a:	3b01      	subs	r3, #1
 800772c:	4293      	cmp	r3, r2
 800772e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8007732:	f280 80d1 	bge.w	80078d8 <_strtod_l+0x890>
 8007736:	1ad2      	subs	r2, r2, r3
 8007738:	2a1f      	cmp	r2, #31
 800773a:	eba1 0102 	sub.w	r1, r1, r2
 800773e:	f04f 0001 	mov.w	r0, #1
 8007742:	f300 80bd 	bgt.w	80078c0 <_strtod_l+0x878>
 8007746:	fa00 f302 	lsl.w	r3, r0, r2
 800774a:	930e      	str	r3, [sp, #56]	; 0x38
 800774c:	2300      	movs	r3, #0
 800774e:	930d      	str	r3, [sp, #52]	; 0x34
 8007750:	eb0b 0301 	add.w	r3, fp, r1
 8007754:	9a04      	ldr	r2, [sp, #16]
 8007756:	459b      	cmp	fp, r3
 8007758:	448a      	add	sl, r1
 800775a:	4492      	add	sl, r2
 800775c:	465a      	mov	r2, fp
 800775e:	bfa8      	it	ge
 8007760:	461a      	movge	r2, r3
 8007762:	4552      	cmp	r2, sl
 8007764:	bfa8      	it	ge
 8007766:	4652      	movge	r2, sl
 8007768:	2a00      	cmp	r2, #0
 800776a:	bfc2      	ittt	gt
 800776c:	1a9b      	subgt	r3, r3, r2
 800776e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8007772:	ebab 0b02 	subgt.w	fp, fp, r2
 8007776:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007778:	2a00      	cmp	r2, #0
 800777a:	dd18      	ble.n	80077ae <_strtod_l+0x766>
 800777c:	4631      	mov	r1, r6
 800777e:	4620      	mov	r0, r4
 8007780:	9315      	str	r3, [sp, #84]	; 0x54
 8007782:	f002 f94f 	bl	8009a24 <__pow5mult>
 8007786:	4606      	mov	r6, r0
 8007788:	2800      	cmp	r0, #0
 800778a:	f43f aea9 	beq.w	80074e0 <_strtod_l+0x498>
 800778e:	4601      	mov	r1, r0
 8007790:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007792:	4620      	mov	r0, r4
 8007794:	f002 f8a0 	bl	80098d8 <__multiply>
 8007798:	9014      	str	r0, [sp, #80]	; 0x50
 800779a:	2800      	cmp	r0, #0
 800779c:	f43f aea0 	beq.w	80074e0 <_strtod_l+0x498>
 80077a0:	9918      	ldr	r1, [sp, #96]	; 0x60
 80077a2:	4620      	mov	r0, r4
 80077a4:	f001 ff7c 	bl	80096a0 <_Bfree>
 80077a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80077aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077ac:	9218      	str	r2, [sp, #96]	; 0x60
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f300 8097 	bgt.w	80078e2 <_strtod_l+0x89a>
 80077b4:	9b06      	ldr	r3, [sp, #24]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	dd08      	ble.n	80077cc <_strtod_l+0x784>
 80077ba:	4639      	mov	r1, r7
 80077bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80077be:	4620      	mov	r0, r4
 80077c0:	f002 f930 	bl	8009a24 <__pow5mult>
 80077c4:	4607      	mov	r7, r0
 80077c6:	2800      	cmp	r0, #0
 80077c8:	f43f ae8a 	beq.w	80074e0 <_strtod_l+0x498>
 80077cc:	f1ba 0f00 	cmp.w	sl, #0
 80077d0:	dd08      	ble.n	80077e4 <_strtod_l+0x79c>
 80077d2:	4639      	mov	r1, r7
 80077d4:	4652      	mov	r2, sl
 80077d6:	4620      	mov	r0, r4
 80077d8:	f002 f97e 	bl	8009ad8 <__lshift>
 80077dc:	4607      	mov	r7, r0
 80077de:	2800      	cmp	r0, #0
 80077e0:	f43f ae7e 	beq.w	80074e0 <_strtod_l+0x498>
 80077e4:	f1bb 0f00 	cmp.w	fp, #0
 80077e8:	dd08      	ble.n	80077fc <_strtod_l+0x7b4>
 80077ea:	4631      	mov	r1, r6
 80077ec:	465a      	mov	r2, fp
 80077ee:	4620      	mov	r0, r4
 80077f0:	f002 f972 	bl	8009ad8 <__lshift>
 80077f4:	4606      	mov	r6, r0
 80077f6:	2800      	cmp	r0, #0
 80077f8:	f43f ae72 	beq.w	80074e0 <_strtod_l+0x498>
 80077fc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80077fe:	463a      	mov	r2, r7
 8007800:	4620      	mov	r0, r4
 8007802:	f002 f9f1 	bl	8009be8 <__mdiff>
 8007806:	4605      	mov	r5, r0
 8007808:	2800      	cmp	r0, #0
 800780a:	f43f ae69 	beq.w	80074e0 <_strtod_l+0x498>
 800780e:	2300      	movs	r3, #0
 8007810:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8007814:	60c3      	str	r3, [r0, #12]
 8007816:	4631      	mov	r1, r6
 8007818:	f002 f9ca 	bl	8009bb0 <__mcmp>
 800781c:	2800      	cmp	r0, #0
 800781e:	da7f      	bge.n	8007920 <_strtod_l+0x8d8>
 8007820:	ea5a 0308 	orrs.w	r3, sl, r8
 8007824:	f040 80a5 	bne.w	8007972 <_strtod_l+0x92a>
 8007828:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800782c:	2b00      	cmp	r3, #0
 800782e:	f040 80a0 	bne.w	8007972 <_strtod_l+0x92a>
 8007832:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007836:	0d1b      	lsrs	r3, r3, #20
 8007838:	051b      	lsls	r3, r3, #20
 800783a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800783e:	f240 8098 	bls.w	8007972 <_strtod_l+0x92a>
 8007842:	696b      	ldr	r3, [r5, #20]
 8007844:	b91b      	cbnz	r3, 800784e <_strtod_l+0x806>
 8007846:	692b      	ldr	r3, [r5, #16]
 8007848:	2b01      	cmp	r3, #1
 800784a:	f340 8092 	ble.w	8007972 <_strtod_l+0x92a>
 800784e:	4629      	mov	r1, r5
 8007850:	2201      	movs	r2, #1
 8007852:	4620      	mov	r0, r4
 8007854:	f002 f940 	bl	8009ad8 <__lshift>
 8007858:	4631      	mov	r1, r6
 800785a:	4605      	mov	r5, r0
 800785c:	f002 f9a8 	bl	8009bb0 <__mcmp>
 8007860:	2800      	cmp	r0, #0
 8007862:	f340 8086 	ble.w	8007972 <_strtod_l+0x92a>
 8007866:	9904      	ldr	r1, [sp, #16]
 8007868:	4a2b      	ldr	r2, [pc, #172]	; (8007918 <_strtod_l+0x8d0>)
 800786a:	464b      	mov	r3, r9
 800786c:	2900      	cmp	r1, #0
 800786e:	f000 80a1 	beq.w	80079b4 <_strtod_l+0x96c>
 8007872:	ea02 0109 	and.w	r1, r2, r9
 8007876:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800787a:	f300 809b 	bgt.w	80079b4 <_strtod_l+0x96c>
 800787e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007882:	f77f aea2 	ble.w	80075ca <_strtod_l+0x582>
 8007886:	4a25      	ldr	r2, [pc, #148]	; (800791c <_strtod_l+0x8d4>)
 8007888:	2300      	movs	r3, #0
 800788a:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 800788e:	ed9d 6b10 	vldr	d6, [sp, #64]	; 0x40
 8007892:	ec49 8b17 	vmov	d7, r8, r9
 8007896:	ee27 7b06 	vmul.f64	d7, d7, d6
 800789a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800789e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	bf08      	it	eq
 80078a6:	2322      	moveq	r3, #34	; 0x22
 80078a8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80078ac:	bf08      	it	eq
 80078ae:	6023      	streq	r3, [r4, #0]
 80078b0:	e620      	b.n	80074f4 <_strtod_l+0x4ac>
 80078b2:	f04f 31ff 	mov.w	r1, #4294967295
 80078b6:	fa01 f202 	lsl.w	r2, r1, r2
 80078ba:	ea02 0808 	and.w	r8, r2, r8
 80078be:	e6d4      	b.n	800766a <_strtod_l+0x622>
 80078c0:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80078c4:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80078c8:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80078cc:	33e2      	adds	r3, #226	; 0xe2
 80078ce:	fa00 f303 	lsl.w	r3, r0, r3
 80078d2:	e9cd 300d 	strd	r3, r0, [sp, #52]	; 0x34
 80078d6:	e73b      	b.n	8007750 <_strtod_l+0x708>
 80078d8:	2000      	movs	r0, #0
 80078da:	2301      	movs	r3, #1
 80078dc:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
 80078e0:	e736      	b.n	8007750 <_strtod_l+0x708>
 80078e2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80078e4:	461a      	mov	r2, r3
 80078e6:	4620      	mov	r0, r4
 80078e8:	f002 f8f6 	bl	8009ad8 <__lshift>
 80078ec:	9018      	str	r0, [sp, #96]	; 0x60
 80078ee:	2800      	cmp	r0, #0
 80078f0:	f47f af60 	bne.w	80077b4 <_strtod_l+0x76c>
 80078f4:	e5f4      	b.n	80074e0 <_strtod_l+0x498>
 80078f6:	bf00      	nop
 80078f8:	94a03595 	.word	0x94a03595
 80078fc:	3fcfffff 	.word	0x3fcfffff
 8007900:	94a03595 	.word	0x94a03595
 8007904:	3fdfffff 	.word	0x3fdfffff
 8007908:	35afe535 	.word	0x35afe535
 800790c:	3fe00000 	.word	0x3fe00000
 8007910:	0800aed8 	.word	0x0800aed8
 8007914:	fffffc02 	.word	0xfffffc02
 8007918:	7ff00000 	.word	0x7ff00000
 800791c:	39500000 	.word	0x39500000
 8007920:	46cb      	mov	fp, r9
 8007922:	d165      	bne.n	80079f0 <_strtod_l+0x9a8>
 8007924:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007928:	f1ba 0f00 	cmp.w	sl, #0
 800792c:	d02a      	beq.n	8007984 <_strtod_l+0x93c>
 800792e:	4aaa      	ldr	r2, [pc, #680]	; (8007bd8 <_strtod_l+0xb90>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d12b      	bne.n	800798c <_strtod_l+0x944>
 8007934:	9b04      	ldr	r3, [sp, #16]
 8007936:	4641      	mov	r1, r8
 8007938:	b1fb      	cbz	r3, 800797a <_strtod_l+0x932>
 800793a:	4aa8      	ldr	r2, [pc, #672]	; (8007bdc <_strtod_l+0xb94>)
 800793c:	ea09 0202 	and.w	r2, r9, r2
 8007940:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007944:	f04f 30ff 	mov.w	r0, #4294967295
 8007948:	d81a      	bhi.n	8007980 <_strtod_l+0x938>
 800794a:	0d12      	lsrs	r2, r2, #20
 800794c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007950:	fa00 f303 	lsl.w	r3, r0, r3
 8007954:	4299      	cmp	r1, r3
 8007956:	d119      	bne.n	800798c <_strtod_l+0x944>
 8007958:	4ba1      	ldr	r3, [pc, #644]	; (8007be0 <_strtod_l+0xb98>)
 800795a:	459b      	cmp	fp, r3
 800795c:	d102      	bne.n	8007964 <_strtod_l+0x91c>
 800795e:	3101      	adds	r1, #1
 8007960:	f43f adbe 	beq.w	80074e0 <_strtod_l+0x498>
 8007964:	4b9d      	ldr	r3, [pc, #628]	; (8007bdc <_strtod_l+0xb94>)
 8007966:	ea0b 0303 	and.w	r3, fp, r3
 800796a:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800796e:	f04f 0800 	mov.w	r8, #0
 8007972:	9b04      	ldr	r3, [sp, #16]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d186      	bne.n	8007886 <_strtod_l+0x83e>
 8007978:	e5bc      	b.n	80074f4 <_strtod_l+0x4ac>
 800797a:	f04f 33ff 	mov.w	r3, #4294967295
 800797e:	e7e9      	b.n	8007954 <_strtod_l+0x90c>
 8007980:	4603      	mov	r3, r0
 8007982:	e7e7      	b.n	8007954 <_strtod_l+0x90c>
 8007984:	ea53 0308 	orrs.w	r3, r3, r8
 8007988:	f43f af6d 	beq.w	8007866 <_strtod_l+0x81e>
 800798c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800798e:	b1db      	cbz	r3, 80079c8 <_strtod_l+0x980>
 8007990:	ea13 0f0b 	tst.w	r3, fp
 8007994:	d0ed      	beq.n	8007972 <_strtod_l+0x92a>
 8007996:	9a04      	ldr	r2, [sp, #16]
 8007998:	4640      	mov	r0, r8
 800799a:	4649      	mov	r1, r9
 800799c:	f1ba 0f00 	cmp.w	sl, #0
 80079a0:	d016      	beq.n	80079d0 <_strtod_l+0x988>
 80079a2:	f7ff fb35 	bl	8007010 <sulp>
 80079a6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80079aa:	ee37 7b00 	vadd.f64	d7, d7, d0
 80079ae:	ec59 8b17 	vmov	r8, r9, d7
 80079b2:	e7de      	b.n	8007972 <_strtod_l+0x92a>
 80079b4:	4013      	ands	r3, r2
 80079b6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80079ba:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80079be:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80079c2:	f04f 38ff 	mov.w	r8, #4294967295
 80079c6:	e7d4      	b.n	8007972 <_strtod_l+0x92a>
 80079c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079ca:	ea13 0f08 	tst.w	r3, r8
 80079ce:	e7e1      	b.n	8007994 <_strtod_l+0x94c>
 80079d0:	f7ff fb1e 	bl	8007010 <sulp>
 80079d4:	ed9d 7b08 	vldr	d7, [sp, #32]
 80079d8:	ee37 7b40 	vsub.f64	d7, d7, d0
 80079dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80079e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80079e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e8:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80079ec:	d1c1      	bne.n	8007972 <_strtod_l+0x92a>
 80079ee:	e5ec      	b.n	80075ca <_strtod_l+0x582>
 80079f0:	4631      	mov	r1, r6
 80079f2:	4628      	mov	r0, r5
 80079f4:	f002 fa58 	bl	8009ea8 <__ratio>
 80079f8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80079fc:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a04:	d867      	bhi.n	8007ad6 <_strtod_l+0xa8e>
 8007a06:	f1ba 0f00 	cmp.w	sl, #0
 8007a0a:	d044      	beq.n	8007a96 <_strtod_l+0xa4e>
 8007a0c:	4b75      	ldr	r3, [pc, #468]	; (8007be4 <_strtod_l+0xb9c>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 8007a14:	4971      	ldr	r1, [pc, #452]	; (8007bdc <_strtod_l+0xb94>)
 8007a16:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8007bf0 <_strtod_l+0xba8>
 8007a1a:	ea0b 0001 	and.w	r0, fp, r1
 8007a1e:	4560      	cmp	r0, ip
 8007a20:	900d      	str	r0, [sp, #52]	; 0x34
 8007a22:	f040 808b 	bne.w	8007b3c <_strtod_l+0xaf4>
 8007a26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007a2a:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8007a2e:	ec49 8b10 	vmov	d0, r8, r9
 8007a32:	ec43 2b1c 	vmov	d12, r2, r3
 8007a36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007a3a:	f002 f95d 	bl	8009cf8 <__ulp>
 8007a3e:	ec49 8b1d 	vmov	d13, r8, r9
 8007a42:	eeac db00 	vfma.f64	d13, d12, d0
 8007a46:	ed8d db0e 	vstr	d13, [sp, #56]	; 0x38
 8007a4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007a4c:	4963      	ldr	r1, [pc, #396]	; (8007bdc <_strtod_l+0xb94>)
 8007a4e:	4a66      	ldr	r2, [pc, #408]	; (8007be8 <_strtod_l+0xba0>)
 8007a50:	4019      	ands	r1, r3
 8007a52:	4291      	cmp	r1, r2
 8007a54:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
 8007a58:	d947      	bls.n	8007aea <_strtod_l+0xaa2>
 8007a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a5c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d103      	bne.n	8007a6c <_strtod_l+0xa24>
 8007a64:	9b08      	ldr	r3, [sp, #32]
 8007a66:	3301      	adds	r3, #1
 8007a68:	f43f ad3a 	beq.w	80074e0 <_strtod_l+0x498>
 8007a6c:	f8df 9170 	ldr.w	r9, [pc, #368]	; 8007be0 <_strtod_l+0xb98>
 8007a70:	f04f 38ff 	mov.w	r8, #4294967295
 8007a74:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007a76:	4620      	mov	r0, r4
 8007a78:	f001 fe12 	bl	80096a0 <_Bfree>
 8007a7c:	4639      	mov	r1, r7
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f001 fe0e 	bl	80096a0 <_Bfree>
 8007a84:	4631      	mov	r1, r6
 8007a86:	4620      	mov	r0, r4
 8007a88:	f001 fe0a 	bl	80096a0 <_Bfree>
 8007a8c:	4629      	mov	r1, r5
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f001 fe06 	bl	80096a0 <_Bfree>
 8007a94:	e60f      	b.n	80076b6 <_strtod_l+0x66e>
 8007a96:	f1b8 0f00 	cmp.w	r8, #0
 8007a9a:	d112      	bne.n	8007ac2 <_strtod_l+0xa7a>
 8007a9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007aa0:	b9b3      	cbnz	r3, 8007ad0 <_strtod_l+0xa88>
 8007aa2:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8007aa6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aae:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8007ab2:	d401      	bmi.n	8007ab8 <_strtod_l+0xa70>
 8007ab4:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007ab8:	eeb1 7b48 	vneg.f64	d7, d8
 8007abc:	ec53 2b17 	vmov	r2, r3, d7
 8007ac0:	e7a8      	b.n	8007a14 <_strtod_l+0x9cc>
 8007ac2:	f1b8 0f01 	cmp.w	r8, #1
 8007ac6:	d103      	bne.n	8007ad0 <_strtod_l+0xa88>
 8007ac8:	f1b9 0f00 	cmp.w	r9, #0
 8007acc:	f43f ad7d 	beq.w	80075ca <_strtod_l+0x582>
 8007ad0:	4b46      	ldr	r3, [pc, #280]	; (8007bec <_strtod_l+0xba4>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	e79c      	b.n	8007a10 <_strtod_l+0x9c8>
 8007ad6:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 8007ada:	ee20 8b08 	vmul.f64	d8, d0, d8
 8007ade:	f1ba 0f00 	cmp.w	sl, #0
 8007ae2:	d0e9      	beq.n	8007ab8 <_strtod_l+0xa70>
 8007ae4:	ec53 2b18 	vmov	r2, r3, d8
 8007ae8:	e794      	b.n	8007a14 <_strtod_l+0x9cc>
 8007aea:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007aee:	9b04      	ldr	r3, [sp, #16]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d1bf      	bne.n	8007a74 <_strtod_l+0xa2c>
 8007af4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007af8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007afa:	0d1b      	lsrs	r3, r3, #20
 8007afc:	051b      	lsls	r3, r3, #20
 8007afe:	429a      	cmp	r2, r3
 8007b00:	d1b8      	bne.n	8007a74 <_strtod_l+0xa2c>
 8007b02:	ec51 0b18 	vmov	r0, r1, d8
 8007b06:	f7f8 fdc7 	bl	8000698 <__aeabi_d2lz>
 8007b0a:	f7f8 fd7f 	bl	800060c <__aeabi_l2d>
 8007b0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b12:	ec41 0b17 	vmov	d7, r0, r1
 8007b16:	ea43 0308 	orr.w	r3, r3, r8
 8007b1a:	ea53 030a 	orrs.w	r3, r3, sl
 8007b1e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8007b22:	d03e      	beq.n	8007ba2 <_strtod_l+0xb5a>
 8007b24:	eeb4 8bca 	vcmpe.f64	d8, d10
 8007b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b2c:	f53f ace2 	bmi.w	80074f4 <_strtod_l+0x4ac>
 8007b30:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8007b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b38:	dd9c      	ble.n	8007a74 <_strtod_l+0xa2c>
 8007b3a:	e4db      	b.n	80074f4 <_strtod_l+0x4ac>
 8007b3c:	9904      	ldr	r1, [sp, #16]
 8007b3e:	b301      	cbz	r1, 8007b82 <_strtod_l+0xb3a>
 8007b40:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007b42:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8007b46:	d81c      	bhi.n	8007b82 <_strtod_l+0xb3a>
 8007b48:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8007bd0 <_strtod_l+0xb88>
 8007b4c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b54:	d811      	bhi.n	8007b7a <_strtod_l+0xb32>
 8007b56:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8007b5a:	ee18 3a10 	vmov	r3, s16
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	bf38      	it	cc
 8007b62:	2301      	movcc	r3, #1
 8007b64:	ee08 3a10 	vmov	s16, r3
 8007b68:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8007b6c:	f1ba 0f00 	cmp.w	sl, #0
 8007b70:	d114      	bne.n	8007b9c <_strtod_l+0xb54>
 8007b72:	eeb1 7b48 	vneg.f64	d7, d8
 8007b76:	ec53 2b17 	vmov	r2, r3, d7
 8007b7a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007b7c:	f103 61d6 	add.w	r1, r3, #112197632	; 0x6b00000
 8007b80:	1a0b      	subs	r3, r1, r0
 8007b82:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007b86:	ec43 2b1c 	vmov	d12, r2, r3
 8007b8a:	f002 f8b5 	bl	8009cf8 <__ulp>
 8007b8e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007b92:	eeac 7b00 	vfma.f64	d7, d12, d0
 8007b96:	ec59 8b17 	vmov	r8, r9, d7
 8007b9a:	e7a8      	b.n	8007aee <_strtod_l+0xaa6>
 8007b9c:	ec53 2b18 	vmov	r2, r3, d8
 8007ba0:	e7eb      	b.n	8007b7a <_strtod_l+0xb32>
 8007ba2:	eeb4 8bc9 	vcmpe.f64	d8, d9
 8007ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007baa:	f57f af63 	bpl.w	8007a74 <_strtod_l+0xa2c>
 8007bae:	e4a1      	b.n	80074f4 <_strtod_l+0x4ac>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007bb4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007bb6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bb8:	6013      	str	r3, [r2, #0]
 8007bba:	f7ff ba8d 	b.w	80070d8 <_strtod_l+0x90>
 8007bbe:	2a65      	cmp	r2, #101	; 0x65
 8007bc0:	f43f ab89 	beq.w	80072d6 <_strtod_l+0x28e>
 8007bc4:	2a45      	cmp	r2, #69	; 0x45
 8007bc6:	f43f ab86 	beq.w	80072d6 <_strtod_l+0x28e>
 8007bca:	2101      	movs	r1, #1
 8007bcc:	f7ff bbbe 	b.w	800734c <_strtod_l+0x304>
 8007bd0:	ffc00000 	.word	0xffc00000
 8007bd4:	41dfffff 	.word	0x41dfffff
 8007bd8:	000fffff 	.word	0x000fffff
 8007bdc:	7ff00000 	.word	0x7ff00000
 8007be0:	7fefffff 	.word	0x7fefffff
 8007be4:	3ff00000 	.word	0x3ff00000
 8007be8:	7c9fffff 	.word	0x7c9fffff
 8007bec:	bff00000 	.word	0xbff00000
 8007bf0:	7fe00000 	.word	0x7fe00000

08007bf4 <_strtod_r>:
 8007bf4:	4b01      	ldr	r3, [pc, #4]	; (8007bfc <_strtod_r+0x8>)
 8007bf6:	f7ff ba27 	b.w	8007048 <_strtod_l>
 8007bfa:	bf00      	nop
 8007bfc:	20000078 	.word	0x20000078

08007c00 <_strtol_l.isra.0>:
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c06:	d001      	beq.n	8007c0c <_strtol_l.isra.0+0xc>
 8007c08:	2b24      	cmp	r3, #36	; 0x24
 8007c0a:	d906      	bls.n	8007c1a <_strtol_l.isra.0+0x1a>
 8007c0c:	f7fe fabe 	bl	800618c <__errno>
 8007c10:	2316      	movs	r3, #22
 8007c12:	6003      	str	r3, [r0, #0]
 8007c14:	2000      	movs	r0, #0
 8007c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c1a:	4f3a      	ldr	r7, [pc, #232]	; (8007d04 <_strtol_l.isra.0+0x104>)
 8007c1c:	468e      	mov	lr, r1
 8007c1e:	4676      	mov	r6, lr
 8007c20:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007c24:	5de5      	ldrb	r5, [r4, r7]
 8007c26:	f015 0508 	ands.w	r5, r5, #8
 8007c2a:	d1f8      	bne.n	8007c1e <_strtol_l.isra.0+0x1e>
 8007c2c:	2c2d      	cmp	r4, #45	; 0x2d
 8007c2e:	d134      	bne.n	8007c9a <_strtol_l.isra.0+0x9a>
 8007c30:	f89e 4000 	ldrb.w	r4, [lr]
 8007c34:	f04f 0801 	mov.w	r8, #1
 8007c38:	f106 0e02 	add.w	lr, r6, #2
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d05c      	beq.n	8007cfa <_strtol_l.isra.0+0xfa>
 8007c40:	2b10      	cmp	r3, #16
 8007c42:	d10c      	bne.n	8007c5e <_strtol_l.isra.0+0x5e>
 8007c44:	2c30      	cmp	r4, #48	; 0x30
 8007c46:	d10a      	bne.n	8007c5e <_strtol_l.isra.0+0x5e>
 8007c48:	f89e 4000 	ldrb.w	r4, [lr]
 8007c4c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007c50:	2c58      	cmp	r4, #88	; 0x58
 8007c52:	d14d      	bne.n	8007cf0 <_strtol_l.isra.0+0xf0>
 8007c54:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007c58:	2310      	movs	r3, #16
 8007c5a:	f10e 0e02 	add.w	lr, lr, #2
 8007c5e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007c62:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007c66:	2600      	movs	r6, #0
 8007c68:	fbbc f9f3 	udiv	r9, ip, r3
 8007c6c:	4635      	mov	r5, r6
 8007c6e:	fb03 ca19 	mls	sl, r3, r9, ip
 8007c72:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007c76:	2f09      	cmp	r7, #9
 8007c78:	d818      	bhi.n	8007cac <_strtol_l.isra.0+0xac>
 8007c7a:	463c      	mov	r4, r7
 8007c7c:	42a3      	cmp	r3, r4
 8007c7e:	dd24      	ble.n	8007cca <_strtol_l.isra.0+0xca>
 8007c80:	2e00      	cmp	r6, #0
 8007c82:	db1f      	blt.n	8007cc4 <_strtol_l.isra.0+0xc4>
 8007c84:	45a9      	cmp	r9, r5
 8007c86:	d31d      	bcc.n	8007cc4 <_strtol_l.isra.0+0xc4>
 8007c88:	d101      	bne.n	8007c8e <_strtol_l.isra.0+0x8e>
 8007c8a:	45a2      	cmp	sl, r4
 8007c8c:	db1a      	blt.n	8007cc4 <_strtol_l.isra.0+0xc4>
 8007c8e:	fb05 4503 	mla	r5, r5, r3, r4
 8007c92:	2601      	movs	r6, #1
 8007c94:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007c98:	e7eb      	b.n	8007c72 <_strtol_l.isra.0+0x72>
 8007c9a:	2c2b      	cmp	r4, #43	; 0x2b
 8007c9c:	bf08      	it	eq
 8007c9e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007ca2:	46a8      	mov	r8, r5
 8007ca4:	bf08      	it	eq
 8007ca6:	f106 0e02 	addeq.w	lr, r6, #2
 8007caa:	e7c7      	b.n	8007c3c <_strtol_l.isra.0+0x3c>
 8007cac:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007cb0:	2f19      	cmp	r7, #25
 8007cb2:	d801      	bhi.n	8007cb8 <_strtol_l.isra.0+0xb8>
 8007cb4:	3c37      	subs	r4, #55	; 0x37
 8007cb6:	e7e1      	b.n	8007c7c <_strtol_l.isra.0+0x7c>
 8007cb8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007cbc:	2f19      	cmp	r7, #25
 8007cbe:	d804      	bhi.n	8007cca <_strtol_l.isra.0+0xca>
 8007cc0:	3c57      	subs	r4, #87	; 0x57
 8007cc2:	e7db      	b.n	8007c7c <_strtol_l.isra.0+0x7c>
 8007cc4:	f04f 36ff 	mov.w	r6, #4294967295
 8007cc8:	e7e4      	b.n	8007c94 <_strtol_l.isra.0+0x94>
 8007cca:	2e00      	cmp	r6, #0
 8007ccc:	da05      	bge.n	8007cda <_strtol_l.isra.0+0xda>
 8007cce:	2322      	movs	r3, #34	; 0x22
 8007cd0:	6003      	str	r3, [r0, #0]
 8007cd2:	4665      	mov	r5, ip
 8007cd4:	b942      	cbnz	r2, 8007ce8 <_strtol_l.isra.0+0xe8>
 8007cd6:	4628      	mov	r0, r5
 8007cd8:	e79d      	b.n	8007c16 <_strtol_l.isra.0+0x16>
 8007cda:	f1b8 0f00 	cmp.w	r8, #0
 8007cde:	d000      	beq.n	8007ce2 <_strtol_l.isra.0+0xe2>
 8007ce0:	426d      	negs	r5, r5
 8007ce2:	2a00      	cmp	r2, #0
 8007ce4:	d0f7      	beq.n	8007cd6 <_strtol_l.isra.0+0xd6>
 8007ce6:	b10e      	cbz	r6, 8007cec <_strtol_l.isra.0+0xec>
 8007ce8:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007cec:	6011      	str	r1, [r2, #0]
 8007cee:	e7f2      	b.n	8007cd6 <_strtol_l.isra.0+0xd6>
 8007cf0:	2430      	movs	r4, #48	; 0x30
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1b3      	bne.n	8007c5e <_strtol_l.isra.0+0x5e>
 8007cf6:	2308      	movs	r3, #8
 8007cf8:	e7b1      	b.n	8007c5e <_strtol_l.isra.0+0x5e>
 8007cfa:	2c30      	cmp	r4, #48	; 0x30
 8007cfc:	d0a4      	beq.n	8007c48 <_strtol_l.isra.0+0x48>
 8007cfe:	230a      	movs	r3, #10
 8007d00:	e7ad      	b.n	8007c5e <_strtol_l.isra.0+0x5e>
 8007d02:	bf00      	nop
 8007d04:	0800af01 	.word	0x0800af01

08007d08 <_strtol_r>:
 8007d08:	f7ff bf7a 	b.w	8007c00 <_strtol_l.isra.0>

08007d0c <__swbuf_r>:
 8007d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0e:	460e      	mov	r6, r1
 8007d10:	4614      	mov	r4, r2
 8007d12:	4605      	mov	r5, r0
 8007d14:	b118      	cbz	r0, 8007d1e <__swbuf_r+0x12>
 8007d16:	6983      	ldr	r3, [r0, #24]
 8007d18:	b90b      	cbnz	r3, 8007d1e <__swbuf_r+0x12>
 8007d1a:	f000 ffe1 	bl	8008ce0 <__sinit>
 8007d1e:	4b21      	ldr	r3, [pc, #132]	; (8007da4 <__swbuf_r+0x98>)
 8007d20:	429c      	cmp	r4, r3
 8007d22:	d12b      	bne.n	8007d7c <__swbuf_r+0x70>
 8007d24:	686c      	ldr	r4, [r5, #4]
 8007d26:	69a3      	ldr	r3, [r4, #24]
 8007d28:	60a3      	str	r3, [r4, #8]
 8007d2a:	89a3      	ldrh	r3, [r4, #12]
 8007d2c:	071a      	lsls	r2, r3, #28
 8007d2e:	d52f      	bpl.n	8007d90 <__swbuf_r+0x84>
 8007d30:	6923      	ldr	r3, [r4, #16]
 8007d32:	b36b      	cbz	r3, 8007d90 <__swbuf_r+0x84>
 8007d34:	6923      	ldr	r3, [r4, #16]
 8007d36:	6820      	ldr	r0, [r4, #0]
 8007d38:	1ac0      	subs	r0, r0, r3
 8007d3a:	6963      	ldr	r3, [r4, #20]
 8007d3c:	b2f6      	uxtb	r6, r6
 8007d3e:	4283      	cmp	r3, r0
 8007d40:	4637      	mov	r7, r6
 8007d42:	dc04      	bgt.n	8007d4e <__swbuf_r+0x42>
 8007d44:	4621      	mov	r1, r4
 8007d46:	4628      	mov	r0, r5
 8007d48:	f000 ff36 	bl	8008bb8 <_fflush_r>
 8007d4c:	bb30      	cbnz	r0, 8007d9c <__swbuf_r+0x90>
 8007d4e:	68a3      	ldr	r3, [r4, #8]
 8007d50:	3b01      	subs	r3, #1
 8007d52:	60a3      	str	r3, [r4, #8]
 8007d54:	6823      	ldr	r3, [r4, #0]
 8007d56:	1c5a      	adds	r2, r3, #1
 8007d58:	6022      	str	r2, [r4, #0]
 8007d5a:	701e      	strb	r6, [r3, #0]
 8007d5c:	6963      	ldr	r3, [r4, #20]
 8007d5e:	3001      	adds	r0, #1
 8007d60:	4283      	cmp	r3, r0
 8007d62:	d004      	beq.n	8007d6e <__swbuf_r+0x62>
 8007d64:	89a3      	ldrh	r3, [r4, #12]
 8007d66:	07db      	lsls	r3, r3, #31
 8007d68:	d506      	bpl.n	8007d78 <__swbuf_r+0x6c>
 8007d6a:	2e0a      	cmp	r6, #10
 8007d6c:	d104      	bne.n	8007d78 <__swbuf_r+0x6c>
 8007d6e:	4621      	mov	r1, r4
 8007d70:	4628      	mov	r0, r5
 8007d72:	f000 ff21 	bl	8008bb8 <_fflush_r>
 8007d76:	b988      	cbnz	r0, 8007d9c <__swbuf_r+0x90>
 8007d78:	4638      	mov	r0, r7
 8007d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d7c:	4b0a      	ldr	r3, [pc, #40]	; (8007da8 <__swbuf_r+0x9c>)
 8007d7e:	429c      	cmp	r4, r3
 8007d80:	d101      	bne.n	8007d86 <__swbuf_r+0x7a>
 8007d82:	68ac      	ldr	r4, [r5, #8]
 8007d84:	e7cf      	b.n	8007d26 <__swbuf_r+0x1a>
 8007d86:	4b09      	ldr	r3, [pc, #36]	; (8007dac <__swbuf_r+0xa0>)
 8007d88:	429c      	cmp	r4, r3
 8007d8a:	bf08      	it	eq
 8007d8c:	68ec      	ldreq	r4, [r5, #12]
 8007d8e:	e7ca      	b.n	8007d26 <__swbuf_r+0x1a>
 8007d90:	4621      	mov	r1, r4
 8007d92:	4628      	mov	r0, r5
 8007d94:	f000 f80c 	bl	8007db0 <__swsetup_r>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d0cb      	beq.n	8007d34 <__swbuf_r+0x28>
 8007d9c:	f04f 37ff 	mov.w	r7, #4294967295
 8007da0:	e7ea      	b.n	8007d78 <__swbuf_r+0x6c>
 8007da2:	bf00      	nop
 8007da4:	0800b0b8 	.word	0x0800b0b8
 8007da8:	0800b0d8 	.word	0x0800b0d8
 8007dac:	0800b098 	.word	0x0800b098

08007db0 <__swsetup_r>:
 8007db0:	4b32      	ldr	r3, [pc, #200]	; (8007e7c <__swsetup_r+0xcc>)
 8007db2:	b570      	push	{r4, r5, r6, lr}
 8007db4:	681d      	ldr	r5, [r3, #0]
 8007db6:	4606      	mov	r6, r0
 8007db8:	460c      	mov	r4, r1
 8007dba:	b125      	cbz	r5, 8007dc6 <__swsetup_r+0x16>
 8007dbc:	69ab      	ldr	r3, [r5, #24]
 8007dbe:	b913      	cbnz	r3, 8007dc6 <__swsetup_r+0x16>
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	f000 ff8d 	bl	8008ce0 <__sinit>
 8007dc6:	4b2e      	ldr	r3, [pc, #184]	; (8007e80 <__swsetup_r+0xd0>)
 8007dc8:	429c      	cmp	r4, r3
 8007dca:	d10f      	bne.n	8007dec <__swsetup_r+0x3c>
 8007dcc:	686c      	ldr	r4, [r5, #4]
 8007dce:	89a3      	ldrh	r3, [r4, #12]
 8007dd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007dd4:	0719      	lsls	r1, r3, #28
 8007dd6:	d42c      	bmi.n	8007e32 <__swsetup_r+0x82>
 8007dd8:	06dd      	lsls	r5, r3, #27
 8007dda:	d411      	bmi.n	8007e00 <__swsetup_r+0x50>
 8007ddc:	2309      	movs	r3, #9
 8007dde:	6033      	str	r3, [r6, #0]
 8007de0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007de4:	81a3      	strh	r3, [r4, #12]
 8007de6:	f04f 30ff 	mov.w	r0, #4294967295
 8007dea:	e03e      	b.n	8007e6a <__swsetup_r+0xba>
 8007dec:	4b25      	ldr	r3, [pc, #148]	; (8007e84 <__swsetup_r+0xd4>)
 8007dee:	429c      	cmp	r4, r3
 8007df0:	d101      	bne.n	8007df6 <__swsetup_r+0x46>
 8007df2:	68ac      	ldr	r4, [r5, #8]
 8007df4:	e7eb      	b.n	8007dce <__swsetup_r+0x1e>
 8007df6:	4b24      	ldr	r3, [pc, #144]	; (8007e88 <__swsetup_r+0xd8>)
 8007df8:	429c      	cmp	r4, r3
 8007dfa:	bf08      	it	eq
 8007dfc:	68ec      	ldreq	r4, [r5, #12]
 8007dfe:	e7e6      	b.n	8007dce <__swsetup_r+0x1e>
 8007e00:	0758      	lsls	r0, r3, #29
 8007e02:	d512      	bpl.n	8007e2a <__swsetup_r+0x7a>
 8007e04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e06:	b141      	cbz	r1, 8007e1a <__swsetup_r+0x6a>
 8007e08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e0c:	4299      	cmp	r1, r3
 8007e0e:	d002      	beq.n	8007e16 <__swsetup_r+0x66>
 8007e10:	4630      	mov	r0, r6
 8007e12:	f002 f8d1 	bl	8009fb8 <_free_r>
 8007e16:	2300      	movs	r3, #0
 8007e18:	6363      	str	r3, [r4, #52]	; 0x34
 8007e1a:	89a3      	ldrh	r3, [r4, #12]
 8007e1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e20:	81a3      	strh	r3, [r4, #12]
 8007e22:	2300      	movs	r3, #0
 8007e24:	6063      	str	r3, [r4, #4]
 8007e26:	6923      	ldr	r3, [r4, #16]
 8007e28:	6023      	str	r3, [r4, #0]
 8007e2a:	89a3      	ldrh	r3, [r4, #12]
 8007e2c:	f043 0308 	orr.w	r3, r3, #8
 8007e30:	81a3      	strh	r3, [r4, #12]
 8007e32:	6923      	ldr	r3, [r4, #16]
 8007e34:	b94b      	cbnz	r3, 8007e4a <__swsetup_r+0x9a>
 8007e36:	89a3      	ldrh	r3, [r4, #12]
 8007e38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e40:	d003      	beq.n	8007e4a <__swsetup_r+0x9a>
 8007e42:	4621      	mov	r1, r4
 8007e44:	4630      	mov	r0, r6
 8007e46:	f001 fb83 	bl	8009550 <__smakebuf_r>
 8007e4a:	89a0      	ldrh	r0, [r4, #12]
 8007e4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e50:	f010 0301 	ands.w	r3, r0, #1
 8007e54:	d00a      	beq.n	8007e6c <__swsetup_r+0xbc>
 8007e56:	2300      	movs	r3, #0
 8007e58:	60a3      	str	r3, [r4, #8]
 8007e5a:	6963      	ldr	r3, [r4, #20]
 8007e5c:	425b      	negs	r3, r3
 8007e5e:	61a3      	str	r3, [r4, #24]
 8007e60:	6923      	ldr	r3, [r4, #16]
 8007e62:	b943      	cbnz	r3, 8007e76 <__swsetup_r+0xc6>
 8007e64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e68:	d1ba      	bne.n	8007de0 <__swsetup_r+0x30>
 8007e6a:	bd70      	pop	{r4, r5, r6, pc}
 8007e6c:	0781      	lsls	r1, r0, #30
 8007e6e:	bf58      	it	pl
 8007e70:	6963      	ldrpl	r3, [r4, #20]
 8007e72:	60a3      	str	r3, [r4, #8]
 8007e74:	e7f4      	b.n	8007e60 <__swsetup_r+0xb0>
 8007e76:	2000      	movs	r0, #0
 8007e78:	e7f7      	b.n	8007e6a <__swsetup_r+0xba>
 8007e7a:	bf00      	nop
 8007e7c:	20000010 	.word	0x20000010
 8007e80:	0800b0b8 	.word	0x0800b0b8
 8007e84:	0800b0d8 	.word	0x0800b0d8
 8007e88:	0800b098 	.word	0x0800b098

08007e8c <quorem>:
 8007e8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e90:	6903      	ldr	r3, [r0, #16]
 8007e92:	690c      	ldr	r4, [r1, #16]
 8007e94:	42a3      	cmp	r3, r4
 8007e96:	4607      	mov	r7, r0
 8007e98:	f2c0 8081 	blt.w	8007f9e <quorem+0x112>
 8007e9c:	3c01      	subs	r4, #1
 8007e9e:	f101 0814 	add.w	r8, r1, #20
 8007ea2:	f100 0514 	add.w	r5, r0, #20
 8007ea6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007eb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007ebc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007ec0:	fbb2 f6f3 	udiv	r6, r2, r3
 8007ec4:	d331      	bcc.n	8007f2a <quorem+0x9e>
 8007ec6:	f04f 0e00 	mov.w	lr, #0
 8007eca:	4640      	mov	r0, r8
 8007ecc:	46ac      	mov	ip, r5
 8007ece:	46f2      	mov	sl, lr
 8007ed0:	f850 2b04 	ldr.w	r2, [r0], #4
 8007ed4:	b293      	uxth	r3, r2
 8007ed6:	fb06 e303 	mla	r3, r6, r3, lr
 8007eda:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	ebaa 0303 	sub.w	r3, sl, r3
 8007ee4:	0c12      	lsrs	r2, r2, #16
 8007ee6:	f8dc a000 	ldr.w	sl, [ip]
 8007eea:	fb06 e202 	mla	r2, r6, r2, lr
 8007eee:	fa13 f38a 	uxtah	r3, r3, sl
 8007ef2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007ef6:	fa1f fa82 	uxth.w	sl, r2
 8007efa:	f8dc 2000 	ldr.w	r2, [ip]
 8007efe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007f02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f0c:	4581      	cmp	r9, r0
 8007f0e:	f84c 3b04 	str.w	r3, [ip], #4
 8007f12:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007f16:	d2db      	bcs.n	8007ed0 <quorem+0x44>
 8007f18:	f855 300b 	ldr.w	r3, [r5, fp]
 8007f1c:	b92b      	cbnz	r3, 8007f2a <quorem+0x9e>
 8007f1e:	9b01      	ldr	r3, [sp, #4]
 8007f20:	3b04      	subs	r3, #4
 8007f22:	429d      	cmp	r5, r3
 8007f24:	461a      	mov	r2, r3
 8007f26:	d32e      	bcc.n	8007f86 <quorem+0xfa>
 8007f28:	613c      	str	r4, [r7, #16]
 8007f2a:	4638      	mov	r0, r7
 8007f2c:	f001 fe40 	bl	8009bb0 <__mcmp>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	db24      	blt.n	8007f7e <quorem+0xf2>
 8007f34:	3601      	adds	r6, #1
 8007f36:	4628      	mov	r0, r5
 8007f38:	f04f 0c00 	mov.w	ip, #0
 8007f3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007f40:	f8d0 e000 	ldr.w	lr, [r0]
 8007f44:	b293      	uxth	r3, r2
 8007f46:	ebac 0303 	sub.w	r3, ip, r3
 8007f4a:	0c12      	lsrs	r2, r2, #16
 8007f4c:	fa13 f38e 	uxtah	r3, r3, lr
 8007f50:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007f54:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f5e:	45c1      	cmp	r9, r8
 8007f60:	f840 3b04 	str.w	r3, [r0], #4
 8007f64:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007f68:	d2e8      	bcs.n	8007f3c <quorem+0xb0>
 8007f6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f6e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f72:	b922      	cbnz	r2, 8007f7e <quorem+0xf2>
 8007f74:	3b04      	subs	r3, #4
 8007f76:	429d      	cmp	r5, r3
 8007f78:	461a      	mov	r2, r3
 8007f7a:	d30a      	bcc.n	8007f92 <quorem+0x106>
 8007f7c:	613c      	str	r4, [r7, #16]
 8007f7e:	4630      	mov	r0, r6
 8007f80:	b003      	add	sp, #12
 8007f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f86:	6812      	ldr	r2, [r2, #0]
 8007f88:	3b04      	subs	r3, #4
 8007f8a:	2a00      	cmp	r2, #0
 8007f8c:	d1cc      	bne.n	8007f28 <quorem+0x9c>
 8007f8e:	3c01      	subs	r4, #1
 8007f90:	e7c7      	b.n	8007f22 <quorem+0x96>
 8007f92:	6812      	ldr	r2, [r2, #0]
 8007f94:	3b04      	subs	r3, #4
 8007f96:	2a00      	cmp	r2, #0
 8007f98:	d1f0      	bne.n	8007f7c <quorem+0xf0>
 8007f9a:	3c01      	subs	r4, #1
 8007f9c:	e7eb      	b.n	8007f76 <quorem+0xea>
 8007f9e:	2000      	movs	r0, #0
 8007fa0:	e7ee      	b.n	8007f80 <quorem+0xf4>
 8007fa2:	0000      	movs	r0, r0
 8007fa4:	0000      	movs	r0, r0
	...

08007fa8 <_dtoa_r>:
 8007fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fac:	ec59 8b10 	vmov	r8, r9, d0
 8007fb0:	b095      	sub	sp, #84	; 0x54
 8007fb2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007fb4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8007fb6:	9107      	str	r1, [sp, #28]
 8007fb8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	9209      	str	r2, [sp, #36]	; 0x24
 8007fc0:	9310      	str	r3, [sp, #64]	; 0x40
 8007fc2:	b975      	cbnz	r5, 8007fe2 <_dtoa_r+0x3a>
 8007fc4:	2010      	movs	r0, #16
 8007fc6:	f001 fb03 	bl	80095d0 <malloc>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	6270      	str	r0, [r6, #36]	; 0x24
 8007fce:	b920      	cbnz	r0, 8007fda <_dtoa_r+0x32>
 8007fd0:	4bab      	ldr	r3, [pc, #684]	; (8008280 <_dtoa_r+0x2d8>)
 8007fd2:	21ea      	movs	r1, #234	; 0xea
 8007fd4:	48ab      	ldr	r0, [pc, #684]	; (8008284 <_dtoa_r+0x2dc>)
 8007fd6:	f002 fc23 	bl	800a820 <__assert_func>
 8007fda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007fde:	6005      	str	r5, [r0, #0]
 8007fe0:	60c5      	str	r5, [r0, #12]
 8007fe2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007fe4:	6819      	ldr	r1, [r3, #0]
 8007fe6:	b151      	cbz	r1, 8007ffe <_dtoa_r+0x56>
 8007fe8:	685a      	ldr	r2, [r3, #4]
 8007fea:	604a      	str	r2, [r1, #4]
 8007fec:	2301      	movs	r3, #1
 8007fee:	4093      	lsls	r3, r2
 8007ff0:	608b      	str	r3, [r1, #8]
 8007ff2:	4630      	mov	r0, r6
 8007ff4:	f001 fb54 	bl	80096a0 <_Bfree>
 8007ff8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	601a      	str	r2, [r3, #0]
 8007ffe:	f1b9 0300 	subs.w	r3, r9, #0
 8008002:	bfbb      	ittet	lt
 8008004:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008008:	9303      	strlt	r3, [sp, #12]
 800800a:	2300      	movge	r3, #0
 800800c:	2201      	movlt	r2, #1
 800800e:	bfac      	ite	ge
 8008010:	6023      	strge	r3, [r4, #0]
 8008012:	6022      	strlt	r2, [r4, #0]
 8008014:	4b9c      	ldr	r3, [pc, #624]	; (8008288 <_dtoa_r+0x2e0>)
 8008016:	9c03      	ldr	r4, [sp, #12]
 8008018:	43a3      	bics	r3, r4
 800801a:	d11a      	bne.n	8008052 <_dtoa_r+0xaa>
 800801c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800801e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008022:	6013      	str	r3, [r2, #0]
 8008024:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8008028:	ea53 0308 	orrs.w	r3, r3, r8
 800802c:	f000 8512 	beq.w	8008a54 <_dtoa_r+0xaac>
 8008030:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008032:	b953      	cbnz	r3, 800804a <_dtoa_r+0xa2>
 8008034:	4b95      	ldr	r3, [pc, #596]	; (800828c <_dtoa_r+0x2e4>)
 8008036:	e01f      	b.n	8008078 <_dtoa_r+0xd0>
 8008038:	4b95      	ldr	r3, [pc, #596]	; (8008290 <_dtoa_r+0x2e8>)
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	3308      	adds	r3, #8
 800803e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008040:	6013      	str	r3, [r2, #0]
 8008042:	9800      	ldr	r0, [sp, #0]
 8008044:	b015      	add	sp, #84	; 0x54
 8008046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800804a:	4b90      	ldr	r3, [pc, #576]	; (800828c <_dtoa_r+0x2e4>)
 800804c:	9300      	str	r3, [sp, #0]
 800804e:	3303      	adds	r3, #3
 8008050:	e7f5      	b.n	800803e <_dtoa_r+0x96>
 8008052:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008056:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800805a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800805e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008062:	d10b      	bne.n	800807c <_dtoa_r+0xd4>
 8008064:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008066:	2301      	movs	r3, #1
 8008068:	6013      	str	r3, [r2, #0]
 800806a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 84ee 	beq.w	8008a4e <_dtoa_r+0xaa6>
 8008072:	4888      	ldr	r0, [pc, #544]	; (8008294 <_dtoa_r+0x2ec>)
 8008074:	6018      	str	r0, [r3, #0]
 8008076:	1e43      	subs	r3, r0, #1
 8008078:	9300      	str	r3, [sp, #0]
 800807a:	e7e2      	b.n	8008042 <_dtoa_r+0x9a>
 800807c:	a913      	add	r1, sp, #76	; 0x4c
 800807e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008082:	aa12      	add	r2, sp, #72	; 0x48
 8008084:	4630      	mov	r0, r6
 8008086:	f001 feb3 	bl	8009df0 <__d2b>
 800808a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800808e:	4605      	mov	r5, r0
 8008090:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008092:	2900      	cmp	r1, #0
 8008094:	d047      	beq.n	8008126 <_dtoa_r+0x17e>
 8008096:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8008098:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800809c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80080a0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 80080a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80080a8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80080ac:	2400      	movs	r4, #0
 80080ae:	ec43 2b16 	vmov	d6, r2, r3
 80080b2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80080b6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8008268 <_dtoa_r+0x2c0>
 80080ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80080be:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8008270 <_dtoa_r+0x2c8>
 80080c2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80080c6:	eeb0 7b46 	vmov.f64	d7, d6
 80080ca:	ee06 1a90 	vmov	s13, r1
 80080ce:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80080d2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008278 <_dtoa_r+0x2d0>
 80080d6:	eea5 7b06 	vfma.f64	d7, d5, d6
 80080da:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80080de:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80080e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e6:	ee16 ba90 	vmov	fp, s13
 80080ea:	9411      	str	r4, [sp, #68]	; 0x44
 80080ec:	d508      	bpl.n	8008100 <_dtoa_r+0x158>
 80080ee:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80080f2:	eeb4 6b47 	vcmp.f64	d6, d7
 80080f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080fa:	bf18      	it	ne
 80080fc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8008100:	f1bb 0f16 	cmp.w	fp, #22
 8008104:	d832      	bhi.n	800816c <_dtoa_r+0x1c4>
 8008106:	4b64      	ldr	r3, [pc, #400]	; (8008298 <_dtoa_r+0x2f0>)
 8008108:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800810c:	ed93 7b00 	vldr	d7, [r3]
 8008110:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8008114:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800811c:	d501      	bpl.n	8008122 <_dtoa_r+0x17a>
 800811e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008122:	2300      	movs	r3, #0
 8008124:	e023      	b.n	800816e <_dtoa_r+0x1c6>
 8008126:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8008128:	4401      	add	r1, r0
 800812a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800812e:	2b20      	cmp	r3, #32
 8008130:	bfc3      	ittte	gt
 8008132:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008136:	fa04 f303 	lslgt.w	r3, r4, r3
 800813a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800813e:	f1c3 0320 	rsble	r3, r3, #32
 8008142:	bfc6      	itte	gt
 8008144:	fa28 f804 	lsrgt.w	r8, r8, r4
 8008148:	ea43 0308 	orrgt.w	r3, r3, r8
 800814c:	fa08 f303 	lslle.w	r3, r8, r3
 8008150:	ee07 3a90 	vmov	s15, r3
 8008154:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008158:	3901      	subs	r1, #1
 800815a:	ed8d 7b00 	vstr	d7, [sp]
 800815e:	9c01      	ldr	r4, [sp, #4]
 8008160:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008164:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8008168:	2401      	movs	r4, #1
 800816a:	e7a0      	b.n	80080ae <_dtoa_r+0x106>
 800816c:	2301      	movs	r3, #1
 800816e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008170:	1a43      	subs	r3, r0, r1
 8008172:	1e5a      	subs	r2, r3, #1
 8008174:	bf45      	ittet	mi
 8008176:	f1c3 0301 	rsbmi	r3, r3, #1
 800817a:	9305      	strmi	r3, [sp, #20]
 800817c:	2300      	movpl	r3, #0
 800817e:	2300      	movmi	r3, #0
 8008180:	9206      	str	r2, [sp, #24]
 8008182:	bf54      	ite	pl
 8008184:	9305      	strpl	r3, [sp, #20]
 8008186:	9306      	strmi	r3, [sp, #24]
 8008188:	f1bb 0f00 	cmp.w	fp, #0
 800818c:	db18      	blt.n	80081c0 <_dtoa_r+0x218>
 800818e:	9b06      	ldr	r3, [sp, #24]
 8008190:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008194:	445b      	add	r3, fp
 8008196:	9306      	str	r3, [sp, #24]
 8008198:	2300      	movs	r3, #0
 800819a:	9a07      	ldr	r2, [sp, #28]
 800819c:	2a09      	cmp	r2, #9
 800819e:	d849      	bhi.n	8008234 <_dtoa_r+0x28c>
 80081a0:	2a05      	cmp	r2, #5
 80081a2:	bfc4      	itt	gt
 80081a4:	3a04      	subgt	r2, #4
 80081a6:	9207      	strgt	r2, [sp, #28]
 80081a8:	9a07      	ldr	r2, [sp, #28]
 80081aa:	f1a2 0202 	sub.w	r2, r2, #2
 80081ae:	bfcc      	ite	gt
 80081b0:	2400      	movgt	r4, #0
 80081b2:	2401      	movle	r4, #1
 80081b4:	2a03      	cmp	r2, #3
 80081b6:	d848      	bhi.n	800824a <_dtoa_r+0x2a2>
 80081b8:	e8df f002 	tbb	[pc, r2]
 80081bc:	3a2c2e0b 	.word	0x3a2c2e0b
 80081c0:	9b05      	ldr	r3, [sp, #20]
 80081c2:	2200      	movs	r2, #0
 80081c4:	eba3 030b 	sub.w	r3, r3, fp
 80081c8:	9305      	str	r3, [sp, #20]
 80081ca:	920e      	str	r2, [sp, #56]	; 0x38
 80081cc:	f1cb 0300 	rsb	r3, fp, #0
 80081d0:	e7e3      	b.n	800819a <_dtoa_r+0x1f2>
 80081d2:	2200      	movs	r2, #0
 80081d4:	9208      	str	r2, [sp, #32]
 80081d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081d8:	2a00      	cmp	r2, #0
 80081da:	dc39      	bgt.n	8008250 <_dtoa_r+0x2a8>
 80081dc:	f04f 0a01 	mov.w	sl, #1
 80081e0:	46d1      	mov	r9, sl
 80081e2:	4652      	mov	r2, sl
 80081e4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80081e8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 80081ea:	2100      	movs	r1, #0
 80081ec:	6079      	str	r1, [r7, #4]
 80081ee:	2004      	movs	r0, #4
 80081f0:	f100 0c14 	add.w	ip, r0, #20
 80081f4:	4594      	cmp	ip, r2
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	d92f      	bls.n	800825a <_dtoa_r+0x2b2>
 80081fa:	4630      	mov	r0, r6
 80081fc:	930c      	str	r3, [sp, #48]	; 0x30
 80081fe:	f001 fa0f 	bl	8009620 <_Balloc>
 8008202:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008204:	9000      	str	r0, [sp, #0]
 8008206:	4602      	mov	r2, r0
 8008208:	2800      	cmp	r0, #0
 800820a:	d149      	bne.n	80082a0 <_dtoa_r+0x2f8>
 800820c:	4b23      	ldr	r3, [pc, #140]	; (800829c <_dtoa_r+0x2f4>)
 800820e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008212:	e6df      	b.n	8007fd4 <_dtoa_r+0x2c>
 8008214:	2201      	movs	r2, #1
 8008216:	e7dd      	b.n	80081d4 <_dtoa_r+0x22c>
 8008218:	2200      	movs	r2, #0
 800821a:	9208      	str	r2, [sp, #32]
 800821c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800821e:	eb0b 0a02 	add.w	sl, fp, r2
 8008222:	f10a 0901 	add.w	r9, sl, #1
 8008226:	464a      	mov	r2, r9
 8008228:	2a01      	cmp	r2, #1
 800822a:	bfb8      	it	lt
 800822c:	2201      	movlt	r2, #1
 800822e:	e7db      	b.n	80081e8 <_dtoa_r+0x240>
 8008230:	2201      	movs	r2, #1
 8008232:	e7f2      	b.n	800821a <_dtoa_r+0x272>
 8008234:	2401      	movs	r4, #1
 8008236:	2200      	movs	r2, #0
 8008238:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800823c:	f04f 3aff 	mov.w	sl, #4294967295
 8008240:	2100      	movs	r1, #0
 8008242:	46d1      	mov	r9, sl
 8008244:	2212      	movs	r2, #18
 8008246:	9109      	str	r1, [sp, #36]	; 0x24
 8008248:	e7ce      	b.n	80081e8 <_dtoa_r+0x240>
 800824a:	2201      	movs	r2, #1
 800824c:	9208      	str	r2, [sp, #32]
 800824e:	e7f5      	b.n	800823c <_dtoa_r+0x294>
 8008250:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8008254:	46d1      	mov	r9, sl
 8008256:	4652      	mov	r2, sl
 8008258:	e7c6      	b.n	80081e8 <_dtoa_r+0x240>
 800825a:	3101      	adds	r1, #1
 800825c:	6079      	str	r1, [r7, #4]
 800825e:	0040      	lsls	r0, r0, #1
 8008260:	e7c6      	b.n	80081f0 <_dtoa_r+0x248>
 8008262:	bf00      	nop
 8008264:	f3af 8000 	nop.w
 8008268:	636f4361 	.word	0x636f4361
 800826c:	3fd287a7 	.word	0x3fd287a7
 8008270:	8b60c8b3 	.word	0x8b60c8b3
 8008274:	3fc68a28 	.word	0x3fc68a28
 8008278:	509f79fb 	.word	0x509f79fb
 800827c:	3fd34413 	.word	0x3fd34413
 8008280:	0800b00e 	.word	0x0800b00e
 8008284:	0800b025 	.word	0x0800b025
 8008288:	7ff00000 	.word	0x7ff00000
 800828c:	0800b00a 	.word	0x0800b00a
 8008290:	0800b001 	.word	0x0800b001
 8008294:	0800ae85 	.word	0x0800ae85
 8008298:	0800b200 	.word	0x0800b200
 800829c:	0800b084 	.word	0x0800b084
 80082a0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80082a2:	9900      	ldr	r1, [sp, #0]
 80082a4:	6011      	str	r1, [r2, #0]
 80082a6:	f1b9 0f0e 	cmp.w	r9, #14
 80082aa:	d872      	bhi.n	8008392 <_dtoa_r+0x3ea>
 80082ac:	2c00      	cmp	r4, #0
 80082ae:	d070      	beq.n	8008392 <_dtoa_r+0x3ea>
 80082b0:	f1bb 0f00 	cmp.w	fp, #0
 80082b4:	f340 80a6 	ble.w	8008404 <_dtoa_r+0x45c>
 80082b8:	49ca      	ldr	r1, [pc, #808]	; (80085e4 <_dtoa_r+0x63c>)
 80082ba:	f00b 020f 	and.w	r2, fp, #15
 80082be:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80082c2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80082c6:	ed92 7b00 	vldr	d7, [r2]
 80082ca:	ea4f 112b 	mov.w	r1, fp, asr #4
 80082ce:	f000 808d 	beq.w	80083ec <_dtoa_r+0x444>
 80082d2:	4ac5      	ldr	r2, [pc, #788]	; (80085e8 <_dtoa_r+0x640>)
 80082d4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80082d8:	ed92 6b08 	vldr	d6, [r2, #32]
 80082dc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 80082e0:	ed8d 6b02 	vstr	d6, [sp, #8]
 80082e4:	f001 010f 	and.w	r1, r1, #15
 80082e8:	2203      	movs	r2, #3
 80082ea:	48bf      	ldr	r0, [pc, #764]	; (80085e8 <_dtoa_r+0x640>)
 80082ec:	2900      	cmp	r1, #0
 80082ee:	d17f      	bne.n	80083f0 <_dtoa_r+0x448>
 80082f0:	ed9d 6b02 	vldr	d6, [sp, #8]
 80082f4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80082f8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80082fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80082fe:	2900      	cmp	r1, #0
 8008300:	f000 80b2 	beq.w	8008468 <_dtoa_r+0x4c0>
 8008304:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008308:	ed9d 7b02 	vldr	d7, [sp, #8]
 800830c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008314:	f140 80a8 	bpl.w	8008468 <_dtoa_r+0x4c0>
 8008318:	f1b9 0f00 	cmp.w	r9, #0
 800831c:	f000 80a4 	beq.w	8008468 <_dtoa_r+0x4c0>
 8008320:	f1ba 0f00 	cmp.w	sl, #0
 8008324:	dd31      	ble.n	800838a <_dtoa_r+0x3e2>
 8008326:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800832a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800832e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008332:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008336:	3201      	adds	r2, #1
 8008338:	4650      	mov	r0, sl
 800833a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800833e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008342:	ee07 2a90 	vmov	s15, r2
 8008346:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800834a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800834e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8008352:	9c03      	ldr	r4, [sp, #12]
 8008354:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8008358:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800835c:	2800      	cmp	r0, #0
 800835e:	f040 8086 	bne.w	800846e <_dtoa_r+0x4c6>
 8008362:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008366:	ee36 6b47 	vsub.f64	d6, d6, d7
 800836a:	ec42 1b17 	vmov	d7, r1, r2
 800836e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008376:	f300 8272 	bgt.w	800885e <_dtoa_r+0x8b6>
 800837a:	eeb1 7b47 	vneg.f64	d7, d7
 800837e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008386:	f100 8267 	bmi.w	8008858 <_dtoa_r+0x8b0>
 800838a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800838e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8008392:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008394:	2a00      	cmp	r2, #0
 8008396:	f2c0 8129 	blt.w	80085ec <_dtoa_r+0x644>
 800839a:	f1bb 0f0e 	cmp.w	fp, #14
 800839e:	f300 8125 	bgt.w	80085ec <_dtoa_r+0x644>
 80083a2:	4b90      	ldr	r3, [pc, #576]	; (80085e4 <_dtoa_r+0x63c>)
 80083a4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80083a8:	ed93 6b00 	vldr	d6, [r3]
 80083ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	f280 80c3 	bge.w	800853a <_dtoa_r+0x592>
 80083b4:	f1b9 0f00 	cmp.w	r9, #0
 80083b8:	f300 80bf 	bgt.w	800853a <_dtoa_r+0x592>
 80083bc:	f040 824c 	bne.w	8008858 <_dtoa_r+0x8b0>
 80083c0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80083c4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80083c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80083cc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80083d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d4:	464c      	mov	r4, r9
 80083d6:	464f      	mov	r7, r9
 80083d8:	f280 8222 	bge.w	8008820 <_dtoa_r+0x878>
 80083dc:	f8dd 8000 	ldr.w	r8, [sp]
 80083e0:	2331      	movs	r3, #49	; 0x31
 80083e2:	f808 3b01 	strb.w	r3, [r8], #1
 80083e6:	f10b 0b01 	add.w	fp, fp, #1
 80083ea:	e21e      	b.n	800882a <_dtoa_r+0x882>
 80083ec:	2202      	movs	r2, #2
 80083ee:	e77c      	b.n	80082ea <_dtoa_r+0x342>
 80083f0:	07cc      	lsls	r4, r1, #31
 80083f2:	d504      	bpl.n	80083fe <_dtoa_r+0x456>
 80083f4:	ed90 6b00 	vldr	d6, [r0]
 80083f8:	3201      	adds	r2, #1
 80083fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80083fe:	1049      	asrs	r1, r1, #1
 8008400:	3008      	adds	r0, #8
 8008402:	e773      	b.n	80082ec <_dtoa_r+0x344>
 8008404:	d02e      	beq.n	8008464 <_dtoa_r+0x4bc>
 8008406:	f1cb 0100 	rsb	r1, fp, #0
 800840a:	4a76      	ldr	r2, [pc, #472]	; (80085e4 <_dtoa_r+0x63c>)
 800840c:	f001 000f 	and.w	r0, r1, #15
 8008410:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008414:	ed92 7b00 	vldr	d7, [r2]
 8008418:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800841c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008420:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008424:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8008428:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800842c:	486e      	ldr	r0, [pc, #440]	; (80085e8 <_dtoa_r+0x640>)
 800842e:	1109      	asrs	r1, r1, #4
 8008430:	2400      	movs	r4, #0
 8008432:	2202      	movs	r2, #2
 8008434:	b939      	cbnz	r1, 8008446 <_dtoa_r+0x49e>
 8008436:	2c00      	cmp	r4, #0
 8008438:	f43f af60 	beq.w	80082fc <_dtoa_r+0x354>
 800843c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008440:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008444:	e75a      	b.n	80082fc <_dtoa_r+0x354>
 8008446:	07cf      	lsls	r7, r1, #31
 8008448:	d509      	bpl.n	800845e <_dtoa_r+0x4b6>
 800844a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800844e:	ed90 7b00 	vldr	d7, [r0]
 8008452:	ee26 7b07 	vmul.f64	d7, d6, d7
 8008456:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800845a:	3201      	adds	r2, #1
 800845c:	2401      	movs	r4, #1
 800845e:	1049      	asrs	r1, r1, #1
 8008460:	3008      	adds	r0, #8
 8008462:	e7e7      	b.n	8008434 <_dtoa_r+0x48c>
 8008464:	2202      	movs	r2, #2
 8008466:	e749      	b.n	80082fc <_dtoa_r+0x354>
 8008468:	465f      	mov	r7, fp
 800846a:	4648      	mov	r0, r9
 800846c:	e765      	b.n	800833a <_dtoa_r+0x392>
 800846e:	ec42 1b17 	vmov	d7, r1, r2
 8008472:	4a5c      	ldr	r2, [pc, #368]	; (80085e4 <_dtoa_r+0x63c>)
 8008474:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008478:	ed12 4b02 	vldr	d4, [r2, #-8]
 800847c:	9a00      	ldr	r2, [sp, #0]
 800847e:	1814      	adds	r4, r2, r0
 8008480:	9a08      	ldr	r2, [sp, #32]
 8008482:	b352      	cbz	r2, 80084da <_dtoa_r+0x532>
 8008484:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008488:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800848c:	f8dd 8000 	ldr.w	r8, [sp]
 8008490:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008494:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008498:	ee35 7b47 	vsub.f64	d7, d5, d7
 800849c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80084a0:	ee14 2a90 	vmov	r2, s9
 80084a4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80084a8:	3230      	adds	r2, #48	; 0x30
 80084aa:	ee36 6b45 	vsub.f64	d6, d6, d5
 80084ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80084b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084b6:	f808 2b01 	strb.w	r2, [r8], #1
 80084ba:	d439      	bmi.n	8008530 <_dtoa_r+0x588>
 80084bc:	ee32 5b46 	vsub.f64	d5, d2, d6
 80084c0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80084c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c8:	d472      	bmi.n	80085b0 <_dtoa_r+0x608>
 80084ca:	45a0      	cmp	r8, r4
 80084cc:	f43f af5d 	beq.w	800838a <_dtoa_r+0x3e2>
 80084d0:	ee27 7b03 	vmul.f64	d7, d7, d3
 80084d4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80084d8:	e7e0      	b.n	800849c <_dtoa_r+0x4f4>
 80084da:	f8dd 8000 	ldr.w	r8, [sp]
 80084de:	ee27 7b04 	vmul.f64	d7, d7, d4
 80084e2:	4621      	mov	r1, r4
 80084e4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80084e8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80084ec:	ee14 2a90 	vmov	r2, s9
 80084f0:	3230      	adds	r2, #48	; 0x30
 80084f2:	f808 2b01 	strb.w	r2, [r8], #1
 80084f6:	45a0      	cmp	r8, r4
 80084f8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80084fc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008500:	d118      	bne.n	8008534 <_dtoa_r+0x58c>
 8008502:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008506:	ee37 4b05 	vadd.f64	d4, d7, d5
 800850a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800850e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008512:	dc4d      	bgt.n	80085b0 <_dtoa_r+0x608>
 8008514:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008518:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800851c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008520:	f57f af33 	bpl.w	800838a <_dtoa_r+0x3e2>
 8008524:	4688      	mov	r8, r1
 8008526:	3901      	subs	r1, #1
 8008528:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800852c:	2b30      	cmp	r3, #48	; 0x30
 800852e:	d0f9      	beq.n	8008524 <_dtoa_r+0x57c>
 8008530:	46bb      	mov	fp, r7
 8008532:	e02a      	b.n	800858a <_dtoa_r+0x5e2>
 8008534:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008538:	e7d6      	b.n	80084e8 <_dtoa_r+0x540>
 800853a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800853e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008542:	f8dd 8000 	ldr.w	r8, [sp]
 8008546:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800854a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800854e:	ee15 3a10 	vmov	r3, s10
 8008552:	3330      	adds	r3, #48	; 0x30
 8008554:	f808 3b01 	strb.w	r3, [r8], #1
 8008558:	9b00      	ldr	r3, [sp, #0]
 800855a:	eba8 0303 	sub.w	r3, r8, r3
 800855e:	4599      	cmp	r9, r3
 8008560:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008564:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008568:	d133      	bne.n	80085d2 <_dtoa_r+0x62a>
 800856a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800856e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008576:	dc1a      	bgt.n	80085ae <_dtoa_r+0x606>
 8008578:	eeb4 7b46 	vcmp.f64	d7, d6
 800857c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008580:	d103      	bne.n	800858a <_dtoa_r+0x5e2>
 8008582:	ee15 3a10 	vmov	r3, s10
 8008586:	07d9      	lsls	r1, r3, #31
 8008588:	d411      	bmi.n	80085ae <_dtoa_r+0x606>
 800858a:	4629      	mov	r1, r5
 800858c:	4630      	mov	r0, r6
 800858e:	f001 f887 	bl	80096a0 <_Bfree>
 8008592:	2300      	movs	r3, #0
 8008594:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008596:	f888 3000 	strb.w	r3, [r8]
 800859a:	f10b 0301 	add.w	r3, fp, #1
 800859e:	6013      	str	r3, [r2, #0]
 80085a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f43f ad4d 	beq.w	8008042 <_dtoa_r+0x9a>
 80085a8:	f8c3 8000 	str.w	r8, [r3]
 80085ac:	e549      	b.n	8008042 <_dtoa_r+0x9a>
 80085ae:	465f      	mov	r7, fp
 80085b0:	4643      	mov	r3, r8
 80085b2:	4698      	mov	r8, r3
 80085b4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085b8:	2a39      	cmp	r2, #57	; 0x39
 80085ba:	d106      	bne.n	80085ca <_dtoa_r+0x622>
 80085bc:	9a00      	ldr	r2, [sp, #0]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d1f7      	bne.n	80085b2 <_dtoa_r+0x60a>
 80085c2:	9900      	ldr	r1, [sp, #0]
 80085c4:	2230      	movs	r2, #48	; 0x30
 80085c6:	3701      	adds	r7, #1
 80085c8:	700a      	strb	r2, [r1, #0]
 80085ca:	781a      	ldrb	r2, [r3, #0]
 80085cc:	3201      	adds	r2, #1
 80085ce:	701a      	strb	r2, [r3, #0]
 80085d0:	e7ae      	b.n	8008530 <_dtoa_r+0x588>
 80085d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80085d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80085da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085de:	d1b2      	bne.n	8008546 <_dtoa_r+0x59e>
 80085e0:	e7d3      	b.n	800858a <_dtoa_r+0x5e2>
 80085e2:	bf00      	nop
 80085e4:	0800b200 	.word	0x0800b200
 80085e8:	0800b1d8 	.word	0x0800b1d8
 80085ec:	9908      	ldr	r1, [sp, #32]
 80085ee:	2900      	cmp	r1, #0
 80085f0:	f000 80d1 	beq.w	8008796 <_dtoa_r+0x7ee>
 80085f4:	9907      	ldr	r1, [sp, #28]
 80085f6:	2901      	cmp	r1, #1
 80085f8:	f300 80b4 	bgt.w	8008764 <_dtoa_r+0x7bc>
 80085fc:	9911      	ldr	r1, [sp, #68]	; 0x44
 80085fe:	2900      	cmp	r1, #0
 8008600:	f000 80ac 	beq.w	800875c <_dtoa_r+0x7b4>
 8008604:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008608:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800860c:	461c      	mov	r4, r3
 800860e:	930a      	str	r3, [sp, #40]	; 0x28
 8008610:	9b05      	ldr	r3, [sp, #20]
 8008612:	4413      	add	r3, r2
 8008614:	9305      	str	r3, [sp, #20]
 8008616:	9b06      	ldr	r3, [sp, #24]
 8008618:	2101      	movs	r1, #1
 800861a:	4413      	add	r3, r2
 800861c:	4630      	mov	r0, r6
 800861e:	9306      	str	r3, [sp, #24]
 8008620:	f001 f944 	bl	80098ac <__i2b>
 8008624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008626:	4607      	mov	r7, r0
 8008628:	f1b8 0f00 	cmp.w	r8, #0
 800862c:	dd0d      	ble.n	800864a <_dtoa_r+0x6a2>
 800862e:	9a06      	ldr	r2, [sp, #24]
 8008630:	2a00      	cmp	r2, #0
 8008632:	dd0a      	ble.n	800864a <_dtoa_r+0x6a2>
 8008634:	4542      	cmp	r2, r8
 8008636:	9905      	ldr	r1, [sp, #20]
 8008638:	bfa8      	it	ge
 800863a:	4642      	movge	r2, r8
 800863c:	1a89      	subs	r1, r1, r2
 800863e:	9105      	str	r1, [sp, #20]
 8008640:	9906      	ldr	r1, [sp, #24]
 8008642:	eba8 0802 	sub.w	r8, r8, r2
 8008646:	1a8a      	subs	r2, r1, r2
 8008648:	9206      	str	r2, [sp, #24]
 800864a:	b303      	cbz	r3, 800868e <_dtoa_r+0x6e6>
 800864c:	9a08      	ldr	r2, [sp, #32]
 800864e:	2a00      	cmp	r2, #0
 8008650:	f000 80a6 	beq.w	80087a0 <_dtoa_r+0x7f8>
 8008654:	2c00      	cmp	r4, #0
 8008656:	dd13      	ble.n	8008680 <_dtoa_r+0x6d8>
 8008658:	4639      	mov	r1, r7
 800865a:	4622      	mov	r2, r4
 800865c:	4630      	mov	r0, r6
 800865e:	930c      	str	r3, [sp, #48]	; 0x30
 8008660:	f001 f9e0 	bl	8009a24 <__pow5mult>
 8008664:	462a      	mov	r2, r5
 8008666:	4601      	mov	r1, r0
 8008668:	4607      	mov	r7, r0
 800866a:	4630      	mov	r0, r6
 800866c:	f001 f934 	bl	80098d8 <__multiply>
 8008670:	4629      	mov	r1, r5
 8008672:	900a      	str	r0, [sp, #40]	; 0x28
 8008674:	4630      	mov	r0, r6
 8008676:	f001 f813 	bl	80096a0 <_Bfree>
 800867a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800867c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800867e:	4615      	mov	r5, r2
 8008680:	1b1a      	subs	r2, r3, r4
 8008682:	d004      	beq.n	800868e <_dtoa_r+0x6e6>
 8008684:	4629      	mov	r1, r5
 8008686:	4630      	mov	r0, r6
 8008688:	f001 f9cc 	bl	8009a24 <__pow5mult>
 800868c:	4605      	mov	r5, r0
 800868e:	2101      	movs	r1, #1
 8008690:	4630      	mov	r0, r6
 8008692:	f001 f90b 	bl	80098ac <__i2b>
 8008696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008698:	2b00      	cmp	r3, #0
 800869a:	4604      	mov	r4, r0
 800869c:	f340 8082 	ble.w	80087a4 <_dtoa_r+0x7fc>
 80086a0:	461a      	mov	r2, r3
 80086a2:	4601      	mov	r1, r0
 80086a4:	4630      	mov	r0, r6
 80086a6:	f001 f9bd 	bl	8009a24 <__pow5mult>
 80086aa:	9b07      	ldr	r3, [sp, #28]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	4604      	mov	r4, r0
 80086b0:	dd7b      	ble.n	80087aa <_dtoa_r+0x802>
 80086b2:	2300      	movs	r3, #0
 80086b4:	930a      	str	r3, [sp, #40]	; 0x28
 80086b6:	6922      	ldr	r2, [r4, #16]
 80086b8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80086bc:	6910      	ldr	r0, [r2, #16]
 80086be:	f001 f8a5 	bl	800980c <__hi0bits>
 80086c2:	f1c0 0020 	rsb	r0, r0, #32
 80086c6:	9b06      	ldr	r3, [sp, #24]
 80086c8:	4418      	add	r0, r3
 80086ca:	f010 001f 	ands.w	r0, r0, #31
 80086ce:	f000 808d 	beq.w	80087ec <_dtoa_r+0x844>
 80086d2:	f1c0 0220 	rsb	r2, r0, #32
 80086d6:	2a04      	cmp	r2, #4
 80086d8:	f340 8086 	ble.w	80087e8 <_dtoa_r+0x840>
 80086dc:	f1c0 001c 	rsb	r0, r0, #28
 80086e0:	9b05      	ldr	r3, [sp, #20]
 80086e2:	4403      	add	r3, r0
 80086e4:	9305      	str	r3, [sp, #20]
 80086e6:	9b06      	ldr	r3, [sp, #24]
 80086e8:	4403      	add	r3, r0
 80086ea:	4480      	add	r8, r0
 80086ec:	9306      	str	r3, [sp, #24]
 80086ee:	9b05      	ldr	r3, [sp, #20]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	dd05      	ble.n	8008700 <_dtoa_r+0x758>
 80086f4:	4629      	mov	r1, r5
 80086f6:	461a      	mov	r2, r3
 80086f8:	4630      	mov	r0, r6
 80086fa:	f001 f9ed 	bl	8009ad8 <__lshift>
 80086fe:	4605      	mov	r5, r0
 8008700:	9b06      	ldr	r3, [sp, #24]
 8008702:	2b00      	cmp	r3, #0
 8008704:	dd05      	ble.n	8008712 <_dtoa_r+0x76a>
 8008706:	4621      	mov	r1, r4
 8008708:	461a      	mov	r2, r3
 800870a:	4630      	mov	r0, r6
 800870c:	f001 f9e4 	bl	8009ad8 <__lshift>
 8008710:	4604      	mov	r4, r0
 8008712:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008714:	2b00      	cmp	r3, #0
 8008716:	d06b      	beq.n	80087f0 <_dtoa_r+0x848>
 8008718:	4621      	mov	r1, r4
 800871a:	4628      	mov	r0, r5
 800871c:	f001 fa48 	bl	8009bb0 <__mcmp>
 8008720:	2800      	cmp	r0, #0
 8008722:	da65      	bge.n	80087f0 <_dtoa_r+0x848>
 8008724:	2300      	movs	r3, #0
 8008726:	4629      	mov	r1, r5
 8008728:	220a      	movs	r2, #10
 800872a:	4630      	mov	r0, r6
 800872c:	f000 ffda 	bl	80096e4 <__multadd>
 8008730:	9b08      	ldr	r3, [sp, #32]
 8008732:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008736:	4605      	mov	r5, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	f000 8192 	beq.w	8008a62 <_dtoa_r+0xaba>
 800873e:	4639      	mov	r1, r7
 8008740:	2300      	movs	r3, #0
 8008742:	220a      	movs	r2, #10
 8008744:	4630      	mov	r0, r6
 8008746:	f000 ffcd 	bl	80096e4 <__multadd>
 800874a:	f1ba 0f00 	cmp.w	sl, #0
 800874e:	4607      	mov	r7, r0
 8008750:	f300 808e 	bgt.w	8008870 <_dtoa_r+0x8c8>
 8008754:	9b07      	ldr	r3, [sp, #28]
 8008756:	2b02      	cmp	r3, #2
 8008758:	dc51      	bgt.n	80087fe <_dtoa_r+0x856>
 800875a:	e089      	b.n	8008870 <_dtoa_r+0x8c8>
 800875c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800875e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008762:	e751      	b.n	8008608 <_dtoa_r+0x660>
 8008764:	f109 34ff 	add.w	r4, r9, #4294967295
 8008768:	42a3      	cmp	r3, r4
 800876a:	bfbf      	itttt	lt
 800876c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800876e:	1ae3      	sublt	r3, r4, r3
 8008770:	18d2      	addlt	r2, r2, r3
 8008772:	4613      	movlt	r3, r2
 8008774:	bfb7      	itett	lt
 8008776:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008778:	1b1c      	subge	r4, r3, r4
 800877a:	4623      	movlt	r3, r4
 800877c:	2400      	movlt	r4, #0
 800877e:	f1b9 0f00 	cmp.w	r9, #0
 8008782:	bfb5      	itete	lt
 8008784:	9a05      	ldrlt	r2, [sp, #20]
 8008786:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800878a:	eba2 0809 	sublt.w	r8, r2, r9
 800878e:	464a      	movge	r2, r9
 8008790:	bfb8      	it	lt
 8008792:	2200      	movlt	r2, #0
 8008794:	e73b      	b.n	800860e <_dtoa_r+0x666>
 8008796:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800879a:	9f08      	ldr	r7, [sp, #32]
 800879c:	461c      	mov	r4, r3
 800879e:	e743      	b.n	8008628 <_dtoa_r+0x680>
 80087a0:	461a      	mov	r2, r3
 80087a2:	e76f      	b.n	8008684 <_dtoa_r+0x6dc>
 80087a4:	9b07      	ldr	r3, [sp, #28]
 80087a6:	2b01      	cmp	r3, #1
 80087a8:	dc18      	bgt.n	80087dc <_dtoa_r+0x834>
 80087aa:	9b02      	ldr	r3, [sp, #8]
 80087ac:	b9b3      	cbnz	r3, 80087dc <_dtoa_r+0x834>
 80087ae:	9b03      	ldr	r3, [sp, #12]
 80087b0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80087b4:	b9a2      	cbnz	r2, 80087e0 <_dtoa_r+0x838>
 80087b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80087ba:	0d12      	lsrs	r2, r2, #20
 80087bc:	0512      	lsls	r2, r2, #20
 80087be:	b18a      	cbz	r2, 80087e4 <_dtoa_r+0x83c>
 80087c0:	9b05      	ldr	r3, [sp, #20]
 80087c2:	3301      	adds	r3, #1
 80087c4:	9305      	str	r3, [sp, #20]
 80087c6:	9b06      	ldr	r3, [sp, #24]
 80087c8:	3301      	adds	r3, #1
 80087ca:	9306      	str	r3, [sp, #24]
 80087cc:	2301      	movs	r3, #1
 80087ce:	930a      	str	r3, [sp, #40]	; 0x28
 80087d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	f47f af6f 	bne.w	80086b6 <_dtoa_r+0x70e>
 80087d8:	2001      	movs	r0, #1
 80087da:	e774      	b.n	80086c6 <_dtoa_r+0x71e>
 80087dc:	2300      	movs	r3, #0
 80087de:	e7f6      	b.n	80087ce <_dtoa_r+0x826>
 80087e0:	9b02      	ldr	r3, [sp, #8]
 80087e2:	e7f4      	b.n	80087ce <_dtoa_r+0x826>
 80087e4:	920a      	str	r2, [sp, #40]	; 0x28
 80087e6:	e7f3      	b.n	80087d0 <_dtoa_r+0x828>
 80087e8:	d081      	beq.n	80086ee <_dtoa_r+0x746>
 80087ea:	4610      	mov	r0, r2
 80087ec:	301c      	adds	r0, #28
 80087ee:	e777      	b.n	80086e0 <_dtoa_r+0x738>
 80087f0:	f1b9 0f00 	cmp.w	r9, #0
 80087f4:	dc37      	bgt.n	8008866 <_dtoa_r+0x8be>
 80087f6:	9b07      	ldr	r3, [sp, #28]
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	dd34      	ble.n	8008866 <_dtoa_r+0x8be>
 80087fc:	46ca      	mov	sl, r9
 80087fe:	f1ba 0f00 	cmp.w	sl, #0
 8008802:	d10d      	bne.n	8008820 <_dtoa_r+0x878>
 8008804:	4621      	mov	r1, r4
 8008806:	4653      	mov	r3, sl
 8008808:	2205      	movs	r2, #5
 800880a:	4630      	mov	r0, r6
 800880c:	f000 ff6a 	bl	80096e4 <__multadd>
 8008810:	4601      	mov	r1, r0
 8008812:	4604      	mov	r4, r0
 8008814:	4628      	mov	r0, r5
 8008816:	f001 f9cb 	bl	8009bb0 <__mcmp>
 800881a:	2800      	cmp	r0, #0
 800881c:	f73f adde 	bgt.w	80083dc <_dtoa_r+0x434>
 8008820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008822:	f8dd 8000 	ldr.w	r8, [sp]
 8008826:	ea6f 0b03 	mvn.w	fp, r3
 800882a:	f04f 0900 	mov.w	r9, #0
 800882e:	4621      	mov	r1, r4
 8008830:	4630      	mov	r0, r6
 8008832:	f000 ff35 	bl	80096a0 <_Bfree>
 8008836:	2f00      	cmp	r7, #0
 8008838:	f43f aea7 	beq.w	800858a <_dtoa_r+0x5e2>
 800883c:	f1b9 0f00 	cmp.w	r9, #0
 8008840:	d005      	beq.n	800884e <_dtoa_r+0x8a6>
 8008842:	45b9      	cmp	r9, r7
 8008844:	d003      	beq.n	800884e <_dtoa_r+0x8a6>
 8008846:	4649      	mov	r1, r9
 8008848:	4630      	mov	r0, r6
 800884a:	f000 ff29 	bl	80096a0 <_Bfree>
 800884e:	4639      	mov	r1, r7
 8008850:	4630      	mov	r0, r6
 8008852:	f000 ff25 	bl	80096a0 <_Bfree>
 8008856:	e698      	b.n	800858a <_dtoa_r+0x5e2>
 8008858:	2400      	movs	r4, #0
 800885a:	4627      	mov	r7, r4
 800885c:	e7e0      	b.n	8008820 <_dtoa_r+0x878>
 800885e:	46bb      	mov	fp, r7
 8008860:	4604      	mov	r4, r0
 8008862:	4607      	mov	r7, r0
 8008864:	e5ba      	b.n	80083dc <_dtoa_r+0x434>
 8008866:	9b08      	ldr	r3, [sp, #32]
 8008868:	46ca      	mov	sl, r9
 800886a:	2b00      	cmp	r3, #0
 800886c:	f000 8100 	beq.w	8008a70 <_dtoa_r+0xac8>
 8008870:	f1b8 0f00 	cmp.w	r8, #0
 8008874:	dd05      	ble.n	8008882 <_dtoa_r+0x8da>
 8008876:	4639      	mov	r1, r7
 8008878:	4642      	mov	r2, r8
 800887a:	4630      	mov	r0, r6
 800887c:	f001 f92c 	bl	8009ad8 <__lshift>
 8008880:	4607      	mov	r7, r0
 8008882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008884:	2b00      	cmp	r3, #0
 8008886:	d05d      	beq.n	8008944 <_dtoa_r+0x99c>
 8008888:	6879      	ldr	r1, [r7, #4]
 800888a:	4630      	mov	r0, r6
 800888c:	f000 fec8 	bl	8009620 <_Balloc>
 8008890:	4680      	mov	r8, r0
 8008892:	b928      	cbnz	r0, 80088a0 <_dtoa_r+0x8f8>
 8008894:	4b82      	ldr	r3, [pc, #520]	; (8008aa0 <_dtoa_r+0xaf8>)
 8008896:	4602      	mov	r2, r0
 8008898:	f240 21ea 	movw	r1, #746	; 0x2ea
 800889c:	f7ff bb9a 	b.w	8007fd4 <_dtoa_r+0x2c>
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	3202      	adds	r2, #2
 80088a4:	0092      	lsls	r2, r2, #2
 80088a6:	f107 010c 	add.w	r1, r7, #12
 80088aa:	300c      	adds	r0, #12
 80088ac:	f000 feaa 	bl	8009604 <memcpy>
 80088b0:	2201      	movs	r2, #1
 80088b2:	4641      	mov	r1, r8
 80088b4:	4630      	mov	r0, r6
 80088b6:	f001 f90f 	bl	8009ad8 <__lshift>
 80088ba:	9b00      	ldr	r3, [sp, #0]
 80088bc:	3301      	adds	r3, #1
 80088be:	9305      	str	r3, [sp, #20]
 80088c0:	9b00      	ldr	r3, [sp, #0]
 80088c2:	4453      	add	r3, sl
 80088c4:	9309      	str	r3, [sp, #36]	; 0x24
 80088c6:	9b02      	ldr	r3, [sp, #8]
 80088c8:	f003 0301 	and.w	r3, r3, #1
 80088cc:	46b9      	mov	r9, r7
 80088ce:	9308      	str	r3, [sp, #32]
 80088d0:	4607      	mov	r7, r0
 80088d2:	9b05      	ldr	r3, [sp, #20]
 80088d4:	4621      	mov	r1, r4
 80088d6:	3b01      	subs	r3, #1
 80088d8:	4628      	mov	r0, r5
 80088da:	9302      	str	r3, [sp, #8]
 80088dc:	f7ff fad6 	bl	8007e8c <quorem>
 80088e0:	4603      	mov	r3, r0
 80088e2:	3330      	adds	r3, #48	; 0x30
 80088e4:	9006      	str	r0, [sp, #24]
 80088e6:	4649      	mov	r1, r9
 80088e8:	4628      	mov	r0, r5
 80088ea:	930a      	str	r3, [sp, #40]	; 0x28
 80088ec:	f001 f960 	bl	8009bb0 <__mcmp>
 80088f0:	463a      	mov	r2, r7
 80088f2:	4682      	mov	sl, r0
 80088f4:	4621      	mov	r1, r4
 80088f6:	4630      	mov	r0, r6
 80088f8:	f001 f976 	bl	8009be8 <__mdiff>
 80088fc:	68c2      	ldr	r2, [r0, #12]
 80088fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008900:	4680      	mov	r8, r0
 8008902:	bb0a      	cbnz	r2, 8008948 <_dtoa_r+0x9a0>
 8008904:	4601      	mov	r1, r0
 8008906:	4628      	mov	r0, r5
 8008908:	f001 f952 	bl	8009bb0 <__mcmp>
 800890c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800890e:	4602      	mov	r2, r0
 8008910:	4641      	mov	r1, r8
 8008912:	4630      	mov	r0, r6
 8008914:	920e      	str	r2, [sp, #56]	; 0x38
 8008916:	930a      	str	r3, [sp, #40]	; 0x28
 8008918:	f000 fec2 	bl	80096a0 <_Bfree>
 800891c:	9b07      	ldr	r3, [sp, #28]
 800891e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008920:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8008924:	ea43 0102 	orr.w	r1, r3, r2
 8008928:	9b08      	ldr	r3, [sp, #32]
 800892a:	430b      	orrs	r3, r1
 800892c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800892e:	d10d      	bne.n	800894c <_dtoa_r+0x9a4>
 8008930:	2b39      	cmp	r3, #57	; 0x39
 8008932:	d029      	beq.n	8008988 <_dtoa_r+0x9e0>
 8008934:	f1ba 0f00 	cmp.w	sl, #0
 8008938:	dd01      	ble.n	800893e <_dtoa_r+0x996>
 800893a:	9b06      	ldr	r3, [sp, #24]
 800893c:	3331      	adds	r3, #49	; 0x31
 800893e:	9a02      	ldr	r2, [sp, #8]
 8008940:	7013      	strb	r3, [r2, #0]
 8008942:	e774      	b.n	800882e <_dtoa_r+0x886>
 8008944:	4638      	mov	r0, r7
 8008946:	e7b8      	b.n	80088ba <_dtoa_r+0x912>
 8008948:	2201      	movs	r2, #1
 800894a:	e7e1      	b.n	8008910 <_dtoa_r+0x968>
 800894c:	f1ba 0f00 	cmp.w	sl, #0
 8008950:	db06      	blt.n	8008960 <_dtoa_r+0x9b8>
 8008952:	9907      	ldr	r1, [sp, #28]
 8008954:	ea41 0a0a 	orr.w	sl, r1, sl
 8008958:	9908      	ldr	r1, [sp, #32]
 800895a:	ea5a 0101 	orrs.w	r1, sl, r1
 800895e:	d120      	bne.n	80089a2 <_dtoa_r+0x9fa>
 8008960:	2a00      	cmp	r2, #0
 8008962:	ddec      	ble.n	800893e <_dtoa_r+0x996>
 8008964:	4629      	mov	r1, r5
 8008966:	2201      	movs	r2, #1
 8008968:	4630      	mov	r0, r6
 800896a:	9305      	str	r3, [sp, #20]
 800896c:	f001 f8b4 	bl	8009ad8 <__lshift>
 8008970:	4621      	mov	r1, r4
 8008972:	4605      	mov	r5, r0
 8008974:	f001 f91c 	bl	8009bb0 <__mcmp>
 8008978:	2800      	cmp	r0, #0
 800897a:	9b05      	ldr	r3, [sp, #20]
 800897c:	dc02      	bgt.n	8008984 <_dtoa_r+0x9dc>
 800897e:	d1de      	bne.n	800893e <_dtoa_r+0x996>
 8008980:	07da      	lsls	r2, r3, #31
 8008982:	d5dc      	bpl.n	800893e <_dtoa_r+0x996>
 8008984:	2b39      	cmp	r3, #57	; 0x39
 8008986:	d1d8      	bne.n	800893a <_dtoa_r+0x992>
 8008988:	9a02      	ldr	r2, [sp, #8]
 800898a:	2339      	movs	r3, #57	; 0x39
 800898c:	7013      	strb	r3, [r2, #0]
 800898e:	4643      	mov	r3, r8
 8008990:	4698      	mov	r8, r3
 8008992:	3b01      	subs	r3, #1
 8008994:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8008998:	2a39      	cmp	r2, #57	; 0x39
 800899a:	d051      	beq.n	8008a40 <_dtoa_r+0xa98>
 800899c:	3201      	adds	r2, #1
 800899e:	701a      	strb	r2, [r3, #0]
 80089a0:	e745      	b.n	800882e <_dtoa_r+0x886>
 80089a2:	2a00      	cmp	r2, #0
 80089a4:	dd03      	ble.n	80089ae <_dtoa_r+0xa06>
 80089a6:	2b39      	cmp	r3, #57	; 0x39
 80089a8:	d0ee      	beq.n	8008988 <_dtoa_r+0x9e0>
 80089aa:	3301      	adds	r3, #1
 80089ac:	e7c7      	b.n	800893e <_dtoa_r+0x996>
 80089ae:	9a05      	ldr	r2, [sp, #20]
 80089b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089b2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80089b6:	428a      	cmp	r2, r1
 80089b8:	d02b      	beq.n	8008a12 <_dtoa_r+0xa6a>
 80089ba:	4629      	mov	r1, r5
 80089bc:	2300      	movs	r3, #0
 80089be:	220a      	movs	r2, #10
 80089c0:	4630      	mov	r0, r6
 80089c2:	f000 fe8f 	bl	80096e4 <__multadd>
 80089c6:	45b9      	cmp	r9, r7
 80089c8:	4605      	mov	r5, r0
 80089ca:	f04f 0300 	mov.w	r3, #0
 80089ce:	f04f 020a 	mov.w	r2, #10
 80089d2:	4649      	mov	r1, r9
 80089d4:	4630      	mov	r0, r6
 80089d6:	d107      	bne.n	80089e8 <_dtoa_r+0xa40>
 80089d8:	f000 fe84 	bl	80096e4 <__multadd>
 80089dc:	4681      	mov	r9, r0
 80089de:	4607      	mov	r7, r0
 80089e0:	9b05      	ldr	r3, [sp, #20]
 80089e2:	3301      	adds	r3, #1
 80089e4:	9305      	str	r3, [sp, #20]
 80089e6:	e774      	b.n	80088d2 <_dtoa_r+0x92a>
 80089e8:	f000 fe7c 	bl	80096e4 <__multadd>
 80089ec:	4639      	mov	r1, r7
 80089ee:	4681      	mov	r9, r0
 80089f0:	2300      	movs	r3, #0
 80089f2:	220a      	movs	r2, #10
 80089f4:	4630      	mov	r0, r6
 80089f6:	f000 fe75 	bl	80096e4 <__multadd>
 80089fa:	4607      	mov	r7, r0
 80089fc:	e7f0      	b.n	80089e0 <_dtoa_r+0xa38>
 80089fe:	f1ba 0f00 	cmp.w	sl, #0
 8008a02:	9a00      	ldr	r2, [sp, #0]
 8008a04:	bfcc      	ite	gt
 8008a06:	46d0      	movgt	r8, sl
 8008a08:	f04f 0801 	movle.w	r8, #1
 8008a0c:	4490      	add	r8, r2
 8008a0e:	f04f 0900 	mov.w	r9, #0
 8008a12:	4629      	mov	r1, r5
 8008a14:	2201      	movs	r2, #1
 8008a16:	4630      	mov	r0, r6
 8008a18:	9302      	str	r3, [sp, #8]
 8008a1a:	f001 f85d 	bl	8009ad8 <__lshift>
 8008a1e:	4621      	mov	r1, r4
 8008a20:	4605      	mov	r5, r0
 8008a22:	f001 f8c5 	bl	8009bb0 <__mcmp>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	dcb1      	bgt.n	800898e <_dtoa_r+0x9e6>
 8008a2a:	d102      	bne.n	8008a32 <_dtoa_r+0xa8a>
 8008a2c:	9b02      	ldr	r3, [sp, #8]
 8008a2e:	07db      	lsls	r3, r3, #31
 8008a30:	d4ad      	bmi.n	800898e <_dtoa_r+0x9e6>
 8008a32:	4643      	mov	r3, r8
 8008a34:	4698      	mov	r8, r3
 8008a36:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a3a:	2a30      	cmp	r2, #48	; 0x30
 8008a3c:	d0fa      	beq.n	8008a34 <_dtoa_r+0xa8c>
 8008a3e:	e6f6      	b.n	800882e <_dtoa_r+0x886>
 8008a40:	9a00      	ldr	r2, [sp, #0]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d1a4      	bne.n	8008990 <_dtoa_r+0x9e8>
 8008a46:	f10b 0b01 	add.w	fp, fp, #1
 8008a4a:	2331      	movs	r3, #49	; 0x31
 8008a4c:	e778      	b.n	8008940 <_dtoa_r+0x998>
 8008a4e:	4b15      	ldr	r3, [pc, #84]	; (8008aa4 <_dtoa_r+0xafc>)
 8008a50:	f7ff bb12 	b.w	8008078 <_dtoa_r+0xd0>
 8008a54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	f47f aaee 	bne.w	8008038 <_dtoa_r+0x90>
 8008a5c:	4b12      	ldr	r3, [pc, #72]	; (8008aa8 <_dtoa_r+0xb00>)
 8008a5e:	f7ff bb0b 	b.w	8008078 <_dtoa_r+0xd0>
 8008a62:	f1ba 0f00 	cmp.w	sl, #0
 8008a66:	dc03      	bgt.n	8008a70 <_dtoa_r+0xac8>
 8008a68:	9b07      	ldr	r3, [sp, #28]
 8008a6a:	2b02      	cmp	r3, #2
 8008a6c:	f73f aec7 	bgt.w	80087fe <_dtoa_r+0x856>
 8008a70:	f8dd 8000 	ldr.w	r8, [sp]
 8008a74:	4621      	mov	r1, r4
 8008a76:	4628      	mov	r0, r5
 8008a78:	f7ff fa08 	bl	8007e8c <quorem>
 8008a7c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008a80:	f808 3b01 	strb.w	r3, [r8], #1
 8008a84:	9a00      	ldr	r2, [sp, #0]
 8008a86:	eba8 0202 	sub.w	r2, r8, r2
 8008a8a:	4592      	cmp	sl, r2
 8008a8c:	ddb7      	ble.n	80089fe <_dtoa_r+0xa56>
 8008a8e:	4629      	mov	r1, r5
 8008a90:	2300      	movs	r3, #0
 8008a92:	220a      	movs	r2, #10
 8008a94:	4630      	mov	r0, r6
 8008a96:	f000 fe25 	bl	80096e4 <__multadd>
 8008a9a:	4605      	mov	r5, r0
 8008a9c:	e7ea      	b.n	8008a74 <_dtoa_r+0xacc>
 8008a9e:	bf00      	nop
 8008aa0:	0800b084 	.word	0x0800b084
 8008aa4:	0800ae84 	.word	0x0800ae84
 8008aa8:	0800b001 	.word	0x0800b001

08008aac <__sflush_r>:
 8008aac:	898a      	ldrh	r2, [r1, #12]
 8008aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	0710      	lsls	r0, r2, #28
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	d458      	bmi.n	8008b6c <__sflush_r+0xc0>
 8008aba:	684b      	ldr	r3, [r1, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	dc05      	bgt.n	8008acc <__sflush_r+0x20>
 8008ac0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	dc02      	bgt.n	8008acc <__sflush_r+0x20>
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008acc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ace:	2e00      	cmp	r6, #0
 8008ad0:	d0f9      	beq.n	8008ac6 <__sflush_r+0x1a>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ad8:	682f      	ldr	r7, [r5, #0]
 8008ada:	602b      	str	r3, [r5, #0]
 8008adc:	d032      	beq.n	8008b44 <__sflush_r+0x98>
 8008ade:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ae0:	89a3      	ldrh	r3, [r4, #12]
 8008ae2:	075a      	lsls	r2, r3, #29
 8008ae4:	d505      	bpl.n	8008af2 <__sflush_r+0x46>
 8008ae6:	6863      	ldr	r3, [r4, #4]
 8008ae8:	1ac0      	subs	r0, r0, r3
 8008aea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008aec:	b10b      	cbz	r3, 8008af2 <__sflush_r+0x46>
 8008aee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008af0:	1ac0      	subs	r0, r0, r3
 8008af2:	2300      	movs	r3, #0
 8008af4:	4602      	mov	r2, r0
 8008af6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008af8:	6a21      	ldr	r1, [r4, #32]
 8008afa:	4628      	mov	r0, r5
 8008afc:	47b0      	blx	r6
 8008afe:	1c43      	adds	r3, r0, #1
 8008b00:	89a3      	ldrh	r3, [r4, #12]
 8008b02:	d106      	bne.n	8008b12 <__sflush_r+0x66>
 8008b04:	6829      	ldr	r1, [r5, #0]
 8008b06:	291d      	cmp	r1, #29
 8008b08:	d82c      	bhi.n	8008b64 <__sflush_r+0xb8>
 8008b0a:	4a2a      	ldr	r2, [pc, #168]	; (8008bb4 <__sflush_r+0x108>)
 8008b0c:	40ca      	lsrs	r2, r1
 8008b0e:	07d6      	lsls	r6, r2, #31
 8008b10:	d528      	bpl.n	8008b64 <__sflush_r+0xb8>
 8008b12:	2200      	movs	r2, #0
 8008b14:	6062      	str	r2, [r4, #4]
 8008b16:	04d9      	lsls	r1, r3, #19
 8008b18:	6922      	ldr	r2, [r4, #16]
 8008b1a:	6022      	str	r2, [r4, #0]
 8008b1c:	d504      	bpl.n	8008b28 <__sflush_r+0x7c>
 8008b1e:	1c42      	adds	r2, r0, #1
 8008b20:	d101      	bne.n	8008b26 <__sflush_r+0x7a>
 8008b22:	682b      	ldr	r3, [r5, #0]
 8008b24:	b903      	cbnz	r3, 8008b28 <__sflush_r+0x7c>
 8008b26:	6560      	str	r0, [r4, #84]	; 0x54
 8008b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b2a:	602f      	str	r7, [r5, #0]
 8008b2c:	2900      	cmp	r1, #0
 8008b2e:	d0ca      	beq.n	8008ac6 <__sflush_r+0x1a>
 8008b30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b34:	4299      	cmp	r1, r3
 8008b36:	d002      	beq.n	8008b3e <__sflush_r+0x92>
 8008b38:	4628      	mov	r0, r5
 8008b3a:	f001 fa3d 	bl	8009fb8 <_free_r>
 8008b3e:	2000      	movs	r0, #0
 8008b40:	6360      	str	r0, [r4, #52]	; 0x34
 8008b42:	e7c1      	b.n	8008ac8 <__sflush_r+0x1c>
 8008b44:	6a21      	ldr	r1, [r4, #32]
 8008b46:	2301      	movs	r3, #1
 8008b48:	4628      	mov	r0, r5
 8008b4a:	47b0      	blx	r6
 8008b4c:	1c41      	adds	r1, r0, #1
 8008b4e:	d1c7      	bne.n	8008ae0 <__sflush_r+0x34>
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d0c4      	beq.n	8008ae0 <__sflush_r+0x34>
 8008b56:	2b1d      	cmp	r3, #29
 8008b58:	d001      	beq.n	8008b5e <__sflush_r+0xb2>
 8008b5a:	2b16      	cmp	r3, #22
 8008b5c:	d101      	bne.n	8008b62 <__sflush_r+0xb6>
 8008b5e:	602f      	str	r7, [r5, #0]
 8008b60:	e7b1      	b.n	8008ac6 <__sflush_r+0x1a>
 8008b62:	89a3      	ldrh	r3, [r4, #12]
 8008b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b68:	81a3      	strh	r3, [r4, #12]
 8008b6a:	e7ad      	b.n	8008ac8 <__sflush_r+0x1c>
 8008b6c:	690f      	ldr	r7, [r1, #16]
 8008b6e:	2f00      	cmp	r7, #0
 8008b70:	d0a9      	beq.n	8008ac6 <__sflush_r+0x1a>
 8008b72:	0793      	lsls	r3, r2, #30
 8008b74:	680e      	ldr	r6, [r1, #0]
 8008b76:	bf08      	it	eq
 8008b78:	694b      	ldreq	r3, [r1, #20]
 8008b7a:	600f      	str	r7, [r1, #0]
 8008b7c:	bf18      	it	ne
 8008b7e:	2300      	movne	r3, #0
 8008b80:	eba6 0807 	sub.w	r8, r6, r7
 8008b84:	608b      	str	r3, [r1, #8]
 8008b86:	f1b8 0f00 	cmp.w	r8, #0
 8008b8a:	dd9c      	ble.n	8008ac6 <__sflush_r+0x1a>
 8008b8c:	6a21      	ldr	r1, [r4, #32]
 8008b8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b90:	4643      	mov	r3, r8
 8008b92:	463a      	mov	r2, r7
 8008b94:	4628      	mov	r0, r5
 8008b96:	47b0      	blx	r6
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	dc06      	bgt.n	8008baa <__sflush_r+0xfe>
 8008b9c:	89a3      	ldrh	r3, [r4, #12]
 8008b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ba2:	81a3      	strh	r3, [r4, #12]
 8008ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba8:	e78e      	b.n	8008ac8 <__sflush_r+0x1c>
 8008baa:	4407      	add	r7, r0
 8008bac:	eba8 0800 	sub.w	r8, r8, r0
 8008bb0:	e7e9      	b.n	8008b86 <__sflush_r+0xda>
 8008bb2:	bf00      	nop
 8008bb4:	20400001 	.word	0x20400001

08008bb8 <_fflush_r>:
 8008bb8:	b538      	push	{r3, r4, r5, lr}
 8008bba:	690b      	ldr	r3, [r1, #16]
 8008bbc:	4605      	mov	r5, r0
 8008bbe:	460c      	mov	r4, r1
 8008bc0:	b913      	cbnz	r3, 8008bc8 <_fflush_r+0x10>
 8008bc2:	2500      	movs	r5, #0
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	bd38      	pop	{r3, r4, r5, pc}
 8008bc8:	b118      	cbz	r0, 8008bd2 <_fflush_r+0x1a>
 8008bca:	6983      	ldr	r3, [r0, #24]
 8008bcc:	b90b      	cbnz	r3, 8008bd2 <_fflush_r+0x1a>
 8008bce:	f000 f887 	bl	8008ce0 <__sinit>
 8008bd2:	4b14      	ldr	r3, [pc, #80]	; (8008c24 <_fflush_r+0x6c>)
 8008bd4:	429c      	cmp	r4, r3
 8008bd6:	d11b      	bne.n	8008c10 <_fflush_r+0x58>
 8008bd8:	686c      	ldr	r4, [r5, #4]
 8008bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d0ef      	beq.n	8008bc2 <_fflush_r+0xa>
 8008be2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008be4:	07d0      	lsls	r0, r2, #31
 8008be6:	d404      	bmi.n	8008bf2 <_fflush_r+0x3a>
 8008be8:	0599      	lsls	r1, r3, #22
 8008bea:	d402      	bmi.n	8008bf2 <_fflush_r+0x3a>
 8008bec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bee:	f000 fc88 	bl	8009502 <__retarget_lock_acquire_recursive>
 8008bf2:	4628      	mov	r0, r5
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	f7ff ff59 	bl	8008aac <__sflush_r>
 8008bfa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bfc:	07da      	lsls	r2, r3, #31
 8008bfe:	4605      	mov	r5, r0
 8008c00:	d4e0      	bmi.n	8008bc4 <_fflush_r+0xc>
 8008c02:	89a3      	ldrh	r3, [r4, #12]
 8008c04:	059b      	lsls	r3, r3, #22
 8008c06:	d4dd      	bmi.n	8008bc4 <_fflush_r+0xc>
 8008c08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c0a:	f000 fc7b 	bl	8009504 <__retarget_lock_release_recursive>
 8008c0e:	e7d9      	b.n	8008bc4 <_fflush_r+0xc>
 8008c10:	4b05      	ldr	r3, [pc, #20]	; (8008c28 <_fflush_r+0x70>)
 8008c12:	429c      	cmp	r4, r3
 8008c14:	d101      	bne.n	8008c1a <_fflush_r+0x62>
 8008c16:	68ac      	ldr	r4, [r5, #8]
 8008c18:	e7df      	b.n	8008bda <_fflush_r+0x22>
 8008c1a:	4b04      	ldr	r3, [pc, #16]	; (8008c2c <_fflush_r+0x74>)
 8008c1c:	429c      	cmp	r4, r3
 8008c1e:	bf08      	it	eq
 8008c20:	68ec      	ldreq	r4, [r5, #12]
 8008c22:	e7da      	b.n	8008bda <_fflush_r+0x22>
 8008c24:	0800b0b8 	.word	0x0800b0b8
 8008c28:	0800b0d8 	.word	0x0800b0d8
 8008c2c:	0800b098 	.word	0x0800b098

08008c30 <std>:
 8008c30:	2300      	movs	r3, #0
 8008c32:	b510      	push	{r4, lr}
 8008c34:	4604      	mov	r4, r0
 8008c36:	e9c0 3300 	strd	r3, r3, [r0]
 8008c3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c3e:	6083      	str	r3, [r0, #8]
 8008c40:	8181      	strh	r1, [r0, #12]
 8008c42:	6643      	str	r3, [r0, #100]	; 0x64
 8008c44:	81c2      	strh	r2, [r0, #14]
 8008c46:	6183      	str	r3, [r0, #24]
 8008c48:	4619      	mov	r1, r3
 8008c4a:	2208      	movs	r2, #8
 8008c4c:	305c      	adds	r0, #92	; 0x5c
 8008c4e:	f7fd fac7 	bl	80061e0 <memset>
 8008c52:	4b05      	ldr	r3, [pc, #20]	; (8008c68 <std+0x38>)
 8008c54:	6263      	str	r3, [r4, #36]	; 0x24
 8008c56:	4b05      	ldr	r3, [pc, #20]	; (8008c6c <std+0x3c>)
 8008c58:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c5a:	4b05      	ldr	r3, [pc, #20]	; (8008c70 <std+0x40>)
 8008c5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c5e:	4b05      	ldr	r3, [pc, #20]	; (8008c74 <std+0x44>)
 8008c60:	6224      	str	r4, [r4, #32]
 8008c62:	6323      	str	r3, [r4, #48]	; 0x30
 8008c64:	bd10      	pop	{r4, pc}
 8008c66:	bf00      	nop
 8008c68:	0800a739 	.word	0x0800a739
 8008c6c:	0800a75b 	.word	0x0800a75b
 8008c70:	0800a793 	.word	0x0800a793
 8008c74:	0800a7b7 	.word	0x0800a7b7

08008c78 <_cleanup_r>:
 8008c78:	4901      	ldr	r1, [pc, #4]	; (8008c80 <_cleanup_r+0x8>)
 8008c7a:	f000 b8af 	b.w	8008ddc <_fwalk_reent>
 8008c7e:	bf00      	nop
 8008c80:	08008bb9 	.word	0x08008bb9

08008c84 <__sfmoreglue>:
 8008c84:	b570      	push	{r4, r5, r6, lr}
 8008c86:	1e4a      	subs	r2, r1, #1
 8008c88:	2568      	movs	r5, #104	; 0x68
 8008c8a:	4355      	muls	r5, r2
 8008c8c:	460e      	mov	r6, r1
 8008c8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c92:	f001 f9e1 	bl	800a058 <_malloc_r>
 8008c96:	4604      	mov	r4, r0
 8008c98:	b140      	cbz	r0, 8008cac <__sfmoreglue+0x28>
 8008c9a:	2100      	movs	r1, #0
 8008c9c:	e9c0 1600 	strd	r1, r6, [r0]
 8008ca0:	300c      	adds	r0, #12
 8008ca2:	60a0      	str	r0, [r4, #8]
 8008ca4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008ca8:	f7fd fa9a 	bl	80061e0 <memset>
 8008cac:	4620      	mov	r0, r4
 8008cae:	bd70      	pop	{r4, r5, r6, pc}

08008cb0 <__sfp_lock_acquire>:
 8008cb0:	4801      	ldr	r0, [pc, #4]	; (8008cb8 <__sfp_lock_acquire+0x8>)
 8008cb2:	f000 bc26 	b.w	8009502 <__retarget_lock_acquire_recursive>
 8008cb6:	bf00      	nop
 8008cb8:	20000580 	.word	0x20000580

08008cbc <__sfp_lock_release>:
 8008cbc:	4801      	ldr	r0, [pc, #4]	; (8008cc4 <__sfp_lock_release+0x8>)
 8008cbe:	f000 bc21 	b.w	8009504 <__retarget_lock_release_recursive>
 8008cc2:	bf00      	nop
 8008cc4:	20000580 	.word	0x20000580

08008cc8 <__sinit_lock_acquire>:
 8008cc8:	4801      	ldr	r0, [pc, #4]	; (8008cd0 <__sinit_lock_acquire+0x8>)
 8008cca:	f000 bc1a 	b.w	8009502 <__retarget_lock_acquire_recursive>
 8008cce:	bf00      	nop
 8008cd0:	2000057b 	.word	0x2000057b

08008cd4 <__sinit_lock_release>:
 8008cd4:	4801      	ldr	r0, [pc, #4]	; (8008cdc <__sinit_lock_release+0x8>)
 8008cd6:	f000 bc15 	b.w	8009504 <__retarget_lock_release_recursive>
 8008cda:	bf00      	nop
 8008cdc:	2000057b 	.word	0x2000057b

08008ce0 <__sinit>:
 8008ce0:	b510      	push	{r4, lr}
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	f7ff fff0 	bl	8008cc8 <__sinit_lock_acquire>
 8008ce8:	69a3      	ldr	r3, [r4, #24]
 8008cea:	b11b      	cbz	r3, 8008cf4 <__sinit+0x14>
 8008cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cf0:	f7ff bff0 	b.w	8008cd4 <__sinit_lock_release>
 8008cf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008cf8:	6523      	str	r3, [r4, #80]	; 0x50
 8008cfa:	4b13      	ldr	r3, [pc, #76]	; (8008d48 <__sinit+0x68>)
 8008cfc:	4a13      	ldr	r2, [pc, #76]	; (8008d4c <__sinit+0x6c>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d02:	42a3      	cmp	r3, r4
 8008d04:	bf04      	itt	eq
 8008d06:	2301      	moveq	r3, #1
 8008d08:	61a3      	streq	r3, [r4, #24]
 8008d0a:	4620      	mov	r0, r4
 8008d0c:	f000 f820 	bl	8008d50 <__sfp>
 8008d10:	6060      	str	r0, [r4, #4]
 8008d12:	4620      	mov	r0, r4
 8008d14:	f000 f81c 	bl	8008d50 <__sfp>
 8008d18:	60a0      	str	r0, [r4, #8]
 8008d1a:	4620      	mov	r0, r4
 8008d1c:	f000 f818 	bl	8008d50 <__sfp>
 8008d20:	2200      	movs	r2, #0
 8008d22:	60e0      	str	r0, [r4, #12]
 8008d24:	2104      	movs	r1, #4
 8008d26:	6860      	ldr	r0, [r4, #4]
 8008d28:	f7ff ff82 	bl	8008c30 <std>
 8008d2c:	68a0      	ldr	r0, [r4, #8]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	2109      	movs	r1, #9
 8008d32:	f7ff ff7d 	bl	8008c30 <std>
 8008d36:	68e0      	ldr	r0, [r4, #12]
 8008d38:	2202      	movs	r2, #2
 8008d3a:	2112      	movs	r1, #18
 8008d3c:	f7ff ff78 	bl	8008c30 <std>
 8008d40:	2301      	movs	r3, #1
 8008d42:	61a3      	str	r3, [r4, #24]
 8008d44:	e7d2      	b.n	8008cec <__sinit+0xc>
 8008d46:	bf00      	nop
 8008d48:	0800ae70 	.word	0x0800ae70
 8008d4c:	08008c79 	.word	0x08008c79

08008d50 <__sfp>:
 8008d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d52:	4607      	mov	r7, r0
 8008d54:	f7ff ffac 	bl	8008cb0 <__sfp_lock_acquire>
 8008d58:	4b1e      	ldr	r3, [pc, #120]	; (8008dd4 <__sfp+0x84>)
 8008d5a:	681e      	ldr	r6, [r3, #0]
 8008d5c:	69b3      	ldr	r3, [r6, #24]
 8008d5e:	b913      	cbnz	r3, 8008d66 <__sfp+0x16>
 8008d60:	4630      	mov	r0, r6
 8008d62:	f7ff ffbd 	bl	8008ce0 <__sinit>
 8008d66:	3648      	adds	r6, #72	; 0x48
 8008d68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d6c:	3b01      	subs	r3, #1
 8008d6e:	d503      	bpl.n	8008d78 <__sfp+0x28>
 8008d70:	6833      	ldr	r3, [r6, #0]
 8008d72:	b30b      	cbz	r3, 8008db8 <__sfp+0x68>
 8008d74:	6836      	ldr	r6, [r6, #0]
 8008d76:	e7f7      	b.n	8008d68 <__sfp+0x18>
 8008d78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d7c:	b9d5      	cbnz	r5, 8008db4 <__sfp+0x64>
 8008d7e:	4b16      	ldr	r3, [pc, #88]	; (8008dd8 <__sfp+0x88>)
 8008d80:	60e3      	str	r3, [r4, #12]
 8008d82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d86:	6665      	str	r5, [r4, #100]	; 0x64
 8008d88:	f000 fbba 	bl	8009500 <__retarget_lock_init_recursive>
 8008d8c:	f7ff ff96 	bl	8008cbc <__sfp_lock_release>
 8008d90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008d94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008d98:	6025      	str	r5, [r4, #0]
 8008d9a:	61a5      	str	r5, [r4, #24]
 8008d9c:	2208      	movs	r2, #8
 8008d9e:	4629      	mov	r1, r5
 8008da0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008da4:	f7fd fa1c 	bl	80061e0 <memset>
 8008da8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008dac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008db0:	4620      	mov	r0, r4
 8008db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008db4:	3468      	adds	r4, #104	; 0x68
 8008db6:	e7d9      	b.n	8008d6c <__sfp+0x1c>
 8008db8:	2104      	movs	r1, #4
 8008dba:	4638      	mov	r0, r7
 8008dbc:	f7ff ff62 	bl	8008c84 <__sfmoreglue>
 8008dc0:	4604      	mov	r4, r0
 8008dc2:	6030      	str	r0, [r6, #0]
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	d1d5      	bne.n	8008d74 <__sfp+0x24>
 8008dc8:	f7ff ff78 	bl	8008cbc <__sfp_lock_release>
 8008dcc:	230c      	movs	r3, #12
 8008dce:	603b      	str	r3, [r7, #0]
 8008dd0:	e7ee      	b.n	8008db0 <__sfp+0x60>
 8008dd2:	bf00      	nop
 8008dd4:	0800ae70 	.word	0x0800ae70
 8008dd8:	ffff0001 	.word	0xffff0001

08008ddc <_fwalk_reent>:
 8008ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008de0:	4606      	mov	r6, r0
 8008de2:	4688      	mov	r8, r1
 8008de4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008de8:	2700      	movs	r7, #0
 8008dea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008dee:	f1b9 0901 	subs.w	r9, r9, #1
 8008df2:	d505      	bpl.n	8008e00 <_fwalk_reent+0x24>
 8008df4:	6824      	ldr	r4, [r4, #0]
 8008df6:	2c00      	cmp	r4, #0
 8008df8:	d1f7      	bne.n	8008dea <_fwalk_reent+0xe>
 8008dfa:	4638      	mov	r0, r7
 8008dfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e00:	89ab      	ldrh	r3, [r5, #12]
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d907      	bls.n	8008e16 <_fwalk_reent+0x3a>
 8008e06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	d003      	beq.n	8008e16 <_fwalk_reent+0x3a>
 8008e0e:	4629      	mov	r1, r5
 8008e10:	4630      	mov	r0, r6
 8008e12:	47c0      	blx	r8
 8008e14:	4307      	orrs	r7, r0
 8008e16:	3568      	adds	r5, #104	; 0x68
 8008e18:	e7e9      	b.n	8008dee <_fwalk_reent+0x12>

08008e1a <rshift>:
 8008e1a:	6903      	ldr	r3, [r0, #16]
 8008e1c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e24:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008e28:	f100 0414 	add.w	r4, r0, #20
 8008e2c:	dd45      	ble.n	8008eba <rshift+0xa0>
 8008e2e:	f011 011f 	ands.w	r1, r1, #31
 8008e32:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008e36:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008e3a:	d10c      	bne.n	8008e56 <rshift+0x3c>
 8008e3c:	f100 0710 	add.w	r7, r0, #16
 8008e40:	4629      	mov	r1, r5
 8008e42:	42b1      	cmp	r1, r6
 8008e44:	d334      	bcc.n	8008eb0 <rshift+0x96>
 8008e46:	1a9b      	subs	r3, r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	1eea      	subs	r2, r5, #3
 8008e4c:	4296      	cmp	r6, r2
 8008e4e:	bf38      	it	cc
 8008e50:	2300      	movcc	r3, #0
 8008e52:	4423      	add	r3, r4
 8008e54:	e015      	b.n	8008e82 <rshift+0x68>
 8008e56:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008e5a:	f1c1 0820 	rsb	r8, r1, #32
 8008e5e:	40cf      	lsrs	r7, r1
 8008e60:	f105 0e04 	add.w	lr, r5, #4
 8008e64:	46a1      	mov	r9, r4
 8008e66:	4576      	cmp	r6, lr
 8008e68:	46f4      	mov	ip, lr
 8008e6a:	d815      	bhi.n	8008e98 <rshift+0x7e>
 8008e6c:	1a9b      	subs	r3, r3, r2
 8008e6e:	009a      	lsls	r2, r3, #2
 8008e70:	3a04      	subs	r2, #4
 8008e72:	3501      	adds	r5, #1
 8008e74:	42ae      	cmp	r6, r5
 8008e76:	bf38      	it	cc
 8008e78:	2200      	movcc	r2, #0
 8008e7a:	18a3      	adds	r3, r4, r2
 8008e7c:	50a7      	str	r7, [r4, r2]
 8008e7e:	b107      	cbz	r7, 8008e82 <rshift+0x68>
 8008e80:	3304      	adds	r3, #4
 8008e82:	1b1a      	subs	r2, r3, r4
 8008e84:	42a3      	cmp	r3, r4
 8008e86:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e8a:	bf08      	it	eq
 8008e8c:	2300      	moveq	r3, #0
 8008e8e:	6102      	str	r2, [r0, #16]
 8008e90:	bf08      	it	eq
 8008e92:	6143      	streq	r3, [r0, #20]
 8008e94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e98:	f8dc c000 	ldr.w	ip, [ip]
 8008e9c:	fa0c fc08 	lsl.w	ip, ip, r8
 8008ea0:	ea4c 0707 	orr.w	r7, ip, r7
 8008ea4:	f849 7b04 	str.w	r7, [r9], #4
 8008ea8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008eac:	40cf      	lsrs	r7, r1
 8008eae:	e7da      	b.n	8008e66 <rshift+0x4c>
 8008eb0:	f851 cb04 	ldr.w	ip, [r1], #4
 8008eb4:	f847 cf04 	str.w	ip, [r7, #4]!
 8008eb8:	e7c3      	b.n	8008e42 <rshift+0x28>
 8008eba:	4623      	mov	r3, r4
 8008ebc:	e7e1      	b.n	8008e82 <rshift+0x68>

08008ebe <__hexdig_fun>:
 8008ebe:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008ec2:	2b09      	cmp	r3, #9
 8008ec4:	d802      	bhi.n	8008ecc <__hexdig_fun+0xe>
 8008ec6:	3820      	subs	r0, #32
 8008ec8:	b2c0      	uxtb	r0, r0
 8008eca:	4770      	bx	lr
 8008ecc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008ed0:	2b05      	cmp	r3, #5
 8008ed2:	d801      	bhi.n	8008ed8 <__hexdig_fun+0x1a>
 8008ed4:	3847      	subs	r0, #71	; 0x47
 8008ed6:	e7f7      	b.n	8008ec8 <__hexdig_fun+0xa>
 8008ed8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008edc:	2b05      	cmp	r3, #5
 8008ede:	d801      	bhi.n	8008ee4 <__hexdig_fun+0x26>
 8008ee0:	3827      	subs	r0, #39	; 0x27
 8008ee2:	e7f1      	b.n	8008ec8 <__hexdig_fun+0xa>
 8008ee4:	2000      	movs	r0, #0
 8008ee6:	4770      	bx	lr

08008ee8 <__gethex>:
 8008ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eec:	ed2d 8b02 	vpush	{d8}
 8008ef0:	b089      	sub	sp, #36	; 0x24
 8008ef2:	ee08 0a10 	vmov	s16, r0
 8008ef6:	9304      	str	r3, [sp, #16]
 8008ef8:	4bbc      	ldr	r3, [pc, #752]	; (80091ec <__gethex+0x304>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	9301      	str	r3, [sp, #4]
 8008efe:	4618      	mov	r0, r3
 8008f00:	468b      	mov	fp, r1
 8008f02:	4690      	mov	r8, r2
 8008f04:	f7f7 f99c 	bl	8000240 <strlen>
 8008f08:	9b01      	ldr	r3, [sp, #4]
 8008f0a:	f8db 2000 	ldr.w	r2, [fp]
 8008f0e:	4403      	add	r3, r0
 8008f10:	4682      	mov	sl, r0
 8008f12:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008f16:	9305      	str	r3, [sp, #20]
 8008f18:	1c93      	adds	r3, r2, #2
 8008f1a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008f1e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008f22:	32fe      	adds	r2, #254	; 0xfe
 8008f24:	18d1      	adds	r1, r2, r3
 8008f26:	461f      	mov	r7, r3
 8008f28:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008f2c:	9100      	str	r1, [sp, #0]
 8008f2e:	2830      	cmp	r0, #48	; 0x30
 8008f30:	d0f8      	beq.n	8008f24 <__gethex+0x3c>
 8008f32:	f7ff ffc4 	bl	8008ebe <__hexdig_fun>
 8008f36:	4604      	mov	r4, r0
 8008f38:	2800      	cmp	r0, #0
 8008f3a:	d13a      	bne.n	8008fb2 <__gethex+0xca>
 8008f3c:	9901      	ldr	r1, [sp, #4]
 8008f3e:	4652      	mov	r2, sl
 8008f40:	4638      	mov	r0, r7
 8008f42:	f001 fc3c 	bl	800a7be <strncmp>
 8008f46:	4605      	mov	r5, r0
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	d168      	bne.n	800901e <__gethex+0x136>
 8008f4c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8008f50:	eb07 060a 	add.w	r6, r7, sl
 8008f54:	f7ff ffb3 	bl	8008ebe <__hexdig_fun>
 8008f58:	2800      	cmp	r0, #0
 8008f5a:	d062      	beq.n	8009022 <__gethex+0x13a>
 8008f5c:	4633      	mov	r3, r6
 8008f5e:	7818      	ldrb	r0, [r3, #0]
 8008f60:	2830      	cmp	r0, #48	; 0x30
 8008f62:	461f      	mov	r7, r3
 8008f64:	f103 0301 	add.w	r3, r3, #1
 8008f68:	d0f9      	beq.n	8008f5e <__gethex+0x76>
 8008f6a:	f7ff ffa8 	bl	8008ebe <__hexdig_fun>
 8008f6e:	2301      	movs	r3, #1
 8008f70:	fab0 f480 	clz	r4, r0
 8008f74:	0964      	lsrs	r4, r4, #5
 8008f76:	4635      	mov	r5, r6
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	463a      	mov	r2, r7
 8008f7c:	4616      	mov	r6, r2
 8008f7e:	3201      	adds	r2, #1
 8008f80:	7830      	ldrb	r0, [r6, #0]
 8008f82:	f7ff ff9c 	bl	8008ebe <__hexdig_fun>
 8008f86:	2800      	cmp	r0, #0
 8008f88:	d1f8      	bne.n	8008f7c <__gethex+0x94>
 8008f8a:	9901      	ldr	r1, [sp, #4]
 8008f8c:	4652      	mov	r2, sl
 8008f8e:	4630      	mov	r0, r6
 8008f90:	f001 fc15 	bl	800a7be <strncmp>
 8008f94:	b980      	cbnz	r0, 8008fb8 <__gethex+0xd0>
 8008f96:	b94d      	cbnz	r5, 8008fac <__gethex+0xc4>
 8008f98:	eb06 050a 	add.w	r5, r6, sl
 8008f9c:	462a      	mov	r2, r5
 8008f9e:	4616      	mov	r6, r2
 8008fa0:	3201      	adds	r2, #1
 8008fa2:	7830      	ldrb	r0, [r6, #0]
 8008fa4:	f7ff ff8b 	bl	8008ebe <__hexdig_fun>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d1f8      	bne.n	8008f9e <__gethex+0xb6>
 8008fac:	1bad      	subs	r5, r5, r6
 8008fae:	00ad      	lsls	r5, r5, #2
 8008fb0:	e004      	b.n	8008fbc <__gethex+0xd4>
 8008fb2:	2400      	movs	r4, #0
 8008fb4:	4625      	mov	r5, r4
 8008fb6:	e7e0      	b.n	8008f7a <__gethex+0x92>
 8008fb8:	2d00      	cmp	r5, #0
 8008fba:	d1f7      	bne.n	8008fac <__gethex+0xc4>
 8008fbc:	7833      	ldrb	r3, [r6, #0]
 8008fbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008fc2:	2b50      	cmp	r3, #80	; 0x50
 8008fc4:	d13b      	bne.n	800903e <__gethex+0x156>
 8008fc6:	7873      	ldrb	r3, [r6, #1]
 8008fc8:	2b2b      	cmp	r3, #43	; 0x2b
 8008fca:	d02c      	beq.n	8009026 <__gethex+0x13e>
 8008fcc:	2b2d      	cmp	r3, #45	; 0x2d
 8008fce:	d02e      	beq.n	800902e <__gethex+0x146>
 8008fd0:	1c71      	adds	r1, r6, #1
 8008fd2:	f04f 0900 	mov.w	r9, #0
 8008fd6:	7808      	ldrb	r0, [r1, #0]
 8008fd8:	f7ff ff71 	bl	8008ebe <__hexdig_fun>
 8008fdc:	1e43      	subs	r3, r0, #1
 8008fde:	b2db      	uxtb	r3, r3
 8008fe0:	2b18      	cmp	r3, #24
 8008fe2:	d82c      	bhi.n	800903e <__gethex+0x156>
 8008fe4:	f1a0 0210 	sub.w	r2, r0, #16
 8008fe8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008fec:	f7ff ff67 	bl	8008ebe <__hexdig_fun>
 8008ff0:	1e43      	subs	r3, r0, #1
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	2b18      	cmp	r3, #24
 8008ff6:	d91d      	bls.n	8009034 <__gethex+0x14c>
 8008ff8:	f1b9 0f00 	cmp.w	r9, #0
 8008ffc:	d000      	beq.n	8009000 <__gethex+0x118>
 8008ffe:	4252      	negs	r2, r2
 8009000:	4415      	add	r5, r2
 8009002:	f8cb 1000 	str.w	r1, [fp]
 8009006:	b1e4      	cbz	r4, 8009042 <__gethex+0x15a>
 8009008:	9b00      	ldr	r3, [sp, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	bf14      	ite	ne
 800900e:	2700      	movne	r7, #0
 8009010:	2706      	moveq	r7, #6
 8009012:	4638      	mov	r0, r7
 8009014:	b009      	add	sp, #36	; 0x24
 8009016:	ecbd 8b02 	vpop	{d8}
 800901a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800901e:	463e      	mov	r6, r7
 8009020:	4625      	mov	r5, r4
 8009022:	2401      	movs	r4, #1
 8009024:	e7ca      	b.n	8008fbc <__gethex+0xd4>
 8009026:	f04f 0900 	mov.w	r9, #0
 800902a:	1cb1      	adds	r1, r6, #2
 800902c:	e7d3      	b.n	8008fd6 <__gethex+0xee>
 800902e:	f04f 0901 	mov.w	r9, #1
 8009032:	e7fa      	b.n	800902a <__gethex+0x142>
 8009034:	230a      	movs	r3, #10
 8009036:	fb03 0202 	mla	r2, r3, r2, r0
 800903a:	3a10      	subs	r2, #16
 800903c:	e7d4      	b.n	8008fe8 <__gethex+0x100>
 800903e:	4631      	mov	r1, r6
 8009040:	e7df      	b.n	8009002 <__gethex+0x11a>
 8009042:	1bf3      	subs	r3, r6, r7
 8009044:	3b01      	subs	r3, #1
 8009046:	4621      	mov	r1, r4
 8009048:	2b07      	cmp	r3, #7
 800904a:	dc0b      	bgt.n	8009064 <__gethex+0x17c>
 800904c:	ee18 0a10 	vmov	r0, s16
 8009050:	f000 fae6 	bl	8009620 <_Balloc>
 8009054:	4604      	mov	r4, r0
 8009056:	b940      	cbnz	r0, 800906a <__gethex+0x182>
 8009058:	4b65      	ldr	r3, [pc, #404]	; (80091f0 <__gethex+0x308>)
 800905a:	4602      	mov	r2, r0
 800905c:	21de      	movs	r1, #222	; 0xde
 800905e:	4865      	ldr	r0, [pc, #404]	; (80091f4 <__gethex+0x30c>)
 8009060:	f001 fbde 	bl	800a820 <__assert_func>
 8009064:	3101      	adds	r1, #1
 8009066:	105b      	asrs	r3, r3, #1
 8009068:	e7ee      	b.n	8009048 <__gethex+0x160>
 800906a:	f100 0914 	add.w	r9, r0, #20
 800906e:	f04f 0b00 	mov.w	fp, #0
 8009072:	f1ca 0301 	rsb	r3, sl, #1
 8009076:	f8cd 9008 	str.w	r9, [sp, #8]
 800907a:	f8cd b000 	str.w	fp, [sp]
 800907e:	9306      	str	r3, [sp, #24]
 8009080:	42b7      	cmp	r7, r6
 8009082:	d340      	bcc.n	8009106 <__gethex+0x21e>
 8009084:	9802      	ldr	r0, [sp, #8]
 8009086:	9b00      	ldr	r3, [sp, #0]
 8009088:	f840 3b04 	str.w	r3, [r0], #4
 800908c:	eba0 0009 	sub.w	r0, r0, r9
 8009090:	1080      	asrs	r0, r0, #2
 8009092:	0146      	lsls	r6, r0, #5
 8009094:	6120      	str	r0, [r4, #16]
 8009096:	4618      	mov	r0, r3
 8009098:	f000 fbb8 	bl	800980c <__hi0bits>
 800909c:	1a30      	subs	r0, r6, r0
 800909e:	f8d8 6000 	ldr.w	r6, [r8]
 80090a2:	42b0      	cmp	r0, r6
 80090a4:	dd63      	ble.n	800916e <__gethex+0x286>
 80090a6:	1b87      	subs	r7, r0, r6
 80090a8:	4639      	mov	r1, r7
 80090aa:	4620      	mov	r0, r4
 80090ac:	f000 ff53 	bl	8009f56 <__any_on>
 80090b0:	4682      	mov	sl, r0
 80090b2:	b1a8      	cbz	r0, 80090e0 <__gethex+0x1f8>
 80090b4:	1e7b      	subs	r3, r7, #1
 80090b6:	1159      	asrs	r1, r3, #5
 80090b8:	f003 021f 	and.w	r2, r3, #31
 80090bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80090c0:	f04f 0a01 	mov.w	sl, #1
 80090c4:	fa0a f202 	lsl.w	r2, sl, r2
 80090c8:	420a      	tst	r2, r1
 80090ca:	d009      	beq.n	80090e0 <__gethex+0x1f8>
 80090cc:	4553      	cmp	r3, sl
 80090ce:	dd05      	ble.n	80090dc <__gethex+0x1f4>
 80090d0:	1eb9      	subs	r1, r7, #2
 80090d2:	4620      	mov	r0, r4
 80090d4:	f000 ff3f 	bl	8009f56 <__any_on>
 80090d8:	2800      	cmp	r0, #0
 80090da:	d145      	bne.n	8009168 <__gethex+0x280>
 80090dc:	f04f 0a02 	mov.w	sl, #2
 80090e0:	4639      	mov	r1, r7
 80090e2:	4620      	mov	r0, r4
 80090e4:	f7ff fe99 	bl	8008e1a <rshift>
 80090e8:	443d      	add	r5, r7
 80090ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090ee:	42ab      	cmp	r3, r5
 80090f0:	da4c      	bge.n	800918c <__gethex+0x2a4>
 80090f2:	ee18 0a10 	vmov	r0, s16
 80090f6:	4621      	mov	r1, r4
 80090f8:	f000 fad2 	bl	80096a0 <_Bfree>
 80090fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80090fe:	2300      	movs	r3, #0
 8009100:	6013      	str	r3, [r2, #0]
 8009102:	27a3      	movs	r7, #163	; 0xa3
 8009104:	e785      	b.n	8009012 <__gethex+0x12a>
 8009106:	1e73      	subs	r3, r6, #1
 8009108:	9a05      	ldr	r2, [sp, #20]
 800910a:	9303      	str	r3, [sp, #12]
 800910c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009110:	4293      	cmp	r3, r2
 8009112:	d019      	beq.n	8009148 <__gethex+0x260>
 8009114:	f1bb 0f20 	cmp.w	fp, #32
 8009118:	d107      	bne.n	800912a <__gethex+0x242>
 800911a:	9b02      	ldr	r3, [sp, #8]
 800911c:	9a00      	ldr	r2, [sp, #0]
 800911e:	f843 2b04 	str.w	r2, [r3], #4
 8009122:	9302      	str	r3, [sp, #8]
 8009124:	2300      	movs	r3, #0
 8009126:	9300      	str	r3, [sp, #0]
 8009128:	469b      	mov	fp, r3
 800912a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800912e:	f7ff fec6 	bl	8008ebe <__hexdig_fun>
 8009132:	9b00      	ldr	r3, [sp, #0]
 8009134:	f000 000f 	and.w	r0, r0, #15
 8009138:	fa00 f00b 	lsl.w	r0, r0, fp
 800913c:	4303      	orrs	r3, r0
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	f10b 0b04 	add.w	fp, fp, #4
 8009144:	9b03      	ldr	r3, [sp, #12]
 8009146:	e00d      	b.n	8009164 <__gethex+0x27c>
 8009148:	9b03      	ldr	r3, [sp, #12]
 800914a:	9a06      	ldr	r2, [sp, #24]
 800914c:	4413      	add	r3, r2
 800914e:	42bb      	cmp	r3, r7
 8009150:	d3e0      	bcc.n	8009114 <__gethex+0x22c>
 8009152:	4618      	mov	r0, r3
 8009154:	9901      	ldr	r1, [sp, #4]
 8009156:	9307      	str	r3, [sp, #28]
 8009158:	4652      	mov	r2, sl
 800915a:	f001 fb30 	bl	800a7be <strncmp>
 800915e:	9b07      	ldr	r3, [sp, #28]
 8009160:	2800      	cmp	r0, #0
 8009162:	d1d7      	bne.n	8009114 <__gethex+0x22c>
 8009164:	461e      	mov	r6, r3
 8009166:	e78b      	b.n	8009080 <__gethex+0x198>
 8009168:	f04f 0a03 	mov.w	sl, #3
 800916c:	e7b8      	b.n	80090e0 <__gethex+0x1f8>
 800916e:	da0a      	bge.n	8009186 <__gethex+0x29e>
 8009170:	1a37      	subs	r7, r6, r0
 8009172:	4621      	mov	r1, r4
 8009174:	ee18 0a10 	vmov	r0, s16
 8009178:	463a      	mov	r2, r7
 800917a:	f000 fcad 	bl	8009ad8 <__lshift>
 800917e:	1bed      	subs	r5, r5, r7
 8009180:	4604      	mov	r4, r0
 8009182:	f100 0914 	add.w	r9, r0, #20
 8009186:	f04f 0a00 	mov.w	sl, #0
 800918a:	e7ae      	b.n	80090ea <__gethex+0x202>
 800918c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009190:	42a8      	cmp	r0, r5
 8009192:	dd72      	ble.n	800927a <__gethex+0x392>
 8009194:	1b45      	subs	r5, r0, r5
 8009196:	42ae      	cmp	r6, r5
 8009198:	dc36      	bgt.n	8009208 <__gethex+0x320>
 800919a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d02a      	beq.n	80091f8 <__gethex+0x310>
 80091a2:	2b03      	cmp	r3, #3
 80091a4:	d02c      	beq.n	8009200 <__gethex+0x318>
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d115      	bne.n	80091d6 <__gethex+0x2ee>
 80091aa:	42ae      	cmp	r6, r5
 80091ac:	d113      	bne.n	80091d6 <__gethex+0x2ee>
 80091ae:	2e01      	cmp	r6, #1
 80091b0:	d10b      	bne.n	80091ca <__gethex+0x2e2>
 80091b2:	9a04      	ldr	r2, [sp, #16]
 80091b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80091b8:	6013      	str	r3, [r2, #0]
 80091ba:	2301      	movs	r3, #1
 80091bc:	6123      	str	r3, [r4, #16]
 80091be:	f8c9 3000 	str.w	r3, [r9]
 80091c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80091c4:	2762      	movs	r7, #98	; 0x62
 80091c6:	601c      	str	r4, [r3, #0]
 80091c8:	e723      	b.n	8009012 <__gethex+0x12a>
 80091ca:	1e71      	subs	r1, r6, #1
 80091cc:	4620      	mov	r0, r4
 80091ce:	f000 fec2 	bl	8009f56 <__any_on>
 80091d2:	2800      	cmp	r0, #0
 80091d4:	d1ed      	bne.n	80091b2 <__gethex+0x2ca>
 80091d6:	ee18 0a10 	vmov	r0, s16
 80091da:	4621      	mov	r1, r4
 80091dc:	f000 fa60 	bl	80096a0 <_Bfree>
 80091e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80091e2:	2300      	movs	r3, #0
 80091e4:	6013      	str	r3, [r2, #0]
 80091e6:	2750      	movs	r7, #80	; 0x50
 80091e8:	e713      	b.n	8009012 <__gethex+0x12a>
 80091ea:	bf00      	nop
 80091ec:	0800b164 	.word	0x0800b164
 80091f0:	0800b084 	.word	0x0800b084
 80091f4:	0800b0f8 	.word	0x0800b0f8
 80091f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1eb      	bne.n	80091d6 <__gethex+0x2ee>
 80091fe:	e7d8      	b.n	80091b2 <__gethex+0x2ca>
 8009200:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1d5      	bne.n	80091b2 <__gethex+0x2ca>
 8009206:	e7e6      	b.n	80091d6 <__gethex+0x2ee>
 8009208:	1e6f      	subs	r7, r5, #1
 800920a:	f1ba 0f00 	cmp.w	sl, #0
 800920e:	d131      	bne.n	8009274 <__gethex+0x38c>
 8009210:	b127      	cbz	r7, 800921c <__gethex+0x334>
 8009212:	4639      	mov	r1, r7
 8009214:	4620      	mov	r0, r4
 8009216:	f000 fe9e 	bl	8009f56 <__any_on>
 800921a:	4682      	mov	sl, r0
 800921c:	117b      	asrs	r3, r7, #5
 800921e:	2101      	movs	r1, #1
 8009220:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009224:	f007 071f 	and.w	r7, r7, #31
 8009228:	fa01 f707 	lsl.w	r7, r1, r7
 800922c:	421f      	tst	r7, r3
 800922e:	4629      	mov	r1, r5
 8009230:	4620      	mov	r0, r4
 8009232:	bf18      	it	ne
 8009234:	f04a 0a02 	orrne.w	sl, sl, #2
 8009238:	1b76      	subs	r6, r6, r5
 800923a:	f7ff fdee 	bl	8008e1a <rshift>
 800923e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009242:	2702      	movs	r7, #2
 8009244:	f1ba 0f00 	cmp.w	sl, #0
 8009248:	d048      	beq.n	80092dc <__gethex+0x3f4>
 800924a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800924e:	2b02      	cmp	r3, #2
 8009250:	d015      	beq.n	800927e <__gethex+0x396>
 8009252:	2b03      	cmp	r3, #3
 8009254:	d017      	beq.n	8009286 <__gethex+0x39e>
 8009256:	2b01      	cmp	r3, #1
 8009258:	d109      	bne.n	800926e <__gethex+0x386>
 800925a:	f01a 0f02 	tst.w	sl, #2
 800925e:	d006      	beq.n	800926e <__gethex+0x386>
 8009260:	f8d9 0000 	ldr.w	r0, [r9]
 8009264:	ea4a 0a00 	orr.w	sl, sl, r0
 8009268:	f01a 0f01 	tst.w	sl, #1
 800926c:	d10e      	bne.n	800928c <__gethex+0x3a4>
 800926e:	f047 0710 	orr.w	r7, r7, #16
 8009272:	e033      	b.n	80092dc <__gethex+0x3f4>
 8009274:	f04f 0a01 	mov.w	sl, #1
 8009278:	e7d0      	b.n	800921c <__gethex+0x334>
 800927a:	2701      	movs	r7, #1
 800927c:	e7e2      	b.n	8009244 <__gethex+0x35c>
 800927e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009280:	f1c3 0301 	rsb	r3, r3, #1
 8009284:	9315      	str	r3, [sp, #84]	; 0x54
 8009286:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009288:	2b00      	cmp	r3, #0
 800928a:	d0f0      	beq.n	800926e <__gethex+0x386>
 800928c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009290:	f104 0314 	add.w	r3, r4, #20
 8009294:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009298:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800929c:	f04f 0c00 	mov.w	ip, #0
 80092a0:	4618      	mov	r0, r3
 80092a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80092a6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80092aa:	d01c      	beq.n	80092e6 <__gethex+0x3fe>
 80092ac:	3201      	adds	r2, #1
 80092ae:	6002      	str	r2, [r0, #0]
 80092b0:	2f02      	cmp	r7, #2
 80092b2:	f104 0314 	add.w	r3, r4, #20
 80092b6:	d13f      	bne.n	8009338 <__gethex+0x450>
 80092b8:	f8d8 2000 	ldr.w	r2, [r8]
 80092bc:	3a01      	subs	r2, #1
 80092be:	42b2      	cmp	r2, r6
 80092c0:	d10a      	bne.n	80092d8 <__gethex+0x3f0>
 80092c2:	1171      	asrs	r1, r6, #5
 80092c4:	2201      	movs	r2, #1
 80092c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80092ca:	f006 061f 	and.w	r6, r6, #31
 80092ce:	fa02 f606 	lsl.w	r6, r2, r6
 80092d2:	421e      	tst	r6, r3
 80092d4:	bf18      	it	ne
 80092d6:	4617      	movne	r7, r2
 80092d8:	f047 0720 	orr.w	r7, r7, #32
 80092dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092de:	601c      	str	r4, [r3, #0]
 80092e0:	9b04      	ldr	r3, [sp, #16]
 80092e2:	601d      	str	r5, [r3, #0]
 80092e4:	e695      	b.n	8009012 <__gethex+0x12a>
 80092e6:	4299      	cmp	r1, r3
 80092e8:	f843 cc04 	str.w	ip, [r3, #-4]
 80092ec:	d8d8      	bhi.n	80092a0 <__gethex+0x3b8>
 80092ee:	68a3      	ldr	r3, [r4, #8]
 80092f0:	459b      	cmp	fp, r3
 80092f2:	db19      	blt.n	8009328 <__gethex+0x440>
 80092f4:	6861      	ldr	r1, [r4, #4]
 80092f6:	ee18 0a10 	vmov	r0, s16
 80092fa:	3101      	adds	r1, #1
 80092fc:	f000 f990 	bl	8009620 <_Balloc>
 8009300:	4681      	mov	r9, r0
 8009302:	b918      	cbnz	r0, 800930c <__gethex+0x424>
 8009304:	4b1a      	ldr	r3, [pc, #104]	; (8009370 <__gethex+0x488>)
 8009306:	4602      	mov	r2, r0
 8009308:	2184      	movs	r1, #132	; 0x84
 800930a:	e6a8      	b.n	800905e <__gethex+0x176>
 800930c:	6922      	ldr	r2, [r4, #16]
 800930e:	3202      	adds	r2, #2
 8009310:	f104 010c 	add.w	r1, r4, #12
 8009314:	0092      	lsls	r2, r2, #2
 8009316:	300c      	adds	r0, #12
 8009318:	f000 f974 	bl	8009604 <memcpy>
 800931c:	4621      	mov	r1, r4
 800931e:	ee18 0a10 	vmov	r0, s16
 8009322:	f000 f9bd 	bl	80096a0 <_Bfree>
 8009326:	464c      	mov	r4, r9
 8009328:	6923      	ldr	r3, [r4, #16]
 800932a:	1c5a      	adds	r2, r3, #1
 800932c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009330:	6122      	str	r2, [r4, #16]
 8009332:	2201      	movs	r2, #1
 8009334:	615a      	str	r2, [r3, #20]
 8009336:	e7bb      	b.n	80092b0 <__gethex+0x3c8>
 8009338:	6922      	ldr	r2, [r4, #16]
 800933a:	455a      	cmp	r2, fp
 800933c:	dd0b      	ble.n	8009356 <__gethex+0x46e>
 800933e:	2101      	movs	r1, #1
 8009340:	4620      	mov	r0, r4
 8009342:	f7ff fd6a 	bl	8008e1a <rshift>
 8009346:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800934a:	3501      	adds	r5, #1
 800934c:	42ab      	cmp	r3, r5
 800934e:	f6ff aed0 	blt.w	80090f2 <__gethex+0x20a>
 8009352:	2701      	movs	r7, #1
 8009354:	e7c0      	b.n	80092d8 <__gethex+0x3f0>
 8009356:	f016 061f 	ands.w	r6, r6, #31
 800935a:	d0fa      	beq.n	8009352 <__gethex+0x46a>
 800935c:	449a      	add	sl, r3
 800935e:	f1c6 0620 	rsb	r6, r6, #32
 8009362:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009366:	f000 fa51 	bl	800980c <__hi0bits>
 800936a:	42b0      	cmp	r0, r6
 800936c:	dbe7      	blt.n	800933e <__gethex+0x456>
 800936e:	e7f0      	b.n	8009352 <__gethex+0x46a>
 8009370:	0800b084 	.word	0x0800b084

08009374 <L_shift>:
 8009374:	f1c2 0208 	rsb	r2, r2, #8
 8009378:	0092      	lsls	r2, r2, #2
 800937a:	b570      	push	{r4, r5, r6, lr}
 800937c:	f1c2 0620 	rsb	r6, r2, #32
 8009380:	6843      	ldr	r3, [r0, #4]
 8009382:	6804      	ldr	r4, [r0, #0]
 8009384:	fa03 f506 	lsl.w	r5, r3, r6
 8009388:	432c      	orrs	r4, r5
 800938a:	40d3      	lsrs	r3, r2
 800938c:	6004      	str	r4, [r0, #0]
 800938e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009392:	4288      	cmp	r0, r1
 8009394:	d3f4      	bcc.n	8009380 <L_shift+0xc>
 8009396:	bd70      	pop	{r4, r5, r6, pc}

08009398 <__match>:
 8009398:	b530      	push	{r4, r5, lr}
 800939a:	6803      	ldr	r3, [r0, #0]
 800939c:	3301      	adds	r3, #1
 800939e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093a2:	b914      	cbnz	r4, 80093aa <__match+0x12>
 80093a4:	6003      	str	r3, [r0, #0]
 80093a6:	2001      	movs	r0, #1
 80093a8:	bd30      	pop	{r4, r5, pc}
 80093aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80093b2:	2d19      	cmp	r5, #25
 80093b4:	bf98      	it	ls
 80093b6:	3220      	addls	r2, #32
 80093b8:	42a2      	cmp	r2, r4
 80093ba:	d0f0      	beq.n	800939e <__match+0x6>
 80093bc:	2000      	movs	r0, #0
 80093be:	e7f3      	b.n	80093a8 <__match+0x10>

080093c0 <__hexnan>:
 80093c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093c4:	680b      	ldr	r3, [r1, #0]
 80093c6:	6801      	ldr	r1, [r0, #0]
 80093c8:	115e      	asrs	r6, r3, #5
 80093ca:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80093ce:	f013 031f 	ands.w	r3, r3, #31
 80093d2:	b087      	sub	sp, #28
 80093d4:	bf18      	it	ne
 80093d6:	3604      	addne	r6, #4
 80093d8:	2500      	movs	r5, #0
 80093da:	1f37      	subs	r7, r6, #4
 80093dc:	4682      	mov	sl, r0
 80093de:	4690      	mov	r8, r2
 80093e0:	9301      	str	r3, [sp, #4]
 80093e2:	f846 5c04 	str.w	r5, [r6, #-4]
 80093e6:	46b9      	mov	r9, r7
 80093e8:	463c      	mov	r4, r7
 80093ea:	9502      	str	r5, [sp, #8]
 80093ec:	46ab      	mov	fp, r5
 80093ee:	784a      	ldrb	r2, [r1, #1]
 80093f0:	1c4b      	adds	r3, r1, #1
 80093f2:	9303      	str	r3, [sp, #12]
 80093f4:	b342      	cbz	r2, 8009448 <__hexnan+0x88>
 80093f6:	4610      	mov	r0, r2
 80093f8:	9105      	str	r1, [sp, #20]
 80093fa:	9204      	str	r2, [sp, #16]
 80093fc:	f7ff fd5f 	bl	8008ebe <__hexdig_fun>
 8009400:	2800      	cmp	r0, #0
 8009402:	d14f      	bne.n	80094a4 <__hexnan+0xe4>
 8009404:	9a04      	ldr	r2, [sp, #16]
 8009406:	9905      	ldr	r1, [sp, #20]
 8009408:	2a20      	cmp	r2, #32
 800940a:	d818      	bhi.n	800943e <__hexnan+0x7e>
 800940c:	9b02      	ldr	r3, [sp, #8]
 800940e:	459b      	cmp	fp, r3
 8009410:	dd13      	ble.n	800943a <__hexnan+0x7a>
 8009412:	454c      	cmp	r4, r9
 8009414:	d206      	bcs.n	8009424 <__hexnan+0x64>
 8009416:	2d07      	cmp	r5, #7
 8009418:	dc04      	bgt.n	8009424 <__hexnan+0x64>
 800941a:	462a      	mov	r2, r5
 800941c:	4649      	mov	r1, r9
 800941e:	4620      	mov	r0, r4
 8009420:	f7ff ffa8 	bl	8009374 <L_shift>
 8009424:	4544      	cmp	r4, r8
 8009426:	d950      	bls.n	80094ca <__hexnan+0x10a>
 8009428:	2300      	movs	r3, #0
 800942a:	f1a4 0904 	sub.w	r9, r4, #4
 800942e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009432:	f8cd b008 	str.w	fp, [sp, #8]
 8009436:	464c      	mov	r4, r9
 8009438:	461d      	mov	r5, r3
 800943a:	9903      	ldr	r1, [sp, #12]
 800943c:	e7d7      	b.n	80093ee <__hexnan+0x2e>
 800943e:	2a29      	cmp	r2, #41	; 0x29
 8009440:	d156      	bne.n	80094f0 <__hexnan+0x130>
 8009442:	3102      	adds	r1, #2
 8009444:	f8ca 1000 	str.w	r1, [sl]
 8009448:	f1bb 0f00 	cmp.w	fp, #0
 800944c:	d050      	beq.n	80094f0 <__hexnan+0x130>
 800944e:	454c      	cmp	r4, r9
 8009450:	d206      	bcs.n	8009460 <__hexnan+0xa0>
 8009452:	2d07      	cmp	r5, #7
 8009454:	dc04      	bgt.n	8009460 <__hexnan+0xa0>
 8009456:	462a      	mov	r2, r5
 8009458:	4649      	mov	r1, r9
 800945a:	4620      	mov	r0, r4
 800945c:	f7ff ff8a 	bl	8009374 <L_shift>
 8009460:	4544      	cmp	r4, r8
 8009462:	d934      	bls.n	80094ce <__hexnan+0x10e>
 8009464:	f1a8 0204 	sub.w	r2, r8, #4
 8009468:	4623      	mov	r3, r4
 800946a:	f853 1b04 	ldr.w	r1, [r3], #4
 800946e:	f842 1f04 	str.w	r1, [r2, #4]!
 8009472:	429f      	cmp	r7, r3
 8009474:	d2f9      	bcs.n	800946a <__hexnan+0xaa>
 8009476:	1b3b      	subs	r3, r7, r4
 8009478:	f023 0303 	bic.w	r3, r3, #3
 800947c:	3304      	adds	r3, #4
 800947e:	3401      	adds	r4, #1
 8009480:	3e03      	subs	r6, #3
 8009482:	42b4      	cmp	r4, r6
 8009484:	bf88      	it	hi
 8009486:	2304      	movhi	r3, #4
 8009488:	4443      	add	r3, r8
 800948a:	2200      	movs	r2, #0
 800948c:	f843 2b04 	str.w	r2, [r3], #4
 8009490:	429f      	cmp	r7, r3
 8009492:	d2fb      	bcs.n	800948c <__hexnan+0xcc>
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	b91b      	cbnz	r3, 80094a0 <__hexnan+0xe0>
 8009498:	4547      	cmp	r7, r8
 800949a:	d127      	bne.n	80094ec <__hexnan+0x12c>
 800949c:	2301      	movs	r3, #1
 800949e:	603b      	str	r3, [r7, #0]
 80094a0:	2005      	movs	r0, #5
 80094a2:	e026      	b.n	80094f2 <__hexnan+0x132>
 80094a4:	3501      	adds	r5, #1
 80094a6:	2d08      	cmp	r5, #8
 80094a8:	f10b 0b01 	add.w	fp, fp, #1
 80094ac:	dd06      	ble.n	80094bc <__hexnan+0xfc>
 80094ae:	4544      	cmp	r4, r8
 80094b0:	d9c3      	bls.n	800943a <__hexnan+0x7a>
 80094b2:	2300      	movs	r3, #0
 80094b4:	f844 3c04 	str.w	r3, [r4, #-4]
 80094b8:	2501      	movs	r5, #1
 80094ba:	3c04      	subs	r4, #4
 80094bc:	6822      	ldr	r2, [r4, #0]
 80094be:	f000 000f 	and.w	r0, r0, #15
 80094c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80094c6:	6022      	str	r2, [r4, #0]
 80094c8:	e7b7      	b.n	800943a <__hexnan+0x7a>
 80094ca:	2508      	movs	r5, #8
 80094cc:	e7b5      	b.n	800943a <__hexnan+0x7a>
 80094ce:	9b01      	ldr	r3, [sp, #4]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d0df      	beq.n	8009494 <__hexnan+0xd4>
 80094d4:	f04f 32ff 	mov.w	r2, #4294967295
 80094d8:	f1c3 0320 	rsb	r3, r3, #32
 80094dc:	fa22 f303 	lsr.w	r3, r2, r3
 80094e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80094e4:	401a      	ands	r2, r3
 80094e6:	f846 2c04 	str.w	r2, [r6, #-4]
 80094ea:	e7d3      	b.n	8009494 <__hexnan+0xd4>
 80094ec:	3f04      	subs	r7, #4
 80094ee:	e7d1      	b.n	8009494 <__hexnan+0xd4>
 80094f0:	2004      	movs	r0, #4
 80094f2:	b007      	add	sp, #28
 80094f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080094f8 <_localeconv_r>:
 80094f8:	4800      	ldr	r0, [pc, #0]	; (80094fc <_localeconv_r+0x4>)
 80094fa:	4770      	bx	lr
 80094fc:	20000168 	.word	0x20000168

08009500 <__retarget_lock_init_recursive>:
 8009500:	4770      	bx	lr

08009502 <__retarget_lock_acquire_recursive>:
 8009502:	4770      	bx	lr

08009504 <__retarget_lock_release_recursive>:
 8009504:	4770      	bx	lr

08009506 <__swhatbuf_r>:
 8009506:	b570      	push	{r4, r5, r6, lr}
 8009508:	460e      	mov	r6, r1
 800950a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800950e:	2900      	cmp	r1, #0
 8009510:	b096      	sub	sp, #88	; 0x58
 8009512:	4614      	mov	r4, r2
 8009514:	461d      	mov	r5, r3
 8009516:	da07      	bge.n	8009528 <__swhatbuf_r+0x22>
 8009518:	2300      	movs	r3, #0
 800951a:	602b      	str	r3, [r5, #0]
 800951c:	89b3      	ldrh	r3, [r6, #12]
 800951e:	061a      	lsls	r2, r3, #24
 8009520:	d410      	bmi.n	8009544 <__swhatbuf_r+0x3e>
 8009522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009526:	e00e      	b.n	8009546 <__swhatbuf_r+0x40>
 8009528:	466a      	mov	r2, sp
 800952a:	f001 f9b9 	bl	800a8a0 <_fstat_r>
 800952e:	2800      	cmp	r0, #0
 8009530:	dbf2      	blt.n	8009518 <__swhatbuf_r+0x12>
 8009532:	9a01      	ldr	r2, [sp, #4]
 8009534:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009538:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800953c:	425a      	negs	r2, r3
 800953e:	415a      	adcs	r2, r3
 8009540:	602a      	str	r2, [r5, #0]
 8009542:	e7ee      	b.n	8009522 <__swhatbuf_r+0x1c>
 8009544:	2340      	movs	r3, #64	; 0x40
 8009546:	2000      	movs	r0, #0
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	b016      	add	sp, #88	; 0x58
 800954c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009550 <__smakebuf_r>:
 8009550:	898b      	ldrh	r3, [r1, #12]
 8009552:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009554:	079d      	lsls	r5, r3, #30
 8009556:	4606      	mov	r6, r0
 8009558:	460c      	mov	r4, r1
 800955a:	d507      	bpl.n	800956c <__smakebuf_r+0x1c>
 800955c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009560:	6023      	str	r3, [r4, #0]
 8009562:	6123      	str	r3, [r4, #16]
 8009564:	2301      	movs	r3, #1
 8009566:	6163      	str	r3, [r4, #20]
 8009568:	b002      	add	sp, #8
 800956a:	bd70      	pop	{r4, r5, r6, pc}
 800956c:	ab01      	add	r3, sp, #4
 800956e:	466a      	mov	r2, sp
 8009570:	f7ff ffc9 	bl	8009506 <__swhatbuf_r>
 8009574:	9900      	ldr	r1, [sp, #0]
 8009576:	4605      	mov	r5, r0
 8009578:	4630      	mov	r0, r6
 800957a:	f000 fd6d 	bl	800a058 <_malloc_r>
 800957e:	b948      	cbnz	r0, 8009594 <__smakebuf_r+0x44>
 8009580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009584:	059a      	lsls	r2, r3, #22
 8009586:	d4ef      	bmi.n	8009568 <__smakebuf_r+0x18>
 8009588:	f023 0303 	bic.w	r3, r3, #3
 800958c:	f043 0302 	orr.w	r3, r3, #2
 8009590:	81a3      	strh	r3, [r4, #12]
 8009592:	e7e3      	b.n	800955c <__smakebuf_r+0xc>
 8009594:	4b0d      	ldr	r3, [pc, #52]	; (80095cc <__smakebuf_r+0x7c>)
 8009596:	62b3      	str	r3, [r6, #40]	; 0x28
 8009598:	89a3      	ldrh	r3, [r4, #12]
 800959a:	6020      	str	r0, [r4, #0]
 800959c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095a0:	81a3      	strh	r3, [r4, #12]
 80095a2:	9b00      	ldr	r3, [sp, #0]
 80095a4:	6163      	str	r3, [r4, #20]
 80095a6:	9b01      	ldr	r3, [sp, #4]
 80095a8:	6120      	str	r0, [r4, #16]
 80095aa:	b15b      	cbz	r3, 80095c4 <__smakebuf_r+0x74>
 80095ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80095b0:	4630      	mov	r0, r6
 80095b2:	f001 f987 	bl	800a8c4 <_isatty_r>
 80095b6:	b128      	cbz	r0, 80095c4 <__smakebuf_r+0x74>
 80095b8:	89a3      	ldrh	r3, [r4, #12]
 80095ba:	f023 0303 	bic.w	r3, r3, #3
 80095be:	f043 0301 	orr.w	r3, r3, #1
 80095c2:	81a3      	strh	r3, [r4, #12]
 80095c4:	89a0      	ldrh	r0, [r4, #12]
 80095c6:	4305      	orrs	r5, r0
 80095c8:	81a5      	strh	r5, [r4, #12]
 80095ca:	e7cd      	b.n	8009568 <__smakebuf_r+0x18>
 80095cc:	08008c79 	.word	0x08008c79

080095d0 <malloc>:
 80095d0:	4b02      	ldr	r3, [pc, #8]	; (80095dc <malloc+0xc>)
 80095d2:	4601      	mov	r1, r0
 80095d4:	6818      	ldr	r0, [r3, #0]
 80095d6:	f000 bd3f 	b.w	800a058 <_malloc_r>
 80095da:	bf00      	nop
 80095dc:	20000010 	.word	0x20000010

080095e0 <__ascii_mbtowc>:
 80095e0:	b082      	sub	sp, #8
 80095e2:	b901      	cbnz	r1, 80095e6 <__ascii_mbtowc+0x6>
 80095e4:	a901      	add	r1, sp, #4
 80095e6:	b142      	cbz	r2, 80095fa <__ascii_mbtowc+0x1a>
 80095e8:	b14b      	cbz	r3, 80095fe <__ascii_mbtowc+0x1e>
 80095ea:	7813      	ldrb	r3, [r2, #0]
 80095ec:	600b      	str	r3, [r1, #0]
 80095ee:	7812      	ldrb	r2, [r2, #0]
 80095f0:	1e10      	subs	r0, r2, #0
 80095f2:	bf18      	it	ne
 80095f4:	2001      	movne	r0, #1
 80095f6:	b002      	add	sp, #8
 80095f8:	4770      	bx	lr
 80095fa:	4610      	mov	r0, r2
 80095fc:	e7fb      	b.n	80095f6 <__ascii_mbtowc+0x16>
 80095fe:	f06f 0001 	mvn.w	r0, #1
 8009602:	e7f8      	b.n	80095f6 <__ascii_mbtowc+0x16>

08009604 <memcpy>:
 8009604:	440a      	add	r2, r1
 8009606:	4291      	cmp	r1, r2
 8009608:	f100 33ff 	add.w	r3, r0, #4294967295
 800960c:	d100      	bne.n	8009610 <memcpy+0xc>
 800960e:	4770      	bx	lr
 8009610:	b510      	push	{r4, lr}
 8009612:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009616:	f803 4f01 	strb.w	r4, [r3, #1]!
 800961a:	4291      	cmp	r1, r2
 800961c:	d1f9      	bne.n	8009612 <memcpy+0xe>
 800961e:	bd10      	pop	{r4, pc}

08009620 <_Balloc>:
 8009620:	b570      	push	{r4, r5, r6, lr}
 8009622:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009624:	4604      	mov	r4, r0
 8009626:	460d      	mov	r5, r1
 8009628:	b976      	cbnz	r6, 8009648 <_Balloc+0x28>
 800962a:	2010      	movs	r0, #16
 800962c:	f7ff ffd0 	bl	80095d0 <malloc>
 8009630:	4602      	mov	r2, r0
 8009632:	6260      	str	r0, [r4, #36]	; 0x24
 8009634:	b920      	cbnz	r0, 8009640 <_Balloc+0x20>
 8009636:	4b18      	ldr	r3, [pc, #96]	; (8009698 <_Balloc+0x78>)
 8009638:	4818      	ldr	r0, [pc, #96]	; (800969c <_Balloc+0x7c>)
 800963a:	2166      	movs	r1, #102	; 0x66
 800963c:	f001 f8f0 	bl	800a820 <__assert_func>
 8009640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009644:	6006      	str	r6, [r0, #0]
 8009646:	60c6      	str	r6, [r0, #12]
 8009648:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800964a:	68f3      	ldr	r3, [r6, #12]
 800964c:	b183      	cbz	r3, 8009670 <_Balloc+0x50>
 800964e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009656:	b9b8      	cbnz	r0, 8009688 <_Balloc+0x68>
 8009658:	2101      	movs	r1, #1
 800965a:	fa01 f605 	lsl.w	r6, r1, r5
 800965e:	1d72      	adds	r2, r6, #5
 8009660:	0092      	lsls	r2, r2, #2
 8009662:	4620      	mov	r0, r4
 8009664:	f000 fc98 	bl	8009f98 <_calloc_r>
 8009668:	b160      	cbz	r0, 8009684 <_Balloc+0x64>
 800966a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800966e:	e00e      	b.n	800968e <_Balloc+0x6e>
 8009670:	2221      	movs	r2, #33	; 0x21
 8009672:	2104      	movs	r1, #4
 8009674:	4620      	mov	r0, r4
 8009676:	f000 fc8f 	bl	8009f98 <_calloc_r>
 800967a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800967c:	60f0      	str	r0, [r6, #12]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d1e4      	bne.n	800964e <_Balloc+0x2e>
 8009684:	2000      	movs	r0, #0
 8009686:	bd70      	pop	{r4, r5, r6, pc}
 8009688:	6802      	ldr	r2, [r0, #0]
 800968a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800968e:	2300      	movs	r3, #0
 8009690:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009694:	e7f7      	b.n	8009686 <_Balloc+0x66>
 8009696:	bf00      	nop
 8009698:	0800b00e 	.word	0x0800b00e
 800969c:	0800b178 	.word	0x0800b178

080096a0 <_Bfree>:
 80096a0:	b570      	push	{r4, r5, r6, lr}
 80096a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80096a4:	4605      	mov	r5, r0
 80096a6:	460c      	mov	r4, r1
 80096a8:	b976      	cbnz	r6, 80096c8 <_Bfree+0x28>
 80096aa:	2010      	movs	r0, #16
 80096ac:	f7ff ff90 	bl	80095d0 <malloc>
 80096b0:	4602      	mov	r2, r0
 80096b2:	6268      	str	r0, [r5, #36]	; 0x24
 80096b4:	b920      	cbnz	r0, 80096c0 <_Bfree+0x20>
 80096b6:	4b09      	ldr	r3, [pc, #36]	; (80096dc <_Bfree+0x3c>)
 80096b8:	4809      	ldr	r0, [pc, #36]	; (80096e0 <_Bfree+0x40>)
 80096ba:	218a      	movs	r1, #138	; 0x8a
 80096bc:	f001 f8b0 	bl	800a820 <__assert_func>
 80096c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096c4:	6006      	str	r6, [r0, #0]
 80096c6:	60c6      	str	r6, [r0, #12]
 80096c8:	b13c      	cbz	r4, 80096da <_Bfree+0x3a>
 80096ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80096cc:	6862      	ldr	r2, [r4, #4]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096d4:	6021      	str	r1, [r4, #0]
 80096d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096da:	bd70      	pop	{r4, r5, r6, pc}
 80096dc:	0800b00e 	.word	0x0800b00e
 80096e0:	0800b178 	.word	0x0800b178

080096e4 <__multadd>:
 80096e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e8:	690e      	ldr	r6, [r1, #16]
 80096ea:	4607      	mov	r7, r0
 80096ec:	4698      	mov	r8, r3
 80096ee:	460c      	mov	r4, r1
 80096f0:	f101 0014 	add.w	r0, r1, #20
 80096f4:	2300      	movs	r3, #0
 80096f6:	6805      	ldr	r5, [r0, #0]
 80096f8:	b2a9      	uxth	r1, r5
 80096fa:	fb02 8101 	mla	r1, r2, r1, r8
 80096fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009702:	0c2d      	lsrs	r5, r5, #16
 8009704:	fb02 c505 	mla	r5, r2, r5, ip
 8009708:	b289      	uxth	r1, r1
 800970a:	3301      	adds	r3, #1
 800970c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009710:	429e      	cmp	r6, r3
 8009712:	f840 1b04 	str.w	r1, [r0], #4
 8009716:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800971a:	dcec      	bgt.n	80096f6 <__multadd+0x12>
 800971c:	f1b8 0f00 	cmp.w	r8, #0
 8009720:	d022      	beq.n	8009768 <__multadd+0x84>
 8009722:	68a3      	ldr	r3, [r4, #8]
 8009724:	42b3      	cmp	r3, r6
 8009726:	dc19      	bgt.n	800975c <__multadd+0x78>
 8009728:	6861      	ldr	r1, [r4, #4]
 800972a:	4638      	mov	r0, r7
 800972c:	3101      	adds	r1, #1
 800972e:	f7ff ff77 	bl	8009620 <_Balloc>
 8009732:	4605      	mov	r5, r0
 8009734:	b928      	cbnz	r0, 8009742 <__multadd+0x5e>
 8009736:	4602      	mov	r2, r0
 8009738:	4b0d      	ldr	r3, [pc, #52]	; (8009770 <__multadd+0x8c>)
 800973a:	480e      	ldr	r0, [pc, #56]	; (8009774 <__multadd+0x90>)
 800973c:	21b5      	movs	r1, #181	; 0xb5
 800973e:	f001 f86f 	bl	800a820 <__assert_func>
 8009742:	6922      	ldr	r2, [r4, #16]
 8009744:	3202      	adds	r2, #2
 8009746:	f104 010c 	add.w	r1, r4, #12
 800974a:	0092      	lsls	r2, r2, #2
 800974c:	300c      	adds	r0, #12
 800974e:	f7ff ff59 	bl	8009604 <memcpy>
 8009752:	4621      	mov	r1, r4
 8009754:	4638      	mov	r0, r7
 8009756:	f7ff ffa3 	bl	80096a0 <_Bfree>
 800975a:	462c      	mov	r4, r5
 800975c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8009760:	3601      	adds	r6, #1
 8009762:	f8c3 8014 	str.w	r8, [r3, #20]
 8009766:	6126      	str	r6, [r4, #16]
 8009768:	4620      	mov	r0, r4
 800976a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800976e:	bf00      	nop
 8009770:	0800b084 	.word	0x0800b084
 8009774:	0800b178 	.word	0x0800b178

08009778 <__s2b>:
 8009778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800977c:	460c      	mov	r4, r1
 800977e:	4615      	mov	r5, r2
 8009780:	461f      	mov	r7, r3
 8009782:	2209      	movs	r2, #9
 8009784:	3308      	adds	r3, #8
 8009786:	4606      	mov	r6, r0
 8009788:	fb93 f3f2 	sdiv	r3, r3, r2
 800978c:	2100      	movs	r1, #0
 800978e:	2201      	movs	r2, #1
 8009790:	429a      	cmp	r2, r3
 8009792:	db09      	blt.n	80097a8 <__s2b+0x30>
 8009794:	4630      	mov	r0, r6
 8009796:	f7ff ff43 	bl	8009620 <_Balloc>
 800979a:	b940      	cbnz	r0, 80097ae <__s2b+0x36>
 800979c:	4602      	mov	r2, r0
 800979e:	4b19      	ldr	r3, [pc, #100]	; (8009804 <__s2b+0x8c>)
 80097a0:	4819      	ldr	r0, [pc, #100]	; (8009808 <__s2b+0x90>)
 80097a2:	21ce      	movs	r1, #206	; 0xce
 80097a4:	f001 f83c 	bl	800a820 <__assert_func>
 80097a8:	0052      	lsls	r2, r2, #1
 80097aa:	3101      	adds	r1, #1
 80097ac:	e7f0      	b.n	8009790 <__s2b+0x18>
 80097ae:	9b08      	ldr	r3, [sp, #32]
 80097b0:	6143      	str	r3, [r0, #20]
 80097b2:	2d09      	cmp	r5, #9
 80097b4:	f04f 0301 	mov.w	r3, #1
 80097b8:	6103      	str	r3, [r0, #16]
 80097ba:	dd16      	ble.n	80097ea <__s2b+0x72>
 80097bc:	f104 0909 	add.w	r9, r4, #9
 80097c0:	46c8      	mov	r8, r9
 80097c2:	442c      	add	r4, r5
 80097c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80097c8:	4601      	mov	r1, r0
 80097ca:	3b30      	subs	r3, #48	; 0x30
 80097cc:	220a      	movs	r2, #10
 80097ce:	4630      	mov	r0, r6
 80097d0:	f7ff ff88 	bl	80096e4 <__multadd>
 80097d4:	45a0      	cmp	r8, r4
 80097d6:	d1f5      	bne.n	80097c4 <__s2b+0x4c>
 80097d8:	f1a5 0408 	sub.w	r4, r5, #8
 80097dc:	444c      	add	r4, r9
 80097de:	1b2d      	subs	r5, r5, r4
 80097e0:	1963      	adds	r3, r4, r5
 80097e2:	42bb      	cmp	r3, r7
 80097e4:	db04      	blt.n	80097f0 <__s2b+0x78>
 80097e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097ea:	340a      	adds	r4, #10
 80097ec:	2509      	movs	r5, #9
 80097ee:	e7f6      	b.n	80097de <__s2b+0x66>
 80097f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80097f4:	4601      	mov	r1, r0
 80097f6:	3b30      	subs	r3, #48	; 0x30
 80097f8:	220a      	movs	r2, #10
 80097fa:	4630      	mov	r0, r6
 80097fc:	f7ff ff72 	bl	80096e4 <__multadd>
 8009800:	e7ee      	b.n	80097e0 <__s2b+0x68>
 8009802:	bf00      	nop
 8009804:	0800b084 	.word	0x0800b084
 8009808:	0800b178 	.word	0x0800b178

0800980c <__hi0bits>:
 800980c:	0c03      	lsrs	r3, r0, #16
 800980e:	041b      	lsls	r3, r3, #16
 8009810:	b9d3      	cbnz	r3, 8009848 <__hi0bits+0x3c>
 8009812:	0400      	lsls	r0, r0, #16
 8009814:	2310      	movs	r3, #16
 8009816:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800981a:	bf04      	itt	eq
 800981c:	0200      	lsleq	r0, r0, #8
 800981e:	3308      	addeq	r3, #8
 8009820:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009824:	bf04      	itt	eq
 8009826:	0100      	lsleq	r0, r0, #4
 8009828:	3304      	addeq	r3, #4
 800982a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800982e:	bf04      	itt	eq
 8009830:	0080      	lsleq	r0, r0, #2
 8009832:	3302      	addeq	r3, #2
 8009834:	2800      	cmp	r0, #0
 8009836:	db05      	blt.n	8009844 <__hi0bits+0x38>
 8009838:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800983c:	f103 0301 	add.w	r3, r3, #1
 8009840:	bf08      	it	eq
 8009842:	2320      	moveq	r3, #32
 8009844:	4618      	mov	r0, r3
 8009846:	4770      	bx	lr
 8009848:	2300      	movs	r3, #0
 800984a:	e7e4      	b.n	8009816 <__hi0bits+0xa>

0800984c <__lo0bits>:
 800984c:	6803      	ldr	r3, [r0, #0]
 800984e:	f013 0207 	ands.w	r2, r3, #7
 8009852:	4601      	mov	r1, r0
 8009854:	d00b      	beq.n	800986e <__lo0bits+0x22>
 8009856:	07da      	lsls	r2, r3, #31
 8009858:	d424      	bmi.n	80098a4 <__lo0bits+0x58>
 800985a:	0798      	lsls	r0, r3, #30
 800985c:	bf49      	itett	mi
 800985e:	085b      	lsrmi	r3, r3, #1
 8009860:	089b      	lsrpl	r3, r3, #2
 8009862:	2001      	movmi	r0, #1
 8009864:	600b      	strmi	r3, [r1, #0]
 8009866:	bf5c      	itt	pl
 8009868:	600b      	strpl	r3, [r1, #0]
 800986a:	2002      	movpl	r0, #2
 800986c:	4770      	bx	lr
 800986e:	b298      	uxth	r0, r3
 8009870:	b9b0      	cbnz	r0, 80098a0 <__lo0bits+0x54>
 8009872:	0c1b      	lsrs	r3, r3, #16
 8009874:	2010      	movs	r0, #16
 8009876:	f013 0fff 	tst.w	r3, #255	; 0xff
 800987a:	bf04      	itt	eq
 800987c:	0a1b      	lsreq	r3, r3, #8
 800987e:	3008      	addeq	r0, #8
 8009880:	071a      	lsls	r2, r3, #28
 8009882:	bf04      	itt	eq
 8009884:	091b      	lsreq	r3, r3, #4
 8009886:	3004      	addeq	r0, #4
 8009888:	079a      	lsls	r2, r3, #30
 800988a:	bf04      	itt	eq
 800988c:	089b      	lsreq	r3, r3, #2
 800988e:	3002      	addeq	r0, #2
 8009890:	07da      	lsls	r2, r3, #31
 8009892:	d403      	bmi.n	800989c <__lo0bits+0x50>
 8009894:	085b      	lsrs	r3, r3, #1
 8009896:	f100 0001 	add.w	r0, r0, #1
 800989a:	d005      	beq.n	80098a8 <__lo0bits+0x5c>
 800989c:	600b      	str	r3, [r1, #0]
 800989e:	4770      	bx	lr
 80098a0:	4610      	mov	r0, r2
 80098a2:	e7e8      	b.n	8009876 <__lo0bits+0x2a>
 80098a4:	2000      	movs	r0, #0
 80098a6:	4770      	bx	lr
 80098a8:	2020      	movs	r0, #32
 80098aa:	4770      	bx	lr

080098ac <__i2b>:
 80098ac:	b510      	push	{r4, lr}
 80098ae:	460c      	mov	r4, r1
 80098b0:	2101      	movs	r1, #1
 80098b2:	f7ff feb5 	bl	8009620 <_Balloc>
 80098b6:	4602      	mov	r2, r0
 80098b8:	b928      	cbnz	r0, 80098c6 <__i2b+0x1a>
 80098ba:	4b05      	ldr	r3, [pc, #20]	; (80098d0 <__i2b+0x24>)
 80098bc:	4805      	ldr	r0, [pc, #20]	; (80098d4 <__i2b+0x28>)
 80098be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80098c2:	f000 ffad 	bl	800a820 <__assert_func>
 80098c6:	2301      	movs	r3, #1
 80098c8:	6144      	str	r4, [r0, #20]
 80098ca:	6103      	str	r3, [r0, #16]
 80098cc:	bd10      	pop	{r4, pc}
 80098ce:	bf00      	nop
 80098d0:	0800b084 	.word	0x0800b084
 80098d4:	0800b178 	.word	0x0800b178

080098d8 <__multiply>:
 80098d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098dc:	4614      	mov	r4, r2
 80098de:	690a      	ldr	r2, [r1, #16]
 80098e0:	6923      	ldr	r3, [r4, #16]
 80098e2:	429a      	cmp	r2, r3
 80098e4:	bfb8      	it	lt
 80098e6:	460b      	movlt	r3, r1
 80098e8:	460d      	mov	r5, r1
 80098ea:	bfbc      	itt	lt
 80098ec:	4625      	movlt	r5, r4
 80098ee:	461c      	movlt	r4, r3
 80098f0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80098f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80098f8:	68ab      	ldr	r3, [r5, #8]
 80098fa:	6869      	ldr	r1, [r5, #4]
 80098fc:	eb0a 0709 	add.w	r7, sl, r9
 8009900:	42bb      	cmp	r3, r7
 8009902:	b085      	sub	sp, #20
 8009904:	bfb8      	it	lt
 8009906:	3101      	addlt	r1, #1
 8009908:	f7ff fe8a 	bl	8009620 <_Balloc>
 800990c:	b930      	cbnz	r0, 800991c <__multiply+0x44>
 800990e:	4602      	mov	r2, r0
 8009910:	4b42      	ldr	r3, [pc, #264]	; (8009a1c <__multiply+0x144>)
 8009912:	4843      	ldr	r0, [pc, #268]	; (8009a20 <__multiply+0x148>)
 8009914:	f240 115d 	movw	r1, #349	; 0x15d
 8009918:	f000 ff82 	bl	800a820 <__assert_func>
 800991c:	f100 0614 	add.w	r6, r0, #20
 8009920:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009924:	4633      	mov	r3, r6
 8009926:	2200      	movs	r2, #0
 8009928:	4543      	cmp	r3, r8
 800992a:	d31e      	bcc.n	800996a <__multiply+0x92>
 800992c:	f105 0c14 	add.w	ip, r5, #20
 8009930:	f104 0314 	add.w	r3, r4, #20
 8009934:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009938:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800993c:	9202      	str	r2, [sp, #8]
 800993e:	ebac 0205 	sub.w	r2, ip, r5
 8009942:	3a15      	subs	r2, #21
 8009944:	f022 0203 	bic.w	r2, r2, #3
 8009948:	3204      	adds	r2, #4
 800994a:	f105 0115 	add.w	r1, r5, #21
 800994e:	458c      	cmp	ip, r1
 8009950:	bf38      	it	cc
 8009952:	2204      	movcc	r2, #4
 8009954:	9201      	str	r2, [sp, #4]
 8009956:	9a02      	ldr	r2, [sp, #8]
 8009958:	9303      	str	r3, [sp, #12]
 800995a:	429a      	cmp	r2, r3
 800995c:	d808      	bhi.n	8009970 <__multiply+0x98>
 800995e:	2f00      	cmp	r7, #0
 8009960:	dc55      	bgt.n	8009a0e <__multiply+0x136>
 8009962:	6107      	str	r7, [r0, #16]
 8009964:	b005      	add	sp, #20
 8009966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800996a:	f843 2b04 	str.w	r2, [r3], #4
 800996e:	e7db      	b.n	8009928 <__multiply+0x50>
 8009970:	f8b3 a000 	ldrh.w	sl, [r3]
 8009974:	f1ba 0f00 	cmp.w	sl, #0
 8009978:	d020      	beq.n	80099bc <__multiply+0xe4>
 800997a:	f105 0e14 	add.w	lr, r5, #20
 800997e:	46b1      	mov	r9, r6
 8009980:	2200      	movs	r2, #0
 8009982:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009986:	f8d9 b000 	ldr.w	fp, [r9]
 800998a:	b2a1      	uxth	r1, r4
 800998c:	fa1f fb8b 	uxth.w	fp, fp
 8009990:	fb0a b101 	mla	r1, sl, r1, fp
 8009994:	4411      	add	r1, r2
 8009996:	f8d9 2000 	ldr.w	r2, [r9]
 800999a:	0c24      	lsrs	r4, r4, #16
 800999c:	0c12      	lsrs	r2, r2, #16
 800999e:	fb0a 2404 	mla	r4, sl, r4, r2
 80099a2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80099a6:	b289      	uxth	r1, r1
 80099a8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80099ac:	45f4      	cmp	ip, lr
 80099ae:	f849 1b04 	str.w	r1, [r9], #4
 80099b2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80099b6:	d8e4      	bhi.n	8009982 <__multiply+0xaa>
 80099b8:	9901      	ldr	r1, [sp, #4]
 80099ba:	5072      	str	r2, [r6, r1]
 80099bc:	9a03      	ldr	r2, [sp, #12]
 80099be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80099c2:	3304      	adds	r3, #4
 80099c4:	f1b9 0f00 	cmp.w	r9, #0
 80099c8:	d01f      	beq.n	8009a0a <__multiply+0x132>
 80099ca:	6834      	ldr	r4, [r6, #0]
 80099cc:	f105 0114 	add.w	r1, r5, #20
 80099d0:	46b6      	mov	lr, r6
 80099d2:	f04f 0a00 	mov.w	sl, #0
 80099d6:	880a      	ldrh	r2, [r1, #0]
 80099d8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80099dc:	fb09 b202 	mla	r2, r9, r2, fp
 80099e0:	4492      	add	sl, r2
 80099e2:	b2a4      	uxth	r4, r4
 80099e4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80099e8:	f84e 4b04 	str.w	r4, [lr], #4
 80099ec:	f851 4b04 	ldr.w	r4, [r1], #4
 80099f0:	f8be 2000 	ldrh.w	r2, [lr]
 80099f4:	0c24      	lsrs	r4, r4, #16
 80099f6:	fb09 2404 	mla	r4, r9, r4, r2
 80099fa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80099fe:	458c      	cmp	ip, r1
 8009a00:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009a04:	d8e7      	bhi.n	80099d6 <__multiply+0xfe>
 8009a06:	9a01      	ldr	r2, [sp, #4]
 8009a08:	50b4      	str	r4, [r6, r2]
 8009a0a:	3604      	adds	r6, #4
 8009a0c:	e7a3      	b.n	8009956 <__multiply+0x7e>
 8009a0e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1a5      	bne.n	8009962 <__multiply+0x8a>
 8009a16:	3f01      	subs	r7, #1
 8009a18:	e7a1      	b.n	800995e <__multiply+0x86>
 8009a1a:	bf00      	nop
 8009a1c:	0800b084 	.word	0x0800b084
 8009a20:	0800b178 	.word	0x0800b178

08009a24 <__pow5mult>:
 8009a24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a28:	4615      	mov	r5, r2
 8009a2a:	f012 0203 	ands.w	r2, r2, #3
 8009a2e:	4606      	mov	r6, r0
 8009a30:	460f      	mov	r7, r1
 8009a32:	d007      	beq.n	8009a44 <__pow5mult+0x20>
 8009a34:	4c25      	ldr	r4, [pc, #148]	; (8009acc <__pow5mult+0xa8>)
 8009a36:	3a01      	subs	r2, #1
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a3e:	f7ff fe51 	bl	80096e4 <__multadd>
 8009a42:	4607      	mov	r7, r0
 8009a44:	10ad      	asrs	r5, r5, #2
 8009a46:	d03d      	beq.n	8009ac4 <__pow5mult+0xa0>
 8009a48:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a4a:	b97c      	cbnz	r4, 8009a6c <__pow5mult+0x48>
 8009a4c:	2010      	movs	r0, #16
 8009a4e:	f7ff fdbf 	bl	80095d0 <malloc>
 8009a52:	4602      	mov	r2, r0
 8009a54:	6270      	str	r0, [r6, #36]	; 0x24
 8009a56:	b928      	cbnz	r0, 8009a64 <__pow5mult+0x40>
 8009a58:	4b1d      	ldr	r3, [pc, #116]	; (8009ad0 <__pow5mult+0xac>)
 8009a5a:	481e      	ldr	r0, [pc, #120]	; (8009ad4 <__pow5mult+0xb0>)
 8009a5c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009a60:	f000 fede 	bl	800a820 <__assert_func>
 8009a64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a68:	6004      	str	r4, [r0, #0]
 8009a6a:	60c4      	str	r4, [r0, #12]
 8009a6c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009a70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a74:	b94c      	cbnz	r4, 8009a8a <__pow5mult+0x66>
 8009a76:	f240 2171 	movw	r1, #625	; 0x271
 8009a7a:	4630      	mov	r0, r6
 8009a7c:	f7ff ff16 	bl	80098ac <__i2b>
 8009a80:	2300      	movs	r3, #0
 8009a82:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a86:	4604      	mov	r4, r0
 8009a88:	6003      	str	r3, [r0, #0]
 8009a8a:	f04f 0900 	mov.w	r9, #0
 8009a8e:	07eb      	lsls	r3, r5, #31
 8009a90:	d50a      	bpl.n	8009aa8 <__pow5mult+0x84>
 8009a92:	4639      	mov	r1, r7
 8009a94:	4622      	mov	r2, r4
 8009a96:	4630      	mov	r0, r6
 8009a98:	f7ff ff1e 	bl	80098d8 <__multiply>
 8009a9c:	4639      	mov	r1, r7
 8009a9e:	4680      	mov	r8, r0
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	f7ff fdfd 	bl	80096a0 <_Bfree>
 8009aa6:	4647      	mov	r7, r8
 8009aa8:	106d      	asrs	r5, r5, #1
 8009aaa:	d00b      	beq.n	8009ac4 <__pow5mult+0xa0>
 8009aac:	6820      	ldr	r0, [r4, #0]
 8009aae:	b938      	cbnz	r0, 8009ac0 <__pow5mult+0x9c>
 8009ab0:	4622      	mov	r2, r4
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	f7ff ff0f 	bl	80098d8 <__multiply>
 8009aba:	6020      	str	r0, [r4, #0]
 8009abc:	f8c0 9000 	str.w	r9, [r0]
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	e7e4      	b.n	8009a8e <__pow5mult+0x6a>
 8009ac4:	4638      	mov	r0, r7
 8009ac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aca:	bf00      	nop
 8009acc:	0800b2c8 	.word	0x0800b2c8
 8009ad0:	0800b00e 	.word	0x0800b00e
 8009ad4:	0800b178 	.word	0x0800b178

08009ad8 <__lshift>:
 8009ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009adc:	460c      	mov	r4, r1
 8009ade:	6849      	ldr	r1, [r1, #4]
 8009ae0:	6923      	ldr	r3, [r4, #16]
 8009ae2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ae6:	68a3      	ldr	r3, [r4, #8]
 8009ae8:	4607      	mov	r7, r0
 8009aea:	4691      	mov	r9, r2
 8009aec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009af0:	f108 0601 	add.w	r6, r8, #1
 8009af4:	42b3      	cmp	r3, r6
 8009af6:	db0b      	blt.n	8009b10 <__lshift+0x38>
 8009af8:	4638      	mov	r0, r7
 8009afa:	f7ff fd91 	bl	8009620 <_Balloc>
 8009afe:	4605      	mov	r5, r0
 8009b00:	b948      	cbnz	r0, 8009b16 <__lshift+0x3e>
 8009b02:	4602      	mov	r2, r0
 8009b04:	4b28      	ldr	r3, [pc, #160]	; (8009ba8 <__lshift+0xd0>)
 8009b06:	4829      	ldr	r0, [pc, #164]	; (8009bac <__lshift+0xd4>)
 8009b08:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009b0c:	f000 fe88 	bl	800a820 <__assert_func>
 8009b10:	3101      	adds	r1, #1
 8009b12:	005b      	lsls	r3, r3, #1
 8009b14:	e7ee      	b.n	8009af4 <__lshift+0x1c>
 8009b16:	2300      	movs	r3, #0
 8009b18:	f100 0114 	add.w	r1, r0, #20
 8009b1c:	f100 0210 	add.w	r2, r0, #16
 8009b20:	4618      	mov	r0, r3
 8009b22:	4553      	cmp	r3, sl
 8009b24:	db33      	blt.n	8009b8e <__lshift+0xb6>
 8009b26:	6920      	ldr	r0, [r4, #16]
 8009b28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b2c:	f104 0314 	add.w	r3, r4, #20
 8009b30:	f019 091f 	ands.w	r9, r9, #31
 8009b34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b3c:	d02b      	beq.n	8009b96 <__lshift+0xbe>
 8009b3e:	f1c9 0e20 	rsb	lr, r9, #32
 8009b42:	468a      	mov	sl, r1
 8009b44:	2200      	movs	r2, #0
 8009b46:	6818      	ldr	r0, [r3, #0]
 8009b48:	fa00 f009 	lsl.w	r0, r0, r9
 8009b4c:	4302      	orrs	r2, r0
 8009b4e:	f84a 2b04 	str.w	r2, [sl], #4
 8009b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b56:	459c      	cmp	ip, r3
 8009b58:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b5c:	d8f3      	bhi.n	8009b46 <__lshift+0x6e>
 8009b5e:	ebac 0304 	sub.w	r3, ip, r4
 8009b62:	3b15      	subs	r3, #21
 8009b64:	f023 0303 	bic.w	r3, r3, #3
 8009b68:	3304      	adds	r3, #4
 8009b6a:	f104 0015 	add.w	r0, r4, #21
 8009b6e:	4584      	cmp	ip, r0
 8009b70:	bf38      	it	cc
 8009b72:	2304      	movcc	r3, #4
 8009b74:	50ca      	str	r2, [r1, r3]
 8009b76:	b10a      	cbz	r2, 8009b7c <__lshift+0xa4>
 8009b78:	f108 0602 	add.w	r6, r8, #2
 8009b7c:	3e01      	subs	r6, #1
 8009b7e:	4638      	mov	r0, r7
 8009b80:	612e      	str	r6, [r5, #16]
 8009b82:	4621      	mov	r1, r4
 8009b84:	f7ff fd8c 	bl	80096a0 <_Bfree>
 8009b88:	4628      	mov	r0, r5
 8009b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b92:	3301      	adds	r3, #1
 8009b94:	e7c5      	b.n	8009b22 <__lshift+0x4a>
 8009b96:	3904      	subs	r1, #4
 8009b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ba0:	459c      	cmp	ip, r3
 8009ba2:	d8f9      	bhi.n	8009b98 <__lshift+0xc0>
 8009ba4:	e7ea      	b.n	8009b7c <__lshift+0xa4>
 8009ba6:	bf00      	nop
 8009ba8:	0800b084 	.word	0x0800b084
 8009bac:	0800b178 	.word	0x0800b178

08009bb0 <__mcmp>:
 8009bb0:	b530      	push	{r4, r5, lr}
 8009bb2:	6902      	ldr	r2, [r0, #16]
 8009bb4:	690c      	ldr	r4, [r1, #16]
 8009bb6:	1b12      	subs	r2, r2, r4
 8009bb8:	d10e      	bne.n	8009bd8 <__mcmp+0x28>
 8009bba:	f100 0314 	add.w	r3, r0, #20
 8009bbe:	3114      	adds	r1, #20
 8009bc0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009bc4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009bc8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009bcc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009bd0:	42a5      	cmp	r5, r4
 8009bd2:	d003      	beq.n	8009bdc <__mcmp+0x2c>
 8009bd4:	d305      	bcc.n	8009be2 <__mcmp+0x32>
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	4610      	mov	r0, r2
 8009bda:	bd30      	pop	{r4, r5, pc}
 8009bdc:	4283      	cmp	r3, r0
 8009bde:	d3f3      	bcc.n	8009bc8 <__mcmp+0x18>
 8009be0:	e7fa      	b.n	8009bd8 <__mcmp+0x28>
 8009be2:	f04f 32ff 	mov.w	r2, #4294967295
 8009be6:	e7f7      	b.n	8009bd8 <__mcmp+0x28>

08009be8 <__mdiff>:
 8009be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bec:	460c      	mov	r4, r1
 8009bee:	4606      	mov	r6, r0
 8009bf0:	4611      	mov	r1, r2
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	4617      	mov	r7, r2
 8009bf6:	f7ff ffdb 	bl	8009bb0 <__mcmp>
 8009bfa:	1e05      	subs	r5, r0, #0
 8009bfc:	d110      	bne.n	8009c20 <__mdiff+0x38>
 8009bfe:	4629      	mov	r1, r5
 8009c00:	4630      	mov	r0, r6
 8009c02:	f7ff fd0d 	bl	8009620 <_Balloc>
 8009c06:	b930      	cbnz	r0, 8009c16 <__mdiff+0x2e>
 8009c08:	4b39      	ldr	r3, [pc, #228]	; (8009cf0 <__mdiff+0x108>)
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	f240 2132 	movw	r1, #562	; 0x232
 8009c10:	4838      	ldr	r0, [pc, #224]	; (8009cf4 <__mdiff+0x10c>)
 8009c12:	f000 fe05 	bl	800a820 <__assert_func>
 8009c16:	2301      	movs	r3, #1
 8009c18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c20:	bfa4      	itt	ge
 8009c22:	463b      	movge	r3, r7
 8009c24:	4627      	movge	r7, r4
 8009c26:	4630      	mov	r0, r6
 8009c28:	6879      	ldr	r1, [r7, #4]
 8009c2a:	bfa6      	itte	ge
 8009c2c:	461c      	movge	r4, r3
 8009c2e:	2500      	movge	r5, #0
 8009c30:	2501      	movlt	r5, #1
 8009c32:	f7ff fcf5 	bl	8009620 <_Balloc>
 8009c36:	b920      	cbnz	r0, 8009c42 <__mdiff+0x5a>
 8009c38:	4b2d      	ldr	r3, [pc, #180]	; (8009cf0 <__mdiff+0x108>)
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009c40:	e7e6      	b.n	8009c10 <__mdiff+0x28>
 8009c42:	693e      	ldr	r6, [r7, #16]
 8009c44:	60c5      	str	r5, [r0, #12]
 8009c46:	6925      	ldr	r5, [r4, #16]
 8009c48:	f107 0114 	add.w	r1, r7, #20
 8009c4c:	f104 0914 	add.w	r9, r4, #20
 8009c50:	f100 0e14 	add.w	lr, r0, #20
 8009c54:	f107 0210 	add.w	r2, r7, #16
 8009c58:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8009c5c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009c60:	46f2      	mov	sl, lr
 8009c62:	2700      	movs	r7, #0
 8009c64:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c68:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c6c:	fa1f f883 	uxth.w	r8, r3
 8009c70:	fa17 f78b 	uxtah	r7, r7, fp
 8009c74:	0c1b      	lsrs	r3, r3, #16
 8009c76:	eba7 0808 	sub.w	r8, r7, r8
 8009c7a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c7e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c82:	fa1f f888 	uxth.w	r8, r8
 8009c86:	141f      	asrs	r7, r3, #16
 8009c88:	454d      	cmp	r5, r9
 8009c8a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c8e:	f84a 3b04 	str.w	r3, [sl], #4
 8009c92:	d8e7      	bhi.n	8009c64 <__mdiff+0x7c>
 8009c94:	1b2b      	subs	r3, r5, r4
 8009c96:	3b15      	subs	r3, #21
 8009c98:	f023 0303 	bic.w	r3, r3, #3
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	3415      	adds	r4, #21
 8009ca0:	42a5      	cmp	r5, r4
 8009ca2:	bf38      	it	cc
 8009ca4:	2304      	movcc	r3, #4
 8009ca6:	4419      	add	r1, r3
 8009ca8:	4473      	add	r3, lr
 8009caa:	469e      	mov	lr, r3
 8009cac:	460d      	mov	r5, r1
 8009cae:	4565      	cmp	r5, ip
 8009cb0:	d30e      	bcc.n	8009cd0 <__mdiff+0xe8>
 8009cb2:	f10c 0203 	add.w	r2, ip, #3
 8009cb6:	1a52      	subs	r2, r2, r1
 8009cb8:	f022 0203 	bic.w	r2, r2, #3
 8009cbc:	3903      	subs	r1, #3
 8009cbe:	458c      	cmp	ip, r1
 8009cc0:	bf38      	it	cc
 8009cc2:	2200      	movcc	r2, #0
 8009cc4:	441a      	add	r2, r3
 8009cc6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009cca:	b17b      	cbz	r3, 8009cec <__mdiff+0x104>
 8009ccc:	6106      	str	r6, [r0, #16]
 8009cce:	e7a5      	b.n	8009c1c <__mdiff+0x34>
 8009cd0:	f855 8b04 	ldr.w	r8, [r5], #4
 8009cd4:	fa17 f488 	uxtah	r4, r7, r8
 8009cd8:	1422      	asrs	r2, r4, #16
 8009cda:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8009cde:	b2a4      	uxth	r4, r4
 8009ce0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8009ce4:	f84e 4b04 	str.w	r4, [lr], #4
 8009ce8:	1417      	asrs	r7, r2, #16
 8009cea:	e7e0      	b.n	8009cae <__mdiff+0xc6>
 8009cec:	3e01      	subs	r6, #1
 8009cee:	e7ea      	b.n	8009cc6 <__mdiff+0xde>
 8009cf0:	0800b084 	.word	0x0800b084
 8009cf4:	0800b178 	.word	0x0800b178

08009cf8 <__ulp>:
 8009cf8:	b082      	sub	sp, #8
 8009cfa:	ed8d 0b00 	vstr	d0, [sp]
 8009cfe:	9b01      	ldr	r3, [sp, #4]
 8009d00:	4912      	ldr	r1, [pc, #72]	; (8009d4c <__ulp+0x54>)
 8009d02:	4019      	ands	r1, r3
 8009d04:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8009d08:	2900      	cmp	r1, #0
 8009d0a:	dd05      	ble.n	8009d18 <__ulp+0x20>
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	460b      	mov	r3, r1
 8009d10:	ec43 2b10 	vmov	d0, r2, r3
 8009d14:	b002      	add	sp, #8
 8009d16:	4770      	bx	lr
 8009d18:	4249      	negs	r1, r1
 8009d1a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8009d1e:	ea4f 5021 	mov.w	r0, r1, asr #20
 8009d22:	f04f 0200 	mov.w	r2, #0
 8009d26:	f04f 0300 	mov.w	r3, #0
 8009d2a:	da04      	bge.n	8009d36 <__ulp+0x3e>
 8009d2c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8009d30:	fa41 f300 	asr.w	r3, r1, r0
 8009d34:	e7ec      	b.n	8009d10 <__ulp+0x18>
 8009d36:	f1a0 0114 	sub.w	r1, r0, #20
 8009d3a:	291e      	cmp	r1, #30
 8009d3c:	bfda      	itte	le
 8009d3e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8009d42:	fa20 f101 	lsrle.w	r1, r0, r1
 8009d46:	2101      	movgt	r1, #1
 8009d48:	460a      	mov	r2, r1
 8009d4a:	e7e1      	b.n	8009d10 <__ulp+0x18>
 8009d4c:	7ff00000 	.word	0x7ff00000

08009d50 <__b2d>:
 8009d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d52:	6905      	ldr	r5, [r0, #16]
 8009d54:	f100 0714 	add.w	r7, r0, #20
 8009d58:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009d5c:	1f2e      	subs	r6, r5, #4
 8009d5e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009d62:	4620      	mov	r0, r4
 8009d64:	f7ff fd52 	bl	800980c <__hi0bits>
 8009d68:	f1c0 0320 	rsb	r3, r0, #32
 8009d6c:	280a      	cmp	r0, #10
 8009d6e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8009dec <__b2d+0x9c>
 8009d72:	600b      	str	r3, [r1, #0]
 8009d74:	dc14      	bgt.n	8009da0 <__b2d+0x50>
 8009d76:	f1c0 0e0b 	rsb	lr, r0, #11
 8009d7a:	fa24 f10e 	lsr.w	r1, r4, lr
 8009d7e:	42b7      	cmp	r7, r6
 8009d80:	ea41 030c 	orr.w	r3, r1, ip
 8009d84:	bf34      	ite	cc
 8009d86:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d8a:	2100      	movcs	r1, #0
 8009d8c:	3015      	adds	r0, #21
 8009d8e:	fa04 f000 	lsl.w	r0, r4, r0
 8009d92:	fa21 f10e 	lsr.w	r1, r1, lr
 8009d96:	ea40 0201 	orr.w	r2, r0, r1
 8009d9a:	ec43 2b10 	vmov	d0, r2, r3
 8009d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009da0:	42b7      	cmp	r7, r6
 8009da2:	bf3a      	itte	cc
 8009da4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009da8:	f1a5 0608 	subcc.w	r6, r5, #8
 8009dac:	2100      	movcs	r1, #0
 8009dae:	380b      	subs	r0, #11
 8009db0:	d017      	beq.n	8009de2 <__b2d+0x92>
 8009db2:	f1c0 0c20 	rsb	ip, r0, #32
 8009db6:	fa04 f500 	lsl.w	r5, r4, r0
 8009dba:	42be      	cmp	r6, r7
 8009dbc:	fa21 f40c 	lsr.w	r4, r1, ip
 8009dc0:	ea45 0504 	orr.w	r5, r5, r4
 8009dc4:	bf8c      	ite	hi
 8009dc6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009dca:	2400      	movls	r4, #0
 8009dcc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009dd0:	fa01 f000 	lsl.w	r0, r1, r0
 8009dd4:	fa24 f40c 	lsr.w	r4, r4, ip
 8009dd8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009ddc:	ea40 0204 	orr.w	r2, r0, r4
 8009de0:	e7db      	b.n	8009d9a <__b2d+0x4a>
 8009de2:	ea44 030c 	orr.w	r3, r4, ip
 8009de6:	460a      	mov	r2, r1
 8009de8:	e7d7      	b.n	8009d9a <__b2d+0x4a>
 8009dea:	bf00      	nop
 8009dec:	3ff00000 	.word	0x3ff00000

08009df0 <__d2b>:
 8009df0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009df4:	4689      	mov	r9, r1
 8009df6:	2101      	movs	r1, #1
 8009df8:	ec57 6b10 	vmov	r6, r7, d0
 8009dfc:	4690      	mov	r8, r2
 8009dfe:	f7ff fc0f 	bl	8009620 <_Balloc>
 8009e02:	4604      	mov	r4, r0
 8009e04:	b930      	cbnz	r0, 8009e14 <__d2b+0x24>
 8009e06:	4602      	mov	r2, r0
 8009e08:	4b25      	ldr	r3, [pc, #148]	; (8009ea0 <__d2b+0xb0>)
 8009e0a:	4826      	ldr	r0, [pc, #152]	; (8009ea4 <__d2b+0xb4>)
 8009e0c:	f240 310a 	movw	r1, #778	; 0x30a
 8009e10:	f000 fd06 	bl	800a820 <__assert_func>
 8009e14:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009e18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009e1c:	bb35      	cbnz	r5, 8009e6c <__d2b+0x7c>
 8009e1e:	2e00      	cmp	r6, #0
 8009e20:	9301      	str	r3, [sp, #4]
 8009e22:	d028      	beq.n	8009e76 <__d2b+0x86>
 8009e24:	4668      	mov	r0, sp
 8009e26:	9600      	str	r6, [sp, #0]
 8009e28:	f7ff fd10 	bl	800984c <__lo0bits>
 8009e2c:	9900      	ldr	r1, [sp, #0]
 8009e2e:	b300      	cbz	r0, 8009e72 <__d2b+0x82>
 8009e30:	9a01      	ldr	r2, [sp, #4]
 8009e32:	f1c0 0320 	rsb	r3, r0, #32
 8009e36:	fa02 f303 	lsl.w	r3, r2, r3
 8009e3a:	430b      	orrs	r3, r1
 8009e3c:	40c2      	lsrs	r2, r0
 8009e3e:	6163      	str	r3, [r4, #20]
 8009e40:	9201      	str	r2, [sp, #4]
 8009e42:	9b01      	ldr	r3, [sp, #4]
 8009e44:	61a3      	str	r3, [r4, #24]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	bf14      	ite	ne
 8009e4a:	2202      	movne	r2, #2
 8009e4c:	2201      	moveq	r2, #1
 8009e4e:	6122      	str	r2, [r4, #16]
 8009e50:	b1d5      	cbz	r5, 8009e88 <__d2b+0x98>
 8009e52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e56:	4405      	add	r5, r0
 8009e58:	f8c9 5000 	str.w	r5, [r9]
 8009e5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e60:	f8c8 0000 	str.w	r0, [r8]
 8009e64:	4620      	mov	r0, r4
 8009e66:	b003      	add	sp, #12
 8009e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e70:	e7d5      	b.n	8009e1e <__d2b+0x2e>
 8009e72:	6161      	str	r1, [r4, #20]
 8009e74:	e7e5      	b.n	8009e42 <__d2b+0x52>
 8009e76:	a801      	add	r0, sp, #4
 8009e78:	f7ff fce8 	bl	800984c <__lo0bits>
 8009e7c:	9b01      	ldr	r3, [sp, #4]
 8009e7e:	6163      	str	r3, [r4, #20]
 8009e80:	2201      	movs	r2, #1
 8009e82:	6122      	str	r2, [r4, #16]
 8009e84:	3020      	adds	r0, #32
 8009e86:	e7e3      	b.n	8009e50 <__d2b+0x60>
 8009e88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e90:	f8c9 0000 	str.w	r0, [r9]
 8009e94:	6918      	ldr	r0, [r3, #16]
 8009e96:	f7ff fcb9 	bl	800980c <__hi0bits>
 8009e9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e9e:	e7df      	b.n	8009e60 <__d2b+0x70>
 8009ea0:	0800b084 	.word	0x0800b084
 8009ea4:	0800b178 	.word	0x0800b178

08009ea8 <__ratio>:
 8009ea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eac:	468a      	mov	sl, r1
 8009eae:	4669      	mov	r1, sp
 8009eb0:	4683      	mov	fp, r0
 8009eb2:	f7ff ff4d 	bl	8009d50 <__b2d>
 8009eb6:	a901      	add	r1, sp, #4
 8009eb8:	4650      	mov	r0, sl
 8009eba:	ec59 8b10 	vmov	r8, r9, d0
 8009ebe:	ee10 6a10 	vmov	r6, s0
 8009ec2:	f7ff ff45 	bl	8009d50 <__b2d>
 8009ec6:	f8db 3010 	ldr.w	r3, [fp, #16]
 8009eca:	f8da 2010 	ldr.w	r2, [sl, #16]
 8009ece:	eba3 0c02 	sub.w	ip, r3, r2
 8009ed2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009ed6:	1a9b      	subs	r3, r3, r2
 8009ed8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009edc:	ec55 4b10 	vmov	r4, r5, d0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	ee10 0a10 	vmov	r0, s0
 8009ee6:	bfce      	itee	gt
 8009ee8:	464a      	movgt	r2, r9
 8009eea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009eee:	462a      	movle	r2, r5
 8009ef0:	464f      	mov	r7, r9
 8009ef2:	4629      	mov	r1, r5
 8009ef4:	bfcc      	ite	gt
 8009ef6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009efa:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009efe:	ec47 6b17 	vmov	d7, r6, r7
 8009f02:	ec41 0b16 	vmov	d6, r0, r1
 8009f06:	ee87 0b06 	vdiv.f64	d0, d7, d6
 8009f0a:	b003      	add	sp, #12
 8009f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f10 <__copybits>:
 8009f10:	3901      	subs	r1, #1
 8009f12:	b570      	push	{r4, r5, r6, lr}
 8009f14:	1149      	asrs	r1, r1, #5
 8009f16:	6914      	ldr	r4, [r2, #16]
 8009f18:	3101      	adds	r1, #1
 8009f1a:	f102 0314 	add.w	r3, r2, #20
 8009f1e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009f22:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009f26:	1f05      	subs	r5, r0, #4
 8009f28:	42a3      	cmp	r3, r4
 8009f2a:	d30c      	bcc.n	8009f46 <__copybits+0x36>
 8009f2c:	1aa3      	subs	r3, r4, r2
 8009f2e:	3b11      	subs	r3, #17
 8009f30:	f023 0303 	bic.w	r3, r3, #3
 8009f34:	3211      	adds	r2, #17
 8009f36:	42a2      	cmp	r2, r4
 8009f38:	bf88      	it	hi
 8009f3a:	2300      	movhi	r3, #0
 8009f3c:	4418      	add	r0, r3
 8009f3e:	2300      	movs	r3, #0
 8009f40:	4288      	cmp	r0, r1
 8009f42:	d305      	bcc.n	8009f50 <__copybits+0x40>
 8009f44:	bd70      	pop	{r4, r5, r6, pc}
 8009f46:	f853 6b04 	ldr.w	r6, [r3], #4
 8009f4a:	f845 6f04 	str.w	r6, [r5, #4]!
 8009f4e:	e7eb      	b.n	8009f28 <__copybits+0x18>
 8009f50:	f840 3b04 	str.w	r3, [r0], #4
 8009f54:	e7f4      	b.n	8009f40 <__copybits+0x30>

08009f56 <__any_on>:
 8009f56:	f100 0214 	add.w	r2, r0, #20
 8009f5a:	6900      	ldr	r0, [r0, #16]
 8009f5c:	114b      	asrs	r3, r1, #5
 8009f5e:	4298      	cmp	r0, r3
 8009f60:	b510      	push	{r4, lr}
 8009f62:	db11      	blt.n	8009f88 <__any_on+0x32>
 8009f64:	dd0a      	ble.n	8009f7c <__any_on+0x26>
 8009f66:	f011 011f 	ands.w	r1, r1, #31
 8009f6a:	d007      	beq.n	8009f7c <__any_on+0x26>
 8009f6c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f70:	fa24 f001 	lsr.w	r0, r4, r1
 8009f74:	fa00 f101 	lsl.w	r1, r0, r1
 8009f78:	428c      	cmp	r4, r1
 8009f7a:	d10b      	bne.n	8009f94 <__any_on+0x3e>
 8009f7c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d803      	bhi.n	8009f8c <__any_on+0x36>
 8009f84:	2000      	movs	r0, #0
 8009f86:	bd10      	pop	{r4, pc}
 8009f88:	4603      	mov	r3, r0
 8009f8a:	e7f7      	b.n	8009f7c <__any_on+0x26>
 8009f8c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f90:	2900      	cmp	r1, #0
 8009f92:	d0f5      	beq.n	8009f80 <__any_on+0x2a>
 8009f94:	2001      	movs	r0, #1
 8009f96:	e7f6      	b.n	8009f86 <__any_on+0x30>

08009f98 <_calloc_r>:
 8009f98:	b513      	push	{r0, r1, r4, lr}
 8009f9a:	434a      	muls	r2, r1
 8009f9c:	4611      	mov	r1, r2
 8009f9e:	9201      	str	r2, [sp, #4]
 8009fa0:	f000 f85a 	bl	800a058 <_malloc_r>
 8009fa4:	4604      	mov	r4, r0
 8009fa6:	b118      	cbz	r0, 8009fb0 <_calloc_r+0x18>
 8009fa8:	9a01      	ldr	r2, [sp, #4]
 8009faa:	2100      	movs	r1, #0
 8009fac:	f7fc f918 	bl	80061e0 <memset>
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	b002      	add	sp, #8
 8009fb4:	bd10      	pop	{r4, pc}
	...

08009fb8 <_free_r>:
 8009fb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009fba:	2900      	cmp	r1, #0
 8009fbc:	d048      	beq.n	800a050 <_free_r+0x98>
 8009fbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fc2:	9001      	str	r0, [sp, #4]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	f1a1 0404 	sub.w	r4, r1, #4
 8009fca:	bfb8      	it	lt
 8009fcc:	18e4      	addlt	r4, r4, r3
 8009fce:	f000 fcb5 	bl	800a93c <__malloc_lock>
 8009fd2:	4a20      	ldr	r2, [pc, #128]	; (800a054 <_free_r+0x9c>)
 8009fd4:	9801      	ldr	r0, [sp, #4]
 8009fd6:	6813      	ldr	r3, [r2, #0]
 8009fd8:	4615      	mov	r5, r2
 8009fda:	b933      	cbnz	r3, 8009fea <_free_r+0x32>
 8009fdc:	6063      	str	r3, [r4, #4]
 8009fde:	6014      	str	r4, [r2, #0]
 8009fe0:	b003      	add	sp, #12
 8009fe2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009fe6:	f000 bcaf 	b.w	800a948 <__malloc_unlock>
 8009fea:	42a3      	cmp	r3, r4
 8009fec:	d90b      	bls.n	800a006 <_free_r+0x4e>
 8009fee:	6821      	ldr	r1, [r4, #0]
 8009ff0:	1862      	adds	r2, r4, r1
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	bf04      	itt	eq
 8009ff6:	681a      	ldreq	r2, [r3, #0]
 8009ff8:	685b      	ldreq	r3, [r3, #4]
 8009ffa:	6063      	str	r3, [r4, #4]
 8009ffc:	bf04      	itt	eq
 8009ffe:	1852      	addeq	r2, r2, r1
 800a000:	6022      	streq	r2, [r4, #0]
 800a002:	602c      	str	r4, [r5, #0]
 800a004:	e7ec      	b.n	8009fe0 <_free_r+0x28>
 800a006:	461a      	mov	r2, r3
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	b10b      	cbz	r3, 800a010 <_free_r+0x58>
 800a00c:	42a3      	cmp	r3, r4
 800a00e:	d9fa      	bls.n	800a006 <_free_r+0x4e>
 800a010:	6811      	ldr	r1, [r2, #0]
 800a012:	1855      	adds	r5, r2, r1
 800a014:	42a5      	cmp	r5, r4
 800a016:	d10b      	bne.n	800a030 <_free_r+0x78>
 800a018:	6824      	ldr	r4, [r4, #0]
 800a01a:	4421      	add	r1, r4
 800a01c:	1854      	adds	r4, r2, r1
 800a01e:	42a3      	cmp	r3, r4
 800a020:	6011      	str	r1, [r2, #0]
 800a022:	d1dd      	bne.n	8009fe0 <_free_r+0x28>
 800a024:	681c      	ldr	r4, [r3, #0]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	6053      	str	r3, [r2, #4]
 800a02a:	4421      	add	r1, r4
 800a02c:	6011      	str	r1, [r2, #0]
 800a02e:	e7d7      	b.n	8009fe0 <_free_r+0x28>
 800a030:	d902      	bls.n	800a038 <_free_r+0x80>
 800a032:	230c      	movs	r3, #12
 800a034:	6003      	str	r3, [r0, #0]
 800a036:	e7d3      	b.n	8009fe0 <_free_r+0x28>
 800a038:	6825      	ldr	r5, [r4, #0]
 800a03a:	1961      	adds	r1, r4, r5
 800a03c:	428b      	cmp	r3, r1
 800a03e:	bf04      	itt	eq
 800a040:	6819      	ldreq	r1, [r3, #0]
 800a042:	685b      	ldreq	r3, [r3, #4]
 800a044:	6063      	str	r3, [r4, #4]
 800a046:	bf04      	itt	eq
 800a048:	1949      	addeq	r1, r1, r5
 800a04a:	6021      	streq	r1, [r4, #0]
 800a04c:	6054      	str	r4, [r2, #4]
 800a04e:	e7c7      	b.n	8009fe0 <_free_r+0x28>
 800a050:	b003      	add	sp, #12
 800a052:	bd30      	pop	{r4, r5, pc}
 800a054:	2000030c 	.word	0x2000030c

0800a058 <_malloc_r>:
 800a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05a:	1ccd      	adds	r5, r1, #3
 800a05c:	f025 0503 	bic.w	r5, r5, #3
 800a060:	3508      	adds	r5, #8
 800a062:	2d0c      	cmp	r5, #12
 800a064:	bf38      	it	cc
 800a066:	250c      	movcc	r5, #12
 800a068:	2d00      	cmp	r5, #0
 800a06a:	4606      	mov	r6, r0
 800a06c:	db01      	blt.n	800a072 <_malloc_r+0x1a>
 800a06e:	42a9      	cmp	r1, r5
 800a070:	d903      	bls.n	800a07a <_malloc_r+0x22>
 800a072:	230c      	movs	r3, #12
 800a074:	6033      	str	r3, [r6, #0]
 800a076:	2000      	movs	r0, #0
 800a078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a07a:	f000 fc5f 	bl	800a93c <__malloc_lock>
 800a07e:	4921      	ldr	r1, [pc, #132]	; (800a104 <_malloc_r+0xac>)
 800a080:	680a      	ldr	r2, [r1, #0]
 800a082:	4614      	mov	r4, r2
 800a084:	b99c      	cbnz	r4, 800a0ae <_malloc_r+0x56>
 800a086:	4f20      	ldr	r7, [pc, #128]	; (800a108 <_malloc_r+0xb0>)
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	b923      	cbnz	r3, 800a096 <_malloc_r+0x3e>
 800a08c:	4621      	mov	r1, r4
 800a08e:	4630      	mov	r0, r6
 800a090:	f000 fb42 	bl	800a718 <_sbrk_r>
 800a094:	6038      	str	r0, [r7, #0]
 800a096:	4629      	mov	r1, r5
 800a098:	4630      	mov	r0, r6
 800a09a:	f000 fb3d 	bl	800a718 <_sbrk_r>
 800a09e:	1c43      	adds	r3, r0, #1
 800a0a0:	d123      	bne.n	800a0ea <_malloc_r+0x92>
 800a0a2:	230c      	movs	r3, #12
 800a0a4:	6033      	str	r3, [r6, #0]
 800a0a6:	4630      	mov	r0, r6
 800a0a8:	f000 fc4e 	bl	800a948 <__malloc_unlock>
 800a0ac:	e7e3      	b.n	800a076 <_malloc_r+0x1e>
 800a0ae:	6823      	ldr	r3, [r4, #0]
 800a0b0:	1b5b      	subs	r3, r3, r5
 800a0b2:	d417      	bmi.n	800a0e4 <_malloc_r+0x8c>
 800a0b4:	2b0b      	cmp	r3, #11
 800a0b6:	d903      	bls.n	800a0c0 <_malloc_r+0x68>
 800a0b8:	6023      	str	r3, [r4, #0]
 800a0ba:	441c      	add	r4, r3
 800a0bc:	6025      	str	r5, [r4, #0]
 800a0be:	e004      	b.n	800a0ca <_malloc_r+0x72>
 800a0c0:	6863      	ldr	r3, [r4, #4]
 800a0c2:	42a2      	cmp	r2, r4
 800a0c4:	bf0c      	ite	eq
 800a0c6:	600b      	streq	r3, [r1, #0]
 800a0c8:	6053      	strne	r3, [r2, #4]
 800a0ca:	4630      	mov	r0, r6
 800a0cc:	f000 fc3c 	bl	800a948 <__malloc_unlock>
 800a0d0:	f104 000b 	add.w	r0, r4, #11
 800a0d4:	1d23      	adds	r3, r4, #4
 800a0d6:	f020 0007 	bic.w	r0, r0, #7
 800a0da:	1ac2      	subs	r2, r0, r3
 800a0dc:	d0cc      	beq.n	800a078 <_malloc_r+0x20>
 800a0de:	1a1b      	subs	r3, r3, r0
 800a0e0:	50a3      	str	r3, [r4, r2]
 800a0e2:	e7c9      	b.n	800a078 <_malloc_r+0x20>
 800a0e4:	4622      	mov	r2, r4
 800a0e6:	6864      	ldr	r4, [r4, #4]
 800a0e8:	e7cc      	b.n	800a084 <_malloc_r+0x2c>
 800a0ea:	1cc4      	adds	r4, r0, #3
 800a0ec:	f024 0403 	bic.w	r4, r4, #3
 800a0f0:	42a0      	cmp	r0, r4
 800a0f2:	d0e3      	beq.n	800a0bc <_malloc_r+0x64>
 800a0f4:	1a21      	subs	r1, r4, r0
 800a0f6:	4630      	mov	r0, r6
 800a0f8:	f000 fb0e 	bl	800a718 <_sbrk_r>
 800a0fc:	3001      	adds	r0, #1
 800a0fe:	d1dd      	bne.n	800a0bc <_malloc_r+0x64>
 800a100:	e7cf      	b.n	800a0a2 <_malloc_r+0x4a>
 800a102:	bf00      	nop
 800a104:	2000030c 	.word	0x2000030c
 800a108:	20000310 	.word	0x20000310

0800a10c <__ssputs_r>:
 800a10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a110:	688e      	ldr	r6, [r1, #8]
 800a112:	429e      	cmp	r6, r3
 800a114:	4682      	mov	sl, r0
 800a116:	460c      	mov	r4, r1
 800a118:	4690      	mov	r8, r2
 800a11a:	461f      	mov	r7, r3
 800a11c:	d838      	bhi.n	800a190 <__ssputs_r+0x84>
 800a11e:	898a      	ldrh	r2, [r1, #12]
 800a120:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a124:	d032      	beq.n	800a18c <__ssputs_r+0x80>
 800a126:	6825      	ldr	r5, [r4, #0]
 800a128:	6909      	ldr	r1, [r1, #16]
 800a12a:	eba5 0901 	sub.w	r9, r5, r1
 800a12e:	6965      	ldr	r5, [r4, #20]
 800a130:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a134:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a138:	3301      	adds	r3, #1
 800a13a:	444b      	add	r3, r9
 800a13c:	106d      	asrs	r5, r5, #1
 800a13e:	429d      	cmp	r5, r3
 800a140:	bf38      	it	cc
 800a142:	461d      	movcc	r5, r3
 800a144:	0553      	lsls	r3, r2, #21
 800a146:	d531      	bpl.n	800a1ac <__ssputs_r+0xa0>
 800a148:	4629      	mov	r1, r5
 800a14a:	f7ff ff85 	bl	800a058 <_malloc_r>
 800a14e:	4606      	mov	r6, r0
 800a150:	b950      	cbnz	r0, 800a168 <__ssputs_r+0x5c>
 800a152:	230c      	movs	r3, #12
 800a154:	f8ca 3000 	str.w	r3, [sl]
 800a158:	89a3      	ldrh	r3, [r4, #12]
 800a15a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a15e:	81a3      	strh	r3, [r4, #12]
 800a160:	f04f 30ff 	mov.w	r0, #4294967295
 800a164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a168:	6921      	ldr	r1, [r4, #16]
 800a16a:	464a      	mov	r2, r9
 800a16c:	f7ff fa4a 	bl	8009604 <memcpy>
 800a170:	89a3      	ldrh	r3, [r4, #12]
 800a172:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a176:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a17a:	81a3      	strh	r3, [r4, #12]
 800a17c:	6126      	str	r6, [r4, #16]
 800a17e:	6165      	str	r5, [r4, #20]
 800a180:	444e      	add	r6, r9
 800a182:	eba5 0509 	sub.w	r5, r5, r9
 800a186:	6026      	str	r6, [r4, #0]
 800a188:	60a5      	str	r5, [r4, #8]
 800a18a:	463e      	mov	r6, r7
 800a18c:	42be      	cmp	r6, r7
 800a18e:	d900      	bls.n	800a192 <__ssputs_r+0x86>
 800a190:	463e      	mov	r6, r7
 800a192:	4632      	mov	r2, r6
 800a194:	6820      	ldr	r0, [r4, #0]
 800a196:	4641      	mov	r1, r8
 800a198:	f000 fbb6 	bl	800a908 <memmove>
 800a19c:	68a3      	ldr	r3, [r4, #8]
 800a19e:	6822      	ldr	r2, [r4, #0]
 800a1a0:	1b9b      	subs	r3, r3, r6
 800a1a2:	4432      	add	r2, r6
 800a1a4:	60a3      	str	r3, [r4, #8]
 800a1a6:	6022      	str	r2, [r4, #0]
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	e7db      	b.n	800a164 <__ssputs_r+0x58>
 800a1ac:	462a      	mov	r2, r5
 800a1ae:	f000 fbd1 	bl	800a954 <_realloc_r>
 800a1b2:	4606      	mov	r6, r0
 800a1b4:	2800      	cmp	r0, #0
 800a1b6:	d1e1      	bne.n	800a17c <__ssputs_r+0x70>
 800a1b8:	6921      	ldr	r1, [r4, #16]
 800a1ba:	4650      	mov	r0, sl
 800a1bc:	f7ff fefc 	bl	8009fb8 <_free_r>
 800a1c0:	e7c7      	b.n	800a152 <__ssputs_r+0x46>
	...

0800a1c4 <_svfiprintf_r>:
 800a1c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c8:	4698      	mov	r8, r3
 800a1ca:	898b      	ldrh	r3, [r1, #12]
 800a1cc:	061b      	lsls	r3, r3, #24
 800a1ce:	b09d      	sub	sp, #116	; 0x74
 800a1d0:	4607      	mov	r7, r0
 800a1d2:	460d      	mov	r5, r1
 800a1d4:	4614      	mov	r4, r2
 800a1d6:	d50e      	bpl.n	800a1f6 <_svfiprintf_r+0x32>
 800a1d8:	690b      	ldr	r3, [r1, #16]
 800a1da:	b963      	cbnz	r3, 800a1f6 <_svfiprintf_r+0x32>
 800a1dc:	2140      	movs	r1, #64	; 0x40
 800a1de:	f7ff ff3b 	bl	800a058 <_malloc_r>
 800a1e2:	6028      	str	r0, [r5, #0]
 800a1e4:	6128      	str	r0, [r5, #16]
 800a1e6:	b920      	cbnz	r0, 800a1f2 <_svfiprintf_r+0x2e>
 800a1e8:	230c      	movs	r3, #12
 800a1ea:	603b      	str	r3, [r7, #0]
 800a1ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a1f0:	e0d1      	b.n	800a396 <_svfiprintf_r+0x1d2>
 800a1f2:	2340      	movs	r3, #64	; 0x40
 800a1f4:	616b      	str	r3, [r5, #20]
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	9309      	str	r3, [sp, #36]	; 0x24
 800a1fa:	2320      	movs	r3, #32
 800a1fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a200:	f8cd 800c 	str.w	r8, [sp, #12]
 800a204:	2330      	movs	r3, #48	; 0x30
 800a206:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a3b0 <_svfiprintf_r+0x1ec>
 800a20a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a20e:	f04f 0901 	mov.w	r9, #1
 800a212:	4623      	mov	r3, r4
 800a214:	469a      	mov	sl, r3
 800a216:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a21a:	b10a      	cbz	r2, 800a220 <_svfiprintf_r+0x5c>
 800a21c:	2a25      	cmp	r2, #37	; 0x25
 800a21e:	d1f9      	bne.n	800a214 <_svfiprintf_r+0x50>
 800a220:	ebba 0b04 	subs.w	fp, sl, r4
 800a224:	d00b      	beq.n	800a23e <_svfiprintf_r+0x7a>
 800a226:	465b      	mov	r3, fp
 800a228:	4622      	mov	r2, r4
 800a22a:	4629      	mov	r1, r5
 800a22c:	4638      	mov	r0, r7
 800a22e:	f7ff ff6d 	bl	800a10c <__ssputs_r>
 800a232:	3001      	adds	r0, #1
 800a234:	f000 80aa 	beq.w	800a38c <_svfiprintf_r+0x1c8>
 800a238:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a23a:	445a      	add	r2, fp
 800a23c:	9209      	str	r2, [sp, #36]	; 0x24
 800a23e:	f89a 3000 	ldrb.w	r3, [sl]
 800a242:	2b00      	cmp	r3, #0
 800a244:	f000 80a2 	beq.w	800a38c <_svfiprintf_r+0x1c8>
 800a248:	2300      	movs	r3, #0
 800a24a:	f04f 32ff 	mov.w	r2, #4294967295
 800a24e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a252:	f10a 0a01 	add.w	sl, sl, #1
 800a256:	9304      	str	r3, [sp, #16]
 800a258:	9307      	str	r3, [sp, #28]
 800a25a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a25e:	931a      	str	r3, [sp, #104]	; 0x68
 800a260:	4654      	mov	r4, sl
 800a262:	2205      	movs	r2, #5
 800a264:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a268:	4851      	ldr	r0, [pc, #324]	; (800a3b0 <_svfiprintf_r+0x1ec>)
 800a26a:	f7f5 fff1 	bl	8000250 <memchr>
 800a26e:	9a04      	ldr	r2, [sp, #16]
 800a270:	b9d8      	cbnz	r0, 800a2aa <_svfiprintf_r+0xe6>
 800a272:	06d0      	lsls	r0, r2, #27
 800a274:	bf44      	itt	mi
 800a276:	2320      	movmi	r3, #32
 800a278:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a27c:	0711      	lsls	r1, r2, #28
 800a27e:	bf44      	itt	mi
 800a280:	232b      	movmi	r3, #43	; 0x2b
 800a282:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a286:	f89a 3000 	ldrb.w	r3, [sl]
 800a28a:	2b2a      	cmp	r3, #42	; 0x2a
 800a28c:	d015      	beq.n	800a2ba <_svfiprintf_r+0xf6>
 800a28e:	9a07      	ldr	r2, [sp, #28]
 800a290:	4654      	mov	r4, sl
 800a292:	2000      	movs	r0, #0
 800a294:	f04f 0c0a 	mov.w	ip, #10
 800a298:	4621      	mov	r1, r4
 800a29a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a29e:	3b30      	subs	r3, #48	; 0x30
 800a2a0:	2b09      	cmp	r3, #9
 800a2a2:	d94e      	bls.n	800a342 <_svfiprintf_r+0x17e>
 800a2a4:	b1b0      	cbz	r0, 800a2d4 <_svfiprintf_r+0x110>
 800a2a6:	9207      	str	r2, [sp, #28]
 800a2a8:	e014      	b.n	800a2d4 <_svfiprintf_r+0x110>
 800a2aa:	eba0 0308 	sub.w	r3, r0, r8
 800a2ae:	fa09 f303 	lsl.w	r3, r9, r3
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	9304      	str	r3, [sp, #16]
 800a2b6:	46a2      	mov	sl, r4
 800a2b8:	e7d2      	b.n	800a260 <_svfiprintf_r+0x9c>
 800a2ba:	9b03      	ldr	r3, [sp, #12]
 800a2bc:	1d19      	adds	r1, r3, #4
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	9103      	str	r1, [sp, #12]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	bfbb      	ittet	lt
 800a2c6:	425b      	neglt	r3, r3
 800a2c8:	f042 0202 	orrlt.w	r2, r2, #2
 800a2cc:	9307      	strge	r3, [sp, #28]
 800a2ce:	9307      	strlt	r3, [sp, #28]
 800a2d0:	bfb8      	it	lt
 800a2d2:	9204      	strlt	r2, [sp, #16]
 800a2d4:	7823      	ldrb	r3, [r4, #0]
 800a2d6:	2b2e      	cmp	r3, #46	; 0x2e
 800a2d8:	d10c      	bne.n	800a2f4 <_svfiprintf_r+0x130>
 800a2da:	7863      	ldrb	r3, [r4, #1]
 800a2dc:	2b2a      	cmp	r3, #42	; 0x2a
 800a2de:	d135      	bne.n	800a34c <_svfiprintf_r+0x188>
 800a2e0:	9b03      	ldr	r3, [sp, #12]
 800a2e2:	1d1a      	adds	r2, r3, #4
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	9203      	str	r2, [sp, #12]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	bfb8      	it	lt
 800a2ec:	f04f 33ff 	movlt.w	r3, #4294967295
 800a2f0:	3402      	adds	r4, #2
 800a2f2:	9305      	str	r3, [sp, #20]
 800a2f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a3c0 <_svfiprintf_r+0x1fc>
 800a2f8:	7821      	ldrb	r1, [r4, #0]
 800a2fa:	2203      	movs	r2, #3
 800a2fc:	4650      	mov	r0, sl
 800a2fe:	f7f5 ffa7 	bl	8000250 <memchr>
 800a302:	b140      	cbz	r0, 800a316 <_svfiprintf_r+0x152>
 800a304:	2340      	movs	r3, #64	; 0x40
 800a306:	eba0 000a 	sub.w	r0, r0, sl
 800a30a:	fa03 f000 	lsl.w	r0, r3, r0
 800a30e:	9b04      	ldr	r3, [sp, #16]
 800a310:	4303      	orrs	r3, r0
 800a312:	3401      	adds	r4, #1
 800a314:	9304      	str	r3, [sp, #16]
 800a316:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a31a:	4826      	ldr	r0, [pc, #152]	; (800a3b4 <_svfiprintf_r+0x1f0>)
 800a31c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a320:	2206      	movs	r2, #6
 800a322:	f7f5 ff95 	bl	8000250 <memchr>
 800a326:	2800      	cmp	r0, #0
 800a328:	d038      	beq.n	800a39c <_svfiprintf_r+0x1d8>
 800a32a:	4b23      	ldr	r3, [pc, #140]	; (800a3b8 <_svfiprintf_r+0x1f4>)
 800a32c:	bb1b      	cbnz	r3, 800a376 <_svfiprintf_r+0x1b2>
 800a32e:	9b03      	ldr	r3, [sp, #12]
 800a330:	3307      	adds	r3, #7
 800a332:	f023 0307 	bic.w	r3, r3, #7
 800a336:	3308      	adds	r3, #8
 800a338:	9303      	str	r3, [sp, #12]
 800a33a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a33c:	4433      	add	r3, r6
 800a33e:	9309      	str	r3, [sp, #36]	; 0x24
 800a340:	e767      	b.n	800a212 <_svfiprintf_r+0x4e>
 800a342:	fb0c 3202 	mla	r2, ip, r2, r3
 800a346:	460c      	mov	r4, r1
 800a348:	2001      	movs	r0, #1
 800a34a:	e7a5      	b.n	800a298 <_svfiprintf_r+0xd4>
 800a34c:	2300      	movs	r3, #0
 800a34e:	3401      	adds	r4, #1
 800a350:	9305      	str	r3, [sp, #20]
 800a352:	4619      	mov	r1, r3
 800a354:	f04f 0c0a 	mov.w	ip, #10
 800a358:	4620      	mov	r0, r4
 800a35a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a35e:	3a30      	subs	r2, #48	; 0x30
 800a360:	2a09      	cmp	r2, #9
 800a362:	d903      	bls.n	800a36c <_svfiprintf_r+0x1a8>
 800a364:	2b00      	cmp	r3, #0
 800a366:	d0c5      	beq.n	800a2f4 <_svfiprintf_r+0x130>
 800a368:	9105      	str	r1, [sp, #20]
 800a36a:	e7c3      	b.n	800a2f4 <_svfiprintf_r+0x130>
 800a36c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a370:	4604      	mov	r4, r0
 800a372:	2301      	movs	r3, #1
 800a374:	e7f0      	b.n	800a358 <_svfiprintf_r+0x194>
 800a376:	ab03      	add	r3, sp, #12
 800a378:	9300      	str	r3, [sp, #0]
 800a37a:	462a      	mov	r2, r5
 800a37c:	4b0f      	ldr	r3, [pc, #60]	; (800a3bc <_svfiprintf_r+0x1f8>)
 800a37e:	a904      	add	r1, sp, #16
 800a380:	4638      	mov	r0, r7
 800a382:	f7fb ffc5 	bl	8006310 <_printf_float>
 800a386:	1c42      	adds	r2, r0, #1
 800a388:	4606      	mov	r6, r0
 800a38a:	d1d6      	bne.n	800a33a <_svfiprintf_r+0x176>
 800a38c:	89ab      	ldrh	r3, [r5, #12]
 800a38e:	065b      	lsls	r3, r3, #25
 800a390:	f53f af2c 	bmi.w	800a1ec <_svfiprintf_r+0x28>
 800a394:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a396:	b01d      	add	sp, #116	; 0x74
 800a398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a39c:	ab03      	add	r3, sp, #12
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	462a      	mov	r2, r5
 800a3a2:	4b06      	ldr	r3, [pc, #24]	; (800a3bc <_svfiprintf_r+0x1f8>)
 800a3a4:	a904      	add	r1, sp, #16
 800a3a6:	4638      	mov	r0, r7
 800a3a8:	f7fc fa3e 	bl	8006828 <_printf_i>
 800a3ac:	e7eb      	b.n	800a386 <_svfiprintf_r+0x1c2>
 800a3ae:	bf00      	nop
 800a3b0:	0800b2d4 	.word	0x0800b2d4
 800a3b4:	0800b2de 	.word	0x0800b2de
 800a3b8:	08006311 	.word	0x08006311
 800a3bc:	0800a10d 	.word	0x0800a10d
 800a3c0:	0800b2da 	.word	0x0800b2da

0800a3c4 <__sfputc_r>:
 800a3c4:	6893      	ldr	r3, [r2, #8]
 800a3c6:	3b01      	subs	r3, #1
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	b410      	push	{r4}
 800a3cc:	6093      	str	r3, [r2, #8]
 800a3ce:	da08      	bge.n	800a3e2 <__sfputc_r+0x1e>
 800a3d0:	6994      	ldr	r4, [r2, #24]
 800a3d2:	42a3      	cmp	r3, r4
 800a3d4:	db01      	blt.n	800a3da <__sfputc_r+0x16>
 800a3d6:	290a      	cmp	r1, #10
 800a3d8:	d103      	bne.n	800a3e2 <__sfputc_r+0x1e>
 800a3da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3de:	f7fd bc95 	b.w	8007d0c <__swbuf_r>
 800a3e2:	6813      	ldr	r3, [r2, #0]
 800a3e4:	1c58      	adds	r0, r3, #1
 800a3e6:	6010      	str	r0, [r2, #0]
 800a3e8:	7019      	strb	r1, [r3, #0]
 800a3ea:	4608      	mov	r0, r1
 800a3ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3f0:	4770      	bx	lr

0800a3f2 <__sfputs_r>:
 800a3f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3f4:	4606      	mov	r6, r0
 800a3f6:	460f      	mov	r7, r1
 800a3f8:	4614      	mov	r4, r2
 800a3fa:	18d5      	adds	r5, r2, r3
 800a3fc:	42ac      	cmp	r4, r5
 800a3fe:	d101      	bne.n	800a404 <__sfputs_r+0x12>
 800a400:	2000      	movs	r0, #0
 800a402:	e007      	b.n	800a414 <__sfputs_r+0x22>
 800a404:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a408:	463a      	mov	r2, r7
 800a40a:	4630      	mov	r0, r6
 800a40c:	f7ff ffda 	bl	800a3c4 <__sfputc_r>
 800a410:	1c43      	adds	r3, r0, #1
 800a412:	d1f3      	bne.n	800a3fc <__sfputs_r+0xa>
 800a414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a418 <_vfiprintf_r>:
 800a418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a41c:	460d      	mov	r5, r1
 800a41e:	b09d      	sub	sp, #116	; 0x74
 800a420:	4614      	mov	r4, r2
 800a422:	4698      	mov	r8, r3
 800a424:	4606      	mov	r6, r0
 800a426:	b118      	cbz	r0, 800a430 <_vfiprintf_r+0x18>
 800a428:	6983      	ldr	r3, [r0, #24]
 800a42a:	b90b      	cbnz	r3, 800a430 <_vfiprintf_r+0x18>
 800a42c:	f7fe fc58 	bl	8008ce0 <__sinit>
 800a430:	4b89      	ldr	r3, [pc, #548]	; (800a658 <_vfiprintf_r+0x240>)
 800a432:	429d      	cmp	r5, r3
 800a434:	d11b      	bne.n	800a46e <_vfiprintf_r+0x56>
 800a436:	6875      	ldr	r5, [r6, #4]
 800a438:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a43a:	07d9      	lsls	r1, r3, #31
 800a43c:	d405      	bmi.n	800a44a <_vfiprintf_r+0x32>
 800a43e:	89ab      	ldrh	r3, [r5, #12]
 800a440:	059a      	lsls	r2, r3, #22
 800a442:	d402      	bmi.n	800a44a <_vfiprintf_r+0x32>
 800a444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a446:	f7ff f85c 	bl	8009502 <__retarget_lock_acquire_recursive>
 800a44a:	89ab      	ldrh	r3, [r5, #12]
 800a44c:	071b      	lsls	r3, r3, #28
 800a44e:	d501      	bpl.n	800a454 <_vfiprintf_r+0x3c>
 800a450:	692b      	ldr	r3, [r5, #16]
 800a452:	b9eb      	cbnz	r3, 800a490 <_vfiprintf_r+0x78>
 800a454:	4629      	mov	r1, r5
 800a456:	4630      	mov	r0, r6
 800a458:	f7fd fcaa 	bl	8007db0 <__swsetup_r>
 800a45c:	b1c0      	cbz	r0, 800a490 <_vfiprintf_r+0x78>
 800a45e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a460:	07dc      	lsls	r4, r3, #31
 800a462:	d50e      	bpl.n	800a482 <_vfiprintf_r+0x6a>
 800a464:	f04f 30ff 	mov.w	r0, #4294967295
 800a468:	b01d      	add	sp, #116	; 0x74
 800a46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a46e:	4b7b      	ldr	r3, [pc, #492]	; (800a65c <_vfiprintf_r+0x244>)
 800a470:	429d      	cmp	r5, r3
 800a472:	d101      	bne.n	800a478 <_vfiprintf_r+0x60>
 800a474:	68b5      	ldr	r5, [r6, #8]
 800a476:	e7df      	b.n	800a438 <_vfiprintf_r+0x20>
 800a478:	4b79      	ldr	r3, [pc, #484]	; (800a660 <_vfiprintf_r+0x248>)
 800a47a:	429d      	cmp	r5, r3
 800a47c:	bf08      	it	eq
 800a47e:	68f5      	ldreq	r5, [r6, #12]
 800a480:	e7da      	b.n	800a438 <_vfiprintf_r+0x20>
 800a482:	89ab      	ldrh	r3, [r5, #12]
 800a484:	0598      	lsls	r0, r3, #22
 800a486:	d4ed      	bmi.n	800a464 <_vfiprintf_r+0x4c>
 800a488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a48a:	f7ff f83b 	bl	8009504 <__retarget_lock_release_recursive>
 800a48e:	e7e9      	b.n	800a464 <_vfiprintf_r+0x4c>
 800a490:	2300      	movs	r3, #0
 800a492:	9309      	str	r3, [sp, #36]	; 0x24
 800a494:	2320      	movs	r3, #32
 800a496:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a49a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a49e:	2330      	movs	r3, #48	; 0x30
 800a4a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a664 <_vfiprintf_r+0x24c>
 800a4a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4a8:	f04f 0901 	mov.w	r9, #1
 800a4ac:	4623      	mov	r3, r4
 800a4ae:	469a      	mov	sl, r3
 800a4b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4b4:	b10a      	cbz	r2, 800a4ba <_vfiprintf_r+0xa2>
 800a4b6:	2a25      	cmp	r2, #37	; 0x25
 800a4b8:	d1f9      	bne.n	800a4ae <_vfiprintf_r+0x96>
 800a4ba:	ebba 0b04 	subs.w	fp, sl, r4
 800a4be:	d00b      	beq.n	800a4d8 <_vfiprintf_r+0xc0>
 800a4c0:	465b      	mov	r3, fp
 800a4c2:	4622      	mov	r2, r4
 800a4c4:	4629      	mov	r1, r5
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	f7ff ff93 	bl	800a3f2 <__sfputs_r>
 800a4cc:	3001      	adds	r0, #1
 800a4ce:	f000 80aa 	beq.w	800a626 <_vfiprintf_r+0x20e>
 800a4d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4d4:	445a      	add	r2, fp
 800a4d6:	9209      	str	r2, [sp, #36]	; 0x24
 800a4d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f000 80a2 	beq.w	800a626 <_vfiprintf_r+0x20e>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4ec:	f10a 0a01 	add.w	sl, sl, #1
 800a4f0:	9304      	str	r3, [sp, #16]
 800a4f2:	9307      	str	r3, [sp, #28]
 800a4f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4f8:	931a      	str	r3, [sp, #104]	; 0x68
 800a4fa:	4654      	mov	r4, sl
 800a4fc:	2205      	movs	r2, #5
 800a4fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a502:	4858      	ldr	r0, [pc, #352]	; (800a664 <_vfiprintf_r+0x24c>)
 800a504:	f7f5 fea4 	bl	8000250 <memchr>
 800a508:	9a04      	ldr	r2, [sp, #16]
 800a50a:	b9d8      	cbnz	r0, 800a544 <_vfiprintf_r+0x12c>
 800a50c:	06d1      	lsls	r1, r2, #27
 800a50e:	bf44      	itt	mi
 800a510:	2320      	movmi	r3, #32
 800a512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a516:	0713      	lsls	r3, r2, #28
 800a518:	bf44      	itt	mi
 800a51a:	232b      	movmi	r3, #43	; 0x2b
 800a51c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a520:	f89a 3000 	ldrb.w	r3, [sl]
 800a524:	2b2a      	cmp	r3, #42	; 0x2a
 800a526:	d015      	beq.n	800a554 <_vfiprintf_r+0x13c>
 800a528:	9a07      	ldr	r2, [sp, #28]
 800a52a:	4654      	mov	r4, sl
 800a52c:	2000      	movs	r0, #0
 800a52e:	f04f 0c0a 	mov.w	ip, #10
 800a532:	4621      	mov	r1, r4
 800a534:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a538:	3b30      	subs	r3, #48	; 0x30
 800a53a:	2b09      	cmp	r3, #9
 800a53c:	d94e      	bls.n	800a5dc <_vfiprintf_r+0x1c4>
 800a53e:	b1b0      	cbz	r0, 800a56e <_vfiprintf_r+0x156>
 800a540:	9207      	str	r2, [sp, #28]
 800a542:	e014      	b.n	800a56e <_vfiprintf_r+0x156>
 800a544:	eba0 0308 	sub.w	r3, r0, r8
 800a548:	fa09 f303 	lsl.w	r3, r9, r3
 800a54c:	4313      	orrs	r3, r2
 800a54e:	9304      	str	r3, [sp, #16]
 800a550:	46a2      	mov	sl, r4
 800a552:	e7d2      	b.n	800a4fa <_vfiprintf_r+0xe2>
 800a554:	9b03      	ldr	r3, [sp, #12]
 800a556:	1d19      	adds	r1, r3, #4
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	9103      	str	r1, [sp, #12]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	bfbb      	ittet	lt
 800a560:	425b      	neglt	r3, r3
 800a562:	f042 0202 	orrlt.w	r2, r2, #2
 800a566:	9307      	strge	r3, [sp, #28]
 800a568:	9307      	strlt	r3, [sp, #28]
 800a56a:	bfb8      	it	lt
 800a56c:	9204      	strlt	r2, [sp, #16]
 800a56e:	7823      	ldrb	r3, [r4, #0]
 800a570:	2b2e      	cmp	r3, #46	; 0x2e
 800a572:	d10c      	bne.n	800a58e <_vfiprintf_r+0x176>
 800a574:	7863      	ldrb	r3, [r4, #1]
 800a576:	2b2a      	cmp	r3, #42	; 0x2a
 800a578:	d135      	bne.n	800a5e6 <_vfiprintf_r+0x1ce>
 800a57a:	9b03      	ldr	r3, [sp, #12]
 800a57c:	1d1a      	adds	r2, r3, #4
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	9203      	str	r2, [sp, #12]
 800a582:	2b00      	cmp	r3, #0
 800a584:	bfb8      	it	lt
 800a586:	f04f 33ff 	movlt.w	r3, #4294967295
 800a58a:	3402      	adds	r4, #2
 800a58c:	9305      	str	r3, [sp, #20]
 800a58e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a674 <_vfiprintf_r+0x25c>
 800a592:	7821      	ldrb	r1, [r4, #0]
 800a594:	2203      	movs	r2, #3
 800a596:	4650      	mov	r0, sl
 800a598:	f7f5 fe5a 	bl	8000250 <memchr>
 800a59c:	b140      	cbz	r0, 800a5b0 <_vfiprintf_r+0x198>
 800a59e:	2340      	movs	r3, #64	; 0x40
 800a5a0:	eba0 000a 	sub.w	r0, r0, sl
 800a5a4:	fa03 f000 	lsl.w	r0, r3, r0
 800a5a8:	9b04      	ldr	r3, [sp, #16]
 800a5aa:	4303      	orrs	r3, r0
 800a5ac:	3401      	adds	r4, #1
 800a5ae:	9304      	str	r3, [sp, #16]
 800a5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5b4:	482c      	ldr	r0, [pc, #176]	; (800a668 <_vfiprintf_r+0x250>)
 800a5b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5ba:	2206      	movs	r2, #6
 800a5bc:	f7f5 fe48 	bl	8000250 <memchr>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d03f      	beq.n	800a644 <_vfiprintf_r+0x22c>
 800a5c4:	4b29      	ldr	r3, [pc, #164]	; (800a66c <_vfiprintf_r+0x254>)
 800a5c6:	bb1b      	cbnz	r3, 800a610 <_vfiprintf_r+0x1f8>
 800a5c8:	9b03      	ldr	r3, [sp, #12]
 800a5ca:	3307      	adds	r3, #7
 800a5cc:	f023 0307 	bic.w	r3, r3, #7
 800a5d0:	3308      	adds	r3, #8
 800a5d2:	9303      	str	r3, [sp, #12]
 800a5d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5d6:	443b      	add	r3, r7
 800a5d8:	9309      	str	r3, [sp, #36]	; 0x24
 800a5da:	e767      	b.n	800a4ac <_vfiprintf_r+0x94>
 800a5dc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5e0:	460c      	mov	r4, r1
 800a5e2:	2001      	movs	r0, #1
 800a5e4:	e7a5      	b.n	800a532 <_vfiprintf_r+0x11a>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	3401      	adds	r4, #1
 800a5ea:	9305      	str	r3, [sp, #20]
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	f04f 0c0a 	mov.w	ip, #10
 800a5f2:	4620      	mov	r0, r4
 800a5f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5f8:	3a30      	subs	r2, #48	; 0x30
 800a5fa:	2a09      	cmp	r2, #9
 800a5fc:	d903      	bls.n	800a606 <_vfiprintf_r+0x1ee>
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d0c5      	beq.n	800a58e <_vfiprintf_r+0x176>
 800a602:	9105      	str	r1, [sp, #20]
 800a604:	e7c3      	b.n	800a58e <_vfiprintf_r+0x176>
 800a606:	fb0c 2101 	mla	r1, ip, r1, r2
 800a60a:	4604      	mov	r4, r0
 800a60c:	2301      	movs	r3, #1
 800a60e:	e7f0      	b.n	800a5f2 <_vfiprintf_r+0x1da>
 800a610:	ab03      	add	r3, sp, #12
 800a612:	9300      	str	r3, [sp, #0]
 800a614:	462a      	mov	r2, r5
 800a616:	4b16      	ldr	r3, [pc, #88]	; (800a670 <_vfiprintf_r+0x258>)
 800a618:	a904      	add	r1, sp, #16
 800a61a:	4630      	mov	r0, r6
 800a61c:	f7fb fe78 	bl	8006310 <_printf_float>
 800a620:	4607      	mov	r7, r0
 800a622:	1c78      	adds	r0, r7, #1
 800a624:	d1d6      	bne.n	800a5d4 <_vfiprintf_r+0x1bc>
 800a626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a628:	07d9      	lsls	r1, r3, #31
 800a62a:	d405      	bmi.n	800a638 <_vfiprintf_r+0x220>
 800a62c:	89ab      	ldrh	r3, [r5, #12]
 800a62e:	059a      	lsls	r2, r3, #22
 800a630:	d402      	bmi.n	800a638 <_vfiprintf_r+0x220>
 800a632:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a634:	f7fe ff66 	bl	8009504 <__retarget_lock_release_recursive>
 800a638:	89ab      	ldrh	r3, [r5, #12]
 800a63a:	065b      	lsls	r3, r3, #25
 800a63c:	f53f af12 	bmi.w	800a464 <_vfiprintf_r+0x4c>
 800a640:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a642:	e711      	b.n	800a468 <_vfiprintf_r+0x50>
 800a644:	ab03      	add	r3, sp, #12
 800a646:	9300      	str	r3, [sp, #0]
 800a648:	462a      	mov	r2, r5
 800a64a:	4b09      	ldr	r3, [pc, #36]	; (800a670 <_vfiprintf_r+0x258>)
 800a64c:	a904      	add	r1, sp, #16
 800a64e:	4630      	mov	r0, r6
 800a650:	f7fc f8ea 	bl	8006828 <_printf_i>
 800a654:	e7e4      	b.n	800a620 <_vfiprintf_r+0x208>
 800a656:	bf00      	nop
 800a658:	0800b0b8 	.word	0x0800b0b8
 800a65c:	0800b0d8 	.word	0x0800b0d8
 800a660:	0800b098 	.word	0x0800b098
 800a664:	0800b2d4 	.word	0x0800b2d4
 800a668:	0800b2de 	.word	0x0800b2de
 800a66c:	08006311 	.word	0x08006311
 800a670:	0800a3f3 	.word	0x0800a3f3
 800a674:	0800b2da 	.word	0x0800b2da

0800a678 <_putc_r>:
 800a678:	b570      	push	{r4, r5, r6, lr}
 800a67a:	460d      	mov	r5, r1
 800a67c:	4614      	mov	r4, r2
 800a67e:	4606      	mov	r6, r0
 800a680:	b118      	cbz	r0, 800a68a <_putc_r+0x12>
 800a682:	6983      	ldr	r3, [r0, #24]
 800a684:	b90b      	cbnz	r3, 800a68a <_putc_r+0x12>
 800a686:	f7fe fb2b 	bl	8008ce0 <__sinit>
 800a68a:	4b1c      	ldr	r3, [pc, #112]	; (800a6fc <_putc_r+0x84>)
 800a68c:	429c      	cmp	r4, r3
 800a68e:	d124      	bne.n	800a6da <_putc_r+0x62>
 800a690:	6874      	ldr	r4, [r6, #4]
 800a692:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a694:	07d8      	lsls	r0, r3, #31
 800a696:	d405      	bmi.n	800a6a4 <_putc_r+0x2c>
 800a698:	89a3      	ldrh	r3, [r4, #12]
 800a69a:	0599      	lsls	r1, r3, #22
 800a69c:	d402      	bmi.n	800a6a4 <_putc_r+0x2c>
 800a69e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6a0:	f7fe ff2f 	bl	8009502 <__retarget_lock_acquire_recursive>
 800a6a4:	68a3      	ldr	r3, [r4, #8]
 800a6a6:	3b01      	subs	r3, #1
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	60a3      	str	r3, [r4, #8]
 800a6ac:	da05      	bge.n	800a6ba <_putc_r+0x42>
 800a6ae:	69a2      	ldr	r2, [r4, #24]
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	db1c      	blt.n	800a6ee <_putc_r+0x76>
 800a6b4:	b2eb      	uxtb	r3, r5
 800a6b6:	2b0a      	cmp	r3, #10
 800a6b8:	d019      	beq.n	800a6ee <_putc_r+0x76>
 800a6ba:	6823      	ldr	r3, [r4, #0]
 800a6bc:	1c5a      	adds	r2, r3, #1
 800a6be:	6022      	str	r2, [r4, #0]
 800a6c0:	701d      	strb	r5, [r3, #0]
 800a6c2:	b2ed      	uxtb	r5, r5
 800a6c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6c6:	07da      	lsls	r2, r3, #31
 800a6c8:	d405      	bmi.n	800a6d6 <_putc_r+0x5e>
 800a6ca:	89a3      	ldrh	r3, [r4, #12]
 800a6cc:	059b      	lsls	r3, r3, #22
 800a6ce:	d402      	bmi.n	800a6d6 <_putc_r+0x5e>
 800a6d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6d2:	f7fe ff17 	bl	8009504 <__retarget_lock_release_recursive>
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	bd70      	pop	{r4, r5, r6, pc}
 800a6da:	4b09      	ldr	r3, [pc, #36]	; (800a700 <_putc_r+0x88>)
 800a6dc:	429c      	cmp	r4, r3
 800a6de:	d101      	bne.n	800a6e4 <_putc_r+0x6c>
 800a6e0:	68b4      	ldr	r4, [r6, #8]
 800a6e2:	e7d6      	b.n	800a692 <_putc_r+0x1a>
 800a6e4:	4b07      	ldr	r3, [pc, #28]	; (800a704 <_putc_r+0x8c>)
 800a6e6:	429c      	cmp	r4, r3
 800a6e8:	bf08      	it	eq
 800a6ea:	68f4      	ldreq	r4, [r6, #12]
 800a6ec:	e7d1      	b.n	800a692 <_putc_r+0x1a>
 800a6ee:	4629      	mov	r1, r5
 800a6f0:	4622      	mov	r2, r4
 800a6f2:	4630      	mov	r0, r6
 800a6f4:	f7fd fb0a 	bl	8007d0c <__swbuf_r>
 800a6f8:	4605      	mov	r5, r0
 800a6fa:	e7e3      	b.n	800a6c4 <_putc_r+0x4c>
 800a6fc:	0800b0b8 	.word	0x0800b0b8
 800a700:	0800b0d8 	.word	0x0800b0d8
 800a704:	0800b098 	.word	0x0800b098

0800a708 <nan>:
 800a708:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a710 <nan+0x8>
 800a70c:	4770      	bx	lr
 800a70e:	bf00      	nop
 800a710:	00000000 	.word	0x00000000
 800a714:	7ff80000 	.word	0x7ff80000

0800a718 <_sbrk_r>:
 800a718:	b538      	push	{r3, r4, r5, lr}
 800a71a:	4d06      	ldr	r5, [pc, #24]	; (800a734 <_sbrk_r+0x1c>)
 800a71c:	2300      	movs	r3, #0
 800a71e:	4604      	mov	r4, r0
 800a720:	4608      	mov	r0, r1
 800a722:	602b      	str	r3, [r5, #0]
 800a724:	f7f7 fcca 	bl	80020bc <_sbrk>
 800a728:	1c43      	adds	r3, r0, #1
 800a72a:	d102      	bne.n	800a732 <_sbrk_r+0x1a>
 800a72c:	682b      	ldr	r3, [r5, #0]
 800a72e:	b103      	cbz	r3, 800a732 <_sbrk_r+0x1a>
 800a730:	6023      	str	r3, [r4, #0]
 800a732:	bd38      	pop	{r3, r4, r5, pc}
 800a734:	20000584 	.word	0x20000584

0800a738 <__sread>:
 800a738:	b510      	push	{r4, lr}
 800a73a:	460c      	mov	r4, r1
 800a73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a740:	f000 f92e 	bl	800a9a0 <_read_r>
 800a744:	2800      	cmp	r0, #0
 800a746:	bfab      	itete	ge
 800a748:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a74a:	89a3      	ldrhlt	r3, [r4, #12]
 800a74c:	181b      	addge	r3, r3, r0
 800a74e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a752:	bfac      	ite	ge
 800a754:	6563      	strge	r3, [r4, #84]	; 0x54
 800a756:	81a3      	strhlt	r3, [r4, #12]
 800a758:	bd10      	pop	{r4, pc}

0800a75a <__swrite>:
 800a75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a75e:	461f      	mov	r7, r3
 800a760:	898b      	ldrh	r3, [r1, #12]
 800a762:	05db      	lsls	r3, r3, #23
 800a764:	4605      	mov	r5, r0
 800a766:	460c      	mov	r4, r1
 800a768:	4616      	mov	r6, r2
 800a76a:	d505      	bpl.n	800a778 <__swrite+0x1e>
 800a76c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a770:	2302      	movs	r3, #2
 800a772:	2200      	movs	r2, #0
 800a774:	f000 f8b6 	bl	800a8e4 <_lseek_r>
 800a778:	89a3      	ldrh	r3, [r4, #12]
 800a77a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a77e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a782:	81a3      	strh	r3, [r4, #12]
 800a784:	4632      	mov	r2, r6
 800a786:	463b      	mov	r3, r7
 800a788:	4628      	mov	r0, r5
 800a78a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a78e:	f000 b835 	b.w	800a7fc <_write_r>

0800a792 <__sseek>:
 800a792:	b510      	push	{r4, lr}
 800a794:	460c      	mov	r4, r1
 800a796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a79a:	f000 f8a3 	bl	800a8e4 <_lseek_r>
 800a79e:	1c43      	adds	r3, r0, #1
 800a7a0:	89a3      	ldrh	r3, [r4, #12]
 800a7a2:	bf15      	itete	ne
 800a7a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a7a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a7aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a7ae:	81a3      	strheq	r3, [r4, #12]
 800a7b0:	bf18      	it	ne
 800a7b2:	81a3      	strhne	r3, [r4, #12]
 800a7b4:	bd10      	pop	{r4, pc}

0800a7b6 <__sclose>:
 800a7b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7ba:	f000 b84f 	b.w	800a85c <_close_r>

0800a7be <strncmp>:
 800a7be:	b510      	push	{r4, lr}
 800a7c0:	b16a      	cbz	r2, 800a7de <strncmp+0x20>
 800a7c2:	3901      	subs	r1, #1
 800a7c4:	1884      	adds	r4, r0, r2
 800a7c6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a7ca:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d103      	bne.n	800a7da <strncmp+0x1c>
 800a7d2:	42a0      	cmp	r0, r4
 800a7d4:	d001      	beq.n	800a7da <strncmp+0x1c>
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1f5      	bne.n	800a7c6 <strncmp+0x8>
 800a7da:	1a98      	subs	r0, r3, r2
 800a7dc:	bd10      	pop	{r4, pc}
 800a7de:	4610      	mov	r0, r2
 800a7e0:	e7fc      	b.n	800a7dc <strncmp+0x1e>

0800a7e2 <__ascii_wctomb>:
 800a7e2:	b149      	cbz	r1, 800a7f8 <__ascii_wctomb+0x16>
 800a7e4:	2aff      	cmp	r2, #255	; 0xff
 800a7e6:	bf85      	ittet	hi
 800a7e8:	238a      	movhi	r3, #138	; 0x8a
 800a7ea:	6003      	strhi	r3, [r0, #0]
 800a7ec:	700a      	strbls	r2, [r1, #0]
 800a7ee:	f04f 30ff 	movhi.w	r0, #4294967295
 800a7f2:	bf98      	it	ls
 800a7f4:	2001      	movls	r0, #1
 800a7f6:	4770      	bx	lr
 800a7f8:	4608      	mov	r0, r1
 800a7fa:	4770      	bx	lr

0800a7fc <_write_r>:
 800a7fc:	b538      	push	{r3, r4, r5, lr}
 800a7fe:	4d07      	ldr	r5, [pc, #28]	; (800a81c <_write_r+0x20>)
 800a800:	4604      	mov	r4, r0
 800a802:	4608      	mov	r0, r1
 800a804:	4611      	mov	r1, r2
 800a806:	2200      	movs	r2, #0
 800a808:	602a      	str	r2, [r5, #0]
 800a80a:	461a      	mov	r2, r3
 800a80c:	f7f7 fc05 	bl	800201a <_write>
 800a810:	1c43      	adds	r3, r0, #1
 800a812:	d102      	bne.n	800a81a <_write_r+0x1e>
 800a814:	682b      	ldr	r3, [r5, #0]
 800a816:	b103      	cbz	r3, 800a81a <_write_r+0x1e>
 800a818:	6023      	str	r3, [r4, #0]
 800a81a:	bd38      	pop	{r3, r4, r5, pc}
 800a81c:	20000584 	.word	0x20000584

0800a820 <__assert_func>:
 800a820:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a822:	4614      	mov	r4, r2
 800a824:	461a      	mov	r2, r3
 800a826:	4b09      	ldr	r3, [pc, #36]	; (800a84c <__assert_func+0x2c>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4605      	mov	r5, r0
 800a82c:	68d8      	ldr	r0, [r3, #12]
 800a82e:	b14c      	cbz	r4, 800a844 <__assert_func+0x24>
 800a830:	4b07      	ldr	r3, [pc, #28]	; (800a850 <__assert_func+0x30>)
 800a832:	9100      	str	r1, [sp, #0]
 800a834:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a838:	4906      	ldr	r1, [pc, #24]	; (800a854 <__assert_func+0x34>)
 800a83a:	462b      	mov	r3, r5
 800a83c:	f000 f81e 	bl	800a87c <fiprintf>
 800a840:	f000 f8c0 	bl	800a9c4 <abort>
 800a844:	4b04      	ldr	r3, [pc, #16]	; (800a858 <__assert_func+0x38>)
 800a846:	461c      	mov	r4, r3
 800a848:	e7f3      	b.n	800a832 <__assert_func+0x12>
 800a84a:	bf00      	nop
 800a84c:	20000010 	.word	0x20000010
 800a850:	0800b2e5 	.word	0x0800b2e5
 800a854:	0800b2f2 	.word	0x0800b2f2
 800a858:	0800b320 	.word	0x0800b320

0800a85c <_close_r>:
 800a85c:	b538      	push	{r3, r4, r5, lr}
 800a85e:	4d06      	ldr	r5, [pc, #24]	; (800a878 <_close_r+0x1c>)
 800a860:	2300      	movs	r3, #0
 800a862:	4604      	mov	r4, r0
 800a864:	4608      	mov	r0, r1
 800a866:	602b      	str	r3, [r5, #0]
 800a868:	f7f7 fbf3 	bl	8002052 <_close>
 800a86c:	1c43      	adds	r3, r0, #1
 800a86e:	d102      	bne.n	800a876 <_close_r+0x1a>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	b103      	cbz	r3, 800a876 <_close_r+0x1a>
 800a874:	6023      	str	r3, [r4, #0]
 800a876:	bd38      	pop	{r3, r4, r5, pc}
 800a878:	20000584 	.word	0x20000584

0800a87c <fiprintf>:
 800a87c:	b40e      	push	{r1, r2, r3}
 800a87e:	b503      	push	{r0, r1, lr}
 800a880:	4601      	mov	r1, r0
 800a882:	ab03      	add	r3, sp, #12
 800a884:	4805      	ldr	r0, [pc, #20]	; (800a89c <fiprintf+0x20>)
 800a886:	f853 2b04 	ldr.w	r2, [r3], #4
 800a88a:	6800      	ldr	r0, [r0, #0]
 800a88c:	9301      	str	r3, [sp, #4]
 800a88e:	f7ff fdc3 	bl	800a418 <_vfiprintf_r>
 800a892:	b002      	add	sp, #8
 800a894:	f85d eb04 	ldr.w	lr, [sp], #4
 800a898:	b003      	add	sp, #12
 800a89a:	4770      	bx	lr
 800a89c:	20000010 	.word	0x20000010

0800a8a0 <_fstat_r>:
 800a8a0:	b538      	push	{r3, r4, r5, lr}
 800a8a2:	4d07      	ldr	r5, [pc, #28]	; (800a8c0 <_fstat_r+0x20>)
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	4604      	mov	r4, r0
 800a8a8:	4608      	mov	r0, r1
 800a8aa:	4611      	mov	r1, r2
 800a8ac:	602b      	str	r3, [r5, #0]
 800a8ae:	f7f7 fbdc 	bl	800206a <_fstat>
 800a8b2:	1c43      	adds	r3, r0, #1
 800a8b4:	d102      	bne.n	800a8bc <_fstat_r+0x1c>
 800a8b6:	682b      	ldr	r3, [r5, #0]
 800a8b8:	b103      	cbz	r3, 800a8bc <_fstat_r+0x1c>
 800a8ba:	6023      	str	r3, [r4, #0]
 800a8bc:	bd38      	pop	{r3, r4, r5, pc}
 800a8be:	bf00      	nop
 800a8c0:	20000584 	.word	0x20000584

0800a8c4 <_isatty_r>:
 800a8c4:	b538      	push	{r3, r4, r5, lr}
 800a8c6:	4d06      	ldr	r5, [pc, #24]	; (800a8e0 <_isatty_r+0x1c>)
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	4608      	mov	r0, r1
 800a8ce:	602b      	str	r3, [r5, #0]
 800a8d0:	f7f7 fbdb 	bl	800208a <_isatty>
 800a8d4:	1c43      	adds	r3, r0, #1
 800a8d6:	d102      	bne.n	800a8de <_isatty_r+0x1a>
 800a8d8:	682b      	ldr	r3, [r5, #0]
 800a8da:	b103      	cbz	r3, 800a8de <_isatty_r+0x1a>
 800a8dc:	6023      	str	r3, [r4, #0]
 800a8de:	bd38      	pop	{r3, r4, r5, pc}
 800a8e0:	20000584 	.word	0x20000584

0800a8e4 <_lseek_r>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	4d07      	ldr	r5, [pc, #28]	; (800a904 <_lseek_r+0x20>)
 800a8e8:	4604      	mov	r4, r0
 800a8ea:	4608      	mov	r0, r1
 800a8ec:	4611      	mov	r1, r2
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	602a      	str	r2, [r5, #0]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	f7f7 fbd4 	bl	80020a0 <_lseek>
 800a8f8:	1c43      	adds	r3, r0, #1
 800a8fa:	d102      	bne.n	800a902 <_lseek_r+0x1e>
 800a8fc:	682b      	ldr	r3, [r5, #0]
 800a8fe:	b103      	cbz	r3, 800a902 <_lseek_r+0x1e>
 800a900:	6023      	str	r3, [r4, #0]
 800a902:	bd38      	pop	{r3, r4, r5, pc}
 800a904:	20000584 	.word	0x20000584

0800a908 <memmove>:
 800a908:	4288      	cmp	r0, r1
 800a90a:	b510      	push	{r4, lr}
 800a90c:	eb01 0402 	add.w	r4, r1, r2
 800a910:	d902      	bls.n	800a918 <memmove+0x10>
 800a912:	4284      	cmp	r4, r0
 800a914:	4623      	mov	r3, r4
 800a916:	d807      	bhi.n	800a928 <memmove+0x20>
 800a918:	1e43      	subs	r3, r0, #1
 800a91a:	42a1      	cmp	r1, r4
 800a91c:	d008      	beq.n	800a930 <memmove+0x28>
 800a91e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a922:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a926:	e7f8      	b.n	800a91a <memmove+0x12>
 800a928:	4402      	add	r2, r0
 800a92a:	4601      	mov	r1, r0
 800a92c:	428a      	cmp	r2, r1
 800a92e:	d100      	bne.n	800a932 <memmove+0x2a>
 800a930:	bd10      	pop	{r4, pc}
 800a932:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a936:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a93a:	e7f7      	b.n	800a92c <memmove+0x24>

0800a93c <__malloc_lock>:
 800a93c:	4801      	ldr	r0, [pc, #4]	; (800a944 <__malloc_lock+0x8>)
 800a93e:	f7fe bde0 	b.w	8009502 <__retarget_lock_acquire_recursive>
 800a942:	bf00      	nop
 800a944:	2000057c 	.word	0x2000057c

0800a948 <__malloc_unlock>:
 800a948:	4801      	ldr	r0, [pc, #4]	; (800a950 <__malloc_unlock+0x8>)
 800a94a:	f7fe bddb 	b.w	8009504 <__retarget_lock_release_recursive>
 800a94e:	bf00      	nop
 800a950:	2000057c 	.word	0x2000057c

0800a954 <_realloc_r>:
 800a954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a956:	4607      	mov	r7, r0
 800a958:	4614      	mov	r4, r2
 800a95a:	460e      	mov	r6, r1
 800a95c:	b921      	cbnz	r1, 800a968 <_realloc_r+0x14>
 800a95e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a962:	4611      	mov	r1, r2
 800a964:	f7ff bb78 	b.w	800a058 <_malloc_r>
 800a968:	b922      	cbnz	r2, 800a974 <_realloc_r+0x20>
 800a96a:	f7ff fb25 	bl	8009fb8 <_free_r>
 800a96e:	4625      	mov	r5, r4
 800a970:	4628      	mov	r0, r5
 800a972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a974:	f000 f82d 	bl	800a9d2 <_malloc_usable_size_r>
 800a978:	42a0      	cmp	r0, r4
 800a97a:	d20f      	bcs.n	800a99c <_realloc_r+0x48>
 800a97c:	4621      	mov	r1, r4
 800a97e:	4638      	mov	r0, r7
 800a980:	f7ff fb6a 	bl	800a058 <_malloc_r>
 800a984:	4605      	mov	r5, r0
 800a986:	2800      	cmp	r0, #0
 800a988:	d0f2      	beq.n	800a970 <_realloc_r+0x1c>
 800a98a:	4631      	mov	r1, r6
 800a98c:	4622      	mov	r2, r4
 800a98e:	f7fe fe39 	bl	8009604 <memcpy>
 800a992:	4631      	mov	r1, r6
 800a994:	4638      	mov	r0, r7
 800a996:	f7ff fb0f 	bl	8009fb8 <_free_r>
 800a99a:	e7e9      	b.n	800a970 <_realloc_r+0x1c>
 800a99c:	4635      	mov	r5, r6
 800a99e:	e7e7      	b.n	800a970 <_realloc_r+0x1c>

0800a9a0 <_read_r>:
 800a9a0:	b538      	push	{r3, r4, r5, lr}
 800a9a2:	4d07      	ldr	r5, [pc, #28]	; (800a9c0 <_read_r+0x20>)
 800a9a4:	4604      	mov	r4, r0
 800a9a6:	4608      	mov	r0, r1
 800a9a8:	4611      	mov	r1, r2
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	602a      	str	r2, [r5, #0]
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	f7f7 fb16 	bl	8001fe0 <_read>
 800a9b4:	1c43      	adds	r3, r0, #1
 800a9b6:	d102      	bne.n	800a9be <_read_r+0x1e>
 800a9b8:	682b      	ldr	r3, [r5, #0]
 800a9ba:	b103      	cbz	r3, 800a9be <_read_r+0x1e>
 800a9bc:	6023      	str	r3, [r4, #0]
 800a9be:	bd38      	pop	{r3, r4, r5, pc}
 800a9c0:	20000584 	.word	0x20000584

0800a9c4 <abort>:
 800a9c4:	b508      	push	{r3, lr}
 800a9c6:	2006      	movs	r0, #6
 800a9c8:	f000 f834 	bl	800aa34 <raise>
 800a9cc:	2001      	movs	r0, #1
 800a9ce:	f7f7 fafd 	bl	8001fcc <_exit>

0800a9d2 <_malloc_usable_size_r>:
 800a9d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9d6:	1f18      	subs	r0, r3, #4
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	bfbc      	itt	lt
 800a9dc:	580b      	ldrlt	r3, [r1, r0]
 800a9de:	18c0      	addlt	r0, r0, r3
 800a9e0:	4770      	bx	lr

0800a9e2 <_raise_r>:
 800a9e2:	291f      	cmp	r1, #31
 800a9e4:	b538      	push	{r3, r4, r5, lr}
 800a9e6:	4604      	mov	r4, r0
 800a9e8:	460d      	mov	r5, r1
 800a9ea:	d904      	bls.n	800a9f6 <_raise_r+0x14>
 800a9ec:	2316      	movs	r3, #22
 800a9ee:	6003      	str	r3, [r0, #0]
 800a9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9f4:	bd38      	pop	{r3, r4, r5, pc}
 800a9f6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a9f8:	b112      	cbz	r2, 800aa00 <_raise_r+0x1e>
 800a9fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9fe:	b94b      	cbnz	r3, 800aa14 <_raise_r+0x32>
 800aa00:	4620      	mov	r0, r4
 800aa02:	f000 f831 	bl	800aa68 <_getpid_r>
 800aa06:	462a      	mov	r2, r5
 800aa08:	4601      	mov	r1, r0
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa10:	f000 b818 	b.w	800aa44 <_kill_r>
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d00a      	beq.n	800aa2e <_raise_r+0x4c>
 800aa18:	1c59      	adds	r1, r3, #1
 800aa1a:	d103      	bne.n	800aa24 <_raise_r+0x42>
 800aa1c:	2316      	movs	r3, #22
 800aa1e:	6003      	str	r3, [r0, #0]
 800aa20:	2001      	movs	r0, #1
 800aa22:	e7e7      	b.n	800a9f4 <_raise_r+0x12>
 800aa24:	2400      	movs	r4, #0
 800aa26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa2a:	4628      	mov	r0, r5
 800aa2c:	4798      	blx	r3
 800aa2e:	2000      	movs	r0, #0
 800aa30:	e7e0      	b.n	800a9f4 <_raise_r+0x12>
	...

0800aa34 <raise>:
 800aa34:	4b02      	ldr	r3, [pc, #8]	; (800aa40 <raise+0xc>)
 800aa36:	4601      	mov	r1, r0
 800aa38:	6818      	ldr	r0, [r3, #0]
 800aa3a:	f7ff bfd2 	b.w	800a9e2 <_raise_r>
 800aa3e:	bf00      	nop
 800aa40:	20000010 	.word	0x20000010

0800aa44 <_kill_r>:
 800aa44:	b538      	push	{r3, r4, r5, lr}
 800aa46:	4d07      	ldr	r5, [pc, #28]	; (800aa64 <_kill_r+0x20>)
 800aa48:	2300      	movs	r3, #0
 800aa4a:	4604      	mov	r4, r0
 800aa4c:	4608      	mov	r0, r1
 800aa4e:	4611      	mov	r1, r2
 800aa50:	602b      	str	r3, [r5, #0]
 800aa52:	f7f7 faab 	bl	8001fac <_kill>
 800aa56:	1c43      	adds	r3, r0, #1
 800aa58:	d102      	bne.n	800aa60 <_kill_r+0x1c>
 800aa5a:	682b      	ldr	r3, [r5, #0]
 800aa5c:	b103      	cbz	r3, 800aa60 <_kill_r+0x1c>
 800aa5e:	6023      	str	r3, [r4, #0]
 800aa60:	bd38      	pop	{r3, r4, r5, pc}
 800aa62:	bf00      	nop
 800aa64:	20000584 	.word	0x20000584

0800aa68 <_getpid_r>:
 800aa68:	f7f7 ba98 	b.w	8001f9c <_getpid>

0800aa6c <_init>:
 800aa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6e:	bf00      	nop
 800aa70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa72:	bc08      	pop	{r3}
 800aa74:	469e      	mov	lr, r3
 800aa76:	4770      	bx	lr

0800aa78 <_fini>:
 800aa78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7a:	bf00      	nop
 800aa7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa7e:	bc08      	pop	{r3}
 800aa80:	469e      	mov	lr, r3
 800aa82:	4770      	bx	lr
